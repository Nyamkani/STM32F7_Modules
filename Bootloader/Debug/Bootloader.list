
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007360  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007834  08007834  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007834  08007834  00017834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800783c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  20000070  080078ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000894  080078ac  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174e1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031fa  00000000  00000000  00037581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c4c  00000000  00000000  0003cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016709  00000000  00000000  0006589c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9184  00000000  00000000  0007bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005734  00000000  00000000  0017517c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007518 	.word	0x08007518

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007518 	.word	0x08007518

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <etx_ota_download_and_flash>:
  * @brief Download the application from UART and flash it.
  * @param None
  * @retval ETX_OTA_EX_
  */
ETX_OTA_EX_ etx_ota_download_and_flash( void )
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  ETX_OTA_EX_ ret  = ETX_OTA_EX_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
  uint16_t    len;

  printf("Waiting for the OTA data...\r\n");
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <etx_ota_download_and_flash+0x88>)
 80005c0:	f006 f82c 	bl	800661c <puts>

  /* Reset the variables */
  ota_fw_total_size    = 0u;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <etx_ota_download_and_flash+0x8c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
  ota_fw_received_size = 0u;
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <etx_ota_download_and_flash+0x90>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
  ota_fw_crc           = 0u;
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <etx_ota_download_and_flash+0x94>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
  ota_state            = ETX_OTA_STATE_START;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <etx_ota_download_and_flash+0x98>)
 80005d8:	2201      	movs	r2, #1
 80005da:	701a      	strb	r2, [r3, #0]

  do
  {
    //clear the buffer
    memset( Rx_Buffer, 0, ETX_OTA_PACKET_MAX_SIZE );
 80005dc:	f240 4209 	movw	r2, #1033	; 0x409
 80005e0:	2100      	movs	r1, #0
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <etx_ota_download_and_flash+0x9c>)
 80005e4:	f005 ff8c 	bl	8006500 <memset>

    len = etx_receive_chunk( Rx_Buffer, ETX_OTA_PACKET_MAX_SIZE );
 80005e8:	f240 4109 	movw	r1, #1033	; 0x409
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <etx_ota_download_and_flash+0x9c>)
 80005ee:	f000 f907 	bl	8000800 <etx_receive_chunk>
 80005f2:	4603      	mov	r3, r0
 80005f4:	80bb      	strh	r3, [r7, #4]

    if( len != 0u )
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d007      	beq.n	800060c <etx_ota_download_and_flash+0x58>
    {
      ret = etx_process_data( Rx_Buffer, len );
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	4619      	mov	r1, r3
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <etx_ota_download_and_flash+0x9c>)
 8000602:	f000 f829 	bl	8000658 <etx_process_data>
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	e001      	b.n	8000610 <etx_ota_download_and_flash+0x5c>
    }
    else
    {
      //didn't received data. break.
      ret = ETX_OTA_EX_ERR;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
    }

    //Send ACK or NACK
    if( ret != ETX_OTA_EX_OK )
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d006      	beq.n	8000624 <etx_ota_download_and_flash+0x70>
    {
      printf("Sending NACK\r\n");
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <etx_ota_download_and_flash+0xa0>)
 8000618:	f006 f800 	bl	800661c <puts>
      etx_ota_send_resp( ETX_OTA_NACK );
 800061c:	2001      	movs	r0, #1
 800061e:	f000 f9ab 	bl	8000978 <etx_ota_send_resp>
      break;
 8000622:	e006      	b.n	8000632 <etx_ota_download_and_flash+0x7e>
    }
    else
    {
      //printf("Sending ACK\r\n");
      etx_ota_send_resp( ETX_OTA_ACK );
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f9a7 	bl	8000978 <etx_ota_send_resp>
    }

  }while( ota_state != ETX_OTA_STATE_IDLE );
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <etx_ota_download_and_flash+0x98>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1d4      	bne.n	80005dc <etx_ota_download_and_flash+0x28>

  return ret;
 8000632:	79fb      	ldrb	r3, [r7, #7]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	08007530 	.word	0x08007530
 8000640:	20000498 	.word	0x20000498
 8000644:	200004a0 	.word	0x200004a0
 8000648:	2000049c 	.word	0x2000049c
 800064c:	20000495 	.word	0x20000495
 8000650:	2000008c 	.word	0x2000008c
 8000654:	08007550 	.word	0x08007550

08000658 <etx_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static ETX_OTA_EX_ etx_process_data( uint8_t *buf, uint16_t len )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
  ETX_OTA_EX_ ret = ETX_OTA_EX_ERR;
 8000664:	2301      	movs	r3, #1
 8000666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  do
  {
    if( ( buf == NULL ) || ( len == 0u) )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	f000 80a3 	beq.w	80007b8 <etx_process_data+0x160>
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	2b00      	cmp	r3, #0
 8000676:	f000 809f 	beq.w	80007b8 <etx_process_data+0x160>
    {
      break;
    }

    //Check we received OTA Abort command
    ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	623b      	str	r3, [r7, #32]
    if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d104      	bne.n	8000690 <etx_process_data+0x38>
    {
      if( cmd->cmd == ETX_OTA_CMD_ABORT )
 8000686:	6a3b      	ldr	r3, [r7, #32]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	2b02      	cmp	r3, #2
 800068c:	f000 8096 	beq.w	80007bc <etx_process_data+0x164>
        //received OTA Abort command. Stop the process
        break;
      }
    }

    switch( ota_state )
 8000690:	4b52      	ldr	r3, [pc, #328]	; (80007dc <etx_process_data+0x184>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b04      	cmp	r3, #4
 8000696:	f200 808b 	bhi.w	80007b0 <etx_process_data+0x158>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <etx_process_data+0x48>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b5 	.word	0x080006b5
 80006a4:	080006c3 	.word	0x080006c3
 80006a8:	080006eb 	.word	0x080006eb
 80006ac:	08000721 	.word	0x08000721
 80006b0:	08000789 	.word	0x08000789
    {
      case ETX_OTA_STATE_IDLE:
      {
        printf("ETX_OTA_STATE_IDLE...\r\n");
 80006b4:	484a      	ldr	r0, [pc, #296]	; (80007e0 <etx_process_data+0x188>)
 80006b6:	f005 ffb1 	bl	800661c <puts>
        ret = ETX_OTA_EX_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80006c0:	e085      	b.n	80007ce <etx_process_data+0x176>

      case ETX_OTA_STATE_START:
      {
        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d178      	bne.n	80007c0 <etx_process_data+0x168>
        {
          if( cmd->cmd == ETX_OTA_CMD_START )
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d174      	bne.n	80007c0 <etx_process_data+0x168>
          {
            printf("Received OTA START Command\r\n");
 80006d6:	4843      	ldr	r0, [pc, #268]	; (80007e4 <etx_process_data+0x18c>)
 80006d8:	f005 ffa0 	bl	800661c <puts>
            ota_state = ETX_OTA_STATE_HEADER;
 80006dc:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <etx_process_data+0x184>)
 80006de:	2202      	movs	r2, #2
 80006e0:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80006e8:	e06a      	b.n	80007c0 <etx_process_data+0x168>

      case ETX_OTA_STATE_HEADER:
      {
        ETX_OTA_HEADER_ *header = (ETX_OTA_HEADER_*)buf;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	613b      	str	r3, [r7, #16]
        if( header->packet_type == ETX_OTA_PACKET_TYPE_HEADER )
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d166      	bne.n	80007c4 <etx_process_data+0x16c>
        {
          ota_fw_total_size = header->meta_data.package_size;
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a3b      	ldr	r2, [pc, #236]	; (80007e8 <etx_process_data+0x190>)
 80006fc:	6013      	str	r3, [r2, #0]
          ota_fw_crc        = header->meta_data.package_crc;
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	4a3a      	ldr	r2, [pc, #232]	; (80007ec <etx_process_data+0x194>)
 8000704:	6013      	str	r3, [r2, #0]
          printf("Received OTA Header. FW Size = %ld\r\n", ota_fw_total_size);
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <etx_process_data+0x190>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4619      	mov	r1, r3
 800070c:	4838      	ldr	r0, [pc, #224]	; (80007f0 <etx_process_data+0x198>)
 800070e:	f005 feff 	bl	8006510 <iprintf>
          ota_state = ETX_OTA_STATE_DATA;
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <etx_process_data+0x184>)
 8000714:	2203      	movs	r2, #3
 8000716:	701a      	strb	r2, [r3, #0]
          ret = ETX_OTA_EX_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
      break;
 800071e:	e051      	b.n	80007c4 <etx_process_data+0x16c>

      case ETX_OTA_STATE_DATA:
      {
        ETX_OTA_DATA_     *data     = (ETX_OTA_DATA_*)buf;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	61bb      	str	r3, [r7, #24]
        uint16_t          data_len = data->data_len;
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	789a      	ldrb	r2, [r3, #2]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	4313      	orrs	r3, r2
 800072e:	82fb      	strh	r3, [r7, #22]
        HAL_StatusTypeDef ex;

        if( data->packet_type == ETX_OTA_PACKET_TYPE_DATA )
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	785b      	ldrb	r3, [r3, #1]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d147      	bne.n	80007c8 <etx_process_data+0x170>
        {
          /* write the chunk to the Flash (App location) */
          ex = write_data_to_flash_app( buf, data_len, ( ota_fw_received_size == 0) );
 8000738:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <etx_process_data+0x19c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	bf0c      	ite	eq
 8000740:	2301      	moveq	r3, #1
 8000742:	2300      	movne	r3, #0
 8000744:	b2da      	uxtb	r2, r3
 8000746:	8afb      	ldrh	r3, [r7, #22]
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f93a 	bl	80009c4 <write_data_to_flash_app>
 8000750:	4603      	mov	r3, r0
 8000752:	757b      	strb	r3, [r7, #21]

          if( ex == HAL_OK )
 8000754:	7d7b      	ldrb	r3, [r7, #21]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d136      	bne.n	80007c8 <etx_process_data+0x170>
          {
            printf("[%ld/%ld]\r\n", ota_fw_received_size/ETX_OTA_DATA_MAX_SIZE, ota_fw_total_size/ETX_OTA_DATA_MAX_SIZE);
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <etx_process_data+0x19c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	0a99      	lsrs	r1, r3, #10
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <etx_process_data+0x190>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	0a9b      	lsrs	r3, r3, #10
 8000766:	461a      	mov	r2, r3
 8000768:	4823      	ldr	r0, [pc, #140]	; (80007f8 <etx_process_data+0x1a0>)
 800076a:	f005 fed1 	bl	8006510 <iprintf>
            if( ota_fw_received_size >= ota_fw_total_size )
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <etx_process_data+0x19c>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <etx_process_data+0x190>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	d302      	bcc.n	8000780 <etx_process_data+0x128>
            {
              //received the full data. So, move to end
              ota_state = ETX_OTA_STATE_END;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <etx_process_data+0x184>)
 800077c:	2204      	movs	r2, #4
 800077e:	701a      	strb	r2, [r3, #0]
            }
            ret = ETX_OTA_EX_OK;
 8000780:	2300      	movs	r3, #0
 8000782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 8000786:	e01f      	b.n	80007c8 <etx_process_data+0x170>

      case ETX_OTA_STATE_END:
      {

        ETX_OTA_COMMAND_ *cmd = (ETX_OTA_COMMAND_*)buf;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	61fb      	str	r3, [r7, #28]

        if( cmd->packet_type == ETX_OTA_PACKET_TYPE_CMD )
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	785b      	ldrb	r3, [r3, #1]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d11b      	bne.n	80007cc <etx_process_data+0x174>
        {
          if( cmd->cmd == ETX_OTA_CMD_END )
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d117      	bne.n	80007cc <etx_process_data+0x174>
          {
            printf("Received OTA END Command\r\n");
 800079c:	4817      	ldr	r0, [pc, #92]	; (80007fc <etx_process_data+0x1a4>)
 800079e:	f005 ff3d 	bl	800661c <puts>

            //TODO: Very full package CRC

            ota_state = ETX_OTA_STATE_IDLE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <etx_process_data+0x184>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
            ret = ETX_OTA_EX_OK;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          }
        }
      }
      break;
 80007ae:	e00d      	b.n	80007cc <etx_process_data+0x174>

      default:
      {
        /* Should not come here */
        ret = ETX_OTA_EX_ERR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80007b6:	e00a      	b.n	80007ce <etx_process_data+0x176>
    };
 80007b8:	bf00      	nop
 80007ba:	e008      	b.n	80007ce <etx_process_data+0x176>
        break;
 80007bc:	bf00      	nop
 80007be:	e006      	b.n	80007ce <etx_process_data+0x176>
      break;
 80007c0:	bf00      	nop
 80007c2:	e004      	b.n	80007ce <etx_process_data+0x176>
      break;
 80007c4:	bf00      	nop
 80007c6:	e002      	b.n	80007ce <etx_process_data+0x176>
      break;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <etx_process_data+0x176>
      break;
 80007cc:	bf00      	nop
  }while( false );

  return ret;
 80007ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000495 	.word	0x20000495
 80007e0:	08007560 	.word	0x08007560
 80007e4:	08007578 	.word	0x08007578
 80007e8:	20000498 	.word	0x20000498
 80007ec:	2000049c 	.word	0x2000049c
 80007f0:	08007594 	.word	0x08007594
 80007f4:	200004a0 	.word	0x200004a0
 80007f8:	080075bc 	.word	0x080075bc
 80007fc:	080075c8 	.word	0x080075c8

08000800 <etx_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval ETX_OTA_EX_
  */
static uint16_t etx_receive_chunk( uint8_t *buf, uint16_t max_len )
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	807b      	strh	r3, [r7, #2]
  int16_t  ret;
  uint16_t index     = 0u;
 800080c:	2300      	movs	r3, #0
 800080e:	81bb      	strh	r3, [r7, #12]
  uint16_t data_len;

  do
  {
    //receive SOF byte (1byte)
    ret = HAL_UART_Receive( &huart3, &buf[index], 1, HAL_MAX_DELAY );
 8000810:	89bb      	ldrh	r3, [r7, #12]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	18d1      	adds	r1, r2, r3
 8000816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800081a:	2201      	movs	r2, #1
 800081c:	4854      	ldr	r0, [pc, #336]	; (8000970 <etx_receive_chunk+0x170>)
 800081e:	f004 f944 	bl	8004aaa <HAL_UART_Receive>
 8000822:	4603      	mov	r3, r0
 8000824:	81fb      	strh	r3, [r7, #14]

    if( ret != HAL_OK )
 8000826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d17f      	bne.n	800092e <etx_receive_chunk+0x12e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_SOF )
 800082e:	89bb      	ldrh	r3, [r7, #12]
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	81ba      	strh	r2, [r7, #12]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2baa      	cmp	r3, #170	; 0xaa
 800083e:	d002      	beq.n	8000846 <etx_receive_chunk+0x46>
    {
      //Not received start of frame
      ret = ETX_OTA_EX_ERR;
 8000840:	2301      	movs	r3, #1
 8000842:	81fb      	strh	r3, [r7, #14]
      break;
 8000844:	e07c      	b.n	8000940 <etx_receive_chunk+0x140>
    }

    //Receive the packet type (1byte).
    ret = HAL_UART_Receive( &huart3, &buf[index++], 1, HAL_MAX_DELAY );
 8000846:	89bb      	ldrh	r3, [r7, #12]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	81ba      	strh	r2, [r7, #12]
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1899      	adds	r1, r3, r2
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000856:	2201      	movs	r2, #1
 8000858:	4845      	ldr	r0, [pc, #276]	; (8000970 <etx_receive_chunk+0x170>)
 800085a:	f004 f926 	bl	8004aaa <HAL_UART_Receive>
 800085e:	4603      	mov	r3, r0
 8000860:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d163      	bne.n	8000932 <etx_receive_chunk+0x132>
    {
      break;
    }

    //Get the data length (2bytes).
    ret = HAL_UART_Receive( &huart3, &buf[index], 2, HAL_MAX_DELAY );
 800086a:	89bb      	ldrh	r3, [r7, #12]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	18d1      	adds	r1, r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000874:	2202      	movs	r2, #2
 8000876:	483e      	ldr	r0, [pc, #248]	; (8000970 <etx_receive_chunk+0x170>)
 8000878:	f004 f917 	bl	8004aaa <HAL_UART_Receive>
 800087c:	4603      	mov	r3, r0
 800087e:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 8000880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d156      	bne.n	8000936 <etx_receive_chunk+0x136>
    {
      break;
    }
    data_len = *(uint16_t *)&buf[index];
 8000888:	89bb      	ldrh	r3, [r7, #12]
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	813b      	strh	r3, [r7, #8]
    index += 2u;
 8000892:	89bb      	ldrh	r3, [r7, #12]
 8000894:	3302      	adds	r3, #2
 8000896:	81bb      	strh	r3, [r7, #12]

    for( uint16_t i = 0u; i < data_len; i++ )
 8000898:	2300      	movs	r3, #0
 800089a:	817b      	strh	r3, [r7, #10]
 800089c:	e014      	b.n	80008c8 <etx_receive_chunk+0xc8>
    {
      ret = HAL_UART_Receive( &huart3, &buf[index++], 1, HAL_MAX_DELAY );
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	81ba      	strh	r2, [r7, #12]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1899      	adds	r1, r3, r2
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ae:	2201      	movs	r2, #1
 80008b0:	482f      	ldr	r0, [pc, #188]	; (8000970 <etx_receive_chunk+0x170>)
 80008b2:	f004 f8fa 	bl	8004aaa <HAL_UART_Receive>
 80008b6:	4603      	mov	r3, r0
 80008b8:	81fb      	strh	r3, [r7, #14]
      if( ret != HAL_OK )
 80008ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d107      	bne.n	80008d2 <etx_receive_chunk+0xd2>
    for( uint16_t i = 0u; i < data_len; i++ )
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	3301      	adds	r3, #1
 80008c6:	817b      	strh	r3, [r7, #10]
 80008c8:	897a      	ldrh	r2, [r7, #10]
 80008ca:	893b      	ldrh	r3, [r7, #8]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3e6      	bcc.n	800089e <etx_receive_chunk+0x9e>
 80008d0:	e000      	b.n	80008d4 <etx_receive_chunk+0xd4>
      {
        break;
 80008d2:	bf00      	nop
      }
    }

    //Get the CRC.
    ret = HAL_UART_Receive( &huart3, &buf[index], 4, HAL_MAX_DELAY );
 80008d4:	89bb      	ldrh	r3, [r7, #12]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	18d1      	adds	r1, r2, r3
 80008da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008de:	2204      	movs	r2, #4
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <etx_receive_chunk+0x170>)
 80008e2:	f004 f8e2 	bl	8004aaa <HAL_UART_Receive>
 80008e6:	4603      	mov	r3, r0
 80008e8:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 80008ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d123      	bne.n	800093a <etx_receive_chunk+0x13a>
    {
      break;
    }
    index += 4u;
 80008f2:	89bb      	ldrh	r3, [r7, #12]
 80008f4:	3304      	adds	r3, #4
 80008f6:	81bb      	strh	r3, [r7, #12]

    //TODO: Add CRC verification

    //receive EOF byte (1byte)
    ret = HAL_UART_Receive( &huart3, &buf[index], 1, HAL_MAX_DELAY );
 80008f8:	89bb      	ldrh	r3, [r7, #12]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	18d1      	adds	r1, r2, r3
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000902:	2201      	movs	r2, #1
 8000904:	481a      	ldr	r0, [pc, #104]	; (8000970 <etx_receive_chunk+0x170>)
 8000906:	f004 f8d0 	bl	8004aaa <HAL_UART_Receive>
 800090a:	4603      	mov	r3, r0
 800090c:	81fb      	strh	r3, [r7, #14]
    if( ret != HAL_OK )
 800090e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d113      	bne.n	800093e <etx_receive_chunk+0x13e>
    {
      break;
    }

    if( buf[index++] != ETX_OTA_EOF )
 8000916:	89bb      	ldrh	r3, [r7, #12]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	81ba      	strh	r2, [r7, #12]
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2bbb      	cmp	r3, #187	; 0xbb
 8000926:	d00b      	beq.n	8000940 <etx_receive_chunk+0x140>
    {
      //Not received end of frame
      ret = ETX_OTA_EX_ERR;
 8000928:	2301      	movs	r3, #1
 800092a:	81fb      	strh	r3, [r7, #14]
      break;
 800092c:	e008      	b.n	8000940 <etx_receive_chunk+0x140>
      break;
 800092e:	bf00      	nop
 8000930:	e006      	b.n	8000940 <etx_receive_chunk+0x140>
      break;
 8000932:	bf00      	nop
 8000934:	e004      	b.n	8000940 <etx_receive_chunk+0x140>
      break;
 8000936:	bf00      	nop
 8000938:	e002      	b.n	8000940 <etx_receive_chunk+0x140>
      break;
 800093a:	bf00      	nop
 800093c:	e000      	b.n	8000940 <etx_receive_chunk+0x140>
      break;
 800093e:	bf00      	nop
    }

  }while( false );

  if( ret != HAL_OK )
 8000940:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <etx_receive_chunk+0x14c>
  {
    //clear the index if error
    index = 0u;
 8000948:	2300      	movs	r3, #0
 800094a:	81bb      	strh	r3, [r7, #12]
  }

  if( max_len < index )
 800094c:	887a      	ldrh	r2, [r7, #2]
 800094e:	89bb      	ldrh	r3, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <etx_receive_chunk+0x164>
  {
    printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8000954:	887b      	ldrh	r3, [r7, #2]
 8000956:	89ba      	ldrh	r2, [r7, #12]
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <etx_receive_chunk+0x174>)
 800095c:	f005 fdd8 	bl	8006510 <iprintf>
                                                              max_len, index );
    index = 0u;
 8000960:	2300      	movs	r3, #0
 8000962:	81bb      	strh	r3, [r7, #12]
  }

  return index;
 8000964:	89bb      	ldrh	r3, [r7, #12]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200006b0 	.word	0x200006b0
 8000974:	080075e4 	.word	0x080075e4

08000978 <etx_ota_send_resp>:
  * @brief Send the response.
  * @param type ACK or NACK
  * @retval none
  */
static void etx_ota_send_resp( uint8_t type )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  ETX_OTA_RESP_ rsp =
 8000982:	23aa      	movs	r3, #170	; 0xaa
 8000984:	733b      	strb	r3, [r7, #12]
 8000986:	2303      	movs	r3, #3
 8000988:	737b      	strb	r3, [r7, #13]
 800098a:	2301      	movs	r3, #1
 800098c:	81fb      	strh	r3, [r7, #14]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	743b      	strb	r3, [r7, #16]
 8000992:	2300      	movs	r3, #0
 8000994:	747b      	strb	r3, [r7, #17]
 8000996:	2300      	movs	r3, #0
 8000998:	74bb      	strb	r3, [r7, #18]
 800099a:	2300      	movs	r3, #0
 800099c:	74fb      	strb	r3, [r7, #19]
 800099e:	2300      	movs	r3, #0
 80009a0:	753b      	strb	r3, [r7, #20]
 80009a2:	23bb      	movs	r3, #187	; 0xbb
 80009a4:	757b      	strb	r3, [r7, #21]
    .crc         = 0u,                //TODO: Add CRC
    .eof         = ETX_OTA_EOF
  };

  //send response
  HAL_UART_Transmit(&huart3, (uint8_t *)&rsp, sizeof(ETX_OTA_RESP_), HAL_MAX_DELAY);
 80009a6:	f107 010c 	add.w	r1, r7, #12
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ae:	220a      	movs	r2, #10
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <etx_ota_send_resp+0x48>)
 80009b2:	f003 fff7 	bl	80049a4 <HAL_UART_Transmit>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200006b0 	.word	0x200006b0

080009c4 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	807b      	strh	r3, [r7, #2]
 80009d0:	4613      	mov	r3, r2
 80009d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;

  do
  {
    ret = HAL_FLASH_Unlock();
 80009d4:	f001 feea 	bl	80027ac <HAL_FLASH_Unlock>
 80009d8:	4603      	mov	r3, r0
 80009da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 80009de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d157      	bne.n	8000a96 <write_data_to_flash_app+0xd2>
    {
      break;
    }

    //No need to erase every time. Erase only the first time.
    if( is_first_block )
 80009e6:	787b      	ldrb	r3, [r7, #1]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d019      	beq.n	8000a20 <write_data_to_flash_app+0x5c>
    {

      printf("Erasing the Flash memory...\r\n");
 80009ec:	482f      	ldr	r0, [pc, #188]	; (8000aac <write_data_to_flash_app+0xe8>)
 80009ee:	f005 fe15 	bl	800661c <puts>
      //Erase the Flash
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
 80009f6:	2305      	movs	r3, #5
 80009f8:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbSectors     = 2;                    //erase 2 sectors(5,6)
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]

      ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000a02:	f107 020c 	add.w	r2, r7, #12
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f82f 	bl	8002a70 <HAL_FLASHEx_Erase>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if( ret != HAL_OK )
 8000a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d13c      	bne.n	8000a9a <write_data_to_flash_app+0xd6>
      {
        break;
      }
    }

    for(int i = 0; i < data_len; i++ )
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	e026      	b.n	8000a74 <write_data_to_flash_app+0xb0>
    {
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <write_data_to_flash_app+0xec>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4922      	ldr	r1, [pc, #136]	; (8000ab4 <write_data_to_flash_app+0xf0>)
 8000a2c:	4419      	add	r1, r3
                               (ETX_APP_FLASH_ADDR + ota_fw_received_size),
                               data[4+i]
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	3304      	adds	r3, #4
 8000a32:	461a      	mov	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4413      	add	r3, r2
 8000a38:	781b      	ldrb	r3, [r3, #0]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_BYTE,
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	461c      	mov	r4, r3
 8000a40:	4615      	mov	r5, r2
 8000a42:	4622      	mov	r2, r4
 8000a44:	462b      	mov	r3, r5
 8000a46:	2000      	movs	r0, #0
 8000a48:	f001 fe54 	bl	80026f4 <HAL_FLASH_Program>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                             );
      if( ret == HAL_OK )
 8000a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d105      	bne.n	8000a66 <write_data_to_flash_app+0xa2>
      {
        //update the data count
        ota_fw_received_size += 1;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <write_data_to_flash_app+0xec>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <write_data_to_flash_app+0xec>)
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e003      	b.n	8000a6e <write_data_to_flash_app+0xaa>
      }
      else
      {
        printf("Flash Write Error\r\n");
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <write_data_to_flash_app+0xf4>)
 8000a68:	f005 fdd8 	bl	800661c <puts>
        break;
 8000a6c:	e006      	b.n	8000a7c <write_data_to_flash_app+0xb8>
    for(int i = 0; i < data_len; i++ )
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
 8000a70:	3301      	adds	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	6a3a      	ldr	r2, [r7, #32]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbd4      	blt.n	8000a26 <write_data_to_flash_app+0x62>
      }
    }

    if( ret != HAL_OK )
 8000a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d10c      	bne.n	8000a9e <write_data_to_flash_app+0xda>
    {
      break;
    }

    ret = HAL_FLASH_Lock();
 8000a84:	f001 feb4 	bl	80027f0 <HAL_FLASH_Lock>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( ret != HAL_OK )
 8000a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	e004      	b.n	8000aa0 <write_data_to_flash_app+0xdc>
      break;
 8000a96:	bf00      	nop
 8000a98:	e002      	b.n	8000aa0 <write_data_to_flash_app+0xdc>
        break;
 8000a9a:	bf00      	nop
 8000a9c:	e000      	b.n	8000aa0 <write_data_to_flash_app+0xdc>
      break;
 8000a9e:	bf00      	nop
    {
      break;
    }
  }while( false );

  return ret;
 8000aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3728      	adds	r7, #40	; 0x28
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	08007628 	.word	0x08007628
 8000ab0:	200004a0 	.word	0x200004a0
 8000ab4:	08040000 	.word	0x08040000
 8000ab8:	08007648 	.word	0x08007648

08000abc <__io_putchar>:
		 set to 'Yes') calls __io_putchar() */
	int __io_putchar(int ch)
	#else
	int fputc(int ch, FILE *f)
	#endif /* __GNUC__ */
	{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	  /* Place your implementation of fputc here */
	  /* e.g. write a character to the UART3 and Loop until the end of transmission */
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ac4:	1d39      	adds	r1, r7, #4
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aca:	2201      	movs	r2, #1
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <__io_putchar+0x20>)
 8000ace:	f003 ff69 	bl	80049a4 <HAL_UART_Transmit>
	  return ch;
 8000ad2:	687b      	ldr	r3, [r7, #4]
	}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000628 	.word	0x20000628

08000ae0 <goto_application>:
	  * @retval None
	  */
	typedef void (*p_function)(void);

	static void goto_application(void)
	{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
		uint32_t jump_address = *(__IO uint32_t*)(0x08040000 + 4U);
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <goto_application+0x84>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]

		p_function p_jump_function = (p_function)jump_address;
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	60fb      	str	r3, [r7, #12]

		 printf("Gonna Jump to Application\n");
 8000af0:	481d      	ldr	r0, [pc, #116]	; (8000b68 <goto_application+0x88>)
 8000af2:	f005 fd93 	bl	800661c <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
}
 8000af8:	bf00      	nop

		 // stop all interrupts
		__disable_irq();

		// Disable IRQs
		for(uint8_t i = 0; i < 8; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	75fb      	strb	r3, [r7, #23]
 8000afe:	e009      	b.n	8000b14 <goto_application+0x34>
		{
			NVIC->ICER[i] = 0xffffffff;
 8000b00:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <goto_application+0x8c>)
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	3320      	adds	r3, #32
 8000b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint8_t i = 0; i < 8; i++)
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
 8000b10:	3301      	adds	r3, #1
 8000b12:	75fb      	strb	r3, [r7, #23]
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	d9f2      	bls.n	8000b00 <goto_application+0x20>
		}

		// Clear pending IRQs
		for(uint8_t i = 0; i < 8; i++)
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	75bb      	strb	r3, [r7, #22]
 8000b1e:	e009      	b.n	8000b34 <goto_application+0x54>
		{
			NVIC->ICPR[i] = 0xffffffff;
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <goto_application+0x8c>)
 8000b22:	7dbb      	ldrb	r3, [r7, #22]
 8000b24:	3360      	adds	r3, #96	; 0x60
 8000b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint8_t i = 0; i < 8; i++)
 8000b2e:	7dbb      	ldrb	r3, [r7, #22]
 8000b30:	3301      	adds	r3, #1
 8000b32:	75bb      	strb	r3, [r7, #22]
 8000b34:	7dbb      	ldrb	r3, [r7, #22]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d9f2      	bls.n	8000b20 <goto_application+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b3a:	b662      	cpsie	i
}
 8000b3c:	bf00      	nop
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f383 8814 	msr	CONTROL, r3
}
 8000b48:	bf00      	nop
		__enable_irq();

		__set_CONTROL(0);

		// re-init stack pointer (first entry of the vector table)
		__set_MSP(*(volatile uint32_t*) 0x08040000);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <goto_application+0x90>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	f383 8808 	msr	MSP, r3
}
 8000b56:	bf00      	nop

		p_jump_function();
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4798      	blx	r3

	  // Turn OFF the Green Led to tell the user that Bootloader is not running
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
	  app_reset_handler();    //call the app reset handler
	  */
	}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	08040004 	.word	0x08040004
 8000b68:	0800765c 	.word	0x0800765c
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	08040000 	.word	0x08040000

08000b74 <HAL_UART_RxCpltCallback>:

static uint8_t str1_;
static uint8_t str3_;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <HAL_UART_RxCpltCallback+0x3c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10f      	bne.n	8000ba6 <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 8000b86:	2025      	movs	r0, #37	; 0x25
 8000b88:	f001 fd0f 	bl	80025aa <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <HAL_UART_RxCpltCallback+0x40>)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_UART_RxCpltCallback+0x44>)
 8000b92:	f004 f84f 	bl	8004c34 <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 8000b96:	2025      	movs	r0, #37	; 0x25
 8000b98:	f001 fcf9 	bl	800258e <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4905      	ldr	r1, [pc, #20]	; (8000bb4 <HAL_UART_RxCpltCallback+0x40>)
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_UART_RxCpltCallback+0x44>)
 8000ba2:	f004 f8a5 	bl	8004cf0 <HAL_UART_Receive_IT>

	}
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	2000080c 	.word	0x2000080c
 8000bb8:	20000628 	.word	0x20000628

08000bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f001 f850 	bl	8001c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f87f 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bca:	f000 faad 	bl	8001128 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000bce:	f000 f8e9 	bl	8000da4 <MX_CAN1_Init>
  MX_FMC_Init();
 8000bd2:	f000 fa47 	bl	8001064 <MX_FMC_Init>
  MX_UART4_Init();
 8000bd6:	f000 f951 	bl	8000e7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000bda:	f000 f9b1 	bl	8000f40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000bde:	f000 f9df 	bl	8000fa0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000be2:	f000 fa0d 	bl	8001000 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8000be6:	f000 f979 	bl	8000edc <MX_UART5_Init>
  MX_TIM7_Init();
 8000bea:	f000 f911 	bl	8000e10 <MX_TIM7_Init>

  HAL_Delay(1000);
 8000bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf2:	f001 f865 	bl	8001cc0 <HAL_Delay>

  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader(%d.%d)\n", BL_Version[0], BL_Version[1] );
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <main+0xe8>)
 8000bfe:	f005 fc87 	bl	8006510 <iprintf>

  uint32_t end_tick = HAL_GetTick() + 5000;
 8000c02:	f001 f851 	bl	8001ca8 <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c0c:	4413      	add	r3, r2
 8000c0e:	607b      	str	r3, [r7, #4]

	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 8000c10:	2201      	movs	r2, #1
 8000c12:	4925      	ldr	r1, [pc, #148]	; (8000ca8 <main+0xec>)
 8000c14:	4825      	ldr	r0, [pc, #148]	; (8000cac <main+0xf0>)
 8000c16:	f004 f86b 	bl	8004cf0 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling


  printf("Press the '3' to trigger OTA update...\r\n");
 8000c1a:	4825      	ldr	r0, [pc, #148]	; (8000cb0 <main+0xf4>)
 8000c1c:	f005 fcfe 	bl	800661c <puts>

  do
  {
    uint32_t current_tick = HAL_GetTick();
 8000c20:	f001 f842 	bl	8001ca8 <HAL_GetTick>
 8000c24:	6038      	str	r0, [r7, #0]
    /* Check the button is pressed or not for 3seconds */

    if( ( str1_ == '3' ) ||  current_tick > end_tick)
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <main+0xec>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b33      	cmp	r3, #51	; 0x33
 8000c2c:	d007      	beq.n	8000c3e <main+0x82>
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d803      	bhi.n	8000c3e <main+0x82>
      /* Either timeout or Button is pressed */

    	break;
    }

    HAL_Delay(100);
 8000c36:	2064      	movs	r0, #100	; 0x64
 8000c38:	f001 f842 	bl	8001cc0 <HAL_Delay>
  {
 8000c3c:	e7f0      	b.n	8000c20 <main+0x64>
  }
  while(1);

  if( ( str1_ == '3' ))
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <main+0xec>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b33      	cmp	r3, #51	; 0x33
 8000c44:	d123      	bne.n	8000c8e <main+0xd2>
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <main+0xec>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  {
  	memset(&str1_, '\0', sizeof(str1_));

	printf("Starting Firmware Download!!!\r\n");
 8000c4c:	4819      	ldr	r0, [pc, #100]	; (8000cb4 <main+0xf8>)
 8000c4e:	f005 fce5 	bl	800661c <puts>
	/* OTA Request. Receive the data from the UART3 and flash */
	if( etx_ota_download_and_flash() != ETX_OTA_EX_OK )
 8000c52:	f7ff fcaf 	bl	80005b4 <etx_ota_download_and_flash>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00f      	beq.n	8000c7c <main+0xc0>
	{
	  /* Error. Don't process. */
	  printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000c5c:	4816      	ldr	r0, [pc, #88]	; (8000cb8 <main+0xfc>)
 8000c5e:	f005 fcdd 	bl	800661c <puts>

	  printf("Press the '3' to trigger Bootloader Reset...\r\n");
 8000c62:	4816      	ldr	r0, [pc, #88]	; (8000cbc <main+0x100>)
 8000c64:	f005 fcda 	bl	800661c <puts>

	  while(1)
	  {
		  if(( str1_ == '3' ))
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <main+0xec>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b33      	cmp	r3, #51	; 0x33
 8000c6e:	d101      	bne.n	8000c74 <main+0xb8>
		  {
			  HAL_NVIC_SystemReset();
 8000c70:	f001 fca9 	bl	80025c6 <HAL_NVIC_SystemReset>
		  }
		  HAL_Delay(100);
 8000c74:	2064      	movs	r0, #100	; 0x64
 8000c76:	f001 f823 	bl	8001cc0 <HAL_Delay>
		  if(( str1_ == '3' ))
 8000c7a:	e7f5      	b.n	8000c68 <main+0xac>
	  }
	}
	else
	{
	  /* Reset to load the new application */
	  printf("Firmware update is done!!! Rebooting...\r\n");
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <main+0x104>)
 8000c7e:	f005 fccd 	bl	800661c <puts>

	  HAL_Delay(1000);
 8000c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c86:	f001 f81b 	bl	8001cc0 <HAL_Delay>

	  HAL_NVIC_SystemReset();
 8000c8a:	f001 fc9c 	bl	80025c6 <HAL_NVIC_SystemReset>
	}
  }


  printf("Main Application will be booted!\r\n");
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <main+0x108>)
 8000c90:	f005 fcc4 	bl	800661c <puts>

  HAL_Delay(1000);
 8000c94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c98:	f001 f812 	bl	8001cc0 <HAL_Delay>

  goto_application();
 8000c9c:	f7ff ff20 	bl	8000ae0 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <main+0xe4>
 8000ca2:	bf00      	nop
 8000ca4:	08007678 	.word	0x08007678
 8000ca8:	2000080c 	.word	0x2000080c
 8000cac:	20000628 	.word	0x20000628
 8000cb0:	08007694 	.word	0x08007694
 8000cb4:	080076bc 	.word	0x080076bc
 8000cb8:	080076dc 	.word	0x080076dc
 8000cbc:	080076fc 	.word	0x080076fc
 8000cc0:	0800772c 	.word	0x0800772c
 8000cc4:	08007758 	.word	0x08007758

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2230      	movs	r2, #48	; 0x30
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f005 fc12 	bl	8006500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <SystemClock_Config+0xd4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a2a      	ldr	r2, [pc, #168]	; (8000d9c <SystemClock_Config+0xd4>)
 8000cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <SystemClock_Config+0xd4>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <SystemClock_Config+0xd8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <SystemClock_Config+0xd8>)
 8000d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <SystemClock_Config+0xd8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d30:	2319      	movs	r3, #25
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000d34:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 f986 	bl	8003058 <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d52:	f000 fae9 	bl	8001328 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d56:	f002 f92f 	bl	8002fb8 <HAL_PWREx_EnableOverDrive>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d60:	f000 fae2 	bl	8001328 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d64:	230f      	movs	r3, #15
 8000d66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2107      	movs	r1, #7
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fc0c 	bl	80035a0 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d8e:	f000 facb 	bl	8001328 <Error_Handler>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3750      	adds	r7, #80	; 0x50
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40007000 	.word	0x40007000

08000da4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <MX_CAN1_Init+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000db0:	220c      	movs	r2, #12
 8000db2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dc2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dc6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_CAN1_Init+0x64>)
 8000df6:	f000 ff87 	bl	8001d08 <HAL_CAN_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e00:	f000 fa92 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200004a4 	.word	0x200004a4
 8000e0c:	40006400 	.word	0x40006400

08000e10 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <MX_TIM7_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e28:	226b      	movs	r2, #107	; 0x6b
 8000e2a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e34:	2263      	movs	r2, #99	; 0x63
 8000e36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e40:	f003 f9fe 	bl	8004240 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000e4a:	f000 fa6d 	bl	8001328 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <MX_TIM7_Init+0x64>)
 8000e5c:	f003 fca8 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e66:	f000 fa5f 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200004cc 	.word	0x200004cc
 8000e78:	40001400 	.word	0x40001400

08000e7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <MX_UART4_Init+0x5c>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_UART4_Init+0x58>)
 8000ec0:	f003 fd22 	bl	8004908 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 fa2d 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000518 	.word	0x20000518
 8000ed8:	40004c00 	.word	0x40004c00

08000edc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <MX_UART5_Init+0x60>)
 8000ee4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef4:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f02:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_UART5_Init+0x5c>)
 8000f24:	f003 fcf0 	bl	8004908 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8000f2e:	f000 f9fb 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200005a0 	.word	0x200005a0
 8000f3c:	40005000 	.word	0x40005000

08000f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_USART1_UART_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART1_UART_Init+0x58>)
 8000f84:	f003 fcc0 	bl	8004908 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 f9cb 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000628 	.word	0x20000628
 8000f9c:	40011000 	.word	0x40011000

08000fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <MX_USART3_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART3_UART_Init+0x58>)
 8000fe4:	f003 fc90 	bl	8004908 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f000 f99b 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200006b0 	.word	0x200006b0
 8000ffc:	40004800 	.word	0x40004800

08001000 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <MX_USART6_UART_Init+0x60>)
 8001008:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USART6_UART_Init+0x5c>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001018:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART6_UART_Init+0x5c>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001026:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART6_UART_Init+0x5c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART6_UART_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART6_UART_Init+0x5c>)
 8001048:	f003 fc5e 	bl	8004908 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 8001052:	f000 f969 	bl	8001328 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000738 	.word	0x20000738
 8001060:	40011400 	.word	0x40011400

08001064 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
 8001078:	615a      	str	r2, [r3, #20]
 800107a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_FMC_Init+0xbc>)
 800107e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001082:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_FMC_Init+0xbc>)
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <MX_FMC_Init+0xc0>)
 8001088:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_FMC_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_FMC_Init+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_FMC_Init+0xbc>)
 8001098:	2204      	movs	r2, #4
 800109a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_FMC_Init+0xbc>)
 800109e:	2210      	movs	r2, #16
 80010a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_FMC_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_FMC_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_FMC_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_FMC_Init+0xbc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_FMC_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_FMC_Init+0xbc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_FMC_Init+0xbc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_FMC_Init+0xbc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_FMC_Init+0xbc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_FMC_Init+0xbc>)
 80010da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_FMC_Init+0xbc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010ea:	230f      	movs	r3, #15
 80010ec:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 80010ee:	2304      	movs	r3, #4
 80010f0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010f6:	2310      	movs	r3, #16
 80010f8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010fa:	2311      	movs	r3, #17
 80010fc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_FMC_Init+0xbc>)
 800110a:	f003 f851 	bl	80041b0 <HAL_SRAM_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001114:	f000 f908 	bl	8001328 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200007c0 	.word	0x200007c0
 8001124:	a0000104 	.word	0xa0000104

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	; 0x38
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a6a      	ldr	r2, [pc, #424]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b68      	ldr	r3, [pc, #416]	; (80012ec <MX_GPIO_Init+0x1c4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b65      	ldr	r3, [pc, #404]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a64      	ldr	r2, [pc, #400]	; (80012ec <MX_GPIO_Init+0x1c4>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b62      	ldr	r3, [pc, #392]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b5f      	ldr	r3, [pc, #380]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a5e      	ldr	r2, [pc, #376]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <MX_GPIO_Init+0x1c4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a58      	ldr	r2, [pc, #352]	; (80012ec <MX_GPIO_Init+0x1c4>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <MX_GPIO_Init+0x1c4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a52      	ldr	r2, [pc, #328]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b6:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b41      	ldr	r3, [pc, #260]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <MX_GPIO_Init+0x1c4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 80011fe:	2200      	movs	r2, #0
 8001200:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001204:	483a      	ldr	r0, [pc, #232]	; (80012f0 <MX_GPIO_Init+0x1c8>)
 8001206:	f001 febd 	bl	8002f84 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 800120a:	2200      	movs	r2, #0
 800120c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001210:	4838      	ldr	r0, [pc, #224]	; (80012f4 <MX_GPIO_Init+0x1cc>)
 8001212:	f001 feb7 	bl	8002f84 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 7140 	mov.w	r1, #768	; 0x300
 800121c:	4836      	ldr	r0, [pc, #216]	; (80012f8 <MX_GPIO_Init+0x1d0>)
 800121e:	f001 feb1 	bl	8002f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8001222:	237f      	movs	r3, #127	; 0x7f
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	4831      	ldr	r0, [pc, #196]	; (80012fc <MX_GPIO_Init+0x1d4>)
 8001236:	f001 fcf9 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 800123a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	482a      	ldr	r0, [pc, #168]	; (80012f8 <MX_GPIO_Init+0x1d0>)
 8001250:	f001 fcec 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001254:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4820      	ldr	r0, [pc, #128]	; (80012f0 <MX_GPIO_Init+0x1c8>)
 800126e:	f001 fcdd 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8001272:	f240 33c7 	movw	r3, #967	; 0x3c7
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <MX_GPIO_Init+0x1cc>)
 800128c:	f001 fcce 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001290:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_GPIO_Init+0x1d8>)
 80012a6:	f001 fcc1 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 80012aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_GPIO_Init+0x1d0>)
 80012c4:	f001 fcb2 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80012c8:	2320      	movs	r3, #32
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2302      	movs	r3, #2
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80012d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_GPIO_Init+0x1cc>)
 80012e0:	f001 fca4 	bl	8002c2c <HAL_GPIO_Init>

}
 80012e4:	bf00      	nop
 80012e6:	3738      	adds	r7, #56	; 0x38
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021800 	.word	0x40021800

08001304 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001316:	f000 fcb3 	bl	8001c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40001000 	.word	0x40001000

08001328 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800132c:	b672      	cpsid	i
}
 800132e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001330:	e7fe      	b.n	8001330 <Error_Handler+0x8>
	...

08001334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_MspInit+0x44>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <HAL_MspInit+0x44>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_MspInit+0x44>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x44>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x44>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x44>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_CAN_MspInit+0x8c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d130      	bne.n	8001400 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_CAN_MspInit+0x90>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a1a      	ldr	r2, [pc, #104]	; (800140c <HAL_CAN_MspInit+0x90>)
 80013a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_CAN_MspInit+0x90>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_CAN_MspInit+0x90>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_CAN_MspInit+0x90>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_CAN_MspInit+0x90>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013e0:	2309      	movs	r3, #9
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_CAN_MspInit+0x94>)
 80013ec:	f001 fc1e 	bl	8002c2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2108      	movs	r1, #8
 80013f4:	2014      	movs	r0, #20
 80013f6:	f001 f8ae 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80013fa:	2014      	movs	r0, #20
 80013fc:	f001 f8c7 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40006400 	.word	0x40006400
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_TIM_Base_MspInit+0x44>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d113      	bne.n	800144e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_TIM_Base_MspInit+0x48>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a0c      	ldr	r2, [pc, #48]	; (800145c <HAL_TIM_Base_MspInit+0x48>)
 800142c:	f043 0320 	orr.w	r3, r3, #32
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_TIM_Base_MspInit+0x48>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2107      	movs	r1, #7
 8001442:	2037      	movs	r0, #55	; 0x37
 8001444:	f001 f887 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001448:	2037      	movs	r0, #55	; 0x37
 800144a:	f001 f8a0 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40001400 	.word	0x40001400
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b0b4      	sub	sp, #208	; 0xd0
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001478:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147c:	2284      	movs	r2, #132	; 0x84
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f005 f83d 	bl	8006500 <memset>
  if(huart->Instance==UART4)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4aa6      	ldr	r2, [pc, #664]	; (8001724 <HAL_UART_MspInit+0x2c4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d146      	bne.n	800151e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fa95 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80014ac:	f7ff ff3c 	bl	8001328 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014b0:	4b9d      	ldr	r3, [pc, #628]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	4a9c      	ldr	r2, [pc, #624]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80014b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014ba:	6413      	str	r3, [r2, #64]	; 0x40
 80014bc:	4b9a      	ldr	r3, [pc, #616]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
 80014c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c8:	4b97      	ldr	r3, [pc, #604]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	4a96      	ldr	r2, [pc, #600]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6313      	str	r3, [r2, #48]	; 0x30
 80014d4:	4b94      	ldr	r3, [pc, #592]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014fa:	2308      	movs	r3, #8
 80014fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001504:	4619      	mov	r1, r3
 8001506:	4889      	ldr	r0, [pc, #548]	; (800172c <HAL_UART_MspInit+0x2cc>)
 8001508:	f001 fb90 	bl	8002c2c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2108      	movs	r1, #8
 8001510:	2034      	movs	r0, #52	; 0x34
 8001512:	f001 f820 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001516:	2034      	movs	r0, #52	; 0x34
 8001518:	f001 f839 	bl	800258e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800151c:	e15e      	b.n	80017dc <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a83      	ldr	r2, [pc, #524]	; (8001730 <HAL_UART_MspInit+0x2d0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d167      	bne.n	80015f8 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001534:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fa49 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8001544:	f7ff fef0 	bl	8001328 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001548:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a76      	ldr	r2, [pc, #472]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800154e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a70      	ldr	r2, [pc, #448]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001578:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015aa:	2308      	movs	r3, #8
 80015ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015b4:	4619      	mov	r1, r3
 80015b6:	485d      	ldr	r0, [pc, #372]	; (800172c <HAL_UART_MspInit+0x2cc>)
 80015b8:	f001 fb38 	bl	8002c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015bc:	2304      	movs	r3, #4
 80015be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015d4:	2308      	movs	r3, #8
 80015d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015de:	4619      	mov	r1, r3
 80015e0:	4854      	ldr	r0, [pc, #336]	; (8001734 <HAL_UART_MspInit+0x2d4>)
 80015e2:	f001 fb23 	bl	8002c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2035      	movs	r0, #53	; 0x35
 80015ec:	f000 ffb3 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80015f0:	2035      	movs	r0, #53	; 0x35
 80015f2:	f000 ffcc 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 80015f6:	e0f1      	b.n	80017dc <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a4e      	ldr	r2, [pc, #312]	; (8001738 <HAL_UART_MspInit+0x2d8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d144      	bne.n	800168c <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001606:	2300      	movs	r3, #0
 8001608:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800160a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800160e:	4618      	mov	r0, r3
 8001610:	f002 f9de 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_UART_MspInit+0x1be>
      Error_Handler();
 800161a:	f7ff fe85 	bl	8001328 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800161e:	4b42      	ldr	r3, [pc, #264]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a41      	ldr	r2, [pc, #260]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b3f      	ldr	r3, [pc, #252]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	623b      	str	r3, [r7, #32]
 8001634:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800164e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001668:	2307      	movs	r3, #7
 800166a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001672:	4619      	mov	r1, r3
 8001674:	4831      	ldr	r0, [pc, #196]	; (800173c <HAL_UART_MspInit+0x2dc>)
 8001676:	f001 fad9 	bl	8002c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	210e      	movs	r1, #14
 800167e:	2025      	movs	r0, #37	; 0x25
 8001680:	f000 ff69 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001684:	2025      	movs	r0, #37	; 0x25
 8001686:	f000 ff82 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 800168a:	e0a7      	b.n	80017dc <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <HAL_UART_MspInit+0x2e0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d158      	bne.n	8001748 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 f992 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_UART_MspInit+0x256>
      Error_Handler();
 80016b2:	f7ff fe39 	bl	8001328 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_UART_MspInit+0x2c8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001700:	2307      	movs	r3, #7
 8001702:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800170a:	4619      	mov	r1, r3
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <HAL_UART_MspInit+0x2e4>)
 800170e:	f001 fa8d 	bl	8002c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2108      	movs	r1, #8
 8001716:	2027      	movs	r0, #39	; 0x27
 8001718:	f000 ff1d 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800171c:	2027      	movs	r0, #39	; 0x27
 800171e:	f000 ff36 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 8001722:	e05b      	b.n	80017dc <HAL_UART_MspInit+0x37c>
 8001724:	40004c00 	.word	0x40004c00
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40005000 	.word	0x40005000
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40011000 	.word	0x40011000
 800173c:	40020000 	.word	0x40020000
 8001740:	40004800 	.word	0x40004800
 8001744:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <HAL_UART_MspInit+0x384>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d144      	bne.n	80017dc <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001752:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001756:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001762:	4618      	mov	r0, r3
 8001764:	f002 f934 	bl	80039d0 <HAL_RCCEx_PeriphCLKConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_UART_MspInit+0x312>
      Error_Handler();
 800176e:	f7ff fddb 	bl	8001328 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_UART_MspInit+0x388>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_UART_MspInit+0x388>)
 8001778:	f043 0320 	orr.w	r3, r3, #32
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_UART_MspInit+0x388>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x388>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_UART_MspInit+0x388>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_UART_MspInit+0x388>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a2:	23c0      	movs	r3, #192	; 0xc0
 80017a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80017ba:	2308      	movs	r3, #8
 80017bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017c4:	4619      	mov	r1, r3
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <HAL_UART_MspInit+0x38c>)
 80017c8:	f001 fa30 	bl	8002c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2108      	movs	r1, #8
 80017d0:	2047      	movs	r0, #71	; 0x47
 80017d2:	f000 fec0 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80017d6:	2047      	movs	r0, #71	; 0x47
 80017d8:	f000 fed9 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 80017dc:	bf00      	nop
 80017de:	37d0      	adds	r7, #208	; 0xd0
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40011400 	.word	0x40011400
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40020800 	.word	0x40020800

080017f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001804:	4b23      	ldr	r3, [pc, #140]	; (8001894 <HAL_FMC_MspInit+0xa4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d13e      	bne.n	800188a <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 800180c:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_FMC_MspInit+0xa4>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_FMC_MspInit+0xa8>)
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	4a20      	ldr	r2, [pc, #128]	; (8001898 <HAL_FMC_MspInit+0xa8>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6393      	str	r3, [r2, #56]	; 0x38
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_FMC_MspInit+0xa8>)
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800182a:	2307      	movs	r3, #7
 800182c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4816      	ldr	r0, [pc, #88]	; (800189c <HAL_FMC_MspInit+0xac>)
 8001844:	f001 f9f2 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001848:	f64f 7380 	movw	r3, #65408	; 0xff80
 800184c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800185a:	230c      	movs	r3, #12
 800185c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	4619      	mov	r1, r3
 8001862:	480f      	ldr	r0, [pc, #60]	; (80018a0 <HAL_FMC_MspInit+0xb0>)
 8001864:	f001 f9e2 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001868:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800186c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800187a:	230c      	movs	r3, #12
 800187c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	4619      	mov	r1, r3
 8001882:	4808      	ldr	r0, [pc, #32]	; (80018a4 <HAL_FMC_MspInit+0xb4>)
 8001884:	f001 f9d2 	bl	8002c2c <HAL_GPIO_Init>
 8001888:	e000      	b.n	800188c <HAL_FMC_MspInit+0x9c>
    return;
 800188a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000810 	.word	0x20000810
 8001898:	40023800 	.word	0x40023800
 800189c:	40021400 	.word	0x40021400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80018b0:	f7ff ff9e 	bl	80017f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08e      	sub	sp, #56	; 0x38
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_InitTick+0xe0>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <HAL_InitTick+0xe0>)
 80018d2:	f043 0310 	orr.w	r3, r3, #16
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_InitTick+0xe0>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e4:	f107 0210 	add.w	r2, r7, #16
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 f83c 	bl	800396c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fe:	f002 f80d 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8001902:	6378      	str	r0, [r7, #52]	; 0x34
 8001904:	e004      	b.n	8001910 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001906:	f002 f809 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800190a:	4603      	mov	r3, r0
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_InitTick+0xe4>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	0c9b      	lsrs	r3, r3, #18
 800191a:	3b01      	subs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_InitTick+0xe8>)
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <HAL_InitTick+0xec>)
 8001922:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_InitTick+0xe8>)
 8001926:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_InitTick+0xe8>)
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_InitTick+0xe8>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_InitTick+0xe8>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_InitTick+0xe8>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001944:	4817      	ldr	r0, [pc, #92]	; (80019a4 <HAL_InitTick+0xe8>)
 8001946:	f002 fc7b 	bl	8004240 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001954:	2b00      	cmp	r3, #0
 8001956:	d11b      	bne.n	8001990 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <HAL_InitTick+0xe8>)
 800195a:	f002 fcc9 	bl	80042f0 <HAL_TIM_Base_Start_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001968:	2b00      	cmp	r3, #0
 800196a:	d111      	bne.n	8001990 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800196c:	2036      	movs	r0, #54	; 0x36
 800196e:	f000 fe0e 	bl	800258e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d808      	bhi.n	800198a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	2036      	movs	r0, #54	; 0x36
 800197e:	f000 fdea 	bl	8002556 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_InitTick+0xf0>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e002      	b.n	8001990 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001994:	4618      	mov	r0, r3
 8001996:	3738      	adds	r7, #56	; 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	20000814 	.word	0x20000814
 80019a8:	40001000 	.word	0x40001000
 80019ac:	20000004 	.word	0x20000004

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <CAN1_RX0_IRQHandler+0x10>)
 8001a0e:	f000 fa76 	bl	8001efe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200004a4 	.word	0x200004a4

08001a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <USART1_IRQHandler+0x10>)
 8001a22:	f003 f9a9 	bl	8004d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000628 	.word	0x20000628

08001a30 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <USART3_IRQHandler+0x10>)
 8001a36:	f003 f99f 	bl	8004d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200006b0 	.word	0x200006b0

08001a44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <UART4_IRQHandler+0x10>)
 8001a4a:	f003 f995 	bl	8004d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000518 	.word	0x20000518

08001a58 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <UART5_IRQHandler+0x10>)
 8001a5e:	f003 f98b 	bl	8004d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200005a0 	.word	0x200005a0

08001a6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <TIM6_DAC_IRQHandler+0x10>)
 8001a72:	f002 fcb5 	bl	80043e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000814 	.word	0x20000814

08001a80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM7_IRQHandler+0x10>)
 8001a86:	f002 fcab 	bl	80043e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200004cc 	.word	0x200004cc

08001a94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <USART6_IRQHandler+0x10>)
 8001a9a:	f003 f96d 	bl	8004d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000738 	.word	0x20000738

08001aa8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
  }

  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe ffdd 	bl	8000abc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
  }
  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f004 fc7a 	bl	80064ac <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20050000 	.word	0x20050000
 8001be4:	00004000 	.word	0x00004000
 8001be8:	20000860 	.word	0x20000860
 8001bec:	20000898 	.word	0x20000898

08001bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff ffd7 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f004 fc39 	bl	80064b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7fe ffb9 	bl	8000bbc <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c58:	0800783c 	.word	0x0800783c
  ldr r2, =_sbss
 8001c5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c60:	20000894 	.word	0x20000894

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>

08001c66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f000 fc68 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c70:	200f      	movs	r0, #15
 8001c72:	f7ff fe23 	bl	80018bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f7ff fb5d 	bl	8001334 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	; (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	20000864 	.word	0x20000864

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000864 	.word	0x20000864

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008

08001d08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0ed      	b.n	8001ef6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fb28 	bl	800137c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3c:	f7ff ffb4 	bl	8001ca8 <HAL_GetTick>
 8001d40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d42:	e012      	b.n	8001d6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d44:	f7ff ffb0 	bl	8001ca8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b0a      	cmp	r3, #10
 8001d50:	d90b      	bls.n	8001d6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2205      	movs	r2, #5
 8001d62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0c5      	b.n	8001ef6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0e5      	beq.n	8001d44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0202 	bic.w	r2, r2, #2
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d88:	f7ff ff8e 	bl	8001ca8 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8e:	e012      	b.n	8001db6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d90:	f7ff ff8a 	bl	8001ca8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b0a      	cmp	r3, #10
 8001d9c:	d90b      	bls.n	8001db6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2205      	movs	r2, #5
 8001dae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e09f      	b.n	8001ef6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e5      	bne.n	8001d90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e1b      	ldrb	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d108      	bne.n	8001dde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	e007      	b.n	8001dee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7e5b      	ldrb	r3, [r3, #25]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d108      	bne.n	8001e08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e007      	b.n	8001e18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e9b      	ldrb	r3, [r3, #26]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0220 	orr.w	r2, r2, #32
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e007      	b.n	8001e42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0220 	bic.w	r2, r2, #32
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7edb      	ldrb	r3, [r3, #27]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0210 	bic.w	r2, r2, #16
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e007      	b.n	8001e6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0210 	orr.w	r2, r2, #16
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7f1b      	ldrb	r3, [r3, #28]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d108      	bne.n	8001e86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0208 	orr.w	r2, r2, #8
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e007      	b.n	8001e96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0208 	bic.w	r2, r2, #8
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7f5b      	ldrb	r3, [r3, #29]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e007      	b.n	8001ec0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0204 	bic.w	r2, r2, #4
 8001ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	ea42 0103 	orr.w	r1, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b08a      	sub	sp, #40	; 0x28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d07c      	beq.n	800203e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d023      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2201      	movs	r2, #1
 8001f54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f983 	bl	800226c <HAL_CAN_TxMailbox0CompleteCallback>
 8001f66:	e016      	b.n	8001f96 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e00c      	b.n	8001f96 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8e:	e002      	b.n	8001f96 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f989 	bl	80022a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d024      	beq.n	8001fea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f963 	bl	8002280 <HAL_CAN_TxMailbox1CompleteCallback>
 8001fba:	e016      	b.n	8001fea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e00c      	b.n	8001fea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d004      	beq.n	8001fe4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe2:	e002      	b.n	8001fea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f969 	bl	80022bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d024      	beq.n	800203e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ffc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f943 	bl	8002294 <HAL_CAN_TxMailbox2CompleteCallback>
 800200e:	e016      	b.n	800203e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e00c      	b.n	800203e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
 8002036:	e002      	b.n	800203e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f949 	bl	80022d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00c      	beq.n	8002062 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002058:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2210      	movs	r2, #16
 8002060:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2208      	movs	r2, #8
 800207c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f93a 	bl	80022f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d009      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f921 	bl	80022e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2210      	movs	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2208      	movs	r2, #8
 80020e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f91c 	bl	8002320 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f903 	bl	800230c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2210      	movs	r2, #16
 8002120:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f906 	bl	8002334 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d006      	beq.n	800214a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2208      	movs	r2, #8
 8002142:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f8ff 	bl	8002348 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d07b      	beq.n	800224c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d072      	beq.n	8002244 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d043      	beq.n	8002244 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d03e      	beq.n	8002244 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021cc:	2b60      	cmp	r3, #96	; 0x60
 80021ce:	d02b      	beq.n	8002228 <HAL_CAN_IRQHandler+0x32a>
 80021d0:	2b60      	cmp	r3, #96	; 0x60
 80021d2:	d82e      	bhi.n	8002232 <HAL_CAN_IRQHandler+0x334>
 80021d4:	2b50      	cmp	r3, #80	; 0x50
 80021d6:	d022      	beq.n	800221e <HAL_CAN_IRQHandler+0x320>
 80021d8:	2b50      	cmp	r3, #80	; 0x50
 80021da:	d82a      	bhi.n	8002232 <HAL_CAN_IRQHandler+0x334>
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d019      	beq.n	8002214 <HAL_CAN_IRQHandler+0x316>
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d826      	bhi.n	8002232 <HAL_CAN_IRQHandler+0x334>
 80021e4:	2b30      	cmp	r3, #48	; 0x30
 80021e6:	d010      	beq.n	800220a <HAL_CAN_IRQHandler+0x30c>
 80021e8:	2b30      	cmp	r3, #48	; 0x30
 80021ea:	d822      	bhi.n	8002232 <HAL_CAN_IRQHandler+0x334>
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d002      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x2f8>
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d005      	beq.n	8002200 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021f4:	e01d      	b.n	8002232 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021fe:	e019      	b.n	8002234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002208:	e014      	b.n	8002234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f043 0320 	orr.w	r3, r3, #32
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002212:	e00f      	b.n	8002234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221c:	e00a      	b.n	8002234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002226:	e005      	b.n	8002234 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002230:	e000      	b.n	8002234 <HAL_CAN_IRQHandler+0x336>
            break;
 8002232:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002242:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f87c 	bl	800235c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	4313      	orrs	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00
 80023b4:	05fa0000 	.word	0x05fa0000

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	; (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db12      	blt.n	8002448 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	490a      	ldr	r1, [pc, #40]	; (8002454 <__NVIC_DisableIRQ+0x44>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	3320      	adds	r3, #32
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800243c:	f3bf 8f4f 	dsb	sy
}
 8002440:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002442:	f3bf 8f6f 	isb	sy
}
 8002446:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002518:	f3bf 8f4f 	dsb	sy
}
 800251c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <__NVIC_SystemReset+0x24>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002526:	4904      	ldr	r1, [pc, #16]	; (8002538 <__NVIC_SystemReset+0x24>)
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <__NVIC_SystemReset+0x28>)
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800252e:	f3bf 8f4f 	dsb	sy
}
 8002532:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <__NVIC_SystemReset+0x20>
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	05fa0004 	.word	0x05fa0004

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff11 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff26 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff9a 	bl	80024ac <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff69 	bl	8002458 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff19 	bl	80023d4 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_DisableIRQ>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80025ca:	f7ff ffa3 	bl	8002514 <__NVIC_SystemReset>

080025ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff fb64 	bl	8001ca8 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d008      	beq.n	8002600 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e052      	b.n	80026a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0216 	bic.w	r2, r2, #22
 800260e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <HAL_DMA_Abort+0x62>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002650:	e013      	b.n	800267a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002652:	f7ff fb29 	bl	8001ca8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b05      	cmp	r3, #5
 800265e:	d90c      	bls.n	800267a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e015      	b.n	80026a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e4      	bne.n	8002652 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	223f      	movs	r2, #63	; 0x3f
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d004      	beq.n	80026cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e00c      	b.n	80026e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2205      	movs	r2, #5
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_FLASH_Program+0xb0>)
 8002708:	7d1b      	ldrb	r3, [r3, #20]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_FLASH_Program+0x1e>
 800270e:	2302      	movs	r3, #2
 8002710:	e043      	b.n	800279a <HAL_FLASH_Program+0xa6>
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_FLASH_Program+0xb0>)
 8002714:	2201      	movs	r2, #1
 8002716:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002718:	f24c 3050 	movw	r0, #50000	; 0xc350
 800271c:	f000 f878 	bl	8002810 <FLASH_WaitForLastOperation>
 8002720:	4603      	mov	r3, r0
 8002722:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d133      	bne.n	8002792 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d823      	bhi.n	8002778 <HAL_FLASH_Program+0x84>
 8002730:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <HAL_FLASH_Program+0x44>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	08002749 	.word	0x08002749
 800273c:	08002755 	.word	0x08002755
 8002740:	08002761 	.word	0x08002761
 8002744:	0800276d 	.word	0x0800276d
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002748:	783b      	ldrb	r3, [r7, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	68b8      	ldr	r0, [r7, #8]
 800274e:	f000 f921 	bl	8002994 <FLASH_Program_Byte>
        break;
 8002752:	e012      	b.n	800277a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002754:	883b      	ldrh	r3, [r7, #0]
 8002756:	4619      	mov	r1, r3
 8002758:	68b8      	ldr	r0, [r7, #8]
 800275a:	f000 f8f5 	bl	8002948 <FLASH_Program_HalfWord>
        break;
 800275e:	e00c      	b.n	800277a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	f000 f8c9 	bl	80028fc <FLASH_Program_Word>
        break;
 800276a:	e006      	b.n	800277a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800276c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002770:	68b8      	ldr	r0, [r7, #8]
 8002772:	f000 f88d 	bl	8002890 <FLASH_Program_DoubleWord>
        break;
 8002776:	e000      	b.n	800277a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002778:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800277a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800277e:	f000 f847 	bl	8002810 <FLASH_WaitForLastOperation>
 8002782:	4603      	mov	r3, r0
 8002784:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <HAL_FLASH_Program+0xb4>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <HAL_FLASH_Program+0xb4>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <HAL_FLASH_Program+0xb0>)
 8002794:	2200      	movs	r2, #0
 8002796:	751a      	strb	r2, [r3, #20]

  return status;
 8002798:	7dfb      	ldrb	r3, [r7, #23]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000868 	.word	0x20000868
 80027a8:	40023c00 	.word	0x40023c00

080027ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_FLASH_Unlock+0x38>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da0b      	bge.n	80027d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_FLASH_Unlock+0x38>)
 80027c0:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_FLASH_Unlock+0x3c>)
 80027c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_FLASH_Unlock+0x38>)
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <HAL_FLASH_Unlock+0x40>)
 80027c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_FLASH_Unlock+0x38>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da01      	bge.n	80027d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027d6:	79fb      	ldrb	r3, [r7, #7]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	45670123 	.word	0x45670123
 80027ec:	cdef89ab 	.word	0xcdef89ab

080027f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_FLASH_Lock+0x1c>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_FLASH_Lock+0x1c>)
 80027fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	40023c00 	.word	0x40023c00

08002810 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <FLASH_WaitForLastOperation+0x78>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002822:	f7ff fa41 	bl	8001ca8 <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002828:	e010      	b.n	800284c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002830:	d00c      	beq.n	800284c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <FLASH_WaitForLastOperation+0x38>
 8002838:	f7ff fa36 	bl	8001ca8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	d201      	bcs.n	800284c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e019      	b.n	8002880 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <FLASH_WaitForLastOperation+0x7c>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e8      	bne.n	800282a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <FLASH_WaitForLastOperation+0x7c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002864:	f000 f8ba 	bl	80029dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e009      	b.n	8002880 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <FLASH_WaitForLastOperation+0x7c>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <FLASH_WaitForLastOperation+0x7c>)
 800287a:	2201      	movs	r2, #1
 800287c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
  
}  
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000868 	.word	0x20000868
 800288c:	40023c00 	.word	0x40023c00

08002890 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <FLASH_Program_DoubleWord+0x68>)
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <FLASH_Program_DoubleWord+0x68>)
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <FLASH_Program_DoubleWord+0x68>)
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <FLASH_Program_DoubleWord+0x68>)
 80028ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80028b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <FLASH_Program_DoubleWord+0x68>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <FLASH_Program_DoubleWord+0x68>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80028c6:	f3bf 8f6f 	isb	sy
}
 80028ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80028cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	000a      	movs	r2, r1
 80028da:	2300      	movs	r3, #0
 80028dc:	68f9      	ldr	r1, [r7, #12]
 80028de:	3104      	adds	r1, #4
 80028e0:	4613      	mov	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80028e4:	f3bf 8f4f 	dsb	sy
}
 80028e8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40023c00 	.word	0x40023c00

080028fc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <FLASH_Program_Word+0x48>)
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <FLASH_Program_Word+0x48>)
 800290c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002910:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002912:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <FLASH_Program_Word+0x48>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <FLASH_Program_Word+0x48>)
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <FLASH_Program_Word+0x48>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <FLASH_Program_Word+0x48>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002930:	f3bf 8f4f 	dsb	sy
}
 8002934:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00

08002948 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <FLASH_Program_HalfWord+0x48>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <FLASH_Program_HalfWord+0x48>)
 800295a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <FLASH_Program_HalfWord+0x48>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <FLASH_Program_HalfWord+0x48>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <FLASH_Program_HalfWord+0x48>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <FLASH_Program_HalfWord+0x48>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800297e:	f3bf 8f4f 	dsb	sy
}
 8002982:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	40023c00 	.word	0x40023c00

08002994 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <FLASH_Program_Byte+0x44>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <FLASH_Program_Byte+0x44>)
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <FLASH_Program_Byte+0x44>)
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <FLASH_Program_Byte+0x44>)
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <FLASH_Program_Byte+0x44>)
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <FLASH_Program_Byte+0x44>)
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80029c6:	f3bf 8f4f 	dsb	sy
}
 80029ca:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	40023c00 	.word	0x40023c00

080029dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <FLASH_SetErrorCode+0x8c>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 80029f6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <FLASH_SetErrorCode+0x8c>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f043 0310 	orr.w	r3, r3, #16
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a0e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <FLASH_SetErrorCode+0x8c>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a26:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <FLASH_SetErrorCode+0x8c>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002a34:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f043 0304 	orr.w	r3, r3, #4
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a3e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <FLASH_SetErrorCode+0x8c>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <FLASH_SetErrorCode+0x90>)
 8002a56:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <FLASH_SetErrorCode+0x8c>)
 8002a5a:	22f2      	movs	r2, #242	; 0xf2
 8002a5c:	60da      	str	r2, [r3, #12]
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40023c00 	.word	0x40023c00
 8002a6c:	20000868 	.word	0x20000868

08002a70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_FLASHEx_Erase+0xd0>)
 8002a84:	7d1b      	ldrb	r3, [r3, #20]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_FLASHEx_Erase+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e053      	b.n	8002b36 <HAL_FLASHEx_Erase+0xc6>
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_FLASHEx_Erase+0xd0>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a98:	f7ff feba 	bl	8002810 <FLASH_WaitForLastOperation>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d143      	bne.n	8002b2e <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aac:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d112      	bne.n	8002adc <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f843 	bl	8002b48 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ac2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ac6:	f7ff fea3 	bl	8002810 <FLASH_WaitForLastOperation>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <HAL_FLASHEx_Erase+0xd4>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <HAL_FLASHEx_Erase+0xd4>)
 8002ad4:	f023 0304 	bic.w	r3, r3, #4
 8002ad8:	6113      	str	r3, [r2, #16]
 8002ada:	e028      	b.n	8002b2e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	e01c      	b.n	8002b1e <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	68b8      	ldr	r0, [r7, #8]
 8002aee:	f000 f851 	bl	8002b94 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002af2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002af6:	f7ff fe8b 	bl	8002810 <FLASH_WaitForLastOperation>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002afe:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_FLASHEx_Erase+0xd4>)
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	4a10      	ldr	r2, [pc, #64]	; (8002b44 <HAL_FLASHEx_Erase+0xd4>)
 8002b04:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8002b08:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	601a      	str	r2, [r3, #0]
          break;
 8002b16:	e00a      	b.n	8002b2e <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4413      	add	r3, r2
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d3da      	bcc.n	8002ae4 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <HAL_FLASHEx_Erase+0xd0>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	751a      	strb	r2, [r3, #20]

  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000868 	.word	0x20000868
 8002b44:	40023c00 	.word	0x40023c00

08002b48 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <FLASH_MassErase+0x48>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <FLASH_MassErase+0x48>)
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <FLASH_MassErase+0x48>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <FLASH_MassErase+0x48>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <FLASH_MassErase+0x48>)
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	4313      	orrs	r3, r2
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <FLASH_MassErase+0x48>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b7c:	f3bf 8f4f 	dsb	sy
}
 8002b80:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e010      	b.n	8002bd2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d103      	bne.n	8002bbe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e009      	b.n	8002bd2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d103      	bne.n	8002bcc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	e002      	b.n	8002bd2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002bcc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	4911      	ldr	r1, [pc, #68]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002bf0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002c02:	f043 0302 	orr.w	r3, r3, #2
 8002c06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <FLASH_Erase_Sector+0x94>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c14:	f3bf 8f4f 	dsb	sy
}
 8002c18:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e175      	b.n	8002f38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 8164 	bne.w	8002f32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_GPIO_Init+0x56>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d123      	bne.n	8002d74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80be 	beq.w	8002f32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dce:	4a61      	ldr	r2, [pc, #388]	; (8002f54 <HAL_GPIO_Init+0x328>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_GPIO_Init+0x32c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d037      	beq.n	8002e6a <HAL_GPIO_Init+0x23e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a57      	ldr	r2, [pc, #348]	; (8002f5c <HAL_GPIO_Init+0x330>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_GPIO_Init+0x23a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_GPIO_Init+0x334>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x236>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a55      	ldr	r2, [pc, #340]	; (8002f64 <HAL_GPIO_Init+0x338>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x232>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a54      	ldr	r2, [pc, #336]	; (8002f68 <HAL_GPIO_Init+0x33c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x22e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a53      	ldr	r2, [pc, #332]	; (8002f6c <HAL_GPIO_Init+0x340>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x22a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a52      	ldr	r2, [pc, #328]	; (8002f70 <HAL_GPIO_Init+0x344>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x226>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a51      	ldr	r2, [pc, #324]	; (8002f74 <HAL_GPIO_Init+0x348>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x222>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_GPIO_Init+0x34c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x21e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4f      	ldr	r2, [pc, #316]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x21a>
 8002e42:	2309      	movs	r3, #9
 8002e44:	e012      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e46:	230a      	movs	r3, #10
 8002e48:	e010      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e00e      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e7c:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_GPIO_Init+0x328>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eae:	4a34      	ldr	r2, [pc, #208]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed8:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ae86 	bls.w	8002c4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40021400 	.word	0x40021400
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40021c00 	.word	0x40021c00
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40022400 	.word	0x40022400
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
 8002f90:	4613      	mov	r3, r2
 8002f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f94:	787b      	ldrb	r3, [r7, #1]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fa0:	e003      	b.n	8002faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	041a      	lsls	r2, r3, #16
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	619a      	str	r2, [r3, #24]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fe6:	f7fe fe5f 	bl	8001ca8 <HAL_GetTick>
 8002fea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fec:	e009      	b.n	8003002 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fee:	f7fe fe5b 	bl	8001ca8 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ffc:	d901      	bls.n	8003002 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e022      	b.n	8003048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300e:	d1ee      	bne.n	8002fee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003010:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800301c:	f7fe fe44 	bl	8001ca8 <HAL_GetTick>
 8003020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003022:	e009      	b.n	8003038 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003024:	f7fe fe40 	bl	8001ca8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003032:	d901      	bls.n	8003038 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e007      	b.n	8003048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_PWREx_EnableOverDrive+0x9c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003044:	d1ee      	bne.n	8003024 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000

08003058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003060:	2300      	movs	r3, #0
 8003062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e291      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8087 	beq.w	800318a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800307c:	4b96      	ldr	r3, [pc, #600]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b04      	cmp	r3, #4
 8003086:	d00c      	beq.n	80030a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003088:	4b93      	ldr	r3, [pc, #588]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d112      	bne.n	80030ba <HAL_RCC_OscConfig+0x62>
 8003094:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d10b      	bne.n	80030ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a2:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d06c      	beq.n	8003188 <HAL_RCC_OscConfig+0x130>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d168      	bne.n	8003188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e26b      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c2:	d106      	bne.n	80030d2 <HAL_RCC_OscConfig+0x7a>
 80030c4:	4b84      	ldr	r3, [pc, #528]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a83      	ldr	r2, [pc, #524]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e02e      	b.n	8003130 <HAL_RCC_OscConfig+0xd8>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x9c>
 80030da:	4b7f      	ldr	r3, [pc, #508]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7e      	ldr	r2, [pc, #504]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7b      	ldr	r2, [pc, #492]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80030ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	e01d      	b.n	8003130 <HAL_RCC_OscConfig+0xd8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0xc0>
 80030fe:	4b76      	ldr	r3, [pc, #472]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a72      	ldr	r2, [pc, #456]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0xd8>
 8003118:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6e      	ldr	r2, [pc, #440]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800311e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b6c      	ldr	r3, [pc, #432]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a6b      	ldr	r2, [pc, #428]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800312a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d013      	beq.n	8003160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fdb6 	bl	8001ca8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fdb2 	bl	8001ca8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e21f      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0xe8>
 800315e:	e014      	b.n	800318a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe fda2 	bl	8001ca8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe fd9e 	bl	8001ca8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e20b      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b57      	ldr	r3, [pc, #348]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x110>
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d069      	beq.n	800326a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003196:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031a2:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b08      	cmp	r3, #8
 80031ac:	d11c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x190>
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d116      	bne.n	80031e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_RCC_OscConfig+0x17a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d001      	beq.n	80031d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e1df      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d2:	4b41      	ldr	r3, [pc, #260]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	493d      	ldr	r1, [pc, #244]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e6:	e040      	b.n	800326a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f0:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a38      	ldr	r2, [pc, #224]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fd54 	bl	8001ca8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe fd50 	bl	8001ca8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1bd      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003216:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003222:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4929      	ldr	r1, [pc, #164]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
 8003236:	e018      	b.n	800326a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a26      	ldr	r2, [pc, #152]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fe fd30 	bl	8001ca8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324c:	f7fe fd2c 	bl	8001ca8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e199      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d038      	beq.n	80032e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d019      	beq.n	80032b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003282:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fe fd0d 	bl	8001ca8 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003292:	f7fe fd09 	bl	8001ca8 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e176      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x23a>
 80032b0:	e01a      	b.n	80032e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <HAL_RCC_OscConfig+0x280>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fcf3 	bl	8001ca8 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe fcef 	bl	8001ca8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d903      	bls.n	80032dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e15c      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
 80032d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b91      	ldr	r3, [pc, #580]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ee      	bne.n	80032c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a4 	beq.w	800343e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032f6:	4b8b      	ldr	r3, [pc, #556]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10d      	bne.n	800331e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	4b88      	ldr	r3, [pc, #544]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a87      	ldr	r2, [pc, #540]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331a:	2301      	movs	r3, #1
 800331c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331e:	4b82      	ldr	r3, [pc, #520]	; (8003528 <HAL_RCC_OscConfig+0x4d0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d118      	bne.n	800335c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800332a:	4b7f      	ldr	r3, [pc, #508]	; (8003528 <HAL_RCC_OscConfig+0x4d0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7e      	ldr	r2, [pc, #504]	; (8003528 <HAL_RCC_OscConfig+0x4d0>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003336:	f7fe fcb7 	bl	8001ca8 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fcb3 	bl	8001ca8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b64      	cmp	r3, #100	; 0x64
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e120      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003350:	4b75      	ldr	r3, [pc, #468]	; (8003528 <HAL_RCC_OscConfig+0x4d0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x31a>
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a6e      	ldr	r2, [pc, #440]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	e02d      	b.n	80033ce <HAL_RCC_OscConfig+0x376>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x33c>
 800337a:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a69      	ldr	r2, [pc, #420]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	4b67      	ldr	r3, [pc, #412]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a66      	ldr	r2, [pc, #408]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	e01c      	b.n	80033ce <HAL_RCC_OscConfig+0x376>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b05      	cmp	r3, #5
 800339a:	d10c      	bne.n	80033b6 <HAL_RCC_OscConfig+0x35e>
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a60      	ldr	r2, [pc, #384]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	e00b      	b.n	80033ce <HAL_RCC_OscConfig+0x376>
 80033b6:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a57      	ldr	r2, [pc, #348]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d015      	beq.n	8003402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fc67 	bl	8001ca8 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fc63 	bl	8001ca8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0ce      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ee      	beq.n	80033de <HAL_RCC_OscConfig+0x386>
 8003400:	e014      	b.n	800342c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe fc51 	bl	8001ca8 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe fc4d 	bl	8001ca8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0b8      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003420:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ee      	bne.n	800340a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003432:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a3b      	ldr	r2, [pc, #236]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80a4 	beq.w	8003590 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003448:	4b36      	ldr	r3, [pc, #216]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d06b      	beq.n	800352c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d149      	bne.n	80034f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a30      	ldr	r2, [pc, #192]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fc1e 	bl	8001ca8 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe fc1a 	bl	8001ca8 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e087      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b28      	ldr	r3, [pc, #160]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	4313      	orrs	r3, r2
 80034b4:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fbee 	bl	8001ca8 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d0:	f7fe fbea 	bl	8001ca8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e057      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x478>
 80034ee:	e04f      	b.n	8003590 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fbd4 	bl	8001ca8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fbd0 	bl	8001ca8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03d      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_RCC_OscConfig+0x4cc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x4ac>
 8003522:	e035      	b.n	8003590 <HAL_RCC_OscConfig+0x538>
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x544>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d028      	beq.n	800358c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d121      	bne.n	800358c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d11a      	bne.n	800358c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800355c:	4013      	ands	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003562:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003564:	4293      	cmp	r3, r2
 8003566:	d111      	bne.n	800358c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	3b01      	subs	r3, #1
 8003576:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0d0      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b8:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d910      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	4b67      	ldr	r3, [pc, #412]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 020f 	bic.w	r2, r3, #15
 80035ce:	4965      	ldr	r1, [pc, #404]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d001      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e0b8      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003600:	4b59      	ldr	r3, [pc, #356]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a58      	ldr	r2, [pc, #352]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800360a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a52      	ldr	r2, [pc, #328]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	494d      	ldr	r1, [pc, #308]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d040      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d115      	bne.n	8003682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e07f      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e073      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06b      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003682:	4b39      	ldr	r3, [pc, #228]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4936      	ldr	r1, [pc, #216]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fe fb08 	bl	8001ca8 <HAL_GetTick>
 8003698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	e00a      	b.n	80036b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369c:	f7fe fb04 	bl	8001ca8 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e053      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 020c 	and.w	r2, r3, #12
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d1eb      	bne.n	800369c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c4:	4b27      	ldr	r3, [pc, #156]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d210      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	4922      	ldr	r1, [pc, #136]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e032      	b.n	800375a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003700:	4b19      	ldr	r3, [pc, #100]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4916      	ldr	r1, [pc, #88]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d009      	beq.n	8003732 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371e:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	490e      	ldr	r1, [pc, #56]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003732:	f000 f821 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003736:	4602      	mov	r2, r0
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	091b      	lsrs	r3, r3, #4
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	490a      	ldr	r1, [pc, #40]	; (800376c <HAL_RCC_ClockConfig+0x1cc>)
 8003744:	5ccb      	ldrb	r3, [r1, r3]
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	4a09      	ldr	r2, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1d0>)
 800374c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_ClockConfig+0x1d4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe f8b2 	bl	80018bc <HAL_InitTick>

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023c00 	.word	0x40023c00
 8003768:	40023800 	.word	0x40023800
 800376c:	0800777c 	.word	0x0800777c
 8003770:	20000000 	.word	0x20000000
 8003774:	20000004 	.word	0x20000004

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800377c:	b090      	sub	sp, #64	; 0x40
 800377e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
 8003784:	2300      	movs	r3, #0
 8003786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003788:	2300      	movs	r3, #0
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b08      	cmp	r3, #8
 800379a:	d00d      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x40>
 800379c:	2b08      	cmp	r3, #8
 800379e:	f200 80a1 	bhi.w	80038e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x34>
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037aa:	e09b      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_GetSysClockFreq+0x184>)
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b0:	e09b      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_GetSysClockFreq+0x188>)
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037b6:	e098      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037b8:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037c2:	4b4d      	ldr	r3, [pc, #308]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d028      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ce:	4b4a      	ldr	r3, [pc, #296]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	099b      	lsrs	r3, r3, #6
 80037d4:	2200      	movs	r2, #0
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	627a      	str	r2, [r7, #36]	; 0x24
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037e0:	2100      	movs	r1, #0
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e4:	fb03 f201 	mul.w	r2, r3, r1
 80037e8:	2300      	movs	r3, #0
 80037ea:	fb00 f303 	mul.w	r3, r0, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	4a43      	ldr	r2, [pc, #268]	; (8003900 <HAL_RCC_GetSysClockFreq+0x188>)
 80037f2:	fba0 1202 	umull	r1, r2, r0, r2
 80037f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f8:	460a      	mov	r2, r1
 80037fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80037fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fe:	4413      	add	r3, r2
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	2200      	movs	r2, #0
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	61fa      	str	r2, [r7, #28]
 800380a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003812:	f7fc fd4d 	bl	80002b0 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4613      	mov	r3, r2
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800381e:	e053      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003820:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	2200      	movs	r2, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	617a      	str	r2, [r7, #20]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003832:	f04f 0b00 	mov.w	fp, #0
 8003836:	4652      	mov	r2, sl
 8003838:	465b      	mov	r3, fp
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	0159      	lsls	r1, r3, #5
 8003844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003848:	0150      	lsls	r0, r2, #5
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	ebb2 080a 	subs.w	r8, r2, sl
 8003852:	eb63 090b 	sbc.w	r9, r3, fp
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003862:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003866:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800386a:	ebb2 0408 	subs.w	r4, r2, r8
 800386e:	eb63 0509 	sbc.w	r5, r3, r9
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	00eb      	lsls	r3, r5, #3
 800387c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003880:	00e2      	lsls	r2, r4, #3
 8003882:	4614      	mov	r4, r2
 8003884:	461d      	mov	r5, r3
 8003886:	eb14 030a 	adds.w	r3, r4, sl
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	eb45 030b 	adc.w	r3, r5, fp
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800389e:	4629      	mov	r1, r5
 80038a0:	028b      	lsls	r3, r1, #10
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038a8:	4621      	mov	r1, r4
 80038aa:	028a      	lsls	r2, r1, #10
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	2200      	movs	r2, #0
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038bc:	f7fc fcf8 	bl	80002b0 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	0c1b      	lsrs	r3, r3, #16
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	3301      	adds	r3, #1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80038d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <HAL_RCC_GetSysClockFreq+0x184>)
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3740      	adds	r7, #64	; 0x40
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	017d7840 	.word	0x017d7840

08003904 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	0800778c 	.word	0x0800778c

08003944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003948:	f7ff ffdc 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0b5b      	lsrs	r3, r3, #13
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4903      	ldr	r1, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	0800778c 	.word	0x0800778c

0800396c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	220f      	movs	r2, #15
 800397a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_RCC_GetClockConfig+0x60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d012      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039f8:	4b69      	ldr	r3, [pc, #420]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a02:	6093      	str	r3, [r2, #8]
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0c:	4964      	ldr	r1, [pc, #400]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d017      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	4959      	ldr	r1, [pc, #356]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d017      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a66:	4b4e      	ldr	r3, [pc, #312]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	494a      	ldr	r1, [pc, #296]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a84:	d101      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 808b 	beq.w	8003bca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	4a39      	ldr	r2, [pc, #228]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	6413      	str	r3, [r2, #64]	; 0x40
 8003ac0:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003acc:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a34      	ldr	r2, [pc, #208]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fe f8e6 	bl	8001ca8 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae0:	f7fe f8e2 	bl	8001ca8 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b64      	cmp	r3, #100	; 0x64
 8003aec:	d901      	bls.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e357      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003af2:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d035      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d02e      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b1c:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b26:	4b1e      	ldr	r3, [pc, #120]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d114      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fe f8aa 	bl	8001ca8 <HAL_GetTick>
 8003b54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe f8a6 	bl	8001ca8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e319      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ee      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b86:	d111      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b96:	400b      	ands	r3, r1
 8003b98:	4901      	ldr	r1, [pc, #4]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
 8003b9e:	e00b      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	0ffffcff 	.word	0x0ffffcff
 8003bac:	4baa      	ldr	r3, [pc, #680]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4aa9      	ldr	r2, [pc, #676]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bb6:	6093      	str	r3, [r2, #8]
 8003bb8:	4ba7      	ldr	r3, [pc, #668]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	49a4      	ldr	r1, [pc, #656]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d010      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bd6:	4ba0      	ldr	r3, [pc, #640]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bdc:	4a9e      	ldr	r2, [pc, #632]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003be6:	4b9c      	ldr	r3, [pc, #624]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	4999      	ldr	r1, [pc, #612]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c04:	4b94      	ldr	r3, [pc, #592]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c12:	4991      	ldr	r1, [pc, #580]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c26:	4b8c      	ldr	r3, [pc, #560]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c34:	4988      	ldr	r1, [pc, #544]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c48:	4b83      	ldr	r3, [pc, #524]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c56:	4980      	ldr	r1, [pc, #512]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c6a:	4b7b      	ldr	r3, [pc, #492]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4977      	ldr	r1, [pc, #476]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8c:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	496f      	ldr	r1, [pc, #444]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f023 020c 	bic.w	r2, r3, #12
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cbc:	4966      	ldr	r1, [pc, #408]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cd0:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	495e      	ldr	r1, [pc, #376]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cf2:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d00:	4955      	ldr	r1, [pc, #340]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	494d      	ldr	r1, [pc, #308]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d36:	4b48      	ldr	r3, [pc, #288]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	4944      	ldr	r1, [pc, #272]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d58:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	493c      	ldr	r1, [pc, #240]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	4933      	ldr	r1, [pc, #204]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d9c:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003daa:	492b      	ldr	r1, [pc, #172]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003dbe:	4b26      	ldr	r3, [pc, #152]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dcc:	4922      	ldr	r1, [pc, #136]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	4912      	ldr	r1, [pc, #72]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e30:	4909      	ldr	r1, [pc, #36]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d006      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80d9 	beq.w	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e4c:	4b02      	ldr	r3, [pc, #8]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a01      	ldr	r2, [pc, #4]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e56:	e001      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5e:	f7fd ff23 	bl	8001ca8 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e66:	f7fd ff1f 	bl	8001ca8 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	; 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e194      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e78:	4b6c      	ldr	r3, [pc, #432]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f0      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d021      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11d      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e98:	4b64      	ldr	r3, [pc, #400]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	0c1b      	lsrs	r3, r3, #16
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea6:	4b61      	ldr	r3, [pc, #388]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eac:	0e1b      	lsrs	r3, r3, #24
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	019a      	lsls	r2, r3, #6
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	071b      	lsls	r3, r3, #28
 8003ecc:	4957      	ldr	r1, [pc, #348]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02e      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efe:	d129      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f00:	4b4a      	ldr	r3, [pc, #296]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f06:	0c1b      	lsrs	r3, r3, #16
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f14:	0f1b      	lsrs	r3, r3, #28
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	019a      	lsls	r2, r3, #6
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	041b      	lsls	r3, r3, #16
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	071b      	lsls	r3, r3, #28
 8003f34:	493d      	ldr	r1, [pc, #244]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f42:	f023 021f 	bic.w	r2, r3, #31
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	4937      	ldr	r1, [pc, #220]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01d      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f60:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f66:	0e1b      	lsrs	r3, r3, #24
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f6e:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f74:	0f1b      	lsrs	r3, r3, #28
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	019a      	lsls	r2, r3, #6
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	071b      	lsls	r3, r3, #28
 8003f94:	4925      	ldr	r1, [pc, #148]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d011      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	019a      	lsls	r2, r3, #6
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	071b      	lsls	r3, r3, #28
 8003fc4:	4919      	ldr	r1, [pc, #100]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a16      	ldr	r2, [pc, #88]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd8:	f7fd fe66 	bl	8001ca8 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fe0:	f7fd fe62 	bl	8001ca8 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0d7      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 80cd 	bne.w	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a08      	ldr	r2, [pc, #32]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fd fe49 	bl	8001ca8 <HAL_GetTick>
 8004016:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004018:	e00a      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800401a:	f7fd fe45 	bl	8001ca8 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b64      	cmp	r3, #100	; 0x64
 8004026:	d903      	bls.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e0ba      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800402c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004030:	4b5e      	ldr	r3, [pc, #376]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403c:	d0ed      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800405a:	2b00      	cmp	r3, #0
 800405c:	d02e      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d12a      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004066:	4b51      	ldr	r3, [pc, #324]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004074:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	0f1b      	lsrs	r3, r3, #28
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	019a      	lsls	r2, r3, #6
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	071b      	lsls	r3, r3, #28
 800409a:	4944      	ldr	r1, [pc, #272]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040a2:	4b42      	ldr	r3, [pc, #264]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	3b01      	subs	r3, #1
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	493d      	ldr	r1, [pc, #244]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d022      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d0:	d11d      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040d2:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	0e1b      	lsrs	r3, r3, #24
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040e0:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e6:	0f1b      	lsrs	r3, r3, #28
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	019a      	lsls	r2, r3, #6
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	061b      	lsls	r3, r3, #24
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	071b      	lsls	r3, r3, #28
 8004106:	4929      	ldr	r1, [pc, #164]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d028      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800411a:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	0e1b      	lsrs	r3, r3, #24
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004128:	4b20      	ldr	r3, [pc, #128]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	019a      	lsls	r2, r3, #6
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	061b      	lsls	r3, r3, #24
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	071b      	lsls	r3, r3, #28
 800414e:	4917      	ldr	r1, [pc, #92]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004156:	4b15      	ldr	r3, [pc, #84]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800415c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4911      	ldr	r1, [pc, #68]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0e      	ldr	r2, [pc, #56]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd fd96 	bl	8001ca8 <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004180:	f7fd fd92 	bl	8001ca8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e007      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800419a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419e:	d1ef      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800

080041b0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e038      	b.n	8004238 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7fd fb64 	bl	80018a8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3308      	adds	r3, #8
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f002 f846 	bl	800627c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	461a      	mov	r2, r3
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	f002 f8ce 	bl	800639c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6858      	ldr	r0, [r3, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	f002 f915 	bl	800643c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	6892      	ldr	r2, [r2, #8]
 8004226:	f041 0101 	orr.w	r1, r1, #1
 800422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e049      	b.n	80042e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd f8d4 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f000 f9f6 	bl	8004670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d001      	beq.n	8004308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e054      	b.n	80043b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0201 	orr.w	r2, r2, #1
 800431e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d022      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d01d      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d018      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d013      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_TIM_Base_Start_IT+0xdc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_Base_Start_IT+0x80>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d115      	bne.n	800439c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_TIM_Base_Start_IT+0xec>)
 8004378:	4013      	ands	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d015      	beq.n	80043ae <HAL_TIM_Base_Start_IT+0xbe>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d011      	beq.n	80043ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	e008      	b.n	80043ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e000      	b.n	80043b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40001800 	.word	0x40001800
 80043dc:	00010007 	.word	0x00010007

080043e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b02      	cmp	r3, #2
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0202 	mvn.w	r2, #2
 800440c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f905 	bl	8004632 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8f7 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f908 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b04      	cmp	r3, #4
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b04      	cmp	r3, #4
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0204 	mvn.w	r2, #4
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f8db 	bl	8004632 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f8cd 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f8de 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b08      	cmp	r3, #8
 800449c:	d122      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d11b      	bne.n	80044e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0208 	mvn.w	r2, #8
 80044b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2204      	movs	r2, #4
 80044ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8b1 	bl	8004632 <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8a3 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8b4 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d122      	bne.n	8004538 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d11b      	bne.n	8004538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0210 	mvn.w	r2, #16
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2208      	movs	r2, #8
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f887 	bl	8004632 <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f879 	bl	800461e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f88a 	bl	8004646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10e      	bne.n	8004564 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d107      	bne.n	8004564 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0201 	mvn.w	r2, #1
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fed0 	bl	8001304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d10e      	bne.n	8004590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	d107      	bne.n	8004590 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9a8 	bl	80048e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d10e      	bne.n	80045be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d107      	bne.n	80045be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f99b 	bl	80048f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d10e      	bne.n	80045ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f838 	bl	800465a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d10e      	bne.n	8004616 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d107      	bne.n	8004616 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f06f 0220 	mvn.w	r2, #32
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f95b 	bl	80048cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004616:	bf00      	nop
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a40      	ldr	r2, [pc, #256]	; (8004784 <TIM_Base_SetConfig+0x114>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <TIM_Base_SetConfig+0x40>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468e:	d00f      	beq.n	80046b0 <TIM_Base_SetConfig+0x40>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a3d      	ldr	r2, [pc, #244]	; (8004788 <TIM_Base_SetConfig+0x118>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00b      	beq.n	80046b0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3c      	ldr	r2, [pc, #240]	; (800478c <TIM_Base_SetConfig+0x11c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3b      	ldr	r2, [pc, #236]	; (8004790 <TIM_Base_SetConfig+0x120>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3a      	ldr	r2, [pc, #232]	; (8004794 <TIM_Base_SetConfig+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a2f      	ldr	r2, [pc, #188]	; (8004784 <TIM_Base_SetConfig+0x114>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02b      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d0:	d027      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2c      	ldr	r2, [pc, #176]	; (8004788 <TIM_Base_SetConfig+0x118>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d023      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a2b      	ldr	r2, [pc, #172]	; (800478c <TIM_Base_SetConfig+0x11c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d01f      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <TIM_Base_SetConfig+0x120>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d01b      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <TIM_Base_SetConfig+0x124>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d017      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a28      	ldr	r2, [pc, #160]	; (8004798 <TIM_Base_SetConfig+0x128>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a27      	ldr	r2, [pc, #156]	; (800479c <TIM_Base_SetConfig+0x12c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <TIM_Base_SetConfig+0x130>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a25      	ldr	r2, [pc, #148]	; (80047a4 <TIM_Base_SetConfig+0x134>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a24      	ldr	r2, [pc, #144]	; (80047a8 <TIM_Base_SetConfig+0x138>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <TIM_Base_SetConfig+0x13c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d108      	bne.n	8004734 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <TIM_Base_SetConfig+0x114>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_Base_SetConfig+0xf8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <TIM_Base_SetConfig+0x124>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d103      	bne.n	8004770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	615a      	str	r2, [r3, #20]
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40010400 	.word	0x40010400
 8004798:	40014000 	.word	0x40014000
 800479c:	40014400 	.word	0x40014400
 80047a0:	40014800 	.word	0x40014800
 80047a4:	40001800 	.word	0x40001800
 80047a8:	40001c00 	.word	0x40001c00
 80047ac:	40002000 	.word	0x40002000

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e06d      	b.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a30      	ldr	r2, [pc, #192]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a20      	ldr	r2, [pc, #128]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d022      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483a:	d01d      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d018      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d013      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1a      	ldr	r2, [pc, #104]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00e      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a15      	ldr	r2, [pc, #84]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d009      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d10c      	bne.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800487e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40000800 	.word	0x40000800
 80048c0:	40000c00 	.word	0x40000c00
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40001800 	.word	0x40001800

080048cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e040      	b.n	800499c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fd98 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2224      	movs	r2, #36	; 0x24
 8004934:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0201 	bic.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fd08 	bl	800535c <UART_SetConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e022      	b.n	800499c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 ff60 	bl	8005824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 ffe7 	bl	8005968 <UART_CheckIdleState>
 800499a:	4603      	mov	r3, r0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	; 0x28
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	603b      	str	r3, [r7, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d171      	bne.n	8004aa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_UART_Transmit+0x24>
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e06a      	b.n	8004aa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2221      	movs	r2, #33	; 0x21
 80049d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049da:	f7fd f965 	bl	8001ca8 <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	88fa      	ldrh	r2, [r7, #6]
 80049e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d108      	bne.n	8004a0c <HAL_UART_Transmit+0x68>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e003      	b.n	8004a14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a14:	e02c      	b.n	8004a70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 ffd8 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e038      	b.n	8004aa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e007      	b.n	8004a5e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1cc      	bne.n	8004a16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2200      	movs	r2, #0
 8004a84:	2140      	movs	r1, #64	; 0x40
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 ffa5 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e005      	b.n	8004aa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08a      	sub	sp, #40	; 0x28
 8004aae:	af02      	add	r7, sp, #8
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	f040 80b1 	bne.w	8004c28 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_UART_Receive+0x28>
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e0a9      	b.n	8004c2a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2222      	movs	r2, #34	; 0x22
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aec:	f7fd f8dc 	bl	8001ca8 <HAL_GetTick>
 8004af0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	88fa      	ldrh	r2, [r7, #6]
 8004afe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d10e      	bne.n	8004b2a <HAL_UART_Receive+0x80>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_UART_Receive+0x76>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1e:	e02d      	b.n	8004b7c <HAL_UART_Receive+0xd2>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	22ff      	movs	r2, #255	; 0xff
 8004b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b28:	e028      	b.n	8004b7c <HAL_UART_Receive+0xd2>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10d      	bne.n	8004b4e <HAL_UART_Receive+0xa4>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <HAL_UART_Receive+0x9a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	22ff      	movs	r2, #255	; 0xff
 8004b3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b42:	e01b      	b.n	8004b7c <HAL_UART_Receive+0xd2>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	227f      	movs	r2, #127	; 0x7f
 8004b48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4c:	e016      	b.n	8004b7c <HAL_UART_Receive+0xd2>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b56:	d10d      	bne.n	8004b74 <HAL_UART_Receive+0xca>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <HAL_UART_Receive+0xc0>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	227f      	movs	r2, #127	; 0x7f
 8004b64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b68:	e008      	b.n	8004b7c <HAL_UART_Receive+0xd2>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	223f      	movs	r2, #63	; 0x3f
 8004b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b72:	e003      	b.n	8004b7c <HAL_UART_Receive+0xd2>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d108      	bne.n	8004ba0 <HAL_UART_Receive+0xf6>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e003      	b.n	8004ba8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ba8:	e032      	b.n	8004c10 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2120      	movs	r1, #32
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 ff0e 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e032      	b.n	8004c2a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10c      	bne.n	8004be4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	8a7b      	ldrh	r3, [r7, #18]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	3302      	adds	r3, #2
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	e00c      	b.n	8004bfe <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	8a7b      	ldrh	r3, [r7, #18]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1c6      	bne.n	8004baa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004c28:	2302      	movs	r3, #2
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b08b      	sub	sp, #44	; 0x2c
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d147      	bne.n	8004cda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_UART_Transmit_IT+0x22>
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e040      	b.n	8004cdc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2221      	movs	r2, #33	; 0x21
 8004c82:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d107      	bne.n	8004c9e <HAL_UART_Transmit_IT+0x6a>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <HAL_UART_Transmit_IT+0xb4>)
 8004c9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004c9c:	e002      	b.n	8004ca4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a12      	ldr	r2, [pc, #72]	; (8004cec <HAL_UART_Transmit_IT+0xb8>)
 8004ca2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	69f9      	ldr	r1, [r7, #28]
 8004cc8:	6a3a      	ldr	r2, [r7, #32]
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e6      	bne.n	8004ca4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	372c      	adds	r7, #44	; 0x2c
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	08005e9b 	.word	0x08005e9b
 8004cec:	08005de5 	.word	0x08005de5

08004cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d132      	bne.n	8004d6e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_UART_Receive_IT+0x24>
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e02b      	b.n	8004d70 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d018      	beq.n	8004d5e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e6      	bne.n	8004d2c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	461a      	mov	r2, r3
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fefd 	bl	8005b64 <UART_Start_Receive_IT>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	e000      	b.n	8004d70 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004d6e:	2302      	movs	r3, #2
  }
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3728      	adds	r7, #40	; 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b0ba      	sub	sp, #232	; 0xe8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004da6:	4013      	ands	r3, r2
 8004da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d115      	bne.n	8004de0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00f      	beq.n	8004de0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8297 	beq.w	8005304 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
      }
      return;
 8004dde:	e291      	b.n	8005304 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8117 	beq.w	8005018 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dfa:	4b85      	ldr	r3, [pc, #532]	; (8005010 <HAL_UART_IRQHandler+0x298>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 810a 	beq.w	8005018 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d011      	beq.n	8004e34 <HAL_UART_IRQHandler+0xbc>
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2201      	movs	r2, #1
 8004e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e2a:	f043 0201 	orr.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d011      	beq.n	8004e64 <HAL_UART_IRQHandler+0xec>
 8004e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2202      	movs	r2, #2
 8004e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d011      	beq.n	8004e94 <HAL_UART_IRQHandler+0x11c>
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8a:	f043 0202 	orr.w	r2, r3, #2
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d017      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <HAL_UART_IRQHandler+0x18a>
 8004edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00c      	beq.n	8004f02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 81fd 	beq.w	8005308 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b40      	cmp	r3, #64	; 0x40
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d04f      	beq.n	8004ffa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fec8 	bl	8005cf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d141      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f7c:	e853 3f00 	ldrex	r3, [r3]
 8004f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1d9      	bne.n	8004f6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d013      	beq.n	8004fea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc6:	4a13      	ldr	r2, [pc, #76]	; (8005014 <HAL_UART_IRQHandler+0x29c>)
 8004fc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd fb6d 	bl	80026ae <HAL_DMA_Abort_IT>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d017      	beq.n	800500a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe8:	e00f      	b.n	800500a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f9a0 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	e00b      	b.n	800500a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f99c 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	e007      	b.n	800500a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f998 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005008:	e17e      	b.n	8005308 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500a:	bf00      	nop
    return;
 800500c:	e17c      	b.n	8005308 <HAL_UART_IRQHandler+0x590>
 800500e:	bf00      	nop
 8005010:	04000120 	.word	0x04000120
 8005014:	08005db9 	.word	0x08005db9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501c:	2b01      	cmp	r3, #1
 800501e:	f040 814c 	bne.w	80052ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8145 	beq.w	80052ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 813e 	beq.w	80052ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2210      	movs	r2, #16
 8005044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	f040 80b6 	bne.w	80051c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005062:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8150 	beq.w	800530c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005076:	429a      	cmp	r2, r3
 8005078:	f080 8148 	bcs.w	800530c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005082:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005090:	f000 8086 	beq.w	80051a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1da      	bne.n	8005094 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3308      	adds	r3, #8
 80050fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005102:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005106:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800510a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e1      	bne.n	80050de <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3308      	adds	r3, #8
 8005120:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800512a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800513e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005140:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005144:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800514c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e3      	bne.n	800511a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005170:	f023 0310 	bic.w	r3, r3, #16
 8005174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005182:	65bb      	str	r3, [r7, #88]	; 0x58
 8005184:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005188:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e4      	bne.n	8005160 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd fa17 	bl	80025ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f8c2 	bl	8005344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051c0:	e0a4      	b.n	800530c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8096 	beq.w	8005310 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80051e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8091 	beq.w	8005310 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005210:	647b      	str	r3, [r7, #68]	; 0x44
 8005212:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e4      	bne.n	80051ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	e853 3f00 	ldrex	r3, [r3]
 8005232:	623b      	str	r3, [r7, #32]
   return(result);
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005248:	633a      	str	r2, [r7, #48]	; 0x30
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800524e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e3      	bne.n	8005224 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	60fb      	str	r3, [r7, #12]
   return(result);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f023 0310 	bic.w	r3, r3, #16
 8005284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	69b9      	ldr	r1, [r7, #24]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	617b      	str	r3, [r7, #20]
   return(result);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e4      	bne.n	8005270 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052b0:	4619      	mov	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f846 	bl	8005344 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052b8:	e02a      	b.n	8005310 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80052ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80052c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01c      	beq.n	8005314 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	4798      	blx	r3
    }
    return;
 80052e2:	e017      	b.n	8005314 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_UART_IRQHandler+0x59e>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fe2c 	bl	8005f5a <UART_EndTransmit_IT>
    return;
 8005302:	e008      	b.n	8005316 <HAL_UART_IRQHandler+0x59e>
      return;
 8005304:	bf00      	nop
 8005306:	e006      	b.n	8005316 <HAL_UART_IRQHandler+0x59e>
    return;
 8005308:	bf00      	nop
 800530a:	e004      	b.n	8005316 <HAL_UART_IRQHandler+0x59e>
      return;
 800530c:	bf00      	nop
 800530e:	e002      	b.n	8005316 <HAL_UART_IRQHandler+0x59e>
      return;
 8005310:	bf00      	nop
 8005312:	e000      	b.n	8005316 <HAL_UART_IRQHandler+0x59e>
    return;
 8005314:	bf00      	nop
  }

}
 8005316:	37e8      	adds	r7, #232	; 0xe8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4ba6      	ldr	r3, [pc, #664]	; (8005620 <UART_SetConfig+0x2c4>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	430b      	orrs	r3, r1
 8005392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a94      	ldr	r2, [pc, #592]	; (8005624 <UART_SetConfig+0x2c8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d120      	bne.n	800541a <UART_SetConfig+0xbe>
 80053d8:	4b93      	ldr	r3, [pc, #588]	; (8005628 <UART_SetConfig+0x2cc>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d816      	bhi.n	8005414 <UART_SetConfig+0xb8>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0x90>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005403 	.word	0x08005403
 80053f8:	0800540f 	.word	0x0800540f
 80053fc:	2301      	movs	r3, #1
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e150      	b.n	80056a4 <UART_SetConfig+0x348>
 8005402:	2302      	movs	r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e14d      	b.n	80056a4 <UART_SetConfig+0x348>
 8005408:	2304      	movs	r3, #4
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e14a      	b.n	80056a4 <UART_SetConfig+0x348>
 800540e:	2308      	movs	r3, #8
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e147      	b.n	80056a4 <UART_SetConfig+0x348>
 8005414:	2310      	movs	r3, #16
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e144      	b.n	80056a4 <UART_SetConfig+0x348>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a83      	ldr	r2, [pc, #524]	; (800562c <UART_SetConfig+0x2d0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d132      	bne.n	800548a <UART_SetConfig+0x12e>
 8005424:	4b80      	ldr	r3, [pc, #512]	; (8005628 <UART_SetConfig+0x2cc>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d828      	bhi.n	8005484 <UART_SetConfig+0x128>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <UART_SetConfig+0xdc>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	0800546d 	.word	0x0800546d
 800543c:	08005485 	.word	0x08005485
 8005440:	08005485 	.word	0x08005485
 8005444:	08005485 	.word	0x08005485
 8005448:	08005479 	.word	0x08005479
 800544c:	08005485 	.word	0x08005485
 8005450:	08005485 	.word	0x08005485
 8005454:	08005485 	.word	0x08005485
 8005458:	08005473 	.word	0x08005473
 800545c:	08005485 	.word	0x08005485
 8005460:	08005485 	.word	0x08005485
 8005464:	08005485 	.word	0x08005485
 8005468:	0800547f 	.word	0x0800547f
 800546c:	2300      	movs	r3, #0
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e118      	b.n	80056a4 <UART_SetConfig+0x348>
 8005472:	2302      	movs	r3, #2
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e115      	b.n	80056a4 <UART_SetConfig+0x348>
 8005478:	2304      	movs	r3, #4
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e112      	b.n	80056a4 <UART_SetConfig+0x348>
 800547e:	2308      	movs	r3, #8
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e10f      	b.n	80056a4 <UART_SetConfig+0x348>
 8005484:	2310      	movs	r3, #16
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e10c      	b.n	80056a4 <UART_SetConfig+0x348>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a68      	ldr	r2, [pc, #416]	; (8005630 <UART_SetConfig+0x2d4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d120      	bne.n	80054d6 <UART_SetConfig+0x17a>
 8005494:	4b64      	ldr	r3, [pc, #400]	; (8005628 <UART_SetConfig+0x2cc>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800549e:	2b30      	cmp	r3, #48	; 0x30
 80054a0:	d013      	beq.n	80054ca <UART_SetConfig+0x16e>
 80054a2:	2b30      	cmp	r3, #48	; 0x30
 80054a4:	d814      	bhi.n	80054d0 <UART_SetConfig+0x174>
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d009      	beq.n	80054be <UART_SetConfig+0x162>
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d810      	bhi.n	80054d0 <UART_SetConfig+0x174>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <UART_SetConfig+0x15c>
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d006      	beq.n	80054c4 <UART_SetConfig+0x168>
 80054b6:	e00b      	b.n	80054d0 <UART_SetConfig+0x174>
 80054b8:	2300      	movs	r3, #0
 80054ba:	77fb      	strb	r3, [r7, #31]
 80054bc:	e0f2      	b.n	80056a4 <UART_SetConfig+0x348>
 80054be:	2302      	movs	r3, #2
 80054c0:	77fb      	strb	r3, [r7, #31]
 80054c2:	e0ef      	b.n	80056a4 <UART_SetConfig+0x348>
 80054c4:	2304      	movs	r3, #4
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e0ec      	b.n	80056a4 <UART_SetConfig+0x348>
 80054ca:	2308      	movs	r3, #8
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e0e9      	b.n	80056a4 <UART_SetConfig+0x348>
 80054d0:	2310      	movs	r3, #16
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e0e6      	b.n	80056a4 <UART_SetConfig+0x348>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a56      	ldr	r2, [pc, #344]	; (8005634 <UART_SetConfig+0x2d8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d120      	bne.n	8005522 <UART_SetConfig+0x1c6>
 80054e0:	4b51      	ldr	r3, [pc, #324]	; (8005628 <UART_SetConfig+0x2cc>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054ea:	2bc0      	cmp	r3, #192	; 0xc0
 80054ec:	d013      	beq.n	8005516 <UART_SetConfig+0x1ba>
 80054ee:	2bc0      	cmp	r3, #192	; 0xc0
 80054f0:	d814      	bhi.n	800551c <UART_SetConfig+0x1c0>
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	d009      	beq.n	800550a <UART_SetConfig+0x1ae>
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d810      	bhi.n	800551c <UART_SetConfig+0x1c0>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <UART_SetConfig+0x1a8>
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d006      	beq.n	8005510 <UART_SetConfig+0x1b4>
 8005502:	e00b      	b.n	800551c <UART_SetConfig+0x1c0>
 8005504:	2300      	movs	r3, #0
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0cc      	b.n	80056a4 <UART_SetConfig+0x348>
 800550a:	2302      	movs	r3, #2
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e0c9      	b.n	80056a4 <UART_SetConfig+0x348>
 8005510:	2304      	movs	r3, #4
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0c6      	b.n	80056a4 <UART_SetConfig+0x348>
 8005516:	2308      	movs	r3, #8
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e0c3      	b.n	80056a4 <UART_SetConfig+0x348>
 800551c:	2310      	movs	r3, #16
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e0c0      	b.n	80056a4 <UART_SetConfig+0x348>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a44      	ldr	r2, [pc, #272]	; (8005638 <UART_SetConfig+0x2dc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d125      	bne.n	8005578 <UART_SetConfig+0x21c>
 800552c:	4b3e      	ldr	r3, [pc, #248]	; (8005628 <UART_SetConfig+0x2cc>)
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800553a:	d017      	beq.n	800556c <UART_SetConfig+0x210>
 800553c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005540:	d817      	bhi.n	8005572 <UART_SetConfig+0x216>
 8005542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005546:	d00b      	beq.n	8005560 <UART_SetConfig+0x204>
 8005548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554c:	d811      	bhi.n	8005572 <UART_SetConfig+0x216>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <UART_SetConfig+0x1fe>
 8005552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005556:	d006      	beq.n	8005566 <UART_SetConfig+0x20a>
 8005558:	e00b      	b.n	8005572 <UART_SetConfig+0x216>
 800555a:	2300      	movs	r3, #0
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e0a1      	b.n	80056a4 <UART_SetConfig+0x348>
 8005560:	2302      	movs	r3, #2
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e09e      	b.n	80056a4 <UART_SetConfig+0x348>
 8005566:	2304      	movs	r3, #4
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e09b      	b.n	80056a4 <UART_SetConfig+0x348>
 800556c:	2308      	movs	r3, #8
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e098      	b.n	80056a4 <UART_SetConfig+0x348>
 8005572:	2310      	movs	r3, #16
 8005574:	77fb      	strb	r3, [r7, #31]
 8005576:	e095      	b.n	80056a4 <UART_SetConfig+0x348>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2f      	ldr	r2, [pc, #188]	; (800563c <UART_SetConfig+0x2e0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d125      	bne.n	80055ce <UART_SetConfig+0x272>
 8005582:	4b29      	ldr	r3, [pc, #164]	; (8005628 <UART_SetConfig+0x2cc>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800558c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005590:	d017      	beq.n	80055c2 <UART_SetConfig+0x266>
 8005592:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005596:	d817      	bhi.n	80055c8 <UART_SetConfig+0x26c>
 8005598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559c:	d00b      	beq.n	80055b6 <UART_SetConfig+0x25a>
 800559e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a2:	d811      	bhi.n	80055c8 <UART_SetConfig+0x26c>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <UART_SetConfig+0x254>
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	d006      	beq.n	80055bc <UART_SetConfig+0x260>
 80055ae:	e00b      	b.n	80055c8 <UART_SetConfig+0x26c>
 80055b0:	2301      	movs	r3, #1
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e076      	b.n	80056a4 <UART_SetConfig+0x348>
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e073      	b.n	80056a4 <UART_SetConfig+0x348>
 80055bc:	2304      	movs	r3, #4
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e070      	b.n	80056a4 <UART_SetConfig+0x348>
 80055c2:	2308      	movs	r3, #8
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e06d      	b.n	80056a4 <UART_SetConfig+0x348>
 80055c8:	2310      	movs	r3, #16
 80055ca:	77fb      	strb	r3, [r7, #31]
 80055cc:	e06a      	b.n	80056a4 <UART_SetConfig+0x348>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <UART_SetConfig+0x2e4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d138      	bne.n	800564a <UART_SetConfig+0x2ee>
 80055d8:	4b13      	ldr	r3, [pc, #76]	; (8005628 <UART_SetConfig+0x2cc>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055e6:	d017      	beq.n	8005618 <UART_SetConfig+0x2bc>
 80055e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ec:	d82a      	bhi.n	8005644 <UART_SetConfig+0x2e8>
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	d00b      	beq.n	800560c <UART_SetConfig+0x2b0>
 80055f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f8:	d824      	bhi.n	8005644 <UART_SetConfig+0x2e8>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <UART_SetConfig+0x2aa>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	d006      	beq.n	8005612 <UART_SetConfig+0x2b6>
 8005604:	e01e      	b.n	8005644 <UART_SetConfig+0x2e8>
 8005606:	2300      	movs	r3, #0
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e04b      	b.n	80056a4 <UART_SetConfig+0x348>
 800560c:	2302      	movs	r3, #2
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e048      	b.n	80056a4 <UART_SetConfig+0x348>
 8005612:	2304      	movs	r3, #4
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e045      	b.n	80056a4 <UART_SetConfig+0x348>
 8005618:	2308      	movs	r3, #8
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e042      	b.n	80056a4 <UART_SetConfig+0x348>
 800561e:	bf00      	nop
 8005620:	efff69f3 	.word	0xefff69f3
 8005624:	40011000 	.word	0x40011000
 8005628:	40023800 	.word	0x40023800
 800562c:	40004400 	.word	0x40004400
 8005630:	40004800 	.word	0x40004800
 8005634:	40004c00 	.word	0x40004c00
 8005638:	40005000 	.word	0x40005000
 800563c:	40011400 	.word	0x40011400
 8005640:	40007800 	.word	0x40007800
 8005644:	2310      	movs	r3, #16
 8005646:	77fb      	strb	r3, [r7, #31]
 8005648:	e02c      	b.n	80056a4 <UART_SetConfig+0x348>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a72      	ldr	r2, [pc, #456]	; (8005818 <UART_SetConfig+0x4bc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d125      	bne.n	80056a0 <UART_SetConfig+0x344>
 8005654:	4b71      	ldr	r3, [pc, #452]	; (800581c <UART_SetConfig+0x4c0>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800565e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005662:	d017      	beq.n	8005694 <UART_SetConfig+0x338>
 8005664:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005668:	d817      	bhi.n	800569a <UART_SetConfig+0x33e>
 800566a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566e:	d00b      	beq.n	8005688 <UART_SetConfig+0x32c>
 8005670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005674:	d811      	bhi.n	800569a <UART_SetConfig+0x33e>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <UART_SetConfig+0x326>
 800567a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800567e:	d006      	beq.n	800568e <UART_SetConfig+0x332>
 8005680:	e00b      	b.n	800569a <UART_SetConfig+0x33e>
 8005682:	2300      	movs	r3, #0
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e00d      	b.n	80056a4 <UART_SetConfig+0x348>
 8005688:	2302      	movs	r3, #2
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e00a      	b.n	80056a4 <UART_SetConfig+0x348>
 800568e:	2304      	movs	r3, #4
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e007      	b.n	80056a4 <UART_SetConfig+0x348>
 8005694:	2308      	movs	r3, #8
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e004      	b.n	80056a4 <UART_SetConfig+0x348>
 800569a:	2310      	movs	r3, #16
 800569c:	77fb      	strb	r3, [r7, #31]
 800569e:	e001      	b.n	80056a4 <UART_SetConfig+0x348>
 80056a0:	2310      	movs	r3, #16
 80056a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ac:	d15b      	bne.n	8005766 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056ae:	7ffb      	ldrb	r3, [r7, #31]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d828      	bhi.n	8005706 <UART_SetConfig+0x3aa>
 80056b4:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <UART_SetConfig+0x360>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	08005707 	.word	0x08005707
 80056cc:	080056f7 	.word	0x080056f7
 80056d0:	08005707 	.word	0x08005707
 80056d4:	08005707 	.word	0x08005707
 80056d8:	08005707 	.word	0x08005707
 80056dc:	080056ff 	.word	0x080056ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe f91c 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80056e4:	61b8      	str	r0, [r7, #24]
        break;
 80056e6:	e013      	b.n	8005710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e8:	f7fe f92c 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80056ec:	61b8      	str	r0, [r7, #24]
        break;
 80056ee:	e00f      	b.n	8005710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f0:	4b4b      	ldr	r3, [pc, #300]	; (8005820 <UART_SetConfig+0x4c4>)
 80056f2:	61bb      	str	r3, [r7, #24]
        break;
 80056f4:	e00c      	b.n	8005710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f6:	f7fe f83f 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 80056fa:	61b8      	str	r0, [r7, #24]
        break;
 80056fc:	e008      	b.n	8005710 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005702:	61bb      	str	r3, [r7, #24]
        break;
 8005704:	e004      	b.n	8005710 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	77bb      	strb	r3, [r7, #30]
        break;
 800570e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d074      	beq.n	8005800 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	005a      	lsls	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	441a      	add	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	fbb2 f3f3 	udiv	r3, r2, r3
 800572a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d916      	bls.n	8005760 <UART_SetConfig+0x404>
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d212      	bcs.n	8005760 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	b29a      	uxth	r2, r3
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	4313      	orrs	r3, r2
 8005754:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	89fa      	ldrh	r2, [r7, #14]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	e04f      	b.n	8005800 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	77bb      	strb	r3, [r7, #30]
 8005764:	e04c      	b.n	8005800 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d828      	bhi.n	80057be <UART_SetConfig+0x462>
 800576c:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x418>)
 800576e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005772:	bf00      	nop
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	080057bf 	.word	0x080057bf
 8005784:	080057af 	.word	0x080057af
 8005788:	080057bf 	.word	0x080057bf
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fe f8c0 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 800579c:	61b8      	str	r0, [r7, #24]
        break;
 800579e:	e013      	b.n	80057c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fe f8d0 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80057a4:	61b8      	str	r0, [r7, #24]
        break;
 80057a6:	e00f      	b.n	80057c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <UART_SetConfig+0x4c4>)
 80057aa:	61bb      	str	r3, [r7, #24]
        break;
 80057ac:	e00c      	b.n	80057c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fd ffe3 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 80057b2:	61b8      	str	r0, [r7, #24]
        break;
 80057b4:	e008      	b.n	80057c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	61bb      	str	r3, [r7, #24]
        break;
 80057bc:	e004      	b.n	80057c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	77bb      	strb	r3, [r7, #30]
        break;
 80057c6:	bf00      	nop
    }

    if (pclk != 0U)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d018      	beq.n	8005800 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	085a      	lsrs	r2, r3, #1
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	441a      	add	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d909      	bls.n	80057fc <UART_SetConfig+0x4a0>
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ee:	d205      	bcs.n	80057fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	e001      	b.n	8005800 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800580c:	7fbb      	ldrb	r3, [r7, #30]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40007c00 	.word	0x40007c00
 800581c:	40023800 	.word	0x40023800
 8005820:	00f42400 	.word	0x00f42400

08005824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00a      	beq.n	80058b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00a      	beq.n	80058d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01a      	beq.n	800593a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d10a      	bne.n	800593a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af02      	add	r7, sp, #8
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005978:	f7fc f996 	bl	8001ca8 <HAL_GetTick>
 800597c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d10e      	bne.n	80059aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800598c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f81b 	bl	80059d6 <UART_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e011      	b.n	80059ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2220      	movs	r2, #32
 80059ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b09c      	sub	sp, #112	; 0x70
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	603b      	str	r3, [r7, #0]
 80059e2:	4613      	mov	r3, r2
 80059e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	e0a7      	b.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ee:	f000 80a3 	beq.w	8005b38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f2:	f7fc f959 	bl	8001ca8 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d302      	bcc.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d13f      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a1c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a28:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e6      	bne.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	663b      	str	r3, [r7, #96]	; 0x60
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e068      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d050      	beq.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d148      	bne.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e6      	bne.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	613b      	str	r3, [r7, #16]
   return(result);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f023 0301 	bic.w	r3, r3, #1
 8005af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b02:	623a      	str	r2, [r7, #32]
 8005b04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	69f9      	ldr	r1, [r7, #28]
 8005b08:	6a3a      	ldr	r2, [r7, #32]
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e5      	bne.n	8005ae2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e010      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	f43f af48 	beq.w	80059e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3770      	adds	r7, #112	; 0x70
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b097      	sub	sp, #92	; 0x5c
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d10e      	bne.n	8005bb6 <UART_Start_Receive_IT+0x52>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <UART_Start_Receive_IT+0x48>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005baa:	e02d      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bb4:	e028      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <UART_Start_Receive_IT+0x76>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <UART_Start_Receive_IT+0x6c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	22ff      	movs	r2, #255	; 0xff
 8005bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bce:	e01b      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	227f      	movs	r2, #127	; 0x7f
 8005bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bd8:	e016      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be2:	d10d      	bne.n	8005c00 <UART_Start_Receive_IT+0x9c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <UART_Start_Receive_IT+0x92>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	227f      	movs	r2, #127	; 0x7f
 8005bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bf4:	e008      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	223f      	movs	r2, #63	; 0x3f
 8005bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005bfe:	e003      	b.n	8005c08 <UART_Start_Receive_IT+0xa4>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2222      	movs	r2, #34	; 0x22
 8005c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3308      	adds	r3, #8
 8005c36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c38:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e5      	bne.n	8005c18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d107      	bne.n	8005c66 <UART_Start_Receive_IT+0x102>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <UART_Start_Receive_IT+0x184>)
 8005c62:	669a      	str	r2, [r3, #104]	; 0x68
 8005c64:	e002      	b.n	8005c6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <UART_Start_Receive_IT+0x188>)
 8005c6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d019      	beq.n	8005ca8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
 8005c94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_Start_Receive_IT+0x110>
 8005ca6:	e018      	b.n	8005cda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f043 0320 	orr.w	r3, r3, #32
 8005cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	69f9      	ldr	r1, [r7, #28]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e6      	bne.n	8005ca8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	375c      	adds	r7, #92	; 0x5c
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	08006115 	.word	0x08006115
 8005cec:	08005faf 	.word	0x08005faf

08005cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b095      	sub	sp, #84	; 0x54
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d16:	643b      	str	r3, [r7, #64]	; 0x40
 8005d18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e6      	bne.n	8005cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3308      	adds	r3, #8
 8005d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f023 0301 	bic.w	r3, r3, #1
 8005d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e5      	bne.n	8005d2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d118      	bne.n	8005d98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0310 	bic.w	r3, r3, #16
 8005d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d84:	61bb      	str	r3, [r7, #24]
 8005d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6979      	ldr	r1, [r7, #20]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	613b      	str	r3, [r7, #16]
   return(result);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005dac:	bf00      	nop
 8005dae:	3754      	adds	r7, #84	; 0x54
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f7ff faaa 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b08f      	sub	sp, #60	; 0x3c
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df0:	2b21      	cmp	r3, #33	; 0x21
 8005df2:	d14c      	bne.n	8005e8e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d132      	bne.n	8005e66 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1e6      	bne.n	8005e00 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	e853 3f00 	ldrex	r3, [r3]
 8005e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e46:	633b      	str	r3, [r7, #48]	; 0x30
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6979      	ldr	r1, [r7, #20]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e6      	bne.n	8005e32 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005e64:	e013      	b.n	8005e8e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005e8e:	bf00      	nop
 8005e90:	373c      	adds	r7, #60	; 0x3c
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b091      	sub	sp, #68	; 0x44
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ea6:	2b21      	cmp	r3, #33	; 0x21
 8005ea8:	d151      	bne.n	8005f4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d132      	bne.n	8005f1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e6      	bne.n	8005eb6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	69b9      	ldr	r1, [r7, #24]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	617b      	str	r3, [r7, #20]
   return(result);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005f1a:	e018      	b.n	8005f4e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f30:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	1c9a      	adds	r2, r3, #2
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005f4e:	bf00      	nop
 8005f50:	3744      	adds	r7, #68	; 0x44
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b088      	sub	sp, #32
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff f9bb 	bl	800531c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa6:	bf00      	nop
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b096      	sub	sp, #88	; 0x58
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fbc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc6:	2b22      	cmp	r3, #34	; 0x22
 8005fc8:	f040 8098 	bne.w	80060fc <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005fd6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005fda:	b2d9      	uxtb	r1, r3
 8005fdc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d17b      	bne.n	800610c <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006028:	653b      	str	r3, [r7, #80]	; 0x50
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	623b      	str	r3, [r7, #32]
   return(result);
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006066:	633a      	str	r2, [r7, #48]	; 0x30
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006092:	2b01      	cmp	r3, #1
 8006094:	d12e      	bne.n	80060f4 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 0310 	bic.w	r3, r3, #16
 80060b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	617b      	str	r3, [r7, #20]
   return(result);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e6      	bne.n	800609c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 0310 	and.w	r3, r3, #16
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d103      	bne.n	80060e4 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2210      	movs	r2, #16
 80060e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff f929 	bl	8005344 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060f2:	e00b      	b.n	800610c <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fa fd3d 	bl	8000b74 <HAL_UART_RxCpltCallback>
}
 80060fa:	e007      	b.n	800610c <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]
}
 800610c:	bf00      	nop
 800610e:	3758      	adds	r7, #88	; 0x58
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b096      	sub	sp, #88	; 0x58
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006122:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612c:	2b22      	cmp	r3, #34	; 0x22
 800612e:	f040 8098 	bne.w	8006262 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006142:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006146:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800614a:	4013      	ands	r3, r2
 800614c:	b29a      	uxth	r2, r3
 800614e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006150:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	1c9a      	adds	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d17b      	bne.n	8006272 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800618e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006198:	643b      	str	r3, [r7, #64]	; 0x40
 800619a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800619e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e6      	bne.n	800617a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3308      	adds	r3, #8
 80061b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	e853 3f00 	ldrex	r3, [r3]
 80061ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3308      	adds	r3, #8
 80061ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061d4:	e841 2300 	strex	r3, r2, [r1]
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e5      	bne.n	80061ac <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d12e      	bne.n	800625a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	f023 0310 	bic.w	r3, r3, #16
 8006216:	647b      	str	r3, [r7, #68]	; 0x44
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	6979      	ldr	r1, [r7, #20]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	613b      	str	r3, [r7, #16]
   return(result);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e6      	bne.n	8006202 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d103      	bne.n	800624a <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2210      	movs	r2, #16
 8006248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff f876 	bl	8005344 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006258:	e00b      	b.n	8006272 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fa fc8a 	bl	8000b74 <HAL_UART_RxCpltCallback>
}
 8006260:	e007      	b.n	8006272 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0208 	orr.w	r2, r2, #8
 8006270:	619a      	str	r2, [r3, #24]
}
 8006272:	bf00      	nop
 8006274:	3758      	adds	r7, #88	; 0x58
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	f023 0101 	bic.w	r1, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d102      	bne.n	80062ac <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80062a6:	2340      	movs	r3, #64	; 0x40
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e001      	b.n	80062b0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80062bc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80062c2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80062c8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80062ce:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80062d4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80062da:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80062e0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80062e6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80062ec:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8006314:	4b20      	ldr	r3, [pc, #128]	; (8006398 <FMC_NORSRAM_Init+0x11c>)
 8006316:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800631e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006326:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800632e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	43db      	mvns	r3, r3
 800633e:	ea02 0103 	and.w	r1, r2, r3
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4319      	orrs	r1, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006358:	d10c      	bne.n	8006374 <FMC_NORSRAM_Init+0xf8>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d006      	beq.n	800638a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	0008fb7f 	.word	0x0008fb7f

0800639c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	051b      	lsls	r3, r3, #20
 80063da:	431a      	orrs	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	3b02      	subs	r3, #2
 80063e2:	061b      	lsls	r3, r3, #24
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	3201      	adds	r2, #1
 80063f0:	4319      	orrs	r1, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006404:	d113      	bne.n	800642e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800640e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	3b01      	subs	r3, #1
 8006416:	051b      	lsls	r3, r3, #20
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	431a      	orrs	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006450:	d11d      	bne.n	800648e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800645c:	4013      	ands	r3, r2
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	6811      	ldr	r1, [r2, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	0112      	lsls	r2, r2, #4
 8006468:	4311      	orrs	r1, r2
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	6892      	ldr	r2, [r2, #8]
 800646e:	0212      	lsls	r2, r2, #8
 8006470:	4311      	orrs	r1, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	6992      	ldr	r2, [r2, #24]
 8006476:	4311      	orrs	r1, r2
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	68d2      	ldr	r2, [r2, #12]
 800647c:	0412      	lsls	r2, r2, #16
 800647e:	430a      	orrs	r2, r1
 8006480:	ea43 0102 	orr.w	r1, r3, r2
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800648c:	e005      	b.n	800649a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	cff00000 	.word	0xcff00000

080064ac <__errno>:
 80064ac:	4b01      	ldr	r3, [pc, #4]	; (80064b4 <__errno+0x8>)
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000000c 	.word	0x2000000c

080064b8 <__libc_init_array>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	4d0d      	ldr	r5, [pc, #52]	; (80064f0 <__libc_init_array+0x38>)
 80064bc:	4c0d      	ldr	r4, [pc, #52]	; (80064f4 <__libc_init_array+0x3c>)
 80064be:	1b64      	subs	r4, r4, r5
 80064c0:	10a4      	asrs	r4, r4, #2
 80064c2:	2600      	movs	r6, #0
 80064c4:	42a6      	cmp	r6, r4
 80064c6:	d109      	bne.n	80064dc <__libc_init_array+0x24>
 80064c8:	4d0b      	ldr	r5, [pc, #44]	; (80064f8 <__libc_init_array+0x40>)
 80064ca:	4c0c      	ldr	r4, [pc, #48]	; (80064fc <__libc_init_array+0x44>)
 80064cc:	f001 f824 	bl	8007518 <_init>
 80064d0:	1b64      	subs	r4, r4, r5
 80064d2:	10a4      	asrs	r4, r4, #2
 80064d4:	2600      	movs	r6, #0
 80064d6:	42a6      	cmp	r6, r4
 80064d8:	d105      	bne.n	80064e6 <__libc_init_array+0x2e>
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e0:	4798      	blx	r3
 80064e2:	3601      	adds	r6, #1
 80064e4:	e7ee      	b.n	80064c4 <__libc_init_array+0xc>
 80064e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ea:	4798      	blx	r3
 80064ec:	3601      	adds	r6, #1
 80064ee:	e7f2      	b.n	80064d6 <__libc_init_array+0x1e>
 80064f0:	08007834 	.word	0x08007834
 80064f4:	08007834 	.word	0x08007834
 80064f8:	08007834 	.word	0x08007834
 80064fc:	08007838 	.word	0x08007838

08006500 <memset>:
 8006500:	4402      	add	r2, r0
 8006502:	4603      	mov	r3, r0
 8006504:	4293      	cmp	r3, r2
 8006506:	d100      	bne.n	800650a <memset+0xa>
 8006508:	4770      	bx	lr
 800650a:	f803 1b01 	strb.w	r1, [r3], #1
 800650e:	e7f9      	b.n	8006504 <memset+0x4>

08006510 <iprintf>:
 8006510:	b40f      	push	{r0, r1, r2, r3}
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <iprintf+0x2c>)
 8006514:	b513      	push	{r0, r1, r4, lr}
 8006516:	681c      	ldr	r4, [r3, #0]
 8006518:	b124      	cbz	r4, 8006524 <iprintf+0x14>
 800651a:	69a3      	ldr	r3, [r4, #24]
 800651c:	b913      	cbnz	r3, 8006524 <iprintf+0x14>
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fa5e 	bl	80069e0 <__sinit>
 8006524:	ab05      	add	r3, sp, #20
 8006526:	9a04      	ldr	r2, [sp, #16]
 8006528:	68a1      	ldr	r1, [r4, #8]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	4620      	mov	r0, r4
 800652e:	f000 fc67 	bl	8006e00 <_vfiprintf_r>
 8006532:	b002      	add	sp, #8
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	b004      	add	sp, #16
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c

08006540 <_puts_r>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	460e      	mov	r6, r1
 8006544:	4605      	mov	r5, r0
 8006546:	b118      	cbz	r0, 8006550 <_puts_r+0x10>
 8006548:	6983      	ldr	r3, [r0, #24]
 800654a:	b90b      	cbnz	r3, 8006550 <_puts_r+0x10>
 800654c:	f000 fa48 	bl	80069e0 <__sinit>
 8006550:	69ab      	ldr	r3, [r5, #24]
 8006552:	68ac      	ldr	r4, [r5, #8]
 8006554:	b913      	cbnz	r3, 800655c <_puts_r+0x1c>
 8006556:	4628      	mov	r0, r5
 8006558:	f000 fa42 	bl	80069e0 <__sinit>
 800655c:	4b2c      	ldr	r3, [pc, #176]	; (8006610 <_puts_r+0xd0>)
 800655e:	429c      	cmp	r4, r3
 8006560:	d120      	bne.n	80065a4 <_puts_r+0x64>
 8006562:	686c      	ldr	r4, [r5, #4]
 8006564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006566:	07db      	lsls	r3, r3, #31
 8006568:	d405      	bmi.n	8006576 <_puts_r+0x36>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	0598      	lsls	r0, r3, #22
 800656e:	d402      	bmi.n	8006576 <_puts_r+0x36>
 8006570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006572:	f000 fad3 	bl	8006b1c <__retarget_lock_acquire_recursive>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	0719      	lsls	r1, r3, #28
 800657a:	d51d      	bpl.n	80065b8 <_puts_r+0x78>
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	b1db      	cbz	r3, 80065b8 <_puts_r+0x78>
 8006580:	3e01      	subs	r6, #1
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006588:	3b01      	subs	r3, #1
 800658a:	60a3      	str	r3, [r4, #8]
 800658c:	bb39      	cbnz	r1, 80065de <_puts_r+0x9e>
 800658e:	2b00      	cmp	r3, #0
 8006590:	da38      	bge.n	8006604 <_puts_r+0xc4>
 8006592:	4622      	mov	r2, r4
 8006594:	210a      	movs	r1, #10
 8006596:	4628      	mov	r0, r5
 8006598:	f000 f848 	bl	800662c <__swbuf_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d011      	beq.n	80065c4 <_puts_r+0x84>
 80065a0:	250a      	movs	r5, #10
 80065a2:	e011      	b.n	80065c8 <_puts_r+0x88>
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <_puts_r+0xd4>)
 80065a6:	429c      	cmp	r4, r3
 80065a8:	d101      	bne.n	80065ae <_puts_r+0x6e>
 80065aa:	68ac      	ldr	r4, [r5, #8]
 80065ac:	e7da      	b.n	8006564 <_puts_r+0x24>
 80065ae:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <_puts_r+0xd8>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	bf08      	it	eq
 80065b4:	68ec      	ldreq	r4, [r5, #12]
 80065b6:	e7d5      	b.n	8006564 <_puts_r+0x24>
 80065b8:	4621      	mov	r1, r4
 80065ba:	4628      	mov	r0, r5
 80065bc:	f000 f888 	bl	80066d0 <__swsetup_r>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d0dd      	beq.n	8006580 <_puts_r+0x40>
 80065c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80065c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ca:	07da      	lsls	r2, r3, #31
 80065cc:	d405      	bmi.n	80065da <_puts_r+0x9a>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	059b      	lsls	r3, r3, #22
 80065d2:	d402      	bmi.n	80065da <_puts_r+0x9a>
 80065d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d6:	f000 faa2 	bl	8006b1e <__retarget_lock_release_recursive>
 80065da:	4628      	mov	r0, r5
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da04      	bge.n	80065ec <_puts_r+0xac>
 80065e2:	69a2      	ldr	r2, [r4, #24]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	dc06      	bgt.n	80065f6 <_puts_r+0xb6>
 80065e8:	290a      	cmp	r1, #10
 80065ea:	d004      	beq.n	80065f6 <_puts_r+0xb6>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	6022      	str	r2, [r4, #0]
 80065f2:	7019      	strb	r1, [r3, #0]
 80065f4:	e7c5      	b.n	8006582 <_puts_r+0x42>
 80065f6:	4622      	mov	r2, r4
 80065f8:	4628      	mov	r0, r5
 80065fa:	f000 f817 	bl	800662c <__swbuf_r>
 80065fe:	3001      	adds	r0, #1
 8006600:	d1bf      	bne.n	8006582 <_puts_r+0x42>
 8006602:	e7df      	b.n	80065c4 <_puts_r+0x84>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	250a      	movs	r5, #10
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	6022      	str	r2, [r4, #0]
 800660c:	701d      	strb	r5, [r3, #0]
 800660e:	e7db      	b.n	80065c8 <_puts_r+0x88>
 8006610:	080077b8 	.word	0x080077b8
 8006614:	080077d8 	.word	0x080077d8
 8006618:	08007798 	.word	0x08007798

0800661c <puts>:
 800661c:	4b02      	ldr	r3, [pc, #8]	; (8006628 <puts+0xc>)
 800661e:	4601      	mov	r1, r0
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	f7ff bf8d 	b.w	8006540 <_puts_r>
 8006626:	bf00      	nop
 8006628:	2000000c 	.word	0x2000000c

0800662c <__swbuf_r>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	4614      	mov	r4, r2
 8006632:	4605      	mov	r5, r0
 8006634:	b118      	cbz	r0, 800663e <__swbuf_r+0x12>
 8006636:	6983      	ldr	r3, [r0, #24]
 8006638:	b90b      	cbnz	r3, 800663e <__swbuf_r+0x12>
 800663a:	f000 f9d1 	bl	80069e0 <__sinit>
 800663e:	4b21      	ldr	r3, [pc, #132]	; (80066c4 <__swbuf_r+0x98>)
 8006640:	429c      	cmp	r4, r3
 8006642:	d12b      	bne.n	800669c <__swbuf_r+0x70>
 8006644:	686c      	ldr	r4, [r5, #4]
 8006646:	69a3      	ldr	r3, [r4, #24]
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	071a      	lsls	r2, r3, #28
 800664e:	d52f      	bpl.n	80066b0 <__swbuf_r+0x84>
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	b36b      	cbz	r3, 80066b0 <__swbuf_r+0x84>
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	6963      	ldr	r3, [r4, #20]
 800665c:	b2f6      	uxtb	r6, r6
 800665e:	4283      	cmp	r3, r0
 8006660:	4637      	mov	r7, r6
 8006662:	dc04      	bgt.n	800666e <__swbuf_r+0x42>
 8006664:	4621      	mov	r1, r4
 8006666:	4628      	mov	r0, r5
 8006668:	f000 f926 	bl	80068b8 <_fflush_r>
 800666c:	bb30      	cbnz	r0, 80066bc <__swbuf_r+0x90>
 800666e:	68a3      	ldr	r3, [r4, #8]
 8006670:	3b01      	subs	r3, #1
 8006672:	60a3      	str	r3, [r4, #8]
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	701e      	strb	r6, [r3, #0]
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	3001      	adds	r0, #1
 8006680:	4283      	cmp	r3, r0
 8006682:	d004      	beq.n	800668e <__swbuf_r+0x62>
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	07db      	lsls	r3, r3, #31
 8006688:	d506      	bpl.n	8006698 <__swbuf_r+0x6c>
 800668a:	2e0a      	cmp	r6, #10
 800668c:	d104      	bne.n	8006698 <__swbuf_r+0x6c>
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f000 f911 	bl	80068b8 <_fflush_r>
 8006696:	b988      	cbnz	r0, 80066bc <__swbuf_r+0x90>
 8006698:	4638      	mov	r0, r7
 800669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <__swbuf_r+0x9c>)
 800669e:	429c      	cmp	r4, r3
 80066a0:	d101      	bne.n	80066a6 <__swbuf_r+0x7a>
 80066a2:	68ac      	ldr	r4, [r5, #8]
 80066a4:	e7cf      	b.n	8006646 <__swbuf_r+0x1a>
 80066a6:	4b09      	ldr	r3, [pc, #36]	; (80066cc <__swbuf_r+0xa0>)
 80066a8:	429c      	cmp	r4, r3
 80066aa:	bf08      	it	eq
 80066ac:	68ec      	ldreq	r4, [r5, #12]
 80066ae:	e7ca      	b.n	8006646 <__swbuf_r+0x1a>
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f80c 	bl	80066d0 <__swsetup_r>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d0cb      	beq.n	8006654 <__swbuf_r+0x28>
 80066bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066c0:	e7ea      	b.n	8006698 <__swbuf_r+0x6c>
 80066c2:	bf00      	nop
 80066c4:	080077b8 	.word	0x080077b8
 80066c8:	080077d8 	.word	0x080077d8
 80066cc:	08007798 	.word	0x08007798

080066d0 <__swsetup_r>:
 80066d0:	4b32      	ldr	r3, [pc, #200]	; (800679c <__swsetup_r+0xcc>)
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	681d      	ldr	r5, [r3, #0]
 80066d6:	4606      	mov	r6, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	b125      	cbz	r5, 80066e6 <__swsetup_r+0x16>
 80066dc:	69ab      	ldr	r3, [r5, #24]
 80066de:	b913      	cbnz	r3, 80066e6 <__swsetup_r+0x16>
 80066e0:	4628      	mov	r0, r5
 80066e2:	f000 f97d 	bl	80069e0 <__sinit>
 80066e6:	4b2e      	ldr	r3, [pc, #184]	; (80067a0 <__swsetup_r+0xd0>)
 80066e8:	429c      	cmp	r4, r3
 80066ea:	d10f      	bne.n	800670c <__swsetup_r+0x3c>
 80066ec:	686c      	ldr	r4, [r5, #4]
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066f4:	0719      	lsls	r1, r3, #28
 80066f6:	d42c      	bmi.n	8006752 <__swsetup_r+0x82>
 80066f8:	06dd      	lsls	r5, r3, #27
 80066fa:	d411      	bmi.n	8006720 <__swsetup_r+0x50>
 80066fc:	2309      	movs	r3, #9
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800670a:	e03e      	b.n	800678a <__swsetup_r+0xba>
 800670c:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <__swsetup_r+0xd4>)
 800670e:	429c      	cmp	r4, r3
 8006710:	d101      	bne.n	8006716 <__swsetup_r+0x46>
 8006712:	68ac      	ldr	r4, [r5, #8]
 8006714:	e7eb      	b.n	80066ee <__swsetup_r+0x1e>
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <__swsetup_r+0xd8>)
 8006718:	429c      	cmp	r4, r3
 800671a:	bf08      	it	eq
 800671c:	68ec      	ldreq	r4, [r5, #12]
 800671e:	e7e6      	b.n	80066ee <__swsetup_r+0x1e>
 8006720:	0758      	lsls	r0, r3, #29
 8006722:	d512      	bpl.n	800674a <__swsetup_r+0x7a>
 8006724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006726:	b141      	cbz	r1, 800673a <__swsetup_r+0x6a>
 8006728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800672c:	4299      	cmp	r1, r3
 800672e:	d002      	beq.n	8006736 <__swsetup_r+0x66>
 8006730:	4630      	mov	r0, r6
 8006732:	f000 fa5b 	bl	8006bec <_free_r>
 8006736:	2300      	movs	r3, #0
 8006738:	6363      	str	r3, [r4, #52]	; 0x34
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	2300      	movs	r3, #0
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	f043 0308 	orr.w	r3, r3, #8
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	b94b      	cbnz	r3, 800676a <__swsetup_r+0x9a>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800675c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006760:	d003      	beq.n	800676a <__swsetup_r+0x9a>
 8006762:	4621      	mov	r1, r4
 8006764:	4630      	mov	r0, r6
 8006766:	f000 fa01 	bl	8006b6c <__smakebuf_r>
 800676a:	89a0      	ldrh	r0, [r4, #12]
 800676c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006770:	f010 0301 	ands.w	r3, r0, #1
 8006774:	d00a      	beq.n	800678c <__swsetup_r+0xbc>
 8006776:	2300      	movs	r3, #0
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	6963      	ldr	r3, [r4, #20]
 800677c:	425b      	negs	r3, r3
 800677e:	61a3      	str	r3, [r4, #24]
 8006780:	6923      	ldr	r3, [r4, #16]
 8006782:	b943      	cbnz	r3, 8006796 <__swsetup_r+0xc6>
 8006784:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006788:	d1ba      	bne.n	8006700 <__swsetup_r+0x30>
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	0781      	lsls	r1, r0, #30
 800678e:	bf58      	it	pl
 8006790:	6963      	ldrpl	r3, [r4, #20]
 8006792:	60a3      	str	r3, [r4, #8]
 8006794:	e7f4      	b.n	8006780 <__swsetup_r+0xb0>
 8006796:	2000      	movs	r0, #0
 8006798:	e7f7      	b.n	800678a <__swsetup_r+0xba>
 800679a:	bf00      	nop
 800679c:	2000000c 	.word	0x2000000c
 80067a0:	080077b8 	.word	0x080077b8
 80067a4:	080077d8 	.word	0x080077d8
 80067a8:	08007798 	.word	0x08007798

080067ac <__sflush_r>:
 80067ac:	898a      	ldrh	r2, [r1, #12]
 80067ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b2:	4605      	mov	r5, r0
 80067b4:	0710      	lsls	r0, r2, #28
 80067b6:	460c      	mov	r4, r1
 80067b8:	d458      	bmi.n	800686c <__sflush_r+0xc0>
 80067ba:	684b      	ldr	r3, [r1, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dc05      	bgt.n	80067cc <__sflush_r+0x20>
 80067c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dc02      	bgt.n	80067cc <__sflush_r+0x20>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	d0f9      	beq.n	80067c6 <__sflush_r+0x1a>
 80067d2:	2300      	movs	r3, #0
 80067d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067d8:	682f      	ldr	r7, [r5, #0]
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	d032      	beq.n	8006844 <__sflush_r+0x98>
 80067de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	075a      	lsls	r2, r3, #29
 80067e4:	d505      	bpl.n	80067f2 <__sflush_r+0x46>
 80067e6:	6863      	ldr	r3, [r4, #4]
 80067e8:	1ac0      	subs	r0, r0, r3
 80067ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ec:	b10b      	cbz	r3, 80067f2 <__sflush_r+0x46>
 80067ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f0:	1ac0      	subs	r0, r0, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	4602      	mov	r2, r0
 80067f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067f8:	6a21      	ldr	r1, [r4, #32]
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b0      	blx	r6
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	d106      	bne.n	8006812 <__sflush_r+0x66>
 8006804:	6829      	ldr	r1, [r5, #0]
 8006806:	291d      	cmp	r1, #29
 8006808:	d82c      	bhi.n	8006864 <__sflush_r+0xb8>
 800680a:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <__sflush_r+0x108>)
 800680c:	40ca      	lsrs	r2, r1
 800680e:	07d6      	lsls	r6, r2, #31
 8006810:	d528      	bpl.n	8006864 <__sflush_r+0xb8>
 8006812:	2200      	movs	r2, #0
 8006814:	6062      	str	r2, [r4, #4]
 8006816:	04d9      	lsls	r1, r3, #19
 8006818:	6922      	ldr	r2, [r4, #16]
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	d504      	bpl.n	8006828 <__sflush_r+0x7c>
 800681e:	1c42      	adds	r2, r0, #1
 8006820:	d101      	bne.n	8006826 <__sflush_r+0x7a>
 8006822:	682b      	ldr	r3, [r5, #0]
 8006824:	b903      	cbnz	r3, 8006828 <__sflush_r+0x7c>
 8006826:	6560      	str	r0, [r4, #84]	; 0x54
 8006828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800682a:	602f      	str	r7, [r5, #0]
 800682c:	2900      	cmp	r1, #0
 800682e:	d0ca      	beq.n	80067c6 <__sflush_r+0x1a>
 8006830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006834:	4299      	cmp	r1, r3
 8006836:	d002      	beq.n	800683e <__sflush_r+0x92>
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f9d7 	bl	8006bec <_free_r>
 800683e:	2000      	movs	r0, #0
 8006840:	6360      	str	r0, [r4, #52]	; 0x34
 8006842:	e7c1      	b.n	80067c8 <__sflush_r+0x1c>
 8006844:	6a21      	ldr	r1, [r4, #32]
 8006846:	2301      	movs	r3, #1
 8006848:	4628      	mov	r0, r5
 800684a:	47b0      	blx	r6
 800684c:	1c41      	adds	r1, r0, #1
 800684e:	d1c7      	bne.n	80067e0 <__sflush_r+0x34>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0c4      	beq.n	80067e0 <__sflush_r+0x34>
 8006856:	2b1d      	cmp	r3, #29
 8006858:	d001      	beq.n	800685e <__sflush_r+0xb2>
 800685a:	2b16      	cmp	r3, #22
 800685c:	d101      	bne.n	8006862 <__sflush_r+0xb6>
 800685e:	602f      	str	r7, [r5, #0]
 8006860:	e7b1      	b.n	80067c6 <__sflush_r+0x1a>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	e7ad      	b.n	80067c8 <__sflush_r+0x1c>
 800686c:	690f      	ldr	r7, [r1, #16]
 800686e:	2f00      	cmp	r7, #0
 8006870:	d0a9      	beq.n	80067c6 <__sflush_r+0x1a>
 8006872:	0793      	lsls	r3, r2, #30
 8006874:	680e      	ldr	r6, [r1, #0]
 8006876:	bf08      	it	eq
 8006878:	694b      	ldreq	r3, [r1, #20]
 800687a:	600f      	str	r7, [r1, #0]
 800687c:	bf18      	it	ne
 800687e:	2300      	movne	r3, #0
 8006880:	eba6 0807 	sub.w	r8, r6, r7
 8006884:	608b      	str	r3, [r1, #8]
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	dd9c      	ble.n	80067c6 <__sflush_r+0x1a>
 800688c:	6a21      	ldr	r1, [r4, #32]
 800688e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006890:	4643      	mov	r3, r8
 8006892:	463a      	mov	r2, r7
 8006894:	4628      	mov	r0, r5
 8006896:	47b0      	blx	r6
 8006898:	2800      	cmp	r0, #0
 800689a:	dc06      	bgt.n	80068aa <__sflush_r+0xfe>
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a2:	81a3      	strh	r3, [r4, #12]
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068a8:	e78e      	b.n	80067c8 <__sflush_r+0x1c>
 80068aa:	4407      	add	r7, r0
 80068ac:	eba8 0800 	sub.w	r8, r8, r0
 80068b0:	e7e9      	b.n	8006886 <__sflush_r+0xda>
 80068b2:	bf00      	nop
 80068b4:	20400001 	.word	0x20400001

080068b8 <_fflush_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	690b      	ldr	r3, [r1, #16]
 80068bc:	4605      	mov	r5, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b913      	cbnz	r3, 80068c8 <_fflush_r+0x10>
 80068c2:	2500      	movs	r5, #0
 80068c4:	4628      	mov	r0, r5
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	b118      	cbz	r0, 80068d2 <_fflush_r+0x1a>
 80068ca:	6983      	ldr	r3, [r0, #24]
 80068cc:	b90b      	cbnz	r3, 80068d2 <_fflush_r+0x1a>
 80068ce:	f000 f887 	bl	80069e0 <__sinit>
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <_fflush_r+0x6c>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d11b      	bne.n	8006910 <_fflush_r+0x58>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ef      	beq.n	80068c2 <_fflush_r+0xa>
 80068e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068e4:	07d0      	lsls	r0, r2, #31
 80068e6:	d404      	bmi.n	80068f2 <_fflush_r+0x3a>
 80068e8:	0599      	lsls	r1, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <_fflush_r+0x3a>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f000 f915 	bl	8006b1c <__retarget_lock_acquire_recursive>
 80068f2:	4628      	mov	r0, r5
 80068f4:	4621      	mov	r1, r4
 80068f6:	f7ff ff59 	bl	80067ac <__sflush_r>
 80068fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068fc:	07da      	lsls	r2, r3, #31
 80068fe:	4605      	mov	r5, r0
 8006900:	d4e0      	bmi.n	80068c4 <_fflush_r+0xc>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	059b      	lsls	r3, r3, #22
 8006906:	d4dd      	bmi.n	80068c4 <_fflush_r+0xc>
 8006908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690a:	f000 f908 	bl	8006b1e <__retarget_lock_release_recursive>
 800690e:	e7d9      	b.n	80068c4 <_fflush_r+0xc>
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <_fflush_r+0x70>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d101      	bne.n	800691a <_fflush_r+0x62>
 8006916:	68ac      	ldr	r4, [r5, #8]
 8006918:	e7df      	b.n	80068da <_fflush_r+0x22>
 800691a:	4b04      	ldr	r3, [pc, #16]	; (800692c <_fflush_r+0x74>)
 800691c:	429c      	cmp	r4, r3
 800691e:	bf08      	it	eq
 8006920:	68ec      	ldreq	r4, [r5, #12]
 8006922:	e7da      	b.n	80068da <_fflush_r+0x22>
 8006924:	080077b8 	.word	0x080077b8
 8006928:	080077d8 	.word	0x080077d8
 800692c:	08007798 	.word	0x08007798

08006930 <std>:
 8006930:	2300      	movs	r3, #0
 8006932:	b510      	push	{r4, lr}
 8006934:	4604      	mov	r4, r0
 8006936:	e9c0 3300 	strd	r3, r3, [r0]
 800693a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800693e:	6083      	str	r3, [r0, #8]
 8006940:	8181      	strh	r1, [r0, #12]
 8006942:	6643      	str	r3, [r0, #100]	; 0x64
 8006944:	81c2      	strh	r2, [r0, #14]
 8006946:	6183      	str	r3, [r0, #24]
 8006948:	4619      	mov	r1, r3
 800694a:	2208      	movs	r2, #8
 800694c:	305c      	adds	r0, #92	; 0x5c
 800694e:	f7ff fdd7 	bl	8006500 <memset>
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <std+0x38>)
 8006954:	6263      	str	r3, [r4, #36]	; 0x24
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <std+0x3c>)
 8006958:	62a3      	str	r3, [r4, #40]	; 0x28
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <std+0x40>)
 800695c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <std+0x44>)
 8006960:	6224      	str	r4, [r4, #32]
 8006962:	6323      	str	r3, [r4, #48]	; 0x30
 8006964:	bd10      	pop	{r4, pc}
 8006966:	bf00      	nop
 8006968:	080073a9 	.word	0x080073a9
 800696c:	080073cb 	.word	0x080073cb
 8006970:	08007403 	.word	0x08007403
 8006974:	08007427 	.word	0x08007427

08006978 <_cleanup_r>:
 8006978:	4901      	ldr	r1, [pc, #4]	; (8006980 <_cleanup_r+0x8>)
 800697a:	f000 b8af 	b.w	8006adc <_fwalk_reent>
 800697e:	bf00      	nop
 8006980:	080068b9 	.word	0x080068b9

08006984 <__sfmoreglue>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	2268      	movs	r2, #104	; 0x68
 8006988:	1e4d      	subs	r5, r1, #1
 800698a:	4355      	muls	r5, r2
 800698c:	460e      	mov	r6, r1
 800698e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006992:	f000 f997 	bl	8006cc4 <_malloc_r>
 8006996:	4604      	mov	r4, r0
 8006998:	b140      	cbz	r0, 80069ac <__sfmoreglue+0x28>
 800699a:	2100      	movs	r1, #0
 800699c:	e9c0 1600 	strd	r1, r6, [r0]
 80069a0:	300c      	adds	r0, #12
 80069a2:	60a0      	str	r0, [r4, #8]
 80069a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069a8:	f7ff fdaa 	bl	8006500 <memset>
 80069ac:	4620      	mov	r0, r4
 80069ae:	bd70      	pop	{r4, r5, r6, pc}

080069b0 <__sfp_lock_acquire>:
 80069b0:	4801      	ldr	r0, [pc, #4]	; (80069b8 <__sfp_lock_acquire+0x8>)
 80069b2:	f000 b8b3 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	20000885 	.word	0x20000885

080069bc <__sfp_lock_release>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__sfp_lock_release+0x8>)
 80069be:	f000 b8ae 	b.w	8006b1e <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	20000885 	.word	0x20000885

080069c8 <__sinit_lock_acquire>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__sinit_lock_acquire+0x8>)
 80069ca:	f000 b8a7 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	20000886 	.word	0x20000886

080069d4 <__sinit_lock_release>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sinit_lock_release+0x8>)
 80069d6:	f000 b8a2 	b.w	8006b1e <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	20000886 	.word	0x20000886

080069e0 <__sinit>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4604      	mov	r4, r0
 80069e4:	f7ff fff0 	bl	80069c8 <__sinit_lock_acquire>
 80069e8:	69a3      	ldr	r3, [r4, #24]
 80069ea:	b11b      	cbz	r3, 80069f4 <__sinit+0x14>
 80069ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f0:	f7ff bff0 	b.w	80069d4 <__sinit_lock_release>
 80069f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069f8:	6523      	str	r3, [r4, #80]	; 0x50
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <__sinit+0x68>)
 80069fc:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <__sinit+0x6c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	bf04      	itt	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	61a3      	streq	r3, [r4, #24]
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f820 	bl	8006a50 <__sfp>
 8006a10:	6060      	str	r0, [r4, #4]
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 f81c 	bl	8006a50 <__sfp>
 8006a18:	60a0      	str	r0, [r4, #8]
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 f818 	bl	8006a50 <__sfp>
 8006a20:	2200      	movs	r2, #0
 8006a22:	60e0      	str	r0, [r4, #12]
 8006a24:	2104      	movs	r1, #4
 8006a26:	6860      	ldr	r0, [r4, #4]
 8006a28:	f7ff ff82 	bl	8006930 <std>
 8006a2c:	68a0      	ldr	r0, [r4, #8]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	2109      	movs	r1, #9
 8006a32:	f7ff ff7d 	bl	8006930 <std>
 8006a36:	68e0      	ldr	r0, [r4, #12]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	2112      	movs	r1, #18
 8006a3c:	f7ff ff78 	bl	8006930 <std>
 8006a40:	2301      	movs	r3, #1
 8006a42:	61a3      	str	r3, [r4, #24]
 8006a44:	e7d2      	b.n	80069ec <__sinit+0xc>
 8006a46:	bf00      	nop
 8006a48:	08007794 	.word	0x08007794
 8006a4c:	08006979 	.word	0x08006979

08006a50 <__sfp>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	4607      	mov	r7, r0
 8006a54:	f7ff ffac 	bl	80069b0 <__sfp_lock_acquire>
 8006a58:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <__sfp+0x84>)
 8006a5a:	681e      	ldr	r6, [r3, #0]
 8006a5c:	69b3      	ldr	r3, [r6, #24]
 8006a5e:	b913      	cbnz	r3, 8006a66 <__sfp+0x16>
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff ffbd 	bl	80069e0 <__sinit>
 8006a66:	3648      	adds	r6, #72	; 0x48
 8006a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	d503      	bpl.n	8006a78 <__sfp+0x28>
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	b30b      	cbz	r3, 8006ab8 <__sfp+0x68>
 8006a74:	6836      	ldr	r6, [r6, #0]
 8006a76:	e7f7      	b.n	8006a68 <__sfp+0x18>
 8006a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a7c:	b9d5      	cbnz	r5, 8006ab4 <__sfp+0x64>
 8006a7e:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <__sfp+0x88>)
 8006a80:	60e3      	str	r3, [r4, #12]
 8006a82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a86:	6665      	str	r5, [r4, #100]	; 0x64
 8006a88:	f000 f847 	bl	8006b1a <__retarget_lock_init_recursive>
 8006a8c:	f7ff ff96 	bl	80069bc <__sfp_lock_release>
 8006a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a98:	6025      	str	r5, [r4, #0]
 8006a9a:	61a5      	str	r5, [r4, #24]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006aa4:	f7ff fd2c 	bl	8006500 <memset>
 8006aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab4:	3468      	adds	r4, #104	; 0x68
 8006ab6:	e7d9      	b.n	8006a6c <__sfp+0x1c>
 8006ab8:	2104      	movs	r1, #4
 8006aba:	4638      	mov	r0, r7
 8006abc:	f7ff ff62 	bl	8006984 <__sfmoreglue>
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	6030      	str	r0, [r6, #0]
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1d5      	bne.n	8006a74 <__sfp+0x24>
 8006ac8:	f7ff ff78 	bl	80069bc <__sfp_lock_release>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	e7ee      	b.n	8006ab0 <__sfp+0x60>
 8006ad2:	bf00      	nop
 8006ad4:	08007794 	.word	0x08007794
 8006ad8:	ffff0001 	.word	0xffff0001

08006adc <_fwalk_reent>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	4688      	mov	r8, r1
 8006ae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ae8:	2700      	movs	r7, #0
 8006aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aee:	f1b9 0901 	subs.w	r9, r9, #1
 8006af2:	d505      	bpl.n	8006b00 <_fwalk_reent+0x24>
 8006af4:	6824      	ldr	r4, [r4, #0]
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	d1f7      	bne.n	8006aea <_fwalk_reent+0xe>
 8006afa:	4638      	mov	r0, r7
 8006afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b00:	89ab      	ldrh	r3, [r5, #12]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d907      	bls.n	8006b16 <_fwalk_reent+0x3a>
 8006b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	d003      	beq.n	8006b16 <_fwalk_reent+0x3a>
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4630      	mov	r0, r6
 8006b12:	47c0      	blx	r8
 8006b14:	4307      	orrs	r7, r0
 8006b16:	3568      	adds	r5, #104	; 0x68
 8006b18:	e7e9      	b.n	8006aee <_fwalk_reent+0x12>

08006b1a <__retarget_lock_init_recursive>:
 8006b1a:	4770      	bx	lr

08006b1c <__retarget_lock_acquire_recursive>:
 8006b1c:	4770      	bx	lr

08006b1e <__retarget_lock_release_recursive>:
 8006b1e:	4770      	bx	lr

08006b20 <__swhatbuf_r>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	460e      	mov	r6, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	b096      	sub	sp, #88	; 0x58
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	461d      	mov	r5, r3
 8006b30:	da08      	bge.n	8006b44 <__swhatbuf_r+0x24>
 8006b32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	602a      	str	r2, [r5, #0]
 8006b3a:	061a      	lsls	r2, r3, #24
 8006b3c:	d410      	bmi.n	8006b60 <__swhatbuf_r+0x40>
 8006b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b42:	e00e      	b.n	8006b62 <__swhatbuf_r+0x42>
 8006b44:	466a      	mov	r2, sp
 8006b46:	f000 fc95 	bl	8007474 <_fstat_r>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	dbf1      	blt.n	8006b32 <__swhatbuf_r+0x12>
 8006b4e:	9a01      	ldr	r2, [sp, #4]
 8006b50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b58:	425a      	negs	r2, r3
 8006b5a:	415a      	adcs	r2, r3
 8006b5c:	602a      	str	r2, [r5, #0]
 8006b5e:	e7ee      	b.n	8006b3e <__swhatbuf_r+0x1e>
 8006b60:	2340      	movs	r3, #64	; 0x40
 8006b62:	2000      	movs	r0, #0
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	b016      	add	sp, #88	; 0x58
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b6c <__smakebuf_r>:
 8006b6c:	898b      	ldrh	r3, [r1, #12]
 8006b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b70:	079d      	lsls	r5, r3, #30
 8006b72:	4606      	mov	r6, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	d507      	bpl.n	8006b88 <__smakebuf_r+0x1c>
 8006b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	2301      	movs	r3, #1
 8006b82:	6163      	str	r3, [r4, #20]
 8006b84:	b002      	add	sp, #8
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	ab01      	add	r3, sp, #4
 8006b8a:	466a      	mov	r2, sp
 8006b8c:	f7ff ffc8 	bl	8006b20 <__swhatbuf_r>
 8006b90:	9900      	ldr	r1, [sp, #0]
 8006b92:	4605      	mov	r5, r0
 8006b94:	4630      	mov	r0, r6
 8006b96:	f000 f895 	bl	8006cc4 <_malloc_r>
 8006b9a:	b948      	cbnz	r0, 8006bb0 <__smakebuf_r+0x44>
 8006b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d4ef      	bmi.n	8006b84 <__smakebuf_r+0x18>
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7e3      	b.n	8006b78 <__smakebuf_r+0xc>
 8006bb0:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <__smakebuf_r+0x7c>)
 8006bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	6020      	str	r0, [r4, #0]
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	6163      	str	r3, [r4, #20]
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	6120      	str	r0, [r4, #16]
 8006bc6:	b15b      	cbz	r3, 8006be0 <__smakebuf_r+0x74>
 8006bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f000 fc63 	bl	8007498 <_isatty_r>
 8006bd2:	b128      	cbz	r0, 8006be0 <__smakebuf_r+0x74>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	89a0      	ldrh	r0, [r4, #12]
 8006be2:	4305      	orrs	r5, r0
 8006be4:	81a5      	strh	r5, [r4, #12]
 8006be6:	e7cd      	b.n	8006b84 <__smakebuf_r+0x18>
 8006be8:	08006979 	.word	0x08006979

08006bec <_free_r>:
 8006bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bee:	2900      	cmp	r1, #0
 8006bf0:	d044      	beq.n	8006c7c <_free_r+0x90>
 8006bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf6:	9001      	str	r0, [sp, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006bfe:	bfb8      	it	lt
 8006c00:	18e4      	addlt	r4, r4, r3
 8006c02:	f000 fc6b 	bl	80074dc <__malloc_lock>
 8006c06:	4a1e      	ldr	r2, [pc, #120]	; (8006c80 <_free_r+0x94>)
 8006c08:	9801      	ldr	r0, [sp, #4]
 8006c0a:	6813      	ldr	r3, [r2, #0]
 8006c0c:	b933      	cbnz	r3, 8006c1c <_free_r+0x30>
 8006c0e:	6063      	str	r3, [r4, #4]
 8006c10:	6014      	str	r4, [r2, #0]
 8006c12:	b003      	add	sp, #12
 8006c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c18:	f000 bc66 	b.w	80074e8 <__malloc_unlock>
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d908      	bls.n	8006c32 <_free_r+0x46>
 8006c20:	6825      	ldr	r5, [r4, #0]
 8006c22:	1961      	adds	r1, r4, r5
 8006c24:	428b      	cmp	r3, r1
 8006c26:	bf01      	itttt	eq
 8006c28:	6819      	ldreq	r1, [r3, #0]
 8006c2a:	685b      	ldreq	r3, [r3, #4]
 8006c2c:	1949      	addeq	r1, r1, r5
 8006c2e:	6021      	streq	r1, [r4, #0]
 8006c30:	e7ed      	b.n	8006c0e <_free_r+0x22>
 8006c32:	461a      	mov	r2, r3
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	b10b      	cbz	r3, 8006c3c <_free_r+0x50>
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	d9fa      	bls.n	8006c32 <_free_r+0x46>
 8006c3c:	6811      	ldr	r1, [r2, #0]
 8006c3e:	1855      	adds	r5, r2, r1
 8006c40:	42a5      	cmp	r5, r4
 8006c42:	d10b      	bne.n	8006c5c <_free_r+0x70>
 8006c44:	6824      	ldr	r4, [r4, #0]
 8006c46:	4421      	add	r1, r4
 8006c48:	1854      	adds	r4, r2, r1
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	6011      	str	r1, [r2, #0]
 8006c4e:	d1e0      	bne.n	8006c12 <_free_r+0x26>
 8006c50:	681c      	ldr	r4, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	6053      	str	r3, [r2, #4]
 8006c56:	4421      	add	r1, r4
 8006c58:	6011      	str	r1, [r2, #0]
 8006c5a:	e7da      	b.n	8006c12 <_free_r+0x26>
 8006c5c:	d902      	bls.n	8006c64 <_free_r+0x78>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	6003      	str	r3, [r0, #0]
 8006c62:	e7d6      	b.n	8006c12 <_free_r+0x26>
 8006c64:	6825      	ldr	r5, [r4, #0]
 8006c66:	1961      	adds	r1, r4, r5
 8006c68:	428b      	cmp	r3, r1
 8006c6a:	bf04      	itt	eq
 8006c6c:	6819      	ldreq	r1, [r3, #0]
 8006c6e:	685b      	ldreq	r3, [r3, #4]
 8006c70:	6063      	str	r3, [r4, #4]
 8006c72:	bf04      	itt	eq
 8006c74:	1949      	addeq	r1, r1, r5
 8006c76:	6021      	streq	r1, [r4, #0]
 8006c78:	6054      	str	r4, [r2, #4]
 8006c7a:	e7ca      	b.n	8006c12 <_free_r+0x26>
 8006c7c:	b003      	add	sp, #12
 8006c7e:	bd30      	pop	{r4, r5, pc}
 8006c80:	20000888 	.word	0x20000888

08006c84 <sbrk_aligned>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	4e0e      	ldr	r6, [pc, #56]	; (8006cc0 <sbrk_aligned+0x3c>)
 8006c88:	460c      	mov	r4, r1
 8006c8a:	6831      	ldr	r1, [r6, #0]
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	b911      	cbnz	r1, 8006c96 <sbrk_aligned+0x12>
 8006c90:	f000 fb7a 	bl	8007388 <_sbrk_r>
 8006c94:	6030      	str	r0, [r6, #0]
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 fb75 	bl	8007388 <_sbrk_r>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d00a      	beq.n	8006cb8 <sbrk_aligned+0x34>
 8006ca2:	1cc4      	adds	r4, r0, #3
 8006ca4:	f024 0403 	bic.w	r4, r4, #3
 8006ca8:	42a0      	cmp	r0, r4
 8006caa:	d007      	beq.n	8006cbc <sbrk_aligned+0x38>
 8006cac:	1a21      	subs	r1, r4, r0
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 fb6a 	bl	8007388 <_sbrk_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d101      	bne.n	8006cbc <sbrk_aligned+0x38>
 8006cb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	2000088c 	.word	0x2000088c

08006cc4 <_malloc_r>:
 8006cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc8:	1ccd      	adds	r5, r1, #3
 8006cca:	f025 0503 	bic.w	r5, r5, #3
 8006cce:	3508      	adds	r5, #8
 8006cd0:	2d0c      	cmp	r5, #12
 8006cd2:	bf38      	it	cc
 8006cd4:	250c      	movcc	r5, #12
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	4607      	mov	r7, r0
 8006cda:	db01      	blt.n	8006ce0 <_malloc_r+0x1c>
 8006cdc:	42a9      	cmp	r1, r5
 8006cde:	d905      	bls.n	8006cec <_malloc_r+0x28>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	2600      	movs	r6, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cec:	4e2e      	ldr	r6, [pc, #184]	; (8006da8 <_malloc_r+0xe4>)
 8006cee:	f000 fbf5 	bl	80074dc <__malloc_lock>
 8006cf2:	6833      	ldr	r3, [r6, #0]
 8006cf4:	461c      	mov	r4, r3
 8006cf6:	bb34      	cbnz	r4, 8006d46 <_malloc_r+0x82>
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f7ff ffc2 	bl	8006c84 <sbrk_aligned>
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	4604      	mov	r4, r0
 8006d04:	d14d      	bne.n	8006da2 <_malloc_r+0xde>
 8006d06:	6834      	ldr	r4, [r6, #0]
 8006d08:	4626      	mov	r6, r4
 8006d0a:	2e00      	cmp	r6, #0
 8006d0c:	d140      	bne.n	8006d90 <_malloc_r+0xcc>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	4631      	mov	r1, r6
 8006d12:	4638      	mov	r0, r7
 8006d14:	eb04 0803 	add.w	r8, r4, r3
 8006d18:	f000 fb36 	bl	8007388 <_sbrk_r>
 8006d1c:	4580      	cmp	r8, r0
 8006d1e:	d13a      	bne.n	8006d96 <_malloc_r+0xd2>
 8006d20:	6821      	ldr	r1, [r4, #0]
 8006d22:	3503      	adds	r5, #3
 8006d24:	1a6d      	subs	r5, r5, r1
 8006d26:	f025 0503 	bic.w	r5, r5, #3
 8006d2a:	3508      	adds	r5, #8
 8006d2c:	2d0c      	cmp	r5, #12
 8006d2e:	bf38      	it	cc
 8006d30:	250c      	movcc	r5, #12
 8006d32:	4629      	mov	r1, r5
 8006d34:	4638      	mov	r0, r7
 8006d36:	f7ff ffa5 	bl	8006c84 <sbrk_aligned>
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d02b      	beq.n	8006d96 <_malloc_r+0xd2>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	442b      	add	r3, r5
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	e00e      	b.n	8006d64 <_malloc_r+0xa0>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	1b52      	subs	r2, r2, r5
 8006d4a:	d41e      	bmi.n	8006d8a <_malloc_r+0xc6>
 8006d4c:	2a0b      	cmp	r2, #11
 8006d4e:	d916      	bls.n	8006d7e <_malloc_r+0xba>
 8006d50:	1961      	adds	r1, r4, r5
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	6025      	str	r5, [r4, #0]
 8006d56:	bf18      	it	ne
 8006d58:	6059      	strne	r1, [r3, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	bf08      	it	eq
 8006d5e:	6031      	streq	r1, [r6, #0]
 8006d60:	5162      	str	r2, [r4, r5]
 8006d62:	604b      	str	r3, [r1, #4]
 8006d64:	4638      	mov	r0, r7
 8006d66:	f104 060b 	add.w	r6, r4, #11
 8006d6a:	f000 fbbd 	bl	80074e8 <__malloc_unlock>
 8006d6e:	f026 0607 	bic.w	r6, r6, #7
 8006d72:	1d23      	adds	r3, r4, #4
 8006d74:	1af2      	subs	r2, r6, r3
 8006d76:	d0b6      	beq.n	8006ce6 <_malloc_r+0x22>
 8006d78:	1b9b      	subs	r3, r3, r6
 8006d7a:	50a3      	str	r3, [r4, r2]
 8006d7c:	e7b3      	b.n	8006ce6 <_malloc_r+0x22>
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	bf0c      	ite	eq
 8006d84:	6032      	streq	r2, [r6, #0]
 8006d86:	605a      	strne	r2, [r3, #4]
 8006d88:	e7ec      	b.n	8006d64 <_malloc_r+0xa0>
 8006d8a:	4623      	mov	r3, r4
 8006d8c:	6864      	ldr	r4, [r4, #4]
 8006d8e:	e7b2      	b.n	8006cf6 <_malloc_r+0x32>
 8006d90:	4634      	mov	r4, r6
 8006d92:	6876      	ldr	r6, [r6, #4]
 8006d94:	e7b9      	b.n	8006d0a <_malloc_r+0x46>
 8006d96:	230c      	movs	r3, #12
 8006d98:	603b      	str	r3, [r7, #0]
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	f000 fba4 	bl	80074e8 <__malloc_unlock>
 8006da0:	e7a1      	b.n	8006ce6 <_malloc_r+0x22>
 8006da2:	6025      	str	r5, [r4, #0]
 8006da4:	e7de      	b.n	8006d64 <_malloc_r+0xa0>
 8006da6:	bf00      	nop
 8006da8:	20000888 	.word	0x20000888

08006dac <__sfputc_r>:
 8006dac:	6893      	ldr	r3, [r2, #8]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	b410      	push	{r4}
 8006db4:	6093      	str	r3, [r2, #8]
 8006db6:	da08      	bge.n	8006dca <__sfputc_r+0x1e>
 8006db8:	6994      	ldr	r4, [r2, #24]
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	db01      	blt.n	8006dc2 <__sfputc_r+0x16>
 8006dbe:	290a      	cmp	r1, #10
 8006dc0:	d103      	bne.n	8006dca <__sfputc_r+0x1e>
 8006dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dc6:	f7ff bc31 	b.w	800662c <__swbuf_r>
 8006dca:	6813      	ldr	r3, [r2, #0]
 8006dcc:	1c58      	adds	r0, r3, #1
 8006dce:	6010      	str	r0, [r2, #0]
 8006dd0:	7019      	strb	r1, [r3, #0]
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <__sfputs_r>:
 8006dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ddc:	4606      	mov	r6, r0
 8006dde:	460f      	mov	r7, r1
 8006de0:	4614      	mov	r4, r2
 8006de2:	18d5      	adds	r5, r2, r3
 8006de4:	42ac      	cmp	r4, r5
 8006de6:	d101      	bne.n	8006dec <__sfputs_r+0x12>
 8006de8:	2000      	movs	r0, #0
 8006dea:	e007      	b.n	8006dfc <__sfputs_r+0x22>
 8006dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df0:	463a      	mov	r2, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7ff ffda 	bl	8006dac <__sfputc_r>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d1f3      	bne.n	8006de4 <__sfputs_r+0xa>
 8006dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e00 <_vfiprintf_r>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	460d      	mov	r5, r1
 8006e06:	b09d      	sub	sp, #116	; 0x74
 8006e08:	4614      	mov	r4, r2
 8006e0a:	4698      	mov	r8, r3
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	b118      	cbz	r0, 8006e18 <_vfiprintf_r+0x18>
 8006e10:	6983      	ldr	r3, [r0, #24]
 8006e12:	b90b      	cbnz	r3, 8006e18 <_vfiprintf_r+0x18>
 8006e14:	f7ff fde4 	bl	80069e0 <__sinit>
 8006e18:	4b89      	ldr	r3, [pc, #548]	; (8007040 <_vfiprintf_r+0x240>)
 8006e1a:	429d      	cmp	r5, r3
 8006e1c:	d11b      	bne.n	8006e56 <_vfiprintf_r+0x56>
 8006e1e:	6875      	ldr	r5, [r6, #4]
 8006e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d405      	bmi.n	8006e32 <_vfiprintf_r+0x32>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d402      	bmi.n	8006e32 <_vfiprintf_r+0x32>
 8006e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e2e:	f7ff fe75 	bl	8006b1c <__retarget_lock_acquire_recursive>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	071b      	lsls	r3, r3, #28
 8006e36:	d501      	bpl.n	8006e3c <_vfiprintf_r+0x3c>
 8006e38:	692b      	ldr	r3, [r5, #16]
 8006e3a:	b9eb      	cbnz	r3, 8006e78 <_vfiprintf_r+0x78>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4630      	mov	r0, r6
 8006e40:	f7ff fc46 	bl	80066d0 <__swsetup_r>
 8006e44:	b1c0      	cbz	r0, 8006e78 <_vfiprintf_r+0x78>
 8006e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e48:	07dc      	lsls	r4, r3, #31
 8006e4a:	d50e      	bpl.n	8006e6a <_vfiprintf_r+0x6a>
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e50:	b01d      	add	sp, #116	; 0x74
 8006e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e56:	4b7b      	ldr	r3, [pc, #492]	; (8007044 <_vfiprintf_r+0x244>)
 8006e58:	429d      	cmp	r5, r3
 8006e5a:	d101      	bne.n	8006e60 <_vfiprintf_r+0x60>
 8006e5c:	68b5      	ldr	r5, [r6, #8]
 8006e5e:	e7df      	b.n	8006e20 <_vfiprintf_r+0x20>
 8006e60:	4b79      	ldr	r3, [pc, #484]	; (8007048 <_vfiprintf_r+0x248>)
 8006e62:	429d      	cmp	r5, r3
 8006e64:	bf08      	it	eq
 8006e66:	68f5      	ldreq	r5, [r6, #12]
 8006e68:	e7da      	b.n	8006e20 <_vfiprintf_r+0x20>
 8006e6a:	89ab      	ldrh	r3, [r5, #12]
 8006e6c:	0598      	lsls	r0, r3, #22
 8006e6e:	d4ed      	bmi.n	8006e4c <_vfiprintf_r+0x4c>
 8006e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e72:	f7ff fe54 	bl	8006b1e <__retarget_lock_release_recursive>
 8006e76:	e7e9      	b.n	8006e4c <_vfiprintf_r+0x4c>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7c:	2320      	movs	r3, #32
 8006e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e86:	2330      	movs	r3, #48	; 0x30
 8006e88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800704c <_vfiprintf_r+0x24c>
 8006e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e90:	f04f 0901 	mov.w	r9, #1
 8006e94:	4623      	mov	r3, r4
 8006e96:	469a      	mov	sl, r3
 8006e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9c:	b10a      	cbz	r2, 8006ea2 <_vfiprintf_r+0xa2>
 8006e9e:	2a25      	cmp	r2, #37	; 0x25
 8006ea0:	d1f9      	bne.n	8006e96 <_vfiprintf_r+0x96>
 8006ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea6:	d00b      	beq.n	8006ec0 <_vfiprintf_r+0xc0>
 8006ea8:	465b      	mov	r3, fp
 8006eaa:	4622      	mov	r2, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f7ff ff93 	bl	8006dda <__sfputs_r>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f000 80aa 	beq.w	800700e <_vfiprintf_r+0x20e>
 8006eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ebc:	445a      	add	r2, fp
 8006ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80a2 	beq.w	800700e <_vfiprintf_r+0x20e>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed4:	f10a 0a01 	add.w	sl, sl, #1
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	9307      	str	r3, [sp, #28]
 8006edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee2:	4654      	mov	r4, sl
 8006ee4:	2205      	movs	r2, #5
 8006ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eea:	4858      	ldr	r0, [pc, #352]	; (800704c <_vfiprintf_r+0x24c>)
 8006eec:	f7f9 f990 	bl	8000210 <memchr>
 8006ef0:	9a04      	ldr	r2, [sp, #16]
 8006ef2:	b9d8      	cbnz	r0, 8006f2c <_vfiprintf_r+0x12c>
 8006ef4:	06d1      	lsls	r1, r2, #27
 8006ef6:	bf44      	itt	mi
 8006ef8:	2320      	movmi	r3, #32
 8006efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006efe:	0713      	lsls	r3, r2, #28
 8006f00:	bf44      	itt	mi
 8006f02:	232b      	movmi	r3, #43	; 0x2b
 8006f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f08:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f0e:	d015      	beq.n	8006f3c <_vfiprintf_r+0x13c>
 8006f10:	9a07      	ldr	r2, [sp, #28]
 8006f12:	4654      	mov	r4, sl
 8006f14:	2000      	movs	r0, #0
 8006f16:	f04f 0c0a 	mov.w	ip, #10
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f20:	3b30      	subs	r3, #48	; 0x30
 8006f22:	2b09      	cmp	r3, #9
 8006f24:	d94e      	bls.n	8006fc4 <_vfiprintf_r+0x1c4>
 8006f26:	b1b0      	cbz	r0, 8006f56 <_vfiprintf_r+0x156>
 8006f28:	9207      	str	r2, [sp, #28]
 8006f2a:	e014      	b.n	8006f56 <_vfiprintf_r+0x156>
 8006f2c:	eba0 0308 	sub.w	r3, r0, r8
 8006f30:	fa09 f303 	lsl.w	r3, r9, r3
 8006f34:	4313      	orrs	r3, r2
 8006f36:	9304      	str	r3, [sp, #16]
 8006f38:	46a2      	mov	sl, r4
 8006f3a:	e7d2      	b.n	8006ee2 <_vfiprintf_r+0xe2>
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	1d19      	adds	r1, r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	9103      	str	r1, [sp, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	bfbb      	ittet	lt
 8006f48:	425b      	neglt	r3, r3
 8006f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f4e:	9307      	strge	r3, [sp, #28]
 8006f50:	9307      	strlt	r3, [sp, #28]
 8006f52:	bfb8      	it	lt
 8006f54:	9204      	strlt	r2, [sp, #16]
 8006f56:	7823      	ldrb	r3, [r4, #0]
 8006f58:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5a:	d10c      	bne.n	8006f76 <_vfiprintf_r+0x176>
 8006f5c:	7863      	ldrb	r3, [r4, #1]
 8006f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f60:	d135      	bne.n	8006fce <_vfiprintf_r+0x1ce>
 8006f62:	9b03      	ldr	r3, [sp, #12]
 8006f64:	1d1a      	adds	r2, r3, #4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	9203      	str	r2, [sp, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bfb8      	it	lt
 8006f6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f72:	3402      	adds	r4, #2
 8006f74:	9305      	str	r3, [sp, #20]
 8006f76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800705c <_vfiprintf_r+0x25c>
 8006f7a:	7821      	ldrb	r1, [r4, #0]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	4650      	mov	r0, sl
 8006f80:	f7f9 f946 	bl	8000210 <memchr>
 8006f84:	b140      	cbz	r0, 8006f98 <_vfiprintf_r+0x198>
 8006f86:	2340      	movs	r3, #64	; 0x40
 8006f88:	eba0 000a 	sub.w	r0, r0, sl
 8006f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	4303      	orrs	r3, r0
 8006f94:	3401      	adds	r4, #1
 8006f96:	9304      	str	r3, [sp, #16]
 8006f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9c:	482c      	ldr	r0, [pc, #176]	; (8007050 <_vfiprintf_r+0x250>)
 8006f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa2:	2206      	movs	r2, #6
 8006fa4:	f7f9 f934 	bl	8000210 <memchr>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d03f      	beq.n	800702c <_vfiprintf_r+0x22c>
 8006fac:	4b29      	ldr	r3, [pc, #164]	; (8007054 <_vfiprintf_r+0x254>)
 8006fae:	bb1b      	cbnz	r3, 8006ff8 <_vfiprintf_r+0x1f8>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	3307      	adds	r3, #7
 8006fb4:	f023 0307 	bic.w	r3, r3, #7
 8006fb8:	3308      	adds	r3, #8
 8006fba:	9303      	str	r3, [sp, #12]
 8006fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbe:	443b      	add	r3, r7
 8006fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc2:	e767      	b.n	8006e94 <_vfiprintf_r+0x94>
 8006fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fc8:	460c      	mov	r4, r1
 8006fca:	2001      	movs	r0, #1
 8006fcc:	e7a5      	b.n	8006f1a <_vfiprintf_r+0x11a>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	3401      	adds	r4, #1
 8006fd2:	9305      	str	r3, [sp, #20]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	f04f 0c0a 	mov.w	ip, #10
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe0:	3a30      	subs	r2, #48	; 0x30
 8006fe2:	2a09      	cmp	r2, #9
 8006fe4:	d903      	bls.n	8006fee <_vfiprintf_r+0x1ee>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0c5      	beq.n	8006f76 <_vfiprintf_r+0x176>
 8006fea:	9105      	str	r1, [sp, #20]
 8006fec:	e7c3      	b.n	8006f76 <_vfiprintf_r+0x176>
 8006fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e7f0      	b.n	8006fda <_vfiprintf_r+0x1da>
 8006ff8:	ab03      	add	r3, sp, #12
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	462a      	mov	r2, r5
 8006ffe:	4b16      	ldr	r3, [pc, #88]	; (8007058 <_vfiprintf_r+0x258>)
 8007000:	a904      	add	r1, sp, #16
 8007002:	4630      	mov	r0, r6
 8007004:	f3af 8000 	nop.w
 8007008:	4607      	mov	r7, r0
 800700a:	1c78      	adds	r0, r7, #1
 800700c:	d1d6      	bne.n	8006fbc <_vfiprintf_r+0x1bc>
 800700e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007010:	07d9      	lsls	r1, r3, #31
 8007012:	d405      	bmi.n	8007020 <_vfiprintf_r+0x220>
 8007014:	89ab      	ldrh	r3, [r5, #12]
 8007016:	059a      	lsls	r2, r3, #22
 8007018:	d402      	bmi.n	8007020 <_vfiprintf_r+0x220>
 800701a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701c:	f7ff fd7f 	bl	8006b1e <__retarget_lock_release_recursive>
 8007020:	89ab      	ldrh	r3, [r5, #12]
 8007022:	065b      	lsls	r3, r3, #25
 8007024:	f53f af12 	bmi.w	8006e4c <_vfiprintf_r+0x4c>
 8007028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702a:	e711      	b.n	8006e50 <_vfiprintf_r+0x50>
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	462a      	mov	r2, r5
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <_vfiprintf_r+0x258>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4630      	mov	r0, r6
 8007038:	f000 f880 	bl	800713c <_printf_i>
 800703c:	e7e4      	b.n	8007008 <_vfiprintf_r+0x208>
 800703e:	bf00      	nop
 8007040:	080077b8 	.word	0x080077b8
 8007044:	080077d8 	.word	0x080077d8
 8007048:	08007798 	.word	0x08007798
 800704c:	080077f8 	.word	0x080077f8
 8007050:	08007802 	.word	0x08007802
 8007054:	00000000 	.word	0x00000000
 8007058:	08006ddb 	.word	0x08006ddb
 800705c:	080077fe 	.word	0x080077fe

08007060 <_printf_common>:
 8007060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	4616      	mov	r6, r2
 8007066:	4699      	mov	r9, r3
 8007068:	688a      	ldr	r2, [r1, #8]
 800706a:	690b      	ldr	r3, [r1, #16]
 800706c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007070:	4293      	cmp	r3, r2
 8007072:	bfb8      	it	lt
 8007074:	4613      	movlt	r3, r2
 8007076:	6033      	str	r3, [r6, #0]
 8007078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800707c:	4607      	mov	r7, r0
 800707e:	460c      	mov	r4, r1
 8007080:	b10a      	cbz	r2, 8007086 <_printf_common+0x26>
 8007082:	3301      	adds	r3, #1
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	0699      	lsls	r1, r3, #26
 800708a:	bf42      	ittt	mi
 800708c:	6833      	ldrmi	r3, [r6, #0]
 800708e:	3302      	addmi	r3, #2
 8007090:	6033      	strmi	r3, [r6, #0]
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	f015 0506 	ands.w	r5, r5, #6
 8007098:	d106      	bne.n	80070a8 <_printf_common+0x48>
 800709a:	f104 0a19 	add.w	sl, r4, #25
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	6832      	ldr	r2, [r6, #0]
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	42ab      	cmp	r3, r5
 80070a6:	dc26      	bgt.n	80070f6 <_printf_common+0x96>
 80070a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070ac:	1e13      	subs	r3, r2, #0
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	0692      	lsls	r2, r2, #26
 80070b6:	d42b      	bmi.n	8007110 <_printf_common+0xb0>
 80070b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070bc:	4649      	mov	r1, r9
 80070be:	4638      	mov	r0, r7
 80070c0:	47c0      	blx	r8
 80070c2:	3001      	adds	r0, #1
 80070c4:	d01e      	beq.n	8007104 <_printf_common+0xa4>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	68e5      	ldr	r5, [r4, #12]
 80070ca:	6832      	ldr	r2, [r6, #0]
 80070cc:	f003 0306 	and.w	r3, r3, #6
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	bf08      	it	eq
 80070d4:	1aad      	subeq	r5, r5, r2
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	6922      	ldr	r2, [r4, #16]
 80070da:	bf0c      	ite	eq
 80070dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e0:	2500      	movne	r5, #0
 80070e2:	4293      	cmp	r3, r2
 80070e4:	bfc4      	itt	gt
 80070e6:	1a9b      	subgt	r3, r3, r2
 80070e8:	18ed      	addgt	r5, r5, r3
 80070ea:	2600      	movs	r6, #0
 80070ec:	341a      	adds	r4, #26
 80070ee:	42b5      	cmp	r5, r6
 80070f0:	d11a      	bne.n	8007128 <_printf_common+0xc8>
 80070f2:	2000      	movs	r0, #0
 80070f4:	e008      	b.n	8007108 <_printf_common+0xa8>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4652      	mov	r2, sl
 80070fa:	4649      	mov	r1, r9
 80070fc:	4638      	mov	r0, r7
 80070fe:	47c0      	blx	r8
 8007100:	3001      	adds	r0, #1
 8007102:	d103      	bne.n	800710c <_printf_common+0xac>
 8007104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710c:	3501      	adds	r5, #1
 800710e:	e7c6      	b.n	800709e <_printf_common+0x3e>
 8007110:	18e1      	adds	r1, r4, r3
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	2030      	movs	r0, #48	; 0x30
 8007116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800711a:	4422      	add	r2, r4
 800711c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007124:	3302      	adds	r3, #2
 8007126:	e7c7      	b.n	80070b8 <_printf_common+0x58>
 8007128:	2301      	movs	r3, #1
 800712a:	4622      	mov	r2, r4
 800712c:	4649      	mov	r1, r9
 800712e:	4638      	mov	r0, r7
 8007130:	47c0      	blx	r8
 8007132:	3001      	adds	r0, #1
 8007134:	d0e6      	beq.n	8007104 <_printf_common+0xa4>
 8007136:	3601      	adds	r6, #1
 8007138:	e7d9      	b.n	80070ee <_printf_common+0x8e>
	...

0800713c <_printf_i>:
 800713c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	7e0f      	ldrb	r7, [r1, #24]
 8007142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007144:	2f78      	cmp	r7, #120	; 0x78
 8007146:	4691      	mov	r9, r2
 8007148:	4680      	mov	r8, r0
 800714a:	460c      	mov	r4, r1
 800714c:	469a      	mov	sl, r3
 800714e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007152:	d807      	bhi.n	8007164 <_printf_i+0x28>
 8007154:	2f62      	cmp	r7, #98	; 0x62
 8007156:	d80a      	bhi.n	800716e <_printf_i+0x32>
 8007158:	2f00      	cmp	r7, #0
 800715a:	f000 80d8 	beq.w	800730e <_printf_i+0x1d2>
 800715e:	2f58      	cmp	r7, #88	; 0x58
 8007160:	f000 80a3 	beq.w	80072aa <_printf_i+0x16e>
 8007164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800716c:	e03a      	b.n	80071e4 <_printf_i+0xa8>
 800716e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007172:	2b15      	cmp	r3, #21
 8007174:	d8f6      	bhi.n	8007164 <_printf_i+0x28>
 8007176:	a101      	add	r1, pc, #4	; (adr r1, 800717c <_printf_i+0x40>)
 8007178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071e9 	.word	0x080071e9
 8007184:	08007165 	.word	0x08007165
 8007188:	08007165 	.word	0x08007165
 800718c:	08007165 	.word	0x08007165
 8007190:	08007165 	.word	0x08007165
 8007194:	080071e9 	.word	0x080071e9
 8007198:	08007165 	.word	0x08007165
 800719c:	08007165 	.word	0x08007165
 80071a0:	08007165 	.word	0x08007165
 80071a4:	08007165 	.word	0x08007165
 80071a8:	080072f5 	.word	0x080072f5
 80071ac:	08007219 	.word	0x08007219
 80071b0:	080072d7 	.word	0x080072d7
 80071b4:	08007165 	.word	0x08007165
 80071b8:	08007165 	.word	0x08007165
 80071bc:	08007317 	.word	0x08007317
 80071c0:	08007165 	.word	0x08007165
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007165 	.word	0x08007165
 80071cc:	08007165 	.word	0x08007165
 80071d0:	080072df 	.word	0x080072df
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	1d1a      	adds	r2, r3, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	602a      	str	r2, [r5, #0]
 80071dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0a3      	b.n	8007330 <_printf_i+0x1f4>
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	6829      	ldr	r1, [r5, #0]
 80071ec:	0606      	lsls	r6, r0, #24
 80071ee:	f101 0304 	add.w	r3, r1, #4
 80071f2:	d50a      	bpl.n	800720a <_printf_i+0xce>
 80071f4:	680e      	ldr	r6, [r1, #0]
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	da03      	bge.n	8007204 <_printf_i+0xc8>
 80071fc:	232d      	movs	r3, #45	; 0x2d
 80071fe:	4276      	negs	r6, r6
 8007200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007204:	485e      	ldr	r0, [pc, #376]	; (8007380 <_printf_i+0x244>)
 8007206:	230a      	movs	r3, #10
 8007208:	e019      	b.n	800723e <_printf_i+0x102>
 800720a:	680e      	ldr	r6, [r1, #0]
 800720c:	602b      	str	r3, [r5, #0]
 800720e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007212:	bf18      	it	ne
 8007214:	b236      	sxthne	r6, r6
 8007216:	e7ef      	b.n	80071f8 <_printf_i+0xbc>
 8007218:	682b      	ldr	r3, [r5, #0]
 800721a:	6820      	ldr	r0, [r4, #0]
 800721c:	1d19      	adds	r1, r3, #4
 800721e:	6029      	str	r1, [r5, #0]
 8007220:	0601      	lsls	r1, r0, #24
 8007222:	d501      	bpl.n	8007228 <_printf_i+0xec>
 8007224:	681e      	ldr	r6, [r3, #0]
 8007226:	e002      	b.n	800722e <_printf_i+0xf2>
 8007228:	0646      	lsls	r6, r0, #25
 800722a:	d5fb      	bpl.n	8007224 <_printf_i+0xe8>
 800722c:	881e      	ldrh	r6, [r3, #0]
 800722e:	4854      	ldr	r0, [pc, #336]	; (8007380 <_printf_i+0x244>)
 8007230:	2f6f      	cmp	r7, #111	; 0x6f
 8007232:	bf0c      	ite	eq
 8007234:	2308      	moveq	r3, #8
 8007236:	230a      	movne	r3, #10
 8007238:	2100      	movs	r1, #0
 800723a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800723e:	6865      	ldr	r5, [r4, #4]
 8007240:	60a5      	str	r5, [r4, #8]
 8007242:	2d00      	cmp	r5, #0
 8007244:	bfa2      	ittt	ge
 8007246:	6821      	ldrge	r1, [r4, #0]
 8007248:	f021 0104 	bicge.w	r1, r1, #4
 800724c:	6021      	strge	r1, [r4, #0]
 800724e:	b90e      	cbnz	r6, 8007254 <_printf_i+0x118>
 8007250:	2d00      	cmp	r5, #0
 8007252:	d04d      	beq.n	80072f0 <_printf_i+0x1b4>
 8007254:	4615      	mov	r5, r2
 8007256:	fbb6 f1f3 	udiv	r1, r6, r3
 800725a:	fb03 6711 	mls	r7, r3, r1, r6
 800725e:	5dc7      	ldrb	r7, [r0, r7]
 8007260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007264:	4637      	mov	r7, r6
 8007266:	42bb      	cmp	r3, r7
 8007268:	460e      	mov	r6, r1
 800726a:	d9f4      	bls.n	8007256 <_printf_i+0x11a>
 800726c:	2b08      	cmp	r3, #8
 800726e:	d10b      	bne.n	8007288 <_printf_i+0x14c>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	07de      	lsls	r6, r3, #31
 8007274:	d508      	bpl.n	8007288 <_printf_i+0x14c>
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	6861      	ldr	r1, [r4, #4]
 800727a:	4299      	cmp	r1, r3
 800727c:	bfde      	ittt	le
 800727e:	2330      	movle	r3, #48	; 0x30
 8007280:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007284:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007288:	1b52      	subs	r2, r2, r5
 800728a:	6122      	str	r2, [r4, #16]
 800728c:	f8cd a000 	str.w	sl, [sp]
 8007290:	464b      	mov	r3, r9
 8007292:	aa03      	add	r2, sp, #12
 8007294:	4621      	mov	r1, r4
 8007296:	4640      	mov	r0, r8
 8007298:	f7ff fee2 	bl	8007060 <_printf_common>
 800729c:	3001      	adds	r0, #1
 800729e:	d14c      	bne.n	800733a <_printf_i+0x1fe>
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a4:	b004      	add	sp, #16
 80072a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072aa:	4835      	ldr	r0, [pc, #212]	; (8007380 <_printf_i+0x244>)
 80072ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b0:	6829      	ldr	r1, [r5, #0]
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072b8:	6029      	str	r1, [r5, #0]
 80072ba:	061d      	lsls	r5, r3, #24
 80072bc:	d514      	bpl.n	80072e8 <_printf_i+0x1ac>
 80072be:	07df      	lsls	r7, r3, #31
 80072c0:	bf44      	itt	mi
 80072c2:	f043 0320 	orrmi.w	r3, r3, #32
 80072c6:	6023      	strmi	r3, [r4, #0]
 80072c8:	b91e      	cbnz	r6, 80072d2 <_printf_i+0x196>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	f023 0320 	bic.w	r3, r3, #32
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	2310      	movs	r3, #16
 80072d4:	e7b0      	b.n	8007238 <_printf_i+0xfc>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f043 0320 	orr.w	r3, r3, #32
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	2378      	movs	r3, #120	; 0x78
 80072e0:	4828      	ldr	r0, [pc, #160]	; (8007384 <_printf_i+0x248>)
 80072e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072e6:	e7e3      	b.n	80072b0 <_printf_i+0x174>
 80072e8:	0659      	lsls	r1, r3, #25
 80072ea:	bf48      	it	mi
 80072ec:	b2b6      	uxthmi	r6, r6
 80072ee:	e7e6      	b.n	80072be <_printf_i+0x182>
 80072f0:	4615      	mov	r5, r2
 80072f2:	e7bb      	b.n	800726c <_printf_i+0x130>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	6826      	ldr	r6, [r4, #0]
 80072f8:	6961      	ldr	r1, [r4, #20]
 80072fa:	1d18      	adds	r0, r3, #4
 80072fc:	6028      	str	r0, [r5, #0]
 80072fe:	0635      	lsls	r5, r6, #24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	d501      	bpl.n	8007308 <_printf_i+0x1cc>
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	e002      	b.n	800730e <_printf_i+0x1d2>
 8007308:	0670      	lsls	r0, r6, #25
 800730a:	d5fb      	bpl.n	8007304 <_printf_i+0x1c8>
 800730c:	8019      	strh	r1, [r3, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	4615      	mov	r5, r2
 8007314:	e7ba      	b.n	800728c <_printf_i+0x150>
 8007316:	682b      	ldr	r3, [r5, #0]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	602a      	str	r2, [r5, #0]
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	2100      	movs	r1, #0
 8007322:	4628      	mov	r0, r5
 8007324:	f7f8 ff74 	bl	8000210 <memchr>
 8007328:	b108      	cbz	r0, 800732e <_printf_i+0x1f2>
 800732a:	1b40      	subs	r0, r0, r5
 800732c:	6060      	str	r0, [r4, #4]
 800732e:	6863      	ldr	r3, [r4, #4]
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	2300      	movs	r3, #0
 8007334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007338:	e7a8      	b.n	800728c <_printf_i+0x150>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	462a      	mov	r2, r5
 800733e:	4649      	mov	r1, r9
 8007340:	4640      	mov	r0, r8
 8007342:	47d0      	blx	sl
 8007344:	3001      	adds	r0, #1
 8007346:	d0ab      	beq.n	80072a0 <_printf_i+0x164>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	079b      	lsls	r3, r3, #30
 800734c:	d413      	bmi.n	8007376 <_printf_i+0x23a>
 800734e:	68e0      	ldr	r0, [r4, #12]
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	4298      	cmp	r0, r3
 8007354:	bfb8      	it	lt
 8007356:	4618      	movlt	r0, r3
 8007358:	e7a4      	b.n	80072a4 <_printf_i+0x168>
 800735a:	2301      	movs	r3, #1
 800735c:	4632      	mov	r2, r6
 800735e:	4649      	mov	r1, r9
 8007360:	4640      	mov	r0, r8
 8007362:	47d0      	blx	sl
 8007364:	3001      	adds	r0, #1
 8007366:	d09b      	beq.n	80072a0 <_printf_i+0x164>
 8007368:	3501      	adds	r5, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	9903      	ldr	r1, [sp, #12]
 800736e:	1a5b      	subs	r3, r3, r1
 8007370:	42ab      	cmp	r3, r5
 8007372:	dcf2      	bgt.n	800735a <_printf_i+0x21e>
 8007374:	e7eb      	b.n	800734e <_printf_i+0x212>
 8007376:	2500      	movs	r5, #0
 8007378:	f104 0619 	add.w	r6, r4, #25
 800737c:	e7f5      	b.n	800736a <_printf_i+0x22e>
 800737e:	bf00      	nop
 8007380:	08007809 	.word	0x08007809
 8007384:	0800781a 	.word	0x0800781a

08007388 <_sbrk_r>:
 8007388:	b538      	push	{r3, r4, r5, lr}
 800738a:	4d06      	ldr	r5, [pc, #24]	; (80073a4 <_sbrk_r+0x1c>)
 800738c:	2300      	movs	r3, #0
 800738e:	4604      	mov	r4, r0
 8007390:	4608      	mov	r0, r1
 8007392:	602b      	str	r3, [r5, #0]
 8007394:	f7fa fbf6 	bl	8001b84 <_sbrk>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_sbrk_r+0x1a>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_sbrk_r+0x1a>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20000890 	.word	0x20000890

080073a8 <__sread>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	460c      	mov	r4, r1
 80073ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b0:	f000 f8a0 	bl	80074f4 <_read_r>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	bfab      	itete	ge
 80073b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ba:	89a3      	ldrhlt	r3, [r4, #12]
 80073bc:	181b      	addge	r3, r3, r0
 80073be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073c2:	bfac      	ite	ge
 80073c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073c6:	81a3      	strhlt	r3, [r4, #12]
 80073c8:	bd10      	pop	{r4, pc}

080073ca <__swrite>:
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	461f      	mov	r7, r3
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	05db      	lsls	r3, r3, #23
 80073d4:	4605      	mov	r5, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d505      	bpl.n	80073e8 <__swrite+0x1e>
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	2302      	movs	r3, #2
 80073e2:	2200      	movs	r2, #0
 80073e4:	f000 f868 	bl	80074b8 <_lseek_r>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	4632      	mov	r2, r6
 80073f6:	463b      	mov	r3, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f000 b817 	b.w	8007430 <_write_r>

08007402 <__sseek>:
 8007402:	b510      	push	{r4, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 f855 	bl	80074b8 <_lseek_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	bf15      	itete	ne
 8007414:	6560      	strne	r0, [r4, #84]	; 0x54
 8007416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800741e:	81a3      	strheq	r3, [r4, #12]
 8007420:	bf18      	it	ne
 8007422:	81a3      	strhne	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__sclose>:
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 b813 	b.w	8007454 <_close_r>
	...

08007430 <_write_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4d07      	ldr	r5, [pc, #28]	; (8007450 <_write_r+0x20>)
 8007434:	4604      	mov	r4, r0
 8007436:	4608      	mov	r0, r1
 8007438:	4611      	mov	r1, r2
 800743a:	2200      	movs	r2, #0
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	f7fa fb4f 	bl	8001ae2 <_write>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_write_r+0x1e>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_write_r+0x1e>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20000890 	.word	0x20000890

08007454 <_close_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d06      	ldr	r5, [pc, #24]	; (8007470 <_close_r+0x1c>)
 8007458:	2300      	movs	r3, #0
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	602b      	str	r3, [r5, #0]
 8007460:	f7fa fb5b 	bl	8001b1a <_close>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_close_r+0x1a>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_close_r+0x1a>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	20000890 	.word	0x20000890

08007474 <_fstat_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	4d07      	ldr	r5, [pc, #28]	; (8007494 <_fstat_r+0x20>)
 8007478:	2300      	movs	r3, #0
 800747a:	4604      	mov	r4, r0
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	f7fa fb56 	bl	8001b32 <_fstat>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d102      	bne.n	8007490 <_fstat_r+0x1c>
 800748a:	682b      	ldr	r3, [r5, #0]
 800748c:	b103      	cbz	r3, 8007490 <_fstat_r+0x1c>
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	bd38      	pop	{r3, r4, r5, pc}
 8007492:	bf00      	nop
 8007494:	20000890 	.word	0x20000890

08007498 <_isatty_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4d06      	ldr	r5, [pc, #24]	; (80074b4 <_isatty_r+0x1c>)
 800749c:	2300      	movs	r3, #0
 800749e:	4604      	mov	r4, r0
 80074a0:	4608      	mov	r0, r1
 80074a2:	602b      	str	r3, [r5, #0]
 80074a4:	f7fa fb55 	bl	8001b52 <_isatty>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d102      	bne.n	80074b2 <_isatty_r+0x1a>
 80074ac:	682b      	ldr	r3, [r5, #0]
 80074ae:	b103      	cbz	r3, 80074b2 <_isatty_r+0x1a>
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	bd38      	pop	{r3, r4, r5, pc}
 80074b4:	20000890 	.word	0x20000890

080074b8 <_lseek_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4d07      	ldr	r5, [pc, #28]	; (80074d8 <_lseek_r+0x20>)
 80074bc:	4604      	mov	r4, r0
 80074be:	4608      	mov	r0, r1
 80074c0:	4611      	mov	r1, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	602a      	str	r2, [r5, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f7fa fb4e 	bl	8001b68 <_lseek>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_lseek_r+0x1e>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_lseek_r+0x1e>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	20000890 	.word	0x20000890

080074dc <__malloc_lock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__malloc_lock+0x8>)
 80074de:	f7ff bb1d 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80074e2:	bf00      	nop
 80074e4:	20000884 	.word	0x20000884

080074e8 <__malloc_unlock>:
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <__malloc_unlock+0x8>)
 80074ea:	f7ff bb18 	b.w	8006b1e <__retarget_lock_release_recursive>
 80074ee:	bf00      	nop
 80074f0:	20000884 	.word	0x20000884

080074f4 <_read_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d07      	ldr	r5, [pc, #28]	; (8007514 <_read_r+0x20>)
 80074f8:	4604      	mov	r4, r0
 80074fa:	4608      	mov	r0, r1
 80074fc:	4611      	mov	r1, r2
 80074fe:	2200      	movs	r2, #0
 8007500:	602a      	str	r2, [r5, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f7fa fad0 	bl	8001aa8 <_read>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_read_r+0x1e>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_read_r+0x1e>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	20000890 	.word	0x20000890

08007518 <_init>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr

08007524 <_fini>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr
