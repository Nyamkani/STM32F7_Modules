
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019fb4  080401d0  080401d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003908  0805a184  0805a184  0002a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805da8c  0805da8c  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0805da8c  0805da8c  0002da8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805da94  0805da94  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805da94  0805da94  0002da94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805da98  0805da98  0002da98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0805da9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0805db34  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0805dbd4  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000b564  200001d8  0805dc74  000301d8  2**2
                  ALLOC
 12 ._user_heap_stack 00006004  2000b73c  0805dc74  0003b73c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000516bb  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a073  00000000  00000000  000818c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b78  00000000  00000000  0008b938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000029a8  00000000  00000000  0008e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003eb8a  00000000  00000000  00090e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042287  00000000  00000000  000cf9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012b08e  00000000  00000000  00111c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0023ccf7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bf48  00000000  00000000  0023cd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401d0 <__do_global_dtors_aux>:
 80401d0:	b510      	push	{r4, lr}
 80401d2:	4c05      	ldr	r4, [pc, #20]	; (80401e8 <__do_global_dtors_aux+0x18>)
 80401d4:	7823      	ldrb	r3, [r4, #0]
 80401d6:	b933      	cbnz	r3, 80401e6 <__do_global_dtors_aux+0x16>
 80401d8:	4b04      	ldr	r3, [pc, #16]	; (80401ec <__do_global_dtors_aux+0x1c>)
 80401da:	b113      	cbz	r3, 80401e2 <__do_global_dtors_aux+0x12>
 80401dc:	4804      	ldr	r0, [pc, #16]	; (80401f0 <__do_global_dtors_aux+0x20>)
 80401de:	f3af 8000 	nop.w
 80401e2:	2301      	movs	r3, #1
 80401e4:	7023      	strb	r3, [r4, #0]
 80401e6:	bd10      	pop	{r4, pc}
 80401e8:	200001d8 	.word	0x200001d8
 80401ec:	00000000 	.word	0x00000000
 80401f0:	0805a16c 	.word	0x0805a16c

080401f4 <frame_dummy>:
 80401f4:	b508      	push	{r3, lr}
 80401f6:	4b03      	ldr	r3, [pc, #12]	; (8040204 <frame_dummy+0x10>)
 80401f8:	b11b      	cbz	r3, 8040202 <frame_dummy+0xe>
 80401fa:	4903      	ldr	r1, [pc, #12]	; (8040208 <frame_dummy+0x14>)
 80401fc:	4803      	ldr	r0, [pc, #12]	; (804020c <frame_dummy+0x18>)
 80401fe:	f3af 8000 	nop.w
 8040202:	bd08      	pop	{r3, pc}
 8040204:	00000000 	.word	0x00000000
 8040208:	200001dc 	.word	0x200001dc
 804020c:	0805a16c 	.word	0x0805a16c

08040210 <strlen>:
 8040210:	4603      	mov	r3, r0
 8040212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8040216:	2a00      	cmp	r2, #0
 8040218:	d1fb      	bne.n	8040212 <strlen+0x2>
 804021a:	1a18      	subs	r0, r3, r0
 804021c:	3801      	subs	r0, #1
 804021e:	4770      	bx	lr

08040220 <memchr>:
 8040220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040224:	2a10      	cmp	r2, #16
 8040226:	db2b      	blt.n	8040280 <memchr+0x60>
 8040228:	f010 0f07 	tst.w	r0, #7
 804022c:	d008      	beq.n	8040240 <memchr+0x20>
 804022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040232:	3a01      	subs	r2, #1
 8040234:	428b      	cmp	r3, r1
 8040236:	d02d      	beq.n	8040294 <memchr+0x74>
 8040238:	f010 0f07 	tst.w	r0, #7
 804023c:	b342      	cbz	r2, 8040290 <memchr+0x70>
 804023e:	d1f6      	bne.n	804022e <memchr+0xe>
 8040240:	b4f0      	push	{r4, r5, r6, r7}
 8040242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804024a:	f022 0407 	bic.w	r4, r2, #7
 804024e:	f07f 0700 	mvns.w	r7, #0
 8040252:	2300      	movs	r3, #0
 8040254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040258:	3c08      	subs	r4, #8
 804025a:	ea85 0501 	eor.w	r5, r5, r1
 804025e:	ea86 0601 	eor.w	r6, r6, r1
 8040262:	fa85 f547 	uadd8	r5, r5, r7
 8040266:	faa3 f587 	sel	r5, r3, r7
 804026a:	fa86 f647 	uadd8	r6, r6, r7
 804026e:	faa5 f687 	sel	r6, r5, r7
 8040272:	b98e      	cbnz	r6, 8040298 <memchr+0x78>
 8040274:	d1ee      	bne.n	8040254 <memchr+0x34>
 8040276:	bcf0      	pop	{r4, r5, r6, r7}
 8040278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804027c:	f002 0207 	and.w	r2, r2, #7
 8040280:	b132      	cbz	r2, 8040290 <memchr+0x70>
 8040282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040286:	3a01      	subs	r2, #1
 8040288:	ea83 0301 	eor.w	r3, r3, r1
 804028c:	b113      	cbz	r3, 8040294 <memchr+0x74>
 804028e:	d1f8      	bne.n	8040282 <memchr+0x62>
 8040290:	2000      	movs	r0, #0
 8040292:	4770      	bx	lr
 8040294:	3801      	subs	r0, #1
 8040296:	4770      	bx	lr
 8040298:	2d00      	cmp	r5, #0
 804029a:	bf06      	itte	eq
 804029c:	4635      	moveq	r5, r6
 804029e:	3803      	subeq	r0, #3
 80402a0:	3807      	subne	r0, #7
 80402a2:	f015 0f01 	tst.w	r5, #1
 80402a6:	d107      	bne.n	80402b8 <memchr+0x98>
 80402a8:	3001      	adds	r0, #1
 80402aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ae:	bf02      	ittt	eq
 80402b0:	3001      	addeq	r0, #1
 80402b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402b6:	3001      	addeq	r0, #1
 80402b8:	bcf0      	pop	{r4, r5, r6, r7}
 80402ba:	3801      	subs	r0, #1
 80402bc:	4770      	bx	lr
 80402be:	bf00      	nop

080402c0 <__aeabi_uldivmod>:
 80402c0:	b953      	cbnz	r3, 80402d8 <__aeabi_uldivmod+0x18>
 80402c2:	b94a      	cbnz	r2, 80402d8 <__aeabi_uldivmod+0x18>
 80402c4:	2900      	cmp	r1, #0
 80402c6:	bf08      	it	eq
 80402c8:	2800      	cmpeq	r0, #0
 80402ca:	bf1c      	itt	ne
 80402cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80402d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80402d4:	f000 b974 	b.w	80405c0 <__aeabi_idiv0>
 80402d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402e0:	f000 f806 	bl	80402f0 <__udivmoddi4>
 80402e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402ec:	b004      	add	sp, #16
 80402ee:	4770      	bx	lr

080402f0 <__udivmoddi4>:
 80402f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402f4:	9d08      	ldr	r5, [sp, #32]
 80402f6:	4604      	mov	r4, r0
 80402f8:	468e      	mov	lr, r1
 80402fa:	2b00      	cmp	r3, #0
 80402fc:	d14d      	bne.n	804039a <__udivmoddi4+0xaa>
 80402fe:	428a      	cmp	r2, r1
 8040300:	4694      	mov	ip, r2
 8040302:	d969      	bls.n	80403d8 <__udivmoddi4+0xe8>
 8040304:	fab2 f282 	clz	r2, r2
 8040308:	b152      	cbz	r2, 8040320 <__udivmoddi4+0x30>
 804030a:	fa01 f302 	lsl.w	r3, r1, r2
 804030e:	f1c2 0120 	rsb	r1, r2, #32
 8040312:	fa20 f101 	lsr.w	r1, r0, r1
 8040316:	fa0c fc02 	lsl.w	ip, ip, r2
 804031a:	ea41 0e03 	orr.w	lr, r1, r3
 804031e:	4094      	lsls	r4, r2
 8040320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040324:	0c21      	lsrs	r1, r4, #16
 8040326:	fbbe f6f8 	udiv	r6, lr, r8
 804032a:	fa1f f78c 	uxth.w	r7, ip
 804032e:	fb08 e316 	mls	r3, r8, r6, lr
 8040332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040336:	fb06 f107 	mul.w	r1, r6, r7
 804033a:	4299      	cmp	r1, r3
 804033c:	d90a      	bls.n	8040354 <__udivmoddi4+0x64>
 804033e:	eb1c 0303 	adds.w	r3, ip, r3
 8040342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8040346:	f080 811f 	bcs.w	8040588 <__udivmoddi4+0x298>
 804034a:	4299      	cmp	r1, r3
 804034c:	f240 811c 	bls.w	8040588 <__udivmoddi4+0x298>
 8040350:	3e02      	subs	r6, #2
 8040352:	4463      	add	r3, ip
 8040354:	1a5b      	subs	r3, r3, r1
 8040356:	b2a4      	uxth	r4, r4
 8040358:	fbb3 f0f8 	udiv	r0, r3, r8
 804035c:	fb08 3310 	mls	r3, r8, r0, r3
 8040360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040364:	fb00 f707 	mul.w	r7, r0, r7
 8040368:	42a7      	cmp	r7, r4
 804036a:	d90a      	bls.n	8040382 <__udivmoddi4+0x92>
 804036c:	eb1c 0404 	adds.w	r4, ip, r4
 8040370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040374:	f080 810a 	bcs.w	804058c <__udivmoddi4+0x29c>
 8040378:	42a7      	cmp	r7, r4
 804037a:	f240 8107 	bls.w	804058c <__udivmoddi4+0x29c>
 804037e:	4464      	add	r4, ip
 8040380:	3802      	subs	r0, #2
 8040382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040386:	1be4      	subs	r4, r4, r7
 8040388:	2600      	movs	r6, #0
 804038a:	b11d      	cbz	r5, 8040394 <__udivmoddi4+0xa4>
 804038c:	40d4      	lsrs	r4, r2
 804038e:	2300      	movs	r3, #0
 8040390:	e9c5 4300 	strd	r4, r3, [r5]
 8040394:	4631      	mov	r1, r6
 8040396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804039a:	428b      	cmp	r3, r1
 804039c:	d909      	bls.n	80403b2 <__udivmoddi4+0xc2>
 804039e:	2d00      	cmp	r5, #0
 80403a0:	f000 80ef 	beq.w	8040582 <__udivmoddi4+0x292>
 80403a4:	2600      	movs	r6, #0
 80403a6:	e9c5 0100 	strd	r0, r1, [r5]
 80403aa:	4630      	mov	r0, r6
 80403ac:	4631      	mov	r1, r6
 80403ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403b2:	fab3 f683 	clz	r6, r3
 80403b6:	2e00      	cmp	r6, #0
 80403b8:	d14a      	bne.n	8040450 <__udivmoddi4+0x160>
 80403ba:	428b      	cmp	r3, r1
 80403bc:	d302      	bcc.n	80403c4 <__udivmoddi4+0xd4>
 80403be:	4282      	cmp	r2, r0
 80403c0:	f200 80f9 	bhi.w	80405b6 <__udivmoddi4+0x2c6>
 80403c4:	1a84      	subs	r4, r0, r2
 80403c6:	eb61 0303 	sbc.w	r3, r1, r3
 80403ca:	2001      	movs	r0, #1
 80403cc:	469e      	mov	lr, r3
 80403ce:	2d00      	cmp	r5, #0
 80403d0:	d0e0      	beq.n	8040394 <__udivmoddi4+0xa4>
 80403d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403d6:	e7dd      	b.n	8040394 <__udivmoddi4+0xa4>
 80403d8:	b902      	cbnz	r2, 80403dc <__udivmoddi4+0xec>
 80403da:	deff      	udf	#255	; 0xff
 80403dc:	fab2 f282 	clz	r2, r2
 80403e0:	2a00      	cmp	r2, #0
 80403e2:	f040 8092 	bne.w	804050a <__udivmoddi4+0x21a>
 80403e6:	eba1 010c 	sub.w	r1, r1, ip
 80403ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403ee:	fa1f fe8c 	uxth.w	lr, ip
 80403f2:	2601      	movs	r6, #1
 80403f4:	0c20      	lsrs	r0, r4, #16
 80403f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403fa:	fb07 1113 	mls	r1, r7, r3, r1
 80403fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040402:	fb0e f003 	mul.w	r0, lr, r3
 8040406:	4288      	cmp	r0, r1
 8040408:	d908      	bls.n	804041c <__udivmoddi4+0x12c>
 804040a:	eb1c 0101 	adds.w	r1, ip, r1
 804040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8040412:	d202      	bcs.n	804041a <__udivmoddi4+0x12a>
 8040414:	4288      	cmp	r0, r1
 8040416:	f200 80cb 	bhi.w	80405b0 <__udivmoddi4+0x2c0>
 804041a:	4643      	mov	r3, r8
 804041c:	1a09      	subs	r1, r1, r0
 804041e:	b2a4      	uxth	r4, r4
 8040420:	fbb1 f0f7 	udiv	r0, r1, r7
 8040424:	fb07 1110 	mls	r1, r7, r0, r1
 8040428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804042c:	fb0e fe00 	mul.w	lr, lr, r0
 8040430:	45a6      	cmp	lr, r4
 8040432:	d908      	bls.n	8040446 <__udivmoddi4+0x156>
 8040434:	eb1c 0404 	adds.w	r4, ip, r4
 8040438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 804043c:	d202      	bcs.n	8040444 <__udivmoddi4+0x154>
 804043e:	45a6      	cmp	lr, r4
 8040440:	f200 80bb 	bhi.w	80405ba <__udivmoddi4+0x2ca>
 8040444:	4608      	mov	r0, r1
 8040446:	eba4 040e 	sub.w	r4, r4, lr
 804044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804044e:	e79c      	b.n	804038a <__udivmoddi4+0x9a>
 8040450:	f1c6 0720 	rsb	r7, r6, #32
 8040454:	40b3      	lsls	r3, r6
 8040456:	fa22 fc07 	lsr.w	ip, r2, r7
 804045a:	ea4c 0c03 	orr.w	ip, ip, r3
 804045e:	fa20 f407 	lsr.w	r4, r0, r7
 8040462:	fa01 f306 	lsl.w	r3, r1, r6
 8040466:	431c      	orrs	r4, r3
 8040468:	40f9      	lsrs	r1, r7
 804046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804046e:	fa00 f306 	lsl.w	r3, r0, r6
 8040472:	fbb1 f8f9 	udiv	r8, r1, r9
 8040476:	0c20      	lsrs	r0, r4, #16
 8040478:	fa1f fe8c 	uxth.w	lr, ip
 804047c:	fb09 1118 	mls	r1, r9, r8, r1
 8040480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040484:	fb08 f00e 	mul.w	r0, r8, lr
 8040488:	4288      	cmp	r0, r1
 804048a:	fa02 f206 	lsl.w	r2, r2, r6
 804048e:	d90b      	bls.n	80404a8 <__udivmoddi4+0x1b8>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8040498:	f080 8088 	bcs.w	80405ac <__udivmoddi4+0x2bc>
 804049c:	4288      	cmp	r0, r1
 804049e:	f240 8085 	bls.w	80405ac <__udivmoddi4+0x2bc>
 80404a2:	f1a8 0802 	sub.w	r8, r8, #2
 80404a6:	4461      	add	r1, ip
 80404a8:	1a09      	subs	r1, r1, r0
 80404aa:	b2a4      	uxth	r4, r4
 80404ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80404b0:	fb09 1110 	mls	r1, r9, r0, r1
 80404b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80404b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80404bc:	458e      	cmp	lr, r1
 80404be:	d908      	bls.n	80404d2 <__udivmoddi4+0x1e2>
 80404c0:	eb1c 0101 	adds.w	r1, ip, r1
 80404c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80404c8:	d26c      	bcs.n	80405a4 <__udivmoddi4+0x2b4>
 80404ca:	458e      	cmp	lr, r1
 80404cc:	d96a      	bls.n	80405a4 <__udivmoddi4+0x2b4>
 80404ce:	3802      	subs	r0, #2
 80404d0:	4461      	add	r1, ip
 80404d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404d6:	fba0 9402 	umull	r9, r4, r0, r2
 80404da:	eba1 010e 	sub.w	r1, r1, lr
 80404de:	42a1      	cmp	r1, r4
 80404e0:	46c8      	mov	r8, r9
 80404e2:	46a6      	mov	lr, r4
 80404e4:	d356      	bcc.n	8040594 <__udivmoddi4+0x2a4>
 80404e6:	d053      	beq.n	8040590 <__udivmoddi4+0x2a0>
 80404e8:	b15d      	cbz	r5, 8040502 <__udivmoddi4+0x212>
 80404ea:	ebb3 0208 	subs.w	r2, r3, r8
 80404ee:	eb61 010e 	sbc.w	r1, r1, lr
 80404f2:	fa01 f707 	lsl.w	r7, r1, r7
 80404f6:	fa22 f306 	lsr.w	r3, r2, r6
 80404fa:	40f1      	lsrs	r1, r6
 80404fc:	431f      	orrs	r7, r3
 80404fe:	e9c5 7100 	strd	r7, r1, [r5]
 8040502:	2600      	movs	r6, #0
 8040504:	4631      	mov	r1, r6
 8040506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804050a:	f1c2 0320 	rsb	r3, r2, #32
 804050e:	40d8      	lsrs	r0, r3
 8040510:	fa0c fc02 	lsl.w	ip, ip, r2
 8040514:	fa21 f303 	lsr.w	r3, r1, r3
 8040518:	4091      	lsls	r1, r2
 804051a:	4301      	orrs	r1, r0
 804051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040520:	fa1f fe8c 	uxth.w	lr, ip
 8040524:	fbb3 f0f7 	udiv	r0, r3, r7
 8040528:	fb07 3610 	mls	r6, r7, r0, r3
 804052c:	0c0b      	lsrs	r3, r1, #16
 804052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040532:	fb00 f60e 	mul.w	r6, r0, lr
 8040536:	429e      	cmp	r6, r3
 8040538:	fa04 f402 	lsl.w	r4, r4, r2
 804053c:	d908      	bls.n	8040550 <__udivmoddi4+0x260>
 804053e:	eb1c 0303 	adds.w	r3, ip, r3
 8040542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8040546:	d22f      	bcs.n	80405a8 <__udivmoddi4+0x2b8>
 8040548:	429e      	cmp	r6, r3
 804054a:	d92d      	bls.n	80405a8 <__udivmoddi4+0x2b8>
 804054c:	3802      	subs	r0, #2
 804054e:	4463      	add	r3, ip
 8040550:	1b9b      	subs	r3, r3, r6
 8040552:	b289      	uxth	r1, r1
 8040554:	fbb3 f6f7 	udiv	r6, r3, r7
 8040558:	fb07 3316 	mls	r3, r7, r6, r3
 804055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040560:	fb06 f30e 	mul.w	r3, r6, lr
 8040564:	428b      	cmp	r3, r1
 8040566:	d908      	bls.n	804057a <__udivmoddi4+0x28a>
 8040568:	eb1c 0101 	adds.w	r1, ip, r1
 804056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8040570:	d216      	bcs.n	80405a0 <__udivmoddi4+0x2b0>
 8040572:	428b      	cmp	r3, r1
 8040574:	d914      	bls.n	80405a0 <__udivmoddi4+0x2b0>
 8040576:	3e02      	subs	r6, #2
 8040578:	4461      	add	r1, ip
 804057a:	1ac9      	subs	r1, r1, r3
 804057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040580:	e738      	b.n	80403f4 <__udivmoddi4+0x104>
 8040582:	462e      	mov	r6, r5
 8040584:	4628      	mov	r0, r5
 8040586:	e705      	b.n	8040394 <__udivmoddi4+0xa4>
 8040588:	4606      	mov	r6, r0
 804058a:	e6e3      	b.n	8040354 <__udivmoddi4+0x64>
 804058c:	4618      	mov	r0, r3
 804058e:	e6f8      	b.n	8040382 <__udivmoddi4+0x92>
 8040590:	454b      	cmp	r3, r9
 8040592:	d2a9      	bcs.n	80404e8 <__udivmoddi4+0x1f8>
 8040594:	ebb9 0802 	subs.w	r8, r9, r2
 8040598:	eb64 0e0c 	sbc.w	lr, r4, ip
 804059c:	3801      	subs	r0, #1
 804059e:	e7a3      	b.n	80404e8 <__udivmoddi4+0x1f8>
 80405a0:	4646      	mov	r6, r8
 80405a2:	e7ea      	b.n	804057a <__udivmoddi4+0x28a>
 80405a4:	4620      	mov	r0, r4
 80405a6:	e794      	b.n	80404d2 <__udivmoddi4+0x1e2>
 80405a8:	4640      	mov	r0, r8
 80405aa:	e7d1      	b.n	8040550 <__udivmoddi4+0x260>
 80405ac:	46d0      	mov	r8, sl
 80405ae:	e77b      	b.n	80404a8 <__udivmoddi4+0x1b8>
 80405b0:	3b02      	subs	r3, #2
 80405b2:	4461      	add	r1, ip
 80405b4:	e732      	b.n	804041c <__udivmoddi4+0x12c>
 80405b6:	4630      	mov	r0, r6
 80405b8:	e709      	b.n	80403ce <__udivmoddi4+0xde>
 80405ba:	4464      	add	r4, ip
 80405bc:	3802      	subs	r0, #2
 80405be:	e742      	b.n	8040446 <__udivmoddi4+0x156>

080405c0 <__aeabi_idiv0>:
 80405c0:	4770      	bx	lr
 80405c2:	bf00      	nop

080405c4 <_Z6vprintPKcSt9__va_list>:

static uint8_t str1_;
static uint8_t str3_;

void vprint(const char *fmt, va_list argp)
{
 80405c4:	b580      	push	{r7, lr}
 80405c6:	b0b4      	sub	sp, #208	; 0xd0
 80405c8:	af00      	add	r7, sp, #0
 80405ca:	6078      	str	r0, [r7, #4]
 80405cc:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80405ce:	f107 0308 	add.w	r3, r7, #8
 80405d2:	683a      	ldr	r2, [r7, #0]
 80405d4:	6879      	ldr	r1, [r7, #4]
 80405d6:	4618      	mov	r0, r3
 80405d8:	f018 febc 	bl	8059354 <vsiprintf>
 80405dc:	4603      	mov	r3, r0
 80405de:	2b00      	cmp	r3, #0
 80405e0:	bfcc      	ite	gt
 80405e2:	2301      	movgt	r3, #1
 80405e4:	2300      	movle	r3, #0
 80405e6:	b2db      	uxtb	r3, r3
 80405e8:	2b00      	cmp	r3, #0
 80405ea:	d00c      	beq.n	8040606 <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	  HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 80405ec:	f107 0308 	add.w	r3, r7, #8
 80405f0:	4618      	mov	r0, r3
 80405f2:	f7ff fe0d 	bl	8040210 <strlen>
 80405f6:	4603      	mov	r3, r0
 80405f8:	b29a      	uxth	r2, r3
 80405fa:	f107 0108 	add.w	r1, r7, #8
 80405fe:	230a      	movs	r3, #10
 8040600:	4803      	ldr	r0, [pc, #12]	; (8040610 <_Z6vprintPKcSt9__va_list+0x4c>)
 8040602:	f005 fd4f 	bl	80460a4 <HAL_UART_Transmit>
    	//HAL_UART_Transmit(&huart3, (uint8_t*)string, strlen(string), 10); // send message via UART
    }
}
 8040606:	bf00      	nop
 8040608:	37d0      	adds	r7, #208	; 0xd0
 804060a:	46bd      	mov	sp, r7
 804060c:	bd80      	pop	{r7, pc}
 804060e:	bf00      	nop
 8040610:	20000554 	.word	0x20000554

08040614 <_Z7DprintfPKcz>:

void Dprintf(const char *fmt, ...) // custom printf() function
{
 8040614:	b40f      	push	{r0, r1, r2, r3}
 8040616:	b580      	push	{r7, lr}
 8040618:	b082      	sub	sp, #8
 804061a:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 804061c:	f107 0314 	add.w	r3, r7, #20
 8040620:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8040622:	6879      	ldr	r1, [r7, #4]
 8040624:	6938      	ldr	r0, [r7, #16]
 8040626:	f7ff ffcd 	bl	80405c4 <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 804062a:	bf00      	nop
 804062c:	3708      	adds	r7, #8
 804062e:	46bd      	mov	sp, r7
 8040630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8040634:	b004      	add	sp, #16
 8040636:	4770      	bx	lr

08040638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8040638:	b580      	push	{r7, lr}
 804063a:	b082      	sub	sp, #8
 804063c:	af00      	add	r7, sp, #0
 804063e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8040640:	687b      	ldr	r3, [r7, #4]
 8040642:	681b      	ldr	r3, [r3, #0]
 8040644:	4a16      	ldr	r2, [pc, #88]	; (80406a0 <HAL_UART_RxCpltCallback+0x68>)
 8040646:	4293      	cmp	r3, r2
 8040648:	d110      	bne.n	804066c <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 804064a:	2025      	movs	r0, #37	; 0x25
 804064c:	f002 fb7b 	bl	8042d46 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8040650:	2201      	movs	r2, #1
 8040652:	4914      	ldr	r1, [pc, #80]	; (80406a4 <HAL_UART_RxCpltCallback+0x6c>)
 8040654:	4814      	ldr	r0, [pc, #80]	; (80406a8 <HAL_UART_RxCpltCallback+0x70>)
 8040656:	f005 fda9 	bl	80461ac <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 804065a:	2025      	movs	r0, #37	; 0x25
 804065c:	f002 fb65 	bl	8042d2a <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8040660:	2201      	movs	r2, #1
 8040662:	4910      	ldr	r1, [pc, #64]	; (80406a4 <HAL_UART_RxCpltCallback+0x6c>)
 8040664:	4810      	ldr	r0, [pc, #64]	; (80406a8 <HAL_UART_RxCpltCallback+0x70>)
 8040666:	f005 fdff 	bl	8046268 <HAL_UART_Receive_IT>
		HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
		HAL_UART_Receive_IT(&huart3, &str3_, sizeof(str3_));

		//HAL_UART_Receive_IT(&huart3, &str3_, 1);
	}
}
 804066a:	e014      	b.n	8040696 <HAL_UART_RxCpltCallback+0x5e>
	else if(huart->Instance == USART3)
 804066c:	687b      	ldr	r3, [r7, #4]
 804066e:	681b      	ldr	r3, [r3, #0]
 8040670:	4a0e      	ldr	r2, [pc, #56]	; (80406ac <HAL_UART_RxCpltCallback+0x74>)
 8040672:	4293      	cmp	r3, r2
 8040674:	d10f      	bne.n	8040696 <HAL_UART_RxCpltCallback+0x5e>
		HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
 8040676:	2027      	movs	r0, #39	; 0x27
 8040678:	f002 fb65 	bl	8042d46 <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart3, &str3_, sizeof(str3_));
 804067c:	2201      	movs	r2, #1
 804067e:	490c      	ldr	r1, [pc, #48]	; (80406b0 <HAL_UART_RxCpltCallback+0x78>)
 8040680:	480c      	ldr	r0, [pc, #48]	; (80406b4 <HAL_UART_RxCpltCallback+0x7c>)
 8040682:	f005 fd93 	bl	80461ac <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
 8040686:	2027      	movs	r0, #39	; 0x27
 8040688:	f002 fb4f 	bl	8042d2a <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart3, &str3_, sizeof(str3_));
 804068c:	2201      	movs	r2, #1
 804068e:	4908      	ldr	r1, [pc, #32]	; (80406b0 <HAL_UART_RxCpltCallback+0x78>)
 8040690:	4808      	ldr	r0, [pc, #32]	; (80406b4 <HAL_UART_RxCpltCallback+0x7c>)
 8040692:	f005 fde9 	bl	8046268 <HAL_UART_Receive_IT>
}
 8040696:	bf00      	nop
 8040698:	3708      	adds	r7, #8
 804069a:	46bd      	mov	sp, r7
 804069c:	bd80      	pop	{r7, pc}
 804069e:	bf00      	nop
 80406a0:	40011000 	.word	0x40011000
 80406a4:	200001f4 	.word	0x200001f4
 80406a8:	20000554 	.word	0x20000554
 80406ac:	40004800 	.word	0x40004800
 80406b0:	200001f5 	.word	0x200001f5
 80406b4:	200005dc 	.word	0x200005dc

080406b8 <_Z15Debug_Uart_Initv>:




void Debug_Uart_Init()
{
 80406b8:	b580      	push	{r7, lr}
 80406ba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 80406bc:	2201      	movs	r2, #1
 80406be:	4905      	ldr	r1, [pc, #20]	; (80406d4 <_Z15Debug_Uart_Initv+0x1c>)
 80406c0:	4805      	ldr	r0, [pc, #20]	; (80406d8 <_Z15Debug_Uart_Initv+0x20>)
 80406c2:	f005 fdd1 	bl	8046268 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling
 80406c6:	2201      	movs	r2, #1
 80406c8:	4904      	ldr	r1, [pc, #16]	; (80406dc <_Z15Debug_Uart_Initv+0x24>)
 80406ca:	4805      	ldr	r0, [pc, #20]	; (80406e0 <_Z15Debug_Uart_Initv+0x28>)
 80406cc:	f005 fdcc 	bl	8046268 <HAL_UART_Receive_IT>
}
 80406d0:	bf00      	nop
 80406d2:	bd80      	pop	{r7, pc}
 80406d4:	200001f4 	.word	0x200001f4
 80406d8:	20000554 	.word	0x20000554
 80406dc:	200001f5 	.word	0x200001f5
 80406e0:	200005dc 	.word	0x200005dc

080406e4 <_Z10DebugDrivev>:
int a_= 2000;
int testpos= 100000;

//for uart1 debug
void DebugDrive()
{
 80406e4:	b580      	push	{r7, lr}
 80406e6:	b084      	sub	sp, #16
 80406e8:	af00      	add	r7, sp, #0
	int cmd = 0;
 80406ea:	2300      	movs	r3, #0
 80406ec:	60fb      	str	r3, [r7, #12]
	int cmd1 = str1_;
 80406ee:	4b20      	ldr	r3, [pc, #128]	; (8040770 <_Z10DebugDrivev+0x8c>)
 80406f0:	781b      	ldrb	r3, [r3, #0]
 80406f2:	60bb      	str	r3, [r7, #8]
	int cmd2 = str3_;
 80406f4:	4b1f      	ldr	r3, [pc, #124]	; (8040774 <_Z10DebugDrivev+0x90>)
 80406f6:	781b      	ldrb	r3, [r3, #0]
 80406f8:	607b      	str	r3, [r7, #4]
	int cmd3 = char_ethernet;
 80406fa:	4b1f      	ldr	r3, [pc, #124]	; (8040778 <_Z10DebugDrivev+0x94>)
 80406fc:	781b      	ldrb	r3, [r3, #0]
 80406fe:	603b      	str	r3, [r7, #0]

	if (cmd1 != 0) cmd = cmd1;
 8040700:	68bb      	ldr	r3, [r7, #8]
 8040702:	2b00      	cmp	r3, #0
 8040704:	d002      	beq.n	804070c <_Z10DebugDrivev+0x28>
 8040706:	68bb      	ldr	r3, [r7, #8]
 8040708:	60fb      	str	r3, [r7, #12]
 804070a:	e00a      	b.n	8040722 <_Z10DebugDrivev+0x3e>
	else if (cmd2 !=0) cmd = cmd2;
 804070c:	687b      	ldr	r3, [r7, #4]
 804070e:	2b00      	cmp	r3, #0
 8040710:	d002      	beq.n	8040718 <_Z10DebugDrivev+0x34>
 8040712:	687b      	ldr	r3, [r7, #4]
 8040714:	60fb      	str	r3, [r7, #12]
 8040716:	e004      	b.n	8040722 <_Z10DebugDrivev+0x3e>
	else if (cmd3 !=0) cmd = cmd3;
 8040718:	683b      	ldr	r3, [r7, #0]
 804071a:	2b00      	cmp	r3, #0
 804071c:	d001      	beq.n	8040722 <_Z10DebugDrivev+0x3e>
 804071e:	683b      	ldr	r3, [r7, #0]
 8040720:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8040722:	68fb      	ldr	r3, [r7, #12]
 8040724:	2b32      	cmp	r3, #50	; 0x32
 8040726:	d012      	beq.n	804074e <_Z10DebugDrivev+0x6a>
 8040728:	68fb      	ldr	r3, [r7, #12]
 804072a:	2b32      	cmp	r3, #50	; 0x32
 804072c:	dc11      	bgt.n	8040752 <_Z10DebugDrivev+0x6e>
 804072e:	68fb      	ldr	r3, [r7, #12]
 8040730:	2b30      	cmp	r3, #48	; 0x30
 8040732:	d002      	beq.n	804073a <_Z10DebugDrivev+0x56>
 8040734:	68fb      	ldr	r3, [r7, #12]
 8040736:	2b31      	cmp	r3, #49	; 0x31

			  HAL_NVIC_SystemReset();

			break;

		default: break;
 8040738:	e00b      	b.n	8040752 <_Z10DebugDrivev+0x6e>
			  Dprintf("Firmware will be rebooted in 3 senconds.\r\n");
 804073a:	4810      	ldr	r0, [pc, #64]	; (804077c <_Z10DebugDrivev+0x98>)
 804073c:	f7ff ff6a 	bl	8040614 <_Z7DprintfPKcz>
			  HAL_Delay(3000);
 8040740:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8040744:	f001 fca0 	bl	8042088 <HAL_Delay>
			  HAL_NVIC_SystemReset();
 8040748:	f002 fb0b 	bl	8042d62 <HAL_NVIC_SystemReset>
			break;
 804074c:	e002      	b.n	8040754 <_Z10DebugDrivev+0x70>
		case '2': break;
 804074e:	bf00      	nop
 8040750:	e000      	b.n	8040754 <_Z10DebugDrivev+0x70>
		default: break;
 8040752:	bf00      	nop
 8040754:	4b06      	ldr	r3, [pc, #24]	; (8040770 <_Z10DebugDrivev+0x8c>)
 8040756:	2200      	movs	r2, #0
 8040758:	701a      	strb	r2, [r3, #0]
 804075a:	4b06      	ldr	r3, [pc, #24]	; (8040774 <_Z10DebugDrivev+0x90>)
 804075c:	2200      	movs	r2, #0
 804075e:	701a      	strb	r2, [r3, #0]
 8040760:	4b05      	ldr	r3, [pc, #20]	; (8040778 <_Z10DebugDrivev+0x94>)
 8040762:	2200      	movs	r2, #0
 8040764:	701a      	strb	r2, [r3, #0]
	}
	memset(&str1_, '\0', sizeof(str1_));
	memset(&str3_, '\0', sizeof(str3_));
	memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 8040766:	bf00      	nop
 8040768:	3710      	adds	r7, #16
 804076a:	46bd      	mov	sp, r7
 804076c:	bd80      	pop	{r7, pc}
 804076e:	bf00      	nop
 8040770:	200001f4 	.word	0x200001f4
 8040774:	200001f5 	.word	0x200001f5
 8040778:	20000344 	.word	0x20000344
 804077c:	0805a184 	.word	0x0805a184

08040780 <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 8040780:	b580      	push	{r7, lr}
 8040782:	b084      	sub	sp, #16
 8040784:	af00      	add	r7, sp, #0
 8040786:	6078      	str	r0, [r7, #4]
 8040788:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 804078a:	4b24      	ldr	r3, [pc, #144]	; (804081c <_sbrk_r+0x9c>)
 804078c:	681b      	ldr	r3, [r3, #0]
 804078e:	2b00      	cmp	r3, #0
 8040790:	d10e      	bne.n	80407b0 <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 8040792:	4a23      	ldr	r2, [pc, #140]	; (8040820 <_sbrk_r+0xa0>)
 8040794:	4b23      	ldr	r3, [pc, #140]	; (8040824 <_sbrk_r+0xa4>)
 8040796:	1ad3      	subs	r3, r2, r3
 8040798:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 804079c:	4a22      	ldr	r2, [pc, #136]	; (8040828 <_sbrk_r+0xa8>)
 804079e:	6013      	str	r3, [r2, #0]
 80407a0:	4a1f      	ldr	r2, [pc, #124]	; (8040820 <_sbrk_r+0xa0>)
 80407a2:	4b20      	ldr	r3, [pc, #128]	; (8040824 <_sbrk_r+0xa4>)
 80407a4:	1ad3      	subs	r3, r2, r3
 80407a6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80407aa:	461a      	mov	r2, r3
 80407ac:	4b1b      	ldr	r3, [pc, #108]	; (804081c <_sbrk_r+0x9c>)
 80407ae:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80407b0:	f00a fa78 	bl	804aca4 <xTaskGetSchedulerState>
 80407b4:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 80407b6:	2b01      	cmp	r3, #1
 80407b8:	d101      	bne.n	80407be <_sbrk_r+0x3e>
 80407ba:	466b      	mov	r3, sp
 80407bc:	e000      	b.n	80407c0 <_sbrk_r+0x40>
 80407be:	4b1b      	ldr	r3, [pc, #108]	; (804082c <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 80407c0:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 80407c2:	f009 fe95 	bl	804a4f0 <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 80407c6:	4b1a      	ldr	r3, [pc, #104]	; (8040830 <_sbrk_r+0xb0>)
 80407c8:	681b      	ldr	r3, [r3, #0]
 80407ca:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 80407cc:	4b18      	ldr	r3, [pc, #96]	; (8040830 <_sbrk_r+0xb0>)
 80407ce:	681a      	ldr	r2, [r3, #0]
 80407d0:	683b      	ldr	r3, [r7, #0]
 80407d2:	4413      	add	r3, r2
 80407d4:	68fa      	ldr	r2, [r7, #12]
 80407d6:	429a      	cmp	r2, r3
 80407d8:	d207      	bcs.n	80407ea <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 80407da:	687b      	ldr	r3, [r7, #4]
 80407dc:	220c      	movs	r2, #12
 80407de:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 80407e0:	f009 fe94 	bl	804a50c <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 80407e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80407e8:	e014      	b.n	8040814 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 80407ea:	4b11      	ldr	r3, [pc, #68]	; (8040830 <_sbrk_r+0xb0>)
 80407ec:	681a      	ldr	r2, [r3, #0]
 80407ee:	683b      	ldr	r3, [r7, #0]
 80407f0:	4413      	add	r3, r2
 80407f2:	4a0f      	ldr	r2, [pc, #60]	; (8040830 <_sbrk_r+0xb0>)
 80407f4:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 80407f6:	4b0c      	ldr	r3, [pc, #48]	; (8040828 <_sbrk_r+0xa8>)
 80407f8:	681a      	ldr	r2, [r3, #0]
 80407fa:	683b      	ldr	r3, [r7, #0]
 80407fc:	1ad3      	subs	r3, r2, r3
 80407fe:	4a0a      	ldr	r2, [pc, #40]	; (8040828 <_sbrk_r+0xa8>)
 8040800:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 8040802:	4b0c      	ldr	r3, [pc, #48]	; (8040834 <_sbrk_r+0xb4>)
 8040804:	681a      	ldr	r2, [r3, #0]
 8040806:	683b      	ldr	r3, [r7, #0]
 8040808:	4413      	add	r3, r2
 804080a:	4a0a      	ldr	r2, [pc, #40]	; (8040834 <_sbrk_r+0xb4>)
 804080c:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 804080e:	f009 fe7d 	bl	804a50c <xTaskResumeAll>
    return (char *) previousHeapEnd;
 8040812:	68bb      	ldr	r3, [r7, #8]
}
 8040814:	4618      	mov	r0, r3
 8040816:	3710      	adds	r7, #16
 8040818:	46bd      	mov	sp, r7
 804081a:	bd80      	pop	{r7, pc}
 804081c:	200001fc 	.word	0x200001fc
 8040820:	20050000 	.word	0x20050000
 8040824:	2000b740 	.word	0x2000b740
 8040828:	200001f8 	.word	0x200001f8
 804082c:	2004fe00 	.word	0x2004fe00
 8040830:	20000000 	.word	0x20000000
 8040834:	20000200 	.word	0x20000200

08040838 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 8040838:	b580      	push	{r7, lr}
 804083a:	b086      	sub	sp, #24
 804083c:	af00      	add	r7, sp, #0
 804083e:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8040840:	f3ef 8305 	mrs	r3, IPSR
 8040844:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 8040846:	693b      	ldr	r3, [r7, #16]
 8040848:	2b00      	cmp	r3, #0
 804084a:	d102      	bne.n	8040852 <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 804084c:	2300      	movs	r3, #0
 804084e:	60fb      	str	r3, [r7, #12]
 8040850:	e001      	b.n	8040856 <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 8040852:	2301      	movs	r3, #1
 8040854:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8040856:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 8040858:	2b00      	cmp	r3, #0
 804085a:	bf14      	ite	ne
 804085c:	2301      	movne	r3, #1
 804085e:	2300      	moveq	r3, #0
 8040860:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 8040862:	7dfb      	ldrb	r3, [r7, #23]
 8040864:	2b00      	cmp	r3, #0
 8040866:	d00c      	beq.n	8040882 <__malloc_lock+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8040868:	f04f 0350 	mov.w	r3, #80	; 0x50
 804086c:	b672      	cpsid	i
 804086e:	f383 8811 	msr	BASEPRI, r3
 8040872:	f3bf 8f6f 	isb	sy
 8040876:	f3bf 8f4f 	dsb	sy
 804087a:	b662      	cpsie	i
 804087c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 804087e:	bf00      	nop
 8040880:	e7fe      	b.n	8040880 <__malloc_lock+0x48>
    vTaskSuspendAll();
 8040882:	f009 fe35 	bl	804a4f0 <vTaskSuspendAll>
  #endif
};
 8040886:	bf00      	nop
 8040888:	3718      	adds	r7, #24
 804088a:	46bd      	mov	sp, r7
 804088c:	bd80      	pop	{r7, pc}

0804088e <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 804088e:	b580      	push	{r7, lr}
 8040890:	b082      	sub	sp, #8
 8040892:	af00      	add	r7, sp, #0
 8040894:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 8040896:	f009 fe39 	bl	804a50c <xTaskResumeAll>
  #endif
};
 804089a:	bf00      	nop
 804089c:	3708      	adds	r7, #8
 804089e:	46bd      	mov	sp, r7
 80408a0:	bd80      	pop	{r7, pc}

080408a2 <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 80408a2:	b580      	push	{r7, lr}
 80408a4:	b084      	sub	sp, #16
 80408a6:	af00      	add	r7, sp, #0
 80408a8:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 80408aa:	6878      	ldr	r0, [r7, #4]
 80408ac:	f018 fa92 	bl	8058dd4 <malloc>
 80408b0:	4603      	mov	r3, r0
 80408b2:	60fb      	str	r3, [r7, #12]
    return p;
 80408b4:	68fb      	ldr	r3, [r7, #12]
}
 80408b6:	4618      	mov	r0, r3
 80408b8:	3710      	adds	r7, #16
 80408ba:	46bd      	mov	sp, r7
 80408bc:	bd80      	pop	{r7, pc}

080408be <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 80408be:	b580      	push	{r7, lr}
 80408c0:	b082      	sub	sp, #8
 80408c2:	af00      	add	r7, sp, #0
 80408c4:	6078      	str	r0, [r7, #4]
    free(pv);
 80408c6:	6878      	ldr	r0, [r7, #4]
 80408c8:	f018 fa8c 	bl	8058de4 <free>
};
 80408cc:	bf00      	nop
 80408ce:	3708      	adds	r7, #8
 80408d0:	46bd      	mov	sp, r7
 80408d2:	bd80      	pop	{r7, pc}

080408d4 <_ZL15TCPServerThreadPv>:
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void TCPServerThread(void *arg)
{
 80408d4:	b580      	push	{r7, lr}
 80408d6:	b086      	sub	sp, #24
 80408d8:	af02      	add	r7, sp, #8
 80408da:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80408dc:	2200      	movs	r2, #0
 80408de:	2100      	movs	r1, #0
 80408e0:	2010      	movs	r0, #16
 80408e2:	f00a fe75 	bl	804b5d0 <netconn_new_with_proto_and_callback>
 80408e6:	4603      	mov	r3, r0
 80408e8:	4a4d      	ldr	r2, [pc, #308]	; (8040a20 <_ZL15TCPServerThreadPv+0x14c>)
 80408ea:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 80408ec:	4b4c      	ldr	r3, [pc, #304]	; (8040a20 <_ZL15TCPServerThreadPv+0x14c>)
 80408ee:	681b      	ldr	r3, [r3, #0]
 80408f0:	2b00      	cmp	r3, #0
 80408f2:	f000 808d 	beq.w	8040a10 <_ZL15TCPServerThreadPv+0x13c>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 80408f6:	4b4a      	ldr	r3, [pc, #296]	; (8040a20 <_ZL15TCPServerThreadPv+0x14c>)
 80408f8:	681b      	ldr	r3, [r3, #0]
 80408fa:	220a      	movs	r2, #10
 80408fc:	4949      	ldr	r1, [pc, #292]	; (8040a24 <_ZL15TCPServerThreadPv+0x150>)
 80408fe:	4618      	mov	r0, r3
 8040900:	f00a ff20 	bl	804b744 <netconn_bind>
 8040904:	4603      	mov	r3, r0
 8040906:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8040908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804090c:	2b00      	cmp	r3, #0
 804090e:	d17a      	bne.n	8040a06 <_ZL15TCPServerThreadPv+0x132>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8040910:	4b43      	ldr	r3, [pc, #268]	; (8040a20 <_ZL15TCPServerThreadPv+0x14c>)
 8040912:	681b      	ldr	r3, [r3, #0]
 8040914:	21ff      	movs	r1, #255	; 0xff
 8040916:	4618      	mov	r0, r3
 8040918:	f00a ff4c 	bl	804b7b4 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 804091c:	4b40      	ldr	r3, [pc, #256]	; (8040a20 <_ZL15TCPServerThreadPv+0x14c>)
 804091e:	681b      	ldr	r3, [r3, #0]
 8040920:	4941      	ldr	r1, [pc, #260]	; (8040a28 <_ZL15TCPServerThreadPv+0x154>)
 8040922:	4618      	mov	r0, r3
 8040924:	f00a ff72 	bl	804b80c <netconn_accept>
 8040928:	4603      	mov	r3, r0
 804092a:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 804092c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8040930:	2b00      	cmp	r3, #0
 8040932:	d164      	bne.n	80409fe <_ZL15TCPServerThreadPv+0x12a>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8040934:	4b3c      	ldr	r3, [pc, #240]	; (8040a28 <_ZL15TCPServerThreadPv+0x154>)
 8040936:	681b      	ldr	r3, [r3, #0]
 8040938:	493c      	ldr	r1, [pc, #240]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 804093a:	4618      	mov	r0, r3
 804093c:	f00b f96e 	bl	804bc1c <netconn_recv>
 8040940:	4603      	mov	r3, r0
 8040942:	2b00      	cmp	r3, #0
 8040944:	bf0c      	ite	eq
 8040946:	2301      	moveq	r3, #1
 8040948:	2300      	movne	r3, #0
 804094a:	b2db      	uxtb	r3, r3
 804094c:	2b00      	cmp	r3, #0
 804094e:	d04c      	beq.n	80409ea <_ZL15TCPServerThreadPv+0x116>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 8040950:	4b36      	ldr	r3, [pc, #216]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 8040952:	681b      	ldr	r3, [r3, #0]
 8040954:	3308      	adds	r3, #8
 8040956:	4a36      	ldr	r2, [pc, #216]	; (8040a30 <_ZL15TCPServerThreadPv+0x15c>)
 8040958:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 804095a:	4b34      	ldr	r3, [pc, #208]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 804095c:	681b      	ldr	r3, [r3, #0]
 804095e:	899a      	ldrh	r2, [r3, #12]
 8040960:	4b34      	ldr	r3, [pc, #208]	; (8040a34 <_ZL15TCPServerThreadPv+0x160>)
 8040962:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8040964:	4b31      	ldr	r3, [pc, #196]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 8040966:	681b      	ldr	r3, [r3, #0]
 8040968:	681b      	ldr	r3, [r3, #0]
 804096a:	6859      	ldr	r1, [r3, #4]
 804096c:	4b2f      	ldr	r3, [pc, #188]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 804096e:	681b      	ldr	r3, [r3, #0]
 8040970:	681b      	ldr	r3, [r3, #0]
 8040972:	895b      	ldrh	r3, [r3, #10]
 8040974:	461a      	mov	r2, r3
 8040976:	4830      	ldr	r0, [pc, #192]	; (8040a38 <_ZL15TCPServerThreadPv+0x164>)
 8040978:	f018 fcc3 	bl	8059302 <strncpy>

							//for test debug
							strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 804097c:	4b2b      	ldr	r3, [pc, #172]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 804097e:	681b      	ldr	r3, [r3, #0]
 8040980:	681b      	ldr	r3, [r3, #0]
 8040982:	6859      	ldr	r1, [r3, #4]
 8040984:	4b29      	ldr	r3, [pc, #164]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 8040986:	681b      	ldr	r3, [r3, #0]
 8040988:	681b      	ldr	r3, [r3, #0]
 804098a:	895b      	ldrh	r3, [r3, #10]
 804098c:	461a      	mov	r2, r3
 804098e:	482b      	ldr	r0, [pc, #172]	; (8040a3c <_ZL15TCPServerThreadPv+0x168>)
 8040990:	f018 fcb7 	bl	8059302 <strncpy>
							TcpServerParsingSeq();

							*/
							// Or modify the message received, so that we can send it back to the client
							//response
							int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8040994:	4a28      	ldr	r2, [pc, #160]	; (8040a38 <_ZL15TCPServerThreadPv+0x164>)
 8040996:	492a      	ldr	r1, [pc, #168]	; (8040a40 <_ZL15TCPServerThreadPv+0x16c>)
 8040998:	482a      	ldr	r0, [pc, #168]	; (8040a44 <_ZL15TCPServerThreadPv+0x170>)
 804099a:	f018 fc4f 	bl	805923c <siprintf>
 804099e:	60b8      	str	r0, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 80409a0:	4b21      	ldr	r3, [pc, #132]	; (8040a28 <_ZL15TCPServerThreadPv+0x154>)
 80409a2:	6818      	ldr	r0, [r3, #0]
 80409a4:	68ba      	ldr	r2, [r7, #8]
 80409a6:	2300      	movs	r3, #0
 80409a8:	9300      	str	r3, [sp, #0]
 80409aa:	2301      	movs	r3, #1
 80409ac:	4925      	ldr	r1, [pc, #148]	; (8040a44 <_ZL15TCPServerThreadPv+0x170>)
 80409ae:	f00b f9af 	bl	804bd10 <netconn_write_partly>

							memset (msg, '\0', sizeof(msg));  // clear the buffer
 80409b2:	2264      	movs	r2, #100	; 0x64
 80409b4:	2100      	movs	r1, #0
 80409b6:	4820      	ldr	r0, [pc, #128]	; (8040a38 <_ZL15TCPServerThreadPv+0x164>)
 80409b8:	f018 fa54 	bl	8058e64 <memset>
						}
						while (netbuf_next(buf) >0);
 80409bc:	4b1b      	ldr	r3, [pc, #108]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 80409be:	681b      	ldr	r3, [r3, #0]
 80409c0:	4618      	mov	r0, r3
 80409c2:	f00c fec5 	bl	804d750 <netbuf_next>
 80409c6:	4603      	mov	r3, r0
 80409c8:	2b00      	cmp	r3, #0
 80409ca:	bfcc      	ite	gt
 80409cc:	2301      	movgt	r3, #1
 80409ce:	2300      	movle	r3, #0
 80409d0:	b2db      	uxtb	r3, r3
 80409d2:	2b00      	cmp	r3, #0
 80409d4:	d000      	beq.n	80409d8 <_ZL15TCPServerThreadPv+0x104>
						do
 80409d6:	e7c5      	b.n	8040964 <_ZL15TCPServerThreadPv+0x90>

						netbuf_delete(buf);
 80409d8:	4b14      	ldr	r3, [pc, #80]	; (8040a2c <_ZL15TCPServerThreadPv+0x158>)
 80409da:	681b      	ldr	r3, [r3, #0]
 80409dc:	4618      	mov	r0, r3
 80409de:	f00c fe97 	bl	804d710 <netbuf_delete>

						osDelay(1);
 80409e2:	2001      	movs	r0, #1
 80409e4:	f007 fed6 	bl	8048794 <osDelay>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 80409e8:	e7a4      	b.n	8040934 <_ZL15TCPServerThreadPv+0x60>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80409ea:	4b0f      	ldr	r3, [pc, #60]	; (8040a28 <_ZL15TCPServerThreadPv+0x154>)
 80409ec:	681b      	ldr	r3, [r3, #0]
 80409ee:	4618      	mov	r0, r3
 80409f0:	f00b fa90 	bl	804bf14 <netconn_close>
					netconn_delete(newconn);
 80409f4:	4b0c      	ldr	r3, [pc, #48]	; (8040a28 <_ZL15TCPServerThreadPv+0x154>)
 80409f6:	681b      	ldr	r3, [r3, #0]
 80409f8:	4618      	mov	r0, r3
 80409fa:	f00a fe87 	bl	804b70c <netconn_delete>
				}
				osDelay(1);
 80409fe:	2001      	movs	r0, #1
 8040a00:	f007 fec8 	bl	8048794 <osDelay>
			}
 8040a04:	e78a      	b.n	804091c <_ZL15TCPServerThreadPv+0x48>
		}
		else
		{
			netconn_delete(conn);
 8040a06:	4b06      	ldr	r3, [pc, #24]	; (8040a20 <_ZL15TCPServerThreadPv+0x14c>)
 8040a08:	681b      	ldr	r3, [r3, #0]
 8040a0a:	4618      	mov	r0, r3
 8040a0c:	f00a fe7e 	bl	804b70c <netconn_delete>
		}
	}


	vTaskDelete(NULL);
 8040a10:	2000      	movs	r0, #0
 8040a12:	f009 fbb3 	bl	804a17c <vTaskDelete>
}
 8040a16:	bf00      	nop
 8040a18:	3710      	adds	r7, #16
 8040a1a:	46bd      	mov	sp, r7
 8040a1c:	bd80      	pop	{r7, pc}
 8040a1e:	bf00      	nop
 8040a20:	20000204 	.word	0x20000204
 8040a24:	0805d928 	.word	0x0805d928
 8040a28:	20000208 	.word	0x20000208
 8040a2c:	2000020c 	.word	0x2000020c
 8040a30:	2000033c 	.word	0x2000033c
 8040a34:	20000340 	.word	0x20000340
 8040a38:	20000210 	.word	0x20000210
 8040a3c:	20000344 	.word	0x20000344
 8040a40:	0805a1b0 	.word	0x0805a1b0
 8040a44:	20000274 	.word	0x20000274

08040a48 <_Z13TcpServerInitv>:



void TcpServerInit(void)
{
 8040a48:	b580      	push	{r7, lr}
 8040a4a:	b082      	sub	sp, #8
 8040a4c:	af02      	add	r7, sp, #8
  sys_thread_new("TCPServerThread", TCPServerThread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8040a4e:	2300      	movs	r3, #0
 8040a50:	9300      	str	r3, [sp, #0]
 8040a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8040a56:	2200      	movs	r2, #0
 8040a58:	4903      	ldr	r1, [pc, #12]	; (8040a68 <_Z13TcpServerInitv+0x20>)
 8040a5a:	4804      	ldr	r0, [pc, #16]	; (8040a6c <_Z13TcpServerInitv+0x24>)
 8040a5c:	f018 f850 	bl	8058b00 <sys_thread_new>
}
 8040a60:	bf00      	nop
 8040a62:	46bd      	mov	sp, r7
 8040a64:	bd80      	pop	{r7, pc}
 8040a66:	bf00      	nop
 8040a68:	080408d5 	.word	0x080408d5
 8040a6c:	0805a1d0 	.word	0x0805a1d0

08040a70 <init_stm32f746>:




void init_stm32f746()
{
 8040a70:	b580      	push	{r7, lr}
 8040a72:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8040a74:	f000 faaa 	bl	8040fcc <MX_GPIO_Init>
	MX_CAN1_Init();
 8040a78:	f000 f88c 	bl	8040b94 <MX_CAN1_Init>
	MX_FMC_Init();
 8040a7c:	f000 fa3e 	bl	8040efc <MX_FMC_Init>
	MX_UART4_Init();
 8040a80:	f000 f934 	bl	8040cec <MX_UART4_Init>
	MX_USART1_UART_Init();
 8040a84:	f000 f99c 	bl	8040dc0 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8040a88:	f000 f9ce 	bl	8040e28 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8040a8c:	f000 fa00 	bl	8040e90 <MX_USART6_UART_Init>
	MX_UART5_Init();
 8040a90:	f000 f960 	bl	8040d54 <MX_UART5_Init>
	MX_TIM7_Init();
 8040a94:	f000 f8ea 	bl	8040c6c <MX_TIM7_Init>
}
 8040a98:	bf00      	nop
 8040a9a:	bd80      	pop	{r7, pc}

08040a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040a9c:	b580      	push	{r7, lr}
 8040a9e:	b094      	sub	sp, #80	; 0x50
 8040aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040aa2:	f107 0320 	add.w	r3, r7, #32
 8040aa6:	2230      	movs	r2, #48	; 0x30
 8040aa8:	2100      	movs	r1, #0
 8040aaa:	4618      	mov	r0, r3
 8040aac:	f018 f9da 	bl	8058e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040ab0:	f107 030c 	add.w	r3, r7, #12
 8040ab4:	2200      	movs	r2, #0
 8040ab6:	601a      	str	r2, [r3, #0]
 8040ab8:	605a      	str	r2, [r3, #4]
 8040aba:	609a      	str	r2, [r3, #8]
 8040abc:	60da      	str	r2, [r3, #12]
 8040abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040ac0:	4b32      	ldr	r3, [pc, #200]	; (8040b8c <SystemClock_Config+0xf0>)
 8040ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040ac4:	4a31      	ldr	r2, [pc, #196]	; (8040b8c <SystemClock_Config+0xf0>)
 8040ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040aca:	6413      	str	r3, [r2, #64]	; 0x40
 8040acc:	4b2f      	ldr	r3, [pc, #188]	; (8040b8c <SystemClock_Config+0xf0>)
 8040ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040ad4:	60bb      	str	r3, [r7, #8]
 8040ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8040ad8:	4b2d      	ldr	r3, [pc, #180]	; (8040b90 <SystemClock_Config+0xf4>)
 8040ada:	681b      	ldr	r3, [r3, #0]
 8040adc:	4a2c      	ldr	r2, [pc, #176]	; (8040b90 <SystemClock_Config+0xf4>)
 8040ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8040ae2:	6013      	str	r3, [r2, #0]
 8040ae4:	4b2a      	ldr	r3, [pc, #168]	; (8040b90 <SystemClock_Config+0xf4>)
 8040ae6:	681b      	ldr	r3, [r3, #0]
 8040ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040aec:	607b      	str	r3, [r7, #4]
 8040aee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8040af0:	2301      	movs	r3, #1
 8040af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8040af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040af8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040afa:	2302      	movs	r3, #2
 8040afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8040afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8040b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8040b04:	2319      	movs	r3, #25
 8040b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8040b08:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8040b0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8040b0e:	2302      	movs	r3, #2
 8040b10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8040b12:	2302      	movs	r3, #2
 8040b14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040b16:	f107 0320 	add.w	r3, r7, #32
 8040b1a:	4618      	mov	r0, r3
 8040b1c:	f003 fe1c 	bl	8044758 <HAL_RCC_OscConfig>
 8040b20:	4603      	mov	r3, r0
 8040b22:	2b00      	cmp	r3, #0
 8040b24:	bf14      	ite	ne
 8040b26:	2301      	movne	r3, #1
 8040b28:	2300      	moveq	r3, #0
 8040b2a:	b2db      	uxtb	r3, r3
 8040b2c:	2b00      	cmp	r3, #0
 8040b2e:	d001      	beq.n	8040b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8040b30:	f000 fb4c 	bl	80411cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8040b34:	f003 fdc0 	bl	80446b8 <HAL_PWREx_EnableOverDrive>
 8040b38:	4603      	mov	r3, r0
 8040b3a:	2b00      	cmp	r3, #0
 8040b3c:	bf14      	ite	ne
 8040b3e:	2301      	movne	r3, #1
 8040b40:	2300      	moveq	r3, #0
 8040b42:	b2db      	uxtb	r3, r3
 8040b44:	2b00      	cmp	r3, #0
 8040b46:	d001      	beq.n	8040b4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8040b48:	f000 fb40 	bl	80411cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040b4c:	230f      	movs	r3, #15
 8040b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040b50:	2302      	movs	r3, #2
 8040b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040b54:	2300      	movs	r3, #0
 8040b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8040b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8040b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8040b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040b62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8040b64:	f107 030c 	add.w	r3, r7, #12
 8040b68:	2107      	movs	r1, #7
 8040b6a:	4618      	mov	r0, r3
 8040b6c:	f004 f898 	bl	8044ca0 <HAL_RCC_ClockConfig>
 8040b70:	4603      	mov	r3, r0
 8040b72:	2b00      	cmp	r3, #0
 8040b74:	bf14      	ite	ne
 8040b76:	2301      	movne	r3, #1
 8040b78:	2300      	moveq	r3, #0
 8040b7a:	b2db      	uxtb	r3, r3
 8040b7c:	2b00      	cmp	r3, #0
 8040b7e:	d001      	beq.n	8040b84 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8040b80:	f000 fb24 	bl	80411cc <Error_Handler>
  }
}
 8040b84:	bf00      	nop
 8040b86:	3750      	adds	r7, #80	; 0x50
 8040b88:	46bd      	mov	sp, r7
 8040b8a:	bd80      	pop	{r7, pc}
 8040b8c:	40023800 	.word	0x40023800
 8040b90:	40007000 	.word	0x40007000

08040b94 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void){
 8040b94:	b580      	push	{r7, lr}
 8040b96:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8040b98:	4b31      	ldr	r3, [pc, #196]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040b9a:	4a32      	ldr	r2, [pc, #200]	; (8040c64 <MX_CAN1_Init+0xd0>)
 8040b9c:	601a      	str	r2, [r3, #0]

  //125 ~ 500khz
  //hcan1.Init.Prescaler = 3;//1000khz -> 3, 15, 2
  //hcan1.Init.Prescaler = 6;//500khz -> 6, 15, 2
  hcan1.Init.Prescaler = 12;//250khz -> 12, 15, 2
 8040b9e:	4b30      	ldr	r3, [pc, #192]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040ba0:	220c      	movs	r2, #12
 8040ba2:	605a      	str	r2, [r3, #4]
  //hcan1.Init.Prescaler = 27;//125khz -> 27,16,13
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8040ba4:	4b2e      	ldr	r3, [pc, #184]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040ba6:	2200      	movs	r2, #0
 8040ba8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8040baa:	4b2d      	ldr	r3, [pc, #180]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bac:	2200      	movs	r2, #0
 8040bae:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8040bb0:	4b2b      	ldr	r3, [pc, #172]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bb2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8040bb6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8040bb8:	4b29      	ldr	r3, [pc, #164]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8040bbe:	615a      	str	r2, [r3, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
*/

  hcan1.Init.TimeTriggeredMode = DISABLE;
 8040bc0:	4b27      	ldr	r3, [pc, #156]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bc2:	2200      	movs	r2, #0
 8040bc4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8040bc6:	4b26      	ldr	r3, [pc, #152]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bc8:	2200      	movs	r2, #0
 8040bca:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8040bcc:	4b24      	ldr	r3, [pc, #144]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bce:	2200      	movs	r2, #0
 8040bd0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8040bd2:	4b23      	ldr	r3, [pc, #140]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bd4:	2200      	movs	r2, #0
 8040bd6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8040bd8:	4b21      	ldr	r3, [pc, #132]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040bda:	2200      	movs	r2, #0
 8040bdc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8040bde:	4b20      	ldr	r3, [pc, #128]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040be0:	2200      	movs	r2, #0
 8040be2:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 8040be4:	481e      	ldr	r0, [pc, #120]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040be6:	f001 fa73 	bl	80420d0 <HAL_CAN_Init>
 8040bea:	4603      	mov	r3, r0
 8040bec:	2b00      	cmp	r3, #0
 8040bee:	bf14      	ite	ne
 8040bf0:	2301      	movne	r3, #1
 8040bf2:	2300      	moveq	r3, #0
 8040bf4:	b2db      	uxtb	r3, r3
 8040bf6:	2b00      	cmp	r3, #0
 8040bf8:	d001      	beq.n	8040bfe <MX_CAN1_Init+0x6a>
    Error_Handler();
 8040bfa:	f000 fae7 	bl	80411cc <Error_Handler>
  }


  sFilterConfig.FilterBank = 0;
 8040bfe:	4b1a      	ldr	r3, [pc, #104]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c00:	2200      	movs	r2, #0
 8040c02:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8040c04:	4b18      	ldr	r3, [pc, #96]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c06:	2200      	movs	r2, #0
 8040c08:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8040c0a:	4b17      	ldr	r3, [pc, #92]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c0c:	2201      	movs	r2, #1
 8040c0e:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x1fff;
 8040c10:	4b15      	ldr	r3, [pc, #84]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c12:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8040c16:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0xffff;
 8040c18:	4b13      	ldr	r3, [pc, #76]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040c1e:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;             //maximum range of accepting id
 8040c20:	4b11      	ldr	r3, [pc, #68]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c22:	2200      	movs	r2, #0
 8040c24:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;				//minimum range of accepting id
 8040c26:	4b10      	ldr	r3, [pc, #64]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c28:	2200      	movs	r2, #0
 8040c2a:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8040c2c:	4b0e      	ldr	r3, [pc, #56]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c2e:	2200      	movs	r2, #0
 8040c30:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8040c32:	4b0d      	ldr	r3, [pc, #52]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c34:	2201      	movs	r2, #1
 8040c36:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;   //14
 8040c38:	4b0b      	ldr	r3, [pc, #44]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c3a:	220e      	movs	r2, #14
 8040c3c:	625a      	str	r2, [r3, #36]	; 0x24


  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8040c3e:	490a      	ldr	r1, [pc, #40]	; (8040c68 <MX_CAN1_Init+0xd4>)
 8040c40:	4807      	ldr	r0, [pc, #28]	; (8040c60 <MX_CAN1_Init+0xcc>)
 8040c42:	f001 fb41 	bl	80422c8 <HAL_CAN_ConfigFilter>
 8040c46:	4603      	mov	r3, r0
 8040c48:	2b00      	cmp	r3, #0
 8040c4a:	bf14      	ite	ne
 8040c4c:	2301      	movne	r3, #1
 8040c4e:	2300      	moveq	r3, #0
 8040c50:	b2db      	uxtb	r3, r3
 8040c52:	2b00      	cmp	r3, #0
 8040c54:	d001      	beq.n	8040c5a <MX_CAN1_Init+0xc6>
  {
    /*Filter configuration Error*/
    Error_Handler();
 8040c56:	f000 fab9 	bl	80411cc <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8040c5a:	bf00      	nop
 8040c5c:	bd80      	pop	{r7, pc}
 8040c5e:	bf00      	nop
 8040c60:	200003a8 	.word	0x200003a8
 8040c64:	40006400 	.word	0x40006400
 8040c68:	200003d0 	.word	0x200003d0

08040c6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 8040c6c:	b580      	push	{r7, lr}
 8040c6e:	b084      	sub	sp, #16
 8040c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040c72:	1d3b      	adds	r3, r7, #4
 8040c74:	2200      	movs	r2, #0
 8040c76:	601a      	str	r2, [r3, #0]
 8040c78:	605a      	str	r2, [r3, #4]
 8040c7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8040c7c:	4b19      	ldr	r3, [pc, #100]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040c7e:	4a1a      	ldr	r2, [pc, #104]	; (8040ce8 <MX_TIM7_Init+0x7c>)
 8040c80:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8040c82:	4b18      	ldr	r3, [pc, #96]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040c84:	226b      	movs	r2, #107	; 0x6b
 8040c86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040c88:	4b16      	ldr	r3, [pc, #88]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040c8a:	2200      	movs	r2, #0
 8040c8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8040c8e:	4b15      	ldr	r3, [pc, #84]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040c90:	2263      	movs	r2, #99	; 0x63
 8040c92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8040c94:	4b13      	ldr	r3, [pc, #76]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040c96:	2280      	movs	r2, #128	; 0x80
 8040c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8040c9a:	4812      	ldr	r0, [pc, #72]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040c9c:	f004 fe50 	bl	8045940 <HAL_TIM_Base_Init>
 8040ca0:	4603      	mov	r3, r0
 8040ca2:	2b00      	cmp	r3, #0
 8040ca4:	bf14      	ite	ne
 8040ca6:	2301      	movne	r3, #1
 8040ca8:	2300      	moveq	r3, #0
 8040caa:	b2db      	uxtb	r3, r3
 8040cac:	2b00      	cmp	r3, #0
 8040cae:	d001      	beq.n	8040cb4 <MX_TIM7_Init+0x48>
  {
    Error_Handler();
 8040cb0:	f000 fa8c 	bl	80411cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040cb4:	2300      	movs	r3, #0
 8040cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040cb8:	2300      	movs	r3, #0
 8040cba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8040cbc:	1d3b      	adds	r3, r7, #4
 8040cbe:	4619      	mov	r1, r3
 8040cc0:	4808      	ldr	r0, [pc, #32]	; (8040ce4 <MX_TIM7_Init+0x78>)
 8040cc2:	f005 f8f5 	bl	8045eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8040cc6:	4603      	mov	r3, r0
 8040cc8:	2b00      	cmp	r3, #0
 8040cca:	bf14      	ite	ne
 8040ccc:	2301      	movne	r3, #1
 8040cce:	2300      	moveq	r3, #0
 8040cd0:	b2db      	uxtb	r3, r3
 8040cd2:	2b00      	cmp	r3, #0
 8040cd4:	d001      	beq.n	8040cda <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 8040cd6:	f000 fa79 	bl	80411cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8040cda:	bf00      	nop
 8040cdc:	3710      	adds	r7, #16
 8040cde:	46bd      	mov	sp, r7
 8040ce0:	bd80      	pop	{r7, pc}
 8040ce2:	bf00      	nop
 8040ce4:	200003f8 	.word	0x200003f8
 8040ce8:	40001400 	.word	0x40001400

08040cec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 8040cec:	b580      	push	{r7, lr}
 8040cee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8040cf0:	4b16      	ldr	r3, [pc, #88]	; (8040d4c <MX_UART4_Init+0x60>)
 8040cf2:	4a17      	ldr	r2, [pc, #92]	; (8040d50 <MX_UART4_Init+0x64>)
 8040cf4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8040cf6:	4b15      	ldr	r3, [pc, #84]	; (8040d4c <MX_UART4_Init+0x60>)
 8040cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040cfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8040cfe:	4b13      	ldr	r3, [pc, #76]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d00:	2200      	movs	r2, #0
 8040d02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8040d04:	4b11      	ldr	r3, [pc, #68]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d06:	2200      	movs	r2, #0
 8040d08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8040d0a:	4b10      	ldr	r3, [pc, #64]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d0c:	2200      	movs	r2, #0
 8040d0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8040d10:	4b0e      	ldr	r3, [pc, #56]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d12:	220c      	movs	r2, #12
 8040d14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040d16:	4b0d      	ldr	r3, [pc, #52]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d18:	2200      	movs	r2, #0
 8040d1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8040d1c:	4b0b      	ldr	r3, [pc, #44]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d1e:	2200      	movs	r2, #0
 8040d20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040d22:	4b0a      	ldr	r3, [pc, #40]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d24:	2200      	movs	r2, #0
 8040d26:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040d28:	4b08      	ldr	r3, [pc, #32]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d2a:	2200      	movs	r2, #0
 8040d2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8040d2e:	4807      	ldr	r0, [pc, #28]	; (8040d4c <MX_UART4_Init+0x60>)
 8040d30:	f005 f96a 	bl	8046008 <HAL_UART_Init>
 8040d34:	4603      	mov	r3, r0
 8040d36:	2b00      	cmp	r3, #0
 8040d38:	bf14      	ite	ne
 8040d3a:	2301      	movne	r3, #1
 8040d3c:	2300      	moveq	r3, #0
 8040d3e:	b2db      	uxtb	r3, r3
 8040d40:	2b00      	cmp	r3, #0
 8040d42:	d001      	beq.n	8040d48 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8040d44:	f000 fa42 	bl	80411cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8040d48:	bf00      	nop
 8040d4a:	bd80      	pop	{r7, pc}
 8040d4c:	20000444 	.word	0x20000444
 8040d50:	40004c00 	.word	0x40004c00

08040d54 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 8040d54:	b580      	push	{r7, lr}
 8040d56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8040d58:	4b17      	ldr	r3, [pc, #92]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d5a:	4a18      	ldr	r2, [pc, #96]	; (8040dbc <MX_UART5_Init+0x68>)
 8040d5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8040d5e:	4b16      	ldr	r3, [pc, #88]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040d64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8040d66:	4b14      	ldr	r3, [pc, #80]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8040d6c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8040d6e:	4b12      	ldr	r3, [pc, #72]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d70:	2200      	movs	r2, #0
 8040d72:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8040d74:	4b10      	ldr	r3, [pc, #64]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8040d7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8040d7c:	4b0e      	ldr	r3, [pc, #56]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d7e:	220c      	movs	r2, #12
 8040d80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040d82:	4b0d      	ldr	r3, [pc, #52]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d84:	2200      	movs	r2, #0
 8040d86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8040d88:	4b0b      	ldr	r3, [pc, #44]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d8a:	2200      	movs	r2, #0
 8040d8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040d8e:	4b0a      	ldr	r3, [pc, #40]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d90:	2200      	movs	r2, #0
 8040d92:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040d94:	4b08      	ldr	r3, [pc, #32]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d96:	2200      	movs	r2, #0
 8040d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8040d9a:	4807      	ldr	r0, [pc, #28]	; (8040db8 <MX_UART5_Init+0x64>)
 8040d9c:	f005 f934 	bl	8046008 <HAL_UART_Init>
 8040da0:	4603      	mov	r3, r0
 8040da2:	2b00      	cmp	r3, #0
 8040da4:	bf14      	ite	ne
 8040da6:	2301      	movne	r3, #1
 8040da8:	2300      	moveq	r3, #0
 8040daa:	b2db      	uxtb	r3, r3
 8040dac:	2b00      	cmp	r3, #0
 8040dae:	d001      	beq.n	8040db4 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 8040db0:	f000 fa0c 	bl	80411cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8040db4:	bf00      	nop
 8040db6:	bd80      	pop	{r7, pc}
 8040db8:	200004cc 	.word	0x200004cc
 8040dbc:	40005000 	.word	0x40005000

08040dc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8040dc0:	b580      	push	{r7, lr}
 8040dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040dc4:	4b16      	ldr	r3, [pc, #88]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040dc6:	4a17      	ldr	r2, [pc, #92]	; (8040e24 <MX_USART1_UART_Init+0x64>)
 8040dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040dca:	4b15      	ldr	r3, [pc, #84]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040dd2:	4b13      	ldr	r3, [pc, #76]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040dd4:	2200      	movs	r2, #0
 8040dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040dd8:	4b11      	ldr	r3, [pc, #68]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040dda:	2200      	movs	r2, #0
 8040ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040dde:	4b10      	ldr	r3, [pc, #64]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040de0:	2200      	movs	r2, #0
 8040de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040de4:	4b0e      	ldr	r3, [pc, #56]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040de6:	220c      	movs	r2, #12
 8040de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040dea:	4b0d      	ldr	r3, [pc, #52]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040dec:	2200      	movs	r2, #0
 8040dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040df0:	4b0b      	ldr	r3, [pc, #44]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040df2:	2200      	movs	r2, #0
 8040df4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040df6:	4b0a      	ldr	r3, [pc, #40]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040df8:	2200      	movs	r2, #0
 8040dfa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040dfc:	4b08      	ldr	r3, [pc, #32]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040dfe:	2200      	movs	r2, #0
 8040e00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040e02:	4807      	ldr	r0, [pc, #28]	; (8040e20 <MX_USART1_UART_Init+0x60>)
 8040e04:	f005 f900 	bl	8046008 <HAL_UART_Init>
 8040e08:	4603      	mov	r3, r0
 8040e0a:	2b00      	cmp	r3, #0
 8040e0c:	bf14      	ite	ne
 8040e0e:	2301      	movne	r3, #1
 8040e10:	2300      	moveq	r3, #0
 8040e12:	b2db      	uxtb	r3, r3
 8040e14:	2b00      	cmp	r3, #0
 8040e16:	d001      	beq.n	8040e1c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8040e18:	f000 f9d8 	bl	80411cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040e1c:	bf00      	nop
 8040e1e:	bd80      	pop	{r7, pc}
 8040e20:	20000554 	.word	0x20000554
 8040e24:	40011000 	.word	0x40011000

08040e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8040e28:	b580      	push	{r7, lr}
 8040e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040e2c:	4b16      	ldr	r3, [pc, #88]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e2e:	4a17      	ldr	r2, [pc, #92]	; (8040e8c <MX_USART3_UART_Init+0x64>)
 8040e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040e32:	4b15      	ldr	r3, [pc, #84]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8040e3a:	4b13      	ldr	r3, [pc, #76]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e3c:	2200      	movs	r2, #0
 8040e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040e40:	4b11      	ldr	r3, [pc, #68]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e42:	2200      	movs	r2, #0
 8040e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8040e46:	4b10      	ldr	r3, [pc, #64]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e48:	2200      	movs	r2, #0
 8040e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8040e4c:	4b0e      	ldr	r3, [pc, #56]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e4e:	220c      	movs	r2, #12
 8040e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040e52:	4b0d      	ldr	r3, [pc, #52]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e54:	2200      	movs	r2, #0
 8040e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8040e58:	4b0b      	ldr	r3, [pc, #44]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e5a:	2200      	movs	r2, #0
 8040e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040e5e:	4b0a      	ldr	r3, [pc, #40]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e60:	2200      	movs	r2, #0
 8040e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040e64:	4b08      	ldr	r3, [pc, #32]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e66:	2200      	movs	r2, #0
 8040e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8040e6a:	4807      	ldr	r0, [pc, #28]	; (8040e88 <MX_USART3_UART_Init+0x60>)
 8040e6c:	f005 f8cc 	bl	8046008 <HAL_UART_Init>
 8040e70:	4603      	mov	r3, r0
 8040e72:	2b00      	cmp	r3, #0
 8040e74:	bf14      	ite	ne
 8040e76:	2301      	movne	r3, #1
 8040e78:	2300      	moveq	r3, #0
 8040e7a:	b2db      	uxtb	r3, r3
 8040e7c:	2b00      	cmp	r3, #0
 8040e7e:	d001      	beq.n	8040e84 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8040e80:	f000 f9a4 	bl	80411cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8040e84:	bf00      	nop
 8040e86:	bd80      	pop	{r7, pc}
 8040e88:	200005dc 	.word	0x200005dc
 8040e8c:	40004800 	.word	0x40004800

08040e90 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 8040e90:	b580      	push	{r7, lr}
 8040e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8040e94:	4b17      	ldr	r3, [pc, #92]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040e96:	4a18      	ldr	r2, [pc, #96]	; (8040ef8 <MX_USART6_UART_Init+0x68>)
 8040e98:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8040e9a:	4b16      	ldr	r3, [pc, #88]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040ea0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8040ea2:	4b14      	ldr	r3, [pc, #80]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8040ea8:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8040eaa:	4b12      	ldr	r3, [pc, #72]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040eac:	2200      	movs	r2, #0
 8040eae:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8040eb0:	4b10      	ldr	r3, [pc, #64]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8040eb6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8040eb8:	4b0e      	ldr	r3, [pc, #56]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040eba:	220c      	movs	r2, #12
 8040ebc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040ebe:	4b0d      	ldr	r3, [pc, #52]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040ec0:	2200      	movs	r2, #0
 8040ec2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8040ec4:	4b0b      	ldr	r3, [pc, #44]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040ec6:	2200      	movs	r2, #0
 8040ec8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040eca:	4b0a      	ldr	r3, [pc, #40]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040ecc:	2200      	movs	r2, #0
 8040ece:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040ed0:	4b08      	ldr	r3, [pc, #32]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040ed2:	2200      	movs	r2, #0
 8040ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8040ed6:	4807      	ldr	r0, [pc, #28]	; (8040ef4 <MX_USART6_UART_Init+0x64>)
 8040ed8:	f005 f896 	bl	8046008 <HAL_UART_Init>
 8040edc:	4603      	mov	r3, r0
 8040ede:	2b00      	cmp	r3, #0
 8040ee0:	bf14      	ite	ne
 8040ee2:	2301      	movne	r3, #1
 8040ee4:	2300      	moveq	r3, #0
 8040ee6:	b2db      	uxtb	r3, r3
 8040ee8:	2b00      	cmp	r3, #0
 8040eea:	d001      	beq.n	8040ef0 <MX_USART6_UART_Init+0x60>
  {
    Error_Handler();
 8040eec:	f000 f96e 	bl	80411cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8040ef0:	bf00      	nop
 8040ef2:	bd80      	pop	{r7, pc}
 8040ef4:	20000664 	.word	0x20000664
 8040ef8:	40011400 	.word	0x40011400

08040efc <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8040efc:	b580      	push	{r7, lr}
 8040efe:	b088      	sub	sp, #32
 8040f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8040f02:	1d3b      	adds	r3, r7, #4
 8040f04:	2200      	movs	r2, #0
 8040f06:	601a      	str	r2, [r3, #0]
 8040f08:	605a      	str	r2, [r3, #4]
 8040f0a:	609a      	str	r2, [r3, #8]
 8040f0c:	60da      	str	r2, [r3, #12]
 8040f0e:	611a      	str	r2, [r3, #16]
 8040f10:	615a      	str	r2, [r3, #20]
 8040f12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8040f14:	4b2b      	ldr	r3, [pc, #172]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f16:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8040f1a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8040f1c:	4b29      	ldr	r3, [pc, #164]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f1e:	4a2a      	ldr	r2, [pc, #168]	; (8040fc8 <MX_FMC_Init+0xcc>)
 8040f20:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8040f22:	4b28      	ldr	r3, [pc, #160]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f24:	2200      	movs	r2, #0
 8040f26:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8040f28:	4b26      	ldr	r3, [pc, #152]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f2a:	2200      	movs	r2, #0
 8040f2c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8040f2e:	4b25      	ldr	r3, [pc, #148]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f30:	2204      	movs	r2, #4
 8040f32:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8040f34:	4b23      	ldr	r3, [pc, #140]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f36:	2210      	movs	r2, #16
 8040f38:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8040f3a:	4b22      	ldr	r3, [pc, #136]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f3c:	2200      	movs	r2, #0
 8040f3e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8040f40:	4b20      	ldr	r3, [pc, #128]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f42:	2200      	movs	r2, #0
 8040f44:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8040f46:	4b1f      	ldr	r3, [pc, #124]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f48:	2200      	movs	r2, #0
 8040f4a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8040f4c:	4b1d      	ldr	r3, [pc, #116]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f4e:	2200      	movs	r2, #0
 8040f50:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8040f52:	4b1c      	ldr	r3, [pc, #112]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f54:	2200      	movs	r2, #0
 8040f56:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8040f58:	4b1a      	ldr	r3, [pc, #104]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f5a:	2200      	movs	r2, #0
 8040f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8040f5e:	4b19      	ldr	r3, [pc, #100]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f60:	2200      	movs	r2, #0
 8040f62:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8040f64:	4b17      	ldr	r3, [pc, #92]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f66:	2200      	movs	r2, #0
 8040f68:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8040f6a:	4b16      	ldr	r3, [pc, #88]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f6c:	2200      	movs	r2, #0
 8040f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8040f70:	4b14      	ldr	r3, [pc, #80]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8040f76:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8040f78:	4b12      	ldr	r3, [pc, #72]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040f7a:	2200      	movs	r2, #0
 8040f7c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8040f7e:	2305      	movs	r3, #5
 8040f80:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8040f82:	230f      	movs	r3, #15
 8040f84:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8040f86:	2304      	movs	r3, #4
 8040f88:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8040f8a:	2304      	movs	r3, #4
 8040f8c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8040f8e:	2310      	movs	r3, #16
 8040f90:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8040f92:	2311      	movs	r3, #17
 8040f94:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8040f96:	2300      	movs	r3, #0
 8040f98:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8040f9a:	1d3b      	adds	r3, r7, #4
 8040f9c:	2200      	movs	r2, #0
 8040f9e:	4619      	mov	r1, r3
 8040fa0:	4808      	ldr	r0, [pc, #32]	; (8040fc4 <MX_FMC_Init+0xc8>)
 8040fa2:	f004 fc85 	bl	80458b0 <HAL_SRAM_Init>
 8040fa6:	4603      	mov	r3, r0
 8040fa8:	2b00      	cmp	r3, #0
 8040faa:	bf14      	ite	ne
 8040fac:	2301      	movne	r3, #1
 8040fae:	2300      	moveq	r3, #0
 8040fb0:	b2db      	uxtb	r3, r3
 8040fb2:	2b00      	cmp	r3, #0
 8040fb4:	d001      	beq.n	8040fba <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8040fb6:	f000 f909 	bl	80411cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040fba:	bf00      	nop
 8040fbc:	3720      	adds	r7, #32
 8040fbe:	46bd      	mov	sp, r7
 8040fc0:	bd80      	pop	{r7, pc}
 8040fc2:	bf00      	nop
 8040fc4:	200006ec 	.word	0x200006ec
 8040fc8:	a0000104 	.word	0xa0000104

08040fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8040fcc:	b580      	push	{r7, lr}
 8040fce:	b08e      	sub	sp, #56	; 0x38
 8040fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040fd6:	2200      	movs	r2, #0
 8040fd8:	601a      	str	r2, [r3, #0]
 8040fda:	605a      	str	r2, [r3, #4]
 8040fdc:	609a      	str	r2, [r3, #8]
 8040fde:	60da      	str	r2, [r3, #12]
 8040fe0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040fe2:	4b6b      	ldr	r3, [pc, #428]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8040fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040fe6:	4a6a      	ldr	r2, [pc, #424]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8040fe8:	f043 0310 	orr.w	r3, r3, #16
 8040fec:	6313      	str	r3, [r2, #48]	; 0x30
 8040fee:	4b68      	ldr	r3, [pc, #416]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8040ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ff2:	f003 0310 	and.w	r3, r3, #16
 8040ff6:	623b      	str	r3, [r7, #32]
 8040ff8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040ffa:	4b65      	ldr	r3, [pc, #404]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8040ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ffe:	4a64      	ldr	r2, [pc, #400]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041000:	f043 0304 	orr.w	r3, r3, #4
 8041004:	6313      	str	r3, [r2, #48]	; 0x30
 8041006:	4b62      	ldr	r3, [pc, #392]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804100a:	f003 0304 	and.w	r3, r3, #4
 804100e:	61fb      	str	r3, [r7, #28]
 8041010:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8041012:	4b5f      	ldr	r3, [pc, #380]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041016:	4a5e      	ldr	r2, [pc, #376]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041018:	f043 0320 	orr.w	r3, r3, #32
 804101c:	6313      	str	r3, [r2, #48]	; 0x30
 804101e:	4b5c      	ldr	r3, [pc, #368]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041022:	f003 0320 	and.w	r3, r3, #32
 8041026:	61bb      	str	r3, [r7, #24]
 8041028:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 804102a:	4b59      	ldr	r3, [pc, #356]	; (8041190 <MX_GPIO_Init+0x1c4>)
 804102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804102e:	4a58      	ldr	r2, [pc, #352]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041034:	6313      	str	r3, [r2, #48]	; 0x30
 8041036:	4b56      	ldr	r3, [pc, #344]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804103a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804103e:	617b      	str	r3, [r7, #20]
 8041040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8041042:	4b53      	ldr	r3, [pc, #332]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041046:	4a52      	ldr	r2, [pc, #328]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041048:	f043 0301 	orr.w	r3, r3, #1
 804104c:	6313      	str	r3, [r2, #48]	; 0x30
 804104e:	4b50      	ldr	r3, [pc, #320]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041052:	f003 0301 	and.w	r3, r3, #1
 8041056:	613b      	str	r3, [r7, #16]
 8041058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804105a:	4b4d      	ldr	r3, [pc, #308]	; (8041190 <MX_GPIO_Init+0x1c4>)
 804105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804105e:	4a4c      	ldr	r2, [pc, #304]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041060:	f043 0302 	orr.w	r3, r3, #2
 8041064:	6313      	str	r3, [r2, #48]	; 0x30
 8041066:	4b4a      	ldr	r3, [pc, #296]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804106a:	f003 0302 	and.w	r3, r3, #2
 804106e:	60fb      	str	r3, [r7, #12]
 8041070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8041072:	4b47      	ldr	r3, [pc, #284]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041076:	4a46      	ldr	r2, [pc, #280]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804107c:	6313      	str	r3, [r2, #48]	; 0x30
 804107e:	4b44      	ldr	r3, [pc, #272]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041086:	60bb      	str	r3, [r7, #8]
 8041088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804108a:	4b41      	ldr	r3, [pc, #260]	; (8041190 <MX_GPIO_Init+0x1c4>)
 804108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804108e:	4a40      	ldr	r2, [pc, #256]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041090:	f043 0308 	orr.w	r3, r3, #8
 8041094:	6313      	str	r3, [r2, #48]	; 0x30
 8041096:	4b3e      	ldr	r3, [pc, #248]	; (8041190 <MX_GPIO_Init+0x1c4>)
 8041098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804109a:	f003 0308 	and.w	r3, r3, #8
 804109e:	607b      	str	r3, [r7, #4]
 80410a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 80410a2:	2200      	movs	r2, #0
 80410a4:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80410a8:	483a      	ldr	r0, [pc, #232]	; (8041194 <MX_GPIO_Init+0x1c8>)
 80410aa:	f003 faeb 	bl	8044684 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 80410ae:	2200      	movs	r2, #0
 80410b0:	f240 31e7 	movw	r1, #999	; 0x3e7
 80410b4:	4838      	ldr	r0, [pc, #224]	; (8041198 <MX_GPIO_Init+0x1cc>)
 80410b6:	f003 fae5 	bl	8044684 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 80410ba:	2200      	movs	r2, #0
 80410bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80410c0:	4836      	ldr	r0, [pc, #216]	; (804119c <MX_GPIO_Init+0x1d0>)
 80410c2:	f003 fadf 	bl	8044684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 80410c6:	237f      	movs	r3, #127	; 0x7f
 80410c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80410ca:	2300      	movs	r3, #0
 80410cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80410ce:	2300      	movs	r3, #0
 80410d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80410d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80410d6:	4619      	mov	r1, r3
 80410d8:	4831      	ldr	r0, [pc, #196]	; (80411a0 <MX_GPIO_Init+0x1d4>)
 80410da:	f003 f927 	bl	804432c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 80410de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80410e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80410e4:	2300      	movs	r3, #0
 80410e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80410e8:	2300      	movs	r3, #0
 80410ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80410ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80410f0:	4619      	mov	r1, r3
 80410f2:	482a      	ldr	r0, [pc, #168]	; (804119c <MX_GPIO_Init+0x1d0>)
 80410f4:	f003 f91a 	bl	804432c <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 80410f8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80410fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80410fe:	2301      	movs	r3, #1
 8041100:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041102:	2300      	movs	r3, #0
 8041104:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041106:	2300      	movs	r3, #0
 8041108:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 804110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804110e:	4619      	mov	r1, r3
 8041110:	4820      	ldr	r0, [pc, #128]	; (8041194 <MX_GPIO_Init+0x1c8>)
 8041112:	f003 f90b 	bl	804432c <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8041116:	f240 33c7 	movw	r3, #967	; 0x3c7
 804111a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804111c:	2301      	movs	r3, #1
 804111e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041120:	2300      	movs	r3, #0
 8041122:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041124:	2300      	movs	r3, #0
 8041126:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804112c:	4619      	mov	r1, r3
 804112e:	481a      	ldr	r0, [pc, #104]	; (8041198 <MX_GPIO_Init+0x1cc>)
 8041130:	f003 f8fc 	bl	804432c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8041134:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8041138:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804113a:	2300      	movs	r3, #0
 804113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804113e:	2300      	movs	r3, #0
 8041140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041146:	4619      	mov	r1, r3
 8041148:	4816      	ldr	r0, [pc, #88]	; (80411a4 <MX_GPIO_Init+0x1d8>)
 804114a:	f003 f8ef 	bl	804432c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 804114e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8041152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041154:	2301      	movs	r3, #1
 8041156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041158:	2300      	movs	r3, #0
 804115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804115c:	2300      	movs	r3, #0
 804115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041164:	4619      	mov	r1, r3
 8041166:	480d      	ldr	r0, [pc, #52]	; (804119c <MX_GPIO_Init+0x1d0>)
 8041168:	f003 f8e0 	bl	804432c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 804116c:	2320      	movs	r3, #32
 804116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041170:	2301      	movs	r3, #1
 8041172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041174:	2300      	movs	r3, #0
 8041176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8041178:	2302      	movs	r3, #2
 804117a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 804117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8041180:	4619      	mov	r1, r3
 8041182:	4805      	ldr	r0, [pc, #20]	; (8041198 <MX_GPIO_Init+0x1cc>)
 8041184:	f003 f8d2 	bl	804432c <HAL_GPIO_Init>

}
 8041188:	bf00      	nop
 804118a:	3738      	adds	r7, #56	; 0x38
 804118c:	46bd      	mov	sp, r7
 804118e:	bd80      	pop	{r7, pc}
 8041190:	40023800 	.word	0x40023800
 8041194:	40021400 	.word	0x40021400
 8041198:	40020400 	.word	0x40020400
 804119c:	40020800 	.word	0x40020800
 80411a0:	40021000 	.word	0x40021000
 80411a4:	40021800 	.word	0x40021800

080411a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80411a8:	b580      	push	{r7, lr}
 80411aa:	b082      	sub	sp, #8
 80411ac:	af00      	add	r7, sp, #0
 80411ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80411b0:	687b      	ldr	r3, [r7, #4]
 80411b2:	681b      	ldr	r3, [r3, #0]
 80411b4:	4a04      	ldr	r2, [pc, #16]	; (80411c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80411b6:	4293      	cmp	r3, r2
 80411b8:	d101      	bne.n	80411be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80411ba:	f000 ff45 	bl	8042048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80411be:	bf00      	nop
 80411c0:	3708      	adds	r7, #8
 80411c2:	46bd      	mov	sp, r7
 80411c4:	bd80      	pop	{r7, pc}
 80411c6:	bf00      	nop
 80411c8:	40001000 	.word	0x40001000

080411cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80411cc:	b480      	push	{r7}
 80411ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80411d0:	b672      	cpsid	i
}
 80411d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80411d4:	e7fe      	b.n	80411d4 <Error_Handler+0x8>

080411d6 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
	return state;
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80411d6:	b580      	push	{r7, lr}
 80411d8:	b08c      	sub	sp, #48	; 0x30
 80411da:	af00      	add	r7, sp, #0
 80411dc:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 80411de:	2300      	movs	r3, #0
 80411e0:	60fb      	str	r3, [r7, #12]
 80411e2:	2300      	movs	r3, #0
 80411e4:	613b      	str	r3, [r7, #16]

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80411e6:	f107 030c 	add.w	r3, r7, #12
 80411ea:	f107 0214 	add.w	r2, r7, #20
 80411ee:	2100      	movs	r1, #0
 80411f0:	6878      	ldr	r0, [r7, #4]
 80411f2:	f001 f949 	bl	8042488 <HAL_CAN_GetRxMessage>
 80411f6:	4603      	mov	r3, r0
 80411f8:	2b00      	cmp	r3, #0
 80411fa:	bf14      	ite	ne
 80411fc:	2301      	movne	r3, #1
 80411fe:	2300      	moveq	r3, #0
 8041200:	b2db      	uxtb	r3, r3
 8041202:	2b00      	cmp	r3, #0
 8041204:	d001      	beq.n	804120a <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* Reception Error */
    Error_Handler();
 8041206:	f7ff ffe1 	bl	80411cc <Error_Handler>
  }
}
 804120a:	bf00      	nop
 804120c:	3730      	adds	r7, #48	; 0x30
 804120e:	46bd      	mov	sp, r7
 8041210:	bd80      	pop	{r7, pc}
	...

08041214 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8041214:	b480      	push	{r7}
 8041216:	b085      	sub	sp, #20
 8041218:	af00      	add	r7, sp, #0
 804121a:	60f8      	str	r0, [r7, #12]
 804121c:	60b9      	str	r1, [r7, #8]
 804121e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8041220:	68fb      	ldr	r3, [r7, #12]
 8041222:	4a07      	ldr	r2, [pc, #28]	; (8041240 <vApplicationGetIdleTaskMemory+0x2c>)
 8041224:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8041226:	68bb      	ldr	r3, [r7, #8]
 8041228:	4a06      	ldr	r2, [pc, #24]	; (8041244 <vApplicationGetIdleTaskMemory+0x30>)
 804122a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 804122c:	687b      	ldr	r3, [r7, #4]
 804122e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041232:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8041234:	bf00      	nop
 8041236:	3714      	adds	r7, #20
 8041238:	46bd      	mov	sp, r7
 804123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804123e:	4770      	bx	lr
 8041240:	20000738 	.word	0x20000738
 8041244:	200007ec 	.word	0x200007ec

08041248 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8041248:	b480      	push	{r7}
 804124a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 804124c:	f3bf 8f4f 	dsb	sy
}
 8041250:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8041252:	f3bf 8f6f 	isb	sy
}
 8041256:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8041258:	4b0d      	ldr	r3, [pc, #52]	; (8041290 <SCB_EnableICache+0x48>)
 804125a:	2200      	movs	r2, #0
 804125c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8041260:	f3bf 8f4f 	dsb	sy
}
 8041264:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8041266:	f3bf 8f6f 	isb	sy
}
 804126a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 804126c:	4b08      	ldr	r3, [pc, #32]	; (8041290 <SCB_EnableICache+0x48>)
 804126e:	695b      	ldr	r3, [r3, #20]
 8041270:	4a07      	ldr	r2, [pc, #28]	; (8041290 <SCB_EnableICache+0x48>)
 8041272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041276:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8041278:	f3bf 8f4f 	dsb	sy
}
 804127c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 804127e:	f3bf 8f6f 	isb	sy
}
 8041282:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8041284:	bf00      	nop
 8041286:	46bd      	mov	sp, r7
 8041288:	f85d 7b04 	ldr.w	r7, [sp], #4
 804128c:	4770      	bx	lr
 804128e:	bf00      	nop
 8041290:	e000ed00 	.word	0xe000ed00

08041294 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8041294:	b480      	push	{r7}
 8041296:	b085      	sub	sp, #20
 8041298:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 804129a:	4b25      	ldr	r3, [pc, #148]	; (8041330 <SCB_EnableDCache+0x9c>)
 804129c:	2200      	movs	r2, #0
 804129e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80412a2:	f3bf 8f4f 	dsb	sy
}
 80412a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80412a8:	4b21      	ldr	r3, [pc, #132]	; (8041330 <SCB_EnableDCache+0x9c>)
 80412aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80412ae:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80412b0:	687b      	ldr	r3, [r7, #4]
 80412b2:	0b5b      	lsrs	r3, r3, #13
 80412b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80412b8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80412ba:	687b      	ldr	r3, [r7, #4]
 80412bc:	08db      	lsrs	r3, r3, #3
 80412be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80412c2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80412c4:	68fb      	ldr	r3, [r7, #12]
 80412c6:	015a      	lsls	r2, r3, #5
 80412c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80412cc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80412ce:	68ba      	ldr	r2, [r7, #8]
 80412d0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80412d2:	4917      	ldr	r1, [pc, #92]	; (8041330 <SCB_EnableDCache+0x9c>)
 80412d4:	4313      	orrs	r3, r2
 80412d6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80412da:	68bb      	ldr	r3, [r7, #8]
 80412dc:	1e5a      	subs	r2, r3, #1
 80412de:	60ba      	str	r2, [r7, #8]
 80412e0:	2b00      	cmp	r3, #0
 80412e2:	bf14      	ite	ne
 80412e4:	2301      	movne	r3, #1
 80412e6:	2300      	moveq	r3, #0
 80412e8:	b2db      	uxtb	r3, r3
 80412ea:	2b00      	cmp	r3, #0
 80412ec:	d000      	beq.n	80412f0 <SCB_EnableDCache+0x5c>
      do {
 80412ee:	e7e9      	b.n	80412c4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80412f0:	68fb      	ldr	r3, [r7, #12]
 80412f2:	1e5a      	subs	r2, r3, #1
 80412f4:	60fa      	str	r2, [r7, #12]
 80412f6:	2b00      	cmp	r3, #0
 80412f8:	bf14      	ite	ne
 80412fa:	2301      	movne	r3, #1
 80412fc:	2300      	moveq	r3, #0
 80412fe:	b2db      	uxtb	r3, r3
 8041300:	2b00      	cmp	r3, #0
 8041302:	d000      	beq.n	8041306 <SCB_EnableDCache+0x72>
    do {
 8041304:	e7d9      	b.n	80412ba <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8041306:	f3bf 8f4f 	dsb	sy
}
 804130a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 804130c:	4b08      	ldr	r3, [pc, #32]	; (8041330 <SCB_EnableDCache+0x9c>)
 804130e:	695b      	ldr	r3, [r3, #20]
 8041310:	4a07      	ldr	r2, [pc, #28]	; (8041330 <SCB_EnableDCache+0x9c>)
 8041312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041316:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8041318:	f3bf 8f4f 	dsb	sy
}
 804131c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 804131e:	f3bf 8f6f 	isb	sy
}
 8041322:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8041324:	bf00      	nop
 8041326:	3714      	adds	r7, #20
 8041328:	46bd      	mov	sp, r7
 804132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804132e:	4770      	bx	lr
 8041330:	e000ed00 	.word	0xe000ed00

08041334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8041334:	b5b0      	push	{r4, r5, r7, lr}
 8041336:	b088      	sub	sp, #32
 8041338:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 804133a:	f7ff ff85 	bl	8041248 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 804133e:	f7ff ffa9 	bl	8041294 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8041342:	f000 fe74 	bl	804202e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8041346:	f7ff fba9 	bl	8040a9c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	init_stm32f746();
 804134a:	f7ff fb91 	bl	8040a70 <init_stm32f746>

	Debug_Uart_Init();
 804134e:	f7ff f9b3 	bl	80406b8 <_Z15Debug_Uart_Initv>
	/* USER CODE END SysInit */

	Dprintf("Starting Application(%d.%d)\n", APP_Version[0], APP_Version[1] );
 8041352:	2300      	movs	r3, #0
 8041354:	2203      	movs	r2, #3
 8041356:	4619      	mov	r1, r3
 8041358:	480b      	ldr	r0, [pc, #44]	; (8041388 <main+0x54>)
 804135a:	f7ff f95b 	bl	8040614 <_Z7DprintfPKcz>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, InitTask, osPriorityNormal, 0, 512);
 804135e:	4b0b      	ldr	r3, [pc, #44]	; (804138c <main+0x58>)
 8041360:	1d3c      	adds	r4, r7, #4
 8041362:	461d      	mov	r5, r3
 8041364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8041366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8041368:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 804136c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 8041370:	1d3b      	adds	r3, r7, #4
 8041372:	2100      	movs	r1, #0
 8041374:	4618      	mov	r0, r3
 8041376:	f007 f9c1 	bl	80486fc <osThreadCreate>
 804137a:	4603      	mov	r3, r0
 804137c:	4a04      	ldr	r2, [pc, #16]	; (8041390 <main+0x5c>)
 804137e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8041380:	f007 f9a5 	bl	80486ce <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8041384:	e7fe      	b.n	8041384 <main+0x50>
 8041386:	bf00      	nop
 8041388:	0805a22c 	.word	0x0805a22c
 804138c:	0805a24c 	.word	0x0805a24c
 8041390:	20000fec 	.word	0x20000fec

08041394 <_Z8InitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END InitTask */
void InitTask(void const *argument)
{
 8041394:	b5b0      	push	{r4, r5, r7, lr}
 8041396:	b090      	sub	sp, #64	; 0x40
 8041398:	af00      	add	r7, sp, #0
 804139a:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 804139c:	f006 fb42 	bl	8047a24 <MX_LWIP_Init>

	//UdpServerInit();
	//UdpClientInit();
	//TcpClientInit();
	TcpServerInit();
 80413a0:	f7ff fb52 	bl	8040a48 <_Z13TcpServerInitv>

	/* definition and creation of Task1 */
	osThreadDef(Task1, Task1, osPriorityLow, 0, 512);
 80413a4:	4b16      	ldr	r3, [pc, #88]	; (8041400 <_Z8InitTaskPKv+0x6c>)
 80413a6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80413aa:	461d      	mov	r5, r3
 80413ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80413ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80413b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80413b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80413b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80413bc:	2100      	movs	r1, #0
 80413be:	4618      	mov	r0, r3
 80413c0:	f007 f99c 	bl	80486fc <osThreadCreate>
 80413c4:	4603      	mov	r3, r0
 80413c6:	4a0f      	ldr	r2, [pc, #60]	; (8041404 <_Z8InitTaskPKv+0x70>)
 80413c8:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(Task2, Task2, osPriorityHigh, 0, 512);
 80413ca:	4b0f      	ldr	r3, [pc, #60]	; (8041408 <_Z8InitTaskPKv+0x74>)
 80413cc:	f107 0408 	add.w	r4, r7, #8
 80413d0:	461d      	mov	r5, r3
 80413d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80413d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80413d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80413da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80413de:	f107 0308 	add.w	r3, r7, #8
 80413e2:	2100      	movs	r1, #0
 80413e4:	4618      	mov	r0, r3
 80413e6:	f007 f989 	bl	80486fc <osThreadCreate>
 80413ea:	4603      	mov	r3, r0
 80413ec:	4a07      	ldr	r2, [pc, #28]	; (804140c <_Z8InitTaskPKv+0x78>)
 80413ee:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80413f0:	2001      	movs	r0, #1
 80413f2:	f007 f9cf 	bl	8048794 <osDelay>

		vTaskDelete(NULL);
 80413f6:	2000      	movs	r0, #0
 80413f8:	f008 fec0 	bl	804a17c <vTaskDelete>
		osDelay(1);
 80413fc:	e7f8      	b.n	80413f0 <_Z8InitTaskPKv+0x5c>
 80413fe:	bf00      	nop
 8041400:	0805a268 	.word	0x0805a268
 8041404:	20000ff0 	.word	0x20000ff0
 8041408:	0805a284 	.word	0x0805a284
 804140c:	20000ff4 	.word	0x20000ff4

08041410 <_Z5Task1PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Task1 */
void Task1(void const *argument)
{
 8041410:	b580      	push	{r7, lr}
 8041412:	b084      	sub	sp, #16
 8041414:	af00      	add	r7, sp, #0
 8041416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */

	const TickType_t xTime = pdMS_TO_TICKS(5);
 8041418:	2305      	movs	r3, #5
 804141a:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 804141c:	f009 f914 	bl	804a648 <xTaskGetTickCount>
 8041420:	4603      	mov	r3, r0
 8041422:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */

  for(;;)
  {
    DebugDrive();
 8041424:	f7ff f95e 	bl	80406e4 <_Z10DebugDrivev>

    osDelay(1);
 8041428:	2001      	movs	r0, #1
 804142a:	f007 f9b3 	bl	8048794 <osDelay>

	vTaskDelayUntil(&xLastWakeTime, xTime);
 804142e:	f107 0308 	add.w	r3, r7, #8
 8041432:	2105      	movs	r1, #5
 8041434:	4618      	mov	r0, r3
 8041436:	f008 ff33 	bl	804a2a0 <vTaskDelayUntil>
    DebugDrive();
 804143a:	e7f3      	b.n	8041424 <_Z5Task1PKv+0x14>

0804143c <_Z5Task2PKv>:
* @retval None
*/
/* USER CODE END Task2 */

void Task2(void const *argument)
{
 804143c:	b580      	push	{r7, lr}
 804143e:	b084      	sub	sp, #16
 8041440:	af00      	add	r7, sp, #0
 8041442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2 */

	const TickType_t xTime = pdMS_TO_TICKS(2);
 8041444:	2302      	movs	r3, #2
 8041446:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8041448:	f009 f8fe 	bl	804a648 <xTaskGetTickCount>
 804144c:	4603      	mov	r3, r0
 804144e:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	osDelay(1);
 8041450:	2001      	movs	r0, #1
 8041452:	f007 f99f 	bl	8048794 <osDelay>

	vTaskDelayUntil(&xLastWakeTime, xTime);
 8041456:	f107 0308 	add.w	r3, r7, #8
 804145a:	2102      	movs	r1, #2
 804145c:	4618      	mov	r0, r3
 804145e:	f008 ff1f 	bl	804a2a0 <vTaskDelayUntil>
	osDelay(1);
 8041462:	e7f5      	b.n	8041450 <_Z5Task2PKv+0x14>

08041464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041464:	b580      	push	{r7, lr}
 8041466:	b082      	sub	sp, #8
 8041468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 804146a:	4b11      	ldr	r3, [pc, #68]	; (80414b0 <HAL_MspInit+0x4c>)
 804146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804146e:	4a10      	ldr	r2, [pc, #64]	; (80414b0 <HAL_MspInit+0x4c>)
 8041470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041474:	6413      	str	r3, [r2, #64]	; 0x40
 8041476:	4b0e      	ldr	r3, [pc, #56]	; (80414b0 <HAL_MspInit+0x4c>)
 8041478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804147e:	607b      	str	r3, [r7, #4]
 8041480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041482:	4b0b      	ldr	r3, [pc, #44]	; (80414b0 <HAL_MspInit+0x4c>)
 8041484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041486:	4a0a      	ldr	r2, [pc, #40]	; (80414b0 <HAL_MspInit+0x4c>)
 8041488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804148c:	6453      	str	r3, [r2, #68]	; 0x44
 804148e:	4b08      	ldr	r3, [pc, #32]	; (80414b0 <HAL_MspInit+0x4c>)
 8041490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041496:	603b      	str	r3, [r7, #0]
 8041498:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 804149a:	2200      	movs	r2, #0
 804149c:	210f      	movs	r1, #15
 804149e:	f06f 0001 	mvn.w	r0, #1
 80414a2:	f001 fc26 	bl	8042cf2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80414a6:	bf00      	nop
 80414a8:	3708      	adds	r7, #8
 80414aa:	46bd      	mov	sp, r7
 80414ac:	bd80      	pop	{r7, pc}
 80414ae:	bf00      	nop
 80414b0:	40023800 	.word	0x40023800

080414b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80414b4:	b580      	push	{r7, lr}
 80414b6:	b08a      	sub	sp, #40	; 0x28
 80414b8:	af00      	add	r7, sp, #0
 80414ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80414bc:	f107 0314 	add.w	r3, r7, #20
 80414c0:	2200      	movs	r2, #0
 80414c2:	601a      	str	r2, [r3, #0]
 80414c4:	605a      	str	r2, [r3, #4]
 80414c6:	609a      	str	r2, [r3, #8]
 80414c8:	60da      	str	r2, [r3, #12]
 80414ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80414cc:	687b      	ldr	r3, [r7, #4]
 80414ce:	681b      	ldr	r3, [r3, #0]
 80414d0:	4a1b      	ldr	r2, [pc, #108]	; (8041540 <HAL_CAN_MspInit+0x8c>)
 80414d2:	4293      	cmp	r3, r2
 80414d4:	d130      	bne.n	8041538 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80414d6:	4b1b      	ldr	r3, [pc, #108]	; (8041544 <HAL_CAN_MspInit+0x90>)
 80414d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80414da:	4a1a      	ldr	r2, [pc, #104]	; (8041544 <HAL_CAN_MspInit+0x90>)
 80414dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80414e0:	6413      	str	r3, [r2, #64]	; 0x40
 80414e2:	4b18      	ldr	r3, [pc, #96]	; (8041544 <HAL_CAN_MspInit+0x90>)
 80414e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80414e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80414ea:	613b      	str	r3, [r7, #16]
 80414ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80414ee:	4b15      	ldr	r3, [pc, #84]	; (8041544 <HAL_CAN_MspInit+0x90>)
 80414f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414f2:	4a14      	ldr	r2, [pc, #80]	; (8041544 <HAL_CAN_MspInit+0x90>)
 80414f4:	f043 0301 	orr.w	r3, r3, #1
 80414f8:	6313      	str	r3, [r2, #48]	; 0x30
 80414fa:	4b12      	ldr	r3, [pc, #72]	; (8041544 <HAL_CAN_MspInit+0x90>)
 80414fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414fe:	f003 0301 	and.w	r3, r3, #1
 8041502:	60fb      	str	r3, [r7, #12]
 8041504:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8041506:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 804150a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804150c:	2302      	movs	r3, #2
 804150e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041510:	2300      	movs	r3, #0
 8041512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041514:	2303      	movs	r3, #3
 8041516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8041518:	2309      	movs	r3, #9
 804151a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804151c:	f107 0314 	add.w	r3, r7, #20
 8041520:	4619      	mov	r1, r3
 8041522:	4809      	ldr	r0, [pc, #36]	; (8041548 <HAL_CAN_MspInit+0x94>)
 8041524:	f002 ff02 	bl	804432c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8041528:	2200      	movs	r2, #0
 804152a:	2108      	movs	r1, #8
 804152c:	2014      	movs	r0, #20
 804152e:	f001 fbe0 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8041532:	2014      	movs	r0, #20
 8041534:	f001 fbf9 	bl	8042d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8041538:	bf00      	nop
 804153a:	3728      	adds	r7, #40	; 0x28
 804153c:	46bd      	mov	sp, r7
 804153e:	bd80      	pop	{r7, pc}
 8041540:	40006400 	.word	0x40006400
 8041544:	40023800 	.word	0x40023800
 8041548:	40020000 	.word	0x40020000

0804154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 804154c:	b580      	push	{r7, lr}
 804154e:	b084      	sub	sp, #16
 8041550:	af00      	add	r7, sp, #0
 8041552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8041554:	687b      	ldr	r3, [r7, #4]
 8041556:	681b      	ldr	r3, [r3, #0]
 8041558:	4a0d      	ldr	r2, [pc, #52]	; (8041590 <HAL_TIM_Base_MspInit+0x44>)
 804155a:	4293      	cmp	r3, r2
 804155c:	d113      	bne.n	8041586 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 804155e:	4b0d      	ldr	r3, [pc, #52]	; (8041594 <HAL_TIM_Base_MspInit+0x48>)
 8041560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041562:	4a0c      	ldr	r2, [pc, #48]	; (8041594 <HAL_TIM_Base_MspInit+0x48>)
 8041564:	f043 0320 	orr.w	r3, r3, #32
 8041568:	6413      	str	r3, [r2, #64]	; 0x40
 804156a:	4b0a      	ldr	r3, [pc, #40]	; (8041594 <HAL_TIM_Base_MspInit+0x48>)
 804156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804156e:	f003 0320 	and.w	r3, r3, #32
 8041572:	60fb      	str	r3, [r7, #12]
 8041574:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8041576:	2200      	movs	r2, #0
 8041578:	2107      	movs	r1, #7
 804157a:	2037      	movs	r0, #55	; 0x37
 804157c:	f001 fbb9 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8041580:	2037      	movs	r0, #55	; 0x37
 8041582:	f001 fbd2 	bl	8042d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8041586:	bf00      	nop
 8041588:	3710      	adds	r7, #16
 804158a:	46bd      	mov	sp, r7
 804158c:	bd80      	pop	{r7, pc}
 804158e:	bf00      	nop
 8041590:	40001400 	.word	0x40001400
 8041594:	40023800 	.word	0x40023800

08041598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041598:	b580      	push	{r7, lr}
 804159a:	b0b4      	sub	sp, #208	; 0xd0
 804159c:	af00      	add	r7, sp, #0
 804159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80415a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80415a4:	2200      	movs	r2, #0
 80415a6:	601a      	str	r2, [r3, #0]
 80415a8:	605a      	str	r2, [r3, #4]
 80415aa:	609a      	str	r2, [r3, #8]
 80415ac:	60da      	str	r2, [r3, #12]
 80415ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80415b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80415b4:	2284      	movs	r2, #132	; 0x84
 80415b6:	2100      	movs	r1, #0
 80415b8:	4618      	mov	r0, r3
 80415ba:	f017 fc53 	bl	8058e64 <memset>
  if(huart->Instance==UART4)
 80415be:	687b      	ldr	r3, [r7, #4]
 80415c0:	681b      	ldr	r3, [r3, #0]
 80415c2:	4aa6      	ldr	r2, [pc, #664]	; (804185c <HAL_UART_MspInit+0x2c4>)
 80415c4:	4293      	cmp	r3, r2
 80415c6:	d146      	bne.n	8041656 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80415c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80415cc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80415ce:	2300      	movs	r3, #0
 80415d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80415d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80415d8:	4618      	mov	r0, r3
 80415da:	f003 fd79 	bl	80450d0 <HAL_RCCEx_PeriphCLKConfig>
 80415de:	4603      	mov	r3, r0
 80415e0:	2b00      	cmp	r3, #0
 80415e2:	d001      	beq.n	80415e8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80415e4:	f7ff fdf2 	bl	80411cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80415e8:	4b9d      	ldr	r3, [pc, #628]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80415ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415ec:	4a9c      	ldr	r2, [pc, #624]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80415ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80415f2:	6413      	str	r3, [r2, #64]	; 0x40
 80415f4:	4b9a      	ldr	r3, [pc, #616]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80415f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80415fc:	637b      	str	r3, [r7, #52]	; 0x34
 80415fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041600:	4b97      	ldr	r3, [pc, #604]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041604:	4a96      	ldr	r2, [pc, #600]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041606:	f043 0304 	orr.w	r3, r3, #4
 804160a:	6313      	str	r3, [r2, #48]	; 0x30
 804160c:	4b94      	ldr	r3, [pc, #592]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041610:	f003 0304 	and.w	r3, r3, #4
 8041614:	633b      	str	r3, [r7, #48]	; 0x30
 8041616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8041618:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 804161c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041620:	2302      	movs	r3, #2
 8041622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041626:	2300      	movs	r3, #0
 8041628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804162c:	2303      	movs	r3, #3
 804162e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8041632:	2308      	movs	r3, #8
 8041634:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041638:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 804163c:	4619      	mov	r1, r3
 804163e:	4889      	ldr	r0, [pc, #548]	; (8041864 <HAL_UART_MspInit+0x2cc>)
 8041640:	f002 fe74 	bl	804432c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8041644:	2200      	movs	r2, #0
 8041646:	2108      	movs	r1, #8
 8041648:	2034      	movs	r0, #52	; 0x34
 804164a:	f001 fb52 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 804164e:	2034      	movs	r0, #52	; 0x34
 8041650:	f001 fb6b 	bl	8042d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8041654:	e15e      	b.n	8041914 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 8041656:	687b      	ldr	r3, [r7, #4]
 8041658:	681b      	ldr	r3, [r3, #0]
 804165a:	4a83      	ldr	r2, [pc, #524]	; (8041868 <HAL_UART_MspInit+0x2d0>)
 804165c:	4293      	cmp	r3, r2
 804165e:	d167      	bne.n	8041730 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8041660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041664:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8041666:	2300      	movs	r3, #0
 8041668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804166c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8041670:	4618      	mov	r0, r3
 8041672:	f003 fd2d 	bl	80450d0 <HAL_RCCEx_PeriphCLKConfig>
 8041676:	4603      	mov	r3, r0
 8041678:	2b00      	cmp	r3, #0
 804167a:	d001      	beq.n	8041680 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 804167c:	f7ff fda6 	bl	80411cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8041680:	4b77      	ldr	r3, [pc, #476]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041684:	4a76      	ldr	r2, [pc, #472]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804168a:	6413      	str	r3, [r2, #64]	; 0x40
 804168c:	4b74      	ldr	r3, [pc, #464]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041698:	4b71      	ldr	r3, [pc, #452]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804169c:	4a70      	ldr	r2, [pc, #448]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804169e:	f043 0304 	orr.w	r3, r3, #4
 80416a2:	6313      	str	r3, [r2, #48]	; 0x30
 80416a4:	4b6e      	ldr	r3, [pc, #440]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80416a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416a8:	f003 0304 	and.w	r3, r3, #4
 80416ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80416ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80416b0:	4b6b      	ldr	r3, [pc, #428]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80416b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416b4:	4a6a      	ldr	r2, [pc, #424]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80416b6:	f043 0308 	orr.w	r3, r3, #8
 80416ba:	6313      	str	r3, [r2, #48]	; 0x30
 80416bc:	4b68      	ldr	r3, [pc, #416]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80416be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416c0:	f003 0308 	and.w	r3, r3, #8
 80416c4:	627b      	str	r3, [r7, #36]	; 0x24
 80416c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80416c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80416cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80416d0:	2302      	movs	r3, #2
 80416d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80416d6:	2300      	movs	r3, #0
 80416d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80416dc:	2303      	movs	r3, #3
 80416de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80416e2:	2308      	movs	r3, #8
 80416e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80416e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80416ec:	4619      	mov	r1, r3
 80416ee:	485d      	ldr	r0, [pc, #372]	; (8041864 <HAL_UART_MspInit+0x2cc>)
 80416f0:	f002 fe1c 	bl	804432c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80416f4:	2304      	movs	r3, #4
 80416f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80416fa:	2302      	movs	r3, #2
 80416fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041700:	2300      	movs	r3, #0
 8041702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041706:	2303      	movs	r3, #3
 8041708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 804170c:	2308      	movs	r3, #8
 804170e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041712:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8041716:	4619      	mov	r1, r3
 8041718:	4854      	ldr	r0, [pc, #336]	; (804186c <HAL_UART_MspInit+0x2d4>)
 804171a:	f002 fe07 	bl	804432c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 804171e:	2200      	movs	r2, #0
 8041720:	2105      	movs	r1, #5
 8041722:	2035      	movs	r0, #53	; 0x35
 8041724:	f001 fae5 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8041728:	2035      	movs	r0, #53	; 0x35
 804172a:	f001 fafe 	bl	8042d2a <HAL_NVIC_EnableIRQ>
}
 804172e:	e0f1      	b.n	8041914 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 8041730:	687b      	ldr	r3, [r7, #4]
 8041732:	681b      	ldr	r3, [r3, #0]
 8041734:	4a4e      	ldr	r2, [pc, #312]	; (8041870 <HAL_UART_MspInit+0x2d8>)
 8041736:	4293      	cmp	r3, r2
 8041738:	d144      	bne.n	80417c4 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 804173a:	2340      	movs	r3, #64	; 0x40
 804173c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 804173e:	2300      	movs	r3, #0
 8041740:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8041742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8041746:	4618      	mov	r0, r3
 8041748:	f003 fcc2 	bl	80450d0 <HAL_RCCEx_PeriphCLKConfig>
 804174c:	4603      	mov	r3, r0
 804174e:	2b00      	cmp	r3, #0
 8041750:	d001      	beq.n	8041756 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8041752:	f7ff fd3b 	bl	80411cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8041756:	4b42      	ldr	r3, [pc, #264]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804175a:	4a41      	ldr	r2, [pc, #260]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804175c:	f043 0310 	orr.w	r3, r3, #16
 8041760:	6453      	str	r3, [r2, #68]	; 0x44
 8041762:	4b3f      	ldr	r3, [pc, #252]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041766:	f003 0310 	and.w	r3, r3, #16
 804176a:	623b      	str	r3, [r7, #32]
 804176c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804176e:	4b3c      	ldr	r3, [pc, #240]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041772:	4a3b      	ldr	r2, [pc, #236]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041774:	f043 0301 	orr.w	r3, r3, #1
 8041778:	6313      	str	r3, [r2, #48]	; 0x30
 804177a:	4b39      	ldr	r3, [pc, #228]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804177e:	f003 0301 	and.w	r3, r3, #1
 8041782:	61fb      	str	r3, [r7, #28]
 8041784:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8041786:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 804178a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804178e:	2302      	movs	r3, #2
 8041790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041794:	2300      	movs	r3, #0
 8041796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804179a:	2303      	movs	r3, #3
 804179c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80417a0:	2307      	movs	r3, #7
 80417a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80417a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80417aa:	4619      	mov	r1, r3
 80417ac:	4831      	ldr	r0, [pc, #196]	; (8041874 <HAL_UART_MspInit+0x2dc>)
 80417ae:	f002 fdbd 	bl	804432c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 80417b2:	2200      	movs	r2, #0
 80417b4:	210e      	movs	r1, #14
 80417b6:	2025      	movs	r0, #37	; 0x25
 80417b8:	f001 fa9b 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80417bc:	2025      	movs	r0, #37	; 0x25
 80417be:	f001 fab4 	bl	8042d2a <HAL_NVIC_EnableIRQ>
}
 80417c2:	e0a7      	b.n	8041914 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 80417c4:	687b      	ldr	r3, [r7, #4]
 80417c6:	681b      	ldr	r3, [r3, #0]
 80417c8:	4a2b      	ldr	r2, [pc, #172]	; (8041878 <HAL_UART_MspInit+0x2e0>)
 80417ca:	4293      	cmp	r3, r2
 80417cc:	d158      	bne.n	8041880 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80417ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80417d2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80417d4:	2300      	movs	r3, #0
 80417d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80417da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80417de:	4618      	mov	r0, r3
 80417e0:	f003 fc76 	bl	80450d0 <HAL_RCCEx_PeriphCLKConfig>
 80417e4:	4603      	mov	r3, r0
 80417e6:	2b00      	cmp	r3, #0
 80417e8:	d001      	beq.n	80417ee <HAL_UART_MspInit+0x256>
      Error_Handler();
 80417ea:	f7ff fcef 	bl	80411cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80417ee:	4b1c      	ldr	r3, [pc, #112]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80417f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80417f2:	4a1b      	ldr	r2, [pc, #108]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80417f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80417f8:	6413      	str	r3, [r2, #64]	; 0x40
 80417fa:	4b19      	ldr	r3, [pc, #100]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 80417fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80417fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041802:	61bb      	str	r3, [r7, #24]
 8041804:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041806:	4b16      	ldr	r3, [pc, #88]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804180a:	4a15      	ldr	r2, [pc, #84]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 804180c:	f043 0302 	orr.w	r3, r3, #2
 8041810:	6313      	str	r3, [r2, #48]	; 0x30
 8041812:	4b13      	ldr	r3, [pc, #76]	; (8041860 <HAL_UART_MspInit+0x2c8>)
 8041814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041816:	f003 0302 	and.w	r3, r3, #2
 804181a:	617b      	str	r3, [r7, #20]
 804181c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 804181e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8041822:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041826:	2302      	movs	r3, #2
 8041828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804182c:	2300      	movs	r3, #0
 804182e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041832:	2303      	movs	r3, #3
 8041834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8041838:	2307      	movs	r3, #7
 804183a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804183e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8041842:	4619      	mov	r1, r3
 8041844:	480d      	ldr	r0, [pc, #52]	; (804187c <HAL_UART_MspInit+0x2e4>)
 8041846:	f002 fd71 	bl	804432c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 804184a:	2200      	movs	r2, #0
 804184c:	2108      	movs	r1, #8
 804184e:	2027      	movs	r0, #39	; 0x27
 8041850:	f001 fa4f 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8041854:	2027      	movs	r0, #39	; 0x27
 8041856:	f001 fa68 	bl	8042d2a <HAL_NVIC_EnableIRQ>
}
 804185a:	e05b      	b.n	8041914 <HAL_UART_MspInit+0x37c>
 804185c:	40004c00 	.word	0x40004c00
 8041860:	40023800 	.word	0x40023800
 8041864:	40020800 	.word	0x40020800
 8041868:	40005000 	.word	0x40005000
 804186c:	40020c00 	.word	0x40020c00
 8041870:	40011000 	.word	0x40011000
 8041874:	40020000 	.word	0x40020000
 8041878:	40004800 	.word	0x40004800
 804187c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8041880:	687b      	ldr	r3, [r7, #4]
 8041882:	681b      	ldr	r3, [r3, #0]
 8041884:	4a25      	ldr	r2, [pc, #148]	; (804191c <HAL_UART_MspInit+0x384>)
 8041886:	4293      	cmp	r3, r2
 8041888:	d144      	bne.n	8041914 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 804188a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 804188e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8041890:	2300      	movs	r3, #0
 8041892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8041896:	f107 0338 	add.w	r3, r7, #56	; 0x38
 804189a:	4618      	mov	r0, r3
 804189c:	f003 fc18 	bl	80450d0 <HAL_RCCEx_PeriphCLKConfig>
 80418a0:	4603      	mov	r3, r0
 80418a2:	2b00      	cmp	r3, #0
 80418a4:	d001      	beq.n	80418aa <HAL_UART_MspInit+0x312>
      Error_Handler();
 80418a6:	f7ff fc91 	bl	80411cc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80418aa:	4b1d      	ldr	r3, [pc, #116]	; (8041920 <HAL_UART_MspInit+0x388>)
 80418ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80418ae:	4a1c      	ldr	r2, [pc, #112]	; (8041920 <HAL_UART_MspInit+0x388>)
 80418b0:	f043 0320 	orr.w	r3, r3, #32
 80418b4:	6453      	str	r3, [r2, #68]	; 0x44
 80418b6:	4b1a      	ldr	r3, [pc, #104]	; (8041920 <HAL_UART_MspInit+0x388>)
 80418b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80418ba:	f003 0320 	and.w	r3, r3, #32
 80418be:	613b      	str	r3, [r7, #16]
 80418c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80418c2:	4b17      	ldr	r3, [pc, #92]	; (8041920 <HAL_UART_MspInit+0x388>)
 80418c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80418c6:	4a16      	ldr	r2, [pc, #88]	; (8041920 <HAL_UART_MspInit+0x388>)
 80418c8:	f043 0304 	orr.w	r3, r3, #4
 80418cc:	6313      	str	r3, [r2, #48]	; 0x30
 80418ce:	4b14      	ldr	r3, [pc, #80]	; (8041920 <HAL_UART_MspInit+0x388>)
 80418d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80418d2:	f003 0304 	and.w	r3, r3, #4
 80418d6:	60fb      	str	r3, [r7, #12]
 80418d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80418da:	23c0      	movs	r3, #192	; 0xc0
 80418dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80418e0:	2302      	movs	r3, #2
 80418e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80418e6:	2300      	movs	r3, #0
 80418e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80418ec:	2303      	movs	r3, #3
 80418ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80418f2:	2308      	movs	r3, #8
 80418f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80418f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80418fc:	4619      	mov	r1, r3
 80418fe:	4809      	ldr	r0, [pc, #36]	; (8041924 <HAL_UART_MspInit+0x38c>)
 8041900:	f002 fd14 	bl	804432c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 8041904:	2200      	movs	r2, #0
 8041906:	2108      	movs	r1, #8
 8041908:	2047      	movs	r0, #71	; 0x47
 804190a:	f001 f9f2 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 804190e:	2047      	movs	r0, #71	; 0x47
 8041910:	f001 fa0b 	bl	8042d2a <HAL_NVIC_EnableIRQ>
}
 8041914:	bf00      	nop
 8041916:	37d0      	adds	r7, #208	; 0xd0
 8041918:	46bd      	mov	sp, r7
 804191a:	bd80      	pop	{r7, pc}
 804191c:	40011400 	.word	0x40011400
 8041920:	40023800 	.word	0x40023800
 8041924:	40020800 	.word	0x40020800

08041928 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8041928:	b580      	push	{r7, lr}
 804192a:	b086      	sub	sp, #24
 804192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 804192e:	1d3b      	adds	r3, r7, #4
 8041930:	2200      	movs	r2, #0
 8041932:	601a      	str	r2, [r3, #0]
 8041934:	605a      	str	r2, [r3, #4]
 8041936:	609a      	str	r2, [r3, #8]
 8041938:	60da      	str	r2, [r3, #12]
 804193a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 804193c:	4b23      	ldr	r3, [pc, #140]	; (80419cc <HAL_FMC_MspInit+0xa4>)
 804193e:	681b      	ldr	r3, [r3, #0]
 8041940:	2b00      	cmp	r3, #0
 8041942:	d13e      	bne.n	80419c2 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8041944:	4b21      	ldr	r3, [pc, #132]	; (80419cc <HAL_FMC_MspInit+0xa4>)
 8041946:	2201      	movs	r2, #1
 8041948:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 804194a:	4b21      	ldr	r3, [pc, #132]	; (80419d0 <HAL_FMC_MspInit+0xa8>)
 804194c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804194e:	4a20      	ldr	r2, [pc, #128]	; (80419d0 <HAL_FMC_MspInit+0xa8>)
 8041950:	f043 0301 	orr.w	r3, r3, #1
 8041954:	6393      	str	r3, [r2, #56]	; 0x38
 8041956:	4b1e      	ldr	r3, [pc, #120]	; (80419d0 <HAL_FMC_MspInit+0xa8>)
 8041958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804195a:	f003 0301 	and.w	r3, r3, #1
 804195e:	603b      	str	r3, [r7, #0]
 8041960:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8041962:	2307      	movs	r3, #7
 8041964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041966:	2302      	movs	r3, #2
 8041968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804196a:	2300      	movs	r3, #0
 804196c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804196e:	2303      	movs	r3, #3
 8041970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041972:	230c      	movs	r3, #12
 8041974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041976:	1d3b      	adds	r3, r7, #4
 8041978:	4619      	mov	r1, r3
 804197a:	4816      	ldr	r0, [pc, #88]	; (80419d4 <HAL_FMC_MspInit+0xac>)
 804197c:	f002 fcd6 	bl	804432c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8041980:	f64f 7380 	movw	r3, #65408	; 0xff80
 8041984:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041986:	2302      	movs	r3, #2
 8041988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804198a:	2300      	movs	r3, #0
 804198c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804198e:	2303      	movs	r3, #3
 8041990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041992:	230c      	movs	r3, #12
 8041994:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041996:	1d3b      	adds	r3, r7, #4
 8041998:	4619      	mov	r1, r3
 804199a:	480f      	ldr	r0, [pc, #60]	; (80419d8 <HAL_FMC_MspInit+0xb0>)
 804199c:	f002 fcc6 	bl	804432c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80419a0:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80419a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80419a6:	2302      	movs	r3, #2
 80419a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80419aa:	2300      	movs	r3, #0
 80419ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80419ae:	2303      	movs	r3, #3
 80419b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80419b2:	230c      	movs	r3, #12
 80419b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80419b6:	1d3b      	adds	r3, r7, #4
 80419b8:	4619      	mov	r1, r3
 80419ba:	4808      	ldr	r0, [pc, #32]	; (80419dc <HAL_FMC_MspInit+0xb4>)
 80419bc:	f002 fcb6 	bl	804432c <HAL_GPIO_Init>
 80419c0:	e000      	b.n	80419c4 <HAL_FMC_MspInit+0x9c>
    return;
 80419c2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80419c4:	3718      	adds	r7, #24
 80419c6:	46bd      	mov	sp, r7
 80419c8:	bd80      	pop	{r7, pc}
 80419ca:	bf00      	nop
 80419cc:	20000ff8 	.word	0x20000ff8
 80419d0:	40023800 	.word	0x40023800
 80419d4:	40021400 	.word	0x40021400
 80419d8:	40021000 	.word	0x40021000
 80419dc:	40020c00 	.word	0x40020c00

080419e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80419e0:	b580      	push	{r7, lr}
 80419e2:	b082      	sub	sp, #8
 80419e4:	af00      	add	r7, sp, #0
 80419e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80419e8:	f7ff ff9e 	bl	8041928 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80419ec:	bf00      	nop
 80419ee:	3708      	adds	r7, #8
 80419f0:	46bd      	mov	sp, r7
 80419f2:	bd80      	pop	{r7, pc}

080419f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80419f4:	b580      	push	{r7, lr}
 80419f6:	b08e      	sub	sp, #56	; 0x38
 80419f8:	af00      	add	r7, sp, #0
 80419fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80419fc:	2300      	movs	r3, #0
 80419fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041a00:	2300      	movs	r3, #0
 8041a02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041a04:	4b33      	ldr	r3, [pc, #204]	; (8041ad4 <HAL_InitTick+0xe0>)
 8041a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041a08:	4a32      	ldr	r2, [pc, #200]	; (8041ad4 <HAL_InitTick+0xe0>)
 8041a0a:	f043 0310 	orr.w	r3, r3, #16
 8041a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8041a10:	4b30      	ldr	r3, [pc, #192]	; (8041ad4 <HAL_InitTick+0xe0>)
 8041a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041a14:	f003 0310 	and.w	r3, r3, #16
 8041a18:	60fb      	str	r3, [r7, #12]
 8041a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041a1c:	f107 0210 	add.w	r2, r7, #16
 8041a20:	f107 0314 	add.w	r3, r7, #20
 8041a24:	4611      	mov	r1, r2
 8041a26:	4618      	mov	r0, r3
 8041a28:	f003 fb20 	bl	804506c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041a2c:	6a3b      	ldr	r3, [r7, #32]
 8041a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041a32:	2b00      	cmp	r3, #0
 8041a34:	d103      	bne.n	8041a3e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041a36:	f003 faf1 	bl	804501c <HAL_RCC_GetPCLK1Freq>
 8041a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8041a3c:	e004      	b.n	8041a48 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041a3e:	f003 faed 	bl	804501c <HAL_RCC_GetPCLK1Freq>
 8041a42:	4603      	mov	r3, r0
 8041a44:	005b      	lsls	r3, r3, #1
 8041a46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041a4a:	4a23      	ldr	r2, [pc, #140]	; (8041ad8 <HAL_InitTick+0xe4>)
 8041a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8041a50:	0c9b      	lsrs	r3, r3, #18
 8041a52:	3b01      	subs	r3, #1
 8041a54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041a56:	4b21      	ldr	r3, [pc, #132]	; (8041adc <HAL_InitTick+0xe8>)
 8041a58:	4a21      	ldr	r2, [pc, #132]	; (8041ae0 <HAL_InitTick+0xec>)
 8041a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041a5c:	4b1f      	ldr	r3, [pc, #124]	; (8041adc <HAL_InitTick+0xe8>)
 8041a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041a62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041a64:	4a1d      	ldr	r2, [pc, #116]	; (8041adc <HAL_InitTick+0xe8>)
 8041a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041a68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8041a6a:	4b1c      	ldr	r3, [pc, #112]	; (8041adc <HAL_InitTick+0xe8>)
 8041a6c:	2200      	movs	r2, #0
 8041a6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041a70:	4b1a      	ldr	r3, [pc, #104]	; (8041adc <HAL_InitTick+0xe8>)
 8041a72:	2200      	movs	r2, #0
 8041a74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8041a76:	4b19      	ldr	r3, [pc, #100]	; (8041adc <HAL_InitTick+0xe8>)
 8041a78:	2200      	movs	r2, #0
 8041a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041a7c:	4817      	ldr	r0, [pc, #92]	; (8041adc <HAL_InitTick+0xe8>)
 8041a7e:	f003 ff5f 	bl	8045940 <HAL_TIM_Base_Init>
 8041a82:	4603      	mov	r3, r0
 8041a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8041a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041a8c:	2b00      	cmp	r3, #0
 8041a8e:	d11b      	bne.n	8041ac8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8041a90:	4812      	ldr	r0, [pc, #72]	; (8041adc <HAL_InitTick+0xe8>)
 8041a92:	f003 ffad 	bl	80459f0 <HAL_TIM_Base_Start_IT>
 8041a96:	4603      	mov	r3, r0
 8041a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8041a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041aa0:	2b00      	cmp	r3, #0
 8041aa2:	d111      	bne.n	8041ac8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8041aa4:	2036      	movs	r0, #54	; 0x36
 8041aa6:	f001 f940 	bl	8042d2a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041aaa:	687b      	ldr	r3, [r7, #4]
 8041aac:	2b0f      	cmp	r3, #15
 8041aae:	d808      	bhi.n	8041ac2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8041ab0:	2200      	movs	r2, #0
 8041ab2:	6879      	ldr	r1, [r7, #4]
 8041ab4:	2036      	movs	r0, #54	; 0x36
 8041ab6:	f001 f91c 	bl	8042cf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041aba:	4a0a      	ldr	r2, [pc, #40]	; (8041ae4 <HAL_InitTick+0xf0>)
 8041abc:	687b      	ldr	r3, [r7, #4]
 8041abe:	6013      	str	r3, [r2, #0]
 8041ac0:	e002      	b.n	8041ac8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8041ac2:	2301      	movs	r3, #1
 8041ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8041acc:	4618      	mov	r0, r3
 8041ace:	3738      	adds	r7, #56	; 0x38
 8041ad0:	46bd      	mov	sp, r7
 8041ad2:	bd80      	pop	{r7, pc}
 8041ad4:	40023800 	.word	0x40023800
 8041ad8:	431bde83 	.word	0x431bde83
 8041adc:	20000ffc 	.word	0x20000ffc
 8041ae0:	40001000 	.word	0x40001000
 8041ae4:	20000008 	.word	0x20000008

08041ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041ae8:	b480      	push	{r7}
 8041aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041aec:	e7fe      	b.n	8041aec <NMI_Handler+0x4>

08041aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041aee:	b480      	push	{r7}
 8041af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041af2:	e7fe      	b.n	8041af2 <HardFault_Handler+0x4>

08041af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041af4:	b480      	push	{r7}
 8041af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041af8:	e7fe      	b.n	8041af8 <MemManage_Handler+0x4>

08041afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041afa:	b480      	push	{r7}
 8041afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041afe:	e7fe      	b.n	8041afe <BusFault_Handler+0x4>

08041b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041b00:	b480      	push	{r7}
 8041b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041b04:	e7fe      	b.n	8041b04 <UsageFault_Handler+0x4>

08041b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041b06:	b480      	push	{r7}
 8041b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041b0a:	bf00      	nop
 8041b0c:	46bd      	mov	sp, r7
 8041b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b12:	4770      	bx	lr

08041b14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8041b14:	b580      	push	{r7, lr}
 8041b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8041b18:	4802      	ldr	r0, [pc, #8]	; (8041b24 <CAN1_RX0_IRQHandler+0x10>)
 8041b1a:	f000 fdc7 	bl	80426ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8041b1e:	bf00      	nop
 8041b20:	bd80      	pop	{r7, pc}
 8041b22:	bf00      	nop
 8041b24:	200003a8 	.word	0x200003a8

08041b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8041b28:	b580      	push	{r7, lr}
 8041b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8041b2c:	4802      	ldr	r0, [pc, #8]	; (8041b38 <USART1_IRQHandler+0x10>)
 8041b2e:	f004 fbdf 	bl	80462f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8041b32:	bf00      	nop
 8041b34:	bd80      	pop	{r7, pc}
 8041b36:	bf00      	nop
 8041b38:	20000554 	.word	0x20000554

08041b3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8041b3c:	b580      	push	{r7, lr}
 8041b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8041b40:	4802      	ldr	r0, [pc, #8]	; (8041b4c <USART3_IRQHandler+0x10>)
 8041b42:	f004 fbd5 	bl	80462f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8041b46:	bf00      	nop
 8041b48:	bd80      	pop	{r7, pc}
 8041b4a:	bf00      	nop
 8041b4c:	200005dc 	.word	0x200005dc

08041b50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8041b50:	b580      	push	{r7, lr}
 8041b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8041b54:	4802      	ldr	r0, [pc, #8]	; (8041b60 <UART4_IRQHandler+0x10>)
 8041b56:	f004 fbcb 	bl	80462f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8041b5a:	bf00      	nop
 8041b5c:	bd80      	pop	{r7, pc}
 8041b5e:	bf00      	nop
 8041b60:	20000444 	.word	0x20000444

08041b64 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8041b64:	b580      	push	{r7, lr}
 8041b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8041b68:	4802      	ldr	r0, [pc, #8]	; (8041b74 <UART5_IRQHandler+0x10>)
 8041b6a:	f004 fbc1 	bl	80462f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8041b6e:	bf00      	nop
 8041b70:	bd80      	pop	{r7, pc}
 8041b72:	bf00      	nop
 8041b74:	200004cc 	.word	0x200004cc

08041b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041b78:	b580      	push	{r7, lr}
 8041b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041b7c:	4802      	ldr	r0, [pc, #8]	; (8041b88 <TIM6_DAC_IRQHandler+0x10>)
 8041b7e:	f003 ffaf 	bl	8045ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8041b82:	bf00      	nop
 8041b84:	bd80      	pop	{r7, pc}
 8041b86:	bf00      	nop
 8041b88:	20000ffc 	.word	0x20000ffc

08041b8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8041b8c:	b580      	push	{r7, lr}
 8041b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8041b90:	4802      	ldr	r0, [pc, #8]	; (8041b9c <TIM7_IRQHandler+0x10>)
 8041b92:	f003 ffa5 	bl	8045ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8041b96:	bf00      	nop
 8041b98:	bd80      	pop	{r7, pc}
 8041b9a:	bf00      	nop
 8041b9c:	200003f8 	.word	0x200003f8

08041ba0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8041ba0:	b580      	push	{r7, lr}
 8041ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8041ba4:	4802      	ldr	r0, [pc, #8]	; (8041bb0 <ETH_IRQHandler+0x10>)
 8041ba6:	f001 fced 	bl	8043584 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8041baa:	bf00      	nop
 8041bac:	bd80      	pop	{r7, pc}
 8041bae:	bf00      	nop
 8041bb0:	20005a2c 	.word	0x20005a2c

08041bb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8041bb4:	b580      	push	{r7, lr}
 8041bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8041bb8:	4802      	ldr	r0, [pc, #8]	; (8041bc4 <USART6_IRQHandler+0x10>)
 8041bba:	f004 fb99 	bl	80462f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8041bbe:	bf00      	nop
 8041bc0:	bd80      	pop	{r7, pc}
 8041bc2:	bf00      	nop
 8041bc4:	20000664 	.word	0x20000664

08041bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8041bc8:	b480      	push	{r7}
 8041bca:	af00      	add	r7, sp, #0
	return 1;
 8041bcc:	2301      	movs	r3, #1
}
 8041bce:	4618      	mov	r0, r3
 8041bd0:	46bd      	mov	sp, r7
 8041bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041bd6:	4770      	bx	lr

08041bd8 <_kill>:

int _kill(int pid, int sig)
{
 8041bd8:	b480      	push	{r7}
 8041bda:	b083      	sub	sp, #12
 8041bdc:	af00      	add	r7, sp, #0
 8041bde:	6078      	str	r0, [r7, #4]
 8041be0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8041be2:	4b05      	ldr	r3, [pc, #20]	; (8041bf8 <_kill+0x20>)
 8041be4:	2216      	movs	r2, #22
 8041be6:	601a      	str	r2, [r3, #0]
	return -1;
 8041be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8041bec:	4618      	mov	r0, r3
 8041bee:	370c      	adds	r7, #12
 8041bf0:	46bd      	mov	sp, r7
 8041bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041bf6:	4770      	bx	lr
 8041bf8:	2000b738 	.word	0x2000b738

08041bfc <_exit>:

void _exit (int status)
{
 8041bfc:	b580      	push	{r7, lr}
 8041bfe:	b082      	sub	sp, #8
 8041c00:	af00      	add	r7, sp, #0
 8041c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8041c04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8041c08:	6878      	ldr	r0, [r7, #4]
 8041c0a:	f7ff ffe5 	bl	8041bd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8041c0e:	e7fe      	b.n	8041c0e <_exit+0x12>

08041c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041c10:	b580      	push	{r7, lr}
 8041c12:	b086      	sub	sp, #24
 8041c14:	af00      	add	r7, sp, #0
 8041c16:	60f8      	str	r0, [r7, #12]
 8041c18:	60b9      	str	r1, [r7, #8]
 8041c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041c1c:	2300      	movs	r3, #0
 8041c1e:	617b      	str	r3, [r7, #20]
 8041c20:	e00a      	b.n	8041c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8041c22:	f3af 8000 	nop.w
 8041c26:	4601      	mov	r1, r0
 8041c28:	68bb      	ldr	r3, [r7, #8]
 8041c2a:	1c5a      	adds	r2, r3, #1
 8041c2c:	60ba      	str	r2, [r7, #8]
 8041c2e:	b2ca      	uxtb	r2, r1
 8041c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041c32:	697b      	ldr	r3, [r7, #20]
 8041c34:	3301      	adds	r3, #1
 8041c36:	617b      	str	r3, [r7, #20]
 8041c38:	697a      	ldr	r2, [r7, #20]
 8041c3a:	687b      	ldr	r3, [r7, #4]
 8041c3c:	429a      	cmp	r2, r3
 8041c3e:	dbf0      	blt.n	8041c22 <_read+0x12>
	}

return len;
 8041c40:	687b      	ldr	r3, [r7, #4]
}
 8041c42:	4618      	mov	r0, r3
 8041c44:	3718      	adds	r7, #24
 8041c46:	46bd      	mov	sp, r7
 8041c48:	bd80      	pop	{r7, pc}

08041c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8041c4a:	b580      	push	{r7, lr}
 8041c4c:	b086      	sub	sp, #24
 8041c4e:	af00      	add	r7, sp, #0
 8041c50:	60f8      	str	r0, [r7, #12]
 8041c52:	60b9      	str	r1, [r7, #8]
 8041c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041c56:	2300      	movs	r3, #0
 8041c58:	617b      	str	r3, [r7, #20]
 8041c5a:	e009      	b.n	8041c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8041c5c:	68bb      	ldr	r3, [r7, #8]
 8041c5e:	1c5a      	adds	r2, r3, #1
 8041c60:	60ba      	str	r2, [r7, #8]
 8041c62:	781b      	ldrb	r3, [r3, #0]
 8041c64:	4618      	mov	r0, r3
 8041c66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041c6a:	697b      	ldr	r3, [r7, #20]
 8041c6c:	3301      	adds	r3, #1
 8041c6e:	617b      	str	r3, [r7, #20]
 8041c70:	697a      	ldr	r2, [r7, #20]
 8041c72:	687b      	ldr	r3, [r7, #4]
 8041c74:	429a      	cmp	r2, r3
 8041c76:	dbf1      	blt.n	8041c5c <_write+0x12>
	}
	return len;
 8041c78:	687b      	ldr	r3, [r7, #4]
}
 8041c7a:	4618      	mov	r0, r3
 8041c7c:	3718      	adds	r7, #24
 8041c7e:	46bd      	mov	sp, r7
 8041c80:	bd80      	pop	{r7, pc}

08041c82 <_close>:

int _close(int file)
{
 8041c82:	b480      	push	{r7}
 8041c84:	b083      	sub	sp, #12
 8041c86:	af00      	add	r7, sp, #0
 8041c88:	6078      	str	r0, [r7, #4]
	return -1;
 8041c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8041c8e:	4618      	mov	r0, r3
 8041c90:	370c      	adds	r7, #12
 8041c92:	46bd      	mov	sp, r7
 8041c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c98:	4770      	bx	lr

08041c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041c9a:	b480      	push	{r7}
 8041c9c:	b083      	sub	sp, #12
 8041c9e:	af00      	add	r7, sp, #0
 8041ca0:	6078      	str	r0, [r7, #4]
 8041ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8041ca4:	683b      	ldr	r3, [r7, #0]
 8041ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041caa:	605a      	str	r2, [r3, #4]
	return 0;
 8041cac:	2300      	movs	r3, #0
}
 8041cae:	4618      	mov	r0, r3
 8041cb0:	370c      	adds	r7, #12
 8041cb2:	46bd      	mov	sp, r7
 8041cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cb8:	4770      	bx	lr

08041cba <_isatty>:

int _isatty(int file)
{
 8041cba:	b480      	push	{r7}
 8041cbc:	b083      	sub	sp, #12
 8041cbe:	af00      	add	r7, sp, #0
 8041cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8041cc2:	2301      	movs	r3, #1
}
 8041cc4:	4618      	mov	r0, r3
 8041cc6:	370c      	adds	r7, #12
 8041cc8:	46bd      	mov	sp, r7
 8041cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cce:	4770      	bx	lr

08041cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041cd0:	b480      	push	{r7}
 8041cd2:	b085      	sub	sp, #20
 8041cd4:	af00      	add	r7, sp, #0
 8041cd6:	60f8      	str	r0, [r7, #12]
 8041cd8:	60b9      	str	r1, [r7, #8]
 8041cda:	607a      	str	r2, [r7, #4]
	return 0;
 8041cdc:	2300      	movs	r3, #0
}
 8041cde:	4618      	mov	r0, r3
 8041ce0:	3714      	adds	r7, #20
 8041ce2:	46bd      	mov	sp, r7
 8041ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ce8:	4770      	bx	lr
	...

08041cec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041cec:	b480      	push	{r7}
 8041cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041cf0:	4b07      	ldr	r3, [pc, #28]	; (8041d10 <SystemInit+0x24>)
 8041cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041cf6:	4a06      	ldr	r2, [pc, #24]	; (8041d10 <SystemInit+0x24>)
 8041cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041d00:	4b03      	ldr	r3, [pc, #12]	; (8041d10 <SystemInit+0x24>)
 8041d02:	4a04      	ldr	r2, [pc, #16]	; (8041d14 <SystemInit+0x28>)
 8041d04:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8041d06:	bf00      	nop
 8041d08:	46bd      	mov	sp, r7
 8041d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d0e:	4770      	bx	lr
 8041d10:	e000ed00 	.word	0xe000ed00
 8041d14:	08040000 	.word	0x08040000

08041d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8041d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041d1c:	480d      	ldr	r0, [pc, #52]	; (8041d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041d1e:	490e      	ldr	r1, [pc, #56]	; (8041d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041d20:	4a0e      	ldr	r2, [pc, #56]	; (8041d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8041d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041d24:	e002      	b.n	8041d2c <LoopCopyDataInit>

08041d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041d2a:	3304      	adds	r3, #4

08041d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041d30:	d3f9      	bcc.n	8041d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041d32:	4a0b      	ldr	r2, [pc, #44]	; (8041d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041d34:	4c0b      	ldr	r4, [pc, #44]	; (8041d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8041d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041d38:	e001      	b.n	8041d3e <LoopFillZerobss>

08041d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041d3c:	3204      	adds	r2, #4

08041d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041d40:	d3fb      	bcc.n	8041d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8041d42:	f7ff ffd3 	bl	8041cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8041d46:	f017 f81d 	bl	8058d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8041d4a:	f7ff faf3 	bl	8041334 <main>
  bx  lr    
 8041d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8041d50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8041d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8041d58:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8041d5c:	0805da9c 	.word	0x0805da9c
  ldr r2, =_sbss
 8041d60:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8041d64:	2000b73c 	.word	0x2000b73c

08041d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8041d68:	e7fe      	b.n	8041d68 <ADC_IRQHandler>

08041d6a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8041d6a:	b480      	push	{r7}
 8041d6c:	b083      	sub	sp, #12
 8041d6e:	af00      	add	r7, sp, #0
 8041d70:	6078      	str	r0, [r7, #4]
 8041d72:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8041d74:	687b      	ldr	r3, [r7, #4]
 8041d76:	2b00      	cmp	r3, #0
 8041d78:	d00b      	beq.n	8041d92 <LAN8742_RegisterBusIO+0x28>
 8041d7a:	683b      	ldr	r3, [r7, #0]
 8041d7c:	68db      	ldr	r3, [r3, #12]
 8041d7e:	2b00      	cmp	r3, #0
 8041d80:	d007      	beq.n	8041d92 <LAN8742_RegisterBusIO+0x28>
 8041d82:	683b      	ldr	r3, [r7, #0]
 8041d84:	689b      	ldr	r3, [r3, #8]
 8041d86:	2b00      	cmp	r3, #0
 8041d88:	d003      	beq.n	8041d92 <LAN8742_RegisterBusIO+0x28>
 8041d8a:	683b      	ldr	r3, [r7, #0]
 8041d8c:	691b      	ldr	r3, [r3, #16]
 8041d8e:	2b00      	cmp	r3, #0
 8041d90:	d102      	bne.n	8041d98 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8041d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8041d96:	e014      	b.n	8041dc2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8041d98:	683b      	ldr	r3, [r7, #0]
 8041d9a:	681a      	ldr	r2, [r3, #0]
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8041da0:	683b      	ldr	r3, [r7, #0]
 8041da2:	685a      	ldr	r2, [r3, #4]
 8041da4:	687b      	ldr	r3, [r7, #4]
 8041da6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8041da8:	683b      	ldr	r3, [r7, #0]
 8041daa:	68da      	ldr	r2, [r3, #12]
 8041dac:	687b      	ldr	r3, [r7, #4]
 8041dae:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8041db0:	683b      	ldr	r3, [r7, #0]
 8041db2:	689a      	ldr	r2, [r3, #8]
 8041db4:	687b      	ldr	r3, [r7, #4]
 8041db6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8041db8:	683b      	ldr	r3, [r7, #0]
 8041dba:	691a      	ldr	r2, [r3, #16]
 8041dbc:	687b      	ldr	r3, [r7, #4]
 8041dbe:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8041dc0:	2300      	movs	r3, #0
}
 8041dc2:	4618      	mov	r0, r3
 8041dc4:	370c      	adds	r7, #12
 8041dc6:	46bd      	mov	sp, r7
 8041dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041dcc:	4770      	bx	lr

08041dce <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8041dce:	b580      	push	{r7, lr}
 8041dd0:	b086      	sub	sp, #24
 8041dd2:	af00      	add	r7, sp, #0
 8041dd4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8041dd6:	2300      	movs	r3, #0
 8041dd8:	60fb      	str	r3, [r7, #12]
 8041dda:	2300      	movs	r3, #0
 8041ddc:	60bb      	str	r3, [r7, #8]
 8041dde:	2300      	movs	r3, #0
 8041de0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8041de2:	2300      	movs	r3, #0
 8041de4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8041de6:	687b      	ldr	r3, [r7, #4]
 8041de8:	685b      	ldr	r3, [r3, #4]
 8041dea:	2b00      	cmp	r3, #0
 8041dec:	d17c      	bne.n	8041ee8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8041dee:	687b      	ldr	r3, [r7, #4]
 8041df0:	689b      	ldr	r3, [r3, #8]
 8041df2:	2b00      	cmp	r3, #0
 8041df4:	d002      	beq.n	8041dfc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8041df6:	687b      	ldr	r3, [r7, #4]
 8041df8:	689b      	ldr	r3, [r3, #8]
 8041dfa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8041dfc:	687b      	ldr	r3, [r7, #4]
 8041dfe:	2220      	movs	r2, #32
 8041e00:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8041e02:	2300      	movs	r3, #0
 8041e04:	617b      	str	r3, [r7, #20]
 8041e06:	e01c      	b.n	8041e42 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	695b      	ldr	r3, [r3, #20]
 8041e0c:	f107 0208 	add.w	r2, r7, #8
 8041e10:	2112      	movs	r1, #18
 8041e12:	6978      	ldr	r0, [r7, #20]
 8041e14:	4798      	blx	r3
 8041e16:	4603      	mov	r3, r0
 8041e18:	2b00      	cmp	r3, #0
 8041e1a:	da03      	bge.n	8041e24 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8041e1c:	f06f 0304 	mvn.w	r3, #4
 8041e20:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8041e22:	e00b      	b.n	8041e3c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8041e24:	68bb      	ldr	r3, [r7, #8]
 8041e26:	f003 031f 	and.w	r3, r3, #31
 8041e2a:	697a      	ldr	r2, [r7, #20]
 8041e2c:	429a      	cmp	r2, r3
 8041e2e:	d105      	bne.n	8041e3c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8041e30:	687b      	ldr	r3, [r7, #4]
 8041e32:	697a      	ldr	r2, [r7, #20]
 8041e34:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8041e36:	2300      	movs	r3, #0
 8041e38:	613b      	str	r3, [r7, #16]
         break;
 8041e3a:	e005      	b.n	8041e48 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8041e3c:	697b      	ldr	r3, [r7, #20]
 8041e3e:	3301      	adds	r3, #1
 8041e40:	617b      	str	r3, [r7, #20]
 8041e42:	697b      	ldr	r3, [r7, #20]
 8041e44:	2b1f      	cmp	r3, #31
 8041e46:	d9df      	bls.n	8041e08 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	681b      	ldr	r3, [r3, #0]
 8041e4c:	2b1f      	cmp	r3, #31
 8041e4e:	d902      	bls.n	8041e56 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8041e50:	f06f 0302 	mvn.w	r3, #2
 8041e54:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8041e56:	693b      	ldr	r3, [r7, #16]
 8041e58:	2b00      	cmp	r3, #0
 8041e5a:	d145      	bne.n	8041ee8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8041e5c:	687b      	ldr	r3, [r7, #4]
 8041e5e:	691b      	ldr	r3, [r3, #16]
 8041e60:	687a      	ldr	r2, [r7, #4]
 8041e62:	6810      	ldr	r0, [r2, #0]
 8041e64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8041e68:	2100      	movs	r1, #0
 8041e6a:	4798      	blx	r3
 8041e6c:	4603      	mov	r3, r0
 8041e6e:	2b00      	cmp	r3, #0
 8041e70:	db37      	blt.n	8041ee2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8041e72:	687b      	ldr	r3, [r7, #4]
 8041e74:	695b      	ldr	r3, [r3, #20]
 8041e76:	687a      	ldr	r2, [r7, #4]
 8041e78:	6810      	ldr	r0, [r2, #0]
 8041e7a:	f107 0208 	add.w	r2, r7, #8
 8041e7e:	2100      	movs	r1, #0
 8041e80:	4798      	blx	r3
 8041e82:	4603      	mov	r3, r0
 8041e84:	2b00      	cmp	r3, #0
 8041e86:	db28      	blt.n	8041eda <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8041e88:	687b      	ldr	r3, [r7, #4]
 8041e8a:	699b      	ldr	r3, [r3, #24]
 8041e8c:	4798      	blx	r3
 8041e8e:	4603      	mov	r3, r0
 8041e90:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8041e92:	e01c      	b.n	8041ece <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8041e94:	687b      	ldr	r3, [r7, #4]
 8041e96:	699b      	ldr	r3, [r3, #24]
 8041e98:	4798      	blx	r3
 8041e9a:	4603      	mov	r3, r0
 8041e9c:	461a      	mov	r2, r3
 8041e9e:	68fb      	ldr	r3, [r7, #12]
 8041ea0:	1ad3      	subs	r3, r2, r3
 8041ea2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8041ea6:	d80e      	bhi.n	8041ec6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8041ea8:	687b      	ldr	r3, [r7, #4]
 8041eaa:	695b      	ldr	r3, [r3, #20]
 8041eac:	687a      	ldr	r2, [r7, #4]
 8041eae:	6810      	ldr	r0, [r2, #0]
 8041eb0:	f107 0208 	add.w	r2, r7, #8
 8041eb4:	2100      	movs	r1, #0
 8041eb6:	4798      	blx	r3
 8041eb8:	4603      	mov	r3, r0
 8041eba:	2b00      	cmp	r3, #0
 8041ebc:	da07      	bge.n	8041ece <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8041ebe:	f06f 0304 	mvn.w	r3, #4
 8041ec2:	613b      	str	r3, [r7, #16]
                 break;
 8041ec4:	e010      	b.n	8041ee8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8041ec6:	f06f 0301 	mvn.w	r3, #1
 8041eca:	613b      	str	r3, [r7, #16]
               break;
 8041ecc:	e00c      	b.n	8041ee8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8041ece:	68bb      	ldr	r3, [r7, #8]
 8041ed0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041ed4:	2b00      	cmp	r3, #0
 8041ed6:	d1dd      	bne.n	8041e94 <LAN8742_Init+0xc6>
 8041ed8:	e006      	b.n	8041ee8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8041eda:	f06f 0304 	mvn.w	r3, #4
 8041ede:	613b      	str	r3, [r7, #16]
 8041ee0:	e002      	b.n	8041ee8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8041ee2:	f06f 0303 	mvn.w	r3, #3
 8041ee6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8041ee8:	693b      	ldr	r3, [r7, #16]
 8041eea:	2b00      	cmp	r3, #0
 8041eec:	d113      	bne.n	8041f16 <LAN8742_Init+0x148>
   {
     tickstart =  pObj->IO.GetTick();
 8041eee:	687b      	ldr	r3, [r7, #4]
 8041ef0:	699b      	ldr	r3, [r3, #24]
 8041ef2:	4798      	blx	r3
 8041ef4:	4603      	mov	r3, r0
 8041ef6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 5s to perform initialization */
     //for temp patch for waiting initialization of auto negotiation

     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8041ef8:	bf00      	nop
 8041efa:	687b      	ldr	r3, [r7, #4]
 8041efc:	699b      	ldr	r3, [r3, #24]
 8041efe:	4798      	blx	r3
 8041f00:	4603      	mov	r3, r0
 8041f02:	461a      	mov	r2, r3
 8041f04:	68fb      	ldr	r3, [r7, #12]
 8041f06:	1ad3      	subs	r3, r2, r3
 8041f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8041f0c:	4293      	cmp	r3, r2
 8041f0e:	d9f4      	bls.n	8041efa <LAN8742_Init+0x12c>
     {
     }

     pObj->Is_Initialized = 1;
 8041f10:	687b      	ldr	r3, [r7, #4]
 8041f12:	2201      	movs	r2, #1
 8041f14:	605a      	str	r2, [r3, #4]
   }

   return status;
 8041f16:	693b      	ldr	r3, [r7, #16]
 }
 8041f18:	4618      	mov	r0, r3
 8041f1a:	3718      	adds	r7, #24
 8041f1c:	46bd      	mov	sp, r7
 8041f1e:	bd80      	pop	{r7, pc}

08041f20 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8041f20:	b580      	push	{r7, lr}
 8041f22:	b084      	sub	sp, #16
 8041f24:	af00      	add	r7, sp, #0
 8041f26:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8041f28:	2300      	movs	r3, #0
 8041f2a:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8041f2c:	687b      	ldr	r3, [r7, #4]
 8041f2e:	695b      	ldr	r3, [r3, #20]
 8041f30:	687a      	ldr	r2, [r7, #4]
 8041f32:	6810      	ldr	r0, [r2, #0]
 8041f34:	f107 020c 	add.w	r2, r7, #12
 8041f38:	2101      	movs	r1, #1
 8041f3a:	4798      	blx	r3
 8041f3c:	4603      	mov	r3, r0
 8041f3e:	2b00      	cmp	r3, #0
 8041f40:	da02      	bge.n	8041f48 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8041f42:	f06f 0304 	mvn.w	r3, #4
 8041f46:	e06e      	b.n	8042026 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8041f48:	687b      	ldr	r3, [r7, #4]
 8041f4a:	695b      	ldr	r3, [r3, #20]
 8041f4c:	687a      	ldr	r2, [r7, #4]
 8041f4e:	6810      	ldr	r0, [r2, #0]
 8041f50:	f107 020c 	add.w	r2, r7, #12
 8041f54:	2101      	movs	r1, #1
 8041f56:	4798      	blx	r3
 8041f58:	4603      	mov	r3, r0
 8041f5a:	2b00      	cmp	r3, #0
 8041f5c:	da02      	bge.n	8041f64 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8041f5e:	f06f 0304 	mvn.w	r3, #4
 8041f62:	e060      	b.n	8042026 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8041f64:	68fb      	ldr	r3, [r7, #12]
 8041f66:	f003 0304 	and.w	r3, r3, #4
 8041f6a:	2b00      	cmp	r3, #0
 8041f6c:	d101      	bne.n	8041f72 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8041f6e:	2301      	movs	r3, #1
 8041f70:	e059      	b.n	8042026 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8041f72:	687b      	ldr	r3, [r7, #4]
 8041f74:	695b      	ldr	r3, [r3, #20]
 8041f76:	687a      	ldr	r2, [r7, #4]
 8041f78:	6810      	ldr	r0, [r2, #0]
 8041f7a:	f107 020c 	add.w	r2, r7, #12
 8041f7e:	2100      	movs	r1, #0
 8041f80:	4798      	blx	r3
 8041f82:	4603      	mov	r3, r0
 8041f84:	2b00      	cmp	r3, #0
 8041f86:	da02      	bge.n	8041f8e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8041f88:	f06f 0304 	mvn.w	r3, #4
 8041f8c:	e04b      	b.n	8042026 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8041f8e:	68fb      	ldr	r3, [r7, #12]
 8041f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041f94:	2b00      	cmp	r3, #0
 8041f96:	d11b      	bne.n	8041fd0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8041f98:	68fb      	ldr	r3, [r7, #12]
 8041f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041f9e:	2b00      	cmp	r3, #0
 8041fa0:	d006      	beq.n	8041fb0 <LAN8742_GetLinkState+0x90>
 8041fa2:	68fb      	ldr	r3, [r7, #12]
 8041fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041fa8:	2b00      	cmp	r3, #0
 8041faa:	d001      	beq.n	8041fb0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8041fac:	2302      	movs	r3, #2
 8041fae:	e03a      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8041fb0:	68fb      	ldr	r3, [r7, #12]
 8041fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041fb6:	2b00      	cmp	r3, #0
 8041fb8:	d001      	beq.n	8041fbe <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8041fba:	2303      	movs	r3, #3
 8041fbc:	e033      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8041fbe:	68fb      	ldr	r3, [r7, #12]
 8041fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041fc4:	2b00      	cmp	r3, #0
 8041fc6:	d001      	beq.n	8041fcc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8041fc8:	2304      	movs	r3, #4
 8041fca:	e02c      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8041fcc:	2305      	movs	r3, #5
 8041fce:	e02a      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8041fd0:	687b      	ldr	r3, [r7, #4]
 8041fd2:	695b      	ldr	r3, [r3, #20]
 8041fd4:	687a      	ldr	r2, [r7, #4]
 8041fd6:	6810      	ldr	r0, [r2, #0]
 8041fd8:	f107 020c 	add.w	r2, r7, #12
 8041fdc:	211f      	movs	r1, #31
 8041fde:	4798      	blx	r3
 8041fe0:	4603      	mov	r3, r0
 8041fe2:	2b00      	cmp	r3, #0
 8041fe4:	da02      	bge.n	8041fec <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8041fe6:	f06f 0304 	mvn.w	r3, #4
 8041fea:	e01c      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8041fec:	68fb      	ldr	r3, [r7, #12]
 8041fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041ff2:	2b00      	cmp	r3, #0
 8041ff4:	d101      	bne.n	8041ffa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8041ff6:	2306      	movs	r3, #6
 8041ff8:	e015      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8041ffa:	68fb      	ldr	r3, [r7, #12]
 8041ffc:	f003 031c 	and.w	r3, r3, #28
 8042000:	2b18      	cmp	r3, #24
 8042002:	d101      	bne.n	8042008 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8042004:	2302      	movs	r3, #2
 8042006:	e00e      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8042008:	68fb      	ldr	r3, [r7, #12]
 804200a:	f003 031c 	and.w	r3, r3, #28
 804200e:	2b08      	cmp	r3, #8
 8042010:	d101      	bne.n	8042016 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8042012:	2303      	movs	r3, #3
 8042014:	e007      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8042016:	68fb      	ldr	r3, [r7, #12]
 8042018:	f003 031c 	and.w	r3, r3, #28
 804201c:	2b14      	cmp	r3, #20
 804201e:	d101      	bne.n	8042024 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8042020:	2304      	movs	r3, #4
 8042022:	e000      	b.n	8042026 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8042024:	2305      	movs	r3, #5
    }				
  }
}
 8042026:	4618      	mov	r0, r3
 8042028:	3710      	adds	r7, #16
 804202a:	46bd      	mov	sp, r7
 804202c:	bd80      	pop	{r7, pc}

0804202e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804202e:	b580      	push	{r7, lr}
 8042030:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8042032:	2003      	movs	r0, #3
 8042034:	f000 fe52 	bl	8042cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8042038:	200f      	movs	r0, #15
 804203a:	f7ff fcdb 	bl	80419f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 804203e:	f7ff fa11 	bl	8041464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8042042:	2300      	movs	r3, #0
}
 8042044:	4618      	mov	r0, r3
 8042046:	bd80      	pop	{r7, pc}

08042048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8042048:	b480      	push	{r7}
 804204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 804204c:	4b06      	ldr	r3, [pc, #24]	; (8042068 <HAL_IncTick+0x20>)
 804204e:	781b      	ldrb	r3, [r3, #0]
 8042050:	461a      	mov	r2, r3
 8042052:	4b06      	ldr	r3, [pc, #24]	; (804206c <HAL_IncTick+0x24>)
 8042054:	681b      	ldr	r3, [r3, #0]
 8042056:	4413      	add	r3, r2
 8042058:	4a04      	ldr	r2, [pc, #16]	; (804206c <HAL_IncTick+0x24>)
 804205a:	6013      	str	r3, [r2, #0]
}
 804205c:	bf00      	nop
 804205e:	46bd      	mov	sp, r7
 8042060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042064:	4770      	bx	lr
 8042066:	bf00      	nop
 8042068:	2000000c 	.word	0x2000000c
 804206c:	20001048 	.word	0x20001048

08042070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8042070:	b480      	push	{r7}
 8042072:	af00      	add	r7, sp, #0
  return uwTick;
 8042074:	4b03      	ldr	r3, [pc, #12]	; (8042084 <HAL_GetTick+0x14>)
 8042076:	681b      	ldr	r3, [r3, #0]
}
 8042078:	4618      	mov	r0, r3
 804207a:	46bd      	mov	sp, r7
 804207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042080:	4770      	bx	lr
 8042082:	bf00      	nop
 8042084:	20001048 	.word	0x20001048

08042088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8042088:	b580      	push	{r7, lr}
 804208a:	b084      	sub	sp, #16
 804208c:	af00      	add	r7, sp, #0
 804208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8042090:	f7ff ffee 	bl	8042070 <HAL_GetTick>
 8042094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8042096:	687b      	ldr	r3, [r7, #4]
 8042098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 804209a:	68fb      	ldr	r3, [r7, #12]
 804209c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80420a0:	d005      	beq.n	80420ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80420a2:	4b0a      	ldr	r3, [pc, #40]	; (80420cc <HAL_Delay+0x44>)
 80420a4:	781b      	ldrb	r3, [r3, #0]
 80420a6:	461a      	mov	r2, r3
 80420a8:	68fb      	ldr	r3, [r7, #12]
 80420aa:	4413      	add	r3, r2
 80420ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80420ae:	bf00      	nop
 80420b0:	f7ff ffde 	bl	8042070 <HAL_GetTick>
 80420b4:	4602      	mov	r2, r0
 80420b6:	68bb      	ldr	r3, [r7, #8]
 80420b8:	1ad3      	subs	r3, r2, r3
 80420ba:	68fa      	ldr	r2, [r7, #12]
 80420bc:	429a      	cmp	r2, r3
 80420be:	d8f7      	bhi.n	80420b0 <HAL_Delay+0x28>
  {
  }
}
 80420c0:	bf00      	nop
 80420c2:	bf00      	nop
 80420c4:	3710      	adds	r7, #16
 80420c6:	46bd      	mov	sp, r7
 80420c8:	bd80      	pop	{r7, pc}
 80420ca:	bf00      	nop
 80420cc:	2000000c 	.word	0x2000000c

080420d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80420d0:	b580      	push	{r7, lr}
 80420d2:	b084      	sub	sp, #16
 80420d4:	af00      	add	r7, sp, #0
 80420d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80420d8:	687b      	ldr	r3, [r7, #4]
 80420da:	2b00      	cmp	r3, #0
 80420dc:	d101      	bne.n	80420e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80420de:	2301      	movs	r3, #1
 80420e0:	e0ed      	b.n	80422be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80420e2:	687b      	ldr	r3, [r7, #4]
 80420e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80420e8:	b2db      	uxtb	r3, r3
 80420ea:	2b00      	cmp	r3, #0
 80420ec:	d102      	bne.n	80420f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80420ee:	6878      	ldr	r0, [r7, #4]
 80420f0:	f7ff f9e0 	bl	80414b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80420f4:	687b      	ldr	r3, [r7, #4]
 80420f6:	681b      	ldr	r3, [r3, #0]
 80420f8:	681a      	ldr	r2, [r3, #0]
 80420fa:	687b      	ldr	r3, [r7, #4]
 80420fc:	681b      	ldr	r3, [r3, #0]
 80420fe:	f042 0201 	orr.w	r2, r2, #1
 8042102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042104:	f7ff ffb4 	bl	8042070 <HAL_GetTick>
 8042108:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 804210a:	e012      	b.n	8042132 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 804210c:	f7ff ffb0 	bl	8042070 <HAL_GetTick>
 8042110:	4602      	mov	r2, r0
 8042112:	68fb      	ldr	r3, [r7, #12]
 8042114:	1ad3      	subs	r3, r2, r3
 8042116:	2b0a      	cmp	r3, #10
 8042118:	d90b      	bls.n	8042132 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 804211a:	687b      	ldr	r3, [r7, #4]
 804211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804211e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8042122:	687b      	ldr	r3, [r7, #4]
 8042124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8042126:	687b      	ldr	r3, [r7, #4]
 8042128:	2205      	movs	r2, #5
 804212a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 804212e:	2301      	movs	r3, #1
 8042130:	e0c5      	b.n	80422be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8042132:	687b      	ldr	r3, [r7, #4]
 8042134:	681b      	ldr	r3, [r3, #0]
 8042136:	685b      	ldr	r3, [r3, #4]
 8042138:	f003 0301 	and.w	r3, r3, #1
 804213c:	2b00      	cmp	r3, #0
 804213e:	d0e5      	beq.n	804210c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8042140:	687b      	ldr	r3, [r7, #4]
 8042142:	681b      	ldr	r3, [r3, #0]
 8042144:	681a      	ldr	r2, [r3, #0]
 8042146:	687b      	ldr	r3, [r7, #4]
 8042148:	681b      	ldr	r3, [r3, #0]
 804214a:	f022 0202 	bic.w	r2, r2, #2
 804214e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042150:	f7ff ff8e 	bl	8042070 <HAL_GetTick>
 8042154:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8042156:	e012      	b.n	804217e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8042158:	f7ff ff8a 	bl	8042070 <HAL_GetTick>
 804215c:	4602      	mov	r2, r0
 804215e:	68fb      	ldr	r3, [r7, #12]
 8042160:	1ad3      	subs	r3, r2, r3
 8042162:	2b0a      	cmp	r3, #10
 8042164:	d90b      	bls.n	804217e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804216a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 804216e:	687b      	ldr	r3, [r7, #4]
 8042170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8042172:	687b      	ldr	r3, [r7, #4]
 8042174:	2205      	movs	r2, #5
 8042176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 804217a:	2301      	movs	r3, #1
 804217c:	e09f      	b.n	80422be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 804217e:	687b      	ldr	r3, [r7, #4]
 8042180:	681b      	ldr	r3, [r3, #0]
 8042182:	685b      	ldr	r3, [r3, #4]
 8042184:	f003 0302 	and.w	r3, r3, #2
 8042188:	2b00      	cmp	r3, #0
 804218a:	d1e5      	bne.n	8042158 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 804218c:	687b      	ldr	r3, [r7, #4]
 804218e:	7e1b      	ldrb	r3, [r3, #24]
 8042190:	2b01      	cmp	r3, #1
 8042192:	d108      	bne.n	80421a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8042194:	687b      	ldr	r3, [r7, #4]
 8042196:	681b      	ldr	r3, [r3, #0]
 8042198:	681a      	ldr	r2, [r3, #0]
 804219a:	687b      	ldr	r3, [r7, #4]
 804219c:	681b      	ldr	r3, [r3, #0]
 804219e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80421a2:	601a      	str	r2, [r3, #0]
 80421a4:	e007      	b.n	80421b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80421a6:	687b      	ldr	r3, [r7, #4]
 80421a8:	681b      	ldr	r3, [r3, #0]
 80421aa:	681a      	ldr	r2, [r3, #0]
 80421ac:	687b      	ldr	r3, [r7, #4]
 80421ae:	681b      	ldr	r3, [r3, #0]
 80421b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80421b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80421b6:	687b      	ldr	r3, [r7, #4]
 80421b8:	7e5b      	ldrb	r3, [r3, #25]
 80421ba:	2b01      	cmp	r3, #1
 80421bc:	d108      	bne.n	80421d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80421be:	687b      	ldr	r3, [r7, #4]
 80421c0:	681b      	ldr	r3, [r3, #0]
 80421c2:	681a      	ldr	r2, [r3, #0]
 80421c4:	687b      	ldr	r3, [r7, #4]
 80421c6:	681b      	ldr	r3, [r3, #0]
 80421c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80421cc:	601a      	str	r2, [r3, #0]
 80421ce:	e007      	b.n	80421e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80421d0:	687b      	ldr	r3, [r7, #4]
 80421d2:	681b      	ldr	r3, [r3, #0]
 80421d4:	681a      	ldr	r2, [r3, #0]
 80421d6:	687b      	ldr	r3, [r7, #4]
 80421d8:	681b      	ldr	r3, [r3, #0]
 80421da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80421de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80421e0:	687b      	ldr	r3, [r7, #4]
 80421e2:	7e9b      	ldrb	r3, [r3, #26]
 80421e4:	2b01      	cmp	r3, #1
 80421e6:	d108      	bne.n	80421fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80421e8:	687b      	ldr	r3, [r7, #4]
 80421ea:	681b      	ldr	r3, [r3, #0]
 80421ec:	681a      	ldr	r2, [r3, #0]
 80421ee:	687b      	ldr	r3, [r7, #4]
 80421f0:	681b      	ldr	r3, [r3, #0]
 80421f2:	f042 0220 	orr.w	r2, r2, #32
 80421f6:	601a      	str	r2, [r3, #0]
 80421f8:	e007      	b.n	804220a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80421fa:	687b      	ldr	r3, [r7, #4]
 80421fc:	681b      	ldr	r3, [r3, #0]
 80421fe:	681a      	ldr	r2, [r3, #0]
 8042200:	687b      	ldr	r3, [r7, #4]
 8042202:	681b      	ldr	r3, [r3, #0]
 8042204:	f022 0220 	bic.w	r2, r2, #32
 8042208:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 804220a:	687b      	ldr	r3, [r7, #4]
 804220c:	7edb      	ldrb	r3, [r3, #27]
 804220e:	2b01      	cmp	r3, #1
 8042210:	d108      	bne.n	8042224 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8042212:	687b      	ldr	r3, [r7, #4]
 8042214:	681b      	ldr	r3, [r3, #0]
 8042216:	681a      	ldr	r2, [r3, #0]
 8042218:	687b      	ldr	r3, [r7, #4]
 804221a:	681b      	ldr	r3, [r3, #0]
 804221c:	f022 0210 	bic.w	r2, r2, #16
 8042220:	601a      	str	r2, [r3, #0]
 8042222:	e007      	b.n	8042234 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8042224:	687b      	ldr	r3, [r7, #4]
 8042226:	681b      	ldr	r3, [r3, #0]
 8042228:	681a      	ldr	r2, [r3, #0]
 804222a:	687b      	ldr	r3, [r7, #4]
 804222c:	681b      	ldr	r3, [r3, #0]
 804222e:	f042 0210 	orr.w	r2, r2, #16
 8042232:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8042234:	687b      	ldr	r3, [r7, #4]
 8042236:	7f1b      	ldrb	r3, [r3, #28]
 8042238:	2b01      	cmp	r3, #1
 804223a:	d108      	bne.n	804224e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 804223c:	687b      	ldr	r3, [r7, #4]
 804223e:	681b      	ldr	r3, [r3, #0]
 8042240:	681a      	ldr	r2, [r3, #0]
 8042242:	687b      	ldr	r3, [r7, #4]
 8042244:	681b      	ldr	r3, [r3, #0]
 8042246:	f042 0208 	orr.w	r2, r2, #8
 804224a:	601a      	str	r2, [r3, #0]
 804224c:	e007      	b.n	804225e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 804224e:	687b      	ldr	r3, [r7, #4]
 8042250:	681b      	ldr	r3, [r3, #0]
 8042252:	681a      	ldr	r2, [r3, #0]
 8042254:	687b      	ldr	r3, [r7, #4]
 8042256:	681b      	ldr	r3, [r3, #0]
 8042258:	f022 0208 	bic.w	r2, r2, #8
 804225c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 804225e:	687b      	ldr	r3, [r7, #4]
 8042260:	7f5b      	ldrb	r3, [r3, #29]
 8042262:	2b01      	cmp	r3, #1
 8042264:	d108      	bne.n	8042278 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8042266:	687b      	ldr	r3, [r7, #4]
 8042268:	681b      	ldr	r3, [r3, #0]
 804226a:	681a      	ldr	r2, [r3, #0]
 804226c:	687b      	ldr	r3, [r7, #4]
 804226e:	681b      	ldr	r3, [r3, #0]
 8042270:	f042 0204 	orr.w	r2, r2, #4
 8042274:	601a      	str	r2, [r3, #0]
 8042276:	e007      	b.n	8042288 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8042278:	687b      	ldr	r3, [r7, #4]
 804227a:	681b      	ldr	r3, [r3, #0]
 804227c:	681a      	ldr	r2, [r3, #0]
 804227e:	687b      	ldr	r3, [r7, #4]
 8042280:	681b      	ldr	r3, [r3, #0]
 8042282:	f022 0204 	bic.w	r2, r2, #4
 8042286:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8042288:	687b      	ldr	r3, [r7, #4]
 804228a:	689a      	ldr	r2, [r3, #8]
 804228c:	687b      	ldr	r3, [r7, #4]
 804228e:	68db      	ldr	r3, [r3, #12]
 8042290:	431a      	orrs	r2, r3
 8042292:	687b      	ldr	r3, [r7, #4]
 8042294:	691b      	ldr	r3, [r3, #16]
 8042296:	431a      	orrs	r2, r3
 8042298:	687b      	ldr	r3, [r7, #4]
 804229a:	695b      	ldr	r3, [r3, #20]
 804229c:	ea42 0103 	orr.w	r1, r2, r3
 80422a0:	687b      	ldr	r3, [r7, #4]
 80422a2:	685b      	ldr	r3, [r3, #4]
 80422a4:	1e5a      	subs	r2, r3, #1
 80422a6:	687b      	ldr	r3, [r7, #4]
 80422a8:	681b      	ldr	r3, [r3, #0]
 80422aa:	430a      	orrs	r2, r1
 80422ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80422ae:	687b      	ldr	r3, [r7, #4]
 80422b0:	2200      	movs	r2, #0
 80422b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80422b4:	687b      	ldr	r3, [r7, #4]
 80422b6:	2201      	movs	r2, #1
 80422b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80422bc:	2300      	movs	r3, #0
}
 80422be:	4618      	mov	r0, r3
 80422c0:	3710      	adds	r7, #16
 80422c2:	46bd      	mov	sp, r7
 80422c4:	bd80      	pop	{r7, pc}
	...

080422c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80422c8:	b480      	push	{r7}
 80422ca:	b087      	sub	sp, #28
 80422cc:	af00      	add	r7, sp, #0
 80422ce:	6078      	str	r0, [r7, #4]
 80422d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80422d2:	687b      	ldr	r3, [r7, #4]
 80422d4:	681b      	ldr	r3, [r3, #0]
 80422d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80422d8:	687b      	ldr	r3, [r7, #4]
 80422da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80422de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80422e0:	7cfb      	ldrb	r3, [r7, #19]
 80422e2:	2b01      	cmp	r3, #1
 80422e4:	d003      	beq.n	80422ee <HAL_CAN_ConfigFilter+0x26>
 80422e6:	7cfb      	ldrb	r3, [r7, #19]
 80422e8:	2b02      	cmp	r3, #2
 80422ea:	f040 80be 	bne.w	804246a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80422ee:	4b65      	ldr	r3, [pc, #404]	; (8042484 <HAL_CAN_ConfigFilter+0x1bc>)
 80422f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80422f2:	697b      	ldr	r3, [r7, #20]
 80422f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80422f8:	f043 0201 	orr.w	r2, r3, #1
 80422fc:	697b      	ldr	r3, [r7, #20]
 80422fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8042302:	697b      	ldr	r3, [r7, #20]
 8042304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8042308:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 804230c:	697b      	ldr	r3, [r7, #20]
 804230e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8042312:	697b      	ldr	r3, [r7, #20]
 8042314:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8042318:	683b      	ldr	r3, [r7, #0]
 804231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804231c:	021b      	lsls	r3, r3, #8
 804231e:	431a      	orrs	r2, r3
 8042320:	697b      	ldr	r3, [r7, #20]
 8042322:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8042326:	683b      	ldr	r3, [r7, #0]
 8042328:	695b      	ldr	r3, [r3, #20]
 804232a:	f003 031f 	and.w	r3, r3, #31
 804232e:	2201      	movs	r2, #1
 8042330:	fa02 f303 	lsl.w	r3, r2, r3
 8042334:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8042336:	697b      	ldr	r3, [r7, #20]
 8042338:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 804233c:	68fb      	ldr	r3, [r7, #12]
 804233e:	43db      	mvns	r3, r3
 8042340:	401a      	ands	r2, r3
 8042342:	697b      	ldr	r3, [r7, #20]
 8042344:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8042348:	683b      	ldr	r3, [r7, #0]
 804234a:	69db      	ldr	r3, [r3, #28]
 804234c:	2b00      	cmp	r3, #0
 804234e:	d123      	bne.n	8042398 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8042350:	697b      	ldr	r3, [r7, #20]
 8042352:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8042356:	68fb      	ldr	r3, [r7, #12]
 8042358:	43db      	mvns	r3, r3
 804235a:	401a      	ands	r2, r3
 804235c:	697b      	ldr	r3, [r7, #20]
 804235e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8042362:	683b      	ldr	r3, [r7, #0]
 8042364:	68db      	ldr	r3, [r3, #12]
 8042366:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8042368:	683b      	ldr	r3, [r7, #0]
 804236a:	685b      	ldr	r3, [r3, #4]
 804236c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 804236e:	683a      	ldr	r2, [r7, #0]
 8042370:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8042372:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8042374:	697b      	ldr	r3, [r7, #20]
 8042376:	3248      	adds	r2, #72	; 0x48
 8042378:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804237c:	683b      	ldr	r3, [r7, #0]
 804237e:	689b      	ldr	r3, [r3, #8]
 8042380:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8042382:	683b      	ldr	r3, [r7, #0]
 8042384:	681b      	ldr	r3, [r3, #0]
 8042386:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8042388:	683b      	ldr	r3, [r7, #0]
 804238a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 804238c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 804238e:	6979      	ldr	r1, [r7, #20]
 8042390:	3348      	adds	r3, #72	; 0x48
 8042392:	00db      	lsls	r3, r3, #3
 8042394:	440b      	add	r3, r1
 8042396:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8042398:	683b      	ldr	r3, [r7, #0]
 804239a:	69db      	ldr	r3, [r3, #28]
 804239c:	2b01      	cmp	r3, #1
 804239e:	d122      	bne.n	80423e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80423a0:	697b      	ldr	r3, [r7, #20]
 80423a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80423a6:	68fb      	ldr	r3, [r7, #12]
 80423a8:	431a      	orrs	r2, r3
 80423aa:	697b      	ldr	r3, [r7, #20]
 80423ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80423b0:	683b      	ldr	r3, [r7, #0]
 80423b2:	681b      	ldr	r3, [r3, #0]
 80423b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80423b6:	683b      	ldr	r3, [r7, #0]
 80423b8:	685b      	ldr	r3, [r3, #4]
 80423ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80423bc:	683a      	ldr	r2, [r7, #0]
 80423be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80423c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80423c2:	697b      	ldr	r3, [r7, #20]
 80423c4:	3248      	adds	r2, #72	; 0x48
 80423c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80423ca:	683b      	ldr	r3, [r7, #0]
 80423cc:	689b      	ldr	r3, [r3, #8]
 80423ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80423d0:	683b      	ldr	r3, [r7, #0]
 80423d2:	68db      	ldr	r3, [r3, #12]
 80423d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80423d6:	683b      	ldr	r3, [r7, #0]
 80423d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80423da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80423dc:	6979      	ldr	r1, [r7, #20]
 80423de:	3348      	adds	r3, #72	; 0x48
 80423e0:	00db      	lsls	r3, r3, #3
 80423e2:	440b      	add	r3, r1
 80423e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80423e6:	683b      	ldr	r3, [r7, #0]
 80423e8:	699b      	ldr	r3, [r3, #24]
 80423ea:	2b00      	cmp	r3, #0
 80423ec:	d109      	bne.n	8042402 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80423ee:	697b      	ldr	r3, [r7, #20]
 80423f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80423f4:	68fb      	ldr	r3, [r7, #12]
 80423f6:	43db      	mvns	r3, r3
 80423f8:	401a      	ands	r2, r3
 80423fa:	697b      	ldr	r3, [r7, #20]
 80423fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8042400:	e007      	b.n	8042412 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8042402:	697b      	ldr	r3, [r7, #20]
 8042404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8042408:	68fb      	ldr	r3, [r7, #12]
 804240a:	431a      	orrs	r2, r3
 804240c:	697b      	ldr	r3, [r7, #20]
 804240e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8042412:	683b      	ldr	r3, [r7, #0]
 8042414:	691b      	ldr	r3, [r3, #16]
 8042416:	2b00      	cmp	r3, #0
 8042418:	d109      	bne.n	804242e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 804241a:	697b      	ldr	r3, [r7, #20]
 804241c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8042420:	68fb      	ldr	r3, [r7, #12]
 8042422:	43db      	mvns	r3, r3
 8042424:	401a      	ands	r2, r3
 8042426:	697b      	ldr	r3, [r7, #20]
 8042428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 804242c:	e007      	b.n	804243e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 804242e:	697b      	ldr	r3, [r7, #20]
 8042430:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8042434:	68fb      	ldr	r3, [r7, #12]
 8042436:	431a      	orrs	r2, r3
 8042438:	697b      	ldr	r3, [r7, #20]
 804243a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 804243e:	683b      	ldr	r3, [r7, #0]
 8042440:	6a1b      	ldr	r3, [r3, #32]
 8042442:	2b01      	cmp	r3, #1
 8042444:	d107      	bne.n	8042456 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8042446:	697b      	ldr	r3, [r7, #20]
 8042448:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 804244c:	68fb      	ldr	r3, [r7, #12]
 804244e:	431a      	orrs	r2, r3
 8042450:	697b      	ldr	r3, [r7, #20]
 8042452:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8042456:	697b      	ldr	r3, [r7, #20]
 8042458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 804245c:	f023 0201 	bic.w	r2, r3, #1
 8042460:	697b      	ldr	r3, [r7, #20]
 8042462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8042466:	2300      	movs	r3, #0
 8042468:	e006      	b.n	8042478 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 804246a:	687b      	ldr	r3, [r7, #4]
 804246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804246e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8042472:	687b      	ldr	r3, [r7, #4]
 8042474:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8042476:	2301      	movs	r3, #1
  }
}
 8042478:	4618      	mov	r0, r3
 804247a:	371c      	adds	r7, #28
 804247c:	46bd      	mov	sp, r7
 804247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042482:	4770      	bx	lr
 8042484:	40006400 	.word	0x40006400

08042488 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8042488:	b480      	push	{r7}
 804248a:	b087      	sub	sp, #28
 804248c:	af00      	add	r7, sp, #0
 804248e:	60f8      	str	r0, [r7, #12]
 8042490:	60b9      	str	r1, [r7, #8]
 8042492:	607a      	str	r2, [r7, #4]
 8042494:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8042496:	68fb      	ldr	r3, [r7, #12]
 8042498:	f893 3020 	ldrb.w	r3, [r3, #32]
 804249c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 804249e:	7dfb      	ldrb	r3, [r7, #23]
 80424a0:	2b01      	cmp	r3, #1
 80424a2:	d003      	beq.n	80424ac <HAL_CAN_GetRxMessage+0x24>
 80424a4:	7dfb      	ldrb	r3, [r7, #23]
 80424a6:	2b02      	cmp	r3, #2
 80424a8:	f040 80f3 	bne.w	8042692 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80424ac:	68bb      	ldr	r3, [r7, #8]
 80424ae:	2b00      	cmp	r3, #0
 80424b0:	d10e      	bne.n	80424d0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80424b2:	68fb      	ldr	r3, [r7, #12]
 80424b4:	681b      	ldr	r3, [r3, #0]
 80424b6:	68db      	ldr	r3, [r3, #12]
 80424b8:	f003 0303 	and.w	r3, r3, #3
 80424bc:	2b00      	cmp	r3, #0
 80424be:	d116      	bne.n	80424ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80424c0:	68fb      	ldr	r3, [r7, #12]
 80424c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80424c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80424c8:	68fb      	ldr	r3, [r7, #12]
 80424ca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80424cc:	2301      	movs	r3, #1
 80424ce:	e0e7      	b.n	80426a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80424d0:	68fb      	ldr	r3, [r7, #12]
 80424d2:	681b      	ldr	r3, [r3, #0]
 80424d4:	691b      	ldr	r3, [r3, #16]
 80424d6:	f003 0303 	and.w	r3, r3, #3
 80424da:	2b00      	cmp	r3, #0
 80424dc:	d107      	bne.n	80424ee <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80424de:	68fb      	ldr	r3, [r7, #12]
 80424e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80424e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80424e6:	68fb      	ldr	r3, [r7, #12]
 80424e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80424ea:	2301      	movs	r3, #1
 80424ec:	e0d8      	b.n	80426a0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80424ee:	68fb      	ldr	r3, [r7, #12]
 80424f0:	681a      	ldr	r2, [r3, #0]
 80424f2:	68bb      	ldr	r3, [r7, #8]
 80424f4:	331b      	adds	r3, #27
 80424f6:	011b      	lsls	r3, r3, #4
 80424f8:	4413      	add	r3, r2
 80424fa:	681b      	ldr	r3, [r3, #0]
 80424fc:	f003 0204 	and.w	r2, r3, #4
 8042500:	687b      	ldr	r3, [r7, #4]
 8042502:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8042504:	687b      	ldr	r3, [r7, #4]
 8042506:	689b      	ldr	r3, [r3, #8]
 8042508:	2b00      	cmp	r3, #0
 804250a:	d10c      	bne.n	8042526 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 804250c:	68fb      	ldr	r3, [r7, #12]
 804250e:	681a      	ldr	r2, [r3, #0]
 8042510:	68bb      	ldr	r3, [r7, #8]
 8042512:	331b      	adds	r3, #27
 8042514:	011b      	lsls	r3, r3, #4
 8042516:	4413      	add	r3, r2
 8042518:	681b      	ldr	r3, [r3, #0]
 804251a:	0d5b      	lsrs	r3, r3, #21
 804251c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8042520:	687b      	ldr	r3, [r7, #4]
 8042522:	601a      	str	r2, [r3, #0]
 8042524:	e00b      	b.n	804253e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8042526:	68fb      	ldr	r3, [r7, #12]
 8042528:	681a      	ldr	r2, [r3, #0]
 804252a:	68bb      	ldr	r3, [r7, #8]
 804252c:	331b      	adds	r3, #27
 804252e:	011b      	lsls	r3, r3, #4
 8042530:	4413      	add	r3, r2
 8042532:	681b      	ldr	r3, [r3, #0]
 8042534:	08db      	lsrs	r3, r3, #3
 8042536:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 804253a:	687b      	ldr	r3, [r7, #4]
 804253c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 804253e:	68fb      	ldr	r3, [r7, #12]
 8042540:	681a      	ldr	r2, [r3, #0]
 8042542:	68bb      	ldr	r3, [r7, #8]
 8042544:	331b      	adds	r3, #27
 8042546:	011b      	lsls	r3, r3, #4
 8042548:	4413      	add	r3, r2
 804254a:	681b      	ldr	r3, [r3, #0]
 804254c:	f003 0202 	and.w	r2, r3, #2
 8042550:	687b      	ldr	r3, [r7, #4]
 8042552:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8042554:	68fb      	ldr	r3, [r7, #12]
 8042556:	681a      	ldr	r2, [r3, #0]
 8042558:	68bb      	ldr	r3, [r7, #8]
 804255a:	331b      	adds	r3, #27
 804255c:	011b      	lsls	r3, r3, #4
 804255e:	4413      	add	r3, r2
 8042560:	3304      	adds	r3, #4
 8042562:	681b      	ldr	r3, [r3, #0]
 8042564:	f003 020f 	and.w	r2, r3, #15
 8042568:	687b      	ldr	r3, [r7, #4]
 804256a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 804256c:	68fb      	ldr	r3, [r7, #12]
 804256e:	681a      	ldr	r2, [r3, #0]
 8042570:	68bb      	ldr	r3, [r7, #8]
 8042572:	331b      	adds	r3, #27
 8042574:	011b      	lsls	r3, r3, #4
 8042576:	4413      	add	r3, r2
 8042578:	3304      	adds	r3, #4
 804257a:	681b      	ldr	r3, [r3, #0]
 804257c:	0a1b      	lsrs	r3, r3, #8
 804257e:	b2da      	uxtb	r2, r3
 8042580:	687b      	ldr	r3, [r7, #4]
 8042582:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8042584:	68fb      	ldr	r3, [r7, #12]
 8042586:	681a      	ldr	r2, [r3, #0]
 8042588:	68bb      	ldr	r3, [r7, #8]
 804258a:	331b      	adds	r3, #27
 804258c:	011b      	lsls	r3, r3, #4
 804258e:	4413      	add	r3, r2
 8042590:	3304      	adds	r3, #4
 8042592:	681b      	ldr	r3, [r3, #0]
 8042594:	0c1b      	lsrs	r3, r3, #16
 8042596:	b29a      	uxth	r2, r3
 8042598:	687b      	ldr	r3, [r7, #4]
 804259a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 804259c:	68fb      	ldr	r3, [r7, #12]
 804259e:	681a      	ldr	r2, [r3, #0]
 80425a0:	68bb      	ldr	r3, [r7, #8]
 80425a2:	011b      	lsls	r3, r3, #4
 80425a4:	4413      	add	r3, r2
 80425a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80425aa:	681b      	ldr	r3, [r3, #0]
 80425ac:	b2da      	uxtb	r2, r3
 80425ae:	683b      	ldr	r3, [r7, #0]
 80425b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80425b2:	68fb      	ldr	r3, [r7, #12]
 80425b4:	681a      	ldr	r2, [r3, #0]
 80425b6:	68bb      	ldr	r3, [r7, #8]
 80425b8:	011b      	lsls	r3, r3, #4
 80425ba:	4413      	add	r3, r2
 80425bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	0a1a      	lsrs	r2, r3, #8
 80425c4:	683b      	ldr	r3, [r7, #0]
 80425c6:	3301      	adds	r3, #1
 80425c8:	b2d2      	uxtb	r2, r2
 80425ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80425cc:	68fb      	ldr	r3, [r7, #12]
 80425ce:	681a      	ldr	r2, [r3, #0]
 80425d0:	68bb      	ldr	r3, [r7, #8]
 80425d2:	011b      	lsls	r3, r3, #4
 80425d4:	4413      	add	r3, r2
 80425d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80425da:	681b      	ldr	r3, [r3, #0]
 80425dc:	0c1a      	lsrs	r2, r3, #16
 80425de:	683b      	ldr	r3, [r7, #0]
 80425e0:	3302      	adds	r3, #2
 80425e2:	b2d2      	uxtb	r2, r2
 80425e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80425e6:	68fb      	ldr	r3, [r7, #12]
 80425e8:	681a      	ldr	r2, [r3, #0]
 80425ea:	68bb      	ldr	r3, [r7, #8]
 80425ec:	011b      	lsls	r3, r3, #4
 80425ee:	4413      	add	r3, r2
 80425f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80425f4:	681b      	ldr	r3, [r3, #0]
 80425f6:	0e1a      	lsrs	r2, r3, #24
 80425f8:	683b      	ldr	r3, [r7, #0]
 80425fa:	3303      	adds	r3, #3
 80425fc:	b2d2      	uxtb	r2, r2
 80425fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8042600:	68fb      	ldr	r3, [r7, #12]
 8042602:	681a      	ldr	r2, [r3, #0]
 8042604:	68bb      	ldr	r3, [r7, #8]
 8042606:	011b      	lsls	r3, r3, #4
 8042608:	4413      	add	r3, r2
 804260a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 804260e:	681a      	ldr	r2, [r3, #0]
 8042610:	683b      	ldr	r3, [r7, #0]
 8042612:	3304      	adds	r3, #4
 8042614:	b2d2      	uxtb	r2, r2
 8042616:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8042618:	68fb      	ldr	r3, [r7, #12]
 804261a:	681a      	ldr	r2, [r3, #0]
 804261c:	68bb      	ldr	r3, [r7, #8]
 804261e:	011b      	lsls	r3, r3, #4
 8042620:	4413      	add	r3, r2
 8042622:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8042626:	681b      	ldr	r3, [r3, #0]
 8042628:	0a1a      	lsrs	r2, r3, #8
 804262a:	683b      	ldr	r3, [r7, #0]
 804262c:	3305      	adds	r3, #5
 804262e:	b2d2      	uxtb	r2, r2
 8042630:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8042632:	68fb      	ldr	r3, [r7, #12]
 8042634:	681a      	ldr	r2, [r3, #0]
 8042636:	68bb      	ldr	r3, [r7, #8]
 8042638:	011b      	lsls	r3, r3, #4
 804263a:	4413      	add	r3, r2
 804263c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8042640:	681b      	ldr	r3, [r3, #0]
 8042642:	0c1a      	lsrs	r2, r3, #16
 8042644:	683b      	ldr	r3, [r7, #0]
 8042646:	3306      	adds	r3, #6
 8042648:	b2d2      	uxtb	r2, r2
 804264a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 804264c:	68fb      	ldr	r3, [r7, #12]
 804264e:	681a      	ldr	r2, [r3, #0]
 8042650:	68bb      	ldr	r3, [r7, #8]
 8042652:	011b      	lsls	r3, r3, #4
 8042654:	4413      	add	r3, r2
 8042656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 804265a:	681b      	ldr	r3, [r3, #0]
 804265c:	0e1a      	lsrs	r2, r3, #24
 804265e:	683b      	ldr	r3, [r7, #0]
 8042660:	3307      	adds	r3, #7
 8042662:	b2d2      	uxtb	r2, r2
 8042664:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8042666:	68bb      	ldr	r3, [r7, #8]
 8042668:	2b00      	cmp	r3, #0
 804266a:	d108      	bne.n	804267e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 804266c:	68fb      	ldr	r3, [r7, #12]
 804266e:	681b      	ldr	r3, [r3, #0]
 8042670:	68da      	ldr	r2, [r3, #12]
 8042672:	68fb      	ldr	r3, [r7, #12]
 8042674:	681b      	ldr	r3, [r3, #0]
 8042676:	f042 0220 	orr.w	r2, r2, #32
 804267a:	60da      	str	r2, [r3, #12]
 804267c:	e007      	b.n	804268e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 804267e:	68fb      	ldr	r3, [r7, #12]
 8042680:	681b      	ldr	r3, [r3, #0]
 8042682:	691a      	ldr	r2, [r3, #16]
 8042684:	68fb      	ldr	r3, [r7, #12]
 8042686:	681b      	ldr	r3, [r3, #0]
 8042688:	f042 0220 	orr.w	r2, r2, #32
 804268c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 804268e:	2300      	movs	r3, #0
 8042690:	e006      	b.n	80426a0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8042692:	68fb      	ldr	r3, [r7, #12]
 8042694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042696:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 804269a:	68fb      	ldr	r3, [r7, #12]
 804269c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804269e:	2301      	movs	r3, #1
  }
}
 80426a0:	4618      	mov	r0, r3
 80426a2:	371c      	adds	r7, #28
 80426a4:	46bd      	mov	sp, r7
 80426a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426aa:	4770      	bx	lr

080426ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80426ac:	b580      	push	{r7, lr}
 80426ae:	b08a      	sub	sp, #40	; 0x28
 80426b0:	af00      	add	r7, sp, #0
 80426b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80426b4:	2300      	movs	r3, #0
 80426b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80426b8:	687b      	ldr	r3, [r7, #4]
 80426ba:	681b      	ldr	r3, [r3, #0]
 80426bc:	695b      	ldr	r3, [r3, #20]
 80426be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80426c0:	687b      	ldr	r3, [r7, #4]
 80426c2:	681b      	ldr	r3, [r3, #0]
 80426c4:	685b      	ldr	r3, [r3, #4]
 80426c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80426c8:	687b      	ldr	r3, [r7, #4]
 80426ca:	681b      	ldr	r3, [r3, #0]
 80426cc:	689b      	ldr	r3, [r3, #8]
 80426ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	681b      	ldr	r3, [r3, #0]
 80426d4:	68db      	ldr	r3, [r3, #12]
 80426d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80426d8:	687b      	ldr	r3, [r7, #4]
 80426da:	681b      	ldr	r3, [r3, #0]
 80426dc:	691b      	ldr	r3, [r3, #16]
 80426de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80426e0:	687b      	ldr	r3, [r7, #4]
 80426e2:	681b      	ldr	r3, [r3, #0]
 80426e4:	699b      	ldr	r3, [r3, #24]
 80426e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80426e8:	6a3b      	ldr	r3, [r7, #32]
 80426ea:	f003 0301 	and.w	r3, r3, #1
 80426ee:	2b00      	cmp	r3, #0
 80426f0:	d07c      	beq.n	80427ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80426f2:	69bb      	ldr	r3, [r7, #24]
 80426f4:	f003 0301 	and.w	r3, r3, #1
 80426f8:	2b00      	cmp	r3, #0
 80426fa:	d023      	beq.n	8042744 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80426fc:	687b      	ldr	r3, [r7, #4]
 80426fe:	681b      	ldr	r3, [r3, #0]
 8042700:	2201      	movs	r2, #1
 8042702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8042704:	69bb      	ldr	r3, [r7, #24]
 8042706:	f003 0302 	and.w	r3, r3, #2
 804270a:	2b00      	cmp	r3, #0
 804270c:	d003      	beq.n	8042716 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 804270e:	6878      	ldr	r0, [r7, #4]
 8042710:	f000 f983 	bl	8042a1a <HAL_CAN_TxMailbox0CompleteCallback>
 8042714:	e016      	b.n	8042744 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8042716:	69bb      	ldr	r3, [r7, #24]
 8042718:	f003 0304 	and.w	r3, r3, #4
 804271c:	2b00      	cmp	r3, #0
 804271e:	d004      	beq.n	804272a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8042720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8042726:	627b      	str	r3, [r7, #36]	; 0x24
 8042728:	e00c      	b.n	8042744 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 804272a:	69bb      	ldr	r3, [r7, #24]
 804272c:	f003 0308 	and.w	r3, r3, #8
 8042730:	2b00      	cmp	r3, #0
 8042732:	d004      	beq.n	804273e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8042734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804273a:	627b      	str	r3, [r7, #36]	; 0x24
 804273c:	e002      	b.n	8042744 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 804273e:	6878      	ldr	r0, [r7, #4]
 8042740:	f000 f989 	bl	8042a56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8042744:	69bb      	ldr	r3, [r7, #24]
 8042746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804274a:	2b00      	cmp	r3, #0
 804274c:	d024      	beq.n	8042798 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 804274e:	687b      	ldr	r3, [r7, #4]
 8042750:	681b      	ldr	r3, [r3, #0]
 8042752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8042756:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8042758:	69bb      	ldr	r3, [r7, #24]
 804275a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804275e:	2b00      	cmp	r3, #0
 8042760:	d003      	beq.n	804276a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8042762:	6878      	ldr	r0, [r7, #4]
 8042764:	f000 f963 	bl	8042a2e <HAL_CAN_TxMailbox1CompleteCallback>
 8042768:	e016      	b.n	8042798 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 804276a:	69bb      	ldr	r3, [r7, #24]
 804276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042770:	2b00      	cmp	r3, #0
 8042772:	d004      	beq.n	804277e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8042774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 804277a:	627b      	str	r3, [r7, #36]	; 0x24
 804277c:	e00c      	b.n	8042798 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 804277e:	69bb      	ldr	r3, [r7, #24]
 8042780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042784:	2b00      	cmp	r3, #0
 8042786:	d004      	beq.n	8042792 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8042788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804278a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804278e:	627b      	str	r3, [r7, #36]	; 0x24
 8042790:	e002      	b.n	8042798 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8042792:	6878      	ldr	r0, [r7, #4]
 8042794:	f000 f969 	bl	8042a6a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8042798:	69bb      	ldr	r3, [r7, #24]
 804279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804279e:	2b00      	cmp	r3, #0
 80427a0:	d024      	beq.n	80427ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80427a2:	687b      	ldr	r3, [r7, #4]
 80427a4:	681b      	ldr	r3, [r3, #0]
 80427a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80427aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80427ac:	69bb      	ldr	r3, [r7, #24]
 80427ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80427b2:	2b00      	cmp	r3, #0
 80427b4:	d003      	beq.n	80427be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80427b6:	6878      	ldr	r0, [r7, #4]
 80427b8:	f000 f943 	bl	8042a42 <HAL_CAN_TxMailbox2CompleteCallback>
 80427bc:	e016      	b.n	80427ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80427be:	69bb      	ldr	r3, [r7, #24]
 80427c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80427c4:	2b00      	cmp	r3, #0
 80427c6:	d004      	beq.n	80427d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80427c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80427ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80427ce:	627b      	str	r3, [r7, #36]	; 0x24
 80427d0:	e00c      	b.n	80427ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80427d2:	69bb      	ldr	r3, [r7, #24]
 80427d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80427d8:	2b00      	cmp	r3, #0
 80427da:	d004      	beq.n	80427e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80427dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80427de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80427e2:	627b      	str	r3, [r7, #36]	; 0x24
 80427e4:	e002      	b.n	80427ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80427e6:	6878      	ldr	r0, [r7, #4]
 80427e8:	f000 f949 	bl	8042a7e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80427ec:	6a3b      	ldr	r3, [r7, #32]
 80427ee:	f003 0308 	and.w	r3, r3, #8
 80427f2:	2b00      	cmp	r3, #0
 80427f4:	d00c      	beq.n	8042810 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80427f6:	697b      	ldr	r3, [r7, #20]
 80427f8:	f003 0310 	and.w	r3, r3, #16
 80427fc:	2b00      	cmp	r3, #0
 80427fe:	d007      	beq.n	8042810 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8042800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8042806:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8042808:	687b      	ldr	r3, [r7, #4]
 804280a:	681b      	ldr	r3, [r3, #0]
 804280c:	2210      	movs	r2, #16
 804280e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8042810:	6a3b      	ldr	r3, [r7, #32]
 8042812:	f003 0304 	and.w	r3, r3, #4
 8042816:	2b00      	cmp	r3, #0
 8042818:	d00b      	beq.n	8042832 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 804281a:	697b      	ldr	r3, [r7, #20]
 804281c:	f003 0308 	and.w	r3, r3, #8
 8042820:	2b00      	cmp	r3, #0
 8042822:	d006      	beq.n	8042832 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8042824:	687b      	ldr	r3, [r7, #4]
 8042826:	681b      	ldr	r3, [r3, #0]
 8042828:	2208      	movs	r2, #8
 804282a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 804282c:	6878      	ldr	r0, [r7, #4]
 804282e:	f000 f930 	bl	8042a92 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8042832:	6a3b      	ldr	r3, [r7, #32]
 8042834:	f003 0302 	and.w	r3, r3, #2
 8042838:	2b00      	cmp	r3, #0
 804283a:	d009      	beq.n	8042850 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 804283c:	687b      	ldr	r3, [r7, #4]
 804283e:	681b      	ldr	r3, [r3, #0]
 8042840:	68db      	ldr	r3, [r3, #12]
 8042842:	f003 0303 	and.w	r3, r3, #3
 8042846:	2b00      	cmp	r3, #0
 8042848:	d002      	beq.n	8042850 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 804284a:	6878      	ldr	r0, [r7, #4]
 804284c:	f7fe fcc3 	bl	80411d6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8042850:	6a3b      	ldr	r3, [r7, #32]
 8042852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042856:	2b00      	cmp	r3, #0
 8042858:	d00c      	beq.n	8042874 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 804285a:	693b      	ldr	r3, [r7, #16]
 804285c:	f003 0310 	and.w	r3, r3, #16
 8042860:	2b00      	cmp	r3, #0
 8042862:	d007      	beq.n	8042874 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8042864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 804286a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 804286c:	687b      	ldr	r3, [r7, #4]
 804286e:	681b      	ldr	r3, [r3, #0]
 8042870:	2210      	movs	r2, #16
 8042872:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8042874:	6a3b      	ldr	r3, [r7, #32]
 8042876:	f003 0320 	and.w	r3, r3, #32
 804287a:	2b00      	cmp	r3, #0
 804287c:	d00b      	beq.n	8042896 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 804287e:	693b      	ldr	r3, [r7, #16]
 8042880:	f003 0308 	and.w	r3, r3, #8
 8042884:	2b00      	cmp	r3, #0
 8042886:	d006      	beq.n	8042896 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8042888:	687b      	ldr	r3, [r7, #4]
 804288a:	681b      	ldr	r3, [r3, #0]
 804288c:	2208      	movs	r2, #8
 804288e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8042890:	6878      	ldr	r0, [r7, #4]
 8042892:	f000 f912 	bl	8042aba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8042896:	6a3b      	ldr	r3, [r7, #32]
 8042898:	f003 0310 	and.w	r3, r3, #16
 804289c:	2b00      	cmp	r3, #0
 804289e:	d009      	beq.n	80428b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80428a0:	687b      	ldr	r3, [r7, #4]
 80428a2:	681b      	ldr	r3, [r3, #0]
 80428a4:	691b      	ldr	r3, [r3, #16]
 80428a6:	f003 0303 	and.w	r3, r3, #3
 80428aa:	2b00      	cmp	r3, #0
 80428ac:	d002      	beq.n	80428b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80428ae:	6878      	ldr	r0, [r7, #4]
 80428b0:	f000 f8f9 	bl	8042aa6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80428b4:	6a3b      	ldr	r3, [r7, #32]
 80428b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80428ba:	2b00      	cmp	r3, #0
 80428bc:	d00b      	beq.n	80428d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80428be:	69fb      	ldr	r3, [r7, #28]
 80428c0:	f003 0310 	and.w	r3, r3, #16
 80428c4:	2b00      	cmp	r3, #0
 80428c6:	d006      	beq.n	80428d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80428c8:	687b      	ldr	r3, [r7, #4]
 80428ca:	681b      	ldr	r3, [r3, #0]
 80428cc:	2210      	movs	r2, #16
 80428ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80428d0:	6878      	ldr	r0, [r7, #4]
 80428d2:	f000 f8fc 	bl	8042ace <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80428d6:	6a3b      	ldr	r3, [r7, #32]
 80428d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80428dc:	2b00      	cmp	r3, #0
 80428de:	d00b      	beq.n	80428f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80428e0:	69fb      	ldr	r3, [r7, #28]
 80428e2:	f003 0308 	and.w	r3, r3, #8
 80428e6:	2b00      	cmp	r3, #0
 80428e8:	d006      	beq.n	80428f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80428ea:	687b      	ldr	r3, [r7, #4]
 80428ec:	681b      	ldr	r3, [r3, #0]
 80428ee:	2208      	movs	r2, #8
 80428f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80428f2:	6878      	ldr	r0, [r7, #4]
 80428f4:	f000 f8f5 	bl	8042ae2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80428f8:	6a3b      	ldr	r3, [r7, #32]
 80428fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80428fe:	2b00      	cmp	r3, #0
 8042900:	d07b      	beq.n	80429fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8042902:	69fb      	ldr	r3, [r7, #28]
 8042904:	f003 0304 	and.w	r3, r3, #4
 8042908:	2b00      	cmp	r3, #0
 804290a:	d072      	beq.n	80429f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 804290c:	6a3b      	ldr	r3, [r7, #32]
 804290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042912:	2b00      	cmp	r3, #0
 8042914:	d008      	beq.n	8042928 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8042916:	68fb      	ldr	r3, [r7, #12]
 8042918:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 804291c:	2b00      	cmp	r3, #0
 804291e:	d003      	beq.n	8042928 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8042920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042922:	f043 0301 	orr.w	r3, r3, #1
 8042926:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8042928:	6a3b      	ldr	r3, [r7, #32]
 804292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804292e:	2b00      	cmp	r3, #0
 8042930:	d008      	beq.n	8042944 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8042932:	68fb      	ldr	r3, [r7, #12]
 8042934:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8042938:	2b00      	cmp	r3, #0
 804293a:	d003      	beq.n	8042944 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 804293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804293e:	f043 0302 	orr.w	r3, r3, #2
 8042942:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8042944:	6a3b      	ldr	r3, [r7, #32]
 8042946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804294a:	2b00      	cmp	r3, #0
 804294c:	d008      	beq.n	8042960 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 804294e:	68fb      	ldr	r3, [r7, #12]
 8042950:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8042954:	2b00      	cmp	r3, #0
 8042956:	d003      	beq.n	8042960 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8042958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804295a:	f043 0304 	orr.w	r3, r3, #4
 804295e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8042960:	6a3b      	ldr	r3, [r7, #32]
 8042962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042966:	2b00      	cmp	r3, #0
 8042968:	d043      	beq.n	80429f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 804296a:	68fb      	ldr	r3, [r7, #12]
 804296c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8042970:	2b00      	cmp	r3, #0
 8042972:	d03e      	beq.n	80429f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8042974:	68fb      	ldr	r3, [r7, #12]
 8042976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 804297a:	2b60      	cmp	r3, #96	; 0x60
 804297c:	d02b      	beq.n	80429d6 <HAL_CAN_IRQHandler+0x32a>
 804297e:	2b60      	cmp	r3, #96	; 0x60
 8042980:	d82e      	bhi.n	80429e0 <HAL_CAN_IRQHandler+0x334>
 8042982:	2b50      	cmp	r3, #80	; 0x50
 8042984:	d022      	beq.n	80429cc <HAL_CAN_IRQHandler+0x320>
 8042986:	2b50      	cmp	r3, #80	; 0x50
 8042988:	d82a      	bhi.n	80429e0 <HAL_CAN_IRQHandler+0x334>
 804298a:	2b40      	cmp	r3, #64	; 0x40
 804298c:	d019      	beq.n	80429c2 <HAL_CAN_IRQHandler+0x316>
 804298e:	2b40      	cmp	r3, #64	; 0x40
 8042990:	d826      	bhi.n	80429e0 <HAL_CAN_IRQHandler+0x334>
 8042992:	2b30      	cmp	r3, #48	; 0x30
 8042994:	d010      	beq.n	80429b8 <HAL_CAN_IRQHandler+0x30c>
 8042996:	2b30      	cmp	r3, #48	; 0x30
 8042998:	d822      	bhi.n	80429e0 <HAL_CAN_IRQHandler+0x334>
 804299a:	2b10      	cmp	r3, #16
 804299c:	d002      	beq.n	80429a4 <HAL_CAN_IRQHandler+0x2f8>
 804299e:	2b20      	cmp	r3, #32
 80429a0:	d005      	beq.n	80429ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80429a2:	e01d      	b.n	80429e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80429a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429a6:	f043 0308 	orr.w	r3, r3, #8
 80429aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80429ac:	e019      	b.n	80429e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80429ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429b0:	f043 0310 	orr.w	r3, r3, #16
 80429b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80429b6:	e014      	b.n	80429e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80429b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429ba:	f043 0320 	orr.w	r3, r3, #32
 80429be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80429c0:	e00f      	b.n	80429e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80429c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80429c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80429ca:	e00a      	b.n	80429e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80429cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80429d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80429d4:	e005      	b.n	80429e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80429d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80429dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80429de:	e000      	b.n	80429e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80429e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80429e2:	687b      	ldr	r3, [r7, #4]
 80429e4:	681b      	ldr	r3, [r3, #0]
 80429e6:	699a      	ldr	r2, [r3, #24]
 80429e8:	687b      	ldr	r3, [r7, #4]
 80429ea:	681b      	ldr	r3, [r3, #0]
 80429ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80429f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80429f2:	687b      	ldr	r3, [r7, #4]
 80429f4:	681b      	ldr	r3, [r3, #0]
 80429f6:	2204      	movs	r2, #4
 80429f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80429fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429fc:	2b00      	cmp	r3, #0
 80429fe:	d008      	beq.n	8042a12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8042a00:	687b      	ldr	r3, [r7, #4]
 8042a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8042a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042a06:	431a      	orrs	r2, r3
 8042a08:	687b      	ldr	r3, [r7, #4]
 8042a0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8042a0c:	6878      	ldr	r0, [r7, #4]
 8042a0e:	f000 f872 	bl	8042af6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8042a12:	bf00      	nop
 8042a14:	3728      	adds	r7, #40	; 0x28
 8042a16:	46bd      	mov	sp, r7
 8042a18:	bd80      	pop	{r7, pc}

08042a1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8042a1a:	b480      	push	{r7}
 8042a1c:	b083      	sub	sp, #12
 8042a1e:	af00      	add	r7, sp, #0
 8042a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8042a22:	bf00      	nop
 8042a24:	370c      	adds	r7, #12
 8042a26:	46bd      	mov	sp, r7
 8042a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a2c:	4770      	bx	lr

08042a2e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8042a2e:	b480      	push	{r7}
 8042a30:	b083      	sub	sp, #12
 8042a32:	af00      	add	r7, sp, #0
 8042a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8042a36:	bf00      	nop
 8042a38:	370c      	adds	r7, #12
 8042a3a:	46bd      	mov	sp, r7
 8042a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a40:	4770      	bx	lr

08042a42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8042a42:	b480      	push	{r7}
 8042a44:	b083      	sub	sp, #12
 8042a46:	af00      	add	r7, sp, #0
 8042a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8042a4a:	bf00      	nop
 8042a4c:	370c      	adds	r7, #12
 8042a4e:	46bd      	mov	sp, r7
 8042a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a54:	4770      	bx	lr

08042a56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8042a56:	b480      	push	{r7}
 8042a58:	b083      	sub	sp, #12
 8042a5a:	af00      	add	r7, sp, #0
 8042a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8042a5e:	bf00      	nop
 8042a60:	370c      	adds	r7, #12
 8042a62:	46bd      	mov	sp, r7
 8042a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a68:	4770      	bx	lr

08042a6a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8042a6a:	b480      	push	{r7}
 8042a6c:	b083      	sub	sp, #12
 8042a6e:	af00      	add	r7, sp, #0
 8042a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8042a72:	bf00      	nop
 8042a74:	370c      	adds	r7, #12
 8042a76:	46bd      	mov	sp, r7
 8042a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a7c:	4770      	bx	lr

08042a7e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8042a7e:	b480      	push	{r7}
 8042a80:	b083      	sub	sp, #12
 8042a82:	af00      	add	r7, sp, #0
 8042a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8042a86:	bf00      	nop
 8042a88:	370c      	adds	r7, #12
 8042a8a:	46bd      	mov	sp, r7
 8042a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a90:	4770      	bx	lr

08042a92 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8042a92:	b480      	push	{r7}
 8042a94:	b083      	sub	sp, #12
 8042a96:	af00      	add	r7, sp, #0
 8042a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8042a9a:	bf00      	nop
 8042a9c:	370c      	adds	r7, #12
 8042a9e:	46bd      	mov	sp, r7
 8042aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042aa4:	4770      	bx	lr

08042aa6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8042aa6:	b480      	push	{r7}
 8042aa8:	b083      	sub	sp, #12
 8042aaa:	af00      	add	r7, sp, #0
 8042aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8042aae:	bf00      	nop
 8042ab0:	370c      	adds	r7, #12
 8042ab2:	46bd      	mov	sp, r7
 8042ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ab8:	4770      	bx	lr

08042aba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8042aba:	b480      	push	{r7}
 8042abc:	b083      	sub	sp, #12
 8042abe:	af00      	add	r7, sp, #0
 8042ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8042ac2:	bf00      	nop
 8042ac4:	370c      	adds	r7, #12
 8042ac6:	46bd      	mov	sp, r7
 8042ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042acc:	4770      	bx	lr

08042ace <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8042ace:	b480      	push	{r7}
 8042ad0:	b083      	sub	sp, #12
 8042ad2:	af00      	add	r7, sp, #0
 8042ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8042ad6:	bf00      	nop
 8042ad8:	370c      	adds	r7, #12
 8042ada:	46bd      	mov	sp, r7
 8042adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ae0:	4770      	bx	lr

08042ae2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8042ae2:	b480      	push	{r7}
 8042ae4:	b083      	sub	sp, #12
 8042ae6:	af00      	add	r7, sp, #0
 8042ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8042aea:	bf00      	nop
 8042aec:	370c      	adds	r7, #12
 8042aee:	46bd      	mov	sp, r7
 8042af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042af4:	4770      	bx	lr

08042af6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8042af6:	b480      	push	{r7}
 8042af8:	b083      	sub	sp, #12
 8042afa:	af00      	add	r7, sp, #0
 8042afc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8042afe:	bf00      	nop
 8042b00:	370c      	adds	r7, #12
 8042b02:	46bd      	mov	sp, r7
 8042b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b08:	4770      	bx	lr
	...

08042b0c <__NVIC_SetPriorityGrouping>:
{
 8042b0c:	b480      	push	{r7}
 8042b0e:	b085      	sub	sp, #20
 8042b10:	af00      	add	r7, sp, #0
 8042b12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042b14:	687b      	ldr	r3, [r7, #4]
 8042b16:	f003 0307 	and.w	r3, r3, #7
 8042b1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8042b1c:	4b0b      	ldr	r3, [pc, #44]	; (8042b4c <__NVIC_SetPriorityGrouping+0x40>)
 8042b1e:	68db      	ldr	r3, [r3, #12]
 8042b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042b22:	68ba      	ldr	r2, [r7, #8]
 8042b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042b28:	4013      	ands	r3, r2
 8042b2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8042b2c:	68fb      	ldr	r3, [r7, #12]
 8042b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042b30:	68bb      	ldr	r3, [r7, #8]
 8042b32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8042b34:	4b06      	ldr	r3, [pc, #24]	; (8042b50 <__NVIC_SetPriorityGrouping+0x44>)
 8042b36:	4313      	orrs	r3, r2
 8042b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8042b3a:	4a04      	ldr	r2, [pc, #16]	; (8042b4c <__NVIC_SetPriorityGrouping+0x40>)
 8042b3c:	68bb      	ldr	r3, [r7, #8]
 8042b3e:	60d3      	str	r3, [r2, #12]
}
 8042b40:	bf00      	nop
 8042b42:	3714      	adds	r7, #20
 8042b44:	46bd      	mov	sp, r7
 8042b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b4a:	4770      	bx	lr
 8042b4c:	e000ed00 	.word	0xe000ed00
 8042b50:	05fa0000 	.word	0x05fa0000

08042b54 <__NVIC_GetPriorityGrouping>:
{
 8042b54:	b480      	push	{r7}
 8042b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8042b58:	4b04      	ldr	r3, [pc, #16]	; (8042b6c <__NVIC_GetPriorityGrouping+0x18>)
 8042b5a:	68db      	ldr	r3, [r3, #12]
 8042b5c:	0a1b      	lsrs	r3, r3, #8
 8042b5e:	f003 0307 	and.w	r3, r3, #7
}
 8042b62:	4618      	mov	r0, r3
 8042b64:	46bd      	mov	sp, r7
 8042b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b6a:	4770      	bx	lr
 8042b6c:	e000ed00 	.word	0xe000ed00

08042b70 <__NVIC_EnableIRQ>:
{
 8042b70:	b480      	push	{r7}
 8042b72:	b083      	sub	sp, #12
 8042b74:	af00      	add	r7, sp, #0
 8042b76:	4603      	mov	r3, r0
 8042b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042b7e:	2b00      	cmp	r3, #0
 8042b80:	db0b      	blt.n	8042b9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042b82:	79fb      	ldrb	r3, [r7, #7]
 8042b84:	f003 021f 	and.w	r2, r3, #31
 8042b88:	4907      	ldr	r1, [pc, #28]	; (8042ba8 <__NVIC_EnableIRQ+0x38>)
 8042b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042b8e:	095b      	lsrs	r3, r3, #5
 8042b90:	2001      	movs	r0, #1
 8042b92:	fa00 f202 	lsl.w	r2, r0, r2
 8042b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8042b9a:	bf00      	nop
 8042b9c:	370c      	adds	r7, #12
 8042b9e:	46bd      	mov	sp, r7
 8042ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ba4:	4770      	bx	lr
 8042ba6:	bf00      	nop
 8042ba8:	e000e100 	.word	0xe000e100

08042bac <__NVIC_DisableIRQ>:
{
 8042bac:	b480      	push	{r7}
 8042bae:	b083      	sub	sp, #12
 8042bb0:	af00      	add	r7, sp, #0
 8042bb2:	4603      	mov	r3, r0
 8042bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042bba:	2b00      	cmp	r3, #0
 8042bbc:	db12      	blt.n	8042be4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8042bbe:	79fb      	ldrb	r3, [r7, #7]
 8042bc0:	f003 021f 	and.w	r2, r3, #31
 8042bc4:	490a      	ldr	r1, [pc, #40]	; (8042bf0 <__NVIC_DisableIRQ+0x44>)
 8042bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042bca:	095b      	lsrs	r3, r3, #5
 8042bcc:	2001      	movs	r0, #1
 8042bce:	fa00 f202 	lsl.w	r2, r0, r2
 8042bd2:	3320      	adds	r3, #32
 8042bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8042bd8:	f3bf 8f4f 	dsb	sy
}
 8042bdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8042bde:	f3bf 8f6f 	isb	sy
}
 8042be2:	bf00      	nop
}
 8042be4:	bf00      	nop
 8042be6:	370c      	adds	r7, #12
 8042be8:	46bd      	mov	sp, r7
 8042bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bee:	4770      	bx	lr
 8042bf0:	e000e100 	.word	0xe000e100

08042bf4 <__NVIC_SetPriority>:
{
 8042bf4:	b480      	push	{r7}
 8042bf6:	b083      	sub	sp, #12
 8042bf8:	af00      	add	r7, sp, #0
 8042bfa:	4603      	mov	r3, r0
 8042bfc:	6039      	str	r1, [r7, #0]
 8042bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8042c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c04:	2b00      	cmp	r3, #0
 8042c06:	db0a      	blt.n	8042c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042c08:	683b      	ldr	r3, [r7, #0]
 8042c0a:	b2da      	uxtb	r2, r3
 8042c0c:	490c      	ldr	r1, [pc, #48]	; (8042c40 <__NVIC_SetPriority+0x4c>)
 8042c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042c12:	0112      	lsls	r2, r2, #4
 8042c14:	b2d2      	uxtb	r2, r2
 8042c16:	440b      	add	r3, r1
 8042c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8042c1c:	e00a      	b.n	8042c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8042c1e:	683b      	ldr	r3, [r7, #0]
 8042c20:	b2da      	uxtb	r2, r3
 8042c22:	4908      	ldr	r1, [pc, #32]	; (8042c44 <__NVIC_SetPriority+0x50>)
 8042c24:	79fb      	ldrb	r3, [r7, #7]
 8042c26:	f003 030f 	and.w	r3, r3, #15
 8042c2a:	3b04      	subs	r3, #4
 8042c2c:	0112      	lsls	r2, r2, #4
 8042c2e:	b2d2      	uxtb	r2, r2
 8042c30:	440b      	add	r3, r1
 8042c32:	761a      	strb	r2, [r3, #24]
}
 8042c34:	bf00      	nop
 8042c36:	370c      	adds	r7, #12
 8042c38:	46bd      	mov	sp, r7
 8042c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c3e:	4770      	bx	lr
 8042c40:	e000e100 	.word	0xe000e100
 8042c44:	e000ed00 	.word	0xe000ed00

08042c48 <NVIC_EncodePriority>:
{
 8042c48:	b480      	push	{r7}
 8042c4a:	b089      	sub	sp, #36	; 0x24
 8042c4c:	af00      	add	r7, sp, #0
 8042c4e:	60f8      	str	r0, [r7, #12]
 8042c50:	60b9      	str	r1, [r7, #8]
 8042c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042c54:	68fb      	ldr	r3, [r7, #12]
 8042c56:	f003 0307 	and.w	r3, r3, #7
 8042c5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042c5c:	69fb      	ldr	r3, [r7, #28]
 8042c5e:	f1c3 0307 	rsb	r3, r3, #7
 8042c62:	2b04      	cmp	r3, #4
 8042c64:	bf28      	it	cs
 8042c66:	2304      	movcs	r3, #4
 8042c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042c6a:	69fb      	ldr	r3, [r7, #28]
 8042c6c:	3304      	adds	r3, #4
 8042c6e:	2b06      	cmp	r3, #6
 8042c70:	d902      	bls.n	8042c78 <NVIC_EncodePriority+0x30>
 8042c72:	69fb      	ldr	r3, [r7, #28]
 8042c74:	3b03      	subs	r3, #3
 8042c76:	e000      	b.n	8042c7a <NVIC_EncodePriority+0x32>
 8042c78:	2300      	movs	r3, #0
 8042c7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8042c80:	69bb      	ldr	r3, [r7, #24]
 8042c82:	fa02 f303 	lsl.w	r3, r2, r3
 8042c86:	43da      	mvns	r2, r3
 8042c88:	68bb      	ldr	r3, [r7, #8]
 8042c8a:	401a      	ands	r2, r3
 8042c8c:	697b      	ldr	r3, [r7, #20]
 8042c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8042c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8042c94:	697b      	ldr	r3, [r7, #20]
 8042c96:	fa01 f303 	lsl.w	r3, r1, r3
 8042c9a:	43d9      	mvns	r1, r3
 8042c9c:	687b      	ldr	r3, [r7, #4]
 8042c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042ca0:	4313      	orrs	r3, r2
}
 8042ca2:	4618      	mov	r0, r3
 8042ca4:	3724      	adds	r7, #36	; 0x24
 8042ca6:	46bd      	mov	sp, r7
 8042ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042cac:	4770      	bx	lr
	...

08042cb0 <__NVIC_SystemReset>:
{
 8042cb0:	b480      	push	{r7}
 8042cb2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8042cb4:	f3bf 8f4f 	dsb	sy
}
 8042cb8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8042cba:	4b06      	ldr	r3, [pc, #24]	; (8042cd4 <__NVIC_SystemReset+0x24>)
 8042cbc:	68db      	ldr	r3, [r3, #12]
 8042cbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8042cc2:	4904      	ldr	r1, [pc, #16]	; (8042cd4 <__NVIC_SystemReset+0x24>)
 8042cc4:	4b04      	ldr	r3, [pc, #16]	; (8042cd8 <__NVIC_SystemReset+0x28>)
 8042cc6:	4313      	orrs	r3, r2
 8042cc8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8042cca:	f3bf 8f4f 	dsb	sy
}
 8042cce:	bf00      	nop
    __NOP();
 8042cd0:	bf00      	nop
 8042cd2:	e7fd      	b.n	8042cd0 <__NVIC_SystemReset+0x20>
 8042cd4:	e000ed00 	.word	0xe000ed00
 8042cd8:	05fa0004 	.word	0x05fa0004

08042cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8042cdc:	b580      	push	{r7, lr}
 8042cde:	b082      	sub	sp, #8
 8042ce0:	af00      	add	r7, sp, #0
 8042ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8042ce4:	6878      	ldr	r0, [r7, #4]
 8042ce6:	f7ff ff11 	bl	8042b0c <__NVIC_SetPriorityGrouping>
}
 8042cea:	bf00      	nop
 8042cec:	3708      	adds	r7, #8
 8042cee:	46bd      	mov	sp, r7
 8042cf0:	bd80      	pop	{r7, pc}

08042cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8042cf2:	b580      	push	{r7, lr}
 8042cf4:	b086      	sub	sp, #24
 8042cf6:	af00      	add	r7, sp, #0
 8042cf8:	4603      	mov	r3, r0
 8042cfa:	60b9      	str	r1, [r7, #8]
 8042cfc:	607a      	str	r2, [r7, #4]
 8042cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8042d00:	2300      	movs	r3, #0
 8042d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8042d04:	f7ff ff26 	bl	8042b54 <__NVIC_GetPriorityGrouping>
 8042d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8042d0a:	687a      	ldr	r2, [r7, #4]
 8042d0c:	68b9      	ldr	r1, [r7, #8]
 8042d0e:	6978      	ldr	r0, [r7, #20]
 8042d10:	f7ff ff9a 	bl	8042c48 <NVIC_EncodePriority>
 8042d14:	4602      	mov	r2, r0
 8042d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8042d1a:	4611      	mov	r1, r2
 8042d1c:	4618      	mov	r0, r3
 8042d1e:	f7ff ff69 	bl	8042bf4 <__NVIC_SetPriority>
}
 8042d22:	bf00      	nop
 8042d24:	3718      	adds	r7, #24
 8042d26:	46bd      	mov	sp, r7
 8042d28:	bd80      	pop	{r7, pc}

08042d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8042d2a:	b580      	push	{r7, lr}
 8042d2c:	b082      	sub	sp, #8
 8042d2e:	af00      	add	r7, sp, #0
 8042d30:	4603      	mov	r3, r0
 8042d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8042d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042d38:	4618      	mov	r0, r3
 8042d3a:	f7ff ff19 	bl	8042b70 <__NVIC_EnableIRQ>
}
 8042d3e:	bf00      	nop
 8042d40:	3708      	adds	r7, #8
 8042d42:	46bd      	mov	sp, r7
 8042d44:	bd80      	pop	{r7, pc}

08042d46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8042d46:	b580      	push	{r7, lr}
 8042d48:	b082      	sub	sp, #8
 8042d4a:	af00      	add	r7, sp, #0
 8042d4c:	4603      	mov	r3, r0
 8042d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8042d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8042d54:	4618      	mov	r0, r3
 8042d56:	f7ff ff29 	bl	8042bac <__NVIC_DisableIRQ>
}
 8042d5a:	bf00      	nop
 8042d5c:	3708      	adds	r7, #8
 8042d5e:	46bd      	mov	sp, r7
 8042d60:	bd80      	pop	{r7, pc}

08042d62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8042d62:	b580      	push	{r7, lr}
 8042d64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8042d66:	f7ff ffa3 	bl	8042cb0 <__NVIC_SystemReset>

08042d6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8042d6a:	b580      	push	{r7, lr}
 8042d6c:	b084      	sub	sp, #16
 8042d6e:	af00      	add	r7, sp, #0
 8042d70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8042d72:	687b      	ldr	r3, [r7, #4]
 8042d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042d76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8042d78:	f7ff f97a 	bl	8042070 <HAL_GetTick>
 8042d7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8042d7e:	687b      	ldr	r3, [r7, #4]
 8042d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8042d84:	b2db      	uxtb	r3, r3
 8042d86:	2b02      	cmp	r3, #2
 8042d88:	d008      	beq.n	8042d9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8042d8a:	687b      	ldr	r3, [r7, #4]
 8042d8c:	2280      	movs	r2, #128	; 0x80
 8042d8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8042d90:	687b      	ldr	r3, [r7, #4]
 8042d92:	2200      	movs	r2, #0
 8042d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8042d98:	2301      	movs	r3, #1
 8042d9a:	e052      	b.n	8042e42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8042d9c:	687b      	ldr	r3, [r7, #4]
 8042d9e:	681b      	ldr	r3, [r3, #0]
 8042da0:	681a      	ldr	r2, [r3, #0]
 8042da2:	687b      	ldr	r3, [r7, #4]
 8042da4:	681b      	ldr	r3, [r3, #0]
 8042da6:	f022 0216 	bic.w	r2, r2, #22
 8042daa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8042dac:	687b      	ldr	r3, [r7, #4]
 8042dae:	681b      	ldr	r3, [r3, #0]
 8042db0:	695a      	ldr	r2, [r3, #20]
 8042db2:	687b      	ldr	r3, [r7, #4]
 8042db4:	681b      	ldr	r3, [r3, #0]
 8042db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8042dba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8042dbc:	687b      	ldr	r3, [r7, #4]
 8042dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042dc0:	2b00      	cmp	r3, #0
 8042dc2:	d103      	bne.n	8042dcc <HAL_DMA_Abort+0x62>
 8042dc4:	687b      	ldr	r3, [r7, #4]
 8042dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042dc8:	2b00      	cmp	r3, #0
 8042dca:	d007      	beq.n	8042ddc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8042dcc:	687b      	ldr	r3, [r7, #4]
 8042dce:	681b      	ldr	r3, [r3, #0]
 8042dd0:	681a      	ldr	r2, [r3, #0]
 8042dd2:	687b      	ldr	r3, [r7, #4]
 8042dd4:	681b      	ldr	r3, [r3, #0]
 8042dd6:	f022 0208 	bic.w	r2, r2, #8
 8042dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8042ddc:	687b      	ldr	r3, [r7, #4]
 8042dde:	681b      	ldr	r3, [r3, #0]
 8042de0:	681a      	ldr	r2, [r3, #0]
 8042de2:	687b      	ldr	r3, [r7, #4]
 8042de4:	681b      	ldr	r3, [r3, #0]
 8042de6:	f022 0201 	bic.w	r2, r2, #1
 8042dea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8042dec:	e013      	b.n	8042e16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8042dee:	f7ff f93f 	bl	8042070 <HAL_GetTick>
 8042df2:	4602      	mov	r2, r0
 8042df4:	68bb      	ldr	r3, [r7, #8]
 8042df6:	1ad3      	subs	r3, r2, r3
 8042df8:	2b05      	cmp	r3, #5
 8042dfa:	d90c      	bls.n	8042e16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	2220      	movs	r2, #32
 8042e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8042e02:	687b      	ldr	r3, [r7, #4]
 8042e04:	2203      	movs	r2, #3
 8042e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8042e0a:	687b      	ldr	r3, [r7, #4]
 8042e0c:	2200      	movs	r2, #0
 8042e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8042e12:	2303      	movs	r3, #3
 8042e14:	e015      	b.n	8042e42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8042e16:	687b      	ldr	r3, [r7, #4]
 8042e18:	681b      	ldr	r3, [r3, #0]
 8042e1a:	681b      	ldr	r3, [r3, #0]
 8042e1c:	f003 0301 	and.w	r3, r3, #1
 8042e20:	2b00      	cmp	r3, #0
 8042e22:	d1e4      	bne.n	8042dee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8042e24:	687b      	ldr	r3, [r7, #4]
 8042e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8042e28:	223f      	movs	r2, #63	; 0x3f
 8042e2a:	409a      	lsls	r2, r3
 8042e2c:	68fb      	ldr	r3, [r7, #12]
 8042e2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8042e30:	687b      	ldr	r3, [r7, #4]
 8042e32:	2201      	movs	r2, #1
 8042e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8042e38:	687b      	ldr	r3, [r7, #4]
 8042e3a:	2200      	movs	r2, #0
 8042e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8042e40:	2300      	movs	r3, #0
}
 8042e42:	4618      	mov	r0, r3
 8042e44:	3710      	adds	r7, #16
 8042e46:	46bd      	mov	sp, r7
 8042e48:	bd80      	pop	{r7, pc}

08042e4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8042e4a:	b480      	push	{r7}
 8042e4c:	b083      	sub	sp, #12
 8042e4e:	af00      	add	r7, sp, #0
 8042e50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8042e52:	687b      	ldr	r3, [r7, #4]
 8042e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8042e58:	b2db      	uxtb	r3, r3
 8042e5a:	2b02      	cmp	r3, #2
 8042e5c:	d004      	beq.n	8042e68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8042e5e:	687b      	ldr	r3, [r7, #4]
 8042e60:	2280      	movs	r2, #128	; 0x80
 8042e62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8042e64:	2301      	movs	r3, #1
 8042e66:	e00c      	b.n	8042e82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8042e68:	687b      	ldr	r3, [r7, #4]
 8042e6a:	2205      	movs	r2, #5
 8042e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8042e70:	687b      	ldr	r3, [r7, #4]
 8042e72:	681b      	ldr	r3, [r3, #0]
 8042e74:	681a      	ldr	r2, [r3, #0]
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	f022 0201 	bic.w	r2, r2, #1
 8042e7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8042e80:	2300      	movs	r3, #0
}
 8042e82:	4618      	mov	r0, r3
 8042e84:	370c      	adds	r7, #12
 8042e86:	46bd      	mov	sp, r7
 8042e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e8c:	4770      	bx	lr
	...

08042e90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8042e90:	b580      	push	{r7, lr}
 8042e92:	b084      	sub	sp, #16
 8042e94:	af00      	add	r7, sp, #0
 8042e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8042e98:	687b      	ldr	r3, [r7, #4]
 8042e9a:	2b00      	cmp	r3, #0
 8042e9c:	d101      	bne.n	8042ea2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8042e9e:	2301      	movs	r3, #1
 8042ea0:	e06a      	b.n	8042f78 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8042ea2:	687b      	ldr	r3, [r7, #4]
 8042ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042ea8:	2b00      	cmp	r3, #0
 8042eaa:	d106      	bne.n	8042eba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8042eac:	687b      	ldr	r3, [r7, #4]
 8042eae:	2223      	movs	r2, #35	; 0x23
 8042eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8042eb4:	6878      	ldr	r0, [r7, #4]
 8042eb6:	f005 fa55 	bl	8048364 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042eba:	4b31      	ldr	r3, [pc, #196]	; (8042f80 <HAL_ETH_Init+0xf0>)
 8042ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042ebe:	4a30      	ldr	r2, [pc, #192]	; (8042f80 <HAL_ETH_Init+0xf0>)
 8042ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8042ec6:	4b2e      	ldr	r3, [pc, #184]	; (8042f80 <HAL_ETH_Init+0xf0>)
 8042ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042ece:	60bb      	str	r3, [r7, #8]
 8042ed0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8042ed2:	4b2c      	ldr	r3, [pc, #176]	; (8042f84 <HAL_ETH_Init+0xf4>)
 8042ed4:	685b      	ldr	r3, [r3, #4]
 8042ed6:	4a2b      	ldr	r2, [pc, #172]	; (8042f84 <HAL_ETH_Init+0xf4>)
 8042ed8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8042edc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8042ede:	4b29      	ldr	r3, [pc, #164]	; (8042f84 <HAL_ETH_Init+0xf4>)
 8042ee0:	685a      	ldr	r2, [r3, #4]
 8042ee2:	687b      	ldr	r3, [r7, #4]
 8042ee4:	689b      	ldr	r3, [r3, #8]
 8042ee6:	4927      	ldr	r1, [pc, #156]	; (8042f84 <HAL_ETH_Init+0xf4>)
 8042ee8:	4313      	orrs	r3, r2
 8042eea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8042eec:	4b25      	ldr	r3, [pc, #148]	; (8042f84 <HAL_ETH_Init+0xf4>)
 8042eee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8042ef0:	687b      	ldr	r3, [r7, #4]
 8042ef2:	681b      	ldr	r3, [r3, #0]
 8042ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042ef8:	681b      	ldr	r3, [r3, #0]
 8042efa:	687a      	ldr	r2, [r7, #4]
 8042efc:	6812      	ldr	r2, [r2, #0]
 8042efe:	f043 0301 	orr.w	r3, r3, #1
 8042f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8042f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8042f08:	f7ff f8b2 	bl	8042070 <HAL_GetTick>
 8042f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8042f0e:	e011      	b.n	8042f34 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8042f10:	f7ff f8ae 	bl	8042070 <HAL_GetTick>
 8042f14:	4602      	mov	r2, r0
 8042f16:	68fb      	ldr	r3, [r7, #12]
 8042f18:	1ad3      	subs	r3, r2, r3
 8042f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8042f1e:	d909      	bls.n	8042f34 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8042f20:	687b      	ldr	r3, [r7, #4]
 8042f22:	2204      	movs	r2, #4
 8042f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	22e0      	movs	r2, #224	; 0xe0
 8042f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8042f30:	2301      	movs	r3, #1
 8042f32:	e021      	b.n	8042f78 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8042f34:	687b      	ldr	r3, [r7, #4]
 8042f36:	681b      	ldr	r3, [r3, #0]
 8042f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8042f3c:	681b      	ldr	r3, [r3, #0]
 8042f3e:	f003 0301 	and.w	r3, r3, #1
 8042f42:	2b00      	cmp	r3, #0
 8042f44:	d1e4      	bne.n	8042f10 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8042f46:	6878      	ldr	r0, [r7, #4]
 8042f48:	f000 ff4c 	bl	8043de4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8042f4c:	6878      	ldr	r0, [r7, #4]
 8042f4e:	f000 fff3 	bl	8043f38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8042f52:	6878      	ldr	r0, [r7, #4]
 8042f54:	f001 f849 	bl	8043fea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8042f58:	687b      	ldr	r3, [r7, #4]
 8042f5a:	685b      	ldr	r3, [r3, #4]
 8042f5c:	461a      	mov	r2, r3
 8042f5e:	2100      	movs	r1, #0
 8042f60:	6878      	ldr	r0, [r7, #4]
 8042f62:	f000 ffb1 	bl	8043ec8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8042f66:	687b      	ldr	r3, [r7, #4]
 8042f68:	2200      	movs	r2, #0
 8042f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8042f6e:	687b      	ldr	r3, [r7, #4]
 8042f70:	2210      	movs	r2, #16
 8042f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8042f76:	2300      	movs	r3, #0
}
 8042f78:	4618      	mov	r0, r3
 8042f7a:	3710      	adds	r7, #16
 8042f7c:	46bd      	mov	sp, r7
 8042f7e:	bd80      	pop	{r7, pc}
 8042f80:	40023800 	.word	0x40023800
 8042f84:	40013800 	.word	0x40013800

08042f88 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8042f88:	b580      	push	{r7, lr}
 8042f8a:	b084      	sub	sp, #16
 8042f8c:	af00      	add	r7, sp, #0
 8042f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8042f90:	687b      	ldr	r3, [r7, #4]
 8042f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042f96:	2b10      	cmp	r3, #16
 8042f98:	d17b      	bne.n	8043092 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8042f9a:	687b      	ldr	r3, [r7, #4]
 8042f9c:	2223      	movs	r2, #35	; 0x23
 8042f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8042fa2:	687b      	ldr	r3, [r7, #4]
 8042fa4:	2201      	movs	r2, #1
 8042fa6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8042fa8:	687b      	ldr	r3, [r7, #4]
 8042faa:	681b      	ldr	r3, [r3, #0]
 8042fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042fae:	687b      	ldr	r3, [r7, #4]
 8042fb0:	681b      	ldr	r3, [r3, #0]
 8042fb2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8042fb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8042fb8:	687b      	ldr	r3, [r7, #4]
 8042fba:	681b      	ldr	r3, [r3, #0]
 8042fbc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8042fc0:	687b      	ldr	r3, [r7, #4]
 8042fc2:	681a      	ldr	r2, [r3, #0]
 8042fc4:	4b35      	ldr	r3, [pc, #212]	; (804309c <HAL_ETH_Start_IT+0x114>)
 8042fc6:	430b      	orrs	r3, r1
 8042fc8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8042fcc:	687b      	ldr	r3, [r7, #4]
 8042fce:	681b      	ldr	r3, [r3, #0]
 8042fd0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8042fd4:	687b      	ldr	r3, [r7, #4]
 8042fd6:	681b      	ldr	r3, [r3, #0]
 8042fd8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8042fdc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8042fe0:	687b      	ldr	r3, [r7, #4]
 8042fe2:	2204      	movs	r2, #4
 8042fe4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8042fe6:	6878      	ldr	r0, [r7, #4]
 8042fe8:	f000 f9fc 	bl	80433e4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8042fec:	687b      	ldr	r3, [r7, #4]
 8042fee:	681b      	ldr	r3, [r3, #0]
 8042ff0:	681a      	ldr	r2, [r3, #0]
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	681b      	ldr	r3, [r3, #0]
 8042ff6:	f042 0208 	orr.w	r2, r2, #8
 8042ffa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8042ffc:	687b      	ldr	r3, [r7, #4]
 8042ffe:	681b      	ldr	r3, [r3, #0]
 8043000:	681b      	ldr	r3, [r3, #0]
 8043002:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8043004:	2001      	movs	r0, #1
 8043006:	f7ff f83f 	bl	8042088 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 804300a:	687b      	ldr	r3, [r7, #4]
 804300c:	681b      	ldr	r3, [r3, #0]
 804300e:	68fa      	ldr	r2, [r7, #12]
 8043010:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8043012:	687b      	ldr	r3, [r7, #4]
 8043014:	681b      	ldr	r3, [r3, #0]
 8043016:	681a      	ldr	r2, [r3, #0]
 8043018:	687b      	ldr	r3, [r7, #4]
 804301a:	681b      	ldr	r3, [r3, #0]
 804301c:	f042 0204 	orr.w	r2, r2, #4
 8043020:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8043022:	687b      	ldr	r3, [r7, #4]
 8043024:	681b      	ldr	r3, [r3, #0]
 8043026:	681b      	ldr	r3, [r3, #0]
 8043028:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 804302a:	2001      	movs	r0, #1
 804302c:	f7ff f82c 	bl	8042088 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8043030:	687b      	ldr	r3, [r7, #4]
 8043032:	681b      	ldr	r3, [r3, #0]
 8043034:	68fa      	ldr	r2, [r7, #12]
 8043036:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8043038:	6878      	ldr	r0, [r7, #4]
 804303a:	f000 fd74 	bl	8043b26 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 804303e:	687b      	ldr	r3, [r7, #4]
 8043040:	681b      	ldr	r3, [r3, #0]
 8043042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043046:	699b      	ldr	r3, [r3, #24]
 8043048:	687a      	ldr	r2, [r7, #4]
 804304a:	6812      	ldr	r2, [r2, #0]
 804304c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8043050:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043054:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	681b      	ldr	r3, [r3, #0]
 804305a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804305e:	699b      	ldr	r3, [r3, #24]
 8043060:	687a      	ldr	r2, [r7, #4]
 8043062:	6812      	ldr	r2, [r2, #0]
 8043064:	f043 0302 	orr.w	r3, r3, #2
 8043068:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 804306c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 804306e:	687b      	ldr	r3, [r7, #4]
 8043070:	681b      	ldr	r3, [r3, #0]
 8043072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043076:	69d9      	ldr	r1, [r3, #28]
 8043078:	687b      	ldr	r3, [r7, #4]
 804307a:	681a      	ldr	r2, [r3, #0]
 804307c:	4b08      	ldr	r3, [pc, #32]	; (80430a0 <HAL_ETH_Start_IT+0x118>)
 804307e:	430b      	orrs	r3, r1
 8043080:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043084:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8043086:	687b      	ldr	r3, [r7, #4]
 8043088:	2223      	movs	r2, #35	; 0x23
 804308a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 804308e:	2300      	movs	r3, #0
 8043090:	e000      	b.n	8043094 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8043092:	2301      	movs	r3, #1
  }
}
 8043094:	4618      	mov	r0, r3
 8043096:	3710      	adds	r7, #16
 8043098:	46bd      	mov	sp, r7
 804309a:	bd80      	pop	{r7, pc}
 804309c:	00020060 	.word	0x00020060
 80430a0:	0001a0c1 	.word	0x0001a0c1

080430a4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80430a4:	b580      	push	{r7, lr}
 80430a6:	b086      	sub	sp, #24
 80430a8:	af00      	add	r7, sp, #0
 80430aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80430ac:	687b      	ldr	r3, [r7, #4]
 80430ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80430b2:	2b23      	cmp	r3, #35	; 0x23
 80430b4:	d16e      	bne.n	8043194 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80430b6:	687b      	ldr	r3, [r7, #4]
 80430b8:	2223      	movs	r2, #35	; 0x23
 80430ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80430be:	687b      	ldr	r3, [r7, #4]
 80430c0:	681b      	ldr	r3, [r3, #0]
 80430c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80430c6:	69d9      	ldr	r1, [r3, #28]
 80430c8:	687b      	ldr	r3, [r7, #4]
 80430ca:	681a      	ldr	r2, [r3, #0]
 80430cc:	4b34      	ldr	r3, [pc, #208]	; (80431a0 <HAL_ETH_Stop_IT+0xfc>)
 80430ce:	400b      	ands	r3, r1
 80430d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80430d4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80430d6:	687b      	ldr	r3, [r7, #4]
 80430d8:	681b      	ldr	r3, [r3, #0]
 80430da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80430de:	699b      	ldr	r3, [r3, #24]
 80430e0:	687a      	ldr	r2, [r7, #4]
 80430e2:	6812      	ldr	r2, [r2, #0]
 80430e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80430e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80430ec:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80430ee:	687b      	ldr	r3, [r7, #4]
 80430f0:	681b      	ldr	r3, [r3, #0]
 80430f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80430f6:	699b      	ldr	r3, [r3, #24]
 80430f8:	687a      	ldr	r2, [r7, #4]
 80430fa:	6812      	ldr	r2, [r2, #0]
 80430fc:	f023 0302 	bic.w	r3, r3, #2
 8043100:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043104:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8043106:	687b      	ldr	r3, [r7, #4]
 8043108:	681b      	ldr	r3, [r3, #0]
 804310a:	681a      	ldr	r2, [r3, #0]
 804310c:	687b      	ldr	r3, [r7, #4]
 804310e:	681b      	ldr	r3, [r3, #0]
 8043110:	f022 0204 	bic.w	r2, r2, #4
 8043114:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8043116:	687b      	ldr	r3, [r7, #4]
 8043118:	681b      	ldr	r3, [r3, #0]
 804311a:	681b      	ldr	r3, [r3, #0]
 804311c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 804311e:	2001      	movs	r0, #1
 8043120:	f7fe ffb2 	bl	8042088 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8043124:	687b      	ldr	r3, [r7, #4]
 8043126:	681b      	ldr	r3, [r3, #0]
 8043128:	693a      	ldr	r2, [r7, #16]
 804312a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 804312c:	6878      	ldr	r0, [r7, #4]
 804312e:	f000 fcfa 	bl	8043b26 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8043132:	687b      	ldr	r3, [r7, #4]
 8043134:	681b      	ldr	r3, [r3, #0]
 8043136:	681a      	ldr	r2, [r3, #0]
 8043138:	687b      	ldr	r3, [r7, #4]
 804313a:	681b      	ldr	r3, [r3, #0]
 804313c:	f022 0208 	bic.w	r2, r2, #8
 8043140:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8043142:	687b      	ldr	r3, [r7, #4]
 8043144:	681b      	ldr	r3, [r3, #0]
 8043146:	681b      	ldr	r3, [r3, #0]
 8043148:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 804314a:	2001      	movs	r0, #1
 804314c:	f7fe ff9c 	bl	8042088 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8043150:	687b      	ldr	r3, [r7, #4]
 8043152:	681b      	ldr	r3, [r3, #0]
 8043154:	693a      	ldr	r2, [r7, #16]
 8043156:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8043158:	2300      	movs	r3, #0
 804315a:	617b      	str	r3, [r7, #20]
 804315c:	e00e      	b.n	804317c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 804315e:	687b      	ldr	r3, [r7, #4]
 8043160:	697a      	ldr	r2, [r7, #20]
 8043162:	3212      	adds	r2, #18
 8043164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043168:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 804316a:	68fb      	ldr	r3, [r7, #12]
 804316c:	685b      	ldr	r3, [r3, #4]
 804316e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8043172:	68fb      	ldr	r3, [r7, #12]
 8043174:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8043176:	697b      	ldr	r3, [r7, #20]
 8043178:	3301      	adds	r3, #1
 804317a:	617b      	str	r3, [r7, #20]
 804317c:	697b      	ldr	r3, [r7, #20]
 804317e:	2b03      	cmp	r3, #3
 8043180:	d9ed      	bls.n	804315e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8043182:	687b      	ldr	r3, [r7, #4]
 8043184:	2200      	movs	r2, #0
 8043186:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8043188:	687b      	ldr	r3, [r7, #4]
 804318a:	2210      	movs	r2, #16
 804318c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8043190:	2300      	movs	r3, #0
 8043192:	e000      	b.n	8043196 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8043194:	2301      	movs	r3, #1
  }
}
 8043196:	4618      	mov	r0, r3
 8043198:	3718      	adds	r7, #24
 804319a:	46bd      	mov	sp, r7
 804319c:	bd80      	pop	{r7, pc}
 804319e:	bf00      	nop
 80431a0:	fffe5f3e 	.word	0xfffe5f3e

080431a4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80431a4:	b580      	push	{r7, lr}
 80431a6:	b082      	sub	sp, #8
 80431a8:	af00      	add	r7, sp, #0
 80431aa:	6078      	str	r0, [r7, #4]
 80431ac:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80431ae:	683b      	ldr	r3, [r7, #0]
 80431b0:	2b00      	cmp	r3, #0
 80431b2:	d109      	bne.n	80431c8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80431b4:	687b      	ldr	r3, [r7, #4]
 80431b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80431ba:	f043 0201 	orr.w	r2, r3, #1
 80431be:	687b      	ldr	r3, [r7, #4]
 80431c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80431c4:	2301      	movs	r3, #1
 80431c6:	e045      	b.n	8043254 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80431c8:	687b      	ldr	r3, [r7, #4]
 80431ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80431ce:	2b23      	cmp	r3, #35	; 0x23
 80431d0:	d13f      	bne.n	8043252 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80431d2:	683b      	ldr	r3, [r7, #0]
 80431d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80431d6:	687b      	ldr	r3, [r7, #4]
 80431d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80431da:	2201      	movs	r2, #1
 80431dc:	6839      	ldr	r1, [r7, #0]
 80431de:	6878      	ldr	r0, [r7, #4]
 80431e0:	f000 ff70 	bl	80440c4 <ETH_Prepare_Tx_Descriptors>
 80431e4:	4603      	mov	r3, r0
 80431e6:	2b00      	cmp	r3, #0
 80431e8:	d009      	beq.n	80431fe <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80431ea:	687b      	ldr	r3, [r7, #4]
 80431ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80431f0:	f043 0202 	orr.w	r2, r3, #2
 80431f4:	687b      	ldr	r3, [r7, #4]
 80431f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80431fa:	2301      	movs	r3, #1
 80431fc:	e02a      	b.n	8043254 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80431fe:	f3bf 8f4f 	dsb	sy
}
 8043202:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8043204:	687b      	ldr	r3, [r7, #4]
 8043206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043208:	1c5a      	adds	r2, r3, #1
 804320a:	687b      	ldr	r3, [r7, #4]
 804320c:	629a      	str	r2, [r3, #40]	; 0x28
 804320e:	687b      	ldr	r3, [r7, #4]
 8043210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043212:	2b03      	cmp	r3, #3
 8043214:	d904      	bls.n	8043220 <HAL_ETH_Transmit_IT+0x7c>
 8043216:	687b      	ldr	r3, [r7, #4]
 8043218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804321a:	1f1a      	subs	r2, r3, #4
 804321c:	687b      	ldr	r3, [r7, #4]
 804321e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8043220:	687b      	ldr	r3, [r7, #4]
 8043222:	681b      	ldr	r3, [r3, #0]
 8043224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043228:	695b      	ldr	r3, [r3, #20]
 804322a:	f003 0304 	and.w	r3, r3, #4
 804322e:	2b00      	cmp	r3, #0
 8043230:	d00d      	beq.n	804324e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8043232:	687b      	ldr	r3, [r7, #4]
 8043234:	681b      	ldr	r3, [r3, #0]
 8043236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804323a:	461a      	mov	r2, r3
 804323c:	2304      	movs	r3, #4
 804323e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8043240:	687b      	ldr	r3, [r7, #4]
 8043242:	681b      	ldr	r3, [r3, #0]
 8043244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043248:	461a      	mov	r2, r3
 804324a:	2300      	movs	r3, #0
 804324c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 804324e:	2300      	movs	r3, #0
 8043250:	e000      	b.n	8043254 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8043252:	2301      	movs	r3, #1
  }
}
 8043254:	4618      	mov	r0, r3
 8043256:	3708      	adds	r7, #8
 8043258:	46bd      	mov	sp, r7
 804325a:	bd80      	pop	{r7, pc}

0804325c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 804325c:	b580      	push	{r7, lr}
 804325e:	b088      	sub	sp, #32
 8043260:	af00      	add	r7, sp, #0
 8043262:	6078      	str	r0, [r7, #4]
 8043264:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8043266:	2300      	movs	r3, #0
 8043268:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 804326a:	2300      	movs	r3, #0
 804326c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 804326e:	683b      	ldr	r3, [r7, #0]
 8043270:	2b00      	cmp	r3, #0
 8043272:	d109      	bne.n	8043288 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8043274:	687b      	ldr	r3, [r7, #4]
 8043276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804327a:	f043 0201 	orr.w	r2, r3, #1
 804327e:	687b      	ldr	r3, [r7, #4]
 8043280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8043284:	2301      	movs	r3, #1
 8043286:	e0a8      	b.n	80433da <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8043288:	687b      	ldr	r3, [r7, #4]
 804328a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804328e:	2b23      	cmp	r3, #35	; 0x23
 8043290:	d001      	beq.n	8043296 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8043292:	2301      	movs	r3, #1
 8043294:	e0a1      	b.n	80433da <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8043296:	687b      	ldr	r3, [r7, #4]
 8043298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804329a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 804329c:	687b      	ldr	r3, [r7, #4]
 804329e:	69fa      	ldr	r2, [r7, #28]
 80432a0:	3212      	adds	r2, #18
 80432a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80432a6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80432a8:	687b      	ldr	r3, [r7, #4]
 80432aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80432ac:	f1c3 0304 	rsb	r3, r3, #4
 80432b0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80432b2:	e06a      	b.n	804338a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80432b4:	69bb      	ldr	r3, [r7, #24]
 80432b6:	681b      	ldr	r3, [r3, #0]
 80432b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80432bc:	2b00      	cmp	r3, #0
 80432be:	d007      	beq.n	80432d0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80432c0:	69bb      	ldr	r3, [r7, #24]
 80432c2:	699a      	ldr	r2, [r3, #24]
 80432c4:	687b      	ldr	r3, [r7, #4]
 80432c6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80432c8:	69bb      	ldr	r3, [r7, #24]
 80432ca:	69da      	ldr	r2, [r3, #28]
 80432cc:	687b      	ldr	r3, [r7, #4]
 80432ce:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80432d0:	69bb      	ldr	r3, [r7, #24]
 80432d2:	681b      	ldr	r3, [r3, #0]
 80432d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80432d8:	2b00      	cmp	r3, #0
 80432da:	d103      	bne.n	80432e4 <HAL_ETH_ReadData+0x88>
 80432dc:	687b      	ldr	r3, [r7, #4]
 80432de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80432e0:	2b00      	cmp	r3, #0
 80432e2:	d040      	beq.n	8043366 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80432e4:	69bb      	ldr	r3, [r7, #24]
 80432e6:	681b      	ldr	r3, [r3, #0]
 80432e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80432ec:	2b00      	cmp	r3, #0
 80432ee:	d005      	beq.n	80432fc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80432f0:	687b      	ldr	r3, [r7, #4]
 80432f2:	2200      	movs	r2, #0
 80432f4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80432f6:	687b      	ldr	r3, [r7, #4]
 80432f8:	2200      	movs	r2, #0
 80432fa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80432fc:	687b      	ldr	r3, [r7, #4]
 80432fe:	695b      	ldr	r3, [r3, #20]
 8043300:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8043302:	69bb      	ldr	r3, [r7, #24]
 8043304:	681b      	ldr	r3, [r3, #0]
 8043306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804330a:	2b00      	cmp	r3, #0
 804330c:	d00c      	beq.n	8043328 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 804330e:	69bb      	ldr	r3, [r7, #24]
 8043310:	681b      	ldr	r3, [r3, #0]
 8043312:	0c1b      	lsrs	r3, r3, #16
 8043314:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8043318:	3b04      	subs	r3, #4
 804331a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 804331c:	69bb      	ldr	r3, [r7, #24]
 804331e:	681a      	ldr	r2, [r3, #0]
 8043320:	687b      	ldr	r3, [r7, #4]
 8043322:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8043324:	2301      	movs	r3, #1
 8043326:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8043328:	69bb      	ldr	r3, [r7, #24]
 804332a:	689a      	ldr	r2, [r3, #8]
 804332c:	69bb      	ldr	r3, [r7, #24]
 804332e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8043330:	687b      	ldr	r3, [r7, #4]
 8043332:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8043336:	687b      	ldr	r3, [r7, #4]
 8043338:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 804333c:	69bb      	ldr	r3, [r7, #24]
 804333e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8043340:	461a      	mov	r2, r3
 8043342:	693b      	ldr	r3, [r7, #16]
 8043344:	b29b      	uxth	r3, r3
 8043346:	f005 f94b 	bl	80485e0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 804334a:	687b      	ldr	r3, [r7, #4]
 804334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804334e:	1c5a      	adds	r2, r3, #1
 8043350:	687b      	ldr	r3, [r7, #4]
 8043352:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8043354:	687b      	ldr	r3, [r7, #4]
 8043356:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8043358:	693b      	ldr	r3, [r7, #16]
 804335a:	441a      	add	r2, r3
 804335c:	687b      	ldr	r3, [r7, #4]
 804335e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8043360:	69bb      	ldr	r3, [r7, #24]
 8043362:	2200      	movs	r2, #0
 8043364:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8043366:	69fb      	ldr	r3, [r7, #28]
 8043368:	3301      	adds	r3, #1
 804336a:	61fb      	str	r3, [r7, #28]
 804336c:	69fb      	ldr	r3, [r7, #28]
 804336e:	2b03      	cmp	r3, #3
 8043370:	d902      	bls.n	8043378 <HAL_ETH_ReadData+0x11c>
 8043372:	69fb      	ldr	r3, [r7, #28]
 8043374:	3b04      	subs	r3, #4
 8043376:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8043378:	687b      	ldr	r3, [r7, #4]
 804337a:	69fa      	ldr	r2, [r7, #28]
 804337c:	3212      	adds	r2, #18
 804337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043382:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8043384:	697b      	ldr	r3, [r7, #20]
 8043386:	3301      	adds	r3, #1
 8043388:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 804338a:	69bb      	ldr	r3, [r7, #24]
 804338c:	681b      	ldr	r3, [r3, #0]
 804338e:	2b00      	cmp	r3, #0
 8043390:	db06      	blt.n	80433a0 <HAL_ETH_ReadData+0x144>
 8043392:	697a      	ldr	r2, [r7, #20]
 8043394:	68bb      	ldr	r3, [r7, #8]
 8043396:	429a      	cmp	r2, r3
 8043398:	d202      	bcs.n	80433a0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 804339a:	7bfb      	ldrb	r3, [r7, #15]
 804339c:	2b00      	cmp	r3, #0
 804339e:	d089      	beq.n	80432b4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80433a0:	687b      	ldr	r3, [r7, #4]
 80433a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80433a4:	697b      	ldr	r3, [r7, #20]
 80433a6:	441a      	add	r2, r3
 80433a8:	687b      	ldr	r3, [r7, #4]
 80433aa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80433ac:	687b      	ldr	r3, [r7, #4]
 80433ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80433b0:	2b00      	cmp	r3, #0
 80433b2:	d002      	beq.n	80433ba <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80433b4:	6878      	ldr	r0, [r7, #4]
 80433b6:	f000 f815 	bl	80433e4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80433ba:	687b      	ldr	r3, [r7, #4]
 80433bc:	69fa      	ldr	r2, [r7, #28]
 80433be:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80433c0:	7bfb      	ldrb	r3, [r7, #15]
 80433c2:	2b01      	cmp	r3, #1
 80433c4:	d108      	bne.n	80433d8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80433c6:	687b      	ldr	r3, [r7, #4]
 80433c8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80433ca:	683b      	ldr	r3, [r7, #0]
 80433cc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80433ce:	687b      	ldr	r3, [r7, #4]
 80433d0:	2200      	movs	r2, #0
 80433d2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80433d4:	2300      	movs	r3, #0
 80433d6:	e000      	b.n	80433da <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80433d8:	2301      	movs	r3, #1
}
 80433da:	4618      	mov	r0, r3
 80433dc:	3720      	adds	r7, #32
 80433de:	46bd      	mov	sp, r7
 80433e0:	bd80      	pop	{r7, pc}
	...

080433e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80433e4:	b580      	push	{r7, lr}
 80433e6:	b088      	sub	sp, #32
 80433e8:	af00      	add	r7, sp, #0
 80433ea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80433ec:	2300      	movs	r3, #0
 80433ee:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80433f0:	2301      	movs	r3, #1
 80433f2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80433f4:	687b      	ldr	r3, [r7, #4]
 80433f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80433f8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80433fa:	687b      	ldr	r3, [r7, #4]
 80433fc:	69fa      	ldr	r2, [r7, #28]
 80433fe:	3212      	adds	r2, #18
 8043400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043404:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8043406:	687b      	ldr	r3, [r7, #4]
 8043408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804340a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 804340c:	e040      	b.n	8043490 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 804340e:	697b      	ldr	r3, [r7, #20]
 8043410:	6a1b      	ldr	r3, [r3, #32]
 8043412:	2b00      	cmp	r3, #0
 8043414:	d112      	bne.n	804343c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8043416:	f107 030c 	add.w	r3, r7, #12
 804341a:	4618      	mov	r0, r3
 804341c:	f005 f8b0 	bl	8048580 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8043420:	68fb      	ldr	r3, [r7, #12]
 8043422:	2b00      	cmp	r3, #0
 8043424:	d102      	bne.n	804342c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8043426:	2300      	movs	r3, #0
 8043428:	74fb      	strb	r3, [r7, #19]
 804342a:	e007      	b.n	804343c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 804342c:	68fb      	ldr	r3, [r7, #12]
 804342e:	461a      	mov	r2, r3
 8043430:	697b      	ldr	r3, [r7, #20]
 8043432:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8043434:	68fb      	ldr	r3, [r7, #12]
 8043436:	461a      	mov	r2, r3
 8043438:	697b      	ldr	r3, [r7, #20]
 804343a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 804343c:	7cfb      	ldrb	r3, [r7, #19]
 804343e:	2b00      	cmp	r3, #0
 8043440:	d026      	beq.n	8043490 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8043442:	687b      	ldr	r3, [r7, #4]
 8043444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043446:	2b00      	cmp	r3, #0
 8043448:	d103      	bne.n	8043452 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 804344a:	697b      	ldr	r3, [r7, #20]
 804344c:	4a1e      	ldr	r2, [pc, #120]	; (80434c8 <ETH_UpdateDescriptor+0xe4>)
 804344e:	605a      	str	r2, [r3, #4]
 8043450:	e003      	b.n	804345a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8043452:	697b      	ldr	r3, [r7, #20]
 8043454:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8043458:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 804345a:	f3bf 8f5f 	dmb	sy
}
 804345e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8043460:	697b      	ldr	r3, [r7, #20]
 8043462:	681b      	ldr	r3, [r3, #0]
 8043464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8043468:	697b      	ldr	r3, [r7, #20]
 804346a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 804346c:	69fb      	ldr	r3, [r7, #28]
 804346e:	3301      	adds	r3, #1
 8043470:	61fb      	str	r3, [r7, #28]
 8043472:	69fb      	ldr	r3, [r7, #28]
 8043474:	2b03      	cmp	r3, #3
 8043476:	d902      	bls.n	804347e <ETH_UpdateDescriptor+0x9a>
 8043478:	69fb      	ldr	r3, [r7, #28]
 804347a:	3b04      	subs	r3, #4
 804347c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 804347e:	687b      	ldr	r3, [r7, #4]
 8043480:	69fa      	ldr	r2, [r7, #28]
 8043482:	3212      	adds	r2, #18
 8043484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8043488:	617b      	str	r3, [r7, #20]
      desccount--;
 804348a:	69bb      	ldr	r3, [r7, #24]
 804348c:	3b01      	subs	r3, #1
 804348e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8043490:	69bb      	ldr	r3, [r7, #24]
 8043492:	2b00      	cmp	r3, #0
 8043494:	d002      	beq.n	804349c <ETH_UpdateDescriptor+0xb8>
 8043496:	7cfb      	ldrb	r3, [r7, #19]
 8043498:	2b00      	cmp	r3, #0
 804349a:	d1b8      	bne.n	804340e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 804349c:	687b      	ldr	r3, [r7, #4]
 804349e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80434a0:	69ba      	ldr	r2, [r7, #24]
 80434a2:	429a      	cmp	r2, r3
 80434a4:	d00c      	beq.n	80434c0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80434a6:	687b      	ldr	r3, [r7, #4]
 80434a8:	681b      	ldr	r3, [r3, #0]
 80434aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80434ae:	461a      	mov	r2, r3
 80434b0:	2300      	movs	r3, #0
 80434b2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80434b4:	687b      	ldr	r3, [r7, #4]
 80434b6:	69fa      	ldr	r2, [r7, #28]
 80434b8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80434ba:	687b      	ldr	r3, [r7, #4]
 80434bc:	69ba      	ldr	r2, [r7, #24]
 80434be:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80434c0:	bf00      	nop
 80434c2:	3720      	adds	r7, #32
 80434c4:	46bd      	mov	sp, r7
 80434c6:	bd80      	pop	{r7, pc}
 80434c8:	800045f8 	.word	0x800045f8

080434cc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80434cc:	b580      	push	{r7, lr}
 80434ce:	b086      	sub	sp, #24
 80434d0:	af00      	add	r7, sp, #0
 80434d2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80434d4:	687b      	ldr	r3, [r7, #4]
 80434d6:	3318      	adds	r3, #24
 80434d8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80434da:	68bb      	ldr	r3, [r7, #8]
 80434dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80434de:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80434e0:	68bb      	ldr	r3, [r7, #8]
 80434e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80434e4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80434e6:	2301      	movs	r3, #1
 80434e8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80434ea:	e03f      	b.n	804356c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80434ec:	2301      	movs	r3, #1
 80434ee:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80434f0:	697b      	ldr	r3, [r7, #20]
 80434f2:	3b01      	subs	r3, #1
 80434f4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80434f6:	68ba      	ldr	r2, [r7, #8]
 80434f8:	693b      	ldr	r3, [r7, #16]
 80434fa:	3304      	adds	r3, #4
 80434fc:	009b      	lsls	r3, r3, #2
 80434fe:	4413      	add	r3, r2
 8043500:	685b      	ldr	r3, [r3, #4]
 8043502:	2b00      	cmp	r3, #0
 8043504:	d106      	bne.n	8043514 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8043506:	693b      	ldr	r3, [r7, #16]
 8043508:	3301      	adds	r3, #1
 804350a:	f003 0303 	and.w	r3, r3, #3
 804350e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8043510:	2300      	movs	r3, #0
 8043512:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8043514:	7bbb      	ldrb	r3, [r7, #14]
 8043516:	2b00      	cmp	r3, #0
 8043518:	d028      	beq.n	804356c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 804351a:	687b      	ldr	r3, [r7, #4]
 804351c:	68d9      	ldr	r1, [r3, #12]
 804351e:	693a      	ldr	r2, [r7, #16]
 8043520:	4613      	mov	r3, r2
 8043522:	009b      	lsls	r3, r3, #2
 8043524:	4413      	add	r3, r2
 8043526:	00db      	lsls	r3, r3, #3
 8043528:	440b      	add	r3, r1
 804352a:	681b      	ldr	r3, [r3, #0]
 804352c:	2b00      	cmp	r3, #0
 804352e:	db1b      	blt.n	8043568 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8043530:	68ba      	ldr	r2, [r7, #8]
 8043532:	693b      	ldr	r3, [r7, #16]
 8043534:	3304      	adds	r3, #4
 8043536:	009b      	lsls	r3, r3, #2
 8043538:	4413      	add	r3, r2
 804353a:	685b      	ldr	r3, [r3, #4]
 804353c:	4618      	mov	r0, r3
 804353e:	f005 f891 	bl	8048664 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8043542:	68ba      	ldr	r2, [r7, #8]
 8043544:	693b      	ldr	r3, [r7, #16]
 8043546:	3304      	adds	r3, #4
 8043548:	009b      	lsls	r3, r3, #2
 804354a:	4413      	add	r3, r2
 804354c:	2200      	movs	r2, #0
 804354e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8043550:	693b      	ldr	r3, [r7, #16]
 8043552:	3301      	adds	r3, #1
 8043554:	f003 0303 	and.w	r3, r3, #3
 8043558:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 804355a:	68bb      	ldr	r3, [r7, #8]
 804355c:	697a      	ldr	r2, [r7, #20]
 804355e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8043560:	68bb      	ldr	r3, [r7, #8]
 8043562:	693a      	ldr	r2, [r7, #16]
 8043564:	62da      	str	r2, [r3, #44]	; 0x2c
 8043566:	e001      	b.n	804356c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8043568:	2300      	movs	r3, #0
 804356a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 804356c:	697b      	ldr	r3, [r7, #20]
 804356e:	2b00      	cmp	r3, #0
 8043570:	d002      	beq.n	8043578 <HAL_ETH_ReleaseTxPacket+0xac>
 8043572:	7bfb      	ldrb	r3, [r7, #15]
 8043574:	2b00      	cmp	r3, #0
 8043576:	d1b9      	bne.n	80434ec <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8043578:	2300      	movs	r3, #0
}
 804357a:	4618      	mov	r0, r3
 804357c:	3718      	adds	r7, #24
 804357e:	46bd      	mov	sp, r7
 8043580:	bd80      	pop	{r7, pc}
	...

08043584 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8043584:	b580      	push	{r7, lr}
 8043586:	b082      	sub	sp, #8
 8043588:	af00      	add	r7, sp, #0
 804358a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 804358c:	687b      	ldr	r3, [r7, #4]
 804358e:	681b      	ldr	r3, [r3, #0]
 8043590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043594:	695b      	ldr	r3, [r3, #20]
 8043596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804359a:	2b40      	cmp	r3, #64	; 0x40
 804359c:	d112      	bne.n	80435c4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 804359e:	687b      	ldr	r3, [r7, #4]
 80435a0:	681b      	ldr	r3, [r3, #0]
 80435a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80435a6:	69db      	ldr	r3, [r3, #28]
 80435a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80435ac:	2b40      	cmp	r3, #64	; 0x40
 80435ae:	d109      	bne.n	80435c4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80435b0:	687b      	ldr	r3, [r7, #4]
 80435b2:	681b      	ldr	r3, [r3, #0]
 80435b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80435b8:	461a      	mov	r2, r3
 80435ba:	4b50      	ldr	r3, [pc, #320]	; (80436fc <HAL_ETH_IRQHandler+0x178>)
 80435bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80435be:	6878      	ldr	r0, [r7, #4]
 80435c0:	f004 fb8e 	bl	8047ce0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80435c4:	687b      	ldr	r3, [r7, #4]
 80435c6:	681b      	ldr	r3, [r3, #0]
 80435c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80435cc:	695b      	ldr	r3, [r3, #20]
 80435ce:	f003 0301 	and.w	r3, r3, #1
 80435d2:	2b01      	cmp	r3, #1
 80435d4:	d113      	bne.n	80435fe <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80435d6:	687b      	ldr	r3, [r7, #4]
 80435d8:	681b      	ldr	r3, [r3, #0]
 80435da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80435de:	69db      	ldr	r3, [r3, #28]
 80435e0:	f003 0301 	and.w	r3, r3, #1
 80435e4:	2b01      	cmp	r3, #1
 80435e6:	d10a      	bne.n	80435fe <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80435e8:	687b      	ldr	r3, [r7, #4]
 80435ea:	681b      	ldr	r3, [r3, #0]
 80435ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80435f0:	461a      	mov	r2, r3
 80435f2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80435f6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80435f8:	6878      	ldr	r0, [r7, #4]
 80435fa:	f004 fb81 	bl	8047d00 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80435fe:	687b      	ldr	r3, [r7, #4]
 8043600:	681b      	ldr	r3, [r3, #0]
 8043602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043606:	695b      	ldr	r3, [r3, #20]
 8043608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804360c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043610:	d14c      	bne.n	80436ac <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8043612:	687b      	ldr	r3, [r7, #4]
 8043614:	681b      	ldr	r3, [r3, #0]
 8043616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804361a:	69db      	ldr	r3, [r3, #28]
 804361c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8043620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043624:	d142      	bne.n	80436ac <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8043626:	687b      	ldr	r3, [r7, #4]
 8043628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804362c:	f043 0208 	orr.w	r2, r3, #8
 8043630:	687b      	ldr	r3, [r7, #4]
 8043632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8043636:	687b      	ldr	r3, [r7, #4]
 8043638:	681b      	ldr	r3, [r3, #0]
 804363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804363e:	695b      	ldr	r3, [r3, #20]
 8043640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8043644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043648:	d11a      	bne.n	8043680 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 804364a:	687b      	ldr	r3, [r7, #4]
 804364c:	681b      	ldr	r3, [r3, #0]
 804364e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043652:	695a      	ldr	r2, [r3, #20]
 8043654:	4b2a      	ldr	r3, [pc, #168]	; (8043700 <HAL_ETH_IRQHandler+0x17c>)
 8043656:	4013      	ands	r3, r2
 8043658:	687a      	ldr	r2, [r7, #4]
 804365a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 804365e:	687b      	ldr	r3, [r7, #4]
 8043660:	681b      	ldr	r3, [r3, #0]
 8043662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043666:	69db      	ldr	r3, [r3, #28]
 8043668:	687a      	ldr	r2, [r7, #4]
 804366a:	6812      	ldr	r2, [r2, #0]
 804366c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8043670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043674:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8043676:	687b      	ldr	r3, [r7, #4]
 8043678:	22e0      	movs	r2, #224	; 0xe0
 804367a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 804367e:	e012      	b.n	80436a6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8043680:	687b      	ldr	r3, [r7, #4]
 8043682:	681b      	ldr	r3, [r3, #0]
 8043684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043688:	695a      	ldr	r2, [r3, #20]
 804368a:	f248 6380 	movw	r3, #34432	; 0x8680
 804368e:	4013      	ands	r3, r2
 8043690:	687a      	ldr	r2, [r7, #4]
 8043692:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8043696:	687b      	ldr	r3, [r7, #4]
 8043698:	681b      	ldr	r3, [r3, #0]
 804369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 804369e:	461a      	mov	r2, r3
 80436a0:	f248 6380 	movw	r3, #34432	; 0x8680
 80436a4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80436a6:	6878      	ldr	r0, [r7, #4]
 80436a8:	f004 fb3a 	bl	8047d20 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80436ac:	687b      	ldr	r3, [r7, #4]
 80436ae:	681b      	ldr	r3, [r3, #0]
 80436b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80436b2:	f003 0308 	and.w	r3, r3, #8
 80436b6:	2b08      	cmp	r3, #8
 80436b8:	d10e      	bne.n	80436d8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80436ba:	687b      	ldr	r3, [r7, #4]
 80436bc:	681b      	ldr	r3, [r3, #0]
 80436be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80436c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80436c4:	687b      	ldr	r3, [r7, #4]
 80436c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80436ca:	6878      	ldr	r0, [r7, #4]
 80436cc:	f000 f81c 	bl	8043708 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80436d0:	687b      	ldr	r3, [r7, #4]
 80436d2:	2200      	movs	r2, #0
 80436d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80436d8:	4b0a      	ldr	r3, [pc, #40]	; (8043704 <HAL_ETH_IRQHandler+0x180>)
 80436da:	695b      	ldr	r3, [r3, #20]
 80436dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80436e0:	2b00      	cmp	r3, #0
 80436e2:	d006      	beq.n	80436f2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80436e4:	4b07      	ldr	r3, [pc, #28]	; (8043704 <HAL_ETH_IRQHandler+0x180>)
 80436e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80436ea:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80436ec:	6878      	ldr	r0, [r7, #4]
 80436ee:	f000 f815 	bl	804371c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80436f2:	bf00      	nop
 80436f4:	3708      	adds	r7, #8
 80436f6:	46bd      	mov	sp, r7
 80436f8:	bd80      	pop	{r7, pc}
 80436fa:	bf00      	nop
 80436fc:	00010040 	.word	0x00010040
 8043700:	007e2000 	.word	0x007e2000
 8043704:	40013c00 	.word	0x40013c00

08043708 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8043708:	b480      	push	{r7}
 804370a:	b083      	sub	sp, #12
 804370c:	af00      	add	r7, sp, #0
 804370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8043710:	bf00      	nop
 8043712:	370c      	adds	r7, #12
 8043714:	46bd      	mov	sp, r7
 8043716:	f85d 7b04 	ldr.w	r7, [sp], #4
 804371a:	4770      	bx	lr

0804371c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 804371c:	b480      	push	{r7}
 804371e:	b083      	sub	sp, #12
 8043720:	af00      	add	r7, sp, #0
 8043722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8043724:	bf00      	nop
 8043726:	370c      	adds	r7, #12
 8043728:	46bd      	mov	sp, r7
 804372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804372e:	4770      	bx	lr

08043730 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8043730:	b580      	push	{r7, lr}
 8043732:	b086      	sub	sp, #24
 8043734:	af00      	add	r7, sp, #0
 8043736:	60f8      	str	r0, [r7, #12]
 8043738:	60b9      	str	r1, [r7, #8]
 804373a:	607a      	str	r2, [r7, #4]
 804373c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 804373e:	68fb      	ldr	r3, [r7, #12]
 8043740:	681b      	ldr	r3, [r3, #0]
 8043742:	691b      	ldr	r3, [r3, #16]
 8043744:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8043746:	697b      	ldr	r3, [r7, #20]
 8043748:	f003 031c 	and.w	r3, r3, #28
 804374c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 804374e:	68bb      	ldr	r3, [r7, #8]
 8043750:	02db      	lsls	r3, r3, #11
 8043752:	b29b      	uxth	r3, r3
 8043754:	697a      	ldr	r2, [r7, #20]
 8043756:	4313      	orrs	r3, r2
 8043758:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 804375a:	687b      	ldr	r3, [r7, #4]
 804375c:	019b      	lsls	r3, r3, #6
 804375e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8043762:	697a      	ldr	r2, [r7, #20]
 8043764:	4313      	orrs	r3, r2
 8043766:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8043768:	697b      	ldr	r3, [r7, #20]
 804376a:	f023 0302 	bic.w	r3, r3, #2
 804376e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8043770:	697b      	ldr	r3, [r7, #20]
 8043772:	f043 0301 	orr.w	r3, r3, #1
 8043776:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8043778:	68fb      	ldr	r3, [r7, #12]
 804377a:	681b      	ldr	r3, [r3, #0]
 804377c:	697a      	ldr	r2, [r7, #20]
 804377e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8043780:	f7fe fc76 	bl	8042070 <HAL_GetTick>
 8043784:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8043786:	e00d      	b.n	80437a4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8043788:	f7fe fc72 	bl	8042070 <HAL_GetTick>
 804378c:	4602      	mov	r2, r0
 804378e:	693b      	ldr	r3, [r7, #16]
 8043790:	1ad3      	subs	r3, r2, r3
 8043792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043796:	d301      	bcc.n	804379c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8043798:	2301      	movs	r3, #1
 804379a:	e010      	b.n	80437be <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 804379c:	68fb      	ldr	r3, [r7, #12]
 804379e:	681b      	ldr	r3, [r3, #0]
 80437a0:	691b      	ldr	r3, [r3, #16]
 80437a2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80437a4:	697b      	ldr	r3, [r7, #20]
 80437a6:	f003 0301 	and.w	r3, r3, #1
 80437aa:	2b00      	cmp	r3, #0
 80437ac:	d1ec      	bne.n	8043788 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80437ae:	68fb      	ldr	r3, [r7, #12]
 80437b0:	681b      	ldr	r3, [r3, #0]
 80437b2:	695b      	ldr	r3, [r3, #20]
 80437b4:	b29b      	uxth	r3, r3
 80437b6:	461a      	mov	r2, r3
 80437b8:	683b      	ldr	r3, [r7, #0]
 80437ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80437bc:	2300      	movs	r3, #0
}
 80437be:	4618      	mov	r0, r3
 80437c0:	3718      	adds	r7, #24
 80437c2:	46bd      	mov	sp, r7
 80437c4:	bd80      	pop	{r7, pc}

080437c6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80437c6:	b580      	push	{r7, lr}
 80437c8:	b086      	sub	sp, #24
 80437ca:	af00      	add	r7, sp, #0
 80437cc:	60f8      	str	r0, [r7, #12]
 80437ce:	60b9      	str	r1, [r7, #8]
 80437d0:	607a      	str	r2, [r7, #4]
 80437d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80437d4:	68fb      	ldr	r3, [r7, #12]
 80437d6:	681b      	ldr	r3, [r3, #0]
 80437d8:	691b      	ldr	r3, [r3, #16]
 80437da:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80437dc:	697b      	ldr	r3, [r7, #20]
 80437de:	f003 031c 	and.w	r3, r3, #28
 80437e2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80437e4:	68bb      	ldr	r3, [r7, #8]
 80437e6:	02db      	lsls	r3, r3, #11
 80437e8:	b29b      	uxth	r3, r3
 80437ea:	697a      	ldr	r2, [r7, #20]
 80437ec:	4313      	orrs	r3, r2
 80437ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80437f0:	687b      	ldr	r3, [r7, #4]
 80437f2:	019b      	lsls	r3, r3, #6
 80437f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80437f8:	697a      	ldr	r2, [r7, #20]
 80437fa:	4313      	orrs	r3, r2
 80437fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80437fe:	697b      	ldr	r3, [r7, #20]
 8043800:	f043 0302 	orr.w	r3, r3, #2
 8043804:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8043806:	697b      	ldr	r3, [r7, #20]
 8043808:	f043 0301 	orr.w	r3, r3, #1
 804380c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 804380e:	683b      	ldr	r3, [r7, #0]
 8043810:	b29a      	uxth	r2, r3
 8043812:	68fb      	ldr	r3, [r7, #12]
 8043814:	681b      	ldr	r3, [r3, #0]
 8043816:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8043818:	68fb      	ldr	r3, [r7, #12]
 804381a:	681b      	ldr	r3, [r3, #0]
 804381c:	697a      	ldr	r2, [r7, #20]
 804381e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8043820:	f7fe fc26 	bl	8042070 <HAL_GetTick>
 8043824:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8043826:	e00d      	b.n	8043844 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8043828:	f7fe fc22 	bl	8042070 <HAL_GetTick>
 804382c:	4602      	mov	r2, r0
 804382e:	693b      	ldr	r3, [r7, #16]
 8043830:	1ad3      	subs	r3, r2, r3
 8043832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043836:	d301      	bcc.n	804383c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8043838:	2301      	movs	r3, #1
 804383a:	e009      	b.n	8043850 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 804383c:	68fb      	ldr	r3, [r7, #12]
 804383e:	681b      	ldr	r3, [r3, #0]
 8043840:	691b      	ldr	r3, [r3, #16]
 8043842:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8043844:	697b      	ldr	r3, [r7, #20]
 8043846:	f003 0301 	and.w	r3, r3, #1
 804384a:	2b00      	cmp	r3, #0
 804384c:	d1ec      	bne.n	8043828 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 804384e:	2300      	movs	r3, #0
}
 8043850:	4618      	mov	r0, r3
 8043852:	3718      	adds	r7, #24
 8043854:	46bd      	mov	sp, r7
 8043856:	bd80      	pop	{r7, pc}

08043858 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8043858:	b480      	push	{r7}
 804385a:	b083      	sub	sp, #12
 804385c:	af00      	add	r7, sp, #0
 804385e:	6078      	str	r0, [r7, #4]
 8043860:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8043862:	683b      	ldr	r3, [r7, #0]
 8043864:	2b00      	cmp	r3, #0
 8043866:	d101      	bne.n	804386c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8043868:	2301      	movs	r3, #1
 804386a:	e0d9      	b.n	8043a20 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 804386c:	687b      	ldr	r3, [r7, #4]
 804386e:	681b      	ldr	r3, [r3, #0]
 8043870:	681b      	ldr	r3, [r3, #0]
 8043872:	f003 0310 	and.w	r3, r3, #16
 8043876:	2b00      	cmp	r3, #0
 8043878:	bf14      	ite	ne
 804387a:	2301      	movne	r3, #1
 804387c:	2300      	moveq	r3, #0
 804387e:	b2db      	uxtb	r3, r3
 8043880:	461a      	mov	r2, r3
 8043882:	683b      	ldr	r3, [r7, #0]
 8043884:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8043888:	687b      	ldr	r3, [r7, #4]
 804388a:	681b      	ldr	r3, [r3, #0]
 804388c:	681b      	ldr	r3, [r3, #0]
 804388e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8043892:	683b      	ldr	r3, [r7, #0]
 8043894:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8043896:	687b      	ldr	r3, [r7, #4]
 8043898:	681b      	ldr	r3, [r3, #0]
 804389a:	681b      	ldr	r3, [r3, #0]
 804389c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80438a0:	2b00      	cmp	r3, #0
 80438a2:	bf0c      	ite	eq
 80438a4:	2301      	moveq	r3, #1
 80438a6:	2300      	movne	r3, #0
 80438a8:	b2db      	uxtb	r3, r3
 80438aa:	461a      	mov	r2, r3
 80438ac:	683b      	ldr	r3, [r7, #0]
 80438ae:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80438b2:	687b      	ldr	r3, [r7, #4]
 80438b4:	681b      	ldr	r3, [r3, #0]
 80438b6:	681b      	ldr	r3, [r3, #0]
 80438b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80438bc:	2b00      	cmp	r3, #0
 80438be:	bf14      	ite	ne
 80438c0:	2301      	movne	r3, #1
 80438c2:	2300      	moveq	r3, #0
 80438c4:	b2db      	uxtb	r3, r3
 80438c6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80438c8:	683b      	ldr	r3, [r7, #0]
 80438ca:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80438cc:	687b      	ldr	r3, [r7, #4]
 80438ce:	681b      	ldr	r3, [r3, #0]
 80438d0:	681b      	ldr	r3, [r3, #0]
 80438d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80438d6:	2b00      	cmp	r3, #0
 80438d8:	bf0c      	ite	eq
 80438da:	2301      	moveq	r3, #1
 80438dc:	2300      	movne	r3, #0
 80438de:	b2db      	uxtb	r3, r3
 80438e0:	461a      	mov	r2, r3
 80438e2:	683b      	ldr	r3, [r7, #0]
 80438e4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80438e6:	687b      	ldr	r3, [r7, #4]
 80438e8:	681b      	ldr	r3, [r3, #0]
 80438ea:	681b      	ldr	r3, [r3, #0]
 80438ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80438f0:	2b00      	cmp	r3, #0
 80438f2:	bf14      	ite	ne
 80438f4:	2301      	movne	r3, #1
 80438f6:	2300      	moveq	r3, #0
 80438f8:	b2db      	uxtb	r3, r3
 80438fa:	461a      	mov	r2, r3
 80438fc:	683b      	ldr	r3, [r7, #0]
 80438fe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8043900:	687b      	ldr	r3, [r7, #4]
 8043902:	681b      	ldr	r3, [r3, #0]
 8043904:	681b      	ldr	r3, [r3, #0]
 8043906:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 804390a:	683b      	ldr	r3, [r7, #0]
 804390c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 804390e:	687b      	ldr	r3, [r7, #4]
 8043910:	681b      	ldr	r3, [r3, #0]
 8043912:	681b      	ldr	r3, [r3, #0]
 8043914:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8043918:	683b      	ldr	r3, [r7, #0]
 804391a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 804391c:	687b      	ldr	r3, [r7, #4]
 804391e:	681b      	ldr	r3, [r3, #0]
 8043920:	681b      	ldr	r3, [r3, #0]
 8043922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043926:	2b00      	cmp	r3, #0
 8043928:	bf0c      	ite	eq
 804392a:	2301      	moveq	r3, #1
 804392c:	2300      	movne	r3, #0
 804392e:	b2db      	uxtb	r3, r3
 8043930:	461a      	mov	r2, r3
 8043932:	683b      	ldr	r3, [r7, #0]
 8043934:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8043936:	687b      	ldr	r3, [r7, #4]
 8043938:	681b      	ldr	r3, [r3, #0]
 804393a:	681b      	ldr	r3, [r3, #0]
 804393c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043940:	2b00      	cmp	r3, #0
 8043942:	bf0c      	ite	eq
 8043944:	2301      	moveq	r3, #1
 8043946:	2300      	movne	r3, #0
 8043948:	b2db      	uxtb	r3, r3
 804394a:	461a      	mov	r2, r3
 804394c:	683b      	ldr	r3, [r7, #0]
 804394e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8043950:	687b      	ldr	r3, [r7, #4]
 8043952:	681b      	ldr	r3, [r3, #0]
 8043954:	681b      	ldr	r3, [r3, #0]
 8043956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804395a:	2b00      	cmp	r3, #0
 804395c:	bf14      	ite	ne
 804395e:	2301      	movne	r3, #1
 8043960:	2300      	moveq	r3, #0
 8043962:	b2db      	uxtb	r3, r3
 8043964:	461a      	mov	r2, r3
 8043966:	683b      	ldr	r3, [r7, #0]
 8043968:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 804396a:	687b      	ldr	r3, [r7, #4]
 804396c:	681b      	ldr	r3, [r3, #0]
 804396e:	681b      	ldr	r3, [r3, #0]
 8043970:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8043974:	683b      	ldr	r3, [r7, #0]
 8043976:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8043978:	687b      	ldr	r3, [r7, #4]
 804397a:	681b      	ldr	r3, [r3, #0]
 804397c:	681b      	ldr	r3, [r3, #0]
 804397e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043982:	2b00      	cmp	r3, #0
 8043984:	bf14      	ite	ne
 8043986:	2301      	movne	r3, #1
 8043988:	2300      	moveq	r3, #0
 804398a:	b2db      	uxtb	r3, r3
 804398c:	461a      	mov	r2, r3
 804398e:	683b      	ldr	r3, [r7, #0]
 8043990:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8043992:	687b      	ldr	r3, [r7, #4]
 8043994:	681b      	ldr	r3, [r3, #0]
 8043996:	699b      	ldr	r3, [r3, #24]
 8043998:	f003 0302 	and.w	r3, r3, #2
 804399c:	2b00      	cmp	r3, #0
 804399e:	bf14      	ite	ne
 80439a0:	2301      	movne	r3, #1
 80439a2:	2300      	moveq	r3, #0
 80439a4:	b2db      	uxtb	r3, r3
 80439a6:	461a      	mov	r2, r3
 80439a8:	683b      	ldr	r3, [r7, #0]
 80439aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80439ae:	687b      	ldr	r3, [r7, #4]
 80439b0:	681b      	ldr	r3, [r3, #0]
 80439b2:	699b      	ldr	r3, [r3, #24]
 80439b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80439b8:	2b00      	cmp	r3, #0
 80439ba:	bf0c      	ite	eq
 80439bc:	2301      	moveq	r3, #1
 80439be:	2300      	movne	r3, #0
 80439c0:	b2db      	uxtb	r3, r3
 80439c2:	461a      	mov	r2, r3
 80439c4:	683b      	ldr	r3, [r7, #0]
 80439c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80439ca:	687b      	ldr	r3, [r7, #4]
 80439cc:	681b      	ldr	r3, [r3, #0]
 80439ce:	699b      	ldr	r3, [r3, #24]
 80439d0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80439d4:	683b      	ldr	r3, [r7, #0]
 80439d6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80439d8:	687b      	ldr	r3, [r7, #4]
 80439da:	681b      	ldr	r3, [r3, #0]
 80439dc:	699b      	ldr	r3, [r3, #24]
 80439de:	0c1b      	lsrs	r3, r3, #16
 80439e0:	b29a      	uxth	r2, r3
 80439e2:	683b      	ldr	r3, [r7, #0]
 80439e4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80439e6:	687b      	ldr	r3, [r7, #4]
 80439e8:	681b      	ldr	r3, [r3, #0]
 80439ea:	699b      	ldr	r3, [r3, #24]
 80439ec:	f003 0304 	and.w	r3, r3, #4
 80439f0:	2b00      	cmp	r3, #0
 80439f2:	bf14      	ite	ne
 80439f4:	2301      	movne	r3, #1
 80439f6:	2300      	moveq	r3, #0
 80439f8:	b2db      	uxtb	r3, r3
 80439fa:	461a      	mov	r2, r3
 80439fc:	683b      	ldr	r3, [r7, #0]
 80439fe:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8043a02:	687b      	ldr	r3, [r7, #4]
 8043a04:	681b      	ldr	r3, [r3, #0]
 8043a06:	699b      	ldr	r3, [r3, #24]
 8043a08:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8043a0c:	2b00      	cmp	r3, #0
 8043a0e:	bf14      	ite	ne
 8043a10:	2301      	movne	r3, #1
 8043a12:	2300      	moveq	r3, #0
 8043a14:	b2db      	uxtb	r3, r3
 8043a16:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8043a18:	683b      	ldr	r3, [r7, #0]
 8043a1a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8043a1e:	2300      	movs	r3, #0
}
 8043a20:	4618      	mov	r0, r3
 8043a22:	370c      	adds	r7, #12
 8043a24:	46bd      	mov	sp, r7
 8043a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043a2a:	4770      	bx	lr

08043a2c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8043a2c:	b580      	push	{r7, lr}
 8043a2e:	b082      	sub	sp, #8
 8043a30:	af00      	add	r7, sp, #0
 8043a32:	6078      	str	r0, [r7, #4]
 8043a34:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8043a36:	683b      	ldr	r3, [r7, #0]
 8043a38:	2b00      	cmp	r3, #0
 8043a3a:	d101      	bne.n	8043a40 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8043a3c:	2301      	movs	r3, #1
 8043a3e:	e00b      	b.n	8043a58 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8043a40:	687b      	ldr	r3, [r7, #4]
 8043a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043a46:	2b10      	cmp	r3, #16
 8043a48:	d105      	bne.n	8043a56 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8043a4a:	6839      	ldr	r1, [r7, #0]
 8043a4c:	6878      	ldr	r0, [r7, #4]
 8043a4e:	f000 f88f 	bl	8043b70 <ETH_SetMACConfig>

    return HAL_OK;
 8043a52:	2300      	movs	r3, #0
 8043a54:	e000      	b.n	8043a58 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8043a56:	2301      	movs	r3, #1
  }
}
 8043a58:	4618      	mov	r0, r3
 8043a5a:	3708      	adds	r7, #8
 8043a5c:	46bd      	mov	sp, r7
 8043a5e:	bd80      	pop	{r7, pc}

08043a60 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8043a60:	b580      	push	{r7, lr}
 8043a62:	b084      	sub	sp, #16
 8043a64:	af00      	add	r7, sp, #0
 8043a66:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8043a68:	687b      	ldr	r3, [r7, #4]
 8043a6a:	681b      	ldr	r3, [r3, #0]
 8043a6c:	691b      	ldr	r3, [r3, #16]
 8043a6e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8043a70:	68fb      	ldr	r3, [r7, #12]
 8043a72:	f023 031c 	bic.w	r3, r3, #28
 8043a76:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8043a78:	f001 fac4 	bl	8045004 <HAL_RCC_GetHCLKFreq>
 8043a7c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8043a7e:	68bb      	ldr	r3, [r7, #8]
 8043a80:	4a1d      	ldr	r2, [pc, #116]	; (8043af8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8043a82:	4293      	cmp	r3, r2
 8043a84:	d908      	bls.n	8043a98 <HAL_ETH_SetMDIOClockRange+0x38>
 8043a86:	68bb      	ldr	r3, [r7, #8]
 8043a88:	4a1c      	ldr	r2, [pc, #112]	; (8043afc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8043a8a:	4293      	cmp	r3, r2
 8043a8c:	d804      	bhi.n	8043a98 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8043a8e:	68fb      	ldr	r3, [r7, #12]
 8043a90:	f043 0308 	orr.w	r3, r3, #8
 8043a94:	60fb      	str	r3, [r7, #12]
 8043a96:	e027      	b.n	8043ae8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8043a98:	68bb      	ldr	r3, [r7, #8]
 8043a9a:	4a18      	ldr	r2, [pc, #96]	; (8043afc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8043a9c:	4293      	cmp	r3, r2
 8043a9e:	d908      	bls.n	8043ab2 <HAL_ETH_SetMDIOClockRange+0x52>
 8043aa0:	68bb      	ldr	r3, [r7, #8]
 8043aa2:	4a17      	ldr	r2, [pc, #92]	; (8043b00 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8043aa4:	4293      	cmp	r3, r2
 8043aa6:	d204      	bcs.n	8043ab2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8043aa8:	68fb      	ldr	r3, [r7, #12]
 8043aaa:	f043 030c 	orr.w	r3, r3, #12
 8043aae:	60fb      	str	r3, [r7, #12]
 8043ab0:	e01a      	b.n	8043ae8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8043ab2:	68bb      	ldr	r3, [r7, #8]
 8043ab4:	4a12      	ldr	r2, [pc, #72]	; (8043b00 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8043ab6:	4293      	cmp	r3, r2
 8043ab8:	d303      	bcc.n	8043ac2 <HAL_ETH_SetMDIOClockRange+0x62>
 8043aba:	68bb      	ldr	r3, [r7, #8]
 8043abc:	4a11      	ldr	r2, [pc, #68]	; (8043b04 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8043abe:	4293      	cmp	r3, r2
 8043ac0:	d911      	bls.n	8043ae6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8043ac2:	68bb      	ldr	r3, [r7, #8]
 8043ac4:	4a0f      	ldr	r2, [pc, #60]	; (8043b04 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8043ac6:	4293      	cmp	r3, r2
 8043ac8:	d908      	bls.n	8043adc <HAL_ETH_SetMDIOClockRange+0x7c>
 8043aca:	68bb      	ldr	r3, [r7, #8]
 8043acc:	4a0e      	ldr	r2, [pc, #56]	; (8043b08 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8043ace:	4293      	cmp	r3, r2
 8043ad0:	d804      	bhi.n	8043adc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8043ad2:	68fb      	ldr	r3, [r7, #12]
 8043ad4:	f043 0304 	orr.w	r3, r3, #4
 8043ad8:	60fb      	str	r3, [r7, #12]
 8043ada:	e005      	b.n	8043ae8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8043adc:	68fb      	ldr	r3, [r7, #12]
 8043ade:	f043 0310 	orr.w	r3, r3, #16
 8043ae2:	60fb      	str	r3, [r7, #12]
 8043ae4:	e000      	b.n	8043ae8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8043ae6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8043ae8:	687b      	ldr	r3, [r7, #4]
 8043aea:	681b      	ldr	r3, [r3, #0]
 8043aec:	68fa      	ldr	r2, [r7, #12]
 8043aee:	611a      	str	r2, [r3, #16]
}
 8043af0:	bf00      	nop
 8043af2:	3710      	adds	r7, #16
 8043af4:	46bd      	mov	sp, r7
 8043af6:	bd80      	pop	{r7, pc}
 8043af8:	01312cff 	.word	0x01312cff
 8043afc:	02160ebf 	.word	0x02160ebf
 8043b00:	03938700 	.word	0x03938700
 8043b04:	05f5e0ff 	.word	0x05f5e0ff
 8043b08:	08f0d17f 	.word	0x08f0d17f

08043b0c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8043b0c:	b480      	push	{r7}
 8043b0e:	b083      	sub	sp, #12
 8043b10:	af00      	add	r7, sp, #0
 8043b12:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8043b14:	687b      	ldr	r3, [r7, #4]
 8043b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8043b1a:	4618      	mov	r0, r3
 8043b1c:	370c      	adds	r7, #12
 8043b1e:	46bd      	mov	sp, r7
 8043b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b24:	4770      	bx	lr

08043b26 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8043b26:	b580      	push	{r7, lr}
 8043b28:	b084      	sub	sp, #16
 8043b2a:	af00      	add	r7, sp, #0
 8043b2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8043b2e:	2300      	movs	r3, #0
 8043b30:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8043b32:	687b      	ldr	r3, [r7, #4]
 8043b34:	681b      	ldr	r3, [r3, #0]
 8043b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043b3a:	699b      	ldr	r3, [r3, #24]
 8043b3c:	687a      	ldr	r2, [r7, #4]
 8043b3e:	6812      	ldr	r2, [r2, #0]
 8043b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8043b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043b48:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8043b4a:	687b      	ldr	r3, [r7, #4]
 8043b4c:	681b      	ldr	r3, [r3, #0]
 8043b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043b52:	699b      	ldr	r3, [r3, #24]
 8043b54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8043b56:	2001      	movs	r0, #1
 8043b58:	f7fe fa96 	bl	8042088 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8043b5c:	687b      	ldr	r3, [r7, #4]
 8043b5e:	681a      	ldr	r2, [r3, #0]
 8043b60:	68fb      	ldr	r3, [r7, #12]
 8043b62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043b66:	6193      	str	r3, [r2, #24]
}
 8043b68:	bf00      	nop
 8043b6a:	3710      	adds	r7, #16
 8043b6c:	46bd      	mov	sp, r7
 8043b6e:	bd80      	pop	{r7, pc}

08043b70 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8043b70:	b580      	push	{r7, lr}
 8043b72:	b084      	sub	sp, #16
 8043b74:	af00      	add	r7, sp, #0
 8043b76:	6078      	str	r0, [r7, #4]
 8043b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8043b7a:	687b      	ldr	r3, [r7, #4]
 8043b7c:	681b      	ldr	r3, [r3, #0]
 8043b7e:	681b      	ldr	r3, [r3, #0]
 8043b80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8043b82:	68fa      	ldr	r2, [r7, #12]
 8043b84:	4b51      	ldr	r3, [pc, #324]	; (8043ccc <ETH_SetMACConfig+0x15c>)
 8043b86:	4013      	ands	r3, r2
 8043b88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8043b8a:	683b      	ldr	r3, [r7, #0]
 8043b8c:	7c1b      	ldrb	r3, [r3, #16]
 8043b8e:	2b00      	cmp	r3, #0
 8043b90:	d102      	bne.n	8043b98 <ETH_SetMACConfig+0x28>
 8043b92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8043b96:	e000      	b.n	8043b9a <ETH_SetMACConfig+0x2a>
 8043b98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8043b9a:	683b      	ldr	r3, [r7, #0]
 8043b9c:	7c5b      	ldrb	r3, [r3, #17]
 8043b9e:	2b00      	cmp	r3, #0
 8043ba0:	d102      	bne.n	8043ba8 <ETH_SetMACConfig+0x38>
 8043ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8043ba6:	e000      	b.n	8043baa <ETH_SetMACConfig+0x3a>
 8043ba8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8043baa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8043bac:	683b      	ldr	r3, [r7, #0]
 8043bae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8043bb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8043bb2:	683b      	ldr	r3, [r7, #0]
 8043bb4:	7fdb      	ldrb	r3, [r3, #31]
 8043bb6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8043bb8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8043bba:	683b      	ldr	r3, [r7, #0]
 8043bbc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8043bbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8043bc0:	683a      	ldr	r2, [r7, #0]
 8043bc2:	7f92      	ldrb	r2, [r2, #30]
 8043bc4:	2a00      	cmp	r2, #0
 8043bc6:	d102      	bne.n	8043bce <ETH_SetMACConfig+0x5e>
 8043bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8043bcc:	e000      	b.n	8043bd0 <ETH_SetMACConfig+0x60>
 8043bce:	2200      	movs	r2, #0
                        macconf->Speed |
 8043bd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8043bd2:	683b      	ldr	r3, [r7, #0]
 8043bd4:	7f1b      	ldrb	r3, [r3, #28]
 8043bd6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8043bd8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8043bda:	683b      	ldr	r3, [r7, #0]
 8043bdc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8043bde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8043be0:	683b      	ldr	r3, [r7, #0]
 8043be2:	791b      	ldrb	r3, [r3, #4]
 8043be4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8043be6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8043be8:	683a      	ldr	r2, [r7, #0]
 8043bea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8043bee:	2a00      	cmp	r2, #0
 8043bf0:	d102      	bne.n	8043bf8 <ETH_SetMACConfig+0x88>
 8043bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8043bf6:	e000      	b.n	8043bfa <ETH_SetMACConfig+0x8a>
 8043bf8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8043bfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8043bfc:	683b      	ldr	r3, [r7, #0]
 8043bfe:	7bdb      	ldrb	r3, [r3, #15]
 8043c00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8043c02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8043c04:	683b      	ldr	r3, [r7, #0]
 8043c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8043c08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8043c0a:	683b      	ldr	r3, [r7, #0]
 8043c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8043c10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8043c12:	4313      	orrs	r3, r2
 8043c14:	68fa      	ldr	r2, [r7, #12]
 8043c16:	4313      	orrs	r3, r2
 8043c18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8043c1a:	687b      	ldr	r3, [r7, #4]
 8043c1c:	681b      	ldr	r3, [r3, #0]
 8043c1e:	68fa      	ldr	r2, [r7, #12]
 8043c20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8043c22:	687b      	ldr	r3, [r7, #4]
 8043c24:	681b      	ldr	r3, [r3, #0]
 8043c26:	681b      	ldr	r3, [r3, #0]
 8043c28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8043c2a:	2001      	movs	r0, #1
 8043c2c:	f7fe fa2c 	bl	8042088 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8043c30:	687b      	ldr	r3, [r7, #4]
 8043c32:	681b      	ldr	r3, [r3, #0]
 8043c34:	68fa      	ldr	r2, [r7, #12]
 8043c36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8043c38:	687b      	ldr	r3, [r7, #4]
 8043c3a:	681b      	ldr	r3, [r3, #0]
 8043c3c:	699b      	ldr	r3, [r3, #24]
 8043c3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8043c40:	68fa      	ldr	r2, [r7, #12]
 8043c42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8043c46:	4013      	ands	r3, r2
 8043c48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8043c4a:	683b      	ldr	r3, [r7, #0]
 8043c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8043c4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8043c50:	683a      	ldr	r2, [r7, #0]
 8043c52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8043c56:	2a00      	cmp	r2, #0
 8043c58:	d101      	bne.n	8043c5e <ETH_SetMACConfig+0xee>
 8043c5a:	2280      	movs	r2, #128	; 0x80
 8043c5c:	e000      	b.n	8043c60 <ETH_SetMACConfig+0xf0>
 8043c5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8043c60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8043c62:	683b      	ldr	r3, [r7, #0]
 8043c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8043c66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8043c68:	683a      	ldr	r2, [r7, #0]
 8043c6a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8043c6e:	2a01      	cmp	r2, #1
 8043c70:	d101      	bne.n	8043c76 <ETH_SetMACConfig+0x106>
 8043c72:	2208      	movs	r2, #8
 8043c74:	e000      	b.n	8043c78 <ETH_SetMACConfig+0x108>
 8043c76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8043c78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8043c7a:	683a      	ldr	r2, [r7, #0]
 8043c7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8043c80:	2a01      	cmp	r2, #1
 8043c82:	d101      	bne.n	8043c88 <ETH_SetMACConfig+0x118>
 8043c84:	2204      	movs	r2, #4
 8043c86:	e000      	b.n	8043c8a <ETH_SetMACConfig+0x11a>
 8043c88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8043c8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8043c8c:	683a      	ldr	r2, [r7, #0]
 8043c8e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8043c92:	2a01      	cmp	r2, #1
 8043c94:	d101      	bne.n	8043c9a <ETH_SetMACConfig+0x12a>
 8043c96:	2202      	movs	r2, #2
 8043c98:	e000      	b.n	8043c9c <ETH_SetMACConfig+0x12c>
 8043c9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8043c9c:	4313      	orrs	r3, r2
 8043c9e:	68fa      	ldr	r2, [r7, #12]
 8043ca0:	4313      	orrs	r3, r2
 8043ca2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8043ca4:	687b      	ldr	r3, [r7, #4]
 8043ca6:	681b      	ldr	r3, [r3, #0]
 8043ca8:	68fa      	ldr	r2, [r7, #12]
 8043caa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8043cac:	687b      	ldr	r3, [r7, #4]
 8043cae:	681b      	ldr	r3, [r3, #0]
 8043cb0:	699b      	ldr	r3, [r3, #24]
 8043cb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8043cb4:	2001      	movs	r0, #1
 8043cb6:	f7fe f9e7 	bl	8042088 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8043cba:	687b      	ldr	r3, [r7, #4]
 8043cbc:	681b      	ldr	r3, [r3, #0]
 8043cbe:	68fa      	ldr	r2, [r7, #12]
 8043cc0:	619a      	str	r2, [r3, #24]
}
 8043cc2:	bf00      	nop
 8043cc4:	3710      	adds	r7, #16
 8043cc6:	46bd      	mov	sp, r7
 8043cc8:	bd80      	pop	{r7, pc}
 8043cca:	bf00      	nop
 8043ccc:	ff20810f 	.word	0xff20810f

08043cd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8043cd0:	b580      	push	{r7, lr}
 8043cd2:	b084      	sub	sp, #16
 8043cd4:	af00      	add	r7, sp, #0
 8043cd6:	6078      	str	r0, [r7, #4]
 8043cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8043cda:	687b      	ldr	r3, [r7, #4]
 8043cdc:	681b      	ldr	r3, [r3, #0]
 8043cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043ce2:	699b      	ldr	r3, [r3, #24]
 8043ce4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8043ce6:	68fa      	ldr	r2, [r7, #12]
 8043ce8:	4b3d      	ldr	r3, [pc, #244]	; (8043de0 <ETH_SetDMAConfig+0x110>)
 8043cea:	4013      	ands	r3, r2
 8043cec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8043cee:	683b      	ldr	r3, [r7, #0]
 8043cf0:	7b1b      	ldrb	r3, [r3, #12]
 8043cf2:	2b00      	cmp	r3, #0
 8043cf4:	d102      	bne.n	8043cfc <ETH_SetDMAConfig+0x2c>
 8043cf6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8043cfa:	e000      	b.n	8043cfe <ETH_SetDMAConfig+0x2e>
 8043cfc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8043cfe:	683b      	ldr	r3, [r7, #0]
 8043d00:	7b5b      	ldrb	r3, [r3, #13]
 8043d02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8043d04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8043d06:	683a      	ldr	r2, [r7, #0]
 8043d08:	7f52      	ldrb	r2, [r2, #29]
 8043d0a:	2a00      	cmp	r2, #0
 8043d0c:	d102      	bne.n	8043d14 <ETH_SetDMAConfig+0x44>
 8043d0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8043d12:	e000      	b.n	8043d16 <ETH_SetDMAConfig+0x46>
 8043d14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8043d16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8043d18:	683b      	ldr	r3, [r7, #0]
 8043d1a:	7b9b      	ldrb	r3, [r3, #14]
 8043d1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8043d1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8043d20:	683b      	ldr	r3, [r7, #0]
 8043d22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8043d24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8043d26:	683b      	ldr	r3, [r7, #0]
 8043d28:	7f1b      	ldrb	r3, [r3, #28]
 8043d2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8043d2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8043d2e:	683b      	ldr	r3, [r7, #0]
 8043d30:	7f9b      	ldrb	r3, [r3, #30]
 8043d32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8043d34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8043d36:	683b      	ldr	r3, [r7, #0]
 8043d38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8043d3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8043d3c:	683b      	ldr	r3, [r7, #0]
 8043d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8043d42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8043d44:	4313      	orrs	r3, r2
 8043d46:	68fa      	ldr	r2, [r7, #12]
 8043d48:	4313      	orrs	r3, r2
 8043d4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8043d4c:	687b      	ldr	r3, [r7, #4]
 8043d4e:	681b      	ldr	r3, [r3, #0]
 8043d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043d54:	461a      	mov	r2, r3
 8043d56:	68fb      	ldr	r3, [r7, #12]
 8043d58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8043d5a:	687b      	ldr	r3, [r7, #4]
 8043d5c:	681b      	ldr	r3, [r3, #0]
 8043d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043d62:	699b      	ldr	r3, [r3, #24]
 8043d64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8043d66:	2001      	movs	r0, #1
 8043d68:	f7fe f98e 	bl	8042088 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8043d6c:	687b      	ldr	r3, [r7, #4]
 8043d6e:	681b      	ldr	r3, [r3, #0]
 8043d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043d74:	461a      	mov	r2, r3
 8043d76:	68fb      	ldr	r3, [r7, #12]
 8043d78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8043d7a:	683b      	ldr	r3, [r7, #0]
 8043d7c:	791b      	ldrb	r3, [r3, #4]
 8043d7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8043d80:	683b      	ldr	r3, [r7, #0]
 8043d82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8043d84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8043d86:	683b      	ldr	r3, [r7, #0]
 8043d88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8043d8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8043d8c:	683b      	ldr	r3, [r7, #0]
 8043d8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8043d90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8043d92:	683b      	ldr	r3, [r7, #0]
 8043d94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8043d98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8043d9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8043d9c:	683b      	ldr	r3, [r7, #0]
 8043d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043da0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8043da2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8043da4:	683b      	ldr	r3, [r7, #0]
 8043da6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8043da8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8043daa:	687a      	ldr	r2, [r7, #4]
 8043dac:	6812      	ldr	r2, [r2, #0]
 8043dae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8043db2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8043db6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8043db8:	687b      	ldr	r3, [r7, #4]
 8043dba:	681b      	ldr	r3, [r3, #0]
 8043dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043dc0:	681b      	ldr	r3, [r3, #0]
 8043dc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8043dc4:	2001      	movs	r0, #1
 8043dc6:	f7fe f95f 	bl	8042088 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8043dca:	687b      	ldr	r3, [r7, #4]
 8043dcc:	681b      	ldr	r3, [r3, #0]
 8043dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043dd2:	461a      	mov	r2, r3
 8043dd4:	68fb      	ldr	r3, [r7, #12]
 8043dd6:	6013      	str	r3, [r2, #0]
}
 8043dd8:	bf00      	nop
 8043dda:	3710      	adds	r7, #16
 8043ddc:	46bd      	mov	sp, r7
 8043dde:	bd80      	pop	{r7, pc}
 8043de0:	f8de3f23 	.word	0xf8de3f23

08043de4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8043de4:	b580      	push	{r7, lr}
 8043de6:	b0a6      	sub	sp, #152	; 0x98
 8043de8:	af00      	add	r7, sp, #0
 8043dea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8043dec:	2301      	movs	r3, #1
 8043dee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8043df2:	2301      	movs	r3, #1
 8043df4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8043df8:	2300      	movs	r3, #0
 8043dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8043dfc:	2300      	movs	r3, #0
 8043dfe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8043e02:	2301      	movs	r3, #1
 8043e04:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8043e08:	2300      	movs	r3, #0
 8043e0a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8043e0e:	2301      	movs	r3, #1
 8043e10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8043e14:	2300      	movs	r3, #0
 8043e16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8043e1a:	2300      	movs	r3, #0
 8043e1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8043e20:	2300      	movs	r3, #0
 8043e22:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8043e24:	2300      	movs	r3, #0
 8043e26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8043e2a:	2300      	movs	r3, #0
 8043e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8043e2e:	2300      	movs	r3, #0
 8043e30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8043e34:	2300      	movs	r3, #0
 8043e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8043e3a:	2300      	movs	r3, #0
 8043e3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8043e40:	2300      	movs	r3, #0
 8043e42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8043e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8043e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8043e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8043e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8043e52:	2300      	movs	r3, #0
 8043e54:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8043e58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8043e5c:	4619      	mov	r1, r3
 8043e5e:	6878      	ldr	r0, [r7, #4]
 8043e60:	f7ff fe86 	bl	8043b70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8043e64:	2301      	movs	r3, #1
 8043e66:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8043e68:	2301      	movs	r3, #1
 8043e6a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8043e6c:	2301      	movs	r3, #1
 8043e6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8043e72:	2301      	movs	r3, #1
 8043e74:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8043e76:	2300      	movs	r3, #0
 8043e78:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8043e7a:	2300      	movs	r3, #0
 8043e7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8043e80:	2300      	movs	r3, #0
 8043e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8043e86:	2300      	movs	r3, #0
 8043e88:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8043e8a:	2301      	movs	r3, #1
 8043e8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8043e90:	2301      	movs	r3, #1
 8043e92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8043e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8043e98:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8043e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8043e9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8043ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8043ea4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8043ea6:	2301      	movs	r3, #1
 8043ea8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8043eac:	2300      	movs	r3, #0
 8043eae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8043eb0:	2300      	movs	r3, #0
 8043eb2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8043eb4:	f107 0308 	add.w	r3, r7, #8
 8043eb8:	4619      	mov	r1, r3
 8043eba:	6878      	ldr	r0, [r7, #4]
 8043ebc:	f7ff ff08 	bl	8043cd0 <ETH_SetDMAConfig>
}
 8043ec0:	bf00      	nop
 8043ec2:	3798      	adds	r7, #152	; 0x98
 8043ec4:	46bd      	mov	sp, r7
 8043ec6:	bd80      	pop	{r7, pc}

08043ec8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8043ec8:	b480      	push	{r7}
 8043eca:	b087      	sub	sp, #28
 8043ecc:	af00      	add	r7, sp, #0
 8043ece:	60f8      	str	r0, [r7, #12]
 8043ed0:	60b9      	str	r1, [r7, #8]
 8043ed2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8043ed4:	687b      	ldr	r3, [r7, #4]
 8043ed6:	3305      	adds	r3, #5
 8043ed8:	781b      	ldrb	r3, [r3, #0]
 8043eda:	021b      	lsls	r3, r3, #8
 8043edc:	687a      	ldr	r2, [r7, #4]
 8043ede:	3204      	adds	r2, #4
 8043ee0:	7812      	ldrb	r2, [r2, #0]
 8043ee2:	4313      	orrs	r3, r2
 8043ee4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8043ee6:	68ba      	ldr	r2, [r7, #8]
 8043ee8:	4b11      	ldr	r3, [pc, #68]	; (8043f30 <ETH_MACAddressConfig+0x68>)
 8043eea:	4413      	add	r3, r2
 8043eec:	461a      	mov	r2, r3
 8043eee:	697b      	ldr	r3, [r7, #20]
 8043ef0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8043ef2:	687b      	ldr	r3, [r7, #4]
 8043ef4:	3303      	adds	r3, #3
 8043ef6:	781b      	ldrb	r3, [r3, #0]
 8043ef8:	061a      	lsls	r2, r3, #24
 8043efa:	687b      	ldr	r3, [r7, #4]
 8043efc:	3302      	adds	r3, #2
 8043efe:	781b      	ldrb	r3, [r3, #0]
 8043f00:	041b      	lsls	r3, r3, #16
 8043f02:	431a      	orrs	r2, r3
 8043f04:	687b      	ldr	r3, [r7, #4]
 8043f06:	3301      	adds	r3, #1
 8043f08:	781b      	ldrb	r3, [r3, #0]
 8043f0a:	021b      	lsls	r3, r3, #8
 8043f0c:	4313      	orrs	r3, r2
 8043f0e:	687a      	ldr	r2, [r7, #4]
 8043f10:	7812      	ldrb	r2, [r2, #0]
 8043f12:	4313      	orrs	r3, r2
 8043f14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8043f16:	68ba      	ldr	r2, [r7, #8]
 8043f18:	4b06      	ldr	r3, [pc, #24]	; (8043f34 <ETH_MACAddressConfig+0x6c>)
 8043f1a:	4413      	add	r3, r2
 8043f1c:	461a      	mov	r2, r3
 8043f1e:	697b      	ldr	r3, [r7, #20]
 8043f20:	6013      	str	r3, [r2, #0]
}
 8043f22:	bf00      	nop
 8043f24:	371c      	adds	r7, #28
 8043f26:	46bd      	mov	sp, r7
 8043f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f2c:	4770      	bx	lr
 8043f2e:	bf00      	nop
 8043f30:	40028040 	.word	0x40028040
 8043f34:	40028044 	.word	0x40028044

08043f38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8043f38:	b480      	push	{r7}
 8043f3a:	b085      	sub	sp, #20
 8043f3c:	af00      	add	r7, sp, #0
 8043f3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8043f40:	2300      	movs	r3, #0
 8043f42:	60fb      	str	r3, [r7, #12]
 8043f44:	e03e      	b.n	8043fc4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8043f46:	687b      	ldr	r3, [r7, #4]
 8043f48:	68d9      	ldr	r1, [r3, #12]
 8043f4a:	68fa      	ldr	r2, [r7, #12]
 8043f4c:	4613      	mov	r3, r2
 8043f4e:	009b      	lsls	r3, r3, #2
 8043f50:	4413      	add	r3, r2
 8043f52:	00db      	lsls	r3, r3, #3
 8043f54:	440b      	add	r3, r1
 8043f56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8043f58:	68bb      	ldr	r3, [r7, #8]
 8043f5a:	2200      	movs	r2, #0
 8043f5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8043f5e:	68bb      	ldr	r3, [r7, #8]
 8043f60:	2200      	movs	r2, #0
 8043f62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8043f64:	68bb      	ldr	r3, [r7, #8]
 8043f66:	2200      	movs	r2, #0
 8043f68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8043f6a:	68bb      	ldr	r3, [r7, #8]
 8043f6c:	2200      	movs	r2, #0
 8043f6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8043f70:	68b9      	ldr	r1, [r7, #8]
 8043f72:	687b      	ldr	r3, [r7, #4]
 8043f74:	68fa      	ldr	r2, [r7, #12]
 8043f76:	3206      	adds	r2, #6
 8043f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8043f7c:	68bb      	ldr	r3, [r7, #8]
 8043f7e:	681b      	ldr	r3, [r3, #0]
 8043f80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8043f84:	68bb      	ldr	r3, [r7, #8]
 8043f86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8043f88:	68fb      	ldr	r3, [r7, #12]
 8043f8a:	2b02      	cmp	r3, #2
 8043f8c:	d80c      	bhi.n	8043fa8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8043f8e:	687b      	ldr	r3, [r7, #4]
 8043f90:	68d9      	ldr	r1, [r3, #12]
 8043f92:	68fb      	ldr	r3, [r7, #12]
 8043f94:	1c5a      	adds	r2, r3, #1
 8043f96:	4613      	mov	r3, r2
 8043f98:	009b      	lsls	r3, r3, #2
 8043f9a:	4413      	add	r3, r2
 8043f9c:	00db      	lsls	r3, r3, #3
 8043f9e:	440b      	add	r3, r1
 8043fa0:	461a      	mov	r2, r3
 8043fa2:	68bb      	ldr	r3, [r7, #8]
 8043fa4:	60da      	str	r2, [r3, #12]
 8043fa6:	e004      	b.n	8043fb2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8043fa8:	687b      	ldr	r3, [r7, #4]
 8043faa:	68db      	ldr	r3, [r3, #12]
 8043fac:	461a      	mov	r2, r3
 8043fae:	68bb      	ldr	r3, [r7, #8]
 8043fb0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8043fb2:	68bb      	ldr	r3, [r7, #8]
 8043fb4:	681b      	ldr	r3, [r3, #0]
 8043fb6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8043fba:	68bb      	ldr	r3, [r7, #8]
 8043fbc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8043fbe:	68fb      	ldr	r3, [r7, #12]
 8043fc0:	3301      	adds	r3, #1
 8043fc2:	60fb      	str	r3, [r7, #12]
 8043fc4:	68fb      	ldr	r3, [r7, #12]
 8043fc6:	2b03      	cmp	r3, #3
 8043fc8:	d9bd      	bls.n	8043f46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8043fca:	687b      	ldr	r3, [r7, #4]
 8043fcc:	2200      	movs	r2, #0
 8043fce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8043fd0:	687b      	ldr	r3, [r7, #4]
 8043fd2:	68da      	ldr	r2, [r3, #12]
 8043fd4:	687b      	ldr	r3, [r7, #4]
 8043fd6:	681b      	ldr	r3, [r3, #0]
 8043fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8043fdc:	611a      	str	r2, [r3, #16]
}
 8043fde:	bf00      	nop
 8043fe0:	3714      	adds	r7, #20
 8043fe2:	46bd      	mov	sp, r7
 8043fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fe8:	4770      	bx	lr

08043fea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8043fea:	b480      	push	{r7}
 8043fec:	b085      	sub	sp, #20
 8043fee:	af00      	add	r7, sp, #0
 8043ff0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8043ff2:	2300      	movs	r3, #0
 8043ff4:	60fb      	str	r3, [r7, #12]
 8043ff6:	e046      	b.n	8044086 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8043ff8:	687b      	ldr	r3, [r7, #4]
 8043ffa:	6919      	ldr	r1, [r3, #16]
 8043ffc:	68fa      	ldr	r2, [r7, #12]
 8043ffe:	4613      	mov	r3, r2
 8044000:	009b      	lsls	r3, r3, #2
 8044002:	4413      	add	r3, r2
 8044004:	00db      	lsls	r3, r3, #3
 8044006:	440b      	add	r3, r1
 8044008:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 804400a:	68bb      	ldr	r3, [r7, #8]
 804400c:	2200      	movs	r2, #0
 804400e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8044010:	68bb      	ldr	r3, [r7, #8]
 8044012:	2200      	movs	r2, #0
 8044014:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8044016:	68bb      	ldr	r3, [r7, #8]
 8044018:	2200      	movs	r2, #0
 804401a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 804401c:	68bb      	ldr	r3, [r7, #8]
 804401e:	2200      	movs	r2, #0
 8044020:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8044022:	68bb      	ldr	r3, [r7, #8]
 8044024:	2200      	movs	r2, #0
 8044026:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8044028:	68bb      	ldr	r3, [r7, #8]
 804402a:	2200      	movs	r2, #0
 804402c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 804402e:	68bb      	ldr	r3, [r7, #8]
 8044030:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8044034:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8044036:	68bb      	ldr	r3, [r7, #8]
 8044038:	f244 52f8 	movw	r2, #17912	; 0x45f8
 804403c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 804403e:	68bb      	ldr	r3, [r7, #8]
 8044040:	685b      	ldr	r3, [r3, #4]
 8044042:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8044046:	68bb      	ldr	r3, [r7, #8]
 8044048:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 804404a:	68b9      	ldr	r1, [r7, #8]
 804404c:	687b      	ldr	r3, [r7, #4]
 804404e:	68fa      	ldr	r2, [r7, #12]
 8044050:	3212      	adds	r2, #18
 8044052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8044056:	68fb      	ldr	r3, [r7, #12]
 8044058:	2b02      	cmp	r3, #2
 804405a:	d80c      	bhi.n	8044076 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 804405c:	687b      	ldr	r3, [r7, #4]
 804405e:	6919      	ldr	r1, [r3, #16]
 8044060:	68fb      	ldr	r3, [r7, #12]
 8044062:	1c5a      	adds	r2, r3, #1
 8044064:	4613      	mov	r3, r2
 8044066:	009b      	lsls	r3, r3, #2
 8044068:	4413      	add	r3, r2
 804406a:	00db      	lsls	r3, r3, #3
 804406c:	440b      	add	r3, r1
 804406e:	461a      	mov	r2, r3
 8044070:	68bb      	ldr	r3, [r7, #8]
 8044072:	60da      	str	r2, [r3, #12]
 8044074:	e004      	b.n	8044080 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8044076:	687b      	ldr	r3, [r7, #4]
 8044078:	691b      	ldr	r3, [r3, #16]
 804407a:	461a      	mov	r2, r3
 804407c:	68bb      	ldr	r3, [r7, #8]
 804407e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8044080:	68fb      	ldr	r3, [r7, #12]
 8044082:	3301      	adds	r3, #1
 8044084:	60fb      	str	r3, [r7, #12]
 8044086:	68fb      	ldr	r3, [r7, #12]
 8044088:	2b03      	cmp	r3, #3
 804408a:	d9b5      	bls.n	8043ff8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 804408c:	687b      	ldr	r3, [r7, #4]
 804408e:	2200      	movs	r2, #0
 8044090:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8044092:	687b      	ldr	r3, [r7, #4]
 8044094:	2200      	movs	r2, #0
 8044096:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8044098:	687b      	ldr	r3, [r7, #4]
 804409a:	2200      	movs	r2, #0
 804409c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 804409e:	687b      	ldr	r3, [r7, #4]
 80440a0:	2200      	movs	r2, #0
 80440a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80440a4:	687b      	ldr	r3, [r7, #4]
 80440a6:	2200      	movs	r2, #0
 80440a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80440aa:	687b      	ldr	r3, [r7, #4]
 80440ac:	691a      	ldr	r2, [r3, #16]
 80440ae:	687b      	ldr	r3, [r7, #4]
 80440b0:	681b      	ldr	r3, [r3, #0]
 80440b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80440b6:	60da      	str	r2, [r3, #12]
}
 80440b8:	bf00      	nop
 80440ba:	3714      	adds	r7, #20
 80440bc:	46bd      	mov	sp, r7
 80440be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440c2:	4770      	bx	lr

080440c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80440c4:	b480      	push	{r7}
 80440c6:	b08d      	sub	sp, #52	; 0x34
 80440c8:	af00      	add	r7, sp, #0
 80440ca:	60f8      	str	r0, [r7, #12]
 80440cc:	60b9      	str	r1, [r7, #8]
 80440ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80440d0:	68fb      	ldr	r3, [r7, #12]
 80440d2:	3318      	adds	r3, #24
 80440d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80440d6:	697b      	ldr	r3, [r7, #20]
 80440d8:	691b      	ldr	r3, [r3, #16]
 80440da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80440dc:	697b      	ldr	r3, [r7, #20]
 80440de:	691b      	ldr	r3, [r3, #16]
 80440e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80440e2:	2300      	movs	r3, #0
 80440e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80440e6:	697b      	ldr	r3, [r7, #20]
 80440e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80440ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80440ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80440f0:	68bb      	ldr	r3, [r7, #8]
 80440f2:	689b      	ldr	r3, [r3, #8]
 80440f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80440f6:	2300      	movs	r3, #0
 80440f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80440fa:	6a3b      	ldr	r3, [r7, #32]
 80440fc:	681b      	ldr	r3, [r3, #0]
 80440fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8044102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8044106:	d007      	beq.n	8044118 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8044108:	697a      	ldr	r2, [r7, #20]
 804410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804410c:	3304      	adds	r3, #4
 804410e:	009b      	lsls	r3, r3, #2
 8044110:	4413      	add	r3, r2
 8044112:	685b      	ldr	r3, [r3, #4]
 8044114:	2b00      	cmp	r3, #0
 8044116:	d001      	beq.n	804411c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8044118:	2302      	movs	r3, #2
 804411a:	e0ff      	b.n	804431c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 804411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804411e:	3301      	adds	r3, #1
 8044120:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8044122:	69fb      	ldr	r3, [r7, #28]
 8044124:	681b      	ldr	r3, [r3, #0]
 8044126:	461a      	mov	r2, r3
 8044128:	6a3b      	ldr	r3, [r7, #32]
 804412a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 804412c:	6a3b      	ldr	r3, [r7, #32]
 804412e:	685a      	ldr	r2, [r3, #4]
 8044130:	4b7d      	ldr	r3, [pc, #500]	; (8044328 <ETH_Prepare_Tx_Descriptors+0x264>)
 8044132:	4013      	ands	r3, r2
 8044134:	69fa      	ldr	r2, [r7, #28]
 8044136:	6852      	ldr	r2, [r2, #4]
 8044138:	431a      	orrs	r2, r3
 804413a:	6a3b      	ldr	r3, [r7, #32]
 804413c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 804413e:	68bb      	ldr	r3, [r7, #8]
 8044140:	681b      	ldr	r3, [r3, #0]
 8044142:	f003 0301 	and.w	r3, r3, #1
 8044146:	2b00      	cmp	r3, #0
 8044148:	d008      	beq.n	804415c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 804414a:	6a3b      	ldr	r3, [r7, #32]
 804414c:	681b      	ldr	r3, [r3, #0]
 804414e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8044152:	68bb      	ldr	r3, [r7, #8]
 8044154:	695b      	ldr	r3, [r3, #20]
 8044156:	431a      	orrs	r2, r3
 8044158:	6a3b      	ldr	r3, [r7, #32]
 804415a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 804415c:	68bb      	ldr	r3, [r7, #8]
 804415e:	681b      	ldr	r3, [r3, #0]
 8044160:	f003 0320 	and.w	r3, r3, #32
 8044164:	2b00      	cmp	r3, #0
 8044166:	d008      	beq.n	804417a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8044168:	6a3b      	ldr	r3, [r7, #32]
 804416a:	681b      	ldr	r3, [r3, #0]
 804416c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8044170:	68bb      	ldr	r3, [r7, #8]
 8044172:	691b      	ldr	r3, [r3, #16]
 8044174:	431a      	orrs	r2, r3
 8044176:	6a3b      	ldr	r3, [r7, #32]
 8044178:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 804417a:	68bb      	ldr	r3, [r7, #8]
 804417c:	681b      	ldr	r3, [r3, #0]
 804417e:	f003 0304 	and.w	r3, r3, #4
 8044182:	2b00      	cmp	r3, #0
 8044184:	d005      	beq.n	8044192 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8044186:	6a3b      	ldr	r3, [r7, #32]
 8044188:	681b      	ldr	r3, [r3, #0]
 804418a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 804418e:	6a3b      	ldr	r3, [r7, #32]
 8044190:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8044192:	6a3b      	ldr	r3, [r7, #32]
 8044194:	681b      	ldr	r3, [r3, #0]
 8044196:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 804419a:	6a3b      	ldr	r3, [r7, #32]
 804419c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 804419e:	f3bf 8f5f 	dmb	sy
}
 80441a2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80441a4:	6a3b      	ldr	r3, [r7, #32]
 80441a6:	681b      	ldr	r3, [r3, #0]
 80441a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80441ac:	6a3b      	ldr	r3, [r7, #32]
 80441ae:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80441b0:	e082      	b.n	80442b8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80441b2:	6a3b      	ldr	r3, [r7, #32]
 80441b4:	681b      	ldr	r3, [r3, #0]
 80441b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80441ba:	6a3b      	ldr	r3, [r7, #32]
 80441bc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80441be:	687b      	ldr	r3, [r7, #4]
 80441c0:	2b00      	cmp	r3, #0
 80441c2:	d006      	beq.n	80441d2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80441c4:	6a3b      	ldr	r3, [r7, #32]
 80441c6:	681b      	ldr	r3, [r3, #0]
 80441c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80441cc:	6a3b      	ldr	r3, [r7, #32]
 80441ce:	601a      	str	r2, [r3, #0]
 80441d0:	e005      	b.n	80441de <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80441d2:	6a3b      	ldr	r3, [r7, #32]
 80441d4:	681b      	ldr	r3, [r3, #0]
 80441d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80441da:	6a3b      	ldr	r3, [r7, #32]
 80441dc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80441de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80441e0:	3301      	adds	r3, #1
 80441e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80441e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80441e6:	2b03      	cmp	r3, #3
 80441e8:	d902      	bls.n	80441f0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80441ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80441ec:	3b04      	subs	r3, #4
 80441ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80441f0:	697b      	ldr	r3, [r7, #20]
 80441f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80441f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80441f8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80441fa:	6a3b      	ldr	r3, [r7, #32]
 80441fc:	681b      	ldr	r3, [r3, #0]
 80441fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8044202:	6a3b      	ldr	r3, [r7, #32]
 8044204:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8044206:	6a3b      	ldr	r3, [r7, #32]
 8044208:	681b      	ldr	r3, [r3, #0]
 804420a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804420e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8044212:	d007      	beq.n	8044224 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8044214:	697a      	ldr	r2, [r7, #20]
 8044216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044218:	3304      	adds	r3, #4
 804421a:	009b      	lsls	r3, r3, #2
 804421c:	4413      	add	r3, r2
 804421e:	685b      	ldr	r3, [r3, #4]
 8044220:	2b00      	cmp	r3, #0
 8044222:	d029      	beq.n	8044278 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8044224:	693b      	ldr	r3, [r7, #16]
 8044226:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8044228:	697b      	ldr	r3, [r7, #20]
 804422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804422c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044230:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8044232:	2300      	movs	r3, #0
 8044234:	62bb      	str	r3, [r7, #40]	; 0x28
 8044236:	e019      	b.n	804426c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8044238:	f3bf 8f5f 	dmb	sy
}
 804423c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 804423e:	6a3b      	ldr	r3, [r7, #32]
 8044240:	681b      	ldr	r3, [r3, #0]
 8044242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8044246:	6a3b      	ldr	r3, [r7, #32]
 8044248:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 804424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804424c:	3301      	adds	r3, #1
 804424e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8044250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044252:	2b03      	cmp	r3, #3
 8044254:	d902      	bls.n	804425c <ETH_Prepare_Tx_Descriptors+0x198>
 8044256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8044258:	3b04      	subs	r3, #4
 804425a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 804425c:	697b      	ldr	r3, [r7, #20]
 804425e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8044260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044264:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8044266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044268:	3301      	adds	r3, #1
 804426a:	62bb      	str	r3, [r7, #40]	; 0x28
 804426c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8044270:	429a      	cmp	r2, r3
 8044272:	d3e1      	bcc.n	8044238 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8044274:	2302      	movs	r3, #2
 8044276:	e051      	b.n	804431c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8044278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804427a:	3301      	adds	r3, #1
 804427c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 804427e:	69fb      	ldr	r3, [r7, #28]
 8044280:	689b      	ldr	r3, [r3, #8]
 8044282:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8044284:	69fb      	ldr	r3, [r7, #28]
 8044286:	681b      	ldr	r3, [r3, #0]
 8044288:	461a      	mov	r2, r3
 804428a:	6a3b      	ldr	r3, [r7, #32]
 804428c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 804428e:	6a3b      	ldr	r3, [r7, #32]
 8044290:	685a      	ldr	r2, [r3, #4]
 8044292:	4b25      	ldr	r3, [pc, #148]	; (8044328 <ETH_Prepare_Tx_Descriptors+0x264>)
 8044294:	4013      	ands	r3, r2
 8044296:	69fa      	ldr	r2, [r7, #28]
 8044298:	6852      	ldr	r2, [r2, #4]
 804429a:	431a      	orrs	r2, r3
 804429c:	6a3b      	ldr	r3, [r7, #32]
 804429e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80442a0:	69bb      	ldr	r3, [r7, #24]
 80442a2:	3301      	adds	r3, #1
 80442a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80442a6:	f3bf 8f5f 	dmb	sy
}
 80442aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80442ac:	6a3b      	ldr	r3, [r7, #32]
 80442ae:	681b      	ldr	r3, [r3, #0]
 80442b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80442b4:	6a3b      	ldr	r3, [r7, #32]
 80442b6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80442b8:	69fb      	ldr	r3, [r7, #28]
 80442ba:	689b      	ldr	r3, [r3, #8]
 80442bc:	2b00      	cmp	r3, #0
 80442be:	f47f af78 	bne.w	80441b2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80442c2:	687b      	ldr	r3, [r7, #4]
 80442c4:	2b00      	cmp	r3, #0
 80442c6:	d006      	beq.n	80442d6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80442c8:	6a3b      	ldr	r3, [r7, #32]
 80442ca:	681b      	ldr	r3, [r3, #0]
 80442cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80442d0:	6a3b      	ldr	r3, [r7, #32]
 80442d2:	601a      	str	r2, [r3, #0]
 80442d4:	e005      	b.n	80442e2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80442d6:	6a3b      	ldr	r3, [r7, #32]
 80442d8:	681b      	ldr	r3, [r3, #0]
 80442da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80442de:	6a3b      	ldr	r3, [r7, #32]
 80442e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80442e2:	6a3b      	ldr	r3, [r7, #32]
 80442e4:	681b      	ldr	r3, [r3, #0]
 80442e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80442ea:	6a3b      	ldr	r3, [r7, #32]
 80442ec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80442ee:	697b      	ldr	r3, [r7, #20]
 80442f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80442f2:	6979      	ldr	r1, [r7, #20]
 80442f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80442f6:	3304      	adds	r3, #4
 80442f8:	009b      	lsls	r3, r3, #2
 80442fa:	440b      	add	r3, r1
 80442fc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80442fe:	697b      	ldr	r3, [r7, #20]
 8044300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8044302:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8044304:	b672      	cpsid	i
}
 8044306:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8044308:	697b      	ldr	r3, [r7, #20]
 804430a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804430c:	69bb      	ldr	r3, [r7, #24]
 804430e:	4413      	add	r3, r2
 8044310:	1c5a      	adds	r2, r3, #1
 8044312:	697b      	ldr	r3, [r7, #20]
 8044314:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8044316:	b662      	cpsie	i
}
 8044318:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 804431a:	2300      	movs	r3, #0
}
 804431c:	4618      	mov	r0, r3
 804431e:	3734      	adds	r7, #52	; 0x34
 8044320:	46bd      	mov	sp, r7
 8044322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044326:	4770      	bx	lr
 8044328:	ffffe000 	.word	0xffffe000

0804432c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 804432c:	b480      	push	{r7}
 804432e:	b089      	sub	sp, #36	; 0x24
 8044330:	af00      	add	r7, sp, #0
 8044332:	6078      	str	r0, [r7, #4]
 8044334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8044336:	2300      	movs	r3, #0
 8044338:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 804433a:	2300      	movs	r3, #0
 804433c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 804433e:	2300      	movs	r3, #0
 8044340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8044342:	2300      	movs	r3, #0
 8044344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8044346:	2300      	movs	r3, #0
 8044348:	61fb      	str	r3, [r7, #28]
 804434a:	e175      	b.n	8044638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 804434c:	2201      	movs	r2, #1
 804434e:	69fb      	ldr	r3, [r7, #28]
 8044350:	fa02 f303 	lsl.w	r3, r2, r3
 8044354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8044356:	683b      	ldr	r3, [r7, #0]
 8044358:	681b      	ldr	r3, [r3, #0]
 804435a:	697a      	ldr	r2, [r7, #20]
 804435c:	4013      	ands	r3, r2
 804435e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8044360:	693a      	ldr	r2, [r7, #16]
 8044362:	697b      	ldr	r3, [r7, #20]
 8044364:	429a      	cmp	r2, r3
 8044366:	f040 8164 	bne.w	8044632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 804436a:	683b      	ldr	r3, [r7, #0]
 804436c:	685b      	ldr	r3, [r3, #4]
 804436e:	f003 0303 	and.w	r3, r3, #3
 8044372:	2b01      	cmp	r3, #1
 8044374:	d005      	beq.n	8044382 <HAL_GPIO_Init+0x56>
 8044376:	683b      	ldr	r3, [r7, #0]
 8044378:	685b      	ldr	r3, [r3, #4]
 804437a:	f003 0303 	and.w	r3, r3, #3
 804437e:	2b02      	cmp	r3, #2
 8044380:	d130      	bne.n	80443e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8044382:	687b      	ldr	r3, [r7, #4]
 8044384:	689b      	ldr	r3, [r3, #8]
 8044386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8044388:	69fb      	ldr	r3, [r7, #28]
 804438a:	005b      	lsls	r3, r3, #1
 804438c:	2203      	movs	r2, #3
 804438e:	fa02 f303 	lsl.w	r3, r2, r3
 8044392:	43db      	mvns	r3, r3
 8044394:	69ba      	ldr	r2, [r7, #24]
 8044396:	4013      	ands	r3, r2
 8044398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 804439a:	683b      	ldr	r3, [r7, #0]
 804439c:	68da      	ldr	r2, [r3, #12]
 804439e:	69fb      	ldr	r3, [r7, #28]
 80443a0:	005b      	lsls	r3, r3, #1
 80443a2:	fa02 f303 	lsl.w	r3, r2, r3
 80443a6:	69ba      	ldr	r2, [r7, #24]
 80443a8:	4313      	orrs	r3, r2
 80443aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80443ac:	687b      	ldr	r3, [r7, #4]
 80443ae:	69ba      	ldr	r2, [r7, #24]
 80443b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80443b2:	687b      	ldr	r3, [r7, #4]
 80443b4:	685b      	ldr	r3, [r3, #4]
 80443b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80443b8:	2201      	movs	r2, #1
 80443ba:	69fb      	ldr	r3, [r7, #28]
 80443bc:	fa02 f303 	lsl.w	r3, r2, r3
 80443c0:	43db      	mvns	r3, r3
 80443c2:	69ba      	ldr	r2, [r7, #24]
 80443c4:	4013      	ands	r3, r2
 80443c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80443c8:	683b      	ldr	r3, [r7, #0]
 80443ca:	685b      	ldr	r3, [r3, #4]
 80443cc:	091b      	lsrs	r3, r3, #4
 80443ce:	f003 0201 	and.w	r2, r3, #1
 80443d2:	69fb      	ldr	r3, [r7, #28]
 80443d4:	fa02 f303 	lsl.w	r3, r2, r3
 80443d8:	69ba      	ldr	r2, [r7, #24]
 80443da:	4313      	orrs	r3, r2
 80443dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80443de:	687b      	ldr	r3, [r7, #4]
 80443e0:	69ba      	ldr	r2, [r7, #24]
 80443e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80443e4:	683b      	ldr	r3, [r7, #0]
 80443e6:	685b      	ldr	r3, [r3, #4]
 80443e8:	f003 0303 	and.w	r3, r3, #3
 80443ec:	2b03      	cmp	r3, #3
 80443ee:	d017      	beq.n	8044420 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80443f0:	687b      	ldr	r3, [r7, #4]
 80443f2:	68db      	ldr	r3, [r3, #12]
 80443f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80443f6:	69fb      	ldr	r3, [r7, #28]
 80443f8:	005b      	lsls	r3, r3, #1
 80443fa:	2203      	movs	r2, #3
 80443fc:	fa02 f303 	lsl.w	r3, r2, r3
 8044400:	43db      	mvns	r3, r3
 8044402:	69ba      	ldr	r2, [r7, #24]
 8044404:	4013      	ands	r3, r2
 8044406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8044408:	683b      	ldr	r3, [r7, #0]
 804440a:	689a      	ldr	r2, [r3, #8]
 804440c:	69fb      	ldr	r3, [r7, #28]
 804440e:	005b      	lsls	r3, r3, #1
 8044410:	fa02 f303 	lsl.w	r3, r2, r3
 8044414:	69ba      	ldr	r2, [r7, #24]
 8044416:	4313      	orrs	r3, r2
 8044418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 804441a:	687b      	ldr	r3, [r7, #4]
 804441c:	69ba      	ldr	r2, [r7, #24]
 804441e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8044420:	683b      	ldr	r3, [r7, #0]
 8044422:	685b      	ldr	r3, [r3, #4]
 8044424:	f003 0303 	and.w	r3, r3, #3
 8044428:	2b02      	cmp	r3, #2
 804442a:	d123      	bne.n	8044474 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 804442c:	69fb      	ldr	r3, [r7, #28]
 804442e:	08da      	lsrs	r2, r3, #3
 8044430:	687b      	ldr	r3, [r7, #4]
 8044432:	3208      	adds	r2, #8
 8044434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 804443a:	69fb      	ldr	r3, [r7, #28]
 804443c:	f003 0307 	and.w	r3, r3, #7
 8044440:	009b      	lsls	r3, r3, #2
 8044442:	220f      	movs	r2, #15
 8044444:	fa02 f303 	lsl.w	r3, r2, r3
 8044448:	43db      	mvns	r3, r3
 804444a:	69ba      	ldr	r2, [r7, #24]
 804444c:	4013      	ands	r3, r2
 804444e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8044450:	683b      	ldr	r3, [r7, #0]
 8044452:	691a      	ldr	r2, [r3, #16]
 8044454:	69fb      	ldr	r3, [r7, #28]
 8044456:	f003 0307 	and.w	r3, r3, #7
 804445a:	009b      	lsls	r3, r3, #2
 804445c:	fa02 f303 	lsl.w	r3, r2, r3
 8044460:	69ba      	ldr	r2, [r7, #24]
 8044462:	4313      	orrs	r3, r2
 8044464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8044466:	69fb      	ldr	r3, [r7, #28]
 8044468:	08da      	lsrs	r2, r3, #3
 804446a:	687b      	ldr	r3, [r7, #4]
 804446c:	3208      	adds	r2, #8
 804446e:	69b9      	ldr	r1, [r7, #24]
 8044470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8044474:	687b      	ldr	r3, [r7, #4]
 8044476:	681b      	ldr	r3, [r3, #0]
 8044478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 804447a:	69fb      	ldr	r3, [r7, #28]
 804447c:	005b      	lsls	r3, r3, #1
 804447e:	2203      	movs	r2, #3
 8044480:	fa02 f303 	lsl.w	r3, r2, r3
 8044484:	43db      	mvns	r3, r3
 8044486:	69ba      	ldr	r2, [r7, #24]
 8044488:	4013      	ands	r3, r2
 804448a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 804448c:	683b      	ldr	r3, [r7, #0]
 804448e:	685b      	ldr	r3, [r3, #4]
 8044490:	f003 0203 	and.w	r2, r3, #3
 8044494:	69fb      	ldr	r3, [r7, #28]
 8044496:	005b      	lsls	r3, r3, #1
 8044498:	fa02 f303 	lsl.w	r3, r2, r3
 804449c:	69ba      	ldr	r2, [r7, #24]
 804449e:	4313      	orrs	r3, r2
 80444a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80444a2:	687b      	ldr	r3, [r7, #4]
 80444a4:	69ba      	ldr	r2, [r7, #24]
 80444a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80444a8:	683b      	ldr	r3, [r7, #0]
 80444aa:	685b      	ldr	r3, [r3, #4]
 80444ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80444b0:	2b00      	cmp	r3, #0
 80444b2:	f000 80be 	beq.w	8044632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80444b6:	4b66      	ldr	r3, [pc, #408]	; (8044650 <HAL_GPIO_Init+0x324>)
 80444b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80444ba:	4a65      	ldr	r2, [pc, #404]	; (8044650 <HAL_GPIO_Init+0x324>)
 80444bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80444c0:	6453      	str	r3, [r2, #68]	; 0x44
 80444c2:	4b63      	ldr	r3, [pc, #396]	; (8044650 <HAL_GPIO_Init+0x324>)
 80444c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80444c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80444ca:	60fb      	str	r3, [r7, #12]
 80444cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80444ce:	4a61      	ldr	r2, [pc, #388]	; (8044654 <HAL_GPIO_Init+0x328>)
 80444d0:	69fb      	ldr	r3, [r7, #28]
 80444d2:	089b      	lsrs	r3, r3, #2
 80444d4:	3302      	adds	r3, #2
 80444d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80444da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80444dc:	69fb      	ldr	r3, [r7, #28]
 80444de:	f003 0303 	and.w	r3, r3, #3
 80444e2:	009b      	lsls	r3, r3, #2
 80444e4:	220f      	movs	r2, #15
 80444e6:	fa02 f303 	lsl.w	r3, r2, r3
 80444ea:	43db      	mvns	r3, r3
 80444ec:	69ba      	ldr	r2, [r7, #24]
 80444ee:	4013      	ands	r3, r2
 80444f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80444f2:	687b      	ldr	r3, [r7, #4]
 80444f4:	4a58      	ldr	r2, [pc, #352]	; (8044658 <HAL_GPIO_Init+0x32c>)
 80444f6:	4293      	cmp	r3, r2
 80444f8:	d037      	beq.n	804456a <HAL_GPIO_Init+0x23e>
 80444fa:	687b      	ldr	r3, [r7, #4]
 80444fc:	4a57      	ldr	r2, [pc, #348]	; (804465c <HAL_GPIO_Init+0x330>)
 80444fe:	4293      	cmp	r3, r2
 8044500:	d031      	beq.n	8044566 <HAL_GPIO_Init+0x23a>
 8044502:	687b      	ldr	r3, [r7, #4]
 8044504:	4a56      	ldr	r2, [pc, #344]	; (8044660 <HAL_GPIO_Init+0x334>)
 8044506:	4293      	cmp	r3, r2
 8044508:	d02b      	beq.n	8044562 <HAL_GPIO_Init+0x236>
 804450a:	687b      	ldr	r3, [r7, #4]
 804450c:	4a55      	ldr	r2, [pc, #340]	; (8044664 <HAL_GPIO_Init+0x338>)
 804450e:	4293      	cmp	r3, r2
 8044510:	d025      	beq.n	804455e <HAL_GPIO_Init+0x232>
 8044512:	687b      	ldr	r3, [r7, #4]
 8044514:	4a54      	ldr	r2, [pc, #336]	; (8044668 <HAL_GPIO_Init+0x33c>)
 8044516:	4293      	cmp	r3, r2
 8044518:	d01f      	beq.n	804455a <HAL_GPIO_Init+0x22e>
 804451a:	687b      	ldr	r3, [r7, #4]
 804451c:	4a53      	ldr	r2, [pc, #332]	; (804466c <HAL_GPIO_Init+0x340>)
 804451e:	4293      	cmp	r3, r2
 8044520:	d019      	beq.n	8044556 <HAL_GPIO_Init+0x22a>
 8044522:	687b      	ldr	r3, [r7, #4]
 8044524:	4a52      	ldr	r2, [pc, #328]	; (8044670 <HAL_GPIO_Init+0x344>)
 8044526:	4293      	cmp	r3, r2
 8044528:	d013      	beq.n	8044552 <HAL_GPIO_Init+0x226>
 804452a:	687b      	ldr	r3, [r7, #4]
 804452c:	4a51      	ldr	r2, [pc, #324]	; (8044674 <HAL_GPIO_Init+0x348>)
 804452e:	4293      	cmp	r3, r2
 8044530:	d00d      	beq.n	804454e <HAL_GPIO_Init+0x222>
 8044532:	687b      	ldr	r3, [r7, #4]
 8044534:	4a50      	ldr	r2, [pc, #320]	; (8044678 <HAL_GPIO_Init+0x34c>)
 8044536:	4293      	cmp	r3, r2
 8044538:	d007      	beq.n	804454a <HAL_GPIO_Init+0x21e>
 804453a:	687b      	ldr	r3, [r7, #4]
 804453c:	4a4f      	ldr	r2, [pc, #316]	; (804467c <HAL_GPIO_Init+0x350>)
 804453e:	4293      	cmp	r3, r2
 8044540:	d101      	bne.n	8044546 <HAL_GPIO_Init+0x21a>
 8044542:	2309      	movs	r3, #9
 8044544:	e012      	b.n	804456c <HAL_GPIO_Init+0x240>
 8044546:	230a      	movs	r3, #10
 8044548:	e010      	b.n	804456c <HAL_GPIO_Init+0x240>
 804454a:	2308      	movs	r3, #8
 804454c:	e00e      	b.n	804456c <HAL_GPIO_Init+0x240>
 804454e:	2307      	movs	r3, #7
 8044550:	e00c      	b.n	804456c <HAL_GPIO_Init+0x240>
 8044552:	2306      	movs	r3, #6
 8044554:	e00a      	b.n	804456c <HAL_GPIO_Init+0x240>
 8044556:	2305      	movs	r3, #5
 8044558:	e008      	b.n	804456c <HAL_GPIO_Init+0x240>
 804455a:	2304      	movs	r3, #4
 804455c:	e006      	b.n	804456c <HAL_GPIO_Init+0x240>
 804455e:	2303      	movs	r3, #3
 8044560:	e004      	b.n	804456c <HAL_GPIO_Init+0x240>
 8044562:	2302      	movs	r3, #2
 8044564:	e002      	b.n	804456c <HAL_GPIO_Init+0x240>
 8044566:	2301      	movs	r3, #1
 8044568:	e000      	b.n	804456c <HAL_GPIO_Init+0x240>
 804456a:	2300      	movs	r3, #0
 804456c:	69fa      	ldr	r2, [r7, #28]
 804456e:	f002 0203 	and.w	r2, r2, #3
 8044572:	0092      	lsls	r2, r2, #2
 8044574:	4093      	lsls	r3, r2
 8044576:	69ba      	ldr	r2, [r7, #24]
 8044578:	4313      	orrs	r3, r2
 804457a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 804457c:	4935      	ldr	r1, [pc, #212]	; (8044654 <HAL_GPIO_Init+0x328>)
 804457e:	69fb      	ldr	r3, [r7, #28]
 8044580:	089b      	lsrs	r3, r3, #2
 8044582:	3302      	adds	r3, #2
 8044584:	69ba      	ldr	r2, [r7, #24]
 8044586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 804458a:	4b3d      	ldr	r3, [pc, #244]	; (8044680 <HAL_GPIO_Init+0x354>)
 804458c:	689b      	ldr	r3, [r3, #8]
 804458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044590:	693b      	ldr	r3, [r7, #16]
 8044592:	43db      	mvns	r3, r3
 8044594:	69ba      	ldr	r2, [r7, #24]
 8044596:	4013      	ands	r3, r2
 8044598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 804459a:	683b      	ldr	r3, [r7, #0]
 804459c:	685b      	ldr	r3, [r3, #4]
 804459e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80445a2:	2b00      	cmp	r3, #0
 80445a4:	d003      	beq.n	80445ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80445a6:	69ba      	ldr	r2, [r7, #24]
 80445a8:	693b      	ldr	r3, [r7, #16]
 80445aa:	4313      	orrs	r3, r2
 80445ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80445ae:	4a34      	ldr	r2, [pc, #208]	; (8044680 <HAL_GPIO_Init+0x354>)
 80445b0:	69bb      	ldr	r3, [r7, #24]
 80445b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80445b4:	4b32      	ldr	r3, [pc, #200]	; (8044680 <HAL_GPIO_Init+0x354>)
 80445b6:	68db      	ldr	r3, [r3, #12]
 80445b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80445ba:	693b      	ldr	r3, [r7, #16]
 80445bc:	43db      	mvns	r3, r3
 80445be:	69ba      	ldr	r2, [r7, #24]
 80445c0:	4013      	ands	r3, r2
 80445c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80445c4:	683b      	ldr	r3, [r7, #0]
 80445c6:	685b      	ldr	r3, [r3, #4]
 80445c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80445cc:	2b00      	cmp	r3, #0
 80445ce:	d003      	beq.n	80445d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80445d0:	69ba      	ldr	r2, [r7, #24]
 80445d2:	693b      	ldr	r3, [r7, #16]
 80445d4:	4313      	orrs	r3, r2
 80445d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80445d8:	4a29      	ldr	r2, [pc, #164]	; (8044680 <HAL_GPIO_Init+0x354>)
 80445da:	69bb      	ldr	r3, [r7, #24]
 80445dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80445de:	4b28      	ldr	r3, [pc, #160]	; (8044680 <HAL_GPIO_Init+0x354>)
 80445e0:	685b      	ldr	r3, [r3, #4]
 80445e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80445e4:	693b      	ldr	r3, [r7, #16]
 80445e6:	43db      	mvns	r3, r3
 80445e8:	69ba      	ldr	r2, [r7, #24]
 80445ea:	4013      	ands	r3, r2
 80445ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80445ee:	683b      	ldr	r3, [r7, #0]
 80445f0:	685b      	ldr	r3, [r3, #4]
 80445f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80445f6:	2b00      	cmp	r3, #0
 80445f8:	d003      	beq.n	8044602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80445fa:	69ba      	ldr	r2, [r7, #24]
 80445fc:	693b      	ldr	r3, [r7, #16]
 80445fe:	4313      	orrs	r3, r2
 8044600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8044602:	4a1f      	ldr	r2, [pc, #124]	; (8044680 <HAL_GPIO_Init+0x354>)
 8044604:	69bb      	ldr	r3, [r7, #24]
 8044606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8044608:	4b1d      	ldr	r3, [pc, #116]	; (8044680 <HAL_GPIO_Init+0x354>)
 804460a:	681b      	ldr	r3, [r3, #0]
 804460c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804460e:	693b      	ldr	r3, [r7, #16]
 8044610:	43db      	mvns	r3, r3
 8044612:	69ba      	ldr	r2, [r7, #24]
 8044614:	4013      	ands	r3, r2
 8044616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8044618:	683b      	ldr	r3, [r7, #0]
 804461a:	685b      	ldr	r3, [r3, #4]
 804461c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044620:	2b00      	cmp	r3, #0
 8044622:	d003      	beq.n	804462c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8044624:	69ba      	ldr	r2, [r7, #24]
 8044626:	693b      	ldr	r3, [r7, #16]
 8044628:	4313      	orrs	r3, r2
 804462a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 804462c:	4a14      	ldr	r2, [pc, #80]	; (8044680 <HAL_GPIO_Init+0x354>)
 804462e:	69bb      	ldr	r3, [r7, #24]
 8044630:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8044632:	69fb      	ldr	r3, [r7, #28]
 8044634:	3301      	adds	r3, #1
 8044636:	61fb      	str	r3, [r7, #28]
 8044638:	69fb      	ldr	r3, [r7, #28]
 804463a:	2b0f      	cmp	r3, #15
 804463c:	f67f ae86 	bls.w	804434c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8044640:	bf00      	nop
 8044642:	bf00      	nop
 8044644:	3724      	adds	r7, #36	; 0x24
 8044646:	46bd      	mov	sp, r7
 8044648:	f85d 7b04 	ldr.w	r7, [sp], #4
 804464c:	4770      	bx	lr
 804464e:	bf00      	nop
 8044650:	40023800 	.word	0x40023800
 8044654:	40013800 	.word	0x40013800
 8044658:	40020000 	.word	0x40020000
 804465c:	40020400 	.word	0x40020400
 8044660:	40020800 	.word	0x40020800
 8044664:	40020c00 	.word	0x40020c00
 8044668:	40021000 	.word	0x40021000
 804466c:	40021400 	.word	0x40021400
 8044670:	40021800 	.word	0x40021800
 8044674:	40021c00 	.word	0x40021c00
 8044678:	40022000 	.word	0x40022000
 804467c:	40022400 	.word	0x40022400
 8044680:	40013c00 	.word	0x40013c00

08044684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044684:	b480      	push	{r7}
 8044686:	b083      	sub	sp, #12
 8044688:	af00      	add	r7, sp, #0
 804468a:	6078      	str	r0, [r7, #4]
 804468c:	460b      	mov	r3, r1
 804468e:	807b      	strh	r3, [r7, #2]
 8044690:	4613      	mov	r3, r2
 8044692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044694:	787b      	ldrb	r3, [r7, #1]
 8044696:	2b00      	cmp	r3, #0
 8044698:	d003      	beq.n	80446a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804469a:	887a      	ldrh	r2, [r7, #2]
 804469c:	687b      	ldr	r3, [r7, #4]
 804469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80446a0:	e003      	b.n	80446aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80446a2:	887b      	ldrh	r3, [r7, #2]
 80446a4:	041a      	lsls	r2, r3, #16
 80446a6:	687b      	ldr	r3, [r7, #4]
 80446a8:	619a      	str	r2, [r3, #24]
}
 80446aa:	bf00      	nop
 80446ac:	370c      	adds	r7, #12
 80446ae:	46bd      	mov	sp, r7
 80446b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446b4:	4770      	bx	lr
	...

080446b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80446b8:	b580      	push	{r7, lr}
 80446ba:	b082      	sub	sp, #8
 80446bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80446be:	2300      	movs	r3, #0
 80446c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80446c2:	4b23      	ldr	r3, [pc, #140]	; (8044750 <HAL_PWREx_EnableOverDrive+0x98>)
 80446c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80446c6:	4a22      	ldr	r2, [pc, #136]	; (8044750 <HAL_PWREx_EnableOverDrive+0x98>)
 80446c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80446cc:	6413      	str	r3, [r2, #64]	; 0x40
 80446ce:	4b20      	ldr	r3, [pc, #128]	; (8044750 <HAL_PWREx_EnableOverDrive+0x98>)
 80446d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80446d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80446d6:	603b      	str	r3, [r7, #0]
 80446d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80446da:	4b1e      	ldr	r3, [pc, #120]	; (8044754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80446dc:	681b      	ldr	r3, [r3, #0]
 80446de:	4a1d      	ldr	r2, [pc, #116]	; (8044754 <HAL_PWREx_EnableOverDrive+0x9c>)
 80446e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80446e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80446e6:	f7fd fcc3 	bl	8042070 <HAL_GetTick>
 80446ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80446ec:	e009      	b.n	8044702 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80446ee:	f7fd fcbf 	bl	8042070 <HAL_GetTick>
 80446f2:	4602      	mov	r2, r0
 80446f4:	687b      	ldr	r3, [r7, #4]
 80446f6:	1ad3      	subs	r3, r2, r3
 80446f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80446fc:	d901      	bls.n	8044702 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80446fe:	2303      	movs	r3, #3
 8044700:	e022      	b.n	8044748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8044702:	4b14      	ldr	r3, [pc, #80]	; (8044754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8044704:	685b      	ldr	r3, [r3, #4]
 8044706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804470e:	d1ee      	bne.n	80446ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8044710:	4b10      	ldr	r3, [pc, #64]	; (8044754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8044712:	681b      	ldr	r3, [r3, #0]
 8044714:	4a0f      	ldr	r2, [pc, #60]	; (8044754 <HAL_PWREx_EnableOverDrive+0x9c>)
 8044716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804471a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804471c:	f7fd fca8 	bl	8042070 <HAL_GetTick>
 8044720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8044722:	e009      	b.n	8044738 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8044724:	f7fd fca4 	bl	8042070 <HAL_GetTick>
 8044728:	4602      	mov	r2, r0
 804472a:	687b      	ldr	r3, [r7, #4]
 804472c:	1ad3      	subs	r3, r2, r3
 804472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8044732:	d901      	bls.n	8044738 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8044734:	2303      	movs	r3, #3
 8044736:	e007      	b.n	8044748 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8044738:	4b06      	ldr	r3, [pc, #24]	; (8044754 <HAL_PWREx_EnableOverDrive+0x9c>)
 804473a:	685b      	ldr	r3, [r3, #4]
 804473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8044744:	d1ee      	bne.n	8044724 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8044746:	2300      	movs	r3, #0
}
 8044748:	4618      	mov	r0, r3
 804474a:	3708      	adds	r7, #8
 804474c:	46bd      	mov	sp, r7
 804474e:	bd80      	pop	{r7, pc}
 8044750:	40023800 	.word	0x40023800
 8044754:	40007000 	.word	0x40007000

08044758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8044758:	b580      	push	{r7, lr}
 804475a:	b086      	sub	sp, #24
 804475c:	af00      	add	r7, sp, #0
 804475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8044760:	2300      	movs	r3, #0
 8044762:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8044764:	687b      	ldr	r3, [r7, #4]
 8044766:	2b00      	cmp	r3, #0
 8044768:	d101      	bne.n	804476e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 804476a:	2301      	movs	r3, #1
 804476c:	e291      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804476e:	687b      	ldr	r3, [r7, #4]
 8044770:	681b      	ldr	r3, [r3, #0]
 8044772:	f003 0301 	and.w	r3, r3, #1
 8044776:	2b00      	cmp	r3, #0
 8044778:	f000 8087 	beq.w	804488a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 804477c:	4b96      	ldr	r3, [pc, #600]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804477e:	689b      	ldr	r3, [r3, #8]
 8044780:	f003 030c 	and.w	r3, r3, #12
 8044784:	2b04      	cmp	r3, #4
 8044786:	d00c      	beq.n	80447a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8044788:	4b93      	ldr	r3, [pc, #588]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804478a:	689b      	ldr	r3, [r3, #8]
 804478c:	f003 030c 	and.w	r3, r3, #12
 8044790:	2b08      	cmp	r3, #8
 8044792:	d112      	bne.n	80447ba <HAL_RCC_OscConfig+0x62>
 8044794:	4b90      	ldr	r3, [pc, #576]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044796:	685b      	ldr	r3, [r3, #4]
 8044798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804479c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80447a0:	d10b      	bne.n	80447ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80447a2:	4b8d      	ldr	r3, [pc, #564]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447a4:	681b      	ldr	r3, [r3, #0]
 80447a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80447aa:	2b00      	cmp	r3, #0
 80447ac:	d06c      	beq.n	8044888 <HAL_RCC_OscConfig+0x130>
 80447ae:	687b      	ldr	r3, [r7, #4]
 80447b0:	685b      	ldr	r3, [r3, #4]
 80447b2:	2b00      	cmp	r3, #0
 80447b4:	d168      	bne.n	8044888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80447b6:	2301      	movs	r3, #1
 80447b8:	e26b      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80447ba:	687b      	ldr	r3, [r7, #4]
 80447bc:	685b      	ldr	r3, [r3, #4]
 80447be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80447c2:	d106      	bne.n	80447d2 <HAL_RCC_OscConfig+0x7a>
 80447c4:	4b84      	ldr	r3, [pc, #528]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447c6:	681b      	ldr	r3, [r3, #0]
 80447c8:	4a83      	ldr	r2, [pc, #524]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80447ce:	6013      	str	r3, [r2, #0]
 80447d0:	e02e      	b.n	8044830 <HAL_RCC_OscConfig+0xd8>
 80447d2:	687b      	ldr	r3, [r7, #4]
 80447d4:	685b      	ldr	r3, [r3, #4]
 80447d6:	2b00      	cmp	r3, #0
 80447d8:	d10c      	bne.n	80447f4 <HAL_RCC_OscConfig+0x9c>
 80447da:	4b7f      	ldr	r3, [pc, #508]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447dc:	681b      	ldr	r3, [r3, #0]
 80447de:	4a7e      	ldr	r2, [pc, #504]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80447e4:	6013      	str	r3, [r2, #0]
 80447e6:	4b7c      	ldr	r3, [pc, #496]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447e8:	681b      	ldr	r3, [r3, #0]
 80447ea:	4a7b      	ldr	r2, [pc, #492]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80447ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80447f0:	6013      	str	r3, [r2, #0]
 80447f2:	e01d      	b.n	8044830 <HAL_RCC_OscConfig+0xd8>
 80447f4:	687b      	ldr	r3, [r7, #4]
 80447f6:	685b      	ldr	r3, [r3, #4]
 80447f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80447fc:	d10c      	bne.n	8044818 <HAL_RCC_OscConfig+0xc0>
 80447fe:	4b76      	ldr	r3, [pc, #472]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044800:	681b      	ldr	r3, [r3, #0]
 8044802:	4a75      	ldr	r2, [pc, #468]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8044808:	6013      	str	r3, [r2, #0]
 804480a:	4b73      	ldr	r3, [pc, #460]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804480c:	681b      	ldr	r3, [r3, #0]
 804480e:	4a72      	ldr	r2, [pc, #456]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044814:	6013      	str	r3, [r2, #0]
 8044816:	e00b      	b.n	8044830 <HAL_RCC_OscConfig+0xd8>
 8044818:	4b6f      	ldr	r3, [pc, #444]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804481a:	681b      	ldr	r3, [r3, #0]
 804481c:	4a6e      	ldr	r2, [pc, #440]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804481e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8044822:	6013      	str	r3, [r2, #0]
 8044824:	4b6c      	ldr	r3, [pc, #432]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044826:	681b      	ldr	r3, [r3, #0]
 8044828:	4a6b      	ldr	r2, [pc, #428]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804482e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8044830:	687b      	ldr	r3, [r7, #4]
 8044832:	685b      	ldr	r3, [r3, #4]
 8044834:	2b00      	cmp	r3, #0
 8044836:	d013      	beq.n	8044860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044838:	f7fd fc1a 	bl	8042070 <HAL_GetTick>
 804483c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804483e:	e008      	b.n	8044852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8044840:	f7fd fc16 	bl	8042070 <HAL_GetTick>
 8044844:	4602      	mov	r2, r0
 8044846:	693b      	ldr	r3, [r7, #16]
 8044848:	1ad3      	subs	r3, r2, r3
 804484a:	2b64      	cmp	r3, #100	; 0x64
 804484c:	d901      	bls.n	8044852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804484e:	2303      	movs	r3, #3
 8044850:	e21f      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044852:	4b61      	ldr	r3, [pc, #388]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044854:	681b      	ldr	r3, [r3, #0]
 8044856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804485a:	2b00      	cmp	r3, #0
 804485c:	d0f0      	beq.n	8044840 <HAL_RCC_OscConfig+0xe8>
 804485e:	e014      	b.n	804488a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044860:	f7fd fc06 	bl	8042070 <HAL_GetTick>
 8044864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8044866:	e008      	b.n	804487a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8044868:	f7fd fc02 	bl	8042070 <HAL_GetTick>
 804486c:	4602      	mov	r2, r0
 804486e:	693b      	ldr	r3, [r7, #16]
 8044870:	1ad3      	subs	r3, r2, r3
 8044872:	2b64      	cmp	r3, #100	; 0x64
 8044874:	d901      	bls.n	804487a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8044876:	2303      	movs	r3, #3
 8044878:	e20b      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804487a:	4b57      	ldr	r3, [pc, #348]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804487c:	681b      	ldr	r3, [r3, #0]
 804487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044882:	2b00      	cmp	r3, #0
 8044884:	d1f0      	bne.n	8044868 <HAL_RCC_OscConfig+0x110>
 8044886:	e000      	b.n	804488a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8044888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804488a:	687b      	ldr	r3, [r7, #4]
 804488c:	681b      	ldr	r3, [r3, #0]
 804488e:	f003 0302 	and.w	r3, r3, #2
 8044892:	2b00      	cmp	r3, #0
 8044894:	d069      	beq.n	804496a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8044896:	4b50      	ldr	r3, [pc, #320]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044898:	689b      	ldr	r3, [r3, #8]
 804489a:	f003 030c 	and.w	r3, r3, #12
 804489e:	2b00      	cmp	r3, #0
 80448a0:	d00b      	beq.n	80448ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80448a2:	4b4d      	ldr	r3, [pc, #308]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448a4:	689b      	ldr	r3, [r3, #8]
 80448a6:	f003 030c 	and.w	r3, r3, #12
 80448aa:	2b08      	cmp	r3, #8
 80448ac:	d11c      	bne.n	80448e8 <HAL_RCC_OscConfig+0x190>
 80448ae:	4b4a      	ldr	r3, [pc, #296]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448b0:	685b      	ldr	r3, [r3, #4]
 80448b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80448b6:	2b00      	cmp	r3, #0
 80448b8:	d116      	bne.n	80448e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80448ba:	4b47      	ldr	r3, [pc, #284]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448bc:	681b      	ldr	r3, [r3, #0]
 80448be:	f003 0302 	and.w	r3, r3, #2
 80448c2:	2b00      	cmp	r3, #0
 80448c4:	d005      	beq.n	80448d2 <HAL_RCC_OscConfig+0x17a>
 80448c6:	687b      	ldr	r3, [r7, #4]
 80448c8:	68db      	ldr	r3, [r3, #12]
 80448ca:	2b01      	cmp	r3, #1
 80448cc:	d001      	beq.n	80448d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80448ce:	2301      	movs	r3, #1
 80448d0:	e1df      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80448d2:	4b41      	ldr	r3, [pc, #260]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448d4:	681b      	ldr	r3, [r3, #0]
 80448d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80448da:	687b      	ldr	r3, [r7, #4]
 80448dc:	691b      	ldr	r3, [r3, #16]
 80448de:	00db      	lsls	r3, r3, #3
 80448e0:	493d      	ldr	r1, [pc, #244]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448e2:	4313      	orrs	r3, r2
 80448e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80448e6:	e040      	b.n	804496a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80448e8:	687b      	ldr	r3, [r7, #4]
 80448ea:	68db      	ldr	r3, [r3, #12]
 80448ec:	2b00      	cmp	r3, #0
 80448ee:	d023      	beq.n	8044938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80448f0:	4b39      	ldr	r3, [pc, #228]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448f2:	681b      	ldr	r3, [r3, #0]
 80448f4:	4a38      	ldr	r2, [pc, #224]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80448f6:	f043 0301 	orr.w	r3, r3, #1
 80448fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80448fc:	f7fd fbb8 	bl	8042070 <HAL_GetTick>
 8044900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044902:	e008      	b.n	8044916 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8044904:	f7fd fbb4 	bl	8042070 <HAL_GetTick>
 8044908:	4602      	mov	r2, r0
 804490a:	693b      	ldr	r3, [r7, #16]
 804490c:	1ad3      	subs	r3, r2, r3
 804490e:	2b02      	cmp	r3, #2
 8044910:	d901      	bls.n	8044916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8044912:	2303      	movs	r3, #3
 8044914:	e1bd      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044916:	4b30      	ldr	r3, [pc, #192]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044918:	681b      	ldr	r3, [r3, #0]
 804491a:	f003 0302 	and.w	r3, r3, #2
 804491e:	2b00      	cmp	r3, #0
 8044920:	d0f0      	beq.n	8044904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8044922:	4b2d      	ldr	r3, [pc, #180]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044924:	681b      	ldr	r3, [r3, #0]
 8044926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804492a:	687b      	ldr	r3, [r7, #4]
 804492c:	691b      	ldr	r3, [r3, #16]
 804492e:	00db      	lsls	r3, r3, #3
 8044930:	4929      	ldr	r1, [pc, #164]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044932:	4313      	orrs	r3, r2
 8044934:	600b      	str	r3, [r1, #0]
 8044936:	e018      	b.n	804496a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8044938:	4b27      	ldr	r3, [pc, #156]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804493a:	681b      	ldr	r3, [r3, #0]
 804493c:	4a26      	ldr	r2, [pc, #152]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 804493e:	f023 0301 	bic.w	r3, r3, #1
 8044942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044944:	f7fd fb94 	bl	8042070 <HAL_GetTick>
 8044948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804494a:	e008      	b.n	804495e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804494c:	f7fd fb90 	bl	8042070 <HAL_GetTick>
 8044950:	4602      	mov	r2, r0
 8044952:	693b      	ldr	r3, [r7, #16]
 8044954:	1ad3      	subs	r3, r2, r3
 8044956:	2b02      	cmp	r3, #2
 8044958:	d901      	bls.n	804495e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804495a:	2303      	movs	r3, #3
 804495c:	e199      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804495e:	4b1e      	ldr	r3, [pc, #120]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044960:	681b      	ldr	r3, [r3, #0]
 8044962:	f003 0302 	and.w	r3, r3, #2
 8044966:	2b00      	cmp	r3, #0
 8044968:	d1f0      	bne.n	804494c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804496a:	687b      	ldr	r3, [r7, #4]
 804496c:	681b      	ldr	r3, [r3, #0]
 804496e:	f003 0308 	and.w	r3, r3, #8
 8044972:	2b00      	cmp	r3, #0
 8044974:	d038      	beq.n	80449e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8044976:	687b      	ldr	r3, [r7, #4]
 8044978:	695b      	ldr	r3, [r3, #20]
 804497a:	2b00      	cmp	r3, #0
 804497c:	d019      	beq.n	80449b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804497e:	4b16      	ldr	r3, [pc, #88]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044982:	4a15      	ldr	r2, [pc, #84]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 8044984:	f043 0301 	orr.w	r3, r3, #1
 8044988:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804498a:	f7fd fb71 	bl	8042070 <HAL_GetTick>
 804498e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8044990:	e008      	b.n	80449a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8044992:	f7fd fb6d 	bl	8042070 <HAL_GetTick>
 8044996:	4602      	mov	r2, r0
 8044998:	693b      	ldr	r3, [r7, #16]
 804499a:	1ad3      	subs	r3, r2, r3
 804499c:	2b02      	cmp	r3, #2
 804499e:	d901      	bls.n	80449a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80449a0:	2303      	movs	r3, #3
 80449a2:	e176      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80449a4:	4b0c      	ldr	r3, [pc, #48]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80449a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80449a8:	f003 0302 	and.w	r3, r3, #2
 80449ac:	2b00      	cmp	r3, #0
 80449ae:	d0f0      	beq.n	8044992 <HAL_RCC_OscConfig+0x23a>
 80449b0:	e01a      	b.n	80449e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80449b2:	4b09      	ldr	r3, [pc, #36]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80449b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80449b6:	4a08      	ldr	r2, [pc, #32]	; (80449d8 <HAL_RCC_OscConfig+0x280>)
 80449b8:	f023 0301 	bic.w	r3, r3, #1
 80449bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80449be:	f7fd fb57 	bl	8042070 <HAL_GetTick>
 80449c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80449c4:	e00a      	b.n	80449dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80449c6:	f7fd fb53 	bl	8042070 <HAL_GetTick>
 80449ca:	4602      	mov	r2, r0
 80449cc:	693b      	ldr	r3, [r7, #16]
 80449ce:	1ad3      	subs	r3, r2, r3
 80449d0:	2b02      	cmp	r3, #2
 80449d2:	d903      	bls.n	80449dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80449d4:	2303      	movs	r3, #3
 80449d6:	e15c      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
 80449d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80449dc:	4b91      	ldr	r3, [pc, #580]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 80449de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80449e0:	f003 0302 	and.w	r3, r3, #2
 80449e4:	2b00      	cmp	r3, #0
 80449e6:	d1ee      	bne.n	80449c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80449e8:	687b      	ldr	r3, [r7, #4]
 80449ea:	681b      	ldr	r3, [r3, #0]
 80449ec:	f003 0304 	and.w	r3, r3, #4
 80449f0:	2b00      	cmp	r3, #0
 80449f2:	f000 80a4 	beq.w	8044b3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80449f6:	4b8b      	ldr	r3, [pc, #556]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 80449f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80449fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80449fe:	2b00      	cmp	r3, #0
 8044a00:	d10d      	bne.n	8044a1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8044a02:	4b88      	ldr	r3, [pc, #544]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044a06:	4a87      	ldr	r2, [pc, #540]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8044a0e:	4b85      	ldr	r3, [pc, #532]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044a16:	60bb      	str	r3, [r7, #8]
 8044a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8044a1a:	2301      	movs	r3, #1
 8044a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8044a1e:	4b82      	ldr	r3, [pc, #520]	; (8044c28 <HAL_RCC_OscConfig+0x4d0>)
 8044a20:	681b      	ldr	r3, [r3, #0]
 8044a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044a26:	2b00      	cmp	r3, #0
 8044a28:	d118      	bne.n	8044a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8044a2a:	4b7f      	ldr	r3, [pc, #508]	; (8044c28 <HAL_RCC_OscConfig+0x4d0>)
 8044a2c:	681b      	ldr	r3, [r3, #0]
 8044a2e:	4a7e      	ldr	r2, [pc, #504]	; (8044c28 <HAL_RCC_OscConfig+0x4d0>)
 8044a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8044a36:	f7fd fb1b 	bl	8042070 <HAL_GetTick>
 8044a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8044a3c:	e008      	b.n	8044a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8044a3e:	f7fd fb17 	bl	8042070 <HAL_GetTick>
 8044a42:	4602      	mov	r2, r0
 8044a44:	693b      	ldr	r3, [r7, #16]
 8044a46:	1ad3      	subs	r3, r2, r3
 8044a48:	2b64      	cmp	r3, #100	; 0x64
 8044a4a:	d901      	bls.n	8044a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8044a4c:	2303      	movs	r3, #3
 8044a4e:	e120      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8044a50:	4b75      	ldr	r3, [pc, #468]	; (8044c28 <HAL_RCC_OscConfig+0x4d0>)
 8044a52:	681b      	ldr	r3, [r3, #0]
 8044a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044a58:	2b00      	cmp	r3, #0
 8044a5a:	d0f0      	beq.n	8044a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8044a5c:	687b      	ldr	r3, [r7, #4]
 8044a5e:	689b      	ldr	r3, [r3, #8]
 8044a60:	2b01      	cmp	r3, #1
 8044a62:	d106      	bne.n	8044a72 <HAL_RCC_OscConfig+0x31a>
 8044a64:	4b6f      	ldr	r3, [pc, #444]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044a68:	4a6e      	ldr	r2, [pc, #440]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a6a:	f043 0301 	orr.w	r3, r3, #1
 8044a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8044a70:	e02d      	b.n	8044ace <HAL_RCC_OscConfig+0x376>
 8044a72:	687b      	ldr	r3, [r7, #4]
 8044a74:	689b      	ldr	r3, [r3, #8]
 8044a76:	2b00      	cmp	r3, #0
 8044a78:	d10c      	bne.n	8044a94 <HAL_RCC_OscConfig+0x33c>
 8044a7a:	4b6a      	ldr	r3, [pc, #424]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044a7e:	4a69      	ldr	r2, [pc, #420]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a80:	f023 0301 	bic.w	r3, r3, #1
 8044a84:	6713      	str	r3, [r2, #112]	; 0x70
 8044a86:	4b67      	ldr	r3, [pc, #412]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044a8a:	4a66      	ldr	r2, [pc, #408]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a8c:	f023 0304 	bic.w	r3, r3, #4
 8044a90:	6713      	str	r3, [r2, #112]	; 0x70
 8044a92:	e01c      	b.n	8044ace <HAL_RCC_OscConfig+0x376>
 8044a94:	687b      	ldr	r3, [r7, #4]
 8044a96:	689b      	ldr	r3, [r3, #8]
 8044a98:	2b05      	cmp	r3, #5
 8044a9a:	d10c      	bne.n	8044ab6 <HAL_RCC_OscConfig+0x35e>
 8044a9c:	4b61      	ldr	r3, [pc, #388]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044aa0:	4a60      	ldr	r2, [pc, #384]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044aa2:	f043 0304 	orr.w	r3, r3, #4
 8044aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8044aa8:	4b5e      	ldr	r3, [pc, #376]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044aac:	4a5d      	ldr	r2, [pc, #372]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044aae:	f043 0301 	orr.w	r3, r3, #1
 8044ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8044ab4:	e00b      	b.n	8044ace <HAL_RCC_OscConfig+0x376>
 8044ab6:	4b5b      	ldr	r3, [pc, #364]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044aba:	4a5a      	ldr	r2, [pc, #360]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044abc:	f023 0301 	bic.w	r3, r3, #1
 8044ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8044ac2:	4b58      	ldr	r3, [pc, #352]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044ac6:	4a57      	ldr	r2, [pc, #348]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044ac8:	f023 0304 	bic.w	r3, r3, #4
 8044acc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8044ace:	687b      	ldr	r3, [r7, #4]
 8044ad0:	689b      	ldr	r3, [r3, #8]
 8044ad2:	2b00      	cmp	r3, #0
 8044ad4:	d015      	beq.n	8044b02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8044ad6:	f7fd facb 	bl	8042070 <HAL_GetTick>
 8044ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044adc:	e00a      	b.n	8044af4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8044ade:	f7fd fac7 	bl	8042070 <HAL_GetTick>
 8044ae2:	4602      	mov	r2, r0
 8044ae4:	693b      	ldr	r3, [r7, #16]
 8044ae6:	1ad3      	subs	r3, r2, r3
 8044ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8044aec:	4293      	cmp	r3, r2
 8044aee:	d901      	bls.n	8044af4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8044af0:	2303      	movs	r3, #3
 8044af2:	e0ce      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8044af4:	4b4b      	ldr	r3, [pc, #300]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044af8:	f003 0302 	and.w	r3, r3, #2
 8044afc:	2b00      	cmp	r3, #0
 8044afe:	d0ee      	beq.n	8044ade <HAL_RCC_OscConfig+0x386>
 8044b00:	e014      	b.n	8044b2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8044b02:	f7fd fab5 	bl	8042070 <HAL_GetTick>
 8044b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8044b08:	e00a      	b.n	8044b20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8044b0a:	f7fd fab1 	bl	8042070 <HAL_GetTick>
 8044b0e:	4602      	mov	r2, r0
 8044b10:	693b      	ldr	r3, [r7, #16]
 8044b12:	1ad3      	subs	r3, r2, r3
 8044b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8044b18:	4293      	cmp	r3, r2
 8044b1a:	d901      	bls.n	8044b20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8044b1c:	2303      	movs	r3, #3
 8044b1e:	e0b8      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8044b20:	4b40      	ldr	r3, [pc, #256]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044b24:	f003 0302 	and.w	r3, r3, #2
 8044b28:	2b00      	cmp	r3, #0
 8044b2a:	d1ee      	bne.n	8044b0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8044b2c:	7dfb      	ldrb	r3, [r7, #23]
 8044b2e:	2b01      	cmp	r3, #1
 8044b30:	d105      	bne.n	8044b3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8044b32:	4b3c      	ldr	r3, [pc, #240]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044b36:	4a3b      	ldr	r2, [pc, #236]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8044b3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8044b3e:	687b      	ldr	r3, [r7, #4]
 8044b40:	699b      	ldr	r3, [r3, #24]
 8044b42:	2b00      	cmp	r3, #0
 8044b44:	f000 80a4 	beq.w	8044c90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8044b48:	4b36      	ldr	r3, [pc, #216]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b4a:	689b      	ldr	r3, [r3, #8]
 8044b4c:	f003 030c 	and.w	r3, r3, #12
 8044b50:	2b08      	cmp	r3, #8
 8044b52:	d06b      	beq.n	8044c2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8044b54:	687b      	ldr	r3, [r7, #4]
 8044b56:	699b      	ldr	r3, [r3, #24]
 8044b58:	2b02      	cmp	r3, #2
 8044b5a:	d149      	bne.n	8044bf0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8044b5c:	4b31      	ldr	r3, [pc, #196]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b5e:	681b      	ldr	r3, [r3, #0]
 8044b60:	4a30      	ldr	r2, [pc, #192]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8044b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044b68:	f7fd fa82 	bl	8042070 <HAL_GetTick>
 8044b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044b6e:	e008      	b.n	8044b82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8044b70:	f7fd fa7e 	bl	8042070 <HAL_GetTick>
 8044b74:	4602      	mov	r2, r0
 8044b76:	693b      	ldr	r3, [r7, #16]
 8044b78:	1ad3      	subs	r3, r2, r3
 8044b7a:	2b02      	cmp	r3, #2
 8044b7c:	d901      	bls.n	8044b82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8044b7e:	2303      	movs	r3, #3
 8044b80:	e087      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044b82:	4b28      	ldr	r3, [pc, #160]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044b84:	681b      	ldr	r3, [r3, #0]
 8044b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044b8a:	2b00      	cmp	r3, #0
 8044b8c:	d1f0      	bne.n	8044b70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8044b8e:	687b      	ldr	r3, [r7, #4]
 8044b90:	69da      	ldr	r2, [r3, #28]
 8044b92:	687b      	ldr	r3, [r7, #4]
 8044b94:	6a1b      	ldr	r3, [r3, #32]
 8044b96:	431a      	orrs	r2, r3
 8044b98:	687b      	ldr	r3, [r7, #4]
 8044b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044b9c:	019b      	lsls	r3, r3, #6
 8044b9e:	431a      	orrs	r2, r3
 8044ba0:	687b      	ldr	r3, [r7, #4]
 8044ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044ba4:	085b      	lsrs	r3, r3, #1
 8044ba6:	3b01      	subs	r3, #1
 8044ba8:	041b      	lsls	r3, r3, #16
 8044baa:	431a      	orrs	r2, r3
 8044bac:	687b      	ldr	r3, [r7, #4]
 8044bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044bb0:	061b      	lsls	r3, r3, #24
 8044bb2:	4313      	orrs	r3, r2
 8044bb4:	4a1b      	ldr	r2, [pc, #108]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044bb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8044bba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8044bbc:	4b19      	ldr	r3, [pc, #100]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044bbe:	681b      	ldr	r3, [r3, #0]
 8044bc0:	4a18      	ldr	r2, [pc, #96]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8044bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044bc8:	f7fd fa52 	bl	8042070 <HAL_GetTick>
 8044bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044bce:	e008      	b.n	8044be2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8044bd0:	f7fd fa4e 	bl	8042070 <HAL_GetTick>
 8044bd4:	4602      	mov	r2, r0
 8044bd6:	693b      	ldr	r3, [r7, #16]
 8044bd8:	1ad3      	subs	r3, r2, r3
 8044bda:	2b02      	cmp	r3, #2
 8044bdc:	d901      	bls.n	8044be2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8044bde:	2303      	movs	r3, #3
 8044be0:	e057      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044be2:	4b10      	ldr	r3, [pc, #64]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044be4:	681b      	ldr	r3, [r3, #0]
 8044be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044bea:	2b00      	cmp	r3, #0
 8044bec:	d0f0      	beq.n	8044bd0 <HAL_RCC_OscConfig+0x478>
 8044bee:	e04f      	b.n	8044c90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8044bf0:	4b0c      	ldr	r3, [pc, #48]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044bf2:	681b      	ldr	r3, [r3, #0]
 8044bf4:	4a0b      	ldr	r2, [pc, #44]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8044bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044bfc:	f7fd fa38 	bl	8042070 <HAL_GetTick>
 8044c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044c02:	e008      	b.n	8044c16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8044c04:	f7fd fa34 	bl	8042070 <HAL_GetTick>
 8044c08:	4602      	mov	r2, r0
 8044c0a:	693b      	ldr	r3, [r7, #16]
 8044c0c:	1ad3      	subs	r3, r2, r3
 8044c0e:	2b02      	cmp	r3, #2
 8044c10:	d901      	bls.n	8044c16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8044c12:	2303      	movs	r3, #3
 8044c14:	e03d      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8044c16:	4b03      	ldr	r3, [pc, #12]	; (8044c24 <HAL_RCC_OscConfig+0x4cc>)
 8044c18:	681b      	ldr	r3, [r3, #0]
 8044c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044c1e:	2b00      	cmp	r3, #0
 8044c20:	d1f0      	bne.n	8044c04 <HAL_RCC_OscConfig+0x4ac>
 8044c22:	e035      	b.n	8044c90 <HAL_RCC_OscConfig+0x538>
 8044c24:	40023800 	.word	0x40023800
 8044c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8044c2c:	4b1b      	ldr	r3, [pc, #108]	; (8044c9c <HAL_RCC_OscConfig+0x544>)
 8044c2e:	685b      	ldr	r3, [r3, #4]
 8044c30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8044c32:	687b      	ldr	r3, [r7, #4]
 8044c34:	699b      	ldr	r3, [r3, #24]
 8044c36:	2b01      	cmp	r3, #1
 8044c38:	d028      	beq.n	8044c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8044c3a:	68fb      	ldr	r3, [r7, #12]
 8044c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8044c40:	687b      	ldr	r3, [r7, #4]
 8044c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8044c44:	429a      	cmp	r2, r3
 8044c46:	d121      	bne.n	8044c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8044c48:	68fb      	ldr	r3, [r7, #12]
 8044c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8044c4e:	687b      	ldr	r3, [r7, #4]
 8044c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8044c52:	429a      	cmp	r2, r3
 8044c54:	d11a      	bne.n	8044c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8044c56:	68fa      	ldr	r2, [r7, #12]
 8044c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8044c5c:	4013      	ands	r3, r2
 8044c5e:	687a      	ldr	r2, [r7, #4]
 8044c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8044c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8044c64:	4293      	cmp	r3, r2
 8044c66:	d111      	bne.n	8044c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8044c68:	68fb      	ldr	r3, [r7, #12]
 8044c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8044c6e:	687b      	ldr	r3, [r7, #4]
 8044c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044c72:	085b      	lsrs	r3, r3, #1
 8044c74:	3b01      	subs	r3, #1
 8044c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8044c78:	429a      	cmp	r2, r3
 8044c7a:	d107      	bne.n	8044c8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8044c7c:	68fb      	ldr	r3, [r7, #12]
 8044c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8044c82:	687b      	ldr	r3, [r7, #4]
 8044c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8044c88:	429a      	cmp	r2, r3
 8044c8a:	d001      	beq.n	8044c90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8044c8c:	2301      	movs	r3, #1
 8044c8e:	e000      	b.n	8044c92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8044c90:	2300      	movs	r3, #0
}
 8044c92:	4618      	mov	r0, r3
 8044c94:	3718      	adds	r7, #24
 8044c96:	46bd      	mov	sp, r7
 8044c98:	bd80      	pop	{r7, pc}
 8044c9a:	bf00      	nop
 8044c9c:	40023800 	.word	0x40023800

08044ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8044ca0:	b580      	push	{r7, lr}
 8044ca2:	b084      	sub	sp, #16
 8044ca4:	af00      	add	r7, sp, #0
 8044ca6:	6078      	str	r0, [r7, #4]
 8044ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8044caa:	2300      	movs	r3, #0
 8044cac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8044cae:	687b      	ldr	r3, [r7, #4]
 8044cb0:	2b00      	cmp	r3, #0
 8044cb2:	d101      	bne.n	8044cb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8044cb4:	2301      	movs	r3, #1
 8044cb6:	e0d0      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8044cb8:	4b6a      	ldr	r3, [pc, #424]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044cba:	681b      	ldr	r3, [r3, #0]
 8044cbc:	f003 030f 	and.w	r3, r3, #15
 8044cc0:	683a      	ldr	r2, [r7, #0]
 8044cc2:	429a      	cmp	r2, r3
 8044cc4:	d910      	bls.n	8044ce8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8044cc6:	4b67      	ldr	r3, [pc, #412]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044cc8:	681b      	ldr	r3, [r3, #0]
 8044cca:	f023 020f 	bic.w	r2, r3, #15
 8044cce:	4965      	ldr	r1, [pc, #404]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044cd0:	683b      	ldr	r3, [r7, #0]
 8044cd2:	4313      	orrs	r3, r2
 8044cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8044cd6:	4b63      	ldr	r3, [pc, #396]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044cd8:	681b      	ldr	r3, [r3, #0]
 8044cda:	f003 030f 	and.w	r3, r3, #15
 8044cde:	683a      	ldr	r2, [r7, #0]
 8044ce0:	429a      	cmp	r2, r3
 8044ce2:	d001      	beq.n	8044ce8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8044ce4:	2301      	movs	r3, #1
 8044ce6:	e0b8      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8044ce8:	687b      	ldr	r3, [r7, #4]
 8044cea:	681b      	ldr	r3, [r3, #0]
 8044cec:	f003 0302 	and.w	r3, r3, #2
 8044cf0:	2b00      	cmp	r3, #0
 8044cf2:	d020      	beq.n	8044d36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8044cf4:	687b      	ldr	r3, [r7, #4]
 8044cf6:	681b      	ldr	r3, [r3, #0]
 8044cf8:	f003 0304 	and.w	r3, r3, #4
 8044cfc:	2b00      	cmp	r3, #0
 8044cfe:	d005      	beq.n	8044d0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8044d00:	4b59      	ldr	r3, [pc, #356]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d02:	689b      	ldr	r3, [r3, #8]
 8044d04:	4a58      	ldr	r2, [pc, #352]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8044d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8044d0c:	687b      	ldr	r3, [r7, #4]
 8044d0e:	681b      	ldr	r3, [r3, #0]
 8044d10:	f003 0308 	and.w	r3, r3, #8
 8044d14:	2b00      	cmp	r3, #0
 8044d16:	d005      	beq.n	8044d24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8044d18:	4b53      	ldr	r3, [pc, #332]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d1a:	689b      	ldr	r3, [r3, #8]
 8044d1c:	4a52      	ldr	r2, [pc, #328]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8044d22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8044d24:	4b50      	ldr	r3, [pc, #320]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d26:	689b      	ldr	r3, [r3, #8]
 8044d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8044d2c:	687b      	ldr	r3, [r7, #4]
 8044d2e:	689b      	ldr	r3, [r3, #8]
 8044d30:	494d      	ldr	r1, [pc, #308]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d32:	4313      	orrs	r3, r2
 8044d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8044d36:	687b      	ldr	r3, [r7, #4]
 8044d38:	681b      	ldr	r3, [r3, #0]
 8044d3a:	f003 0301 	and.w	r3, r3, #1
 8044d3e:	2b00      	cmp	r3, #0
 8044d40:	d040      	beq.n	8044dc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8044d42:	687b      	ldr	r3, [r7, #4]
 8044d44:	685b      	ldr	r3, [r3, #4]
 8044d46:	2b01      	cmp	r3, #1
 8044d48:	d107      	bne.n	8044d5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8044d4a:	4b47      	ldr	r3, [pc, #284]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d4c:	681b      	ldr	r3, [r3, #0]
 8044d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044d52:	2b00      	cmp	r3, #0
 8044d54:	d115      	bne.n	8044d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8044d56:	2301      	movs	r3, #1
 8044d58:	e07f      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8044d5a:	687b      	ldr	r3, [r7, #4]
 8044d5c:	685b      	ldr	r3, [r3, #4]
 8044d5e:	2b02      	cmp	r3, #2
 8044d60:	d107      	bne.n	8044d72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8044d62:	4b41      	ldr	r3, [pc, #260]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d64:	681b      	ldr	r3, [r3, #0]
 8044d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044d6a:	2b00      	cmp	r3, #0
 8044d6c:	d109      	bne.n	8044d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8044d6e:	2301      	movs	r3, #1
 8044d70:	e073      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8044d72:	4b3d      	ldr	r3, [pc, #244]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d74:	681b      	ldr	r3, [r3, #0]
 8044d76:	f003 0302 	and.w	r3, r3, #2
 8044d7a:	2b00      	cmp	r3, #0
 8044d7c:	d101      	bne.n	8044d82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8044d7e:	2301      	movs	r3, #1
 8044d80:	e06b      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8044d82:	4b39      	ldr	r3, [pc, #228]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d84:	689b      	ldr	r3, [r3, #8]
 8044d86:	f023 0203 	bic.w	r2, r3, #3
 8044d8a:	687b      	ldr	r3, [r7, #4]
 8044d8c:	685b      	ldr	r3, [r3, #4]
 8044d8e:	4936      	ldr	r1, [pc, #216]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044d90:	4313      	orrs	r3, r2
 8044d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044d94:	f7fd f96c 	bl	8042070 <HAL_GetTick>
 8044d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044d9a:	e00a      	b.n	8044db2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8044d9c:	f7fd f968 	bl	8042070 <HAL_GetTick>
 8044da0:	4602      	mov	r2, r0
 8044da2:	68fb      	ldr	r3, [r7, #12]
 8044da4:	1ad3      	subs	r3, r2, r3
 8044da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8044daa:	4293      	cmp	r3, r2
 8044dac:	d901      	bls.n	8044db2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8044dae:	2303      	movs	r3, #3
 8044db0:	e053      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8044db2:	4b2d      	ldr	r3, [pc, #180]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044db4:	689b      	ldr	r3, [r3, #8]
 8044db6:	f003 020c 	and.w	r2, r3, #12
 8044dba:	687b      	ldr	r3, [r7, #4]
 8044dbc:	685b      	ldr	r3, [r3, #4]
 8044dbe:	009b      	lsls	r3, r3, #2
 8044dc0:	429a      	cmp	r2, r3
 8044dc2:	d1eb      	bne.n	8044d9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8044dc4:	4b27      	ldr	r3, [pc, #156]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044dc6:	681b      	ldr	r3, [r3, #0]
 8044dc8:	f003 030f 	and.w	r3, r3, #15
 8044dcc:	683a      	ldr	r2, [r7, #0]
 8044dce:	429a      	cmp	r2, r3
 8044dd0:	d210      	bcs.n	8044df4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8044dd2:	4b24      	ldr	r3, [pc, #144]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044dd4:	681b      	ldr	r3, [r3, #0]
 8044dd6:	f023 020f 	bic.w	r2, r3, #15
 8044dda:	4922      	ldr	r1, [pc, #136]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044ddc:	683b      	ldr	r3, [r7, #0]
 8044dde:	4313      	orrs	r3, r2
 8044de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8044de2:	4b20      	ldr	r3, [pc, #128]	; (8044e64 <HAL_RCC_ClockConfig+0x1c4>)
 8044de4:	681b      	ldr	r3, [r3, #0]
 8044de6:	f003 030f 	and.w	r3, r3, #15
 8044dea:	683a      	ldr	r2, [r7, #0]
 8044dec:	429a      	cmp	r2, r3
 8044dee:	d001      	beq.n	8044df4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8044df0:	2301      	movs	r3, #1
 8044df2:	e032      	b.n	8044e5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8044df4:	687b      	ldr	r3, [r7, #4]
 8044df6:	681b      	ldr	r3, [r3, #0]
 8044df8:	f003 0304 	and.w	r3, r3, #4
 8044dfc:	2b00      	cmp	r3, #0
 8044dfe:	d008      	beq.n	8044e12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8044e00:	4b19      	ldr	r3, [pc, #100]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044e02:	689b      	ldr	r3, [r3, #8]
 8044e04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8044e08:	687b      	ldr	r3, [r7, #4]
 8044e0a:	68db      	ldr	r3, [r3, #12]
 8044e0c:	4916      	ldr	r1, [pc, #88]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044e0e:	4313      	orrs	r3, r2
 8044e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8044e12:	687b      	ldr	r3, [r7, #4]
 8044e14:	681b      	ldr	r3, [r3, #0]
 8044e16:	f003 0308 	and.w	r3, r3, #8
 8044e1a:	2b00      	cmp	r3, #0
 8044e1c:	d009      	beq.n	8044e32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8044e1e:	4b12      	ldr	r3, [pc, #72]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044e20:	689b      	ldr	r3, [r3, #8]
 8044e22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8044e26:	687b      	ldr	r3, [r7, #4]
 8044e28:	691b      	ldr	r3, [r3, #16]
 8044e2a:	00db      	lsls	r3, r3, #3
 8044e2c:	490e      	ldr	r1, [pc, #56]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044e2e:	4313      	orrs	r3, r2
 8044e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8044e32:	f000 f821 	bl	8044e78 <HAL_RCC_GetSysClockFreq>
 8044e36:	4602      	mov	r2, r0
 8044e38:	4b0b      	ldr	r3, [pc, #44]	; (8044e68 <HAL_RCC_ClockConfig+0x1c8>)
 8044e3a:	689b      	ldr	r3, [r3, #8]
 8044e3c:	091b      	lsrs	r3, r3, #4
 8044e3e:	f003 030f 	and.w	r3, r3, #15
 8044e42:	490a      	ldr	r1, [pc, #40]	; (8044e6c <HAL_RCC_ClockConfig+0x1cc>)
 8044e44:	5ccb      	ldrb	r3, [r1, r3]
 8044e46:	fa22 f303 	lsr.w	r3, r2, r3
 8044e4a:	4a09      	ldr	r2, [pc, #36]	; (8044e70 <HAL_RCC_ClockConfig+0x1d0>)
 8044e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8044e4e:	4b09      	ldr	r3, [pc, #36]	; (8044e74 <HAL_RCC_ClockConfig+0x1d4>)
 8044e50:	681b      	ldr	r3, [r3, #0]
 8044e52:	4618      	mov	r0, r3
 8044e54:	f7fc fdce 	bl	80419f4 <HAL_InitTick>

  return HAL_OK;
 8044e58:	2300      	movs	r3, #0
}
 8044e5a:	4618      	mov	r0, r3
 8044e5c:	3710      	adds	r7, #16
 8044e5e:	46bd      	mov	sp, r7
 8044e60:	bd80      	pop	{r7, pc}
 8044e62:	bf00      	nop
 8044e64:	40023c00 	.word	0x40023c00
 8044e68:	40023800 	.word	0x40023800
 8044e6c:	0805d7f0 	.word	0x0805d7f0
 8044e70:	20000004 	.word	0x20000004
 8044e74:	20000008 	.word	0x20000008

08044e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8044e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8044e7c:	b090      	sub	sp, #64	; 0x40
 8044e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8044e80:	2300      	movs	r3, #0
 8044e82:	637b      	str	r3, [r7, #52]	; 0x34
 8044e84:	2300      	movs	r3, #0
 8044e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8044e88:	2300      	movs	r3, #0
 8044e8a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8044e8c:	2300      	movs	r3, #0
 8044e8e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8044e90:	4b59      	ldr	r3, [pc, #356]	; (8044ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8044e92:	689b      	ldr	r3, [r3, #8]
 8044e94:	f003 030c 	and.w	r3, r3, #12
 8044e98:	2b08      	cmp	r3, #8
 8044e9a:	d00d      	beq.n	8044eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8044e9c:	2b08      	cmp	r3, #8
 8044e9e:	f200 80a1 	bhi.w	8044fe4 <HAL_RCC_GetSysClockFreq+0x16c>
 8044ea2:	2b00      	cmp	r3, #0
 8044ea4:	d002      	beq.n	8044eac <HAL_RCC_GetSysClockFreq+0x34>
 8044ea6:	2b04      	cmp	r3, #4
 8044ea8:	d003      	beq.n	8044eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8044eaa:	e09b      	b.n	8044fe4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8044eac:	4b53      	ldr	r3, [pc, #332]	; (8044ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8044eae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8044eb0:	e09b      	b.n	8044fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8044eb2:	4b53      	ldr	r3, [pc, #332]	; (8045000 <HAL_RCC_GetSysClockFreq+0x188>)
 8044eb4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8044eb6:	e098      	b.n	8044fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8044eb8:	4b4f      	ldr	r3, [pc, #316]	; (8044ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8044eba:	685b      	ldr	r3, [r3, #4]
 8044ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8044ec0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8044ec2:	4b4d      	ldr	r3, [pc, #308]	; (8044ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8044ec4:	685b      	ldr	r3, [r3, #4]
 8044ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8044eca:	2b00      	cmp	r3, #0
 8044ecc:	d028      	beq.n	8044f20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044ece:	4b4a      	ldr	r3, [pc, #296]	; (8044ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8044ed0:	685b      	ldr	r3, [r3, #4]
 8044ed2:	099b      	lsrs	r3, r3, #6
 8044ed4:	2200      	movs	r2, #0
 8044ed6:	623b      	str	r3, [r7, #32]
 8044ed8:	627a      	str	r2, [r7, #36]	; 0x24
 8044eda:	6a3b      	ldr	r3, [r7, #32]
 8044edc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8044ee0:	2100      	movs	r1, #0
 8044ee2:	4b47      	ldr	r3, [pc, #284]	; (8045000 <HAL_RCC_GetSysClockFreq+0x188>)
 8044ee4:	fb03 f201 	mul.w	r2, r3, r1
 8044ee8:	2300      	movs	r3, #0
 8044eea:	fb00 f303 	mul.w	r3, r0, r3
 8044eee:	4413      	add	r3, r2
 8044ef0:	4a43      	ldr	r2, [pc, #268]	; (8045000 <HAL_RCC_GetSysClockFreq+0x188>)
 8044ef2:	fba0 1202 	umull	r1, r2, r0, r2
 8044ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8044ef8:	460a      	mov	r2, r1
 8044efa:	62ba      	str	r2, [r7, #40]	; 0x28
 8044efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8044efe:	4413      	add	r3, r2
 8044f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8044f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044f04:	2200      	movs	r2, #0
 8044f06:	61bb      	str	r3, [r7, #24]
 8044f08:	61fa      	str	r2, [r7, #28]
 8044f0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8044f0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8044f12:	f7fb f9d5 	bl	80402c0 <__aeabi_uldivmod>
 8044f16:	4602      	mov	r2, r0
 8044f18:	460b      	mov	r3, r1
 8044f1a:	4613      	mov	r3, r2
 8044f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8044f1e:	e053      	b.n	8044fc8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8044f20:	4b35      	ldr	r3, [pc, #212]	; (8044ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8044f22:	685b      	ldr	r3, [r3, #4]
 8044f24:	099b      	lsrs	r3, r3, #6
 8044f26:	2200      	movs	r2, #0
 8044f28:	613b      	str	r3, [r7, #16]
 8044f2a:	617a      	str	r2, [r7, #20]
 8044f2c:	693b      	ldr	r3, [r7, #16]
 8044f2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8044f32:	f04f 0b00 	mov.w	fp, #0
 8044f36:	4652      	mov	r2, sl
 8044f38:	465b      	mov	r3, fp
 8044f3a:	f04f 0000 	mov.w	r0, #0
 8044f3e:	f04f 0100 	mov.w	r1, #0
 8044f42:	0159      	lsls	r1, r3, #5
 8044f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8044f48:	0150      	lsls	r0, r2, #5
 8044f4a:	4602      	mov	r2, r0
 8044f4c:	460b      	mov	r3, r1
 8044f4e:	ebb2 080a 	subs.w	r8, r2, sl
 8044f52:	eb63 090b 	sbc.w	r9, r3, fp
 8044f56:	f04f 0200 	mov.w	r2, #0
 8044f5a:	f04f 0300 	mov.w	r3, #0
 8044f5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8044f62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8044f66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8044f6a:	ebb2 0408 	subs.w	r4, r2, r8
 8044f6e:	eb63 0509 	sbc.w	r5, r3, r9
 8044f72:	f04f 0200 	mov.w	r2, #0
 8044f76:	f04f 0300 	mov.w	r3, #0
 8044f7a:	00eb      	lsls	r3, r5, #3
 8044f7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8044f80:	00e2      	lsls	r2, r4, #3
 8044f82:	4614      	mov	r4, r2
 8044f84:	461d      	mov	r5, r3
 8044f86:	eb14 030a 	adds.w	r3, r4, sl
 8044f8a:	603b      	str	r3, [r7, #0]
 8044f8c:	eb45 030b 	adc.w	r3, r5, fp
 8044f90:	607b      	str	r3, [r7, #4]
 8044f92:	f04f 0200 	mov.w	r2, #0
 8044f96:	f04f 0300 	mov.w	r3, #0
 8044f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8044f9e:	4629      	mov	r1, r5
 8044fa0:	028b      	lsls	r3, r1, #10
 8044fa2:	4621      	mov	r1, r4
 8044fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8044fa8:	4621      	mov	r1, r4
 8044faa:	028a      	lsls	r2, r1, #10
 8044fac:	4610      	mov	r0, r2
 8044fae:	4619      	mov	r1, r3
 8044fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8044fb2:	2200      	movs	r2, #0
 8044fb4:	60bb      	str	r3, [r7, #8]
 8044fb6:	60fa      	str	r2, [r7, #12]
 8044fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8044fbc:	f7fb f980 	bl	80402c0 <__aeabi_uldivmod>
 8044fc0:	4602      	mov	r2, r0
 8044fc2:	460b      	mov	r3, r1
 8044fc4:	4613      	mov	r3, r2
 8044fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8044fc8:	4b0b      	ldr	r3, [pc, #44]	; (8044ff8 <HAL_RCC_GetSysClockFreq+0x180>)
 8044fca:	685b      	ldr	r3, [r3, #4]
 8044fcc:	0c1b      	lsrs	r3, r3, #16
 8044fce:	f003 0303 	and.w	r3, r3, #3
 8044fd2:	3301      	adds	r3, #1
 8044fd4:	005b      	lsls	r3, r3, #1
 8044fd6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8044fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8044fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8044fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8044fe0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8044fe2:	e002      	b.n	8044fea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8044fe4:	4b05      	ldr	r3, [pc, #20]	; (8044ffc <HAL_RCC_GetSysClockFreq+0x184>)
 8044fe6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8044fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8044fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8044fec:	4618      	mov	r0, r3
 8044fee:	3740      	adds	r7, #64	; 0x40
 8044ff0:	46bd      	mov	sp, r7
 8044ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8044ff6:	bf00      	nop
 8044ff8:	40023800 	.word	0x40023800
 8044ffc:	00f42400 	.word	0x00f42400
 8045000:	017d7840 	.word	0x017d7840

08045004 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8045004:	b480      	push	{r7}
 8045006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8045008:	4b03      	ldr	r3, [pc, #12]	; (8045018 <HAL_RCC_GetHCLKFreq+0x14>)
 804500a:	681b      	ldr	r3, [r3, #0]
}
 804500c:	4618      	mov	r0, r3
 804500e:	46bd      	mov	sp, r7
 8045010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045014:	4770      	bx	lr
 8045016:	bf00      	nop
 8045018:	20000004 	.word	0x20000004

0804501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804501c:	b580      	push	{r7, lr}
 804501e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8045020:	f7ff fff0 	bl	8045004 <HAL_RCC_GetHCLKFreq>
 8045024:	4602      	mov	r2, r0
 8045026:	4b05      	ldr	r3, [pc, #20]	; (804503c <HAL_RCC_GetPCLK1Freq+0x20>)
 8045028:	689b      	ldr	r3, [r3, #8]
 804502a:	0a9b      	lsrs	r3, r3, #10
 804502c:	f003 0307 	and.w	r3, r3, #7
 8045030:	4903      	ldr	r1, [pc, #12]	; (8045040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8045032:	5ccb      	ldrb	r3, [r1, r3]
 8045034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8045038:	4618      	mov	r0, r3
 804503a:	bd80      	pop	{r7, pc}
 804503c:	40023800 	.word	0x40023800
 8045040:	0805d800 	.word	0x0805d800

08045044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8045044:	b580      	push	{r7, lr}
 8045046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8045048:	f7ff ffdc 	bl	8045004 <HAL_RCC_GetHCLKFreq>
 804504c:	4602      	mov	r2, r0
 804504e:	4b05      	ldr	r3, [pc, #20]	; (8045064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8045050:	689b      	ldr	r3, [r3, #8]
 8045052:	0b5b      	lsrs	r3, r3, #13
 8045054:	f003 0307 	and.w	r3, r3, #7
 8045058:	4903      	ldr	r1, [pc, #12]	; (8045068 <HAL_RCC_GetPCLK2Freq+0x24>)
 804505a:	5ccb      	ldrb	r3, [r1, r3]
 804505c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8045060:	4618      	mov	r0, r3
 8045062:	bd80      	pop	{r7, pc}
 8045064:	40023800 	.word	0x40023800
 8045068:	0805d800 	.word	0x0805d800

0804506c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 804506c:	b480      	push	{r7}
 804506e:	b083      	sub	sp, #12
 8045070:	af00      	add	r7, sp, #0
 8045072:	6078      	str	r0, [r7, #4]
 8045074:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8045076:	687b      	ldr	r3, [r7, #4]
 8045078:	220f      	movs	r2, #15
 804507a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 804507c:	4b12      	ldr	r3, [pc, #72]	; (80450c8 <HAL_RCC_GetClockConfig+0x5c>)
 804507e:	689b      	ldr	r3, [r3, #8]
 8045080:	f003 0203 	and.w	r2, r3, #3
 8045084:	687b      	ldr	r3, [r7, #4]
 8045086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8045088:	4b0f      	ldr	r3, [pc, #60]	; (80450c8 <HAL_RCC_GetClockConfig+0x5c>)
 804508a:	689b      	ldr	r3, [r3, #8]
 804508c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8045090:	687b      	ldr	r3, [r7, #4]
 8045092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8045094:	4b0c      	ldr	r3, [pc, #48]	; (80450c8 <HAL_RCC_GetClockConfig+0x5c>)
 8045096:	689b      	ldr	r3, [r3, #8]
 8045098:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 804509c:	687b      	ldr	r3, [r7, #4]
 804509e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80450a0:	4b09      	ldr	r3, [pc, #36]	; (80450c8 <HAL_RCC_GetClockConfig+0x5c>)
 80450a2:	689b      	ldr	r3, [r3, #8]
 80450a4:	08db      	lsrs	r3, r3, #3
 80450a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80450aa:	687b      	ldr	r3, [r7, #4]
 80450ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80450ae:	4b07      	ldr	r3, [pc, #28]	; (80450cc <HAL_RCC_GetClockConfig+0x60>)
 80450b0:	681b      	ldr	r3, [r3, #0]
 80450b2:	f003 020f 	and.w	r2, r3, #15
 80450b6:	683b      	ldr	r3, [r7, #0]
 80450b8:	601a      	str	r2, [r3, #0]
}
 80450ba:	bf00      	nop
 80450bc:	370c      	adds	r7, #12
 80450be:	46bd      	mov	sp, r7
 80450c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80450c4:	4770      	bx	lr
 80450c6:	bf00      	nop
 80450c8:	40023800 	.word	0x40023800
 80450cc:	40023c00 	.word	0x40023c00

080450d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80450d0:	b580      	push	{r7, lr}
 80450d2:	b088      	sub	sp, #32
 80450d4:	af00      	add	r7, sp, #0
 80450d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80450d8:	2300      	movs	r3, #0
 80450da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80450dc:	2300      	movs	r3, #0
 80450de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80450e0:	2300      	movs	r3, #0
 80450e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80450e4:	2300      	movs	r3, #0
 80450e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80450e8:	2300      	movs	r3, #0
 80450ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80450ec:	687b      	ldr	r3, [r7, #4]
 80450ee:	681b      	ldr	r3, [r3, #0]
 80450f0:	f003 0301 	and.w	r3, r3, #1
 80450f4:	2b00      	cmp	r3, #0
 80450f6:	d012      	beq.n	804511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80450f8:	4b69      	ldr	r3, [pc, #420]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80450fa:	689b      	ldr	r3, [r3, #8]
 80450fc:	4a68      	ldr	r2, [pc, #416]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80450fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8045102:	6093      	str	r3, [r2, #8]
 8045104:	4b66      	ldr	r3, [pc, #408]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045106:	689a      	ldr	r2, [r3, #8]
 8045108:	687b      	ldr	r3, [r7, #4]
 804510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804510c:	4964      	ldr	r1, [pc, #400]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804510e:	4313      	orrs	r3, r2
 8045110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8045112:	687b      	ldr	r3, [r7, #4]
 8045114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045116:	2b00      	cmp	r3, #0
 8045118:	d101      	bne.n	804511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 804511a:	2301      	movs	r3, #1
 804511c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 804511e:	687b      	ldr	r3, [r7, #4]
 8045120:	681b      	ldr	r3, [r3, #0]
 8045122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8045126:	2b00      	cmp	r3, #0
 8045128:	d017      	beq.n	804515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804512a:	4b5d      	ldr	r3, [pc, #372]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8045130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8045134:	687b      	ldr	r3, [r7, #4]
 8045136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045138:	4959      	ldr	r1, [pc, #356]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804513a:	4313      	orrs	r3, r2
 804513c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8045140:	687b      	ldr	r3, [r7, #4]
 8045142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8045148:	d101      	bne.n	804514e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 804514a:	2301      	movs	r3, #1
 804514c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 804514e:	687b      	ldr	r3, [r7, #4]
 8045150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045152:	2b00      	cmp	r3, #0
 8045154:	d101      	bne.n	804515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8045156:	2301      	movs	r3, #1
 8045158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 804515a:	687b      	ldr	r3, [r7, #4]
 804515c:	681b      	ldr	r3, [r3, #0]
 804515e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8045162:	2b00      	cmp	r3, #0
 8045164:	d017      	beq.n	8045196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8045166:	4b4e      	ldr	r3, [pc, #312]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804516c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8045170:	687b      	ldr	r3, [r7, #4]
 8045172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045174:	494a      	ldr	r1, [pc, #296]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045176:	4313      	orrs	r3, r2
 8045178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 804517c:	687b      	ldr	r3, [r7, #4]
 804517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8045184:	d101      	bne.n	804518a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8045186:	2301      	movs	r3, #1
 8045188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 804518a:	687b      	ldr	r3, [r7, #4]
 804518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804518e:	2b00      	cmp	r3, #0
 8045190:	d101      	bne.n	8045196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8045192:	2301      	movs	r3, #1
 8045194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8045196:	687b      	ldr	r3, [r7, #4]
 8045198:	681b      	ldr	r3, [r3, #0]
 804519a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804519e:	2b00      	cmp	r3, #0
 80451a0:	d001      	beq.n	80451a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80451a2:	2301      	movs	r3, #1
 80451a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80451a6:	687b      	ldr	r3, [r7, #4]
 80451a8:	681b      	ldr	r3, [r3, #0]
 80451aa:	f003 0320 	and.w	r3, r3, #32
 80451ae:	2b00      	cmp	r3, #0
 80451b0:	f000 808b 	beq.w	80452ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80451b4:	4b3a      	ldr	r3, [pc, #232]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80451b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80451b8:	4a39      	ldr	r2, [pc, #228]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80451ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80451be:	6413      	str	r3, [r2, #64]	; 0x40
 80451c0:	4b37      	ldr	r3, [pc, #220]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80451c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80451c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80451c8:	60bb      	str	r3, [r7, #8]
 80451ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80451cc:	4b35      	ldr	r3, [pc, #212]	; (80452a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80451ce:	681b      	ldr	r3, [r3, #0]
 80451d0:	4a34      	ldr	r2, [pc, #208]	; (80452a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80451d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80451d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80451d8:	f7fc ff4a 	bl	8042070 <HAL_GetTick>
 80451dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80451de:	e008      	b.n	80451f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80451e0:	f7fc ff46 	bl	8042070 <HAL_GetTick>
 80451e4:	4602      	mov	r2, r0
 80451e6:	697b      	ldr	r3, [r7, #20]
 80451e8:	1ad3      	subs	r3, r2, r3
 80451ea:	2b64      	cmp	r3, #100	; 0x64
 80451ec:	d901      	bls.n	80451f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80451ee:	2303      	movs	r3, #3
 80451f0:	e357      	b.n	80458a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80451f2:	4b2c      	ldr	r3, [pc, #176]	; (80452a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80451f4:	681b      	ldr	r3, [r3, #0]
 80451f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80451fa:	2b00      	cmp	r3, #0
 80451fc:	d0f0      	beq.n	80451e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80451fe:	4b28      	ldr	r3, [pc, #160]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8045208:	693b      	ldr	r3, [r7, #16]
 804520a:	2b00      	cmp	r3, #0
 804520c:	d035      	beq.n	804527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 804520e:	687b      	ldr	r3, [r7, #4]
 8045210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045216:	693a      	ldr	r2, [r7, #16]
 8045218:	429a      	cmp	r2, r3
 804521a:	d02e      	beq.n	804527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 804521c:	4b20      	ldr	r3, [pc, #128]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8045224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8045226:	4b1e      	ldr	r3, [pc, #120]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804522a:	4a1d      	ldr	r2, [pc, #116]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8045230:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8045232:	4b1b      	ldr	r3, [pc, #108]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045236:	4a1a      	ldr	r2, [pc, #104]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804523c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 804523e:	4a18      	ldr	r2, [pc, #96]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045240:	693b      	ldr	r3, [r7, #16]
 8045242:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8045244:	4b16      	ldr	r3, [pc, #88]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045248:	f003 0301 	and.w	r3, r3, #1
 804524c:	2b01      	cmp	r3, #1
 804524e:	d114      	bne.n	804527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8045250:	f7fc ff0e 	bl	8042070 <HAL_GetTick>
 8045254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8045256:	e00a      	b.n	804526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8045258:	f7fc ff0a 	bl	8042070 <HAL_GetTick>
 804525c:	4602      	mov	r2, r0
 804525e:	697b      	ldr	r3, [r7, #20]
 8045260:	1ad3      	subs	r3, r2, r3
 8045262:	f241 3288 	movw	r2, #5000	; 0x1388
 8045266:	4293      	cmp	r3, r2
 8045268:	d901      	bls.n	804526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 804526a:	2303      	movs	r3, #3
 804526c:	e319      	b.n	80458a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 804526e:	4b0c      	ldr	r3, [pc, #48]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8045270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045272:	f003 0302 	and.w	r3, r3, #2
 8045276:	2b00      	cmp	r3, #0
 8045278:	d0ee      	beq.n	8045258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804527a:	687b      	ldr	r3, [r7, #4]
 804527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8045286:	d111      	bne.n	80452ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8045288:	4b05      	ldr	r3, [pc, #20]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804528a:	689b      	ldr	r3, [r3, #8]
 804528c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8045290:	687b      	ldr	r3, [r7, #4]
 8045292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8045294:	4b04      	ldr	r3, [pc, #16]	; (80452a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8045296:	400b      	ands	r3, r1
 8045298:	4901      	ldr	r1, [pc, #4]	; (80452a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804529a:	4313      	orrs	r3, r2
 804529c:	608b      	str	r3, [r1, #8]
 804529e:	e00b      	b.n	80452b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80452a0:	40023800 	.word	0x40023800
 80452a4:	40007000 	.word	0x40007000
 80452a8:	0ffffcff 	.word	0x0ffffcff
 80452ac:	4baa      	ldr	r3, [pc, #680]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452ae:	689b      	ldr	r3, [r3, #8]
 80452b0:	4aa9      	ldr	r2, [pc, #676]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80452b6:	6093      	str	r3, [r2, #8]
 80452b8:	4ba7      	ldr	r3, [pc, #668]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80452bc:	687b      	ldr	r3, [r7, #4]
 80452be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80452c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80452c4:	49a4      	ldr	r1, [pc, #656]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452c6:	4313      	orrs	r3, r2
 80452c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80452ca:	687b      	ldr	r3, [r7, #4]
 80452cc:	681b      	ldr	r3, [r3, #0]
 80452ce:	f003 0310 	and.w	r3, r3, #16
 80452d2:	2b00      	cmp	r3, #0
 80452d4:	d010      	beq.n	80452f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80452d6:	4ba0      	ldr	r3, [pc, #640]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80452dc:	4a9e      	ldr	r2, [pc, #632]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80452e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80452e6:	4b9c      	ldr	r3, [pc, #624]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80452ec:	687b      	ldr	r3, [r7, #4]
 80452ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80452f0:	4999      	ldr	r1, [pc, #612]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80452f2:	4313      	orrs	r3, r2
 80452f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80452f8:	687b      	ldr	r3, [r7, #4]
 80452fa:	681b      	ldr	r3, [r3, #0]
 80452fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8045300:	2b00      	cmp	r3, #0
 8045302:	d00a      	beq.n	804531a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8045304:	4b94      	ldr	r3, [pc, #592]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804530a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804530e:	687b      	ldr	r3, [r7, #4]
 8045310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8045312:	4991      	ldr	r1, [pc, #580]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045314:	4313      	orrs	r3, r2
 8045316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804531a:	687b      	ldr	r3, [r7, #4]
 804531c:	681b      	ldr	r3, [r3, #0]
 804531e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8045322:	2b00      	cmp	r3, #0
 8045324:	d00a      	beq.n	804533c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8045326:	4b8c      	ldr	r3, [pc, #560]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804532c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8045330:	687b      	ldr	r3, [r7, #4]
 8045332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8045334:	4988      	ldr	r1, [pc, #544]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045336:	4313      	orrs	r3, r2
 8045338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 804533c:	687b      	ldr	r3, [r7, #4]
 804533e:	681b      	ldr	r3, [r3, #0]
 8045340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045344:	2b00      	cmp	r3, #0
 8045346:	d00a      	beq.n	804535e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8045348:	4b83      	ldr	r3, [pc, #524]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804534e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8045352:	687b      	ldr	r3, [r7, #4]
 8045354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8045356:	4980      	ldr	r1, [pc, #512]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045358:	4313      	orrs	r3, r2
 804535a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804535e:	687b      	ldr	r3, [r7, #4]
 8045360:	681b      	ldr	r3, [r3, #0]
 8045362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045366:	2b00      	cmp	r3, #0
 8045368:	d00a      	beq.n	8045380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 804536a:	4b7b      	ldr	r3, [pc, #492]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8045374:	687b      	ldr	r3, [r7, #4]
 8045376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045378:	4977      	ldr	r1, [pc, #476]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804537a:	4313      	orrs	r3, r2
 804537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8045380:	687b      	ldr	r3, [r7, #4]
 8045382:	681b      	ldr	r3, [r3, #0]
 8045384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045388:	2b00      	cmp	r3, #0
 804538a:	d00a      	beq.n	80453a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804538c:	4b72      	ldr	r3, [pc, #456]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045392:	f023 0203 	bic.w	r2, r3, #3
 8045396:	687b      	ldr	r3, [r7, #4]
 8045398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804539a:	496f      	ldr	r1, [pc, #444]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804539c:	4313      	orrs	r3, r2
 804539e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80453a2:	687b      	ldr	r3, [r7, #4]
 80453a4:	681b      	ldr	r3, [r3, #0]
 80453a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80453aa:	2b00      	cmp	r3, #0
 80453ac:	d00a      	beq.n	80453c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80453ae:	4b6a      	ldr	r3, [pc, #424]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80453b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80453b4:	f023 020c 	bic.w	r2, r3, #12
 80453b8:	687b      	ldr	r3, [r7, #4]
 80453ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80453bc:	4966      	ldr	r1, [pc, #408]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80453be:	4313      	orrs	r3, r2
 80453c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80453c4:	687b      	ldr	r3, [r7, #4]
 80453c6:	681b      	ldr	r3, [r3, #0]
 80453c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80453cc:	2b00      	cmp	r3, #0
 80453ce:	d00a      	beq.n	80453e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80453d0:	4b61      	ldr	r3, [pc, #388]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80453d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80453d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80453da:	687b      	ldr	r3, [r7, #4]
 80453dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80453de:	495e      	ldr	r1, [pc, #376]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80453e0:	4313      	orrs	r3, r2
 80453e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80453e6:	687b      	ldr	r3, [r7, #4]
 80453e8:	681b      	ldr	r3, [r3, #0]
 80453ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80453ee:	2b00      	cmp	r3, #0
 80453f0:	d00a      	beq.n	8045408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80453f2:	4b59      	ldr	r3, [pc, #356]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80453f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80453f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80453fc:	687b      	ldr	r3, [r7, #4]
 80453fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8045400:	4955      	ldr	r1, [pc, #340]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045402:	4313      	orrs	r3, r2
 8045404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8045408:	687b      	ldr	r3, [r7, #4]
 804540a:	681b      	ldr	r3, [r3, #0]
 804540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045410:	2b00      	cmp	r3, #0
 8045412:	d00a      	beq.n	804542a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8045414:	4b50      	ldr	r3, [pc, #320]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804541a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804541e:	687b      	ldr	r3, [r7, #4]
 8045420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8045422:	494d      	ldr	r1, [pc, #308]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045424:	4313      	orrs	r3, r2
 8045426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 804542a:	687b      	ldr	r3, [r7, #4]
 804542c:	681b      	ldr	r3, [r3, #0]
 804542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8045432:	2b00      	cmp	r3, #0
 8045434:	d00a      	beq.n	804544c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8045436:	4b48      	ldr	r3, [pc, #288]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804543c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8045440:	687b      	ldr	r3, [r7, #4]
 8045442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8045444:	4944      	ldr	r1, [pc, #272]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045446:	4313      	orrs	r3, r2
 8045448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 804544c:	687b      	ldr	r3, [r7, #4]
 804544e:	681b      	ldr	r3, [r3, #0]
 8045450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8045454:	2b00      	cmp	r3, #0
 8045456:	d00a      	beq.n	804546e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8045458:	4b3f      	ldr	r3, [pc, #252]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804545e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8045462:	687b      	ldr	r3, [r7, #4]
 8045464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8045466:	493c      	ldr	r1, [pc, #240]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045468:	4313      	orrs	r3, r2
 804546a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 804546e:	687b      	ldr	r3, [r7, #4]
 8045470:	681b      	ldr	r3, [r3, #0]
 8045472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8045476:	2b00      	cmp	r3, #0
 8045478:	d00a      	beq.n	8045490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 804547a:	4b37      	ldr	r3, [pc, #220]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8045484:	687b      	ldr	r3, [r7, #4]
 8045486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8045488:	4933      	ldr	r1, [pc, #204]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804548a:	4313      	orrs	r3, r2
 804548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8045490:	687b      	ldr	r3, [r7, #4]
 8045492:	681b      	ldr	r3, [r3, #0]
 8045494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8045498:	2b00      	cmp	r3, #0
 804549a:	d00a      	beq.n	80454b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 804549c:	4b2e      	ldr	r3, [pc, #184]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80454a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80454a6:	687b      	ldr	r3, [r7, #4]
 80454a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80454aa:	492b      	ldr	r1, [pc, #172]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80454ac:	4313      	orrs	r3, r2
 80454ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80454b2:	687b      	ldr	r3, [r7, #4]
 80454b4:	681b      	ldr	r3, [r3, #0]
 80454b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80454ba:	2b00      	cmp	r3, #0
 80454bc:	d011      	beq.n	80454e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80454be:	4b26      	ldr	r3, [pc, #152]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80454c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80454c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80454c8:	687b      	ldr	r3, [r7, #4]
 80454ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80454cc:	4922      	ldr	r1, [pc, #136]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80454ce:	4313      	orrs	r3, r2
 80454d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80454d4:	687b      	ldr	r3, [r7, #4]
 80454d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80454d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80454dc:	d101      	bne.n	80454e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80454de:	2301      	movs	r3, #1
 80454e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80454e2:	687b      	ldr	r3, [r7, #4]
 80454e4:	681b      	ldr	r3, [r3, #0]
 80454e6:	f003 0308 	and.w	r3, r3, #8
 80454ea:	2b00      	cmp	r3, #0
 80454ec:	d001      	beq.n	80454f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80454ee:	2301      	movs	r3, #1
 80454f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80454f2:	687b      	ldr	r3, [r7, #4]
 80454f4:	681b      	ldr	r3, [r3, #0]
 80454f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80454fa:	2b00      	cmp	r3, #0
 80454fc:	d00a      	beq.n	8045514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80454fe:	4b16      	ldr	r3, [pc, #88]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8045508:	687b      	ldr	r3, [r7, #4]
 804550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804550c:	4912      	ldr	r1, [pc, #72]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804550e:	4313      	orrs	r3, r2
 8045510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8045514:	687b      	ldr	r3, [r7, #4]
 8045516:	681b      	ldr	r3, [r3, #0]
 8045518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804551c:	2b00      	cmp	r3, #0
 804551e:	d00b      	beq.n	8045538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8045520:	4b0d      	ldr	r3, [pc, #52]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 804552a:	687b      	ldr	r3, [r7, #4]
 804552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8045530:	4909      	ldr	r1, [pc, #36]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045532:	4313      	orrs	r3, r2
 8045534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8045538:	69fb      	ldr	r3, [r7, #28]
 804553a:	2b01      	cmp	r3, #1
 804553c:	d006      	beq.n	804554c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 804553e:	687b      	ldr	r3, [r7, #4]
 8045540:	681b      	ldr	r3, [r3, #0]
 8045542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045546:	2b00      	cmp	r3, #0
 8045548:	f000 80d9 	beq.w	80456fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 804554c:	4b02      	ldr	r3, [pc, #8]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 804554e:	681b      	ldr	r3, [r3, #0]
 8045550:	4a01      	ldr	r2, [pc, #4]	; (8045558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8045552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8045556:	e001      	b.n	804555c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8045558:	40023800 	.word	0x40023800
 804555c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804555e:	f7fc fd87 	bl	8042070 <HAL_GetTick>
 8045562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8045564:	e008      	b.n	8045578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8045566:	f7fc fd83 	bl	8042070 <HAL_GetTick>
 804556a:	4602      	mov	r2, r0
 804556c:	697b      	ldr	r3, [r7, #20]
 804556e:	1ad3      	subs	r3, r2, r3
 8045570:	2b64      	cmp	r3, #100	; 0x64
 8045572:	d901      	bls.n	8045578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8045574:	2303      	movs	r3, #3
 8045576:	e194      	b.n	80458a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8045578:	4b6c      	ldr	r3, [pc, #432]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 804557a:	681b      	ldr	r3, [r3, #0]
 804557c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8045580:	2b00      	cmp	r3, #0
 8045582:	d1f0      	bne.n	8045566 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8045584:	687b      	ldr	r3, [r7, #4]
 8045586:	681b      	ldr	r3, [r3, #0]
 8045588:	f003 0301 	and.w	r3, r3, #1
 804558c:	2b00      	cmp	r3, #0
 804558e:	d021      	beq.n	80455d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8045590:	687b      	ldr	r3, [r7, #4]
 8045592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045594:	2b00      	cmp	r3, #0
 8045596:	d11d      	bne.n	80455d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8045598:	4b64      	ldr	r3, [pc, #400]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 804559a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804559e:	0c1b      	lsrs	r3, r3, #16
 80455a0:	f003 0303 	and.w	r3, r3, #3
 80455a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80455a6:	4b61      	ldr	r3, [pc, #388]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80455a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80455ac:	0e1b      	lsrs	r3, r3, #24
 80455ae:	f003 030f 	and.w	r3, r3, #15
 80455b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80455b4:	687b      	ldr	r3, [r7, #4]
 80455b6:	685b      	ldr	r3, [r3, #4]
 80455b8:	019a      	lsls	r2, r3, #6
 80455ba:	693b      	ldr	r3, [r7, #16]
 80455bc:	041b      	lsls	r3, r3, #16
 80455be:	431a      	orrs	r2, r3
 80455c0:	68fb      	ldr	r3, [r7, #12]
 80455c2:	061b      	lsls	r3, r3, #24
 80455c4:	431a      	orrs	r2, r3
 80455c6:	687b      	ldr	r3, [r7, #4]
 80455c8:	689b      	ldr	r3, [r3, #8]
 80455ca:	071b      	lsls	r3, r3, #28
 80455cc:	4957      	ldr	r1, [pc, #348]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80455ce:	4313      	orrs	r3, r2
 80455d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80455d4:	687b      	ldr	r3, [r7, #4]
 80455d6:	681b      	ldr	r3, [r3, #0]
 80455d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80455dc:	2b00      	cmp	r3, #0
 80455de:	d004      	beq.n	80455ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80455e0:	687b      	ldr	r3, [r7, #4]
 80455e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80455e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80455e8:	d00a      	beq.n	8045600 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80455ea:	687b      	ldr	r3, [r7, #4]
 80455ec:	681b      	ldr	r3, [r3, #0]
 80455ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80455f2:	2b00      	cmp	r3, #0
 80455f4:	d02e      	beq.n	8045654 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80455f6:	687b      	ldr	r3, [r7, #4]
 80455f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80455fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80455fe:	d129      	bne.n	8045654 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8045600:	4b4a      	ldr	r3, [pc, #296]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045606:	0c1b      	lsrs	r3, r3, #16
 8045608:	f003 0303 	and.w	r3, r3, #3
 804560c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 804560e:	4b47      	ldr	r3, [pc, #284]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045614:	0f1b      	lsrs	r3, r3, #28
 8045616:	f003 0307 	and.w	r3, r3, #7
 804561a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 804561c:	687b      	ldr	r3, [r7, #4]
 804561e:	685b      	ldr	r3, [r3, #4]
 8045620:	019a      	lsls	r2, r3, #6
 8045622:	693b      	ldr	r3, [r7, #16]
 8045624:	041b      	lsls	r3, r3, #16
 8045626:	431a      	orrs	r2, r3
 8045628:	687b      	ldr	r3, [r7, #4]
 804562a:	68db      	ldr	r3, [r3, #12]
 804562c:	061b      	lsls	r3, r3, #24
 804562e:	431a      	orrs	r2, r3
 8045630:	68fb      	ldr	r3, [r7, #12]
 8045632:	071b      	lsls	r3, r3, #28
 8045634:	493d      	ldr	r1, [pc, #244]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045636:	4313      	orrs	r3, r2
 8045638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 804563c:	4b3b      	ldr	r3, [pc, #236]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 804563e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8045642:	f023 021f 	bic.w	r2, r3, #31
 8045646:	687b      	ldr	r3, [r7, #4]
 8045648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804564a:	3b01      	subs	r3, #1
 804564c:	4937      	ldr	r1, [pc, #220]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 804564e:	4313      	orrs	r3, r2
 8045650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8045654:	687b      	ldr	r3, [r7, #4]
 8045656:	681b      	ldr	r3, [r3, #0]
 8045658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804565c:	2b00      	cmp	r3, #0
 804565e:	d01d      	beq.n	804569c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8045660:	4b32      	ldr	r3, [pc, #200]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045666:	0e1b      	lsrs	r3, r3, #24
 8045668:	f003 030f 	and.w	r3, r3, #15
 804566c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 804566e:	4b2f      	ldr	r3, [pc, #188]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8045674:	0f1b      	lsrs	r3, r3, #28
 8045676:	f003 0307 	and.w	r3, r3, #7
 804567a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 804567c:	687b      	ldr	r3, [r7, #4]
 804567e:	685b      	ldr	r3, [r3, #4]
 8045680:	019a      	lsls	r2, r3, #6
 8045682:	687b      	ldr	r3, [r7, #4]
 8045684:	691b      	ldr	r3, [r3, #16]
 8045686:	041b      	lsls	r3, r3, #16
 8045688:	431a      	orrs	r2, r3
 804568a:	693b      	ldr	r3, [r7, #16]
 804568c:	061b      	lsls	r3, r3, #24
 804568e:	431a      	orrs	r2, r3
 8045690:	68fb      	ldr	r3, [r7, #12]
 8045692:	071b      	lsls	r3, r3, #28
 8045694:	4925      	ldr	r1, [pc, #148]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045696:	4313      	orrs	r3, r2
 8045698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 804569c:	687b      	ldr	r3, [r7, #4]
 804569e:	681b      	ldr	r3, [r3, #0]
 80456a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80456a4:	2b00      	cmp	r3, #0
 80456a6:	d011      	beq.n	80456cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80456a8:	687b      	ldr	r3, [r7, #4]
 80456aa:	685b      	ldr	r3, [r3, #4]
 80456ac:	019a      	lsls	r2, r3, #6
 80456ae:	687b      	ldr	r3, [r7, #4]
 80456b0:	691b      	ldr	r3, [r3, #16]
 80456b2:	041b      	lsls	r3, r3, #16
 80456b4:	431a      	orrs	r2, r3
 80456b6:	687b      	ldr	r3, [r7, #4]
 80456b8:	68db      	ldr	r3, [r3, #12]
 80456ba:	061b      	lsls	r3, r3, #24
 80456bc:	431a      	orrs	r2, r3
 80456be:	687b      	ldr	r3, [r7, #4]
 80456c0:	689b      	ldr	r3, [r3, #8]
 80456c2:	071b      	lsls	r3, r3, #28
 80456c4:	4919      	ldr	r1, [pc, #100]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80456c6:	4313      	orrs	r3, r2
 80456c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80456cc:	4b17      	ldr	r3, [pc, #92]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80456ce:	681b      	ldr	r3, [r3, #0]
 80456d0:	4a16      	ldr	r2, [pc, #88]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80456d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80456d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80456d8:	f7fc fcca 	bl	8042070 <HAL_GetTick>
 80456dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80456de:	e008      	b.n	80456f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80456e0:	f7fc fcc6 	bl	8042070 <HAL_GetTick>
 80456e4:	4602      	mov	r2, r0
 80456e6:	697b      	ldr	r3, [r7, #20]
 80456e8:	1ad3      	subs	r3, r2, r3
 80456ea:	2b64      	cmp	r3, #100	; 0x64
 80456ec:	d901      	bls.n	80456f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80456ee:	2303      	movs	r3, #3
 80456f0:	e0d7      	b.n	80458a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80456f2:	4b0e      	ldr	r3, [pc, #56]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80456f4:	681b      	ldr	r3, [r3, #0]
 80456f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80456fa:	2b00      	cmp	r3, #0
 80456fc:	d0f0      	beq.n	80456e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80456fe:	69bb      	ldr	r3, [r7, #24]
 8045700:	2b01      	cmp	r3, #1
 8045702:	f040 80cd 	bne.w	80458a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8045706:	4b09      	ldr	r3, [pc, #36]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8045708:	681b      	ldr	r3, [r3, #0]
 804570a:	4a08      	ldr	r2, [pc, #32]	; (804572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 804570c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8045710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045712:	f7fc fcad 	bl	8042070 <HAL_GetTick>
 8045716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8045718:	e00a      	b.n	8045730 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 804571a:	f7fc fca9 	bl	8042070 <HAL_GetTick>
 804571e:	4602      	mov	r2, r0
 8045720:	697b      	ldr	r3, [r7, #20]
 8045722:	1ad3      	subs	r3, r2, r3
 8045724:	2b64      	cmp	r3, #100	; 0x64
 8045726:	d903      	bls.n	8045730 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8045728:	2303      	movs	r3, #3
 804572a:	e0ba      	b.n	80458a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 804572c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8045730:	4b5e      	ldr	r3, [pc, #376]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045732:	681b      	ldr	r3, [r3, #0]
 8045734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8045738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804573c:	d0ed      	beq.n	804571a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804573e:	687b      	ldr	r3, [r7, #4]
 8045740:	681b      	ldr	r3, [r3, #0]
 8045742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8045746:	2b00      	cmp	r3, #0
 8045748:	d003      	beq.n	8045752 <HAL_RCCEx_PeriphCLKConfig+0x682>
 804574a:	687b      	ldr	r3, [r7, #4]
 804574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804574e:	2b00      	cmp	r3, #0
 8045750:	d009      	beq.n	8045766 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8045752:	687b      	ldr	r3, [r7, #4]
 8045754:	681b      	ldr	r3, [r3, #0]
 8045756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804575a:	2b00      	cmp	r3, #0
 804575c:	d02e      	beq.n	80457bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 804575e:	687b      	ldr	r3, [r7, #4]
 8045760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8045762:	2b00      	cmp	r3, #0
 8045764:	d12a      	bne.n	80457bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8045766:	4b51      	ldr	r3, [pc, #324]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804576c:	0c1b      	lsrs	r3, r3, #16
 804576e:	f003 0303 	and.w	r3, r3, #3
 8045772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8045774:	4b4d      	ldr	r3, [pc, #308]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804577a:	0f1b      	lsrs	r3, r3, #28
 804577c:	f003 0307 	and.w	r3, r3, #7
 8045780:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8045782:	687b      	ldr	r3, [r7, #4]
 8045784:	695b      	ldr	r3, [r3, #20]
 8045786:	019a      	lsls	r2, r3, #6
 8045788:	693b      	ldr	r3, [r7, #16]
 804578a:	041b      	lsls	r3, r3, #16
 804578c:	431a      	orrs	r2, r3
 804578e:	687b      	ldr	r3, [r7, #4]
 8045790:	699b      	ldr	r3, [r3, #24]
 8045792:	061b      	lsls	r3, r3, #24
 8045794:	431a      	orrs	r2, r3
 8045796:	68fb      	ldr	r3, [r7, #12]
 8045798:	071b      	lsls	r3, r3, #28
 804579a:	4944      	ldr	r1, [pc, #272]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 804579c:	4313      	orrs	r3, r2
 804579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80457a2:	4b42      	ldr	r3, [pc, #264]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80457a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80457a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80457ac:	687b      	ldr	r3, [r7, #4]
 80457ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80457b0:	3b01      	subs	r3, #1
 80457b2:	021b      	lsls	r3, r3, #8
 80457b4:	493d      	ldr	r1, [pc, #244]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80457b6:	4313      	orrs	r3, r2
 80457b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80457bc:	687b      	ldr	r3, [r7, #4]
 80457be:	681b      	ldr	r3, [r3, #0]
 80457c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80457c4:	2b00      	cmp	r3, #0
 80457c6:	d022      	beq.n	804580e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80457c8:	687b      	ldr	r3, [r7, #4]
 80457ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80457cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80457d0:	d11d      	bne.n	804580e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80457d2:	4b36      	ldr	r3, [pc, #216]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80457d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80457d8:	0e1b      	lsrs	r3, r3, #24
 80457da:	f003 030f 	and.w	r3, r3, #15
 80457de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80457e0:	4b32      	ldr	r3, [pc, #200]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80457e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80457e6:	0f1b      	lsrs	r3, r3, #28
 80457e8:	f003 0307 	and.w	r3, r3, #7
 80457ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80457ee:	687b      	ldr	r3, [r7, #4]
 80457f0:	695b      	ldr	r3, [r3, #20]
 80457f2:	019a      	lsls	r2, r3, #6
 80457f4:	687b      	ldr	r3, [r7, #4]
 80457f6:	6a1b      	ldr	r3, [r3, #32]
 80457f8:	041b      	lsls	r3, r3, #16
 80457fa:	431a      	orrs	r2, r3
 80457fc:	693b      	ldr	r3, [r7, #16]
 80457fe:	061b      	lsls	r3, r3, #24
 8045800:	431a      	orrs	r2, r3
 8045802:	68fb      	ldr	r3, [r7, #12]
 8045804:	071b      	lsls	r3, r3, #28
 8045806:	4929      	ldr	r1, [pc, #164]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045808:	4313      	orrs	r3, r2
 804580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 804580e:	687b      	ldr	r3, [r7, #4]
 8045810:	681b      	ldr	r3, [r3, #0]
 8045812:	f003 0308 	and.w	r3, r3, #8
 8045816:	2b00      	cmp	r3, #0
 8045818:	d028      	beq.n	804586c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804581a:	4b24      	ldr	r3, [pc, #144]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 804581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045820:	0e1b      	lsrs	r3, r3, #24
 8045822:	f003 030f 	and.w	r3, r3, #15
 8045826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8045828:	4b20      	ldr	r3, [pc, #128]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 804582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804582e:	0c1b      	lsrs	r3, r3, #16
 8045830:	f003 0303 	and.w	r3, r3, #3
 8045834:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8045836:	687b      	ldr	r3, [r7, #4]
 8045838:	695b      	ldr	r3, [r3, #20]
 804583a:	019a      	lsls	r2, r3, #6
 804583c:	68fb      	ldr	r3, [r7, #12]
 804583e:	041b      	lsls	r3, r3, #16
 8045840:	431a      	orrs	r2, r3
 8045842:	693b      	ldr	r3, [r7, #16]
 8045844:	061b      	lsls	r3, r3, #24
 8045846:	431a      	orrs	r2, r3
 8045848:	687b      	ldr	r3, [r7, #4]
 804584a:	69db      	ldr	r3, [r3, #28]
 804584c:	071b      	lsls	r3, r3, #28
 804584e:	4917      	ldr	r1, [pc, #92]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045850:	4313      	orrs	r3, r2
 8045852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8045856:	4b15      	ldr	r3, [pc, #84]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804585c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8045860:	687b      	ldr	r3, [r7, #4]
 8045862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045864:	4911      	ldr	r1, [pc, #68]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045866:	4313      	orrs	r3, r2
 8045868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 804586c:	4b0f      	ldr	r3, [pc, #60]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 804586e:	681b      	ldr	r3, [r3, #0]
 8045870:	4a0e      	ldr	r2, [pc, #56]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8045876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045878:	f7fc fbfa 	bl	8042070 <HAL_GetTick>
 804587c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804587e:	e008      	b.n	8045892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8045880:	f7fc fbf6 	bl	8042070 <HAL_GetTick>
 8045884:	4602      	mov	r2, r0
 8045886:	697b      	ldr	r3, [r7, #20]
 8045888:	1ad3      	subs	r3, r2, r3
 804588a:	2b64      	cmp	r3, #100	; 0x64
 804588c:	d901      	bls.n	8045892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804588e:	2303      	movs	r3, #3
 8045890:	e007      	b.n	80458a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8045892:	4b06      	ldr	r3, [pc, #24]	; (80458ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8045894:	681b      	ldr	r3, [r3, #0]
 8045896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804589a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804589e:	d1ef      	bne.n	8045880 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80458a0:	2300      	movs	r3, #0
}
 80458a2:	4618      	mov	r0, r3
 80458a4:	3720      	adds	r7, #32
 80458a6:	46bd      	mov	sp, r7
 80458a8:	bd80      	pop	{r7, pc}
 80458aa:	bf00      	nop
 80458ac:	40023800 	.word	0x40023800

080458b0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80458b0:	b580      	push	{r7, lr}
 80458b2:	b084      	sub	sp, #16
 80458b4:	af00      	add	r7, sp, #0
 80458b6:	60f8      	str	r0, [r7, #12]
 80458b8:	60b9      	str	r1, [r7, #8]
 80458ba:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80458bc:	68fb      	ldr	r3, [r7, #12]
 80458be:	2b00      	cmp	r3, #0
 80458c0:	d101      	bne.n	80458c6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80458c2:	2301      	movs	r3, #1
 80458c4:	e038      	b.n	8045938 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80458c6:	68fb      	ldr	r3, [r7, #12]
 80458c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80458cc:	b2db      	uxtb	r3, r3
 80458ce:	2b00      	cmp	r3, #0
 80458d0:	d106      	bne.n	80458e0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80458d2:	68fb      	ldr	r3, [r7, #12]
 80458d4:	2200      	movs	r2, #0
 80458d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80458da:	68f8      	ldr	r0, [r7, #12]
 80458dc:	f7fc f880 	bl	80419e0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80458e0:	68fb      	ldr	r3, [r7, #12]
 80458e2:	681a      	ldr	r2, [r3, #0]
 80458e4:	68fb      	ldr	r3, [r7, #12]
 80458e6:	3308      	adds	r3, #8
 80458e8:	4619      	mov	r1, r3
 80458ea:	4610      	mov	r0, r2
 80458ec:	f001 ff82 	bl	80477f4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80458f0:	68fb      	ldr	r3, [r7, #12]
 80458f2:	6818      	ldr	r0, [r3, #0]
 80458f4:	68fb      	ldr	r3, [r7, #12]
 80458f6:	689b      	ldr	r3, [r3, #8]
 80458f8:	461a      	mov	r2, r3
 80458fa:	68b9      	ldr	r1, [r7, #8]
 80458fc:	f002 f80a 	bl	8047914 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8045900:	68fb      	ldr	r3, [r7, #12]
 8045902:	6858      	ldr	r0, [r3, #4]
 8045904:	68fb      	ldr	r3, [r7, #12]
 8045906:	689a      	ldr	r2, [r3, #8]
 8045908:	68fb      	ldr	r3, [r7, #12]
 804590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804590c:	6879      	ldr	r1, [r7, #4]
 804590e:	f002 f851 	bl	80479b4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8045912:	68fb      	ldr	r3, [r7, #12]
 8045914:	681b      	ldr	r3, [r3, #0]
 8045916:	68fa      	ldr	r2, [r7, #12]
 8045918:	6892      	ldr	r2, [r2, #8]
 804591a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804591e:	68fb      	ldr	r3, [r7, #12]
 8045920:	681b      	ldr	r3, [r3, #0]
 8045922:	68fa      	ldr	r2, [r7, #12]
 8045924:	6892      	ldr	r2, [r2, #8]
 8045926:	f041 0101 	orr.w	r1, r1, #1
 804592a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 804592e:	68fb      	ldr	r3, [r7, #12]
 8045930:	2201      	movs	r2, #1
 8045932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8045936:	2300      	movs	r3, #0
}
 8045938:	4618      	mov	r0, r3
 804593a:	3710      	adds	r7, #16
 804593c:	46bd      	mov	sp, r7
 804593e:	bd80      	pop	{r7, pc}

08045940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8045940:	b580      	push	{r7, lr}
 8045942:	b082      	sub	sp, #8
 8045944:	af00      	add	r7, sp, #0
 8045946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8045948:	687b      	ldr	r3, [r7, #4]
 804594a:	2b00      	cmp	r3, #0
 804594c:	d101      	bne.n	8045952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804594e:	2301      	movs	r3, #1
 8045950:	e049      	b.n	80459e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8045952:	687b      	ldr	r3, [r7, #4]
 8045954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045958:	b2db      	uxtb	r3, r3
 804595a:	2b00      	cmp	r3, #0
 804595c:	d106      	bne.n	804596c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804595e:	687b      	ldr	r3, [r7, #4]
 8045960:	2200      	movs	r2, #0
 8045962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8045966:	6878      	ldr	r0, [r7, #4]
 8045968:	f7fb fdf0 	bl	804154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804596c:	687b      	ldr	r3, [r7, #4]
 804596e:	2202      	movs	r2, #2
 8045970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8045974:	687b      	ldr	r3, [r7, #4]
 8045976:	681a      	ldr	r2, [r3, #0]
 8045978:	687b      	ldr	r3, [r7, #4]
 804597a:	3304      	adds	r3, #4
 804597c:	4619      	mov	r1, r3
 804597e:	4610      	mov	r0, r2
 8045980:	f000 f9f6 	bl	8045d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8045984:	687b      	ldr	r3, [r7, #4]
 8045986:	2201      	movs	r2, #1
 8045988:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804598c:	687b      	ldr	r3, [r7, #4]
 804598e:	2201      	movs	r2, #1
 8045990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8045994:	687b      	ldr	r3, [r7, #4]
 8045996:	2201      	movs	r2, #1
 8045998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804599c:	687b      	ldr	r3, [r7, #4]
 804599e:	2201      	movs	r2, #1
 80459a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80459a4:	687b      	ldr	r3, [r7, #4]
 80459a6:	2201      	movs	r2, #1
 80459a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80459ac:	687b      	ldr	r3, [r7, #4]
 80459ae:	2201      	movs	r2, #1
 80459b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80459b4:	687b      	ldr	r3, [r7, #4]
 80459b6:	2201      	movs	r2, #1
 80459b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80459bc:	687b      	ldr	r3, [r7, #4]
 80459be:	2201      	movs	r2, #1
 80459c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80459c4:	687b      	ldr	r3, [r7, #4]
 80459c6:	2201      	movs	r2, #1
 80459c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80459cc:	687b      	ldr	r3, [r7, #4]
 80459ce:	2201      	movs	r2, #1
 80459d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80459d4:	687b      	ldr	r3, [r7, #4]
 80459d6:	2201      	movs	r2, #1
 80459d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80459dc:	687b      	ldr	r3, [r7, #4]
 80459de:	2201      	movs	r2, #1
 80459e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80459e4:	2300      	movs	r3, #0
}
 80459e6:	4618      	mov	r0, r3
 80459e8:	3708      	adds	r7, #8
 80459ea:	46bd      	mov	sp, r7
 80459ec:	bd80      	pop	{r7, pc}
	...

080459f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80459f0:	b480      	push	{r7}
 80459f2:	b085      	sub	sp, #20
 80459f4:	af00      	add	r7, sp, #0
 80459f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80459f8:	687b      	ldr	r3, [r7, #4]
 80459fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80459fe:	b2db      	uxtb	r3, r3
 8045a00:	2b01      	cmp	r3, #1
 8045a02:	d001      	beq.n	8045a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8045a04:	2301      	movs	r3, #1
 8045a06:	e054      	b.n	8045ab2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8045a08:	687b      	ldr	r3, [r7, #4]
 8045a0a:	2202      	movs	r2, #2
 8045a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8045a10:	687b      	ldr	r3, [r7, #4]
 8045a12:	681b      	ldr	r3, [r3, #0]
 8045a14:	68da      	ldr	r2, [r3, #12]
 8045a16:	687b      	ldr	r3, [r7, #4]
 8045a18:	681b      	ldr	r3, [r3, #0]
 8045a1a:	f042 0201 	orr.w	r2, r2, #1
 8045a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8045a20:	687b      	ldr	r3, [r7, #4]
 8045a22:	681b      	ldr	r3, [r3, #0]
 8045a24:	4a26      	ldr	r2, [pc, #152]	; (8045ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8045a26:	4293      	cmp	r3, r2
 8045a28:	d022      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a2a:	687b      	ldr	r3, [r7, #4]
 8045a2c:	681b      	ldr	r3, [r3, #0]
 8045a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045a32:	d01d      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a34:	687b      	ldr	r3, [r7, #4]
 8045a36:	681b      	ldr	r3, [r3, #0]
 8045a38:	4a22      	ldr	r2, [pc, #136]	; (8045ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8045a3a:	4293      	cmp	r3, r2
 8045a3c:	d018      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a3e:	687b      	ldr	r3, [r7, #4]
 8045a40:	681b      	ldr	r3, [r3, #0]
 8045a42:	4a21      	ldr	r2, [pc, #132]	; (8045ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8045a44:	4293      	cmp	r3, r2
 8045a46:	d013      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a48:	687b      	ldr	r3, [r7, #4]
 8045a4a:	681b      	ldr	r3, [r3, #0]
 8045a4c:	4a1f      	ldr	r2, [pc, #124]	; (8045acc <HAL_TIM_Base_Start_IT+0xdc>)
 8045a4e:	4293      	cmp	r3, r2
 8045a50:	d00e      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a52:	687b      	ldr	r3, [r7, #4]
 8045a54:	681b      	ldr	r3, [r3, #0]
 8045a56:	4a1e      	ldr	r2, [pc, #120]	; (8045ad0 <HAL_TIM_Base_Start_IT+0xe0>)
 8045a58:	4293      	cmp	r3, r2
 8045a5a:	d009      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a5c:	687b      	ldr	r3, [r7, #4]
 8045a5e:	681b      	ldr	r3, [r3, #0]
 8045a60:	4a1c      	ldr	r2, [pc, #112]	; (8045ad4 <HAL_TIM_Base_Start_IT+0xe4>)
 8045a62:	4293      	cmp	r3, r2
 8045a64:	d004      	beq.n	8045a70 <HAL_TIM_Base_Start_IT+0x80>
 8045a66:	687b      	ldr	r3, [r7, #4]
 8045a68:	681b      	ldr	r3, [r3, #0]
 8045a6a:	4a1b      	ldr	r2, [pc, #108]	; (8045ad8 <HAL_TIM_Base_Start_IT+0xe8>)
 8045a6c:	4293      	cmp	r3, r2
 8045a6e:	d115      	bne.n	8045a9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8045a70:	687b      	ldr	r3, [r7, #4]
 8045a72:	681b      	ldr	r3, [r3, #0]
 8045a74:	689a      	ldr	r2, [r3, #8]
 8045a76:	4b19      	ldr	r3, [pc, #100]	; (8045adc <HAL_TIM_Base_Start_IT+0xec>)
 8045a78:	4013      	ands	r3, r2
 8045a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8045a7c:	68fb      	ldr	r3, [r7, #12]
 8045a7e:	2b06      	cmp	r3, #6
 8045a80:	d015      	beq.n	8045aae <HAL_TIM_Base_Start_IT+0xbe>
 8045a82:	68fb      	ldr	r3, [r7, #12]
 8045a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8045a88:	d011      	beq.n	8045aae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8045a8a:	687b      	ldr	r3, [r7, #4]
 8045a8c:	681b      	ldr	r3, [r3, #0]
 8045a8e:	681a      	ldr	r2, [r3, #0]
 8045a90:	687b      	ldr	r3, [r7, #4]
 8045a92:	681b      	ldr	r3, [r3, #0]
 8045a94:	f042 0201 	orr.w	r2, r2, #1
 8045a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8045a9a:	e008      	b.n	8045aae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8045a9c:	687b      	ldr	r3, [r7, #4]
 8045a9e:	681b      	ldr	r3, [r3, #0]
 8045aa0:	681a      	ldr	r2, [r3, #0]
 8045aa2:	687b      	ldr	r3, [r7, #4]
 8045aa4:	681b      	ldr	r3, [r3, #0]
 8045aa6:	f042 0201 	orr.w	r2, r2, #1
 8045aaa:	601a      	str	r2, [r3, #0]
 8045aac:	e000      	b.n	8045ab0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8045aae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8045ab0:	2300      	movs	r3, #0
}
 8045ab2:	4618      	mov	r0, r3
 8045ab4:	3714      	adds	r7, #20
 8045ab6:	46bd      	mov	sp, r7
 8045ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045abc:	4770      	bx	lr
 8045abe:	bf00      	nop
 8045ac0:	40010000 	.word	0x40010000
 8045ac4:	40000400 	.word	0x40000400
 8045ac8:	40000800 	.word	0x40000800
 8045acc:	40000c00 	.word	0x40000c00
 8045ad0:	40010400 	.word	0x40010400
 8045ad4:	40014000 	.word	0x40014000
 8045ad8:	40001800 	.word	0x40001800
 8045adc:	00010007 	.word	0x00010007

08045ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8045ae0:	b580      	push	{r7, lr}
 8045ae2:	b082      	sub	sp, #8
 8045ae4:	af00      	add	r7, sp, #0
 8045ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8045ae8:	687b      	ldr	r3, [r7, #4]
 8045aea:	681b      	ldr	r3, [r3, #0]
 8045aec:	691b      	ldr	r3, [r3, #16]
 8045aee:	f003 0302 	and.w	r3, r3, #2
 8045af2:	2b02      	cmp	r3, #2
 8045af4:	d122      	bne.n	8045b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8045af6:	687b      	ldr	r3, [r7, #4]
 8045af8:	681b      	ldr	r3, [r3, #0]
 8045afa:	68db      	ldr	r3, [r3, #12]
 8045afc:	f003 0302 	and.w	r3, r3, #2
 8045b00:	2b02      	cmp	r3, #2
 8045b02:	d11b      	bne.n	8045b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8045b04:	687b      	ldr	r3, [r7, #4]
 8045b06:	681b      	ldr	r3, [r3, #0]
 8045b08:	f06f 0202 	mvn.w	r2, #2
 8045b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8045b0e:	687b      	ldr	r3, [r7, #4]
 8045b10:	2201      	movs	r2, #1
 8045b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8045b14:	687b      	ldr	r3, [r7, #4]
 8045b16:	681b      	ldr	r3, [r3, #0]
 8045b18:	699b      	ldr	r3, [r3, #24]
 8045b1a:	f003 0303 	and.w	r3, r3, #3
 8045b1e:	2b00      	cmp	r3, #0
 8045b20:	d003      	beq.n	8045b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8045b22:	6878      	ldr	r0, [r7, #4]
 8045b24:	f000 f905 	bl	8045d32 <HAL_TIM_IC_CaptureCallback>
 8045b28:	e005      	b.n	8045b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8045b2a:	6878      	ldr	r0, [r7, #4]
 8045b2c:	f000 f8f7 	bl	8045d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045b30:	6878      	ldr	r0, [r7, #4]
 8045b32:	f000 f908 	bl	8045d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045b36:	687b      	ldr	r3, [r7, #4]
 8045b38:	2200      	movs	r2, #0
 8045b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8045b3c:	687b      	ldr	r3, [r7, #4]
 8045b3e:	681b      	ldr	r3, [r3, #0]
 8045b40:	691b      	ldr	r3, [r3, #16]
 8045b42:	f003 0304 	and.w	r3, r3, #4
 8045b46:	2b04      	cmp	r3, #4
 8045b48:	d122      	bne.n	8045b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8045b4a:	687b      	ldr	r3, [r7, #4]
 8045b4c:	681b      	ldr	r3, [r3, #0]
 8045b4e:	68db      	ldr	r3, [r3, #12]
 8045b50:	f003 0304 	and.w	r3, r3, #4
 8045b54:	2b04      	cmp	r3, #4
 8045b56:	d11b      	bne.n	8045b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8045b58:	687b      	ldr	r3, [r7, #4]
 8045b5a:	681b      	ldr	r3, [r3, #0]
 8045b5c:	f06f 0204 	mvn.w	r2, #4
 8045b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8045b62:	687b      	ldr	r3, [r7, #4]
 8045b64:	2202      	movs	r2, #2
 8045b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8045b68:	687b      	ldr	r3, [r7, #4]
 8045b6a:	681b      	ldr	r3, [r3, #0]
 8045b6c:	699b      	ldr	r3, [r3, #24]
 8045b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045b72:	2b00      	cmp	r3, #0
 8045b74:	d003      	beq.n	8045b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045b76:	6878      	ldr	r0, [r7, #4]
 8045b78:	f000 f8db 	bl	8045d32 <HAL_TIM_IC_CaptureCallback>
 8045b7c:	e005      	b.n	8045b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045b7e:	6878      	ldr	r0, [r7, #4]
 8045b80:	f000 f8cd 	bl	8045d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045b84:	6878      	ldr	r0, [r7, #4]
 8045b86:	f000 f8de 	bl	8045d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045b8a:	687b      	ldr	r3, [r7, #4]
 8045b8c:	2200      	movs	r2, #0
 8045b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8045b90:	687b      	ldr	r3, [r7, #4]
 8045b92:	681b      	ldr	r3, [r3, #0]
 8045b94:	691b      	ldr	r3, [r3, #16]
 8045b96:	f003 0308 	and.w	r3, r3, #8
 8045b9a:	2b08      	cmp	r3, #8
 8045b9c:	d122      	bne.n	8045be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8045b9e:	687b      	ldr	r3, [r7, #4]
 8045ba0:	681b      	ldr	r3, [r3, #0]
 8045ba2:	68db      	ldr	r3, [r3, #12]
 8045ba4:	f003 0308 	and.w	r3, r3, #8
 8045ba8:	2b08      	cmp	r3, #8
 8045baa:	d11b      	bne.n	8045be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8045bac:	687b      	ldr	r3, [r7, #4]
 8045bae:	681b      	ldr	r3, [r3, #0]
 8045bb0:	f06f 0208 	mvn.w	r2, #8
 8045bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8045bb6:	687b      	ldr	r3, [r7, #4]
 8045bb8:	2204      	movs	r2, #4
 8045bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8045bbc:	687b      	ldr	r3, [r7, #4]
 8045bbe:	681b      	ldr	r3, [r3, #0]
 8045bc0:	69db      	ldr	r3, [r3, #28]
 8045bc2:	f003 0303 	and.w	r3, r3, #3
 8045bc6:	2b00      	cmp	r3, #0
 8045bc8:	d003      	beq.n	8045bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045bca:	6878      	ldr	r0, [r7, #4]
 8045bcc:	f000 f8b1 	bl	8045d32 <HAL_TIM_IC_CaptureCallback>
 8045bd0:	e005      	b.n	8045bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045bd2:	6878      	ldr	r0, [r7, #4]
 8045bd4:	f000 f8a3 	bl	8045d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045bd8:	6878      	ldr	r0, [r7, #4]
 8045bda:	f000 f8b4 	bl	8045d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045bde:	687b      	ldr	r3, [r7, #4]
 8045be0:	2200      	movs	r2, #0
 8045be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8045be4:	687b      	ldr	r3, [r7, #4]
 8045be6:	681b      	ldr	r3, [r3, #0]
 8045be8:	691b      	ldr	r3, [r3, #16]
 8045bea:	f003 0310 	and.w	r3, r3, #16
 8045bee:	2b10      	cmp	r3, #16
 8045bf0:	d122      	bne.n	8045c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8045bf2:	687b      	ldr	r3, [r7, #4]
 8045bf4:	681b      	ldr	r3, [r3, #0]
 8045bf6:	68db      	ldr	r3, [r3, #12]
 8045bf8:	f003 0310 	and.w	r3, r3, #16
 8045bfc:	2b10      	cmp	r3, #16
 8045bfe:	d11b      	bne.n	8045c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8045c00:	687b      	ldr	r3, [r7, #4]
 8045c02:	681b      	ldr	r3, [r3, #0]
 8045c04:	f06f 0210 	mvn.w	r2, #16
 8045c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8045c0a:	687b      	ldr	r3, [r7, #4]
 8045c0c:	2208      	movs	r2, #8
 8045c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8045c10:	687b      	ldr	r3, [r7, #4]
 8045c12:	681b      	ldr	r3, [r3, #0]
 8045c14:	69db      	ldr	r3, [r3, #28]
 8045c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045c1a:	2b00      	cmp	r3, #0
 8045c1c:	d003      	beq.n	8045c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8045c1e:	6878      	ldr	r0, [r7, #4]
 8045c20:	f000 f887 	bl	8045d32 <HAL_TIM_IC_CaptureCallback>
 8045c24:	e005      	b.n	8045c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8045c26:	6878      	ldr	r0, [r7, #4]
 8045c28:	f000 f879 	bl	8045d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8045c2c:	6878      	ldr	r0, [r7, #4]
 8045c2e:	f000 f88a 	bl	8045d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8045c32:	687b      	ldr	r3, [r7, #4]
 8045c34:	2200      	movs	r2, #0
 8045c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8045c38:	687b      	ldr	r3, [r7, #4]
 8045c3a:	681b      	ldr	r3, [r3, #0]
 8045c3c:	691b      	ldr	r3, [r3, #16]
 8045c3e:	f003 0301 	and.w	r3, r3, #1
 8045c42:	2b01      	cmp	r3, #1
 8045c44:	d10e      	bne.n	8045c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8045c46:	687b      	ldr	r3, [r7, #4]
 8045c48:	681b      	ldr	r3, [r3, #0]
 8045c4a:	68db      	ldr	r3, [r3, #12]
 8045c4c:	f003 0301 	and.w	r3, r3, #1
 8045c50:	2b01      	cmp	r3, #1
 8045c52:	d107      	bne.n	8045c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8045c54:	687b      	ldr	r3, [r7, #4]
 8045c56:	681b      	ldr	r3, [r3, #0]
 8045c58:	f06f 0201 	mvn.w	r2, #1
 8045c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8045c5e:	6878      	ldr	r0, [r7, #4]
 8045c60:	f7fb faa2 	bl	80411a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8045c64:	687b      	ldr	r3, [r7, #4]
 8045c66:	681b      	ldr	r3, [r3, #0]
 8045c68:	691b      	ldr	r3, [r3, #16]
 8045c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045c6e:	2b80      	cmp	r3, #128	; 0x80
 8045c70:	d10e      	bne.n	8045c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8045c72:	687b      	ldr	r3, [r7, #4]
 8045c74:	681b      	ldr	r3, [r3, #0]
 8045c76:	68db      	ldr	r3, [r3, #12]
 8045c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045c7c:	2b80      	cmp	r3, #128	; 0x80
 8045c7e:	d107      	bne.n	8045c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8045c80:	687b      	ldr	r3, [r7, #4]
 8045c82:	681b      	ldr	r3, [r3, #0]
 8045c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8045c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8045c8a:	6878      	ldr	r0, [r7, #4]
 8045c8c:	f000 f9a8 	bl	8045fe0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8045c90:	687b      	ldr	r3, [r7, #4]
 8045c92:	681b      	ldr	r3, [r3, #0]
 8045c94:	691b      	ldr	r3, [r3, #16]
 8045c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8045c9e:	d10e      	bne.n	8045cbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8045ca0:	687b      	ldr	r3, [r7, #4]
 8045ca2:	681b      	ldr	r3, [r3, #0]
 8045ca4:	68db      	ldr	r3, [r3, #12]
 8045ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045caa:	2b80      	cmp	r3, #128	; 0x80
 8045cac:	d107      	bne.n	8045cbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8045cae:	687b      	ldr	r3, [r7, #4]
 8045cb0:	681b      	ldr	r3, [r3, #0]
 8045cb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8045cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8045cb8:	6878      	ldr	r0, [r7, #4]
 8045cba:	f000 f99b 	bl	8045ff4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8045cbe:	687b      	ldr	r3, [r7, #4]
 8045cc0:	681b      	ldr	r3, [r3, #0]
 8045cc2:	691b      	ldr	r3, [r3, #16]
 8045cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045cc8:	2b40      	cmp	r3, #64	; 0x40
 8045cca:	d10e      	bne.n	8045cea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8045ccc:	687b      	ldr	r3, [r7, #4]
 8045cce:	681b      	ldr	r3, [r3, #0]
 8045cd0:	68db      	ldr	r3, [r3, #12]
 8045cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045cd6:	2b40      	cmp	r3, #64	; 0x40
 8045cd8:	d107      	bne.n	8045cea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8045cda:	687b      	ldr	r3, [r7, #4]
 8045cdc:	681b      	ldr	r3, [r3, #0]
 8045cde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8045ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8045ce4:	6878      	ldr	r0, [r7, #4]
 8045ce6:	f000 f838 	bl	8045d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8045cea:	687b      	ldr	r3, [r7, #4]
 8045cec:	681b      	ldr	r3, [r3, #0]
 8045cee:	691b      	ldr	r3, [r3, #16]
 8045cf0:	f003 0320 	and.w	r3, r3, #32
 8045cf4:	2b20      	cmp	r3, #32
 8045cf6:	d10e      	bne.n	8045d16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8045cf8:	687b      	ldr	r3, [r7, #4]
 8045cfa:	681b      	ldr	r3, [r3, #0]
 8045cfc:	68db      	ldr	r3, [r3, #12]
 8045cfe:	f003 0320 	and.w	r3, r3, #32
 8045d02:	2b20      	cmp	r3, #32
 8045d04:	d107      	bne.n	8045d16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8045d06:	687b      	ldr	r3, [r7, #4]
 8045d08:	681b      	ldr	r3, [r3, #0]
 8045d0a:	f06f 0220 	mvn.w	r2, #32
 8045d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8045d10:	6878      	ldr	r0, [r7, #4]
 8045d12:	f000 f95b 	bl	8045fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8045d16:	bf00      	nop
 8045d18:	3708      	adds	r7, #8
 8045d1a:	46bd      	mov	sp, r7
 8045d1c:	bd80      	pop	{r7, pc}

08045d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8045d1e:	b480      	push	{r7}
 8045d20:	b083      	sub	sp, #12
 8045d22:	af00      	add	r7, sp, #0
 8045d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8045d26:	bf00      	nop
 8045d28:	370c      	adds	r7, #12
 8045d2a:	46bd      	mov	sp, r7
 8045d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d30:	4770      	bx	lr

08045d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8045d32:	b480      	push	{r7}
 8045d34:	b083      	sub	sp, #12
 8045d36:	af00      	add	r7, sp, #0
 8045d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8045d3a:	bf00      	nop
 8045d3c:	370c      	adds	r7, #12
 8045d3e:	46bd      	mov	sp, r7
 8045d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d44:	4770      	bx	lr

08045d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8045d46:	b480      	push	{r7}
 8045d48:	b083      	sub	sp, #12
 8045d4a:	af00      	add	r7, sp, #0
 8045d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8045d4e:	bf00      	nop
 8045d50:	370c      	adds	r7, #12
 8045d52:	46bd      	mov	sp, r7
 8045d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d58:	4770      	bx	lr

08045d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8045d5a:	b480      	push	{r7}
 8045d5c:	b083      	sub	sp, #12
 8045d5e:	af00      	add	r7, sp, #0
 8045d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8045d62:	bf00      	nop
 8045d64:	370c      	adds	r7, #12
 8045d66:	46bd      	mov	sp, r7
 8045d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045d6c:	4770      	bx	lr
	...

08045d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8045d70:	b480      	push	{r7}
 8045d72:	b085      	sub	sp, #20
 8045d74:	af00      	add	r7, sp, #0
 8045d76:	6078      	str	r0, [r7, #4]
 8045d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8045d7a:	687b      	ldr	r3, [r7, #4]
 8045d7c:	681b      	ldr	r3, [r3, #0]
 8045d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8045d80:	687b      	ldr	r3, [r7, #4]
 8045d82:	4a40      	ldr	r2, [pc, #256]	; (8045e84 <TIM_Base_SetConfig+0x114>)
 8045d84:	4293      	cmp	r3, r2
 8045d86:	d013      	beq.n	8045db0 <TIM_Base_SetConfig+0x40>
 8045d88:	687b      	ldr	r3, [r7, #4]
 8045d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045d8e:	d00f      	beq.n	8045db0 <TIM_Base_SetConfig+0x40>
 8045d90:	687b      	ldr	r3, [r7, #4]
 8045d92:	4a3d      	ldr	r2, [pc, #244]	; (8045e88 <TIM_Base_SetConfig+0x118>)
 8045d94:	4293      	cmp	r3, r2
 8045d96:	d00b      	beq.n	8045db0 <TIM_Base_SetConfig+0x40>
 8045d98:	687b      	ldr	r3, [r7, #4]
 8045d9a:	4a3c      	ldr	r2, [pc, #240]	; (8045e8c <TIM_Base_SetConfig+0x11c>)
 8045d9c:	4293      	cmp	r3, r2
 8045d9e:	d007      	beq.n	8045db0 <TIM_Base_SetConfig+0x40>
 8045da0:	687b      	ldr	r3, [r7, #4]
 8045da2:	4a3b      	ldr	r2, [pc, #236]	; (8045e90 <TIM_Base_SetConfig+0x120>)
 8045da4:	4293      	cmp	r3, r2
 8045da6:	d003      	beq.n	8045db0 <TIM_Base_SetConfig+0x40>
 8045da8:	687b      	ldr	r3, [r7, #4]
 8045daa:	4a3a      	ldr	r2, [pc, #232]	; (8045e94 <TIM_Base_SetConfig+0x124>)
 8045dac:	4293      	cmp	r3, r2
 8045dae:	d108      	bne.n	8045dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8045db0:	68fb      	ldr	r3, [r7, #12]
 8045db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8045db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8045db8:	683b      	ldr	r3, [r7, #0]
 8045dba:	685b      	ldr	r3, [r3, #4]
 8045dbc:	68fa      	ldr	r2, [r7, #12]
 8045dbe:	4313      	orrs	r3, r2
 8045dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8045dc2:	687b      	ldr	r3, [r7, #4]
 8045dc4:	4a2f      	ldr	r2, [pc, #188]	; (8045e84 <TIM_Base_SetConfig+0x114>)
 8045dc6:	4293      	cmp	r3, r2
 8045dc8:	d02b      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045dca:	687b      	ldr	r3, [r7, #4]
 8045dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045dd0:	d027      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045dd2:	687b      	ldr	r3, [r7, #4]
 8045dd4:	4a2c      	ldr	r2, [pc, #176]	; (8045e88 <TIM_Base_SetConfig+0x118>)
 8045dd6:	4293      	cmp	r3, r2
 8045dd8:	d023      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045dda:	687b      	ldr	r3, [r7, #4]
 8045ddc:	4a2b      	ldr	r2, [pc, #172]	; (8045e8c <TIM_Base_SetConfig+0x11c>)
 8045dde:	4293      	cmp	r3, r2
 8045de0:	d01f      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045de2:	687b      	ldr	r3, [r7, #4]
 8045de4:	4a2a      	ldr	r2, [pc, #168]	; (8045e90 <TIM_Base_SetConfig+0x120>)
 8045de6:	4293      	cmp	r3, r2
 8045de8:	d01b      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045dea:	687b      	ldr	r3, [r7, #4]
 8045dec:	4a29      	ldr	r2, [pc, #164]	; (8045e94 <TIM_Base_SetConfig+0x124>)
 8045dee:	4293      	cmp	r3, r2
 8045df0:	d017      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045df2:	687b      	ldr	r3, [r7, #4]
 8045df4:	4a28      	ldr	r2, [pc, #160]	; (8045e98 <TIM_Base_SetConfig+0x128>)
 8045df6:	4293      	cmp	r3, r2
 8045df8:	d013      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045dfa:	687b      	ldr	r3, [r7, #4]
 8045dfc:	4a27      	ldr	r2, [pc, #156]	; (8045e9c <TIM_Base_SetConfig+0x12c>)
 8045dfe:	4293      	cmp	r3, r2
 8045e00:	d00f      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045e02:	687b      	ldr	r3, [r7, #4]
 8045e04:	4a26      	ldr	r2, [pc, #152]	; (8045ea0 <TIM_Base_SetConfig+0x130>)
 8045e06:	4293      	cmp	r3, r2
 8045e08:	d00b      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045e0a:	687b      	ldr	r3, [r7, #4]
 8045e0c:	4a25      	ldr	r2, [pc, #148]	; (8045ea4 <TIM_Base_SetConfig+0x134>)
 8045e0e:	4293      	cmp	r3, r2
 8045e10:	d007      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045e12:	687b      	ldr	r3, [r7, #4]
 8045e14:	4a24      	ldr	r2, [pc, #144]	; (8045ea8 <TIM_Base_SetConfig+0x138>)
 8045e16:	4293      	cmp	r3, r2
 8045e18:	d003      	beq.n	8045e22 <TIM_Base_SetConfig+0xb2>
 8045e1a:	687b      	ldr	r3, [r7, #4]
 8045e1c:	4a23      	ldr	r2, [pc, #140]	; (8045eac <TIM_Base_SetConfig+0x13c>)
 8045e1e:	4293      	cmp	r3, r2
 8045e20:	d108      	bne.n	8045e34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8045e22:	68fb      	ldr	r3, [r7, #12]
 8045e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8045e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8045e2a:	683b      	ldr	r3, [r7, #0]
 8045e2c:	68db      	ldr	r3, [r3, #12]
 8045e2e:	68fa      	ldr	r2, [r7, #12]
 8045e30:	4313      	orrs	r3, r2
 8045e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8045e34:	68fb      	ldr	r3, [r7, #12]
 8045e36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8045e3a:	683b      	ldr	r3, [r7, #0]
 8045e3c:	695b      	ldr	r3, [r3, #20]
 8045e3e:	4313      	orrs	r3, r2
 8045e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8045e42:	687b      	ldr	r3, [r7, #4]
 8045e44:	68fa      	ldr	r2, [r7, #12]
 8045e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8045e48:	683b      	ldr	r3, [r7, #0]
 8045e4a:	689a      	ldr	r2, [r3, #8]
 8045e4c:	687b      	ldr	r3, [r7, #4]
 8045e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8045e50:	683b      	ldr	r3, [r7, #0]
 8045e52:	681a      	ldr	r2, [r3, #0]
 8045e54:	687b      	ldr	r3, [r7, #4]
 8045e56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8045e58:	687b      	ldr	r3, [r7, #4]
 8045e5a:	4a0a      	ldr	r2, [pc, #40]	; (8045e84 <TIM_Base_SetConfig+0x114>)
 8045e5c:	4293      	cmp	r3, r2
 8045e5e:	d003      	beq.n	8045e68 <TIM_Base_SetConfig+0xf8>
 8045e60:	687b      	ldr	r3, [r7, #4]
 8045e62:	4a0c      	ldr	r2, [pc, #48]	; (8045e94 <TIM_Base_SetConfig+0x124>)
 8045e64:	4293      	cmp	r3, r2
 8045e66:	d103      	bne.n	8045e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8045e68:	683b      	ldr	r3, [r7, #0]
 8045e6a:	691a      	ldr	r2, [r3, #16]
 8045e6c:	687b      	ldr	r3, [r7, #4]
 8045e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8045e70:	687b      	ldr	r3, [r7, #4]
 8045e72:	2201      	movs	r2, #1
 8045e74:	615a      	str	r2, [r3, #20]
}
 8045e76:	bf00      	nop
 8045e78:	3714      	adds	r7, #20
 8045e7a:	46bd      	mov	sp, r7
 8045e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e80:	4770      	bx	lr
 8045e82:	bf00      	nop
 8045e84:	40010000 	.word	0x40010000
 8045e88:	40000400 	.word	0x40000400
 8045e8c:	40000800 	.word	0x40000800
 8045e90:	40000c00 	.word	0x40000c00
 8045e94:	40010400 	.word	0x40010400
 8045e98:	40014000 	.word	0x40014000
 8045e9c:	40014400 	.word	0x40014400
 8045ea0:	40014800 	.word	0x40014800
 8045ea4:	40001800 	.word	0x40001800
 8045ea8:	40001c00 	.word	0x40001c00
 8045eac:	40002000 	.word	0x40002000

08045eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8045eb0:	b480      	push	{r7}
 8045eb2:	b085      	sub	sp, #20
 8045eb4:	af00      	add	r7, sp, #0
 8045eb6:	6078      	str	r0, [r7, #4]
 8045eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8045eba:	687b      	ldr	r3, [r7, #4]
 8045ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8045ec0:	2b01      	cmp	r3, #1
 8045ec2:	d101      	bne.n	8045ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8045ec4:	2302      	movs	r3, #2
 8045ec6:	e06d      	b.n	8045fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8045ec8:	687b      	ldr	r3, [r7, #4]
 8045eca:	2201      	movs	r2, #1
 8045ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8045ed0:	687b      	ldr	r3, [r7, #4]
 8045ed2:	2202      	movs	r2, #2
 8045ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8045ed8:	687b      	ldr	r3, [r7, #4]
 8045eda:	681b      	ldr	r3, [r3, #0]
 8045edc:	685b      	ldr	r3, [r3, #4]
 8045ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8045ee0:	687b      	ldr	r3, [r7, #4]
 8045ee2:	681b      	ldr	r3, [r3, #0]
 8045ee4:	689b      	ldr	r3, [r3, #8]
 8045ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8045ee8:	687b      	ldr	r3, [r7, #4]
 8045eea:	681b      	ldr	r3, [r3, #0]
 8045eec:	4a30      	ldr	r2, [pc, #192]	; (8045fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8045eee:	4293      	cmp	r3, r2
 8045ef0:	d004      	beq.n	8045efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8045ef2:	687b      	ldr	r3, [r7, #4]
 8045ef4:	681b      	ldr	r3, [r3, #0]
 8045ef6:	4a2f      	ldr	r2, [pc, #188]	; (8045fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8045ef8:	4293      	cmp	r3, r2
 8045efa:	d108      	bne.n	8045f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8045efc:	68fb      	ldr	r3, [r7, #12]
 8045efe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8045f02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8045f04:	683b      	ldr	r3, [r7, #0]
 8045f06:	685b      	ldr	r3, [r3, #4]
 8045f08:	68fa      	ldr	r2, [r7, #12]
 8045f0a:	4313      	orrs	r3, r2
 8045f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8045f0e:	68fb      	ldr	r3, [r7, #12]
 8045f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8045f14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8045f16:	683b      	ldr	r3, [r7, #0]
 8045f18:	681b      	ldr	r3, [r3, #0]
 8045f1a:	68fa      	ldr	r2, [r7, #12]
 8045f1c:	4313      	orrs	r3, r2
 8045f1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8045f20:	687b      	ldr	r3, [r7, #4]
 8045f22:	681b      	ldr	r3, [r3, #0]
 8045f24:	68fa      	ldr	r2, [r7, #12]
 8045f26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8045f28:	687b      	ldr	r3, [r7, #4]
 8045f2a:	681b      	ldr	r3, [r3, #0]
 8045f2c:	4a20      	ldr	r2, [pc, #128]	; (8045fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8045f2e:	4293      	cmp	r3, r2
 8045f30:	d022      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f32:	687b      	ldr	r3, [r7, #4]
 8045f34:	681b      	ldr	r3, [r3, #0]
 8045f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8045f3a:	d01d      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f3c:	687b      	ldr	r3, [r7, #4]
 8045f3e:	681b      	ldr	r3, [r3, #0]
 8045f40:	4a1d      	ldr	r2, [pc, #116]	; (8045fb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8045f42:	4293      	cmp	r3, r2
 8045f44:	d018      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f46:	687b      	ldr	r3, [r7, #4]
 8045f48:	681b      	ldr	r3, [r3, #0]
 8045f4a:	4a1c      	ldr	r2, [pc, #112]	; (8045fbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8045f4c:	4293      	cmp	r3, r2
 8045f4e:	d013      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f50:	687b      	ldr	r3, [r7, #4]
 8045f52:	681b      	ldr	r3, [r3, #0]
 8045f54:	4a1a      	ldr	r2, [pc, #104]	; (8045fc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8045f56:	4293      	cmp	r3, r2
 8045f58:	d00e      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f5a:	687b      	ldr	r3, [r7, #4]
 8045f5c:	681b      	ldr	r3, [r3, #0]
 8045f5e:	4a15      	ldr	r2, [pc, #84]	; (8045fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8045f60:	4293      	cmp	r3, r2
 8045f62:	d009      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f64:	687b      	ldr	r3, [r7, #4]
 8045f66:	681b      	ldr	r3, [r3, #0]
 8045f68:	4a16      	ldr	r2, [pc, #88]	; (8045fc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8045f6a:	4293      	cmp	r3, r2
 8045f6c:	d004      	beq.n	8045f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8045f6e:	687b      	ldr	r3, [r7, #4]
 8045f70:	681b      	ldr	r3, [r3, #0]
 8045f72:	4a15      	ldr	r2, [pc, #84]	; (8045fc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8045f74:	4293      	cmp	r3, r2
 8045f76:	d10c      	bne.n	8045f92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8045f78:	68bb      	ldr	r3, [r7, #8]
 8045f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8045f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8045f80:	683b      	ldr	r3, [r7, #0]
 8045f82:	689b      	ldr	r3, [r3, #8]
 8045f84:	68ba      	ldr	r2, [r7, #8]
 8045f86:	4313      	orrs	r3, r2
 8045f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8045f8a:	687b      	ldr	r3, [r7, #4]
 8045f8c:	681b      	ldr	r3, [r3, #0]
 8045f8e:	68ba      	ldr	r2, [r7, #8]
 8045f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8045f92:	687b      	ldr	r3, [r7, #4]
 8045f94:	2201      	movs	r2, #1
 8045f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8045f9a:	687b      	ldr	r3, [r7, #4]
 8045f9c:	2200      	movs	r2, #0
 8045f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8045fa2:	2300      	movs	r3, #0
}
 8045fa4:	4618      	mov	r0, r3
 8045fa6:	3714      	adds	r7, #20
 8045fa8:	46bd      	mov	sp, r7
 8045faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045fae:	4770      	bx	lr
 8045fb0:	40010000 	.word	0x40010000
 8045fb4:	40010400 	.word	0x40010400
 8045fb8:	40000400 	.word	0x40000400
 8045fbc:	40000800 	.word	0x40000800
 8045fc0:	40000c00 	.word	0x40000c00
 8045fc4:	40014000 	.word	0x40014000
 8045fc8:	40001800 	.word	0x40001800

08045fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8045fcc:	b480      	push	{r7}
 8045fce:	b083      	sub	sp, #12
 8045fd0:	af00      	add	r7, sp, #0
 8045fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8045fd4:	bf00      	nop
 8045fd6:	370c      	adds	r7, #12
 8045fd8:	46bd      	mov	sp, r7
 8045fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045fde:	4770      	bx	lr

08045fe0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8045fe0:	b480      	push	{r7}
 8045fe2:	b083      	sub	sp, #12
 8045fe4:	af00      	add	r7, sp, #0
 8045fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8045fe8:	bf00      	nop
 8045fea:	370c      	adds	r7, #12
 8045fec:	46bd      	mov	sp, r7
 8045fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045ff2:	4770      	bx	lr

08045ff4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8045ff4:	b480      	push	{r7}
 8045ff6:	b083      	sub	sp, #12
 8045ff8:	af00      	add	r7, sp, #0
 8045ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8045ffc:	bf00      	nop
 8045ffe:	370c      	adds	r7, #12
 8046000:	46bd      	mov	sp, r7
 8046002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046006:	4770      	bx	lr

08046008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8046008:	b580      	push	{r7, lr}
 804600a:	b082      	sub	sp, #8
 804600c:	af00      	add	r7, sp, #0
 804600e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8046010:	687b      	ldr	r3, [r7, #4]
 8046012:	2b00      	cmp	r3, #0
 8046014:	d101      	bne.n	804601a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8046016:	2301      	movs	r3, #1
 8046018:	e040      	b.n	804609c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804601a:	687b      	ldr	r3, [r7, #4]
 804601c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804601e:	2b00      	cmp	r3, #0
 8046020:	d106      	bne.n	8046030 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8046022:	687b      	ldr	r3, [r7, #4]
 8046024:	2200      	movs	r2, #0
 8046026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804602a:	6878      	ldr	r0, [r7, #4]
 804602c:	f7fb fab4 	bl	8041598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8046030:	687b      	ldr	r3, [r7, #4]
 8046032:	2224      	movs	r2, #36	; 0x24
 8046034:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8046036:	687b      	ldr	r3, [r7, #4]
 8046038:	681b      	ldr	r3, [r3, #0]
 804603a:	681a      	ldr	r2, [r3, #0]
 804603c:	687b      	ldr	r3, [r7, #4]
 804603e:	681b      	ldr	r3, [r3, #0]
 8046040:	f022 0201 	bic.w	r2, r2, #1
 8046044:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8046046:	6878      	ldr	r0, [r7, #4]
 8046048:	f000 fc44 	bl	80468d4 <UART_SetConfig>
 804604c:	4603      	mov	r3, r0
 804604e:	2b01      	cmp	r3, #1
 8046050:	d101      	bne.n	8046056 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8046052:	2301      	movs	r3, #1
 8046054:	e022      	b.n	804609c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8046056:	687b      	ldr	r3, [r7, #4]
 8046058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804605a:	2b00      	cmp	r3, #0
 804605c:	d002      	beq.n	8046064 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 804605e:	6878      	ldr	r0, [r7, #4]
 8046060:	f000 fe9c 	bl	8046d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8046064:	687b      	ldr	r3, [r7, #4]
 8046066:	681b      	ldr	r3, [r3, #0]
 8046068:	685a      	ldr	r2, [r3, #4]
 804606a:	687b      	ldr	r3, [r7, #4]
 804606c:	681b      	ldr	r3, [r3, #0]
 804606e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8046072:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8046074:	687b      	ldr	r3, [r7, #4]
 8046076:	681b      	ldr	r3, [r3, #0]
 8046078:	689a      	ldr	r2, [r3, #8]
 804607a:	687b      	ldr	r3, [r7, #4]
 804607c:	681b      	ldr	r3, [r3, #0]
 804607e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8046082:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8046084:	687b      	ldr	r3, [r7, #4]
 8046086:	681b      	ldr	r3, [r3, #0]
 8046088:	681a      	ldr	r2, [r3, #0]
 804608a:	687b      	ldr	r3, [r7, #4]
 804608c:	681b      	ldr	r3, [r3, #0]
 804608e:	f042 0201 	orr.w	r2, r2, #1
 8046092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8046094:	6878      	ldr	r0, [r7, #4]
 8046096:	f000 ff23 	bl	8046ee0 <UART_CheckIdleState>
 804609a:	4603      	mov	r3, r0
}
 804609c:	4618      	mov	r0, r3
 804609e:	3708      	adds	r7, #8
 80460a0:	46bd      	mov	sp, r7
 80460a2:	bd80      	pop	{r7, pc}

080460a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80460a4:	b580      	push	{r7, lr}
 80460a6:	b08a      	sub	sp, #40	; 0x28
 80460a8:	af02      	add	r7, sp, #8
 80460aa:	60f8      	str	r0, [r7, #12]
 80460ac:	60b9      	str	r1, [r7, #8]
 80460ae:	603b      	str	r3, [r7, #0]
 80460b0:	4613      	mov	r3, r2
 80460b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80460b4:	68fb      	ldr	r3, [r7, #12]
 80460b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80460b8:	2b20      	cmp	r3, #32
 80460ba:	d171      	bne.n	80461a0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80460bc:	68bb      	ldr	r3, [r7, #8]
 80460be:	2b00      	cmp	r3, #0
 80460c0:	d002      	beq.n	80460c8 <HAL_UART_Transmit+0x24>
 80460c2:	88fb      	ldrh	r3, [r7, #6]
 80460c4:	2b00      	cmp	r3, #0
 80460c6:	d101      	bne.n	80460cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80460c8:	2301      	movs	r3, #1
 80460ca:	e06a      	b.n	80461a2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80460cc:	68fb      	ldr	r3, [r7, #12]
 80460ce:	2200      	movs	r2, #0
 80460d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80460d4:	68fb      	ldr	r3, [r7, #12]
 80460d6:	2221      	movs	r2, #33	; 0x21
 80460d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80460da:	f7fb ffc9 	bl	8042070 <HAL_GetTick>
 80460de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80460e0:	68fb      	ldr	r3, [r7, #12]
 80460e2:	88fa      	ldrh	r2, [r7, #6]
 80460e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80460e8:	68fb      	ldr	r3, [r7, #12]
 80460ea:	88fa      	ldrh	r2, [r7, #6]
 80460ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80460f0:	68fb      	ldr	r3, [r7, #12]
 80460f2:	689b      	ldr	r3, [r3, #8]
 80460f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80460f8:	d108      	bne.n	804610c <HAL_UART_Transmit+0x68>
 80460fa:	68fb      	ldr	r3, [r7, #12]
 80460fc:	691b      	ldr	r3, [r3, #16]
 80460fe:	2b00      	cmp	r3, #0
 8046100:	d104      	bne.n	804610c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8046102:	2300      	movs	r3, #0
 8046104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8046106:	68bb      	ldr	r3, [r7, #8]
 8046108:	61bb      	str	r3, [r7, #24]
 804610a:	e003      	b.n	8046114 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 804610c:	68bb      	ldr	r3, [r7, #8]
 804610e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8046110:	2300      	movs	r3, #0
 8046112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8046114:	e02c      	b.n	8046170 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8046116:	683b      	ldr	r3, [r7, #0]
 8046118:	9300      	str	r3, [sp, #0]
 804611a:	697b      	ldr	r3, [r7, #20]
 804611c:	2200      	movs	r2, #0
 804611e:	2180      	movs	r1, #128	; 0x80
 8046120:	68f8      	ldr	r0, [r7, #12]
 8046122:	f000 ff14 	bl	8046f4e <UART_WaitOnFlagUntilTimeout>
 8046126:	4603      	mov	r3, r0
 8046128:	2b00      	cmp	r3, #0
 804612a:	d001      	beq.n	8046130 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 804612c:	2303      	movs	r3, #3
 804612e:	e038      	b.n	80461a2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8046130:	69fb      	ldr	r3, [r7, #28]
 8046132:	2b00      	cmp	r3, #0
 8046134:	d10b      	bne.n	804614e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8046136:	69bb      	ldr	r3, [r7, #24]
 8046138:	881b      	ldrh	r3, [r3, #0]
 804613a:	461a      	mov	r2, r3
 804613c:	68fb      	ldr	r3, [r7, #12]
 804613e:	681b      	ldr	r3, [r3, #0]
 8046140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8046144:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8046146:	69bb      	ldr	r3, [r7, #24]
 8046148:	3302      	adds	r3, #2
 804614a:	61bb      	str	r3, [r7, #24]
 804614c:	e007      	b.n	804615e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 804614e:	69fb      	ldr	r3, [r7, #28]
 8046150:	781a      	ldrb	r2, [r3, #0]
 8046152:	68fb      	ldr	r3, [r7, #12]
 8046154:	681b      	ldr	r3, [r3, #0]
 8046156:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8046158:	69fb      	ldr	r3, [r7, #28]
 804615a:	3301      	adds	r3, #1
 804615c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804615e:	68fb      	ldr	r3, [r7, #12]
 8046160:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8046164:	b29b      	uxth	r3, r3
 8046166:	3b01      	subs	r3, #1
 8046168:	b29a      	uxth	r2, r3
 804616a:	68fb      	ldr	r3, [r7, #12]
 804616c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8046170:	68fb      	ldr	r3, [r7, #12]
 8046172:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8046176:	b29b      	uxth	r3, r3
 8046178:	2b00      	cmp	r3, #0
 804617a:	d1cc      	bne.n	8046116 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 804617c:	683b      	ldr	r3, [r7, #0]
 804617e:	9300      	str	r3, [sp, #0]
 8046180:	697b      	ldr	r3, [r7, #20]
 8046182:	2200      	movs	r2, #0
 8046184:	2140      	movs	r1, #64	; 0x40
 8046186:	68f8      	ldr	r0, [r7, #12]
 8046188:	f000 fee1 	bl	8046f4e <UART_WaitOnFlagUntilTimeout>
 804618c:	4603      	mov	r3, r0
 804618e:	2b00      	cmp	r3, #0
 8046190:	d001      	beq.n	8046196 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8046192:	2303      	movs	r3, #3
 8046194:	e005      	b.n	80461a2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8046196:	68fb      	ldr	r3, [r7, #12]
 8046198:	2220      	movs	r2, #32
 804619a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 804619c:	2300      	movs	r3, #0
 804619e:	e000      	b.n	80461a2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80461a0:	2302      	movs	r3, #2
  }
}
 80461a2:	4618      	mov	r0, r3
 80461a4:	3720      	adds	r7, #32
 80461a6:	46bd      	mov	sp, r7
 80461a8:	bd80      	pop	{r7, pc}
	...

080461ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80461ac:	b480      	push	{r7}
 80461ae:	b08b      	sub	sp, #44	; 0x2c
 80461b0:	af00      	add	r7, sp, #0
 80461b2:	60f8      	str	r0, [r7, #12]
 80461b4:	60b9      	str	r1, [r7, #8]
 80461b6:	4613      	mov	r3, r2
 80461b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80461ba:	68fb      	ldr	r3, [r7, #12]
 80461bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80461be:	2b20      	cmp	r3, #32
 80461c0:	d147      	bne.n	8046252 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80461c2:	68bb      	ldr	r3, [r7, #8]
 80461c4:	2b00      	cmp	r3, #0
 80461c6:	d002      	beq.n	80461ce <HAL_UART_Transmit_IT+0x22>
 80461c8:	88fb      	ldrh	r3, [r7, #6]
 80461ca:	2b00      	cmp	r3, #0
 80461cc:	d101      	bne.n	80461d2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80461ce:	2301      	movs	r3, #1
 80461d0:	e040      	b.n	8046254 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80461d2:	68fb      	ldr	r3, [r7, #12]
 80461d4:	68ba      	ldr	r2, [r7, #8]
 80461d6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80461d8:	68fb      	ldr	r3, [r7, #12]
 80461da:	88fa      	ldrh	r2, [r7, #6]
 80461dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80461e0:	68fb      	ldr	r3, [r7, #12]
 80461e2:	88fa      	ldrh	r2, [r7, #6]
 80461e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80461e8:	68fb      	ldr	r3, [r7, #12]
 80461ea:	2200      	movs	r2, #0
 80461ec:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80461ee:	68fb      	ldr	r3, [r7, #12]
 80461f0:	2200      	movs	r2, #0
 80461f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80461f6:	68fb      	ldr	r3, [r7, #12]
 80461f8:	2221      	movs	r2, #33	; 0x21
 80461fa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80461fc:	68fb      	ldr	r3, [r7, #12]
 80461fe:	689b      	ldr	r3, [r3, #8]
 8046200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8046204:	d107      	bne.n	8046216 <HAL_UART_Transmit_IT+0x6a>
 8046206:	68fb      	ldr	r3, [r7, #12]
 8046208:	691b      	ldr	r3, [r3, #16]
 804620a:	2b00      	cmp	r3, #0
 804620c:	d103      	bne.n	8046216 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 804620e:	68fb      	ldr	r3, [r7, #12]
 8046210:	4a13      	ldr	r2, [pc, #76]	; (8046260 <HAL_UART_Transmit_IT+0xb4>)
 8046212:	66da      	str	r2, [r3, #108]	; 0x6c
 8046214:	e002      	b.n	804621c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8046216:	68fb      	ldr	r3, [r7, #12]
 8046218:	4a12      	ldr	r2, [pc, #72]	; (8046264 <HAL_UART_Transmit_IT+0xb8>)
 804621a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 804621c:	68fb      	ldr	r3, [r7, #12]
 804621e:	681b      	ldr	r3, [r3, #0]
 8046220:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046222:	697b      	ldr	r3, [r7, #20]
 8046224:	e853 3f00 	ldrex	r3, [r3]
 8046228:	613b      	str	r3, [r7, #16]
   return(result);
 804622a:	693b      	ldr	r3, [r7, #16]
 804622c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8046230:	627b      	str	r3, [r7, #36]	; 0x24
 8046232:	68fb      	ldr	r3, [r7, #12]
 8046234:	681b      	ldr	r3, [r3, #0]
 8046236:	461a      	mov	r2, r3
 8046238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804623a:	623b      	str	r3, [r7, #32]
 804623c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804623e:	69f9      	ldr	r1, [r7, #28]
 8046240:	6a3a      	ldr	r2, [r7, #32]
 8046242:	e841 2300 	strex	r3, r2, [r1]
 8046246:	61bb      	str	r3, [r7, #24]
   return(result);
 8046248:	69bb      	ldr	r3, [r7, #24]
 804624a:	2b00      	cmp	r3, #0
 804624c:	d1e6      	bne.n	804621c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 804624e:	2300      	movs	r3, #0
 8046250:	e000      	b.n	8046254 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8046252:	2302      	movs	r3, #2
  }
}
 8046254:	4618      	mov	r0, r3
 8046256:	372c      	adds	r7, #44	; 0x2c
 8046258:	46bd      	mov	sp, r7
 804625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804625e:	4770      	bx	lr
 8046260:	08047413 	.word	0x08047413
 8046264:	0804735d 	.word	0x0804735d

08046268 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8046268:	b580      	push	{r7, lr}
 804626a:	b08a      	sub	sp, #40	; 0x28
 804626c:	af00      	add	r7, sp, #0
 804626e:	60f8      	str	r0, [r7, #12]
 8046270:	60b9      	str	r1, [r7, #8]
 8046272:	4613      	mov	r3, r2
 8046274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8046276:	68fb      	ldr	r3, [r7, #12]
 8046278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804627c:	2b20      	cmp	r3, #32
 804627e:	d132      	bne.n	80462e6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8046280:	68bb      	ldr	r3, [r7, #8]
 8046282:	2b00      	cmp	r3, #0
 8046284:	d002      	beq.n	804628c <HAL_UART_Receive_IT+0x24>
 8046286:	88fb      	ldrh	r3, [r7, #6]
 8046288:	2b00      	cmp	r3, #0
 804628a:	d101      	bne.n	8046290 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 804628c:	2301      	movs	r3, #1
 804628e:	e02b      	b.n	80462e8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046290:	68fb      	ldr	r3, [r7, #12]
 8046292:	2200      	movs	r2, #0
 8046294:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8046296:	68fb      	ldr	r3, [r7, #12]
 8046298:	681b      	ldr	r3, [r3, #0]
 804629a:	685b      	ldr	r3, [r3, #4]
 804629c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80462a0:	2b00      	cmp	r3, #0
 80462a2:	d018      	beq.n	80462d6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80462a4:	68fb      	ldr	r3, [r7, #12]
 80462a6:	681b      	ldr	r3, [r3, #0]
 80462a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80462aa:	697b      	ldr	r3, [r7, #20]
 80462ac:	e853 3f00 	ldrex	r3, [r3]
 80462b0:	613b      	str	r3, [r7, #16]
   return(result);
 80462b2:	693b      	ldr	r3, [r7, #16]
 80462b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80462b8:	627b      	str	r3, [r7, #36]	; 0x24
 80462ba:	68fb      	ldr	r3, [r7, #12]
 80462bc:	681b      	ldr	r3, [r3, #0]
 80462be:	461a      	mov	r2, r3
 80462c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80462c2:	623b      	str	r3, [r7, #32]
 80462c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80462c6:	69f9      	ldr	r1, [r7, #28]
 80462c8:	6a3a      	ldr	r2, [r7, #32]
 80462ca:	e841 2300 	strex	r3, r2, [r1]
 80462ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80462d0:	69bb      	ldr	r3, [r7, #24]
 80462d2:	2b00      	cmp	r3, #0
 80462d4:	d1e6      	bne.n	80462a4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80462d6:	88fb      	ldrh	r3, [r7, #6]
 80462d8:	461a      	mov	r2, r3
 80462da:	68b9      	ldr	r1, [r7, #8]
 80462dc:	68f8      	ldr	r0, [r7, #12]
 80462de:	f000 fefd 	bl	80470dc <UART_Start_Receive_IT>
 80462e2:	4603      	mov	r3, r0
 80462e4:	e000      	b.n	80462e8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80462e6:	2302      	movs	r3, #2
  }
}
 80462e8:	4618      	mov	r0, r3
 80462ea:	3728      	adds	r7, #40	; 0x28
 80462ec:	46bd      	mov	sp, r7
 80462ee:	bd80      	pop	{r7, pc}

080462f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80462f0:	b580      	push	{r7, lr}
 80462f2:	b0ba      	sub	sp, #232	; 0xe8
 80462f4:	af00      	add	r7, sp, #0
 80462f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80462f8:	687b      	ldr	r3, [r7, #4]
 80462fa:	681b      	ldr	r3, [r3, #0]
 80462fc:	69db      	ldr	r3, [r3, #28]
 80462fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8046302:	687b      	ldr	r3, [r7, #4]
 8046304:	681b      	ldr	r3, [r3, #0]
 8046306:	681b      	ldr	r3, [r3, #0]
 8046308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 804630c:	687b      	ldr	r3, [r7, #4]
 804630e:	681b      	ldr	r3, [r3, #0]
 8046310:	689b      	ldr	r3, [r3, #8]
 8046312:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8046316:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 804631a:	f640 030f 	movw	r3, #2063	; 0x80f
 804631e:	4013      	ands	r3, r2
 8046320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8046324:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8046328:	2b00      	cmp	r3, #0
 804632a:	d115      	bne.n	8046358 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 804632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8046330:	f003 0320 	and.w	r3, r3, #32
 8046334:	2b00      	cmp	r3, #0
 8046336:	d00f      	beq.n	8046358 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8046338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804633c:	f003 0320 	and.w	r3, r3, #32
 8046340:	2b00      	cmp	r3, #0
 8046342:	d009      	beq.n	8046358 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8046344:	687b      	ldr	r3, [r7, #4]
 8046346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046348:	2b00      	cmp	r3, #0
 804634a:	f000 8297 	beq.w	804687c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 804634e:	687b      	ldr	r3, [r7, #4]
 8046350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046352:	6878      	ldr	r0, [r7, #4]
 8046354:	4798      	blx	r3
      }
      return;
 8046356:	e291      	b.n	804687c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8046358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 804635c:	2b00      	cmp	r3, #0
 804635e:	f000 8117 	beq.w	8046590 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8046362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8046366:	f003 0301 	and.w	r3, r3, #1
 804636a:	2b00      	cmp	r3, #0
 804636c:	d106      	bne.n	804637c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 804636e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8046372:	4b85      	ldr	r3, [pc, #532]	; (8046588 <HAL_UART_IRQHandler+0x298>)
 8046374:	4013      	ands	r3, r2
 8046376:	2b00      	cmp	r3, #0
 8046378:	f000 810a 	beq.w	8046590 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 804637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8046380:	f003 0301 	and.w	r3, r3, #1
 8046384:	2b00      	cmp	r3, #0
 8046386:	d011      	beq.n	80463ac <HAL_UART_IRQHandler+0xbc>
 8046388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046390:	2b00      	cmp	r3, #0
 8046392:	d00b      	beq.n	80463ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8046394:	687b      	ldr	r3, [r7, #4]
 8046396:	681b      	ldr	r3, [r3, #0]
 8046398:	2201      	movs	r2, #1
 804639a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 804639c:	687b      	ldr	r3, [r7, #4]
 804639e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80463a2:	f043 0201 	orr.w	r2, r3, #1
 80463a6:	687b      	ldr	r3, [r7, #4]
 80463a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80463ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80463b0:	f003 0302 	and.w	r3, r3, #2
 80463b4:	2b00      	cmp	r3, #0
 80463b6:	d011      	beq.n	80463dc <HAL_UART_IRQHandler+0xec>
 80463b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80463bc:	f003 0301 	and.w	r3, r3, #1
 80463c0:	2b00      	cmp	r3, #0
 80463c2:	d00b      	beq.n	80463dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80463c4:	687b      	ldr	r3, [r7, #4]
 80463c6:	681b      	ldr	r3, [r3, #0]
 80463c8:	2202      	movs	r2, #2
 80463ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80463cc:	687b      	ldr	r3, [r7, #4]
 80463ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80463d2:	f043 0204 	orr.w	r2, r3, #4
 80463d6:	687b      	ldr	r3, [r7, #4]
 80463d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80463dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80463e0:	f003 0304 	and.w	r3, r3, #4
 80463e4:	2b00      	cmp	r3, #0
 80463e6:	d011      	beq.n	804640c <HAL_UART_IRQHandler+0x11c>
 80463e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80463ec:	f003 0301 	and.w	r3, r3, #1
 80463f0:	2b00      	cmp	r3, #0
 80463f2:	d00b      	beq.n	804640c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80463f4:	687b      	ldr	r3, [r7, #4]
 80463f6:	681b      	ldr	r3, [r3, #0]
 80463f8:	2204      	movs	r2, #4
 80463fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80463fc:	687b      	ldr	r3, [r7, #4]
 80463fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046402:	f043 0202 	orr.w	r2, r3, #2
 8046406:	687b      	ldr	r3, [r7, #4]
 8046408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 804640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8046410:	f003 0308 	and.w	r3, r3, #8
 8046414:	2b00      	cmp	r3, #0
 8046416:	d017      	beq.n	8046448 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8046418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804641c:	f003 0320 	and.w	r3, r3, #32
 8046420:	2b00      	cmp	r3, #0
 8046422:	d105      	bne.n	8046430 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8046424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8046428:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 804642c:	2b00      	cmp	r3, #0
 804642e:	d00b      	beq.n	8046448 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8046430:	687b      	ldr	r3, [r7, #4]
 8046432:	681b      	ldr	r3, [r3, #0]
 8046434:	2208      	movs	r2, #8
 8046436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8046438:	687b      	ldr	r3, [r7, #4]
 804643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804643e:	f043 0208 	orr.w	r2, r3, #8
 8046442:	687b      	ldr	r3, [r7, #4]
 8046444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8046448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804644c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8046450:	2b00      	cmp	r3, #0
 8046452:	d012      	beq.n	804647a <HAL_UART_IRQHandler+0x18a>
 8046454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8046458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804645c:	2b00      	cmp	r3, #0
 804645e:	d00c      	beq.n	804647a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8046460:	687b      	ldr	r3, [r7, #4]
 8046462:	681b      	ldr	r3, [r3, #0]
 8046464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8046468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 804646a:	687b      	ldr	r3, [r7, #4]
 804646c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046470:	f043 0220 	orr.w	r2, r3, #32
 8046474:	687b      	ldr	r3, [r7, #4]
 8046476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 804647a:	687b      	ldr	r3, [r7, #4]
 804647c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8046480:	2b00      	cmp	r3, #0
 8046482:	f000 81fd 	beq.w	8046880 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8046486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804648a:	f003 0320 	and.w	r3, r3, #32
 804648e:	2b00      	cmp	r3, #0
 8046490:	d00d      	beq.n	80464ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8046492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8046496:	f003 0320 	and.w	r3, r3, #32
 804649a:	2b00      	cmp	r3, #0
 804649c:	d007      	beq.n	80464ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 804649e:	687b      	ldr	r3, [r7, #4]
 80464a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80464a2:	2b00      	cmp	r3, #0
 80464a4:	d003      	beq.n	80464ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80464a6:	687b      	ldr	r3, [r7, #4]
 80464a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80464aa:	6878      	ldr	r0, [r7, #4]
 80464ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80464ae:	687b      	ldr	r3, [r7, #4]
 80464b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80464b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80464b8:	687b      	ldr	r3, [r7, #4]
 80464ba:	681b      	ldr	r3, [r3, #0]
 80464bc:	689b      	ldr	r3, [r3, #8]
 80464be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80464c2:	2b40      	cmp	r3, #64	; 0x40
 80464c4:	d005      	beq.n	80464d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80464c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80464ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80464ce:	2b00      	cmp	r3, #0
 80464d0:	d04f      	beq.n	8046572 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80464d2:	6878      	ldr	r0, [r7, #4]
 80464d4:	f000 fec8 	bl	8047268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80464d8:	687b      	ldr	r3, [r7, #4]
 80464da:	681b      	ldr	r3, [r3, #0]
 80464dc:	689b      	ldr	r3, [r3, #8]
 80464de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80464e2:	2b40      	cmp	r3, #64	; 0x40
 80464e4:	d141      	bne.n	804656a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80464e6:	687b      	ldr	r3, [r7, #4]
 80464e8:	681b      	ldr	r3, [r3, #0]
 80464ea:	3308      	adds	r3, #8
 80464ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80464f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80464f4:	e853 3f00 	ldrex	r3, [r3]
 80464f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80464fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8046500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8046504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8046508:	687b      	ldr	r3, [r7, #4]
 804650a:	681b      	ldr	r3, [r3, #0]
 804650c:	3308      	adds	r3, #8
 804650e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8046512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8046516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804651a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 804651e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8046522:	e841 2300 	strex	r3, r2, [r1]
 8046526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 804652a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 804652e:	2b00      	cmp	r3, #0
 8046530:	d1d9      	bne.n	80464e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8046532:	687b      	ldr	r3, [r7, #4]
 8046534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046536:	2b00      	cmp	r3, #0
 8046538:	d013      	beq.n	8046562 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804653a:	687b      	ldr	r3, [r7, #4]
 804653c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804653e:	4a13      	ldr	r2, [pc, #76]	; (804658c <HAL_UART_IRQHandler+0x29c>)
 8046540:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8046542:	687b      	ldr	r3, [r7, #4]
 8046544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046546:	4618      	mov	r0, r3
 8046548:	f7fc fc7f 	bl	8042e4a <HAL_DMA_Abort_IT>
 804654c:	4603      	mov	r3, r0
 804654e:	2b00      	cmp	r3, #0
 8046550:	d017      	beq.n	8046582 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8046552:	687b      	ldr	r3, [r7, #4]
 8046554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8046558:	687a      	ldr	r2, [r7, #4]
 804655a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 804655c:	4610      	mov	r0, r2
 804655e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046560:	e00f      	b.n	8046582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8046562:	6878      	ldr	r0, [r7, #4]
 8046564:	f000 f9a0 	bl	80468a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046568:	e00b      	b.n	8046582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 804656a:	6878      	ldr	r0, [r7, #4]
 804656c:	f000 f99c 	bl	80468a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046570:	e007      	b.n	8046582 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8046572:	6878      	ldr	r0, [r7, #4]
 8046574:	f000 f998 	bl	80468a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046578:	687b      	ldr	r3, [r7, #4]
 804657a:	2200      	movs	r2, #0
 804657c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8046580:	e17e      	b.n	8046880 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8046582:	bf00      	nop
    return;
 8046584:	e17c      	b.n	8046880 <HAL_UART_IRQHandler+0x590>
 8046586:	bf00      	nop
 8046588:	04000120 	.word	0x04000120
 804658c:	08047331 	.word	0x08047331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8046590:	687b      	ldr	r3, [r7, #4]
 8046592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046594:	2b01      	cmp	r3, #1
 8046596:	f040 814c 	bne.w	8046832 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 804659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 804659e:	f003 0310 	and.w	r3, r3, #16
 80465a2:	2b00      	cmp	r3, #0
 80465a4:	f000 8145 	beq.w	8046832 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80465a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80465ac:	f003 0310 	and.w	r3, r3, #16
 80465b0:	2b00      	cmp	r3, #0
 80465b2:	f000 813e 	beq.w	8046832 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80465b6:	687b      	ldr	r3, [r7, #4]
 80465b8:	681b      	ldr	r3, [r3, #0]
 80465ba:	2210      	movs	r2, #16
 80465bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80465be:	687b      	ldr	r3, [r7, #4]
 80465c0:	681b      	ldr	r3, [r3, #0]
 80465c2:	689b      	ldr	r3, [r3, #8]
 80465c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80465c8:	2b40      	cmp	r3, #64	; 0x40
 80465ca:	f040 80b6 	bne.w	804673a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80465ce:	687b      	ldr	r3, [r7, #4]
 80465d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80465d2:	681b      	ldr	r3, [r3, #0]
 80465d4:	685b      	ldr	r3, [r3, #4]
 80465d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80465da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80465de:	2b00      	cmp	r3, #0
 80465e0:	f000 8150 	beq.w	8046884 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80465e4:	687b      	ldr	r3, [r7, #4]
 80465e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80465ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80465ee:	429a      	cmp	r2, r3
 80465f0:	f080 8148 	bcs.w	8046884 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80465f4:	687b      	ldr	r3, [r7, #4]
 80465f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80465fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80465fe:	687b      	ldr	r3, [r7, #4]
 8046600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046602:	69db      	ldr	r3, [r3, #28]
 8046604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8046608:	f000 8086 	beq.w	8046718 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804660c:	687b      	ldr	r3, [r7, #4]
 804660e:	681b      	ldr	r3, [r3, #0]
 8046610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8046618:	e853 3f00 	ldrex	r3, [r3]
 804661c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8046620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8046624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8046628:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 804662c:	687b      	ldr	r3, [r7, #4]
 804662e:	681b      	ldr	r3, [r3, #0]
 8046630:	461a      	mov	r2, r3
 8046632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8046636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 804663a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804663e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8046642:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8046646:	e841 2300 	strex	r3, r2, [r1]
 804664a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 804664e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8046652:	2b00      	cmp	r3, #0
 8046654:	d1da      	bne.n	804660c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046656:	687b      	ldr	r3, [r7, #4]
 8046658:	681b      	ldr	r3, [r3, #0]
 804665a:	3308      	adds	r3, #8
 804665c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804665e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8046660:	e853 3f00 	ldrex	r3, [r3]
 8046664:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8046666:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8046668:	f023 0301 	bic.w	r3, r3, #1
 804666c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8046670:	687b      	ldr	r3, [r7, #4]
 8046672:	681b      	ldr	r3, [r3, #0]
 8046674:	3308      	adds	r3, #8
 8046676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 804667a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 804667e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046680:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8046682:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8046686:	e841 2300 	strex	r3, r2, [r1]
 804668a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 804668c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 804668e:	2b00      	cmp	r3, #0
 8046690:	d1e1      	bne.n	8046656 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8046692:	687b      	ldr	r3, [r7, #4]
 8046694:	681b      	ldr	r3, [r3, #0]
 8046696:	3308      	adds	r3, #8
 8046698:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804669a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 804669c:	e853 3f00 	ldrex	r3, [r3]
 80466a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80466a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80466a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80466a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80466ac:	687b      	ldr	r3, [r7, #4]
 80466ae:	681b      	ldr	r3, [r3, #0]
 80466b0:	3308      	adds	r3, #8
 80466b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80466b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80466b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80466ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80466bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80466be:	e841 2300 	strex	r3, r2, [r1]
 80466c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80466c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80466c6:	2b00      	cmp	r3, #0
 80466c8:	d1e3      	bne.n	8046692 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80466ca:	687b      	ldr	r3, [r7, #4]
 80466cc:	2220      	movs	r2, #32
 80466ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80466d2:	687b      	ldr	r3, [r7, #4]
 80466d4:	2200      	movs	r2, #0
 80466d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80466d8:	687b      	ldr	r3, [r7, #4]
 80466da:	681b      	ldr	r3, [r3, #0]
 80466dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80466de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80466e0:	e853 3f00 	ldrex	r3, [r3]
 80466e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80466e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80466e8:	f023 0310 	bic.w	r3, r3, #16
 80466ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80466f0:	687b      	ldr	r3, [r7, #4]
 80466f2:	681b      	ldr	r3, [r3, #0]
 80466f4:	461a      	mov	r2, r3
 80466f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80466fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80466fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80466fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8046700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8046702:	e841 2300 	strex	r3, r2, [r1]
 8046706:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8046708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804670a:	2b00      	cmp	r3, #0
 804670c:	d1e4      	bne.n	80466d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804670e:	687b      	ldr	r3, [r7, #4]
 8046710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046712:	4618      	mov	r0, r3
 8046714:	f7fc fb29 	bl	8042d6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8046718:	687b      	ldr	r3, [r7, #4]
 804671a:	2202      	movs	r2, #2
 804671c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 804671e:	687b      	ldr	r3, [r7, #4]
 8046720:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8046724:	687b      	ldr	r3, [r7, #4]
 8046726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 804672a:	b29b      	uxth	r3, r3
 804672c:	1ad3      	subs	r3, r2, r3
 804672e:	b29b      	uxth	r3, r3
 8046730:	4619      	mov	r1, r3
 8046732:	6878      	ldr	r0, [r7, #4]
 8046734:	f000 f8c2 	bl	80468bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8046738:	e0a4      	b.n	8046884 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 804673a:	687b      	ldr	r3, [r7, #4]
 804673c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8046740:	687b      	ldr	r3, [r7, #4]
 8046742:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8046746:	b29b      	uxth	r3, r3
 8046748:	1ad3      	subs	r3, r2, r3
 804674a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 804674e:	687b      	ldr	r3, [r7, #4]
 8046750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8046754:	b29b      	uxth	r3, r3
 8046756:	2b00      	cmp	r3, #0
 8046758:	f000 8096 	beq.w	8046888 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 804675c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8046760:	2b00      	cmp	r3, #0
 8046762:	f000 8091 	beq.w	8046888 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8046766:	687b      	ldr	r3, [r7, #4]
 8046768:	681b      	ldr	r3, [r3, #0]
 804676a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804676e:	e853 3f00 	ldrex	r3, [r3]
 8046772:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8046774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8046776:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804677a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 804677e:	687b      	ldr	r3, [r7, #4]
 8046780:	681b      	ldr	r3, [r3, #0]
 8046782:	461a      	mov	r2, r3
 8046784:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8046788:	647b      	str	r3, [r7, #68]	; 0x44
 804678a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804678c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 804678e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8046790:	e841 2300 	strex	r3, r2, [r1]
 8046794:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8046796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046798:	2b00      	cmp	r3, #0
 804679a:	d1e4      	bne.n	8046766 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804679c:	687b      	ldr	r3, [r7, #4]
 804679e:	681b      	ldr	r3, [r3, #0]
 80467a0:	3308      	adds	r3, #8
 80467a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80467a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80467a6:	e853 3f00 	ldrex	r3, [r3]
 80467aa:	623b      	str	r3, [r7, #32]
   return(result);
 80467ac:	6a3b      	ldr	r3, [r7, #32]
 80467ae:	f023 0301 	bic.w	r3, r3, #1
 80467b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80467b6:	687b      	ldr	r3, [r7, #4]
 80467b8:	681b      	ldr	r3, [r3, #0]
 80467ba:	3308      	adds	r3, #8
 80467bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80467c0:	633a      	str	r2, [r7, #48]	; 0x30
 80467c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80467c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80467c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80467c8:	e841 2300 	strex	r3, r2, [r1]
 80467cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80467ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80467d0:	2b00      	cmp	r3, #0
 80467d2:	d1e3      	bne.n	804679c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80467d4:	687b      	ldr	r3, [r7, #4]
 80467d6:	2220      	movs	r2, #32
 80467d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80467dc:	687b      	ldr	r3, [r7, #4]
 80467de:	2200      	movs	r2, #0
 80467e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80467e2:	687b      	ldr	r3, [r7, #4]
 80467e4:	2200      	movs	r2, #0
 80467e6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80467e8:	687b      	ldr	r3, [r7, #4]
 80467ea:	681b      	ldr	r3, [r3, #0]
 80467ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80467ee:	693b      	ldr	r3, [r7, #16]
 80467f0:	e853 3f00 	ldrex	r3, [r3]
 80467f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80467f6:	68fb      	ldr	r3, [r7, #12]
 80467f8:	f023 0310 	bic.w	r3, r3, #16
 80467fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8046800:	687b      	ldr	r3, [r7, #4]
 8046802:	681b      	ldr	r3, [r3, #0]
 8046804:	461a      	mov	r2, r3
 8046806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 804680a:	61fb      	str	r3, [r7, #28]
 804680c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804680e:	69b9      	ldr	r1, [r7, #24]
 8046810:	69fa      	ldr	r2, [r7, #28]
 8046812:	e841 2300 	strex	r3, r2, [r1]
 8046816:	617b      	str	r3, [r7, #20]
   return(result);
 8046818:	697b      	ldr	r3, [r7, #20]
 804681a:	2b00      	cmp	r3, #0
 804681c:	d1e4      	bne.n	80467e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 804681e:	687b      	ldr	r3, [r7, #4]
 8046820:	2202      	movs	r2, #2
 8046822:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8046824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8046828:	4619      	mov	r1, r3
 804682a:	6878      	ldr	r0, [r7, #4]
 804682c:	f000 f846 	bl	80468bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8046830:	e02a      	b.n	8046888 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8046832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8046836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804683a:	2b00      	cmp	r3, #0
 804683c:	d00e      	beq.n	804685c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 804683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8046842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046846:	2b00      	cmp	r3, #0
 8046848:	d008      	beq.n	804685c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 804684a:	687b      	ldr	r3, [r7, #4]
 804684c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804684e:	2b00      	cmp	r3, #0
 8046850:	d01c      	beq.n	804688c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8046852:	687b      	ldr	r3, [r7, #4]
 8046854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8046856:	6878      	ldr	r0, [r7, #4]
 8046858:	4798      	blx	r3
    }
    return;
 804685a:	e017      	b.n	804688c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 804685c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8046860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046864:	2b00      	cmp	r3, #0
 8046866:	d012      	beq.n	804688e <HAL_UART_IRQHandler+0x59e>
 8046868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 804686c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046870:	2b00      	cmp	r3, #0
 8046872:	d00c      	beq.n	804688e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8046874:	6878      	ldr	r0, [r7, #4]
 8046876:	f000 fe2c 	bl	80474d2 <UART_EndTransmit_IT>
    return;
 804687a:	e008      	b.n	804688e <HAL_UART_IRQHandler+0x59e>
      return;
 804687c:	bf00      	nop
 804687e:	e006      	b.n	804688e <HAL_UART_IRQHandler+0x59e>
    return;
 8046880:	bf00      	nop
 8046882:	e004      	b.n	804688e <HAL_UART_IRQHandler+0x59e>
      return;
 8046884:	bf00      	nop
 8046886:	e002      	b.n	804688e <HAL_UART_IRQHandler+0x59e>
      return;
 8046888:	bf00      	nop
 804688a:	e000      	b.n	804688e <HAL_UART_IRQHandler+0x59e>
    return;
 804688c:	bf00      	nop
  }

}
 804688e:	37e8      	adds	r7, #232	; 0xe8
 8046890:	46bd      	mov	sp, r7
 8046892:	bd80      	pop	{r7, pc}

08046894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8046894:	b480      	push	{r7}
 8046896:	b083      	sub	sp, #12
 8046898:	af00      	add	r7, sp, #0
 804689a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 804689c:	bf00      	nop
 804689e:	370c      	adds	r7, #12
 80468a0:	46bd      	mov	sp, r7
 80468a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80468a6:	4770      	bx	lr

080468a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80468a8:	b480      	push	{r7}
 80468aa:	b083      	sub	sp, #12
 80468ac:	af00      	add	r7, sp, #0
 80468ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80468b0:	bf00      	nop
 80468b2:	370c      	adds	r7, #12
 80468b4:	46bd      	mov	sp, r7
 80468b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80468ba:	4770      	bx	lr

080468bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80468bc:	b480      	push	{r7}
 80468be:	b083      	sub	sp, #12
 80468c0:	af00      	add	r7, sp, #0
 80468c2:	6078      	str	r0, [r7, #4]
 80468c4:	460b      	mov	r3, r1
 80468c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80468c8:	bf00      	nop
 80468ca:	370c      	adds	r7, #12
 80468cc:	46bd      	mov	sp, r7
 80468ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80468d2:	4770      	bx	lr

080468d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80468d4:	b580      	push	{r7, lr}
 80468d6:	b088      	sub	sp, #32
 80468d8:	af00      	add	r7, sp, #0
 80468da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80468dc:	2300      	movs	r3, #0
 80468de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80468e0:	687b      	ldr	r3, [r7, #4]
 80468e2:	689a      	ldr	r2, [r3, #8]
 80468e4:	687b      	ldr	r3, [r7, #4]
 80468e6:	691b      	ldr	r3, [r3, #16]
 80468e8:	431a      	orrs	r2, r3
 80468ea:	687b      	ldr	r3, [r7, #4]
 80468ec:	695b      	ldr	r3, [r3, #20]
 80468ee:	431a      	orrs	r2, r3
 80468f0:	687b      	ldr	r3, [r7, #4]
 80468f2:	69db      	ldr	r3, [r3, #28]
 80468f4:	4313      	orrs	r3, r2
 80468f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80468f8:	687b      	ldr	r3, [r7, #4]
 80468fa:	681b      	ldr	r3, [r3, #0]
 80468fc:	681a      	ldr	r2, [r3, #0]
 80468fe:	4ba6      	ldr	r3, [pc, #664]	; (8046b98 <UART_SetConfig+0x2c4>)
 8046900:	4013      	ands	r3, r2
 8046902:	687a      	ldr	r2, [r7, #4]
 8046904:	6812      	ldr	r2, [r2, #0]
 8046906:	6979      	ldr	r1, [r7, #20]
 8046908:	430b      	orrs	r3, r1
 804690a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804690c:	687b      	ldr	r3, [r7, #4]
 804690e:	681b      	ldr	r3, [r3, #0]
 8046910:	685b      	ldr	r3, [r3, #4]
 8046912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8046916:	687b      	ldr	r3, [r7, #4]
 8046918:	68da      	ldr	r2, [r3, #12]
 804691a:	687b      	ldr	r3, [r7, #4]
 804691c:	681b      	ldr	r3, [r3, #0]
 804691e:	430a      	orrs	r2, r1
 8046920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8046922:	687b      	ldr	r3, [r7, #4]
 8046924:	699b      	ldr	r3, [r3, #24]
 8046926:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8046928:	687b      	ldr	r3, [r7, #4]
 804692a:	6a1b      	ldr	r3, [r3, #32]
 804692c:	697a      	ldr	r2, [r7, #20]
 804692e:	4313      	orrs	r3, r2
 8046930:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8046932:	687b      	ldr	r3, [r7, #4]
 8046934:	681b      	ldr	r3, [r3, #0]
 8046936:	689b      	ldr	r3, [r3, #8]
 8046938:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 804693c:	687b      	ldr	r3, [r7, #4]
 804693e:	681b      	ldr	r3, [r3, #0]
 8046940:	697a      	ldr	r2, [r7, #20]
 8046942:	430a      	orrs	r2, r1
 8046944:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8046946:	687b      	ldr	r3, [r7, #4]
 8046948:	681b      	ldr	r3, [r3, #0]
 804694a:	4a94      	ldr	r2, [pc, #592]	; (8046b9c <UART_SetConfig+0x2c8>)
 804694c:	4293      	cmp	r3, r2
 804694e:	d120      	bne.n	8046992 <UART_SetConfig+0xbe>
 8046950:	4b93      	ldr	r3, [pc, #588]	; (8046ba0 <UART_SetConfig+0x2cc>)
 8046952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046956:	f003 0303 	and.w	r3, r3, #3
 804695a:	2b03      	cmp	r3, #3
 804695c:	d816      	bhi.n	804698c <UART_SetConfig+0xb8>
 804695e:	a201      	add	r2, pc, #4	; (adr r2, 8046964 <UART_SetConfig+0x90>)
 8046960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046964:	08046975 	.word	0x08046975
 8046968:	08046981 	.word	0x08046981
 804696c:	0804697b 	.word	0x0804697b
 8046970:	08046987 	.word	0x08046987
 8046974:	2301      	movs	r3, #1
 8046976:	77fb      	strb	r3, [r7, #31]
 8046978:	e150      	b.n	8046c1c <UART_SetConfig+0x348>
 804697a:	2302      	movs	r3, #2
 804697c:	77fb      	strb	r3, [r7, #31]
 804697e:	e14d      	b.n	8046c1c <UART_SetConfig+0x348>
 8046980:	2304      	movs	r3, #4
 8046982:	77fb      	strb	r3, [r7, #31]
 8046984:	e14a      	b.n	8046c1c <UART_SetConfig+0x348>
 8046986:	2308      	movs	r3, #8
 8046988:	77fb      	strb	r3, [r7, #31]
 804698a:	e147      	b.n	8046c1c <UART_SetConfig+0x348>
 804698c:	2310      	movs	r3, #16
 804698e:	77fb      	strb	r3, [r7, #31]
 8046990:	e144      	b.n	8046c1c <UART_SetConfig+0x348>
 8046992:	687b      	ldr	r3, [r7, #4]
 8046994:	681b      	ldr	r3, [r3, #0]
 8046996:	4a83      	ldr	r2, [pc, #524]	; (8046ba4 <UART_SetConfig+0x2d0>)
 8046998:	4293      	cmp	r3, r2
 804699a:	d132      	bne.n	8046a02 <UART_SetConfig+0x12e>
 804699c:	4b80      	ldr	r3, [pc, #512]	; (8046ba0 <UART_SetConfig+0x2cc>)
 804699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80469a2:	f003 030c 	and.w	r3, r3, #12
 80469a6:	2b0c      	cmp	r3, #12
 80469a8:	d828      	bhi.n	80469fc <UART_SetConfig+0x128>
 80469aa:	a201      	add	r2, pc, #4	; (adr r2, 80469b0 <UART_SetConfig+0xdc>)
 80469ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80469b0:	080469e5 	.word	0x080469e5
 80469b4:	080469fd 	.word	0x080469fd
 80469b8:	080469fd 	.word	0x080469fd
 80469bc:	080469fd 	.word	0x080469fd
 80469c0:	080469f1 	.word	0x080469f1
 80469c4:	080469fd 	.word	0x080469fd
 80469c8:	080469fd 	.word	0x080469fd
 80469cc:	080469fd 	.word	0x080469fd
 80469d0:	080469eb 	.word	0x080469eb
 80469d4:	080469fd 	.word	0x080469fd
 80469d8:	080469fd 	.word	0x080469fd
 80469dc:	080469fd 	.word	0x080469fd
 80469e0:	080469f7 	.word	0x080469f7
 80469e4:	2300      	movs	r3, #0
 80469e6:	77fb      	strb	r3, [r7, #31]
 80469e8:	e118      	b.n	8046c1c <UART_SetConfig+0x348>
 80469ea:	2302      	movs	r3, #2
 80469ec:	77fb      	strb	r3, [r7, #31]
 80469ee:	e115      	b.n	8046c1c <UART_SetConfig+0x348>
 80469f0:	2304      	movs	r3, #4
 80469f2:	77fb      	strb	r3, [r7, #31]
 80469f4:	e112      	b.n	8046c1c <UART_SetConfig+0x348>
 80469f6:	2308      	movs	r3, #8
 80469f8:	77fb      	strb	r3, [r7, #31]
 80469fa:	e10f      	b.n	8046c1c <UART_SetConfig+0x348>
 80469fc:	2310      	movs	r3, #16
 80469fe:	77fb      	strb	r3, [r7, #31]
 8046a00:	e10c      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a02:	687b      	ldr	r3, [r7, #4]
 8046a04:	681b      	ldr	r3, [r3, #0]
 8046a06:	4a68      	ldr	r2, [pc, #416]	; (8046ba8 <UART_SetConfig+0x2d4>)
 8046a08:	4293      	cmp	r3, r2
 8046a0a:	d120      	bne.n	8046a4e <UART_SetConfig+0x17a>
 8046a0c:	4b64      	ldr	r3, [pc, #400]	; (8046ba0 <UART_SetConfig+0x2cc>)
 8046a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046a12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8046a16:	2b30      	cmp	r3, #48	; 0x30
 8046a18:	d013      	beq.n	8046a42 <UART_SetConfig+0x16e>
 8046a1a:	2b30      	cmp	r3, #48	; 0x30
 8046a1c:	d814      	bhi.n	8046a48 <UART_SetConfig+0x174>
 8046a1e:	2b20      	cmp	r3, #32
 8046a20:	d009      	beq.n	8046a36 <UART_SetConfig+0x162>
 8046a22:	2b20      	cmp	r3, #32
 8046a24:	d810      	bhi.n	8046a48 <UART_SetConfig+0x174>
 8046a26:	2b00      	cmp	r3, #0
 8046a28:	d002      	beq.n	8046a30 <UART_SetConfig+0x15c>
 8046a2a:	2b10      	cmp	r3, #16
 8046a2c:	d006      	beq.n	8046a3c <UART_SetConfig+0x168>
 8046a2e:	e00b      	b.n	8046a48 <UART_SetConfig+0x174>
 8046a30:	2300      	movs	r3, #0
 8046a32:	77fb      	strb	r3, [r7, #31]
 8046a34:	e0f2      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a36:	2302      	movs	r3, #2
 8046a38:	77fb      	strb	r3, [r7, #31]
 8046a3a:	e0ef      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a3c:	2304      	movs	r3, #4
 8046a3e:	77fb      	strb	r3, [r7, #31]
 8046a40:	e0ec      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a42:	2308      	movs	r3, #8
 8046a44:	77fb      	strb	r3, [r7, #31]
 8046a46:	e0e9      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a48:	2310      	movs	r3, #16
 8046a4a:	77fb      	strb	r3, [r7, #31]
 8046a4c:	e0e6      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a4e:	687b      	ldr	r3, [r7, #4]
 8046a50:	681b      	ldr	r3, [r3, #0]
 8046a52:	4a56      	ldr	r2, [pc, #344]	; (8046bac <UART_SetConfig+0x2d8>)
 8046a54:	4293      	cmp	r3, r2
 8046a56:	d120      	bne.n	8046a9a <UART_SetConfig+0x1c6>
 8046a58:	4b51      	ldr	r3, [pc, #324]	; (8046ba0 <UART_SetConfig+0x2cc>)
 8046a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046a5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8046a62:	2bc0      	cmp	r3, #192	; 0xc0
 8046a64:	d013      	beq.n	8046a8e <UART_SetConfig+0x1ba>
 8046a66:	2bc0      	cmp	r3, #192	; 0xc0
 8046a68:	d814      	bhi.n	8046a94 <UART_SetConfig+0x1c0>
 8046a6a:	2b80      	cmp	r3, #128	; 0x80
 8046a6c:	d009      	beq.n	8046a82 <UART_SetConfig+0x1ae>
 8046a6e:	2b80      	cmp	r3, #128	; 0x80
 8046a70:	d810      	bhi.n	8046a94 <UART_SetConfig+0x1c0>
 8046a72:	2b00      	cmp	r3, #0
 8046a74:	d002      	beq.n	8046a7c <UART_SetConfig+0x1a8>
 8046a76:	2b40      	cmp	r3, #64	; 0x40
 8046a78:	d006      	beq.n	8046a88 <UART_SetConfig+0x1b4>
 8046a7a:	e00b      	b.n	8046a94 <UART_SetConfig+0x1c0>
 8046a7c:	2300      	movs	r3, #0
 8046a7e:	77fb      	strb	r3, [r7, #31]
 8046a80:	e0cc      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a82:	2302      	movs	r3, #2
 8046a84:	77fb      	strb	r3, [r7, #31]
 8046a86:	e0c9      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a88:	2304      	movs	r3, #4
 8046a8a:	77fb      	strb	r3, [r7, #31]
 8046a8c:	e0c6      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a8e:	2308      	movs	r3, #8
 8046a90:	77fb      	strb	r3, [r7, #31]
 8046a92:	e0c3      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a94:	2310      	movs	r3, #16
 8046a96:	77fb      	strb	r3, [r7, #31]
 8046a98:	e0c0      	b.n	8046c1c <UART_SetConfig+0x348>
 8046a9a:	687b      	ldr	r3, [r7, #4]
 8046a9c:	681b      	ldr	r3, [r3, #0]
 8046a9e:	4a44      	ldr	r2, [pc, #272]	; (8046bb0 <UART_SetConfig+0x2dc>)
 8046aa0:	4293      	cmp	r3, r2
 8046aa2:	d125      	bne.n	8046af0 <UART_SetConfig+0x21c>
 8046aa4:	4b3e      	ldr	r3, [pc, #248]	; (8046ba0 <UART_SetConfig+0x2cc>)
 8046aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8046aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8046ab2:	d017      	beq.n	8046ae4 <UART_SetConfig+0x210>
 8046ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8046ab8:	d817      	bhi.n	8046aea <UART_SetConfig+0x216>
 8046aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046abe:	d00b      	beq.n	8046ad8 <UART_SetConfig+0x204>
 8046ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046ac4:	d811      	bhi.n	8046aea <UART_SetConfig+0x216>
 8046ac6:	2b00      	cmp	r3, #0
 8046ac8:	d003      	beq.n	8046ad2 <UART_SetConfig+0x1fe>
 8046aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8046ace:	d006      	beq.n	8046ade <UART_SetConfig+0x20a>
 8046ad0:	e00b      	b.n	8046aea <UART_SetConfig+0x216>
 8046ad2:	2300      	movs	r3, #0
 8046ad4:	77fb      	strb	r3, [r7, #31]
 8046ad6:	e0a1      	b.n	8046c1c <UART_SetConfig+0x348>
 8046ad8:	2302      	movs	r3, #2
 8046ada:	77fb      	strb	r3, [r7, #31]
 8046adc:	e09e      	b.n	8046c1c <UART_SetConfig+0x348>
 8046ade:	2304      	movs	r3, #4
 8046ae0:	77fb      	strb	r3, [r7, #31]
 8046ae2:	e09b      	b.n	8046c1c <UART_SetConfig+0x348>
 8046ae4:	2308      	movs	r3, #8
 8046ae6:	77fb      	strb	r3, [r7, #31]
 8046ae8:	e098      	b.n	8046c1c <UART_SetConfig+0x348>
 8046aea:	2310      	movs	r3, #16
 8046aec:	77fb      	strb	r3, [r7, #31]
 8046aee:	e095      	b.n	8046c1c <UART_SetConfig+0x348>
 8046af0:	687b      	ldr	r3, [r7, #4]
 8046af2:	681b      	ldr	r3, [r3, #0]
 8046af4:	4a2f      	ldr	r2, [pc, #188]	; (8046bb4 <UART_SetConfig+0x2e0>)
 8046af6:	4293      	cmp	r3, r2
 8046af8:	d125      	bne.n	8046b46 <UART_SetConfig+0x272>
 8046afa:	4b29      	ldr	r3, [pc, #164]	; (8046ba0 <UART_SetConfig+0x2cc>)
 8046afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046b00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8046b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8046b08:	d017      	beq.n	8046b3a <UART_SetConfig+0x266>
 8046b0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8046b0e:	d817      	bhi.n	8046b40 <UART_SetConfig+0x26c>
 8046b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8046b14:	d00b      	beq.n	8046b2e <UART_SetConfig+0x25a>
 8046b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8046b1a:	d811      	bhi.n	8046b40 <UART_SetConfig+0x26c>
 8046b1c:	2b00      	cmp	r3, #0
 8046b1e:	d003      	beq.n	8046b28 <UART_SetConfig+0x254>
 8046b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046b24:	d006      	beq.n	8046b34 <UART_SetConfig+0x260>
 8046b26:	e00b      	b.n	8046b40 <UART_SetConfig+0x26c>
 8046b28:	2301      	movs	r3, #1
 8046b2a:	77fb      	strb	r3, [r7, #31]
 8046b2c:	e076      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b2e:	2302      	movs	r3, #2
 8046b30:	77fb      	strb	r3, [r7, #31]
 8046b32:	e073      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b34:	2304      	movs	r3, #4
 8046b36:	77fb      	strb	r3, [r7, #31]
 8046b38:	e070      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b3a:	2308      	movs	r3, #8
 8046b3c:	77fb      	strb	r3, [r7, #31]
 8046b3e:	e06d      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b40:	2310      	movs	r3, #16
 8046b42:	77fb      	strb	r3, [r7, #31]
 8046b44:	e06a      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b46:	687b      	ldr	r3, [r7, #4]
 8046b48:	681b      	ldr	r3, [r3, #0]
 8046b4a:	4a1b      	ldr	r2, [pc, #108]	; (8046bb8 <UART_SetConfig+0x2e4>)
 8046b4c:	4293      	cmp	r3, r2
 8046b4e:	d138      	bne.n	8046bc2 <UART_SetConfig+0x2ee>
 8046b50:	4b13      	ldr	r3, [pc, #76]	; (8046ba0 <UART_SetConfig+0x2cc>)
 8046b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046b56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8046b5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8046b5e:	d017      	beq.n	8046b90 <UART_SetConfig+0x2bc>
 8046b60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8046b64:	d82a      	bhi.n	8046bbc <UART_SetConfig+0x2e8>
 8046b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8046b6a:	d00b      	beq.n	8046b84 <UART_SetConfig+0x2b0>
 8046b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8046b70:	d824      	bhi.n	8046bbc <UART_SetConfig+0x2e8>
 8046b72:	2b00      	cmp	r3, #0
 8046b74:	d003      	beq.n	8046b7e <UART_SetConfig+0x2aa>
 8046b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8046b7a:	d006      	beq.n	8046b8a <UART_SetConfig+0x2b6>
 8046b7c:	e01e      	b.n	8046bbc <UART_SetConfig+0x2e8>
 8046b7e:	2300      	movs	r3, #0
 8046b80:	77fb      	strb	r3, [r7, #31]
 8046b82:	e04b      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b84:	2302      	movs	r3, #2
 8046b86:	77fb      	strb	r3, [r7, #31]
 8046b88:	e048      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b8a:	2304      	movs	r3, #4
 8046b8c:	77fb      	strb	r3, [r7, #31]
 8046b8e:	e045      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b90:	2308      	movs	r3, #8
 8046b92:	77fb      	strb	r3, [r7, #31]
 8046b94:	e042      	b.n	8046c1c <UART_SetConfig+0x348>
 8046b96:	bf00      	nop
 8046b98:	efff69f3 	.word	0xefff69f3
 8046b9c:	40011000 	.word	0x40011000
 8046ba0:	40023800 	.word	0x40023800
 8046ba4:	40004400 	.word	0x40004400
 8046ba8:	40004800 	.word	0x40004800
 8046bac:	40004c00 	.word	0x40004c00
 8046bb0:	40005000 	.word	0x40005000
 8046bb4:	40011400 	.word	0x40011400
 8046bb8:	40007800 	.word	0x40007800
 8046bbc:	2310      	movs	r3, #16
 8046bbe:	77fb      	strb	r3, [r7, #31]
 8046bc0:	e02c      	b.n	8046c1c <UART_SetConfig+0x348>
 8046bc2:	687b      	ldr	r3, [r7, #4]
 8046bc4:	681b      	ldr	r3, [r3, #0]
 8046bc6:	4a72      	ldr	r2, [pc, #456]	; (8046d90 <UART_SetConfig+0x4bc>)
 8046bc8:	4293      	cmp	r3, r2
 8046bca:	d125      	bne.n	8046c18 <UART_SetConfig+0x344>
 8046bcc:	4b71      	ldr	r3, [pc, #452]	; (8046d94 <UART_SetConfig+0x4c0>)
 8046bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046bd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8046bd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8046bda:	d017      	beq.n	8046c0c <UART_SetConfig+0x338>
 8046bdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8046be0:	d817      	bhi.n	8046c12 <UART_SetConfig+0x33e>
 8046be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046be6:	d00b      	beq.n	8046c00 <UART_SetConfig+0x32c>
 8046be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046bec:	d811      	bhi.n	8046c12 <UART_SetConfig+0x33e>
 8046bee:	2b00      	cmp	r3, #0
 8046bf0:	d003      	beq.n	8046bfa <UART_SetConfig+0x326>
 8046bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8046bf6:	d006      	beq.n	8046c06 <UART_SetConfig+0x332>
 8046bf8:	e00b      	b.n	8046c12 <UART_SetConfig+0x33e>
 8046bfa:	2300      	movs	r3, #0
 8046bfc:	77fb      	strb	r3, [r7, #31]
 8046bfe:	e00d      	b.n	8046c1c <UART_SetConfig+0x348>
 8046c00:	2302      	movs	r3, #2
 8046c02:	77fb      	strb	r3, [r7, #31]
 8046c04:	e00a      	b.n	8046c1c <UART_SetConfig+0x348>
 8046c06:	2304      	movs	r3, #4
 8046c08:	77fb      	strb	r3, [r7, #31]
 8046c0a:	e007      	b.n	8046c1c <UART_SetConfig+0x348>
 8046c0c:	2308      	movs	r3, #8
 8046c0e:	77fb      	strb	r3, [r7, #31]
 8046c10:	e004      	b.n	8046c1c <UART_SetConfig+0x348>
 8046c12:	2310      	movs	r3, #16
 8046c14:	77fb      	strb	r3, [r7, #31]
 8046c16:	e001      	b.n	8046c1c <UART_SetConfig+0x348>
 8046c18:	2310      	movs	r3, #16
 8046c1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8046c1c:	687b      	ldr	r3, [r7, #4]
 8046c1e:	69db      	ldr	r3, [r3, #28]
 8046c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046c24:	d15b      	bne.n	8046cde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8046c26:	7ffb      	ldrb	r3, [r7, #31]
 8046c28:	2b08      	cmp	r3, #8
 8046c2a:	d828      	bhi.n	8046c7e <UART_SetConfig+0x3aa>
 8046c2c:	a201      	add	r2, pc, #4	; (adr r2, 8046c34 <UART_SetConfig+0x360>)
 8046c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046c32:	bf00      	nop
 8046c34:	08046c59 	.word	0x08046c59
 8046c38:	08046c61 	.word	0x08046c61
 8046c3c:	08046c69 	.word	0x08046c69
 8046c40:	08046c7f 	.word	0x08046c7f
 8046c44:	08046c6f 	.word	0x08046c6f
 8046c48:	08046c7f 	.word	0x08046c7f
 8046c4c:	08046c7f 	.word	0x08046c7f
 8046c50:	08046c7f 	.word	0x08046c7f
 8046c54:	08046c77 	.word	0x08046c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8046c58:	f7fe f9e0 	bl	804501c <HAL_RCC_GetPCLK1Freq>
 8046c5c:	61b8      	str	r0, [r7, #24]
        break;
 8046c5e:	e013      	b.n	8046c88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8046c60:	f7fe f9f0 	bl	8045044 <HAL_RCC_GetPCLK2Freq>
 8046c64:	61b8      	str	r0, [r7, #24]
        break;
 8046c66:	e00f      	b.n	8046c88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8046c68:	4b4b      	ldr	r3, [pc, #300]	; (8046d98 <UART_SetConfig+0x4c4>)
 8046c6a:	61bb      	str	r3, [r7, #24]
        break;
 8046c6c:	e00c      	b.n	8046c88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8046c6e:	f7fe f903 	bl	8044e78 <HAL_RCC_GetSysClockFreq>
 8046c72:	61b8      	str	r0, [r7, #24]
        break;
 8046c74:	e008      	b.n	8046c88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8046c7a:	61bb      	str	r3, [r7, #24]
        break;
 8046c7c:	e004      	b.n	8046c88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8046c7e:	2300      	movs	r3, #0
 8046c80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8046c82:	2301      	movs	r3, #1
 8046c84:	77bb      	strb	r3, [r7, #30]
        break;
 8046c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8046c88:	69bb      	ldr	r3, [r7, #24]
 8046c8a:	2b00      	cmp	r3, #0
 8046c8c:	d074      	beq.n	8046d78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8046c8e:	69bb      	ldr	r3, [r7, #24]
 8046c90:	005a      	lsls	r2, r3, #1
 8046c92:	687b      	ldr	r3, [r7, #4]
 8046c94:	685b      	ldr	r3, [r3, #4]
 8046c96:	085b      	lsrs	r3, r3, #1
 8046c98:	441a      	add	r2, r3
 8046c9a:	687b      	ldr	r3, [r7, #4]
 8046c9c:	685b      	ldr	r3, [r3, #4]
 8046c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8046ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046ca4:	693b      	ldr	r3, [r7, #16]
 8046ca6:	2b0f      	cmp	r3, #15
 8046ca8:	d916      	bls.n	8046cd8 <UART_SetConfig+0x404>
 8046caa:	693b      	ldr	r3, [r7, #16]
 8046cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046cb0:	d212      	bcs.n	8046cd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8046cb2:	693b      	ldr	r3, [r7, #16]
 8046cb4:	b29b      	uxth	r3, r3
 8046cb6:	f023 030f 	bic.w	r3, r3, #15
 8046cba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8046cbc:	693b      	ldr	r3, [r7, #16]
 8046cbe:	085b      	lsrs	r3, r3, #1
 8046cc0:	b29b      	uxth	r3, r3
 8046cc2:	f003 0307 	and.w	r3, r3, #7
 8046cc6:	b29a      	uxth	r2, r3
 8046cc8:	89fb      	ldrh	r3, [r7, #14]
 8046cca:	4313      	orrs	r3, r2
 8046ccc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8046cce:	687b      	ldr	r3, [r7, #4]
 8046cd0:	681b      	ldr	r3, [r3, #0]
 8046cd2:	89fa      	ldrh	r2, [r7, #14]
 8046cd4:	60da      	str	r2, [r3, #12]
 8046cd6:	e04f      	b.n	8046d78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8046cd8:	2301      	movs	r3, #1
 8046cda:	77bb      	strb	r3, [r7, #30]
 8046cdc:	e04c      	b.n	8046d78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8046cde:	7ffb      	ldrb	r3, [r7, #31]
 8046ce0:	2b08      	cmp	r3, #8
 8046ce2:	d828      	bhi.n	8046d36 <UART_SetConfig+0x462>
 8046ce4:	a201      	add	r2, pc, #4	; (adr r2, 8046cec <UART_SetConfig+0x418>)
 8046ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8046cea:	bf00      	nop
 8046cec:	08046d11 	.word	0x08046d11
 8046cf0:	08046d19 	.word	0x08046d19
 8046cf4:	08046d21 	.word	0x08046d21
 8046cf8:	08046d37 	.word	0x08046d37
 8046cfc:	08046d27 	.word	0x08046d27
 8046d00:	08046d37 	.word	0x08046d37
 8046d04:	08046d37 	.word	0x08046d37
 8046d08:	08046d37 	.word	0x08046d37
 8046d0c:	08046d2f 	.word	0x08046d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8046d10:	f7fe f984 	bl	804501c <HAL_RCC_GetPCLK1Freq>
 8046d14:	61b8      	str	r0, [r7, #24]
        break;
 8046d16:	e013      	b.n	8046d40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8046d18:	f7fe f994 	bl	8045044 <HAL_RCC_GetPCLK2Freq>
 8046d1c:	61b8      	str	r0, [r7, #24]
        break;
 8046d1e:	e00f      	b.n	8046d40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8046d20:	4b1d      	ldr	r3, [pc, #116]	; (8046d98 <UART_SetConfig+0x4c4>)
 8046d22:	61bb      	str	r3, [r7, #24]
        break;
 8046d24:	e00c      	b.n	8046d40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8046d26:	f7fe f8a7 	bl	8044e78 <HAL_RCC_GetSysClockFreq>
 8046d2a:	61b8      	str	r0, [r7, #24]
        break;
 8046d2c:	e008      	b.n	8046d40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8046d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8046d32:	61bb      	str	r3, [r7, #24]
        break;
 8046d34:	e004      	b.n	8046d40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8046d36:	2300      	movs	r3, #0
 8046d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8046d3a:	2301      	movs	r3, #1
 8046d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8046d3e:	bf00      	nop
    }

    if (pclk != 0U)
 8046d40:	69bb      	ldr	r3, [r7, #24]
 8046d42:	2b00      	cmp	r3, #0
 8046d44:	d018      	beq.n	8046d78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8046d46:	687b      	ldr	r3, [r7, #4]
 8046d48:	685b      	ldr	r3, [r3, #4]
 8046d4a:	085a      	lsrs	r2, r3, #1
 8046d4c:	69bb      	ldr	r3, [r7, #24]
 8046d4e:	441a      	add	r2, r3
 8046d50:	687b      	ldr	r3, [r7, #4]
 8046d52:	685b      	ldr	r3, [r3, #4]
 8046d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8046d58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8046d5a:	693b      	ldr	r3, [r7, #16]
 8046d5c:	2b0f      	cmp	r3, #15
 8046d5e:	d909      	bls.n	8046d74 <UART_SetConfig+0x4a0>
 8046d60:	693b      	ldr	r3, [r7, #16]
 8046d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8046d66:	d205      	bcs.n	8046d74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8046d68:	693b      	ldr	r3, [r7, #16]
 8046d6a:	b29a      	uxth	r2, r3
 8046d6c:	687b      	ldr	r3, [r7, #4]
 8046d6e:	681b      	ldr	r3, [r3, #0]
 8046d70:	60da      	str	r2, [r3, #12]
 8046d72:	e001      	b.n	8046d78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8046d74:	2301      	movs	r3, #1
 8046d76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8046d78:	687b      	ldr	r3, [r7, #4]
 8046d7a:	2200      	movs	r2, #0
 8046d7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8046d7e:	687b      	ldr	r3, [r7, #4]
 8046d80:	2200      	movs	r2, #0
 8046d82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8046d84:	7fbb      	ldrb	r3, [r7, #30]
}
 8046d86:	4618      	mov	r0, r3
 8046d88:	3720      	adds	r7, #32
 8046d8a:	46bd      	mov	sp, r7
 8046d8c:	bd80      	pop	{r7, pc}
 8046d8e:	bf00      	nop
 8046d90:	40007c00 	.word	0x40007c00
 8046d94:	40023800 	.word	0x40023800
 8046d98:	00f42400 	.word	0x00f42400

08046d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8046d9c:	b480      	push	{r7}
 8046d9e:	b083      	sub	sp, #12
 8046da0:	af00      	add	r7, sp, #0
 8046da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8046da4:	687b      	ldr	r3, [r7, #4]
 8046da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046da8:	f003 0301 	and.w	r3, r3, #1
 8046dac:	2b00      	cmp	r3, #0
 8046dae:	d00a      	beq.n	8046dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8046db0:	687b      	ldr	r3, [r7, #4]
 8046db2:	681b      	ldr	r3, [r3, #0]
 8046db4:	685b      	ldr	r3, [r3, #4]
 8046db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8046dba:	687b      	ldr	r3, [r7, #4]
 8046dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8046dbe:	687b      	ldr	r3, [r7, #4]
 8046dc0:	681b      	ldr	r3, [r3, #0]
 8046dc2:	430a      	orrs	r2, r1
 8046dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8046dc6:	687b      	ldr	r3, [r7, #4]
 8046dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046dca:	f003 0302 	and.w	r3, r3, #2
 8046dce:	2b00      	cmp	r3, #0
 8046dd0:	d00a      	beq.n	8046de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8046dd2:	687b      	ldr	r3, [r7, #4]
 8046dd4:	681b      	ldr	r3, [r3, #0]
 8046dd6:	685b      	ldr	r3, [r3, #4]
 8046dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8046de0:	687b      	ldr	r3, [r7, #4]
 8046de2:	681b      	ldr	r3, [r3, #0]
 8046de4:	430a      	orrs	r2, r1
 8046de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8046de8:	687b      	ldr	r3, [r7, #4]
 8046dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046dec:	f003 0304 	and.w	r3, r3, #4
 8046df0:	2b00      	cmp	r3, #0
 8046df2:	d00a      	beq.n	8046e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8046df4:	687b      	ldr	r3, [r7, #4]
 8046df6:	681b      	ldr	r3, [r3, #0]
 8046df8:	685b      	ldr	r3, [r3, #4]
 8046dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8046dfe:	687b      	ldr	r3, [r7, #4]
 8046e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8046e02:	687b      	ldr	r3, [r7, #4]
 8046e04:	681b      	ldr	r3, [r3, #0]
 8046e06:	430a      	orrs	r2, r1
 8046e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8046e0a:	687b      	ldr	r3, [r7, #4]
 8046e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046e0e:	f003 0308 	and.w	r3, r3, #8
 8046e12:	2b00      	cmp	r3, #0
 8046e14:	d00a      	beq.n	8046e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8046e16:	687b      	ldr	r3, [r7, #4]
 8046e18:	681b      	ldr	r3, [r3, #0]
 8046e1a:	685b      	ldr	r3, [r3, #4]
 8046e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046e24:	687b      	ldr	r3, [r7, #4]
 8046e26:	681b      	ldr	r3, [r3, #0]
 8046e28:	430a      	orrs	r2, r1
 8046e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8046e2c:	687b      	ldr	r3, [r7, #4]
 8046e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046e30:	f003 0310 	and.w	r3, r3, #16
 8046e34:	2b00      	cmp	r3, #0
 8046e36:	d00a      	beq.n	8046e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8046e38:	687b      	ldr	r3, [r7, #4]
 8046e3a:	681b      	ldr	r3, [r3, #0]
 8046e3c:	689b      	ldr	r3, [r3, #8]
 8046e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8046e42:	687b      	ldr	r3, [r7, #4]
 8046e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8046e46:	687b      	ldr	r3, [r7, #4]
 8046e48:	681b      	ldr	r3, [r3, #0]
 8046e4a:	430a      	orrs	r2, r1
 8046e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8046e4e:	687b      	ldr	r3, [r7, #4]
 8046e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046e52:	f003 0320 	and.w	r3, r3, #32
 8046e56:	2b00      	cmp	r3, #0
 8046e58:	d00a      	beq.n	8046e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8046e5a:	687b      	ldr	r3, [r7, #4]
 8046e5c:	681b      	ldr	r3, [r3, #0]
 8046e5e:	689b      	ldr	r3, [r3, #8]
 8046e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8046e64:	687b      	ldr	r3, [r7, #4]
 8046e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8046e68:	687b      	ldr	r3, [r7, #4]
 8046e6a:	681b      	ldr	r3, [r3, #0]
 8046e6c:	430a      	orrs	r2, r1
 8046e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8046e70:	687b      	ldr	r3, [r7, #4]
 8046e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046e78:	2b00      	cmp	r3, #0
 8046e7a:	d01a      	beq.n	8046eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8046e7c:	687b      	ldr	r3, [r7, #4]
 8046e7e:	681b      	ldr	r3, [r3, #0]
 8046e80:	685b      	ldr	r3, [r3, #4]
 8046e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8046e86:	687b      	ldr	r3, [r7, #4]
 8046e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8046e8a:	687b      	ldr	r3, [r7, #4]
 8046e8c:	681b      	ldr	r3, [r3, #0]
 8046e8e:	430a      	orrs	r2, r1
 8046e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8046e92:	687b      	ldr	r3, [r7, #4]
 8046e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8046e9a:	d10a      	bne.n	8046eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8046e9c:	687b      	ldr	r3, [r7, #4]
 8046e9e:	681b      	ldr	r3, [r3, #0]
 8046ea0:	685b      	ldr	r3, [r3, #4]
 8046ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8046ea6:	687b      	ldr	r3, [r7, #4]
 8046ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8046eaa:	687b      	ldr	r3, [r7, #4]
 8046eac:	681b      	ldr	r3, [r3, #0]
 8046eae:	430a      	orrs	r2, r1
 8046eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8046eb2:	687b      	ldr	r3, [r7, #4]
 8046eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046eba:	2b00      	cmp	r3, #0
 8046ebc:	d00a      	beq.n	8046ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8046ebe:	687b      	ldr	r3, [r7, #4]
 8046ec0:	681b      	ldr	r3, [r3, #0]
 8046ec2:	685b      	ldr	r3, [r3, #4]
 8046ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8046ec8:	687b      	ldr	r3, [r7, #4]
 8046eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8046ecc:	687b      	ldr	r3, [r7, #4]
 8046ece:	681b      	ldr	r3, [r3, #0]
 8046ed0:	430a      	orrs	r2, r1
 8046ed2:	605a      	str	r2, [r3, #4]
  }
}
 8046ed4:	bf00      	nop
 8046ed6:	370c      	adds	r7, #12
 8046ed8:	46bd      	mov	sp, r7
 8046eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ede:	4770      	bx	lr

08046ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8046ee0:	b580      	push	{r7, lr}
 8046ee2:	b086      	sub	sp, #24
 8046ee4:	af02      	add	r7, sp, #8
 8046ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8046ee8:	687b      	ldr	r3, [r7, #4]
 8046eea:	2200      	movs	r2, #0
 8046eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8046ef0:	f7fb f8be 	bl	8042070 <HAL_GetTick>
 8046ef4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8046ef6:	687b      	ldr	r3, [r7, #4]
 8046ef8:	681b      	ldr	r3, [r3, #0]
 8046efa:	681b      	ldr	r3, [r3, #0]
 8046efc:	f003 0308 	and.w	r3, r3, #8
 8046f00:	2b08      	cmp	r3, #8
 8046f02:	d10e      	bne.n	8046f22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8046f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8046f08:	9300      	str	r3, [sp, #0]
 8046f0a:	68fb      	ldr	r3, [r7, #12]
 8046f0c:	2200      	movs	r2, #0
 8046f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8046f12:	6878      	ldr	r0, [r7, #4]
 8046f14:	f000 f81b 	bl	8046f4e <UART_WaitOnFlagUntilTimeout>
 8046f18:	4603      	mov	r3, r0
 8046f1a:	2b00      	cmp	r3, #0
 8046f1c:	d001      	beq.n	8046f22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8046f1e:	2303      	movs	r3, #3
 8046f20:	e011      	b.n	8046f46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8046f22:	687b      	ldr	r3, [r7, #4]
 8046f24:	2220      	movs	r2, #32
 8046f26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8046f28:	687b      	ldr	r3, [r7, #4]
 8046f2a:	2220      	movs	r2, #32
 8046f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8046f30:	687b      	ldr	r3, [r7, #4]
 8046f32:	2200      	movs	r2, #0
 8046f34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8046f36:	687b      	ldr	r3, [r7, #4]
 8046f38:	2200      	movs	r2, #0
 8046f3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8046f3c:	687b      	ldr	r3, [r7, #4]
 8046f3e:	2200      	movs	r2, #0
 8046f40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8046f44:	2300      	movs	r3, #0
}
 8046f46:	4618      	mov	r0, r3
 8046f48:	3710      	adds	r7, #16
 8046f4a:	46bd      	mov	sp, r7
 8046f4c:	bd80      	pop	{r7, pc}

08046f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8046f4e:	b580      	push	{r7, lr}
 8046f50:	b09c      	sub	sp, #112	; 0x70
 8046f52:	af00      	add	r7, sp, #0
 8046f54:	60f8      	str	r0, [r7, #12]
 8046f56:	60b9      	str	r1, [r7, #8]
 8046f58:	603b      	str	r3, [r7, #0]
 8046f5a:	4613      	mov	r3, r2
 8046f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8046f5e:	e0a7      	b.n	80470b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8046f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8046f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8046f66:	f000 80a3 	beq.w	80470b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046f6a:	f7fb f881 	bl	8042070 <HAL_GetTick>
 8046f6e:	4602      	mov	r2, r0
 8046f70:	683b      	ldr	r3, [r7, #0]
 8046f72:	1ad3      	subs	r3, r2, r3
 8046f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8046f76:	429a      	cmp	r2, r3
 8046f78:	d302      	bcc.n	8046f80 <UART_WaitOnFlagUntilTimeout+0x32>
 8046f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8046f7c:	2b00      	cmp	r3, #0
 8046f7e:	d13f      	bne.n	8047000 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8046f80:	68fb      	ldr	r3, [r7, #12]
 8046f82:	681b      	ldr	r3, [r3, #0]
 8046f84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8046f88:	e853 3f00 	ldrex	r3, [r3]
 8046f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8046f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8046f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8046f94:	667b      	str	r3, [r7, #100]	; 0x64
 8046f96:	68fb      	ldr	r3, [r7, #12]
 8046f98:	681b      	ldr	r3, [r3, #0]
 8046f9a:	461a      	mov	r2, r3
 8046f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8046f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8046fa0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8046fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8046fa6:	e841 2300 	strex	r3, r2, [r1]
 8046faa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8046fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8046fae:	2b00      	cmp	r3, #0
 8046fb0:	d1e6      	bne.n	8046f80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8046fb2:	68fb      	ldr	r3, [r7, #12]
 8046fb4:	681b      	ldr	r3, [r3, #0]
 8046fb6:	3308      	adds	r3, #8
 8046fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8046fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046fbc:	e853 3f00 	ldrex	r3, [r3]
 8046fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8046fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046fc4:	f023 0301 	bic.w	r3, r3, #1
 8046fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8046fca:	68fb      	ldr	r3, [r7, #12]
 8046fcc:	681b      	ldr	r3, [r3, #0]
 8046fce:	3308      	adds	r3, #8
 8046fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8046fd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8046fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8046fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8046fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8046fda:	e841 2300 	strex	r3, r2, [r1]
 8046fde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8046fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8046fe2:	2b00      	cmp	r3, #0
 8046fe4:	d1e5      	bne.n	8046fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8046fe6:	68fb      	ldr	r3, [r7, #12]
 8046fe8:	2220      	movs	r2, #32
 8046fea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8046fec:	68fb      	ldr	r3, [r7, #12]
 8046fee:	2220      	movs	r2, #32
 8046ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8046ff4:	68fb      	ldr	r3, [r7, #12]
 8046ff6:	2200      	movs	r2, #0
 8046ff8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8046ffc:	2303      	movs	r3, #3
 8046ffe:	e068      	b.n	80470d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8047000:	68fb      	ldr	r3, [r7, #12]
 8047002:	681b      	ldr	r3, [r3, #0]
 8047004:	681b      	ldr	r3, [r3, #0]
 8047006:	f003 0304 	and.w	r3, r3, #4
 804700a:	2b00      	cmp	r3, #0
 804700c:	d050      	beq.n	80470b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804700e:	68fb      	ldr	r3, [r7, #12]
 8047010:	681b      	ldr	r3, [r3, #0]
 8047012:	69db      	ldr	r3, [r3, #28]
 8047014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8047018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804701c:	d148      	bne.n	80470b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804701e:	68fb      	ldr	r3, [r7, #12]
 8047020:	681b      	ldr	r3, [r3, #0]
 8047022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8047026:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8047028:	68fb      	ldr	r3, [r7, #12]
 804702a:	681b      	ldr	r3, [r3, #0]
 804702c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047030:	e853 3f00 	ldrex	r3, [r3]
 8047034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8047036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804703c:	66fb      	str	r3, [r7, #108]	; 0x6c
 804703e:	68fb      	ldr	r3, [r7, #12]
 8047040:	681b      	ldr	r3, [r3, #0]
 8047042:	461a      	mov	r2, r3
 8047044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8047046:	637b      	str	r3, [r7, #52]	; 0x34
 8047048:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804704a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804704c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804704e:	e841 2300 	strex	r3, r2, [r1]
 8047052:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8047054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047056:	2b00      	cmp	r3, #0
 8047058:	d1e6      	bne.n	8047028 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804705a:	68fb      	ldr	r3, [r7, #12]
 804705c:	681b      	ldr	r3, [r3, #0]
 804705e:	3308      	adds	r3, #8
 8047060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047062:	697b      	ldr	r3, [r7, #20]
 8047064:	e853 3f00 	ldrex	r3, [r3]
 8047068:	613b      	str	r3, [r7, #16]
   return(result);
 804706a:	693b      	ldr	r3, [r7, #16]
 804706c:	f023 0301 	bic.w	r3, r3, #1
 8047070:	66bb      	str	r3, [r7, #104]	; 0x68
 8047072:	68fb      	ldr	r3, [r7, #12]
 8047074:	681b      	ldr	r3, [r3, #0]
 8047076:	3308      	adds	r3, #8
 8047078:	6eba      	ldr	r2, [r7, #104]	; 0x68
 804707a:	623a      	str	r2, [r7, #32]
 804707c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804707e:	69f9      	ldr	r1, [r7, #28]
 8047080:	6a3a      	ldr	r2, [r7, #32]
 8047082:	e841 2300 	strex	r3, r2, [r1]
 8047086:	61bb      	str	r3, [r7, #24]
   return(result);
 8047088:	69bb      	ldr	r3, [r7, #24]
 804708a:	2b00      	cmp	r3, #0
 804708c:	d1e5      	bne.n	804705a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 804708e:	68fb      	ldr	r3, [r7, #12]
 8047090:	2220      	movs	r2, #32
 8047092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8047094:	68fb      	ldr	r3, [r7, #12]
 8047096:	2220      	movs	r2, #32
 8047098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804709c:	68fb      	ldr	r3, [r7, #12]
 804709e:	2220      	movs	r2, #32
 80470a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80470a4:	68fb      	ldr	r3, [r7, #12]
 80470a6:	2200      	movs	r2, #0
 80470a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80470ac:	2303      	movs	r3, #3
 80470ae:	e010      	b.n	80470d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80470b0:	68fb      	ldr	r3, [r7, #12]
 80470b2:	681b      	ldr	r3, [r3, #0]
 80470b4:	69da      	ldr	r2, [r3, #28]
 80470b6:	68bb      	ldr	r3, [r7, #8]
 80470b8:	4013      	ands	r3, r2
 80470ba:	68ba      	ldr	r2, [r7, #8]
 80470bc:	429a      	cmp	r2, r3
 80470be:	bf0c      	ite	eq
 80470c0:	2301      	moveq	r3, #1
 80470c2:	2300      	movne	r3, #0
 80470c4:	b2db      	uxtb	r3, r3
 80470c6:	461a      	mov	r2, r3
 80470c8:	79fb      	ldrb	r3, [r7, #7]
 80470ca:	429a      	cmp	r2, r3
 80470cc:	f43f af48 	beq.w	8046f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80470d0:	2300      	movs	r3, #0
}
 80470d2:	4618      	mov	r0, r3
 80470d4:	3770      	adds	r7, #112	; 0x70
 80470d6:	46bd      	mov	sp, r7
 80470d8:	bd80      	pop	{r7, pc}
	...

080470dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80470dc:	b480      	push	{r7}
 80470de:	b097      	sub	sp, #92	; 0x5c
 80470e0:	af00      	add	r7, sp, #0
 80470e2:	60f8      	str	r0, [r7, #12]
 80470e4:	60b9      	str	r1, [r7, #8]
 80470e6:	4613      	mov	r3, r2
 80470e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80470ea:	68fb      	ldr	r3, [r7, #12]
 80470ec:	68ba      	ldr	r2, [r7, #8]
 80470ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80470f0:	68fb      	ldr	r3, [r7, #12]
 80470f2:	88fa      	ldrh	r2, [r7, #6]
 80470f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80470f8:	68fb      	ldr	r3, [r7, #12]
 80470fa:	88fa      	ldrh	r2, [r7, #6]
 80470fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8047100:	68fb      	ldr	r3, [r7, #12]
 8047102:	2200      	movs	r2, #0
 8047104:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8047106:	68fb      	ldr	r3, [r7, #12]
 8047108:	689b      	ldr	r3, [r3, #8]
 804710a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804710e:	d10e      	bne.n	804712e <UART_Start_Receive_IT+0x52>
 8047110:	68fb      	ldr	r3, [r7, #12]
 8047112:	691b      	ldr	r3, [r3, #16]
 8047114:	2b00      	cmp	r3, #0
 8047116:	d105      	bne.n	8047124 <UART_Start_Receive_IT+0x48>
 8047118:	68fb      	ldr	r3, [r7, #12]
 804711a:	f240 12ff 	movw	r2, #511	; 0x1ff
 804711e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8047122:	e02d      	b.n	8047180 <UART_Start_Receive_IT+0xa4>
 8047124:	68fb      	ldr	r3, [r7, #12]
 8047126:	22ff      	movs	r2, #255	; 0xff
 8047128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 804712c:	e028      	b.n	8047180 <UART_Start_Receive_IT+0xa4>
 804712e:	68fb      	ldr	r3, [r7, #12]
 8047130:	689b      	ldr	r3, [r3, #8]
 8047132:	2b00      	cmp	r3, #0
 8047134:	d10d      	bne.n	8047152 <UART_Start_Receive_IT+0x76>
 8047136:	68fb      	ldr	r3, [r7, #12]
 8047138:	691b      	ldr	r3, [r3, #16]
 804713a:	2b00      	cmp	r3, #0
 804713c:	d104      	bne.n	8047148 <UART_Start_Receive_IT+0x6c>
 804713e:	68fb      	ldr	r3, [r7, #12]
 8047140:	22ff      	movs	r2, #255	; 0xff
 8047142:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8047146:	e01b      	b.n	8047180 <UART_Start_Receive_IT+0xa4>
 8047148:	68fb      	ldr	r3, [r7, #12]
 804714a:	227f      	movs	r2, #127	; 0x7f
 804714c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8047150:	e016      	b.n	8047180 <UART_Start_Receive_IT+0xa4>
 8047152:	68fb      	ldr	r3, [r7, #12]
 8047154:	689b      	ldr	r3, [r3, #8]
 8047156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804715a:	d10d      	bne.n	8047178 <UART_Start_Receive_IT+0x9c>
 804715c:	68fb      	ldr	r3, [r7, #12]
 804715e:	691b      	ldr	r3, [r3, #16]
 8047160:	2b00      	cmp	r3, #0
 8047162:	d104      	bne.n	804716e <UART_Start_Receive_IT+0x92>
 8047164:	68fb      	ldr	r3, [r7, #12]
 8047166:	227f      	movs	r2, #127	; 0x7f
 8047168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 804716c:	e008      	b.n	8047180 <UART_Start_Receive_IT+0xa4>
 804716e:	68fb      	ldr	r3, [r7, #12]
 8047170:	223f      	movs	r2, #63	; 0x3f
 8047172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8047176:	e003      	b.n	8047180 <UART_Start_Receive_IT+0xa4>
 8047178:	68fb      	ldr	r3, [r7, #12]
 804717a:	2200      	movs	r2, #0
 804717c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8047180:	68fb      	ldr	r3, [r7, #12]
 8047182:	2200      	movs	r2, #0
 8047184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8047188:	68fb      	ldr	r3, [r7, #12]
 804718a:	2222      	movs	r2, #34	; 0x22
 804718c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8047190:	68fb      	ldr	r3, [r7, #12]
 8047192:	681b      	ldr	r3, [r3, #0]
 8047194:	3308      	adds	r3, #8
 8047196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804719a:	e853 3f00 	ldrex	r3, [r3]
 804719e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80471a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80471a2:	f043 0301 	orr.w	r3, r3, #1
 80471a6:	657b      	str	r3, [r7, #84]	; 0x54
 80471a8:	68fb      	ldr	r3, [r7, #12]
 80471aa:	681b      	ldr	r3, [r3, #0]
 80471ac:	3308      	adds	r3, #8
 80471ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80471b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80471b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80471b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80471b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80471b8:	e841 2300 	strex	r3, r2, [r1]
 80471bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80471be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80471c0:	2b00      	cmp	r3, #0
 80471c2:	d1e5      	bne.n	8047190 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80471c4:	68fb      	ldr	r3, [r7, #12]
 80471c6:	689b      	ldr	r3, [r3, #8]
 80471c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80471cc:	d107      	bne.n	80471de <UART_Start_Receive_IT+0x102>
 80471ce:	68fb      	ldr	r3, [r7, #12]
 80471d0:	691b      	ldr	r3, [r3, #16]
 80471d2:	2b00      	cmp	r3, #0
 80471d4:	d103      	bne.n	80471de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80471d6:	68fb      	ldr	r3, [r7, #12]
 80471d8:	4a21      	ldr	r2, [pc, #132]	; (8047260 <UART_Start_Receive_IT+0x184>)
 80471da:	669a      	str	r2, [r3, #104]	; 0x68
 80471dc:	e002      	b.n	80471e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80471de:	68fb      	ldr	r3, [r7, #12]
 80471e0:	4a20      	ldr	r2, [pc, #128]	; (8047264 <UART_Start_Receive_IT+0x188>)
 80471e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80471e4:	68fb      	ldr	r3, [r7, #12]
 80471e6:	691b      	ldr	r3, [r3, #16]
 80471e8:	2b00      	cmp	r3, #0
 80471ea:	d019      	beq.n	8047220 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80471ec:	68fb      	ldr	r3, [r7, #12]
 80471ee:	681b      	ldr	r3, [r3, #0]
 80471f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80471f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80471f4:	e853 3f00 	ldrex	r3, [r3]
 80471f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80471fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80471fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8047200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047202:	68fb      	ldr	r3, [r7, #12]
 8047204:	681b      	ldr	r3, [r3, #0]
 8047206:	461a      	mov	r2, r3
 8047208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804720a:	637b      	str	r3, [r7, #52]	; 0x34
 804720c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804720e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8047210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8047212:	e841 2300 	strex	r3, r2, [r1]
 8047216:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8047218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804721a:	2b00      	cmp	r3, #0
 804721c:	d1e6      	bne.n	80471ec <UART_Start_Receive_IT+0x110>
 804721e:	e018      	b.n	8047252 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8047220:	68fb      	ldr	r3, [r7, #12]
 8047222:	681b      	ldr	r3, [r3, #0]
 8047224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047226:	697b      	ldr	r3, [r7, #20]
 8047228:	e853 3f00 	ldrex	r3, [r3]
 804722c:	613b      	str	r3, [r7, #16]
   return(result);
 804722e:	693b      	ldr	r3, [r7, #16]
 8047230:	f043 0320 	orr.w	r3, r3, #32
 8047234:	653b      	str	r3, [r7, #80]	; 0x50
 8047236:	68fb      	ldr	r3, [r7, #12]
 8047238:	681b      	ldr	r3, [r3, #0]
 804723a:	461a      	mov	r2, r3
 804723c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804723e:	623b      	str	r3, [r7, #32]
 8047240:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047242:	69f9      	ldr	r1, [r7, #28]
 8047244:	6a3a      	ldr	r2, [r7, #32]
 8047246:	e841 2300 	strex	r3, r2, [r1]
 804724a:	61bb      	str	r3, [r7, #24]
   return(result);
 804724c:	69bb      	ldr	r3, [r7, #24]
 804724e:	2b00      	cmp	r3, #0
 8047250:	d1e6      	bne.n	8047220 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8047252:	2300      	movs	r3, #0
}
 8047254:	4618      	mov	r0, r3
 8047256:	375c      	adds	r7, #92	; 0x5c
 8047258:	46bd      	mov	sp, r7
 804725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804725e:	4770      	bx	lr
 8047260:	0804768d 	.word	0x0804768d
 8047264:	08047527 	.word	0x08047527

08047268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8047268:	b480      	push	{r7}
 804726a:	b095      	sub	sp, #84	; 0x54
 804726c:	af00      	add	r7, sp, #0
 804726e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8047270:	687b      	ldr	r3, [r7, #4]
 8047272:	681b      	ldr	r3, [r3, #0]
 8047274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8047278:	e853 3f00 	ldrex	r3, [r3]
 804727c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 804727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8047284:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047286:	687b      	ldr	r3, [r7, #4]
 8047288:	681b      	ldr	r3, [r3, #0]
 804728a:	461a      	mov	r2, r3
 804728c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 804728e:	643b      	str	r3, [r7, #64]	; 0x40
 8047290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8047294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8047296:	e841 2300 	strex	r3, r2, [r1]
 804729a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804729e:	2b00      	cmp	r3, #0
 80472a0:	d1e6      	bne.n	8047270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80472a2:	687b      	ldr	r3, [r7, #4]
 80472a4:	681b      	ldr	r3, [r3, #0]
 80472a6:	3308      	adds	r3, #8
 80472a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80472aa:	6a3b      	ldr	r3, [r7, #32]
 80472ac:	e853 3f00 	ldrex	r3, [r3]
 80472b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80472b2:	69fb      	ldr	r3, [r7, #28]
 80472b4:	f023 0301 	bic.w	r3, r3, #1
 80472b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80472ba:	687b      	ldr	r3, [r7, #4]
 80472bc:	681b      	ldr	r3, [r3, #0]
 80472be:	3308      	adds	r3, #8
 80472c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80472c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80472c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80472c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80472c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80472ca:	e841 2300 	strex	r3, r2, [r1]
 80472ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80472d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80472d2:	2b00      	cmp	r3, #0
 80472d4:	d1e5      	bne.n	80472a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80472d6:	687b      	ldr	r3, [r7, #4]
 80472d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80472da:	2b01      	cmp	r3, #1
 80472dc:	d118      	bne.n	8047310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80472de:	687b      	ldr	r3, [r7, #4]
 80472e0:	681b      	ldr	r3, [r3, #0]
 80472e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80472e4:	68fb      	ldr	r3, [r7, #12]
 80472e6:	e853 3f00 	ldrex	r3, [r3]
 80472ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80472ec:	68bb      	ldr	r3, [r7, #8]
 80472ee:	f023 0310 	bic.w	r3, r3, #16
 80472f2:	647b      	str	r3, [r7, #68]	; 0x44
 80472f4:	687b      	ldr	r3, [r7, #4]
 80472f6:	681b      	ldr	r3, [r3, #0]
 80472f8:	461a      	mov	r2, r3
 80472fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80472fc:	61bb      	str	r3, [r7, #24]
 80472fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047300:	6979      	ldr	r1, [r7, #20]
 8047302:	69ba      	ldr	r2, [r7, #24]
 8047304:	e841 2300 	strex	r3, r2, [r1]
 8047308:	613b      	str	r3, [r7, #16]
   return(result);
 804730a:	693b      	ldr	r3, [r7, #16]
 804730c:	2b00      	cmp	r3, #0
 804730e:	d1e6      	bne.n	80472de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8047310:	687b      	ldr	r3, [r7, #4]
 8047312:	2220      	movs	r2, #32
 8047314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8047318:	687b      	ldr	r3, [r7, #4]
 804731a:	2200      	movs	r2, #0
 804731c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 804731e:	687b      	ldr	r3, [r7, #4]
 8047320:	2200      	movs	r2, #0
 8047322:	669a      	str	r2, [r3, #104]	; 0x68
}
 8047324:	bf00      	nop
 8047326:	3754      	adds	r7, #84	; 0x54
 8047328:	46bd      	mov	sp, r7
 804732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804732e:	4770      	bx	lr

08047330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8047330:	b580      	push	{r7, lr}
 8047332:	b084      	sub	sp, #16
 8047334:	af00      	add	r7, sp, #0
 8047336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8047338:	687b      	ldr	r3, [r7, #4]
 804733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804733c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 804733e:	68fb      	ldr	r3, [r7, #12]
 8047340:	2200      	movs	r2, #0
 8047342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8047346:	68fb      	ldr	r3, [r7, #12]
 8047348:	2200      	movs	r2, #0
 804734a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804734e:	68f8      	ldr	r0, [r7, #12]
 8047350:	f7ff faaa 	bl	80468a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8047354:	bf00      	nop
 8047356:	3710      	adds	r7, #16
 8047358:	46bd      	mov	sp, r7
 804735a:	bd80      	pop	{r7, pc}

0804735c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 804735c:	b480      	push	{r7}
 804735e:	b08f      	sub	sp, #60	; 0x3c
 8047360:	af00      	add	r7, sp, #0
 8047362:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8047364:	687b      	ldr	r3, [r7, #4]
 8047366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8047368:	2b21      	cmp	r3, #33	; 0x21
 804736a:	d14c      	bne.n	8047406 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 804736c:	687b      	ldr	r3, [r7, #4]
 804736e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8047372:	b29b      	uxth	r3, r3
 8047374:	2b00      	cmp	r3, #0
 8047376:	d132      	bne.n	80473de <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8047378:	687b      	ldr	r3, [r7, #4]
 804737a:	681b      	ldr	r3, [r3, #0]
 804737c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804737e:	6a3b      	ldr	r3, [r7, #32]
 8047380:	e853 3f00 	ldrex	r3, [r3]
 8047384:	61fb      	str	r3, [r7, #28]
   return(result);
 8047386:	69fb      	ldr	r3, [r7, #28]
 8047388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804738c:	637b      	str	r3, [r7, #52]	; 0x34
 804738e:	687b      	ldr	r3, [r7, #4]
 8047390:	681b      	ldr	r3, [r3, #0]
 8047392:	461a      	mov	r2, r3
 8047394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8047396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8047398:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804739a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804739c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804739e:	e841 2300 	strex	r3, r2, [r1]
 80473a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80473a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80473a6:	2b00      	cmp	r3, #0
 80473a8:	d1e6      	bne.n	8047378 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80473aa:	687b      	ldr	r3, [r7, #4]
 80473ac:	681b      	ldr	r3, [r3, #0]
 80473ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80473b0:	68fb      	ldr	r3, [r7, #12]
 80473b2:	e853 3f00 	ldrex	r3, [r3]
 80473b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80473b8:	68bb      	ldr	r3, [r7, #8]
 80473ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80473be:	633b      	str	r3, [r7, #48]	; 0x30
 80473c0:	687b      	ldr	r3, [r7, #4]
 80473c2:	681b      	ldr	r3, [r3, #0]
 80473c4:	461a      	mov	r2, r3
 80473c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80473c8:	61bb      	str	r3, [r7, #24]
 80473ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80473cc:	6979      	ldr	r1, [r7, #20]
 80473ce:	69ba      	ldr	r2, [r7, #24]
 80473d0:	e841 2300 	strex	r3, r2, [r1]
 80473d4:	613b      	str	r3, [r7, #16]
   return(result);
 80473d6:	693b      	ldr	r3, [r7, #16]
 80473d8:	2b00      	cmp	r3, #0
 80473da:	d1e6      	bne.n	80473aa <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80473dc:	e013      	b.n	8047406 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80473de:	687b      	ldr	r3, [r7, #4]
 80473e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80473e2:	781a      	ldrb	r2, [r3, #0]
 80473e4:	687b      	ldr	r3, [r7, #4]
 80473e6:	681b      	ldr	r3, [r3, #0]
 80473e8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80473ea:	687b      	ldr	r3, [r7, #4]
 80473ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80473ee:	1c5a      	adds	r2, r3, #1
 80473f0:	687b      	ldr	r3, [r7, #4]
 80473f2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80473f4:	687b      	ldr	r3, [r7, #4]
 80473f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80473fa:	b29b      	uxth	r3, r3
 80473fc:	3b01      	subs	r3, #1
 80473fe:	b29a      	uxth	r2, r3
 8047400:	687b      	ldr	r3, [r7, #4]
 8047402:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8047406:	bf00      	nop
 8047408:	373c      	adds	r7, #60	; 0x3c
 804740a:	46bd      	mov	sp, r7
 804740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047410:	4770      	bx	lr

08047412 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8047412:	b480      	push	{r7}
 8047414:	b091      	sub	sp, #68	; 0x44
 8047416:	af00      	add	r7, sp, #0
 8047418:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804741a:	687b      	ldr	r3, [r7, #4]
 804741c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804741e:	2b21      	cmp	r3, #33	; 0x21
 8047420:	d151      	bne.n	80474c6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8047422:	687b      	ldr	r3, [r7, #4]
 8047424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8047428:	b29b      	uxth	r3, r3
 804742a:	2b00      	cmp	r3, #0
 804742c:	d132      	bne.n	8047494 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 804742e:	687b      	ldr	r3, [r7, #4]
 8047430:	681b      	ldr	r3, [r3, #0]
 8047432:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047436:	e853 3f00 	ldrex	r3, [r3]
 804743a:	623b      	str	r3, [r7, #32]
   return(result);
 804743c:	6a3b      	ldr	r3, [r7, #32]
 804743e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8047442:	63bb      	str	r3, [r7, #56]	; 0x38
 8047444:	687b      	ldr	r3, [r7, #4]
 8047446:	681b      	ldr	r3, [r3, #0]
 8047448:	461a      	mov	r2, r3
 804744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804744c:	633b      	str	r3, [r7, #48]	; 0x30
 804744e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047450:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8047452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8047454:	e841 2300 	strex	r3, r2, [r1]
 8047458:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 804745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804745c:	2b00      	cmp	r3, #0
 804745e:	d1e6      	bne.n	804742e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8047460:	687b      	ldr	r3, [r7, #4]
 8047462:	681b      	ldr	r3, [r3, #0]
 8047464:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047466:	693b      	ldr	r3, [r7, #16]
 8047468:	e853 3f00 	ldrex	r3, [r3]
 804746c:	60fb      	str	r3, [r7, #12]
   return(result);
 804746e:	68fb      	ldr	r3, [r7, #12]
 8047470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8047474:	637b      	str	r3, [r7, #52]	; 0x34
 8047476:	687b      	ldr	r3, [r7, #4]
 8047478:	681b      	ldr	r3, [r3, #0]
 804747a:	461a      	mov	r2, r3
 804747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804747e:	61fb      	str	r3, [r7, #28]
 8047480:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047482:	69b9      	ldr	r1, [r7, #24]
 8047484:	69fa      	ldr	r2, [r7, #28]
 8047486:	e841 2300 	strex	r3, r2, [r1]
 804748a:	617b      	str	r3, [r7, #20]
   return(result);
 804748c:	697b      	ldr	r3, [r7, #20]
 804748e:	2b00      	cmp	r3, #0
 8047490:	d1e6      	bne.n	8047460 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8047492:	e018      	b.n	80474c6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8047494:	687b      	ldr	r3, [r7, #4]
 8047496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8047498:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 804749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804749c:	881b      	ldrh	r3, [r3, #0]
 804749e:	461a      	mov	r2, r3
 80474a0:	687b      	ldr	r3, [r7, #4]
 80474a2:	681b      	ldr	r3, [r3, #0]
 80474a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80474a8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80474aa:	687b      	ldr	r3, [r7, #4]
 80474ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80474ae:	1c9a      	adds	r2, r3, #2
 80474b0:	687b      	ldr	r3, [r7, #4]
 80474b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80474b4:	687b      	ldr	r3, [r7, #4]
 80474b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80474ba:	b29b      	uxth	r3, r3
 80474bc:	3b01      	subs	r3, #1
 80474be:	b29a      	uxth	r2, r3
 80474c0:	687b      	ldr	r3, [r7, #4]
 80474c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80474c6:	bf00      	nop
 80474c8:	3744      	adds	r7, #68	; 0x44
 80474ca:	46bd      	mov	sp, r7
 80474cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80474d0:	4770      	bx	lr

080474d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80474d2:	b580      	push	{r7, lr}
 80474d4:	b088      	sub	sp, #32
 80474d6:	af00      	add	r7, sp, #0
 80474d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80474da:	687b      	ldr	r3, [r7, #4]
 80474dc:	681b      	ldr	r3, [r3, #0]
 80474de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80474e0:	68fb      	ldr	r3, [r7, #12]
 80474e2:	e853 3f00 	ldrex	r3, [r3]
 80474e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80474e8:	68bb      	ldr	r3, [r7, #8]
 80474ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80474ee:	61fb      	str	r3, [r7, #28]
 80474f0:	687b      	ldr	r3, [r7, #4]
 80474f2:	681b      	ldr	r3, [r3, #0]
 80474f4:	461a      	mov	r2, r3
 80474f6:	69fb      	ldr	r3, [r7, #28]
 80474f8:	61bb      	str	r3, [r7, #24]
 80474fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80474fc:	6979      	ldr	r1, [r7, #20]
 80474fe:	69ba      	ldr	r2, [r7, #24]
 8047500:	e841 2300 	strex	r3, r2, [r1]
 8047504:	613b      	str	r3, [r7, #16]
   return(result);
 8047506:	693b      	ldr	r3, [r7, #16]
 8047508:	2b00      	cmp	r3, #0
 804750a:	d1e6      	bne.n	80474da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804750c:	687b      	ldr	r3, [r7, #4]
 804750e:	2220      	movs	r2, #32
 8047510:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8047512:	687b      	ldr	r3, [r7, #4]
 8047514:	2200      	movs	r2, #0
 8047516:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8047518:	6878      	ldr	r0, [r7, #4]
 804751a:	f7ff f9bb 	bl	8046894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804751e:	bf00      	nop
 8047520:	3720      	adds	r7, #32
 8047522:	46bd      	mov	sp, r7
 8047524:	bd80      	pop	{r7, pc}

08047526 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8047526:	b580      	push	{r7, lr}
 8047528:	b096      	sub	sp, #88	; 0x58
 804752a:	af00      	add	r7, sp, #0
 804752c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 804752e:	687b      	ldr	r3, [r7, #4]
 8047530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8047534:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8047538:	687b      	ldr	r3, [r7, #4]
 804753a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804753e:	2b22      	cmp	r3, #34	; 0x22
 8047540:	f040 8098 	bne.w	8047674 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8047544:	687b      	ldr	r3, [r7, #4]
 8047546:	681b      	ldr	r3, [r3, #0]
 8047548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804754a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 804754e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8047552:	b2d9      	uxtb	r1, r3
 8047554:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8047558:	b2da      	uxtb	r2, r3
 804755a:	687b      	ldr	r3, [r7, #4]
 804755c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804755e:	400a      	ands	r2, r1
 8047560:	b2d2      	uxtb	r2, r2
 8047562:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8047564:	687b      	ldr	r3, [r7, #4]
 8047566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047568:	1c5a      	adds	r2, r3, #1
 804756a:	687b      	ldr	r3, [r7, #4]
 804756c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 804756e:	687b      	ldr	r3, [r7, #4]
 8047570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8047574:	b29b      	uxth	r3, r3
 8047576:	3b01      	subs	r3, #1
 8047578:	b29a      	uxth	r2, r3
 804757a:	687b      	ldr	r3, [r7, #4]
 804757c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8047580:	687b      	ldr	r3, [r7, #4]
 8047582:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8047586:	b29b      	uxth	r3, r3
 8047588:	2b00      	cmp	r3, #0
 804758a:	d17b      	bne.n	8047684 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 804758c:	687b      	ldr	r3, [r7, #4]
 804758e:	681b      	ldr	r3, [r3, #0]
 8047590:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047594:	e853 3f00 	ldrex	r3, [r3]
 8047598:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 804759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804759c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80475a0:	653b      	str	r3, [r7, #80]	; 0x50
 80475a2:	687b      	ldr	r3, [r7, #4]
 80475a4:	681b      	ldr	r3, [r3, #0]
 80475a6:	461a      	mov	r2, r3
 80475a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80475aa:	647b      	str	r3, [r7, #68]	; 0x44
 80475ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80475ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80475b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80475b2:	e841 2300 	strex	r3, r2, [r1]
 80475b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80475b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80475ba:	2b00      	cmp	r3, #0
 80475bc:	d1e6      	bne.n	804758c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80475be:	687b      	ldr	r3, [r7, #4]
 80475c0:	681b      	ldr	r3, [r3, #0]
 80475c2:	3308      	adds	r3, #8
 80475c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80475c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80475c8:	e853 3f00 	ldrex	r3, [r3]
 80475cc:	623b      	str	r3, [r7, #32]
   return(result);
 80475ce:	6a3b      	ldr	r3, [r7, #32]
 80475d0:	f023 0301 	bic.w	r3, r3, #1
 80475d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80475d6:	687b      	ldr	r3, [r7, #4]
 80475d8:	681b      	ldr	r3, [r3, #0]
 80475da:	3308      	adds	r3, #8
 80475dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80475de:	633a      	str	r2, [r7, #48]	; 0x30
 80475e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80475e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80475e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80475e6:	e841 2300 	strex	r3, r2, [r1]
 80475ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80475ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80475ee:	2b00      	cmp	r3, #0
 80475f0:	d1e5      	bne.n	80475be <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80475f2:	687b      	ldr	r3, [r7, #4]
 80475f4:	2220      	movs	r2, #32
 80475f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80475fa:	687b      	ldr	r3, [r7, #4]
 80475fc:	2200      	movs	r2, #0
 80475fe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8047600:	687b      	ldr	r3, [r7, #4]
 8047602:	2200      	movs	r2, #0
 8047604:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8047606:	687b      	ldr	r3, [r7, #4]
 8047608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804760a:	2b01      	cmp	r3, #1
 804760c:	d12e      	bne.n	804766c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804760e:	687b      	ldr	r3, [r7, #4]
 8047610:	2200      	movs	r2, #0
 8047612:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8047614:	687b      	ldr	r3, [r7, #4]
 8047616:	681b      	ldr	r3, [r3, #0]
 8047618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804761a:	693b      	ldr	r3, [r7, #16]
 804761c:	e853 3f00 	ldrex	r3, [r3]
 8047620:	60fb      	str	r3, [r7, #12]
   return(result);
 8047622:	68fb      	ldr	r3, [r7, #12]
 8047624:	f023 0310 	bic.w	r3, r3, #16
 8047628:	64bb      	str	r3, [r7, #72]	; 0x48
 804762a:	687b      	ldr	r3, [r7, #4]
 804762c:	681b      	ldr	r3, [r3, #0]
 804762e:	461a      	mov	r2, r3
 8047630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8047632:	61fb      	str	r3, [r7, #28]
 8047634:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047636:	69b9      	ldr	r1, [r7, #24]
 8047638:	69fa      	ldr	r2, [r7, #28]
 804763a:	e841 2300 	strex	r3, r2, [r1]
 804763e:	617b      	str	r3, [r7, #20]
   return(result);
 8047640:	697b      	ldr	r3, [r7, #20]
 8047642:	2b00      	cmp	r3, #0
 8047644:	d1e6      	bne.n	8047614 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8047646:	687b      	ldr	r3, [r7, #4]
 8047648:	681b      	ldr	r3, [r3, #0]
 804764a:	69db      	ldr	r3, [r3, #28]
 804764c:	f003 0310 	and.w	r3, r3, #16
 8047650:	2b10      	cmp	r3, #16
 8047652:	d103      	bne.n	804765c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8047654:	687b      	ldr	r3, [r7, #4]
 8047656:	681b      	ldr	r3, [r3, #0]
 8047658:	2210      	movs	r2, #16
 804765a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 804765c:	687b      	ldr	r3, [r7, #4]
 804765e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8047662:	4619      	mov	r1, r3
 8047664:	6878      	ldr	r0, [r7, #4]
 8047666:	f7ff f929 	bl	80468bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 804766a:	e00b      	b.n	8047684 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 804766c:	6878      	ldr	r0, [r7, #4]
 804766e:	f7f8 ffe3 	bl	8040638 <HAL_UART_RxCpltCallback>
}
 8047672:	e007      	b.n	8047684 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8047674:	687b      	ldr	r3, [r7, #4]
 8047676:	681b      	ldr	r3, [r3, #0]
 8047678:	699a      	ldr	r2, [r3, #24]
 804767a:	687b      	ldr	r3, [r7, #4]
 804767c:	681b      	ldr	r3, [r3, #0]
 804767e:	f042 0208 	orr.w	r2, r2, #8
 8047682:	619a      	str	r2, [r3, #24]
}
 8047684:	bf00      	nop
 8047686:	3758      	adds	r7, #88	; 0x58
 8047688:	46bd      	mov	sp, r7
 804768a:	bd80      	pop	{r7, pc}

0804768c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 804768c:	b580      	push	{r7, lr}
 804768e:	b096      	sub	sp, #88	; 0x58
 8047690:	af00      	add	r7, sp, #0
 8047692:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8047694:	687b      	ldr	r3, [r7, #4]
 8047696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 804769a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 804769e:	687b      	ldr	r3, [r7, #4]
 80476a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80476a4:	2b22      	cmp	r3, #34	; 0x22
 80476a6:	f040 8098 	bne.w	80477da <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80476aa:	687b      	ldr	r3, [r7, #4]
 80476ac:	681b      	ldr	r3, [r3, #0]
 80476ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80476b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80476b4:	687b      	ldr	r3, [r7, #4]
 80476b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80476b8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80476ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80476be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80476c2:	4013      	ands	r3, r2
 80476c4:	b29a      	uxth	r2, r3
 80476c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80476c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80476ca:	687b      	ldr	r3, [r7, #4]
 80476cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80476ce:	1c9a      	adds	r2, r3, #2
 80476d0:	687b      	ldr	r3, [r7, #4]
 80476d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80476d4:	687b      	ldr	r3, [r7, #4]
 80476d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80476da:	b29b      	uxth	r3, r3
 80476dc:	3b01      	subs	r3, #1
 80476de:	b29a      	uxth	r2, r3
 80476e0:	687b      	ldr	r3, [r7, #4]
 80476e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80476e6:	687b      	ldr	r3, [r7, #4]
 80476e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80476ec:	b29b      	uxth	r3, r3
 80476ee:	2b00      	cmp	r3, #0
 80476f0:	d17b      	bne.n	80477ea <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80476f2:	687b      	ldr	r3, [r7, #4]
 80476f4:	681b      	ldr	r3, [r3, #0]
 80476f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80476f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80476fa:	e853 3f00 	ldrex	r3, [r3]
 80476fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8047700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047702:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8047706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047708:	687b      	ldr	r3, [r7, #4]
 804770a:	681b      	ldr	r3, [r3, #0]
 804770c:	461a      	mov	r2, r3
 804770e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8047710:	643b      	str	r3, [r7, #64]	; 0x40
 8047712:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047714:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8047716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8047718:	e841 2300 	strex	r3, r2, [r1]
 804771c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 804771e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047720:	2b00      	cmp	r3, #0
 8047722:	d1e6      	bne.n	80476f2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8047724:	687b      	ldr	r3, [r7, #4]
 8047726:	681b      	ldr	r3, [r3, #0]
 8047728:	3308      	adds	r3, #8
 804772a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804772c:	6a3b      	ldr	r3, [r7, #32]
 804772e:	e853 3f00 	ldrex	r3, [r3]
 8047732:	61fb      	str	r3, [r7, #28]
   return(result);
 8047734:	69fb      	ldr	r3, [r7, #28]
 8047736:	f023 0301 	bic.w	r3, r3, #1
 804773a:	64bb      	str	r3, [r7, #72]	; 0x48
 804773c:	687b      	ldr	r3, [r7, #4]
 804773e:	681b      	ldr	r3, [r3, #0]
 8047740:	3308      	adds	r3, #8
 8047742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8047744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8047746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8047748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804774a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804774c:	e841 2300 	strex	r3, r2, [r1]
 8047750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8047752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047754:	2b00      	cmp	r3, #0
 8047756:	d1e5      	bne.n	8047724 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8047758:	687b      	ldr	r3, [r7, #4]
 804775a:	2220      	movs	r2, #32
 804775c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8047760:	687b      	ldr	r3, [r7, #4]
 8047762:	2200      	movs	r2, #0
 8047764:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8047766:	687b      	ldr	r3, [r7, #4]
 8047768:	2200      	movs	r2, #0
 804776a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804776c:	687b      	ldr	r3, [r7, #4]
 804776e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8047770:	2b01      	cmp	r3, #1
 8047772:	d12e      	bne.n	80477d2 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8047774:	687b      	ldr	r3, [r7, #4]
 8047776:	2200      	movs	r2, #0
 8047778:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804777a:	687b      	ldr	r3, [r7, #4]
 804777c:	681b      	ldr	r3, [r3, #0]
 804777e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8047780:	68fb      	ldr	r3, [r7, #12]
 8047782:	e853 3f00 	ldrex	r3, [r3]
 8047786:	60bb      	str	r3, [r7, #8]
   return(result);
 8047788:	68bb      	ldr	r3, [r7, #8]
 804778a:	f023 0310 	bic.w	r3, r3, #16
 804778e:	647b      	str	r3, [r7, #68]	; 0x44
 8047790:	687b      	ldr	r3, [r7, #4]
 8047792:	681b      	ldr	r3, [r3, #0]
 8047794:	461a      	mov	r2, r3
 8047796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047798:	61bb      	str	r3, [r7, #24]
 804779a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804779c:	6979      	ldr	r1, [r7, #20]
 804779e:	69ba      	ldr	r2, [r7, #24]
 80477a0:	e841 2300 	strex	r3, r2, [r1]
 80477a4:	613b      	str	r3, [r7, #16]
   return(result);
 80477a6:	693b      	ldr	r3, [r7, #16]
 80477a8:	2b00      	cmp	r3, #0
 80477aa:	d1e6      	bne.n	804777a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80477ac:	687b      	ldr	r3, [r7, #4]
 80477ae:	681b      	ldr	r3, [r3, #0]
 80477b0:	69db      	ldr	r3, [r3, #28]
 80477b2:	f003 0310 	and.w	r3, r3, #16
 80477b6:	2b10      	cmp	r3, #16
 80477b8:	d103      	bne.n	80477c2 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80477ba:	687b      	ldr	r3, [r7, #4]
 80477bc:	681b      	ldr	r3, [r3, #0]
 80477be:	2210      	movs	r2, #16
 80477c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80477c2:	687b      	ldr	r3, [r7, #4]
 80477c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80477c8:	4619      	mov	r1, r3
 80477ca:	6878      	ldr	r0, [r7, #4]
 80477cc:	f7ff f876 	bl	80468bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80477d0:	e00b      	b.n	80477ea <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80477d2:	6878      	ldr	r0, [r7, #4]
 80477d4:	f7f8 ff30 	bl	8040638 <HAL_UART_RxCpltCallback>
}
 80477d8:	e007      	b.n	80477ea <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80477da:	687b      	ldr	r3, [r7, #4]
 80477dc:	681b      	ldr	r3, [r3, #0]
 80477de:	699a      	ldr	r2, [r3, #24]
 80477e0:	687b      	ldr	r3, [r7, #4]
 80477e2:	681b      	ldr	r3, [r3, #0]
 80477e4:	f042 0208 	orr.w	r2, r2, #8
 80477e8:	619a      	str	r2, [r3, #24]
}
 80477ea:	bf00      	nop
 80477ec:	3758      	adds	r7, #88	; 0x58
 80477ee:	46bd      	mov	sp, r7
 80477f0:	bd80      	pop	{r7, pc}
	...

080477f4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80477f4:	b480      	push	{r7}
 80477f6:	b087      	sub	sp, #28
 80477f8:	af00      	add	r7, sp, #0
 80477fa:	6078      	str	r0, [r7, #4]
 80477fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80477fe:	683b      	ldr	r3, [r7, #0]
 8047800:	681a      	ldr	r2, [r3, #0]
 8047802:	687b      	ldr	r3, [r7, #4]
 8047804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047808:	683a      	ldr	r2, [r7, #0]
 804780a:	6812      	ldr	r2, [r2, #0]
 804780c:	f023 0101 	bic.w	r1, r3, #1
 8047810:	687b      	ldr	r3, [r7, #4]
 8047812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8047816:	683b      	ldr	r3, [r7, #0]
 8047818:	689b      	ldr	r3, [r3, #8]
 804781a:	2b08      	cmp	r3, #8
 804781c:	d102      	bne.n	8047824 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 804781e:	2340      	movs	r3, #64	; 0x40
 8047820:	617b      	str	r3, [r7, #20]
 8047822:	e001      	b.n	8047828 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8047824:	2300      	movs	r3, #0
 8047826:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8047828:	683b      	ldr	r3, [r7, #0]
 804782a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 804782c:	697b      	ldr	r3, [r7, #20]
 804782e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8047830:	683b      	ldr	r3, [r7, #0]
 8047832:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8047834:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8047836:	683b      	ldr	r3, [r7, #0]
 8047838:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 804783a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 804783c:	683b      	ldr	r3, [r7, #0]
 804783e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8047840:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8047842:	683b      	ldr	r3, [r7, #0]
 8047844:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8047846:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8047848:	683b      	ldr	r3, [r7, #0]
 804784a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 804784c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 804784e:	683b      	ldr	r3, [r7, #0]
 8047850:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8047852:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8047854:	683b      	ldr	r3, [r7, #0]
 8047856:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8047858:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 804785a:	683b      	ldr	r3, [r7, #0]
 804785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 804785e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8047860:	683b      	ldr	r3, [r7, #0]
 8047862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8047864:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8047866:	683b      	ldr	r3, [r7, #0]
 8047868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 804786a:	4313      	orrs	r3, r2
 804786c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 804786e:	683b      	ldr	r3, [r7, #0]
 8047870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047872:	693a      	ldr	r2, [r7, #16]
 8047874:	4313      	orrs	r3, r2
 8047876:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8047878:	683b      	ldr	r3, [r7, #0]
 804787a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804787c:	693a      	ldr	r2, [r7, #16]
 804787e:	4313      	orrs	r3, r2
 8047880:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8047882:	683b      	ldr	r3, [r7, #0]
 8047884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047886:	693a      	ldr	r2, [r7, #16]
 8047888:	4313      	orrs	r3, r2
 804788a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 804788c:	4b20      	ldr	r3, [pc, #128]	; (8047910 <FMC_NORSRAM_Init+0x11c>)
 804788e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8047890:	68fb      	ldr	r3, [r7, #12]
 8047892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8047896:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8047898:	68fb      	ldr	r3, [r7, #12]
 804789a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804789e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80478a0:	68fb      	ldr	r3, [r7, #12]
 80478a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80478a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80478a8:	683b      	ldr	r3, [r7, #0]
 80478aa:	681a      	ldr	r2, [r3, #0]
 80478ac:	687b      	ldr	r3, [r7, #4]
 80478ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80478b2:	68fb      	ldr	r3, [r7, #12]
 80478b4:	43db      	mvns	r3, r3
 80478b6:	ea02 0103 	and.w	r1, r2, r3
 80478ba:	683b      	ldr	r3, [r7, #0]
 80478bc:	681a      	ldr	r2, [r3, #0]
 80478be:	693b      	ldr	r3, [r7, #16]
 80478c0:	4319      	orrs	r1, r3
 80478c2:	687b      	ldr	r3, [r7, #4]
 80478c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80478c8:	683b      	ldr	r3, [r7, #0]
 80478ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80478cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80478d0:	d10c      	bne.n	80478ec <FMC_NORSRAM_Init+0xf8>
 80478d2:	683b      	ldr	r3, [r7, #0]
 80478d4:	681b      	ldr	r3, [r3, #0]
 80478d6:	2b00      	cmp	r3, #0
 80478d8:	d008      	beq.n	80478ec <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80478da:	687b      	ldr	r3, [r7, #4]
 80478dc:	681b      	ldr	r3, [r3, #0]
 80478de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80478e2:	683b      	ldr	r3, [r7, #0]
 80478e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80478e6:	431a      	orrs	r2, r3
 80478e8:	687b      	ldr	r3, [r7, #4]
 80478ea:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80478ec:	683b      	ldr	r3, [r7, #0]
 80478ee:	681b      	ldr	r3, [r3, #0]
 80478f0:	2b00      	cmp	r3, #0
 80478f2:	d006      	beq.n	8047902 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80478f4:	687b      	ldr	r3, [r7, #4]
 80478f6:	681a      	ldr	r2, [r3, #0]
 80478f8:	683b      	ldr	r3, [r7, #0]
 80478fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80478fc:	431a      	orrs	r2, r3
 80478fe:	687b      	ldr	r3, [r7, #4]
 8047900:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8047902:	2300      	movs	r3, #0
}
 8047904:	4618      	mov	r0, r3
 8047906:	371c      	adds	r7, #28
 8047908:	46bd      	mov	sp, r7
 804790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804790e:	4770      	bx	lr
 8047910:	0008fb7f 	.word	0x0008fb7f

08047914 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8047914:	b480      	push	{r7}
 8047916:	b087      	sub	sp, #28
 8047918:	af00      	add	r7, sp, #0
 804791a:	60f8      	str	r0, [r7, #12]
 804791c:	60b9      	str	r1, [r7, #8]
 804791e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8047920:	687b      	ldr	r3, [r7, #4]
 8047922:	1c5a      	adds	r2, r3, #1
 8047924:	68fb      	ldr	r3, [r7, #12]
 8047926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804792a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 804792e:	68bb      	ldr	r3, [r7, #8]
 8047930:	681a      	ldr	r2, [r3, #0]
 8047932:	68bb      	ldr	r3, [r7, #8]
 8047934:	685b      	ldr	r3, [r3, #4]
 8047936:	011b      	lsls	r3, r3, #4
 8047938:	431a      	orrs	r2, r3
 804793a:	68bb      	ldr	r3, [r7, #8]
 804793c:	689b      	ldr	r3, [r3, #8]
 804793e:	021b      	lsls	r3, r3, #8
 8047940:	431a      	orrs	r2, r3
 8047942:	68bb      	ldr	r3, [r7, #8]
 8047944:	68db      	ldr	r3, [r3, #12]
 8047946:	041b      	lsls	r3, r3, #16
 8047948:	431a      	orrs	r2, r3
 804794a:	68bb      	ldr	r3, [r7, #8]
 804794c:	691b      	ldr	r3, [r3, #16]
 804794e:	3b01      	subs	r3, #1
 8047950:	051b      	lsls	r3, r3, #20
 8047952:	431a      	orrs	r2, r3
 8047954:	68bb      	ldr	r3, [r7, #8]
 8047956:	695b      	ldr	r3, [r3, #20]
 8047958:	3b02      	subs	r3, #2
 804795a:	061b      	lsls	r3, r3, #24
 804795c:	431a      	orrs	r2, r3
 804795e:	68bb      	ldr	r3, [r7, #8]
 8047960:	699b      	ldr	r3, [r3, #24]
 8047962:	4313      	orrs	r3, r2
 8047964:	687a      	ldr	r2, [r7, #4]
 8047966:	3201      	adds	r2, #1
 8047968:	4319      	orrs	r1, r3
 804796a:	68fb      	ldr	r3, [r7, #12]
 804796c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8047970:	68fb      	ldr	r3, [r7, #12]
 8047972:	681b      	ldr	r3, [r3, #0]
 8047974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8047978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804797c:	d113      	bne.n	80479a6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 804797e:	68fb      	ldr	r3, [r7, #12]
 8047980:	685b      	ldr	r3, [r3, #4]
 8047982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8047986:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8047988:	68bb      	ldr	r3, [r7, #8]
 804798a:	691b      	ldr	r3, [r3, #16]
 804798c:	3b01      	subs	r3, #1
 804798e:	051b      	lsls	r3, r3, #20
 8047990:	697a      	ldr	r2, [r7, #20]
 8047992:	4313      	orrs	r3, r2
 8047994:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8047996:	68fb      	ldr	r3, [r7, #12]
 8047998:	685b      	ldr	r3, [r3, #4]
 804799a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 804799e:	697b      	ldr	r3, [r7, #20]
 80479a0:	431a      	orrs	r2, r3
 80479a2:	68fb      	ldr	r3, [r7, #12]
 80479a4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80479a6:	2300      	movs	r3, #0
}
 80479a8:	4618      	mov	r0, r3
 80479aa:	371c      	adds	r7, #28
 80479ac:	46bd      	mov	sp, r7
 80479ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80479b2:	4770      	bx	lr

080479b4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80479b4:	b480      	push	{r7}
 80479b6:	b085      	sub	sp, #20
 80479b8:	af00      	add	r7, sp, #0
 80479ba:	60f8      	str	r0, [r7, #12]
 80479bc:	60b9      	str	r1, [r7, #8]
 80479be:	607a      	str	r2, [r7, #4]
 80479c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80479c2:	683b      	ldr	r3, [r7, #0]
 80479c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80479c8:	d11d      	bne.n	8047a06 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80479ca:	68fb      	ldr	r3, [r7, #12]
 80479cc:	687a      	ldr	r2, [r7, #4]
 80479ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80479d2:	4b13      	ldr	r3, [pc, #76]	; (8047a20 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80479d4:	4013      	ands	r3, r2
 80479d6:	68ba      	ldr	r2, [r7, #8]
 80479d8:	6811      	ldr	r1, [r2, #0]
 80479da:	68ba      	ldr	r2, [r7, #8]
 80479dc:	6852      	ldr	r2, [r2, #4]
 80479de:	0112      	lsls	r2, r2, #4
 80479e0:	4311      	orrs	r1, r2
 80479e2:	68ba      	ldr	r2, [r7, #8]
 80479e4:	6892      	ldr	r2, [r2, #8]
 80479e6:	0212      	lsls	r2, r2, #8
 80479e8:	4311      	orrs	r1, r2
 80479ea:	68ba      	ldr	r2, [r7, #8]
 80479ec:	6992      	ldr	r2, [r2, #24]
 80479ee:	4311      	orrs	r1, r2
 80479f0:	68ba      	ldr	r2, [r7, #8]
 80479f2:	68d2      	ldr	r2, [r2, #12]
 80479f4:	0412      	lsls	r2, r2, #16
 80479f6:	430a      	orrs	r2, r1
 80479f8:	ea43 0102 	orr.w	r1, r3, r2
 80479fc:	68fb      	ldr	r3, [r7, #12]
 80479fe:	687a      	ldr	r2, [r7, #4]
 8047a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8047a04:	e005      	b.n	8047a12 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8047a06:	68fb      	ldr	r3, [r7, #12]
 8047a08:	687a      	ldr	r2, [r7, #4]
 8047a0a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8047a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8047a12:	2300      	movs	r3, #0
}
 8047a14:	4618      	mov	r0, r3
 8047a16:	3714      	adds	r7, #20
 8047a18:	46bd      	mov	sp, r7
 8047a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a1e:	4770      	bx	lr
 8047a20:	cff00000 	.word	0xcff00000

08047a24 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8047a24:	b580      	push	{r7, lr}
 8047a26:	b084      	sub	sp, #16
 8047a28:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8047a2a:	4b88      	ldr	r3, [pc, #544]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a2c:	22c0      	movs	r2, #192	; 0xc0
 8047a2e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8047a30:	4b86      	ldr	r3, [pc, #536]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a32:	22a8      	movs	r2, #168	; 0xa8
 8047a34:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8047a36:	4b85      	ldr	r3, [pc, #532]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a38:	2201      	movs	r2, #1
 8047a3a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 8047a3c:	4b83      	ldr	r3, [pc, #524]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a3e:	221e      	movs	r2, #30
 8047a40:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8047a42:	4b83      	ldr	r3, [pc, #524]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047a44:	22ff      	movs	r2, #255	; 0xff
 8047a46:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8047a48:	4b81      	ldr	r3, [pc, #516]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047a4a:	22ff      	movs	r2, #255	; 0xff
 8047a4c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8047a4e:	4b80      	ldr	r3, [pc, #512]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047a50:	22ff      	movs	r2, #255	; 0xff
 8047a52:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8047a54:	4b7e      	ldr	r3, [pc, #504]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047a56:	2200      	movs	r2, #0
 8047a58:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8047a5a:	4b7e      	ldr	r3, [pc, #504]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047a5c:	22c0      	movs	r2, #192	; 0xc0
 8047a5e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8047a60:	4b7c      	ldr	r3, [pc, #496]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047a62:	22a8      	movs	r2, #168	; 0xa8
 8047a64:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8047a66:	4b7b      	ldr	r3, [pc, #492]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047a68:	2201      	movs	r2, #1
 8047a6a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8047a6c:	4b79      	ldr	r3, [pc, #484]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047a6e:	2201      	movs	r2, #1
 8047a70:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8047a72:	2100      	movs	r1, #0
 8047a74:	2000      	movs	r0, #0
 8047a76:	f006 f809 	bl	804da8c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8047a7a:	4b74      	ldr	r3, [pc, #464]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a7c:	781b      	ldrb	r3, [r3, #0]
 8047a7e:	061a      	lsls	r2, r3, #24
 8047a80:	4b72      	ldr	r3, [pc, #456]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a82:	785b      	ldrb	r3, [r3, #1]
 8047a84:	041b      	lsls	r3, r3, #16
 8047a86:	431a      	orrs	r2, r3
 8047a88:	4b70      	ldr	r3, [pc, #448]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a8a:	789b      	ldrb	r3, [r3, #2]
 8047a8c:	021b      	lsls	r3, r3, #8
 8047a8e:	4313      	orrs	r3, r2
 8047a90:	4a6e      	ldr	r2, [pc, #440]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a92:	78d2      	ldrb	r2, [r2, #3]
 8047a94:	4313      	orrs	r3, r2
 8047a96:	061a      	lsls	r2, r3, #24
 8047a98:	4b6c      	ldr	r3, [pc, #432]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047a9a:	781b      	ldrb	r3, [r3, #0]
 8047a9c:	0619      	lsls	r1, r3, #24
 8047a9e:	4b6b      	ldr	r3, [pc, #428]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047aa0:	785b      	ldrb	r3, [r3, #1]
 8047aa2:	041b      	lsls	r3, r3, #16
 8047aa4:	4319      	orrs	r1, r3
 8047aa6:	4b69      	ldr	r3, [pc, #420]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047aa8:	789b      	ldrb	r3, [r3, #2]
 8047aaa:	021b      	lsls	r3, r3, #8
 8047aac:	430b      	orrs	r3, r1
 8047aae:	4967      	ldr	r1, [pc, #412]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047ab0:	78c9      	ldrb	r1, [r1, #3]
 8047ab2:	430b      	orrs	r3, r1
 8047ab4:	021b      	lsls	r3, r3, #8
 8047ab6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8047aba:	431a      	orrs	r2, r3
 8047abc:	4b63      	ldr	r3, [pc, #396]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047abe:	781b      	ldrb	r3, [r3, #0]
 8047ac0:	0619      	lsls	r1, r3, #24
 8047ac2:	4b62      	ldr	r3, [pc, #392]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047ac4:	785b      	ldrb	r3, [r3, #1]
 8047ac6:	041b      	lsls	r3, r3, #16
 8047ac8:	4319      	orrs	r1, r3
 8047aca:	4b60      	ldr	r3, [pc, #384]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047acc:	789b      	ldrb	r3, [r3, #2]
 8047ace:	021b      	lsls	r3, r3, #8
 8047ad0:	430b      	orrs	r3, r1
 8047ad2:	495e      	ldr	r1, [pc, #376]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047ad4:	78c9      	ldrb	r1, [r1, #3]
 8047ad6:	430b      	orrs	r3, r1
 8047ad8:	0a1b      	lsrs	r3, r3, #8
 8047ada:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8047ade:	431a      	orrs	r2, r3
 8047ae0:	4b5a      	ldr	r3, [pc, #360]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047ae2:	781b      	ldrb	r3, [r3, #0]
 8047ae4:	0619      	lsls	r1, r3, #24
 8047ae6:	4b59      	ldr	r3, [pc, #356]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047ae8:	785b      	ldrb	r3, [r3, #1]
 8047aea:	041b      	lsls	r3, r3, #16
 8047aec:	4319      	orrs	r1, r3
 8047aee:	4b57      	ldr	r3, [pc, #348]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047af0:	789b      	ldrb	r3, [r3, #2]
 8047af2:	021b      	lsls	r3, r3, #8
 8047af4:	430b      	orrs	r3, r1
 8047af6:	4955      	ldr	r1, [pc, #340]	; (8047c4c <MX_LWIP_Init+0x228>)
 8047af8:	78c9      	ldrb	r1, [r1, #3]
 8047afa:	430b      	orrs	r3, r1
 8047afc:	0e1b      	lsrs	r3, r3, #24
 8047afe:	4313      	orrs	r3, r2
 8047b00:	4a55      	ldr	r2, [pc, #340]	; (8047c58 <MX_LWIP_Init+0x234>)
 8047b02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8047b04:	4b52      	ldr	r3, [pc, #328]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b06:	781b      	ldrb	r3, [r3, #0]
 8047b08:	061a      	lsls	r2, r3, #24
 8047b0a:	4b51      	ldr	r3, [pc, #324]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b0c:	785b      	ldrb	r3, [r3, #1]
 8047b0e:	041b      	lsls	r3, r3, #16
 8047b10:	431a      	orrs	r2, r3
 8047b12:	4b4f      	ldr	r3, [pc, #316]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b14:	789b      	ldrb	r3, [r3, #2]
 8047b16:	021b      	lsls	r3, r3, #8
 8047b18:	4313      	orrs	r3, r2
 8047b1a:	4a4d      	ldr	r2, [pc, #308]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b1c:	78d2      	ldrb	r2, [r2, #3]
 8047b1e:	4313      	orrs	r3, r2
 8047b20:	061a      	lsls	r2, r3, #24
 8047b22:	4b4b      	ldr	r3, [pc, #300]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b24:	781b      	ldrb	r3, [r3, #0]
 8047b26:	0619      	lsls	r1, r3, #24
 8047b28:	4b49      	ldr	r3, [pc, #292]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b2a:	785b      	ldrb	r3, [r3, #1]
 8047b2c:	041b      	lsls	r3, r3, #16
 8047b2e:	4319      	orrs	r1, r3
 8047b30:	4b47      	ldr	r3, [pc, #284]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b32:	789b      	ldrb	r3, [r3, #2]
 8047b34:	021b      	lsls	r3, r3, #8
 8047b36:	430b      	orrs	r3, r1
 8047b38:	4945      	ldr	r1, [pc, #276]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b3a:	78c9      	ldrb	r1, [r1, #3]
 8047b3c:	430b      	orrs	r3, r1
 8047b3e:	021b      	lsls	r3, r3, #8
 8047b40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8047b44:	431a      	orrs	r2, r3
 8047b46:	4b42      	ldr	r3, [pc, #264]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b48:	781b      	ldrb	r3, [r3, #0]
 8047b4a:	0619      	lsls	r1, r3, #24
 8047b4c:	4b40      	ldr	r3, [pc, #256]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b4e:	785b      	ldrb	r3, [r3, #1]
 8047b50:	041b      	lsls	r3, r3, #16
 8047b52:	4319      	orrs	r1, r3
 8047b54:	4b3e      	ldr	r3, [pc, #248]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b56:	789b      	ldrb	r3, [r3, #2]
 8047b58:	021b      	lsls	r3, r3, #8
 8047b5a:	430b      	orrs	r3, r1
 8047b5c:	493c      	ldr	r1, [pc, #240]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b5e:	78c9      	ldrb	r1, [r1, #3]
 8047b60:	430b      	orrs	r3, r1
 8047b62:	0a1b      	lsrs	r3, r3, #8
 8047b64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8047b68:	431a      	orrs	r2, r3
 8047b6a:	4b39      	ldr	r3, [pc, #228]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b6c:	781b      	ldrb	r3, [r3, #0]
 8047b6e:	0619      	lsls	r1, r3, #24
 8047b70:	4b37      	ldr	r3, [pc, #220]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b72:	785b      	ldrb	r3, [r3, #1]
 8047b74:	041b      	lsls	r3, r3, #16
 8047b76:	4319      	orrs	r1, r3
 8047b78:	4b35      	ldr	r3, [pc, #212]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b7a:	789b      	ldrb	r3, [r3, #2]
 8047b7c:	021b      	lsls	r3, r3, #8
 8047b7e:	430b      	orrs	r3, r1
 8047b80:	4933      	ldr	r1, [pc, #204]	; (8047c50 <MX_LWIP_Init+0x22c>)
 8047b82:	78c9      	ldrb	r1, [r1, #3]
 8047b84:	430b      	orrs	r3, r1
 8047b86:	0e1b      	lsrs	r3, r3, #24
 8047b88:	4313      	orrs	r3, r2
 8047b8a:	4a34      	ldr	r2, [pc, #208]	; (8047c5c <MX_LWIP_Init+0x238>)
 8047b8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8047b8e:	4b31      	ldr	r3, [pc, #196]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047b90:	781b      	ldrb	r3, [r3, #0]
 8047b92:	061a      	lsls	r2, r3, #24
 8047b94:	4b2f      	ldr	r3, [pc, #188]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047b96:	785b      	ldrb	r3, [r3, #1]
 8047b98:	041b      	lsls	r3, r3, #16
 8047b9a:	431a      	orrs	r2, r3
 8047b9c:	4b2d      	ldr	r3, [pc, #180]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047b9e:	789b      	ldrb	r3, [r3, #2]
 8047ba0:	021b      	lsls	r3, r3, #8
 8047ba2:	4313      	orrs	r3, r2
 8047ba4:	4a2b      	ldr	r2, [pc, #172]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047ba6:	78d2      	ldrb	r2, [r2, #3]
 8047ba8:	4313      	orrs	r3, r2
 8047baa:	061a      	lsls	r2, r3, #24
 8047bac:	4b29      	ldr	r3, [pc, #164]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bae:	781b      	ldrb	r3, [r3, #0]
 8047bb0:	0619      	lsls	r1, r3, #24
 8047bb2:	4b28      	ldr	r3, [pc, #160]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bb4:	785b      	ldrb	r3, [r3, #1]
 8047bb6:	041b      	lsls	r3, r3, #16
 8047bb8:	4319      	orrs	r1, r3
 8047bba:	4b26      	ldr	r3, [pc, #152]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bbc:	789b      	ldrb	r3, [r3, #2]
 8047bbe:	021b      	lsls	r3, r3, #8
 8047bc0:	430b      	orrs	r3, r1
 8047bc2:	4924      	ldr	r1, [pc, #144]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bc4:	78c9      	ldrb	r1, [r1, #3]
 8047bc6:	430b      	orrs	r3, r1
 8047bc8:	021b      	lsls	r3, r3, #8
 8047bca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8047bce:	431a      	orrs	r2, r3
 8047bd0:	4b20      	ldr	r3, [pc, #128]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bd2:	781b      	ldrb	r3, [r3, #0]
 8047bd4:	0619      	lsls	r1, r3, #24
 8047bd6:	4b1f      	ldr	r3, [pc, #124]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bd8:	785b      	ldrb	r3, [r3, #1]
 8047bda:	041b      	lsls	r3, r3, #16
 8047bdc:	4319      	orrs	r1, r3
 8047bde:	4b1d      	ldr	r3, [pc, #116]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047be0:	789b      	ldrb	r3, [r3, #2]
 8047be2:	021b      	lsls	r3, r3, #8
 8047be4:	430b      	orrs	r3, r1
 8047be6:	491b      	ldr	r1, [pc, #108]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047be8:	78c9      	ldrb	r1, [r1, #3]
 8047bea:	430b      	orrs	r3, r1
 8047bec:	0a1b      	lsrs	r3, r3, #8
 8047bee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8047bf2:	431a      	orrs	r2, r3
 8047bf4:	4b17      	ldr	r3, [pc, #92]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bf6:	781b      	ldrb	r3, [r3, #0]
 8047bf8:	0619      	lsls	r1, r3, #24
 8047bfa:	4b16      	ldr	r3, [pc, #88]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047bfc:	785b      	ldrb	r3, [r3, #1]
 8047bfe:	041b      	lsls	r3, r3, #16
 8047c00:	4319      	orrs	r1, r3
 8047c02:	4b14      	ldr	r3, [pc, #80]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047c04:	789b      	ldrb	r3, [r3, #2]
 8047c06:	021b      	lsls	r3, r3, #8
 8047c08:	430b      	orrs	r3, r1
 8047c0a:	4912      	ldr	r1, [pc, #72]	; (8047c54 <MX_LWIP_Init+0x230>)
 8047c0c:	78c9      	ldrb	r1, [r1, #3]
 8047c0e:	430b      	orrs	r3, r1
 8047c10:	0e1b      	lsrs	r3, r3, #24
 8047c12:	4313      	orrs	r3, r2
 8047c14:	4a12      	ldr	r2, [pc, #72]	; (8047c60 <MX_LWIP_Init+0x23c>)
 8047c16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8047c18:	4b12      	ldr	r3, [pc, #72]	; (8047c64 <MX_LWIP_Init+0x240>)
 8047c1a:	9302      	str	r3, [sp, #8]
 8047c1c:	4b12      	ldr	r3, [pc, #72]	; (8047c68 <MX_LWIP_Init+0x244>)
 8047c1e:	9301      	str	r3, [sp, #4]
 8047c20:	2300      	movs	r3, #0
 8047c22:	9300      	str	r3, [sp, #0]
 8047c24:	4b0e      	ldr	r3, [pc, #56]	; (8047c60 <MX_LWIP_Init+0x23c>)
 8047c26:	4a0d      	ldr	r2, [pc, #52]	; (8047c5c <MX_LWIP_Init+0x238>)
 8047c28:	490b      	ldr	r1, [pc, #44]	; (8047c58 <MX_LWIP_Init+0x234>)
 8047c2a:	4810      	ldr	r0, [pc, #64]	; (8047c6c <MX_LWIP_Init+0x248>)
 8047c2c:	f006 fcf8 	bl	804e620 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8047c30:	480e      	ldr	r0, [pc, #56]	; (8047c6c <MX_LWIP_Init+0x248>)
 8047c32:	f006 fea7 	bl	804e984 <netif_set_default>

  netif_set_down(&gnetif);
 8047c36:	480d      	ldr	r0, [pc, #52]	; (8047c6c <MX_LWIP_Init+0x248>)
 8047c38:	f006 ff20 	bl	804ea7c <netif_set_down>
//    /* When the netif link is down this function must be called */
//    netif_set_down(&gnetif);
//  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8047c3c:	490c      	ldr	r1, [pc, #48]	; (8047c70 <MX_LWIP_Init+0x24c>)
 8047c3e:	480b      	ldr	r0, [pc, #44]	; (8047c6c <MX_LWIP_Init+0x248>)
 8047c40:	f006 ffb2 	bl	804eba8 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8047c44:	bf00      	nop
 8047c46:	46bd      	mov	sp, r7
 8047c48:	bd80      	pop	{r7, pc}
 8047c4a:	bf00      	nop
 8047c4c:	2000108c 	.word	0x2000108c
 8047c50:	20001090 	.word	0x20001090
 8047c54:	20001094 	.word	0x20001094
 8047c58:	20001080 	.word	0x20001080
 8047c5c:	20001084 	.word	0x20001084
 8047c60:	20001088 	.word	0x20001088
 8047c64:	0804d99d 	.word	0x0804d99d
 8047c68:	080482b9 	.word	0x080482b9
 8047c6c:	2000104c 	.word	0x2000104c
 8047c70:	08047c75 	.word	0x08047c75

08047c74 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8047c74:	b480      	push	{r7}
 8047c76:	b083      	sub	sp, #12
 8047c78:	af00      	add	r7, sp, #0
 8047c7a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8047c7c:	bf00      	nop
 8047c7e:	370c      	adds	r7, #12
 8047c80:	46bd      	mov	sp, r7
 8047c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047c86:	4770      	bx	lr

08047c88 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8047c88:	b480      	push	{r7}
 8047c8a:	b087      	sub	sp, #28
 8047c8c:	af00      	add	r7, sp, #0
 8047c8e:	6078      	str	r0, [r7, #4]
 8047c90:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8047c92:	683b      	ldr	r3, [r7, #0]
 8047c94:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8047c96:	687b      	ldr	r3, [r7, #4]
 8047c98:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8047c9a:	2320      	movs	r3, #32
 8047c9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8047c9e:	f3bf 8f4f 	dsb	sy
}
 8047ca2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8047ca4:	e00b      	b.n	8047cbe <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8047ca6:	4a0d      	ldr	r2, [pc, #52]	; (8047cdc <SCB_InvalidateDCache_by_Addr+0x54>)
 8047ca8:	693b      	ldr	r3, [r7, #16]
 8047caa:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8047cae:	68fb      	ldr	r3, [r7, #12]
 8047cb0:	693a      	ldr	r2, [r7, #16]
 8047cb2:	4413      	add	r3, r2
 8047cb4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8047cb6:	697a      	ldr	r2, [r7, #20]
 8047cb8:	68fb      	ldr	r3, [r7, #12]
 8047cba:	1ad3      	subs	r3, r2, r3
 8047cbc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8047cbe:	697b      	ldr	r3, [r7, #20]
 8047cc0:	2b00      	cmp	r3, #0
 8047cc2:	dcf0      	bgt.n	8047ca6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8047cc4:	f3bf 8f4f 	dsb	sy
}
 8047cc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8047cca:	f3bf 8f6f 	isb	sy
}
 8047cce:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8047cd0:	bf00      	nop
 8047cd2:	371c      	adds	r7, #28
 8047cd4:	46bd      	mov	sp, r7
 8047cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047cda:	4770      	bx	lr
 8047cdc:	e000ed00 	.word	0xe000ed00

08047ce0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8047ce0:	b580      	push	{r7, lr}
 8047ce2:	b082      	sub	sp, #8
 8047ce4:	af00      	add	r7, sp, #0
 8047ce6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8047ce8:	4b04      	ldr	r3, [pc, #16]	; (8047cfc <HAL_ETH_RxCpltCallback+0x1c>)
 8047cea:	681b      	ldr	r3, [r3, #0]
 8047cec:	4618      	mov	r0, r3
 8047cee:	f000 fe81 	bl	80489f4 <osSemaphoreRelease>
}
 8047cf2:	bf00      	nop
 8047cf4:	3708      	adds	r7, #8
 8047cf6:	46bd      	mov	sp, r7
 8047cf8:	bd80      	pop	{r7, pc}
 8047cfa:	bf00      	nop
 8047cfc:	20005a24 	.word	0x20005a24

08047d00 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8047d00:	b580      	push	{r7, lr}
 8047d02:	b082      	sub	sp, #8
 8047d04:	af00      	add	r7, sp, #0
 8047d06:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8047d08:	4b04      	ldr	r3, [pc, #16]	; (8047d1c <HAL_ETH_TxCpltCallback+0x1c>)
 8047d0a:	681b      	ldr	r3, [r3, #0]
 8047d0c:	4618      	mov	r0, r3
 8047d0e:	f000 fe71 	bl	80489f4 <osSemaphoreRelease>
}
 8047d12:	bf00      	nop
 8047d14:	3708      	adds	r7, #8
 8047d16:	46bd      	mov	sp, r7
 8047d18:	bd80      	pop	{r7, pc}
 8047d1a:	bf00      	nop
 8047d1c:	20005a28 	.word	0x20005a28

08047d20 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8047d20:	b580      	push	{r7, lr}
 8047d22:	b082      	sub	sp, #8
 8047d24:	af00      	add	r7, sp, #0
 8047d26:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8047d28:	6878      	ldr	r0, [r7, #4]
 8047d2a:	f7fb feef 	bl	8043b0c <HAL_ETH_GetDMAError>
 8047d2e:	4603      	mov	r3, r0
 8047d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047d34:	2b80      	cmp	r3, #128	; 0x80
 8047d36:	d104      	bne.n	8047d42 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8047d38:	4b04      	ldr	r3, [pc, #16]	; (8047d4c <HAL_ETH_ErrorCallback+0x2c>)
 8047d3a:	681b      	ldr	r3, [r3, #0]
 8047d3c:	4618      	mov	r0, r3
 8047d3e:	f000 fe59 	bl	80489f4 <osSemaphoreRelease>
  }
}
 8047d42:	bf00      	nop
 8047d44:	3708      	adds	r7, #8
 8047d46:	46bd      	mov	sp, r7
 8047d48:	bd80      	pop	{r7, pc}
 8047d4a:	bf00      	nop
 8047d4c:	20005a24 	.word	0x20005a24

08047d50 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8047d50:	b5b0      	push	{r4, r5, r7, lr}
 8047d52:	b0a8      	sub	sp, #160	; 0xa0
 8047d54:	af00      	add	r7, sp, #0
 8047d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8047d58:	2300      	movs	r3, #0
 8047d5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8047d5e:	2300      	movs	r3, #0
 8047d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8047d64:	2300      	movs	r3, #0
 8047d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8047d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8047d6e:	2264      	movs	r2, #100	; 0x64
 8047d70:	2100      	movs	r1, #0
 8047d72:	4618      	mov	r0, r3
 8047d74:	f011 f876 	bl	8058e64 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8047d78:	4b85      	ldr	r3, [pc, #532]	; (8047f90 <low_level_init+0x240>)
 8047d7a:	4a86      	ldr	r2, [pc, #536]	; (8047f94 <low_level_init+0x244>)
 8047d7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8047d7e:	2300      	movs	r3, #0
 8047d80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8047d84:	2380      	movs	r3, #128	; 0x80
 8047d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8047d8a:	23e1      	movs	r3, #225	; 0xe1
 8047d8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8047d90:	2300      	movs	r3, #0
 8047d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8047d96:	2300      	movs	r3, #0
 8047d98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8047d9c:	2300      	movs	r3, #0
 8047d9e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8047da2:	4a7b      	ldr	r2, [pc, #492]	; (8047f90 <low_level_init+0x240>)
 8047da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8047da8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8047daa:	4b79      	ldr	r3, [pc, #484]	; (8047f90 <low_level_init+0x240>)
 8047dac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8047db0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8047db2:	4b77      	ldr	r3, [pc, #476]	; (8047f90 <low_level_init+0x240>)
 8047db4:	4a78      	ldr	r2, [pc, #480]	; (8047f98 <low_level_init+0x248>)
 8047db6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8047db8:	4b75      	ldr	r3, [pc, #468]	; (8047f90 <low_level_init+0x240>)
 8047dba:	4a78      	ldr	r2, [pc, #480]	; (8047f9c <low_level_init+0x24c>)
 8047dbc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8047dbe:	4b74      	ldr	r3, [pc, #464]	; (8047f90 <low_level_init+0x240>)
 8047dc0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8047dc4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8047dc6:	4872      	ldr	r0, [pc, #456]	; (8047f90 <low_level_init+0x240>)
 8047dc8:	f7fb f862 	bl	8042e90 <HAL_ETH_Init>
 8047dcc:	4603      	mov	r3, r0
 8047dce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8047dd2:	2238      	movs	r2, #56	; 0x38
 8047dd4:	2100      	movs	r1, #0
 8047dd6:	4872      	ldr	r0, [pc, #456]	; (8047fa0 <low_level_init+0x250>)
 8047dd8:	f011 f844 	bl	8058e64 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8047ddc:	4b70      	ldr	r3, [pc, #448]	; (8047fa0 <low_level_init+0x250>)
 8047dde:	2221      	movs	r2, #33	; 0x21
 8047de0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8047de2:	4b6f      	ldr	r3, [pc, #444]	; (8047fa0 <low_level_init+0x250>)
 8047de4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8047de8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8047dea:	4b6d      	ldr	r3, [pc, #436]	; (8047fa0 <low_level_init+0x250>)
 8047dec:	2200      	movs	r2, #0
 8047dee:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8047df0:	486c      	ldr	r0, [pc, #432]	; (8047fa4 <low_level_init+0x254>)
 8047df2:	f006 facf 	bl	804e394 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8047df6:	687b      	ldr	r3, [r7, #4]
 8047df8:	2206      	movs	r2, #6
 8047dfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8047dfe:	4b64      	ldr	r3, [pc, #400]	; (8047f90 <low_level_init+0x240>)
 8047e00:	685b      	ldr	r3, [r3, #4]
 8047e02:	781a      	ldrb	r2, [r3, #0]
 8047e04:	687b      	ldr	r3, [r7, #4]
 8047e06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8047e0a:	4b61      	ldr	r3, [pc, #388]	; (8047f90 <low_level_init+0x240>)
 8047e0c:	685b      	ldr	r3, [r3, #4]
 8047e0e:	785a      	ldrb	r2, [r3, #1]
 8047e10:	687b      	ldr	r3, [r7, #4]
 8047e12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8047e16:	4b5e      	ldr	r3, [pc, #376]	; (8047f90 <low_level_init+0x240>)
 8047e18:	685b      	ldr	r3, [r3, #4]
 8047e1a:	789a      	ldrb	r2, [r3, #2]
 8047e1c:	687b      	ldr	r3, [r7, #4]
 8047e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8047e22:	4b5b      	ldr	r3, [pc, #364]	; (8047f90 <low_level_init+0x240>)
 8047e24:	685b      	ldr	r3, [r3, #4]
 8047e26:	78da      	ldrb	r2, [r3, #3]
 8047e28:	687b      	ldr	r3, [r7, #4]
 8047e2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8047e2e:	4b58      	ldr	r3, [pc, #352]	; (8047f90 <low_level_init+0x240>)
 8047e30:	685b      	ldr	r3, [r3, #4]
 8047e32:	791a      	ldrb	r2, [r3, #4]
 8047e34:	687b      	ldr	r3, [r7, #4]
 8047e36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8047e3a:	4b55      	ldr	r3, [pc, #340]	; (8047f90 <low_level_init+0x240>)
 8047e3c:	685b      	ldr	r3, [r3, #4]
 8047e3e:	795a      	ldrb	r2, [r3, #5]
 8047e40:	687b      	ldr	r3, [r7, #4]
 8047e42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8047e46:	687b      	ldr	r3, [r7, #4]
 8047e48:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8047e4c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8047e4e:	687b      	ldr	r3, [r7, #4]
 8047e50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8047e54:	f043 030a 	orr.w	r3, r3, #10
 8047e58:	b2da      	uxtb	r2, r3
 8047e5a:	687b      	ldr	r3, [r7, #4]
 8047e5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8047e60:	2203      	movs	r2, #3
 8047e62:	2100      	movs	r1, #0
 8047e64:	2001      	movs	r0, #1
 8047e66:	f001 f8b5 	bl	8048fd4 <xQueueGenericCreate>
 8047e6a:	4603      	mov	r3, r0
 8047e6c:	4a4e      	ldr	r2, [pc, #312]	; (8047fa8 <low_level_init+0x258>)
 8047e6e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8047e70:	2203      	movs	r2, #3
 8047e72:	2100      	movs	r1, #0
 8047e74:	2001      	movs	r0, #1
 8047e76:	f001 f8ad 	bl	8048fd4 <xQueueGenericCreate>
 8047e7a:	4603      	mov	r3, r0
 8047e7c:	4a4b      	ldr	r2, [pc, #300]	; (8047fac <low_level_init+0x25c>)
 8047e7e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8047e80:	4b4b      	ldr	r3, [pc, #300]	; (8047fb0 <low_level_init+0x260>)
 8047e82:	f107 0408 	add.w	r4, r7, #8
 8047e86:	461d      	mov	r5, r3
 8047e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8047e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8047e8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8047e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8047e94:	f107 0308 	add.w	r3, r7, #8
 8047e98:	6879      	ldr	r1, [r7, #4]
 8047e9a:	4618      	mov	r0, r3
 8047e9c:	f000 fc2e 	bl	80486fc <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8047ea0:	4944      	ldr	r1, [pc, #272]	; (8047fb4 <low_level_init+0x264>)
 8047ea2:	4845      	ldr	r0, [pc, #276]	; (8047fb8 <low_level_init+0x268>)
 8047ea4:	f7f9 ff61 	bl	8041d6a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8047ea8:	4843      	ldr	r0, [pc, #268]	; (8047fb8 <low_level_init+0x268>)
 8047eaa:	f7f9 ff90 	bl	8041dce <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8047eae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8047eb2:	2b00      	cmp	r3, #0
 8047eb4:	d165      	bne.n	8047f82 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8047eb6:	4840      	ldr	r0, [pc, #256]	; (8047fb8 <low_level_init+0x268>)
 8047eb8:	f7fa f832 	bl	8041f20 <LAN8742_GetLinkState>
 8047ebc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8047ec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8047ec4:	2b01      	cmp	r3, #1
 8047ec6:	dc06      	bgt.n	8047ed6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8047ec8:	6878      	ldr	r0, [r7, #4]
 8047eca:	f006 fe3d 	bl	804eb48 <netif_set_link_down>
      netif_set_down(netif);
 8047ece:	6878      	ldr	r0, [r7, #4]
 8047ed0:	f006 fdd4 	bl	804ea7c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8047ed4:	e057      	b.n	8047f86 <low_level_init+0x236>
      switch (PHYLinkState)
 8047ed6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8047eda:	3b02      	subs	r3, #2
 8047edc:	2b03      	cmp	r3, #3
 8047ede:	d82b      	bhi.n	8047f38 <low_level_init+0x1e8>
 8047ee0:	a201      	add	r2, pc, #4	; (adr r2, 8047ee8 <low_level_init+0x198>)
 8047ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8047ee6:	bf00      	nop
 8047ee8:	08047ef9 	.word	0x08047ef9
 8047eec:	08047f0b 	.word	0x08047f0b
 8047ef0:	08047f1b 	.word	0x08047f1b
 8047ef4:	08047f2b 	.word	0x08047f2b
        duplex = ETH_FULLDUPLEX_MODE;
 8047ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8047efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8047f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8047f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8047f08:	e01f      	b.n	8047f4a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8047f0a:	2300      	movs	r3, #0
 8047f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8047f10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8047f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8047f18:	e017      	b.n	8047f4a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8047f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8047f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8047f22:	2300      	movs	r3, #0
 8047f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8047f28:	e00f      	b.n	8047f4a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8047f2a:	2300      	movs	r3, #0
 8047f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8047f30:	2300      	movs	r3, #0
 8047f32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8047f36:	e008      	b.n	8047f4a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8047f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8047f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8047f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8047f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8047f48:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8047f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8047f4e:	4619      	mov	r1, r3
 8047f50:	480f      	ldr	r0, [pc, #60]	; (8047f90 <low_level_init+0x240>)
 8047f52:	f7fb fc81 	bl	8043858 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8047f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8047f5a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8047f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8047f60:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8047f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8047f66:	4619      	mov	r1, r3
 8047f68:	4809      	ldr	r0, [pc, #36]	; (8047f90 <low_level_init+0x240>)
 8047f6a:	f7fb fd5f 	bl	8043a2c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8047f6e:	4808      	ldr	r0, [pc, #32]	; (8047f90 <low_level_init+0x240>)
 8047f70:	f7fb f80a 	bl	8042f88 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8047f74:	6878      	ldr	r0, [r7, #4]
 8047f76:	f006 fd15 	bl	804e9a4 <netif_set_up>
    netif_set_link_up(netif);
 8047f7a:	6878      	ldr	r0, [r7, #4]
 8047f7c:	f006 fdb0 	bl	804eae0 <netif_set_link_up>
}
 8047f80:	e001      	b.n	8047f86 <low_level_init+0x236>
    Error_Handler();
 8047f82:	f7f9 f923 	bl	80411cc <Error_Handler>
}
 8047f86:	bf00      	nop
 8047f88:	37a0      	adds	r7, #160	; 0xa0
 8047f8a:	46bd      	mov	sp, r7
 8047f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8047f8e:	bf00      	nop
 8047f90:	20005a2c 	.word	0x20005a2c
 8047f94:	40028000 	.word	0x40028000
 8047f98:	20000138 	.word	0x20000138
 8047f9c:	20000098 	.word	0x20000098
 8047fa0:	20005adc 	.word	0x20005adc
 8047fa4:	0805d808 	.word	0x0805d808
 8047fa8:	20005a24 	.word	0x20005a24
 8047fac:	20005a28 	.word	0x20005a28
 8047fb0:	0805a2a8 	.word	0x0805a2a8
 8047fb4:	20000010 	.word	0x20000010
 8047fb8:	20005b14 	.word	0x20005b14

08047fbc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8047fbc:	b580      	push	{r7, lr}
 8047fbe:	b092      	sub	sp, #72	; 0x48
 8047fc0:	af00      	add	r7, sp, #0
 8047fc2:	6078      	str	r0, [r7, #4]
 8047fc4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8047fc6:	2300      	movs	r3, #0
 8047fc8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8047fca:	2300      	movs	r3, #0
 8047fcc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8047fce:	2300      	movs	r3, #0
 8047fd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8047fd4:	f107 030c 	add.w	r3, r7, #12
 8047fd8:	2230      	movs	r2, #48	; 0x30
 8047fda:	2100      	movs	r1, #0
 8047fdc:	4618      	mov	r0, r3
 8047fde:	f010 ff41 	bl	8058e64 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8047fe2:	f107 030c 	add.w	r3, r7, #12
 8047fe6:	2230      	movs	r2, #48	; 0x30
 8047fe8:	2100      	movs	r1, #0
 8047fea:	4618      	mov	r0, r3
 8047fec:	f010 ff3a 	bl	8058e64 <memset>

  for(q = p; q != NULL; q = q->next)
 8047ff0:	683b      	ldr	r3, [r7, #0]
 8047ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8047ff4:	e045      	b.n	8048082 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8047ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047ff8:	2b03      	cmp	r3, #3
 8047ffa:	d902      	bls.n	8048002 <low_level_output+0x46>
      return ERR_IF;
 8047ffc:	f06f 030b 	mvn.w	r3, #11
 8048000:	e065      	b.n	80480ce <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8048002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8048004:	6859      	ldr	r1, [r3, #4]
 8048006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8048008:	4613      	mov	r3, r2
 804800a:	005b      	lsls	r3, r3, #1
 804800c:	4413      	add	r3, r2
 804800e:	009b      	lsls	r3, r3, #2
 8048010:	3348      	adds	r3, #72	; 0x48
 8048012:	443b      	add	r3, r7
 8048014:	3b3c      	subs	r3, #60	; 0x3c
 8048016:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8048018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804801a:	895b      	ldrh	r3, [r3, #10]
 804801c:	4619      	mov	r1, r3
 804801e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8048020:	4613      	mov	r3, r2
 8048022:	005b      	lsls	r3, r3, #1
 8048024:	4413      	add	r3, r2
 8048026:	009b      	lsls	r3, r3, #2
 8048028:	3348      	adds	r3, #72	; 0x48
 804802a:	443b      	add	r3, r7
 804802c:	3b38      	subs	r3, #56	; 0x38
 804802e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8048030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8048032:	2b00      	cmp	r3, #0
 8048034:	d011      	beq.n	804805a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8048036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8048038:	1e5a      	subs	r2, r3, #1
 804803a:	f107 000c 	add.w	r0, r7, #12
 804803e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8048040:	460b      	mov	r3, r1
 8048042:	005b      	lsls	r3, r3, #1
 8048044:	440b      	add	r3, r1
 8048046:	009b      	lsls	r3, r3, #2
 8048048:	18c1      	adds	r1, r0, r3
 804804a:	4613      	mov	r3, r2
 804804c:	005b      	lsls	r3, r3, #1
 804804e:	4413      	add	r3, r2
 8048050:	009b      	lsls	r3, r3, #2
 8048052:	3348      	adds	r3, #72	; 0x48
 8048054:	443b      	add	r3, r7
 8048056:	3b34      	subs	r3, #52	; 0x34
 8048058:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 804805a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804805c:	681b      	ldr	r3, [r3, #0]
 804805e:	2b00      	cmp	r3, #0
 8048060:	d109      	bne.n	8048076 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8048062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8048064:	4613      	mov	r3, r2
 8048066:	005b      	lsls	r3, r3, #1
 8048068:	4413      	add	r3, r2
 804806a:	009b      	lsls	r3, r3, #2
 804806c:	3348      	adds	r3, #72	; 0x48
 804806e:	443b      	add	r3, r7
 8048070:	3b34      	subs	r3, #52	; 0x34
 8048072:	2200      	movs	r2, #0
 8048074:	601a      	str	r2, [r3, #0]
    }

    i++;
 8048076:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8048078:	3301      	adds	r3, #1
 804807a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 804807c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804807e:	681b      	ldr	r3, [r3, #0]
 8048080:	643b      	str	r3, [r7, #64]	; 0x40
 8048082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8048084:	2b00      	cmp	r3, #0
 8048086:	d1b6      	bne.n	8047ff6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8048088:	683b      	ldr	r3, [r7, #0]
 804808a:	891b      	ldrh	r3, [r3, #8]
 804808c:	461a      	mov	r2, r3
 804808e:	4b12      	ldr	r3, [pc, #72]	; (80480d8 <low_level_output+0x11c>)
 8048090:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8048092:	4a11      	ldr	r2, [pc, #68]	; (80480d8 <low_level_output+0x11c>)
 8048094:	f107 030c 	add.w	r3, r7, #12
 8048098:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 804809a:	4a0f      	ldr	r2, [pc, #60]	; (80480d8 <low_level_output+0x11c>)
 804809c:	683b      	ldr	r3, [r7, #0]
 804809e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80480a0:	6838      	ldr	r0, [r7, #0]
 80480a2:	f007 f9d5 	bl	804f450 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80480a6:	490c      	ldr	r1, [pc, #48]	; (80480d8 <low_level_output+0x11c>)
 80480a8:	480c      	ldr	r0, [pc, #48]	; (80480dc <low_level_output+0x120>)
 80480aa:	f7fb f87b 	bl	80431a4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80480ae:	bf00      	nop
 80480b0:	4b0b      	ldr	r3, [pc, #44]	; (80480e0 <low_level_output+0x124>)
 80480b2:	681b      	ldr	r3, [r3, #0]
 80480b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80480b8:	4618      	mov	r0, r3
 80480ba:	f000 fc4d 	bl	8048958 <osSemaphoreWait>
 80480be:	4603      	mov	r3, r0
 80480c0:	2b00      	cmp	r3, #0
 80480c2:	d1f5      	bne.n	80480b0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80480c4:	4805      	ldr	r0, [pc, #20]	; (80480dc <low_level_output+0x120>)
 80480c6:	f7fb fa01 	bl	80434cc <HAL_ETH_ReleaseTxPacket>

  return errval;
 80480ca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80480ce:	4618      	mov	r0, r3
 80480d0:	3748      	adds	r7, #72	; 0x48
 80480d2:	46bd      	mov	sp, r7
 80480d4:	bd80      	pop	{r7, pc}
 80480d6:	bf00      	nop
 80480d8:	20005adc 	.word	0x20005adc
 80480dc:	20005a2c 	.word	0x20005a2c
 80480e0:	20005a28 	.word	0x20005a28

080480e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80480e4:	b580      	push	{r7, lr}
 80480e6:	b084      	sub	sp, #16
 80480e8:	af00      	add	r7, sp, #0
 80480ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80480ec:	2300      	movs	r3, #0
 80480ee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80480f0:	4b07      	ldr	r3, [pc, #28]	; (8048110 <low_level_input+0x2c>)
 80480f2:	781b      	ldrb	r3, [r3, #0]
 80480f4:	2b00      	cmp	r3, #0
 80480f6:	d105      	bne.n	8048104 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80480f8:	f107 030c 	add.w	r3, r7, #12
 80480fc:	4619      	mov	r1, r3
 80480fe:	4805      	ldr	r0, [pc, #20]	; (8048114 <low_level_input+0x30>)
 8048100:	f7fb f8ac 	bl	804325c <HAL_ETH_ReadData>
  }

  return p;
 8048104:	68fb      	ldr	r3, [r7, #12]
}
 8048106:	4618      	mov	r0, r3
 8048108:	3710      	adds	r7, #16
 804810a:	46bd      	mov	sp, r7
 804810c:	bd80      	pop	{r7, pc}
 804810e:	bf00      	nop
 8048110:	20005a20 	.word	0x20005a20
 8048114:	20005a2c 	.word	0x20005a2c

08048118 <ethernetif_input>:
 */

extern struct netif gnetif;

static void ethernetif_input(void const * argument)
{
 8048118:	b580      	push	{r7, lr}
 804811a:	b0a2      	sub	sp, #136	; 0x88
 804811c:	af00      	add	r7, sp, #0
 804811e:	6078      	str	r0, [r7, #4]

	ETH_MACConfigTypeDef MACConf = {0};
 8048120:	f107 030c 	add.w	r3, r7, #12
 8048124:	2264      	movs	r2, #100	; 0x64
 8048126:	2100      	movs	r1, #0
 8048128:	4618      	mov	r0, r3
 804812a:	f010 fe9b 	bl	8058e64 <memset>
	int32_t PHYLinkState = 0;
 804812e:	2300      	movs	r3, #0
 8048130:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8048132:	2300      	movs	r3, #0
 8048134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8048138:	2300      	movs	r3, #0
 804813a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 804813e:	2300      	movs	r3, #0
 8048140:	67fb      	str	r3, [r7, #124]	; 0x7c

	struct pbuf *p = NULL;
 8048142:	2300      	movs	r3, #0
 8048144:	677b      	str	r3, [r7, #116]	; 0x74
	struct netif *netif = (struct netif *) argument;
 8048146:	687b      	ldr	r3, [r7, #4]
 8048148:	673b      	str	r3, [r7, #112]	; 0x70

  for( ;; )
  {
	  //TIME_WAITING_FOR_INPUT
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 804814a:	4b57      	ldr	r3, [pc, #348]	; (80482a8 <ethernetif_input+0x190>)
 804814c:	681b      	ldr	r3, [r3, #0]
 804814e:	f241 3188 	movw	r1, #5000	; 0x1388
 8048152:	4618      	mov	r0, r3
 8048154:	f000 fc00 	bl	8048958 <osSemaphoreWait>
 8048158:	4603      	mov	r3, r0
 804815a:	2b00      	cmp	r3, #0
 804815c:	d115      	bne.n	804818a <ethernetif_input+0x72>
    {
      do
      {
        p = low_level_input( netif );
 804815e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8048160:	f7ff ffc0 	bl	80480e4 <low_level_input>
 8048164:	6778      	str	r0, [r7, #116]	; 0x74
        if (p != NULL)
 8048166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8048168:	2b00      	cmp	r3, #0
 804816a:	d00a      	beq.n	8048182 <ethernetif_input+0x6a>
        {
          if (netif->input( p, netif) != ERR_OK )
 804816c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 804816e:	691b      	ldr	r3, [r3, #16]
 8048170:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8048172:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8048174:	4798      	blx	r3
 8048176:	4603      	mov	r3, r0
 8048178:	2b00      	cmp	r3, #0
 804817a:	d002      	beq.n	8048182 <ethernetif_input+0x6a>
          {
            pbuf_free(p);
 804817c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 804817e:	f007 f8c1 	bl	804f304 <pbuf_free>
          }
        }

      } while(p!=NULL);
 8048182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8048184:	2b00      	cmp	r3, #0
 8048186:	d1ea      	bne.n	804815e <ethernetif_input+0x46>
 8048188:	e089      	b.n	804829e <ethernetif_input+0x186>
    }
    else
    {

	  if (netif_is_link_up(&gnetif))
 804818a:	4b48      	ldr	r3, [pc, #288]	; (80482ac <ethernetif_input+0x194>)
 804818c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8048190:	089b      	lsrs	r3, r3, #2
 8048192:	f003 0301 	and.w	r3, r3, #1
 8048196:	b2db      	uxtb	r3, r3
 8048198:	2b00      	cmp	r3, #0
 804819a:	d003      	beq.n	80481a4 <ethernetif_input+0x8c>
	  {
	    /* When the netif is fully configured this function must be called */
	    netif_set_up(&gnetif);
 804819c:	4843      	ldr	r0, [pc, #268]	; (80482ac <ethernetif_input+0x194>)
 804819e:	f006 fc01 	bl	804e9a4 <netif_set_up>
 80481a2:	e002      	b.n	80481aa <ethernetif_input+0x92>
	  }
	  else
	  {
	    /* When the netif link is down this function must be called */
	    netif_set_down(&gnetif);
 80481a4:	4841      	ldr	r0, [pc, #260]	; (80482ac <ethernetif_input+0x194>)
 80481a6:	f006 fc69 	bl	804ea7c <netif_set_down>
	  }

  	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80481aa:	4841      	ldr	r0, [pc, #260]	; (80482b0 <ethernetif_input+0x198>)
 80481ac:	f7f9 feb8 	bl	8041f20 <LAN8742_GetLinkState>
 80481b0:	67b8      	str	r0, [r7, #120]	; 0x78

  	  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80481b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80481b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80481b8:	089b      	lsrs	r3, r3, #2
 80481ba:	f003 0301 	and.w	r3, r3, #1
 80481be:	b2db      	uxtb	r3, r3
 80481c0:	2b00      	cmp	r3, #0
 80481c2:	d00c      	beq.n	80481de <ethernetif_input+0xc6>
 80481c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80481c6:	2b01      	cmp	r3, #1
 80481c8:	dc09      	bgt.n	80481de <ethernetif_input+0xc6>
  	  {
  		HAL_ETH_Stop_IT(&heth);
 80481ca:	483a      	ldr	r0, [pc, #232]	; (80482b4 <ethernetif_input+0x19c>)
 80481cc:	f7fa ff6a 	bl	80430a4 <HAL_ETH_Stop_IT>
  		netif_set_down(netif);
 80481d0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80481d2:	f006 fc53 	bl	804ea7c <netif_set_down>
  		netif_set_link_down(netif);
 80481d6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80481d8:	f006 fcb6 	bl	804eb48 <netif_set_link_down>
 80481dc:	e05f      	b.n	804829e <ethernetif_input+0x186>
  	  }
  	  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80481de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80481e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80481e4:	f003 0304 	and.w	r3, r3, #4
 80481e8:	2b00      	cmp	r3, #0
 80481ea:	d158      	bne.n	804829e <ethernetif_input+0x186>
 80481ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80481ee:	2b01      	cmp	r3, #1
 80481f0:	dd55      	ble.n	804829e <ethernetif_input+0x186>
  	  {
  		switch (PHYLinkState)
 80481f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80481f4:	3b02      	subs	r3, #2
 80481f6:	2b03      	cmp	r3, #3
 80481f8:	d832      	bhi.n	8048260 <ethernetif_input+0x148>
 80481fa:	a201      	add	r2, pc, #4	; (adr r2, 8048200 <ethernetif_input+0xe8>)
 80481fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8048200:	08048211 	.word	0x08048211
 8048204:	08048227 	.word	0x08048227
 8048208:	0804823b 	.word	0x0804823b
 804820c:	0804824f 	.word	0x0804824f
  		{
  		case LAN8742_STATUS_100MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 8048210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8048214:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 8048216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804821a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 804821e:	2301      	movs	r3, #1
 8048220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 8048224:	e01d      	b.n	8048262 <ethernetif_input+0x14a>
  		case LAN8742_STATUS_100MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 8048226:	2300      	movs	r3, #0
 8048228:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 804822a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804822e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8048232:	2301      	movs	r3, #1
 8048234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 8048238:	e013      	b.n	8048262 <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 804823a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 804823e:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 8048240:	2300      	movs	r3, #0
 8048242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8048246:	2301      	movs	r3, #1
 8048248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 804824c:	e009      	b.n	8048262 <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 804824e:	2300      	movs	r3, #0
 8048250:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 8048252:	2300      	movs	r3, #0
 8048254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8048258:	2301      	movs	r3, #1
 804825a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 804825e:	e000      	b.n	8048262 <ethernetif_input+0x14a>
  		default:
  		  break;
 8048260:	bf00      	nop
  		}

  		if(linkchanged)
 8048262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8048266:	2b00      	cmp	r3, #0
 8048268:	d019      	beq.n	804829e <ethernetif_input+0x186>
  		{
  		  /* Get MAC Config MAC */
  		  HAL_ETH_GetMACConfig(&heth, &MACConf);
 804826a:	f107 030c 	add.w	r3, r7, #12
 804826e:	4619      	mov	r1, r3
 8048270:	4810      	ldr	r0, [pc, #64]	; (80482b4 <ethernetif_input+0x19c>)
 8048272:	f7fb faf1 	bl	8043858 <HAL_ETH_GetMACConfig>
  		  MACConf.DuplexMode = duplex;
 8048276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8048278:	627b      	str	r3, [r7, #36]	; 0x24
  		  MACConf.Speed = speed;
 804827a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804827e:	623b      	str	r3, [r7, #32]
  		  HAL_ETH_SetMACConfig(&heth, &MACConf);
 8048280:	f107 030c 	add.w	r3, r7, #12
 8048284:	4619      	mov	r1, r3
 8048286:	480b      	ldr	r0, [pc, #44]	; (80482b4 <ethernetif_input+0x19c>)
 8048288:	f7fb fbd0 	bl	8043a2c <HAL_ETH_SetMACConfig>
  		  HAL_ETH_Start_IT(&heth);
 804828c:	4809      	ldr	r0, [pc, #36]	; (80482b4 <ethernetif_input+0x19c>)
 804828e:	f7fa fe7b 	bl	8042f88 <HAL_ETH_Start_IT>
  		  netif_set_up(netif);
 8048292:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8048294:	f006 fb86 	bl	804e9a4 <netif_set_up>
  		  netif_set_link_up(netif);
 8048298:	6f38      	ldr	r0, [r7, #112]	; 0x70
 804829a:	f006 fc21 	bl	804eae0 <netif_set_link_up>
  		}
  	  }
    }
	osDelay(1);
 804829e:	2001      	movs	r0, #1
 80482a0:	f000 fa78 	bl	8048794 <osDelay>
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 80482a4:	e751      	b.n	804814a <ethernetif_input+0x32>
 80482a6:	bf00      	nop
 80482a8:	20005a24 	.word	0x20005a24
 80482ac:	2000104c 	.word	0x2000104c
 80482b0:	20005b14 	.word	0x20005b14
 80482b4:	20005a2c 	.word	0x20005a2c

080482b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80482b8:	b580      	push	{r7, lr}
 80482ba:	b082      	sub	sp, #8
 80482bc:	af00      	add	r7, sp, #0
 80482be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80482c0:	687b      	ldr	r3, [r7, #4]
 80482c2:	2b00      	cmp	r3, #0
 80482c4:	d106      	bne.n	80482d4 <ethernetif_init+0x1c>
 80482c6:	4b0e      	ldr	r3, [pc, #56]	; (8048300 <ethernetif_init+0x48>)
 80482c8:	f240 2239 	movw	r2, #569	; 0x239
 80482cc:	490d      	ldr	r1, [pc, #52]	; (8048304 <ethernetif_init+0x4c>)
 80482ce:	480e      	ldr	r0, [pc, #56]	; (8048308 <ethernetif_init+0x50>)
 80482d0:	f010 feb0 	bl	8059034 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80482d4:	687b      	ldr	r3, [r7, #4]
 80482d6:	2273      	movs	r2, #115	; 0x73
 80482d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80482dc:	687b      	ldr	r3, [r7, #4]
 80482de:	2274      	movs	r2, #116	; 0x74
 80482e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80482e4:	687b      	ldr	r3, [r7, #4]
 80482e6:	4a09      	ldr	r2, [pc, #36]	; (804830c <ethernetif_init+0x54>)
 80482e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80482ea:	687b      	ldr	r3, [r7, #4]
 80482ec:	4a08      	ldr	r2, [pc, #32]	; (8048310 <ethernetif_init+0x58>)
 80482ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80482f0:	6878      	ldr	r0, [r7, #4]
 80482f2:	f7ff fd2d 	bl	8047d50 <low_level_init>

  return ERR_OK;
 80482f6:	2300      	movs	r3, #0
}
 80482f8:	4618      	mov	r0, r3
 80482fa:	3708      	adds	r7, #8
 80482fc:	46bd      	mov	sp, r7
 80482fe:	bd80      	pop	{r7, pc}
 8048300:	0805a2c4 	.word	0x0805a2c4
 8048304:	0805a2e0 	.word	0x0805a2e0
 8048308:	0805a2f0 	.word	0x0805a2f0
 804830c:	08056ad1 	.word	0x08056ad1
 8048310:	08047fbd 	.word	0x08047fbd

08048314 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8048314:	b580      	push	{r7, lr}
 8048316:	b084      	sub	sp, #16
 8048318:	af00      	add	r7, sp, #0
 804831a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 804831c:	687b      	ldr	r3, [r7, #4]
 804831e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8048320:	68f9      	ldr	r1, [r7, #12]
 8048322:	4809      	ldr	r0, [pc, #36]	; (8048348 <pbuf_free_custom+0x34>)
 8048324:	f006 f926 	bl	804e574 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8048328:	4b08      	ldr	r3, [pc, #32]	; (804834c <pbuf_free_custom+0x38>)
 804832a:	781b      	ldrb	r3, [r3, #0]
 804832c:	2b01      	cmp	r3, #1
 804832e:	d107      	bne.n	8048340 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8048330:	4b06      	ldr	r3, [pc, #24]	; (804834c <pbuf_free_custom+0x38>)
 8048332:	2200      	movs	r2, #0
 8048334:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8048336:	4b06      	ldr	r3, [pc, #24]	; (8048350 <pbuf_free_custom+0x3c>)
 8048338:	681b      	ldr	r3, [r3, #0]
 804833a:	4618      	mov	r0, r3
 804833c:	f000 fb5a 	bl	80489f4 <osSemaphoreRelease>
  }
}
 8048340:	bf00      	nop
 8048342:	3710      	adds	r7, #16
 8048344:	46bd      	mov	sp, r7
 8048346:	bd80      	pop	{r7, pc}
 8048348:	0805d808 	.word	0x0805d808
 804834c:	20005a20 	.word	0x20005a20
 8048350:	20005a24 	.word	0x20005a24

08048354 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8048354:	b580      	push	{r7, lr}
 8048356:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8048358:	f7f9 fe8a 	bl	8042070 <HAL_GetTick>
 804835c:	4603      	mov	r3, r0
}
 804835e:	4618      	mov	r0, r3
 8048360:	bd80      	pop	{r7, pc}
	...

08048364 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8048364:	b580      	push	{r7, lr}
 8048366:	b08e      	sub	sp, #56	; 0x38
 8048368:	af00      	add	r7, sp, #0
 804836a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804836c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8048370:	2200      	movs	r2, #0
 8048372:	601a      	str	r2, [r3, #0]
 8048374:	605a      	str	r2, [r3, #4]
 8048376:	609a      	str	r2, [r3, #8]
 8048378:	60da      	str	r2, [r3, #12]
 804837a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 804837c:	687b      	ldr	r3, [r7, #4]
 804837e:	681b      	ldr	r3, [r3, #0]
 8048380:	4a52      	ldr	r2, [pc, #328]	; (80484cc <HAL_ETH_MspInit+0x168>)
 8048382:	4293      	cmp	r3, r2
 8048384:	f040 809e 	bne.w	80484c4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8048388:	4b51      	ldr	r3, [pc, #324]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 804838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804838c:	4a50      	ldr	r2, [pc, #320]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 804838e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8048392:	6313      	str	r3, [r2, #48]	; 0x30
 8048394:	4b4e      	ldr	r3, [pc, #312]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 8048396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804839c:	623b      	str	r3, [r7, #32]
 804839e:	6a3b      	ldr	r3, [r7, #32]
 80483a0:	4b4b      	ldr	r3, [pc, #300]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483a4:	4a4a      	ldr	r2, [pc, #296]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80483aa:	6313      	str	r3, [r2, #48]	; 0x30
 80483ac:	4b48      	ldr	r3, [pc, #288]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80483b4:	61fb      	str	r3, [r7, #28]
 80483b6:	69fb      	ldr	r3, [r7, #28]
 80483b8:	4b45      	ldr	r3, [pc, #276]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483bc:	4a44      	ldr	r2, [pc, #272]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80483c2:	6313      	str	r3, [r2, #48]	; 0x30
 80483c4:	4b42      	ldr	r3, [pc, #264]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80483cc:	61bb      	str	r3, [r7, #24]
 80483ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80483d0:	4b3f      	ldr	r3, [pc, #252]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483d4:	4a3e      	ldr	r2, [pc, #248]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483d6:	f043 0304 	orr.w	r3, r3, #4
 80483da:	6313      	str	r3, [r2, #48]	; 0x30
 80483dc:	4b3c      	ldr	r3, [pc, #240]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483e0:	f003 0304 	and.w	r3, r3, #4
 80483e4:	617b      	str	r3, [r7, #20]
 80483e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80483e8:	4b39      	ldr	r3, [pc, #228]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483ec:	4a38      	ldr	r2, [pc, #224]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483ee:	f043 0301 	orr.w	r3, r3, #1
 80483f2:	6313      	str	r3, [r2, #48]	; 0x30
 80483f4:	4b36      	ldr	r3, [pc, #216]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 80483f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80483f8:	f003 0301 	and.w	r3, r3, #1
 80483fc:	613b      	str	r3, [r7, #16]
 80483fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8048400:	4b33      	ldr	r3, [pc, #204]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 8048402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048404:	4a32      	ldr	r2, [pc, #200]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 8048406:	f043 0302 	orr.w	r3, r3, #2
 804840a:	6313      	str	r3, [r2, #48]	; 0x30
 804840c:	4b30      	ldr	r3, [pc, #192]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 804840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048410:	f003 0302 	and.w	r3, r3, #2
 8048414:	60fb      	str	r3, [r7, #12]
 8048416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8048418:	4b2d      	ldr	r3, [pc, #180]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 804841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804841c:	4a2c      	ldr	r2, [pc, #176]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 804841e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8048422:	6313      	str	r3, [r2, #48]	; 0x30
 8048424:	4b2a      	ldr	r3, [pc, #168]	; (80484d0 <HAL_ETH_MspInit+0x16c>)
 8048426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804842c:	60bb      	str	r3, [r7, #8]
 804842e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8048430:	2332      	movs	r3, #50	; 0x32
 8048432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8048434:	2302      	movs	r3, #2
 8048436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8048438:	2300      	movs	r3, #0
 804843a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804843c:	2303      	movs	r3, #3
 804843e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8048440:	230b      	movs	r3, #11
 8048442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8048444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8048448:	4619      	mov	r1, r3
 804844a:	4822      	ldr	r0, [pc, #136]	; (80484d4 <HAL_ETH_MspInit+0x170>)
 804844c:	f7fb ff6e 	bl	804432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8048450:	2386      	movs	r3, #134	; 0x86
 8048452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8048454:	2302      	movs	r3, #2
 8048456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8048458:	2300      	movs	r3, #0
 804845a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804845c:	2303      	movs	r3, #3
 804845e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8048460:	230b      	movs	r3, #11
 8048462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8048464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8048468:	4619      	mov	r1, r3
 804846a:	481b      	ldr	r0, [pc, #108]	; (80484d8 <HAL_ETH_MspInit+0x174>)
 804846c:	f7fb ff5e 	bl	804432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8048470:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8048474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8048476:	2302      	movs	r3, #2
 8048478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804847a:	2300      	movs	r3, #0
 804847c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804847e:	2303      	movs	r3, #3
 8048480:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8048482:	230b      	movs	r3, #11
 8048484:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8048486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804848a:	4619      	mov	r1, r3
 804848c:	4813      	ldr	r0, [pc, #76]	; (80484dc <HAL_ETH_MspInit+0x178>)
 804848e:	f7fb ff4d 	bl	804432c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8048492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8048496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8048498:	2302      	movs	r3, #2
 804849a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804849c:	2300      	movs	r3, #0
 804849e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80484a0:	2303      	movs	r3, #3
 80484a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80484a4:	230b      	movs	r3, #11
 80484a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80484a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80484ac:	4619      	mov	r1, r3
 80484ae:	480c      	ldr	r0, [pc, #48]	; (80484e0 <HAL_ETH_MspInit+0x17c>)
 80484b0:	f7fb ff3c 	bl	804432c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80484b4:	2200      	movs	r2, #0
 80484b6:	2105      	movs	r1, #5
 80484b8:	203d      	movs	r0, #61	; 0x3d
 80484ba:	f7fa fc1a 	bl	8042cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80484be:	203d      	movs	r0, #61	; 0x3d
 80484c0:	f7fa fc33 	bl	8042d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80484c4:	bf00      	nop
 80484c6:	3738      	adds	r7, #56	; 0x38
 80484c8:	46bd      	mov	sp, r7
 80484ca:	bd80      	pop	{r7, pc}
 80484cc:	40028000 	.word	0x40028000
 80484d0:	40023800 	.word	0x40023800
 80484d4:	40020800 	.word	0x40020800
 80484d8:	40020000 	.word	0x40020000
 80484dc:	40020400 	.word	0x40020400
 80484e0:	40021800 	.word	0x40021800

080484e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80484e4:	b580      	push	{r7, lr}
 80484e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80484e8:	4802      	ldr	r0, [pc, #8]	; (80484f4 <ETH_PHY_IO_Init+0x10>)
 80484ea:	f7fb fab9 	bl	8043a60 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80484ee:	2300      	movs	r3, #0
}
 80484f0:	4618      	mov	r0, r3
 80484f2:	bd80      	pop	{r7, pc}
 80484f4:	20005a2c 	.word	0x20005a2c

080484f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80484f8:	b480      	push	{r7}
 80484fa:	af00      	add	r7, sp, #0
  return 0;
 80484fc:	2300      	movs	r3, #0
}
 80484fe:	4618      	mov	r0, r3
 8048500:	46bd      	mov	sp, r7
 8048502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048506:	4770      	bx	lr

08048508 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8048508:	b580      	push	{r7, lr}
 804850a:	b084      	sub	sp, #16
 804850c:	af00      	add	r7, sp, #0
 804850e:	60f8      	str	r0, [r7, #12]
 8048510:	60b9      	str	r1, [r7, #8]
 8048512:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8048514:	687b      	ldr	r3, [r7, #4]
 8048516:	68ba      	ldr	r2, [r7, #8]
 8048518:	68f9      	ldr	r1, [r7, #12]
 804851a:	4807      	ldr	r0, [pc, #28]	; (8048538 <ETH_PHY_IO_ReadReg+0x30>)
 804851c:	f7fb f908 	bl	8043730 <HAL_ETH_ReadPHYRegister>
 8048520:	4603      	mov	r3, r0
 8048522:	2b00      	cmp	r3, #0
 8048524:	d002      	beq.n	804852c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8048526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804852a:	e000      	b.n	804852e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 804852c:	2300      	movs	r3, #0
}
 804852e:	4618      	mov	r0, r3
 8048530:	3710      	adds	r7, #16
 8048532:	46bd      	mov	sp, r7
 8048534:	bd80      	pop	{r7, pc}
 8048536:	bf00      	nop
 8048538:	20005a2c 	.word	0x20005a2c

0804853c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 804853c:	b580      	push	{r7, lr}
 804853e:	b084      	sub	sp, #16
 8048540:	af00      	add	r7, sp, #0
 8048542:	60f8      	str	r0, [r7, #12]
 8048544:	60b9      	str	r1, [r7, #8]
 8048546:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8048548:	687b      	ldr	r3, [r7, #4]
 804854a:	68ba      	ldr	r2, [r7, #8]
 804854c:	68f9      	ldr	r1, [r7, #12]
 804854e:	4807      	ldr	r0, [pc, #28]	; (804856c <ETH_PHY_IO_WriteReg+0x30>)
 8048550:	f7fb f939 	bl	80437c6 <HAL_ETH_WritePHYRegister>
 8048554:	4603      	mov	r3, r0
 8048556:	2b00      	cmp	r3, #0
 8048558:	d002      	beq.n	8048560 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 804855a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804855e:	e000      	b.n	8048562 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8048560:	2300      	movs	r3, #0
}
 8048562:	4618      	mov	r0, r3
 8048564:	3710      	adds	r7, #16
 8048566:	46bd      	mov	sp, r7
 8048568:	bd80      	pop	{r7, pc}
 804856a:	bf00      	nop
 804856c:	20005a2c 	.word	0x20005a2c

08048570 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8048570:	b580      	push	{r7, lr}
 8048572:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8048574:	f7f9 fd7c 	bl	8042070 <HAL_GetTick>
 8048578:	4603      	mov	r3, r0
}
 804857a:	4618      	mov	r0, r3
 804857c:	bd80      	pop	{r7, pc}
	...

08048580 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8048580:	b580      	push	{r7, lr}
 8048582:	b086      	sub	sp, #24
 8048584:	af02      	add	r7, sp, #8
 8048586:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8048588:	4812      	ldr	r0, [pc, #72]	; (80485d4 <HAL_ETH_RxAllocateCallback+0x54>)
 804858a:	f005 ff7f 	bl	804e48c <memp_malloc_pool>
 804858e:	60f8      	str	r0, [r7, #12]
  if (p)
 8048590:	68fb      	ldr	r3, [r7, #12]
 8048592:	2b00      	cmp	r3, #0
 8048594:	d014      	beq.n	80485c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8048596:	68fb      	ldr	r3, [r7, #12]
 8048598:	f103 0220 	add.w	r2, r3, #32
 804859c:	687b      	ldr	r3, [r7, #4]
 804859e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80485a0:	68fb      	ldr	r3, [r7, #12]
 80485a2:	4a0d      	ldr	r2, [pc, #52]	; (80485d8 <HAL_ETH_RxAllocateCallback+0x58>)
 80485a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80485a6:	687b      	ldr	r3, [r7, #4]
 80485a8:	681b      	ldr	r3, [r3, #0]
 80485aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80485ae:	9201      	str	r2, [sp, #4]
 80485b0:	9300      	str	r3, [sp, #0]
 80485b2:	68fb      	ldr	r3, [r7, #12]
 80485b4:	2241      	movs	r2, #65	; 0x41
 80485b6:	2100      	movs	r1, #0
 80485b8:	2000      	movs	r0, #0
 80485ba:	f006 fce9 	bl	804ef90 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80485be:	e005      	b.n	80485cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80485c0:	4b06      	ldr	r3, [pc, #24]	; (80485dc <HAL_ETH_RxAllocateCallback+0x5c>)
 80485c2:	2201      	movs	r2, #1
 80485c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80485c6:	687b      	ldr	r3, [r7, #4]
 80485c8:	2200      	movs	r2, #0
 80485ca:	601a      	str	r2, [r3, #0]
}
 80485cc:	bf00      	nop
 80485ce:	3710      	adds	r7, #16
 80485d0:	46bd      	mov	sp, r7
 80485d2:	bd80      	pop	{r7, pc}
 80485d4:	0805d808 	.word	0x0805d808
 80485d8:	08048315 	.word	0x08048315
 80485dc:	20005a20 	.word	0x20005a20

080485e0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80485e0:	b580      	push	{r7, lr}
 80485e2:	b088      	sub	sp, #32
 80485e4:	af00      	add	r7, sp, #0
 80485e6:	60f8      	str	r0, [r7, #12]
 80485e8:	60b9      	str	r1, [r7, #8]
 80485ea:	607a      	str	r2, [r7, #4]
 80485ec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80485ee:	68fb      	ldr	r3, [r7, #12]
 80485f0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80485f2:	68bb      	ldr	r3, [r7, #8]
 80485f4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80485f6:	2300      	movs	r3, #0
 80485f8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80485fa:	687b      	ldr	r3, [r7, #4]
 80485fc:	3b20      	subs	r3, #32
 80485fe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8048600:	69fb      	ldr	r3, [r7, #28]
 8048602:	2200      	movs	r2, #0
 8048604:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8048606:	69fb      	ldr	r3, [r7, #28]
 8048608:	2200      	movs	r2, #0
 804860a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 804860c:	69fb      	ldr	r3, [r7, #28]
 804860e:	887a      	ldrh	r2, [r7, #2]
 8048610:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8048612:	69bb      	ldr	r3, [r7, #24]
 8048614:	681b      	ldr	r3, [r3, #0]
 8048616:	2b00      	cmp	r3, #0
 8048618:	d103      	bne.n	8048622 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 804861a:	69bb      	ldr	r3, [r7, #24]
 804861c:	69fa      	ldr	r2, [r7, #28]
 804861e:	601a      	str	r2, [r3, #0]
 8048620:	e003      	b.n	804862a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8048622:	697b      	ldr	r3, [r7, #20]
 8048624:	681b      	ldr	r3, [r3, #0]
 8048626:	69fa      	ldr	r2, [r7, #28]
 8048628:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 804862a:	697b      	ldr	r3, [r7, #20]
 804862c:	69fa      	ldr	r2, [r7, #28]
 804862e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8048630:	69bb      	ldr	r3, [r7, #24]
 8048632:	681b      	ldr	r3, [r3, #0]
 8048634:	61fb      	str	r3, [r7, #28]
 8048636:	e009      	b.n	804864c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8048638:	69fb      	ldr	r3, [r7, #28]
 804863a:	891a      	ldrh	r2, [r3, #8]
 804863c:	887b      	ldrh	r3, [r7, #2]
 804863e:	4413      	add	r3, r2
 8048640:	b29a      	uxth	r2, r3
 8048642:	69fb      	ldr	r3, [r7, #28]
 8048644:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8048646:	69fb      	ldr	r3, [r7, #28]
 8048648:	681b      	ldr	r3, [r3, #0]
 804864a:	61fb      	str	r3, [r7, #28]
 804864c:	69fb      	ldr	r3, [r7, #28]
 804864e:	2b00      	cmp	r3, #0
 8048650:	d1f2      	bne.n	8048638 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8048652:	887b      	ldrh	r3, [r7, #2]
 8048654:	4619      	mov	r1, r3
 8048656:	6878      	ldr	r0, [r7, #4]
 8048658:	f7ff fb16 	bl	8047c88 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 804865c:	bf00      	nop
 804865e:	3720      	adds	r7, #32
 8048660:	46bd      	mov	sp, r7
 8048662:	bd80      	pop	{r7, pc}

08048664 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8048664:	b580      	push	{r7, lr}
 8048666:	b082      	sub	sp, #8
 8048668:	af00      	add	r7, sp, #0
 804866a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 804866c:	6878      	ldr	r0, [r7, #4]
 804866e:	f006 fe49 	bl	804f304 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8048672:	bf00      	nop
 8048674:	3708      	adds	r7, #8
 8048676:	46bd      	mov	sp, r7
 8048678:	bd80      	pop	{r7, pc}

0804867a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 804867a:	b480      	push	{r7}
 804867c:	b085      	sub	sp, #20
 804867e:	af00      	add	r7, sp, #0
 8048680:	4603      	mov	r3, r0
 8048682:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8048684:	2300      	movs	r3, #0
 8048686:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8048688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 804868c:	2b84      	cmp	r3, #132	; 0x84
 804868e:	d005      	beq.n	804869c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8048690:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8048694:	68fb      	ldr	r3, [r7, #12]
 8048696:	4413      	add	r3, r2
 8048698:	3303      	adds	r3, #3
 804869a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 804869c:	68fb      	ldr	r3, [r7, #12]
}
 804869e:	4618      	mov	r0, r3
 80486a0:	3714      	adds	r7, #20
 80486a2:	46bd      	mov	sp, r7
 80486a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80486a8:	4770      	bx	lr

080486aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80486aa:	b480      	push	{r7}
 80486ac:	b083      	sub	sp, #12
 80486ae:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80486b0:	f3ef 8305 	mrs	r3, IPSR
 80486b4:	607b      	str	r3, [r7, #4]
  return(result);
 80486b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80486b8:	2b00      	cmp	r3, #0
 80486ba:	bf14      	ite	ne
 80486bc:	2301      	movne	r3, #1
 80486be:	2300      	moveq	r3, #0
 80486c0:	b2db      	uxtb	r3, r3
}
 80486c2:	4618      	mov	r0, r3
 80486c4:	370c      	adds	r7, #12
 80486c6:	46bd      	mov	sp, r7
 80486c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80486cc:	4770      	bx	lr

080486ce <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80486ce:	b580      	push	{r7, lr}
 80486d0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80486d2:	f001 fe9f 	bl	804a414 <vTaskStartScheduler>
  
  return osOK;
 80486d6:	2300      	movs	r3, #0
}
 80486d8:	4618      	mov	r0, r3
 80486da:	bd80      	pop	{r7, pc}

080486dc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80486dc:	b580      	push	{r7, lr}
 80486de:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80486e0:	f7ff ffe3 	bl	80486aa <inHandlerMode>
 80486e4:	4603      	mov	r3, r0
 80486e6:	2b00      	cmp	r3, #0
 80486e8:	d003      	beq.n	80486f2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80486ea:	f001 ffbd 	bl	804a668 <xTaskGetTickCountFromISR>
 80486ee:	4603      	mov	r3, r0
 80486f0:	e002      	b.n	80486f8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80486f2:	f001 ffa9 	bl	804a648 <xTaskGetTickCount>
 80486f6:	4603      	mov	r3, r0
  }
}
 80486f8:	4618      	mov	r0, r3
 80486fa:	bd80      	pop	{r7, pc}

080486fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80486fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80486fe:	b089      	sub	sp, #36	; 0x24
 8048700:	af04      	add	r7, sp, #16
 8048702:	6078      	str	r0, [r7, #4]
 8048704:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8048706:	687b      	ldr	r3, [r7, #4]
 8048708:	695b      	ldr	r3, [r3, #20]
 804870a:	2b00      	cmp	r3, #0
 804870c:	d020      	beq.n	8048750 <osThreadCreate+0x54>
 804870e:	687b      	ldr	r3, [r7, #4]
 8048710:	699b      	ldr	r3, [r3, #24]
 8048712:	2b00      	cmp	r3, #0
 8048714:	d01c      	beq.n	8048750 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8048716:	687b      	ldr	r3, [r7, #4]
 8048718:	685c      	ldr	r4, [r3, #4]
 804871a:	687b      	ldr	r3, [r7, #4]
 804871c:	681d      	ldr	r5, [r3, #0]
 804871e:	687b      	ldr	r3, [r7, #4]
 8048720:	691e      	ldr	r6, [r3, #16]
 8048722:	687b      	ldr	r3, [r7, #4]
 8048724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8048728:	4618      	mov	r0, r3
 804872a:	f7ff ffa6 	bl	804867a <makeFreeRtosPriority>
 804872e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8048730:	687b      	ldr	r3, [r7, #4]
 8048732:	695b      	ldr	r3, [r3, #20]
 8048734:	687a      	ldr	r2, [r7, #4]
 8048736:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8048738:	9202      	str	r2, [sp, #8]
 804873a:	9301      	str	r3, [sp, #4]
 804873c:	9100      	str	r1, [sp, #0]
 804873e:	683b      	ldr	r3, [r7, #0]
 8048740:	4632      	mov	r2, r6
 8048742:	4629      	mov	r1, r5
 8048744:	4620      	mov	r0, r4
 8048746:	f001 fb67 	bl	8049e18 <xTaskCreateStatic>
 804874a:	4603      	mov	r3, r0
 804874c:	60fb      	str	r3, [r7, #12]
 804874e:	e01c      	b.n	804878a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8048750:	687b      	ldr	r3, [r7, #4]
 8048752:	685c      	ldr	r4, [r3, #4]
 8048754:	687b      	ldr	r3, [r7, #4]
 8048756:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8048758:	687b      	ldr	r3, [r7, #4]
 804875a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 804875c:	b29e      	uxth	r6, r3
 804875e:	687b      	ldr	r3, [r7, #4]
 8048760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8048764:	4618      	mov	r0, r3
 8048766:	f7ff ff88 	bl	804867a <makeFreeRtosPriority>
 804876a:	4602      	mov	r2, r0
 804876c:	f107 030c 	add.w	r3, r7, #12
 8048770:	9301      	str	r3, [sp, #4]
 8048772:	9200      	str	r2, [sp, #0]
 8048774:	683b      	ldr	r3, [r7, #0]
 8048776:	4632      	mov	r2, r6
 8048778:	4629      	mov	r1, r5
 804877a:	4620      	mov	r0, r4
 804877c:	f001 fbaf 	bl	8049ede <xTaskCreate>
 8048780:	4603      	mov	r3, r0
 8048782:	2b01      	cmp	r3, #1
 8048784:	d001      	beq.n	804878a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8048786:	2300      	movs	r3, #0
 8048788:	e000      	b.n	804878c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 804878a:	68fb      	ldr	r3, [r7, #12]
}
 804878c:	4618      	mov	r0, r3
 804878e:	3714      	adds	r7, #20
 8048790:	46bd      	mov	sp, r7
 8048792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08048794 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8048794:	b580      	push	{r7, lr}
 8048796:	b084      	sub	sp, #16
 8048798:	af00      	add	r7, sp, #0
 804879a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 804879c:	687b      	ldr	r3, [r7, #4]
 804879e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80487a0:	68fb      	ldr	r3, [r7, #12]
 80487a2:	2b00      	cmp	r3, #0
 80487a4:	d001      	beq.n	80487aa <osDelay+0x16>
 80487a6:	68fb      	ldr	r3, [r7, #12]
 80487a8:	e000      	b.n	80487ac <osDelay+0x18>
 80487aa:	2301      	movs	r3, #1
 80487ac:	4618      	mov	r0, r3
 80487ae:	f001 fdfb 	bl	804a3a8 <vTaskDelay>
  
  return osOK;
 80487b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80487b4:	4618      	mov	r0, r3
 80487b6:	3710      	adds	r7, #16
 80487b8:	46bd      	mov	sp, r7
 80487ba:	bd80      	pop	{r7, pc}

080487bc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80487bc:	b580      	push	{r7, lr}
 80487be:	b082      	sub	sp, #8
 80487c0:	af00      	add	r7, sp, #0
 80487c2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80487c4:	687b      	ldr	r3, [r7, #4]
 80487c6:	685b      	ldr	r3, [r3, #4]
 80487c8:	2b00      	cmp	r3, #0
 80487ca:	d007      	beq.n	80487dc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80487cc:	687b      	ldr	r3, [r7, #4]
 80487ce:	685b      	ldr	r3, [r3, #4]
 80487d0:	4619      	mov	r1, r3
 80487d2:	2001      	movs	r0, #1
 80487d4:	f000 fc91 	bl	80490fa <xQueueCreateMutexStatic>
 80487d8:	4603      	mov	r3, r0
 80487da:	e003      	b.n	80487e4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80487dc:	2001      	movs	r0, #1
 80487de:	f000 fc74 	bl	80490ca <xQueueCreateMutex>
 80487e2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80487e4:	4618      	mov	r0, r3
 80487e6:	3708      	adds	r7, #8
 80487e8:	46bd      	mov	sp, r7
 80487ea:	bd80      	pop	{r7, pc}

080487ec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80487ec:	b580      	push	{r7, lr}
 80487ee:	b084      	sub	sp, #16
 80487f0:	af00      	add	r7, sp, #0
 80487f2:	6078      	str	r0, [r7, #4]
 80487f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80487f6:	2300      	movs	r3, #0
 80487f8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80487fa:	687b      	ldr	r3, [r7, #4]
 80487fc:	2b00      	cmp	r3, #0
 80487fe:	d101      	bne.n	8048804 <osMutexWait+0x18>
    return osErrorParameter;
 8048800:	2380      	movs	r3, #128	; 0x80
 8048802:	e03a      	b.n	804887a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8048804:	2300      	movs	r3, #0
 8048806:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8048808:	683b      	ldr	r3, [r7, #0]
 804880a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804880e:	d103      	bne.n	8048818 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8048810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8048814:	60fb      	str	r3, [r7, #12]
 8048816:	e009      	b.n	804882c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8048818:	683b      	ldr	r3, [r7, #0]
 804881a:	2b00      	cmp	r3, #0
 804881c:	d006      	beq.n	804882c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 804881e:	683b      	ldr	r3, [r7, #0]
 8048820:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8048822:	68fb      	ldr	r3, [r7, #12]
 8048824:	2b00      	cmp	r3, #0
 8048826:	d101      	bne.n	804882c <osMutexWait+0x40>
      ticks = 1;
 8048828:	2301      	movs	r3, #1
 804882a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 804882c:	f7ff ff3d 	bl	80486aa <inHandlerMode>
 8048830:	4603      	mov	r3, r0
 8048832:	2b00      	cmp	r3, #0
 8048834:	d017      	beq.n	8048866 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8048836:	f107 0308 	add.w	r3, r7, #8
 804883a:	461a      	mov	r2, r3
 804883c:	2100      	movs	r1, #0
 804883e:	6878      	ldr	r0, [r7, #4]
 8048840:	f001 f8ac 	bl	804999c <xQueueReceiveFromISR>
 8048844:	4603      	mov	r3, r0
 8048846:	2b01      	cmp	r3, #1
 8048848:	d001      	beq.n	804884e <osMutexWait+0x62>
      return osErrorOS;
 804884a:	23ff      	movs	r3, #255	; 0xff
 804884c:	e015      	b.n	804887a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 804884e:	68bb      	ldr	r3, [r7, #8]
 8048850:	2b00      	cmp	r3, #0
 8048852:	d011      	beq.n	8048878 <osMutexWait+0x8c>
 8048854:	4b0b      	ldr	r3, [pc, #44]	; (8048884 <osMutexWait+0x98>)
 8048856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804885a:	601a      	str	r2, [r3, #0]
 804885c:	f3bf 8f4f 	dsb	sy
 8048860:	f3bf 8f6f 	isb	sy
 8048864:	e008      	b.n	8048878 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8048866:	68f9      	ldr	r1, [r7, #12]
 8048868:	6878      	ldr	r0, [r7, #4]
 804886a:	f000 ff83 	bl	8049774 <xQueueSemaphoreTake>
 804886e:	4603      	mov	r3, r0
 8048870:	2b01      	cmp	r3, #1
 8048872:	d001      	beq.n	8048878 <osMutexWait+0x8c>
    return osErrorOS;
 8048874:	23ff      	movs	r3, #255	; 0xff
 8048876:	e000      	b.n	804887a <osMutexWait+0x8e>
  }
  
  return osOK;
 8048878:	2300      	movs	r3, #0
}
 804887a:	4618      	mov	r0, r3
 804887c:	3710      	adds	r7, #16
 804887e:	46bd      	mov	sp, r7
 8048880:	bd80      	pop	{r7, pc}
 8048882:	bf00      	nop
 8048884:	e000ed04 	.word	0xe000ed04

08048888 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8048888:	b580      	push	{r7, lr}
 804888a:	b084      	sub	sp, #16
 804888c:	af00      	add	r7, sp, #0
 804888e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8048890:	2300      	movs	r3, #0
 8048892:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8048894:	2300      	movs	r3, #0
 8048896:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8048898:	f7ff ff07 	bl	80486aa <inHandlerMode>
 804889c:	4603      	mov	r3, r0
 804889e:	2b00      	cmp	r3, #0
 80488a0:	d016      	beq.n	80488d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80488a2:	f107 0308 	add.w	r3, r7, #8
 80488a6:	4619      	mov	r1, r3
 80488a8:	6878      	ldr	r0, [r7, #4]
 80488aa:	f000 fde7 	bl	804947c <xQueueGiveFromISR>
 80488ae:	4603      	mov	r3, r0
 80488b0:	2b01      	cmp	r3, #1
 80488b2:	d001      	beq.n	80488b8 <osMutexRelease+0x30>
      return osErrorOS;
 80488b4:	23ff      	movs	r3, #255	; 0xff
 80488b6:	e017      	b.n	80488e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80488b8:	68bb      	ldr	r3, [r7, #8]
 80488ba:	2b00      	cmp	r3, #0
 80488bc:	d013      	beq.n	80488e6 <osMutexRelease+0x5e>
 80488be:	4b0c      	ldr	r3, [pc, #48]	; (80488f0 <osMutexRelease+0x68>)
 80488c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80488c4:	601a      	str	r2, [r3, #0]
 80488c6:	f3bf 8f4f 	dsb	sy
 80488ca:	f3bf 8f6f 	isb	sy
 80488ce:	e00a      	b.n	80488e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80488d0:	2300      	movs	r3, #0
 80488d2:	2200      	movs	r2, #0
 80488d4:	2100      	movs	r1, #0
 80488d6:	6878      	ldr	r0, [r7, #4]
 80488d8:	f000 fc2a 	bl	8049130 <xQueueGenericSend>
 80488dc:	4603      	mov	r3, r0
 80488de:	2b01      	cmp	r3, #1
 80488e0:	d001      	beq.n	80488e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80488e2:	23ff      	movs	r3, #255	; 0xff
 80488e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80488e6:	68fb      	ldr	r3, [r7, #12]
}
 80488e8:	4618      	mov	r0, r3
 80488ea:	3710      	adds	r7, #16
 80488ec:	46bd      	mov	sp, r7
 80488ee:	bd80      	pop	{r7, pc}
 80488f0:	e000ed04 	.word	0xe000ed04

080488f4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80488f4:	b580      	push	{r7, lr}
 80488f6:	b086      	sub	sp, #24
 80488f8:	af02      	add	r7, sp, #8
 80488fa:	6078      	str	r0, [r7, #4]
 80488fc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80488fe:	687b      	ldr	r3, [r7, #4]
 8048900:	685b      	ldr	r3, [r3, #4]
 8048902:	2b00      	cmp	r3, #0
 8048904:	d00f      	beq.n	8048926 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8048906:	683b      	ldr	r3, [r7, #0]
 8048908:	2b01      	cmp	r3, #1
 804890a:	d10a      	bne.n	8048922 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 804890c:	687b      	ldr	r3, [r7, #4]
 804890e:	685b      	ldr	r3, [r3, #4]
 8048910:	2203      	movs	r2, #3
 8048912:	9200      	str	r2, [sp, #0]
 8048914:	2200      	movs	r2, #0
 8048916:	2100      	movs	r1, #0
 8048918:	2001      	movs	r0, #1
 804891a:	f000 fad9 	bl	8048ed0 <xQueueGenericCreateStatic>
 804891e:	4603      	mov	r3, r0
 8048920:	e016      	b.n	8048950 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8048922:	2300      	movs	r3, #0
 8048924:	e014      	b.n	8048950 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8048926:	683b      	ldr	r3, [r7, #0]
 8048928:	2b01      	cmp	r3, #1
 804892a:	d110      	bne.n	804894e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 804892c:	2203      	movs	r2, #3
 804892e:	2100      	movs	r1, #0
 8048930:	2001      	movs	r0, #1
 8048932:	f000 fb4f 	bl	8048fd4 <xQueueGenericCreate>
 8048936:	60f8      	str	r0, [r7, #12]
 8048938:	68fb      	ldr	r3, [r7, #12]
 804893a:	2b00      	cmp	r3, #0
 804893c:	d005      	beq.n	804894a <osSemaphoreCreate+0x56>
 804893e:	2300      	movs	r3, #0
 8048940:	2200      	movs	r2, #0
 8048942:	2100      	movs	r1, #0
 8048944:	68f8      	ldr	r0, [r7, #12]
 8048946:	f000 fbf3 	bl	8049130 <xQueueGenericSend>
      return sema;
 804894a:	68fb      	ldr	r3, [r7, #12]
 804894c:	e000      	b.n	8048950 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 804894e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8048950:	4618      	mov	r0, r3
 8048952:	3710      	adds	r7, #16
 8048954:	46bd      	mov	sp, r7
 8048956:	bd80      	pop	{r7, pc}

08048958 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8048958:	b580      	push	{r7, lr}
 804895a:	b084      	sub	sp, #16
 804895c:	af00      	add	r7, sp, #0
 804895e:	6078      	str	r0, [r7, #4]
 8048960:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8048962:	2300      	movs	r3, #0
 8048964:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8048966:	687b      	ldr	r3, [r7, #4]
 8048968:	2b00      	cmp	r3, #0
 804896a:	d101      	bne.n	8048970 <osSemaphoreWait+0x18>
    return osErrorParameter;
 804896c:	2380      	movs	r3, #128	; 0x80
 804896e:	e03a      	b.n	80489e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8048970:	2300      	movs	r3, #0
 8048972:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8048974:	683b      	ldr	r3, [r7, #0]
 8048976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804897a:	d103      	bne.n	8048984 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 804897c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8048980:	60fb      	str	r3, [r7, #12]
 8048982:	e009      	b.n	8048998 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8048984:	683b      	ldr	r3, [r7, #0]
 8048986:	2b00      	cmp	r3, #0
 8048988:	d006      	beq.n	8048998 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 804898a:	683b      	ldr	r3, [r7, #0]
 804898c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 804898e:	68fb      	ldr	r3, [r7, #12]
 8048990:	2b00      	cmp	r3, #0
 8048992:	d101      	bne.n	8048998 <osSemaphoreWait+0x40>
      ticks = 1;
 8048994:	2301      	movs	r3, #1
 8048996:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8048998:	f7ff fe87 	bl	80486aa <inHandlerMode>
 804899c:	4603      	mov	r3, r0
 804899e:	2b00      	cmp	r3, #0
 80489a0:	d017      	beq.n	80489d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80489a2:	f107 0308 	add.w	r3, r7, #8
 80489a6:	461a      	mov	r2, r3
 80489a8:	2100      	movs	r1, #0
 80489aa:	6878      	ldr	r0, [r7, #4]
 80489ac:	f000 fff6 	bl	804999c <xQueueReceiveFromISR>
 80489b0:	4603      	mov	r3, r0
 80489b2:	2b01      	cmp	r3, #1
 80489b4:	d001      	beq.n	80489ba <osSemaphoreWait+0x62>
      return osErrorOS;
 80489b6:	23ff      	movs	r3, #255	; 0xff
 80489b8:	e015      	b.n	80489e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80489ba:	68bb      	ldr	r3, [r7, #8]
 80489bc:	2b00      	cmp	r3, #0
 80489be:	d011      	beq.n	80489e4 <osSemaphoreWait+0x8c>
 80489c0:	4b0b      	ldr	r3, [pc, #44]	; (80489f0 <osSemaphoreWait+0x98>)
 80489c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80489c6:	601a      	str	r2, [r3, #0]
 80489c8:	f3bf 8f4f 	dsb	sy
 80489cc:	f3bf 8f6f 	isb	sy
 80489d0:	e008      	b.n	80489e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80489d2:	68f9      	ldr	r1, [r7, #12]
 80489d4:	6878      	ldr	r0, [r7, #4]
 80489d6:	f000 fecd 	bl	8049774 <xQueueSemaphoreTake>
 80489da:	4603      	mov	r3, r0
 80489dc:	2b01      	cmp	r3, #1
 80489de:	d001      	beq.n	80489e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80489e0:	23ff      	movs	r3, #255	; 0xff
 80489e2:	e000      	b.n	80489e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80489e4:	2300      	movs	r3, #0
}
 80489e6:	4618      	mov	r0, r3
 80489e8:	3710      	adds	r7, #16
 80489ea:	46bd      	mov	sp, r7
 80489ec:	bd80      	pop	{r7, pc}
 80489ee:	bf00      	nop
 80489f0:	e000ed04 	.word	0xe000ed04

080489f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80489f4:	b580      	push	{r7, lr}
 80489f6:	b084      	sub	sp, #16
 80489f8:	af00      	add	r7, sp, #0
 80489fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80489fc:	2300      	movs	r3, #0
 80489fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8048a00:	2300      	movs	r3, #0
 8048a02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8048a04:	f7ff fe51 	bl	80486aa <inHandlerMode>
 8048a08:	4603      	mov	r3, r0
 8048a0a:	2b00      	cmp	r3, #0
 8048a0c:	d016      	beq.n	8048a3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8048a0e:	f107 0308 	add.w	r3, r7, #8
 8048a12:	4619      	mov	r1, r3
 8048a14:	6878      	ldr	r0, [r7, #4]
 8048a16:	f000 fd31 	bl	804947c <xQueueGiveFromISR>
 8048a1a:	4603      	mov	r3, r0
 8048a1c:	2b01      	cmp	r3, #1
 8048a1e:	d001      	beq.n	8048a24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8048a20:	23ff      	movs	r3, #255	; 0xff
 8048a22:	e017      	b.n	8048a54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8048a24:	68bb      	ldr	r3, [r7, #8]
 8048a26:	2b00      	cmp	r3, #0
 8048a28:	d013      	beq.n	8048a52 <osSemaphoreRelease+0x5e>
 8048a2a:	4b0c      	ldr	r3, [pc, #48]	; (8048a5c <osSemaphoreRelease+0x68>)
 8048a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048a30:	601a      	str	r2, [r3, #0]
 8048a32:	f3bf 8f4f 	dsb	sy
 8048a36:	f3bf 8f6f 	isb	sy
 8048a3a:	e00a      	b.n	8048a52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8048a3c:	2300      	movs	r3, #0
 8048a3e:	2200      	movs	r2, #0
 8048a40:	2100      	movs	r1, #0
 8048a42:	6878      	ldr	r0, [r7, #4]
 8048a44:	f000 fb74 	bl	8049130 <xQueueGenericSend>
 8048a48:	4603      	mov	r3, r0
 8048a4a:	2b01      	cmp	r3, #1
 8048a4c:	d001      	beq.n	8048a52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8048a4e:	23ff      	movs	r3, #255	; 0xff
 8048a50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8048a52:	68fb      	ldr	r3, [r7, #12]
}
 8048a54:	4618      	mov	r0, r3
 8048a56:	3710      	adds	r7, #16
 8048a58:	46bd      	mov	sp, r7
 8048a5a:	bd80      	pop	{r7, pc}
 8048a5c:	e000ed04 	.word	0xe000ed04

08048a60 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8048a60:	b580      	push	{r7, lr}
 8048a62:	b082      	sub	sp, #8
 8048a64:	af00      	add	r7, sp, #0
 8048a66:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8048a68:	f7ff fe1f 	bl	80486aa <inHandlerMode>
 8048a6c:	4603      	mov	r3, r0
 8048a6e:	2b00      	cmp	r3, #0
 8048a70:	d001      	beq.n	8048a76 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8048a72:	2382      	movs	r3, #130	; 0x82
 8048a74:	e003      	b.n	8048a7e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8048a76:	6878      	ldr	r0, [r7, #4]
 8048a78:	f001 f856 	bl	8049b28 <vQueueDelete>

  return osOK; 
 8048a7c:	2300      	movs	r3, #0
}
 8048a7e:	4618      	mov	r0, r3
 8048a80:	3708      	adds	r7, #8
 8048a82:	46bd      	mov	sp, r7
 8048a84:	bd80      	pop	{r7, pc}

08048a86 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8048a86:	b590      	push	{r4, r7, lr}
 8048a88:	b085      	sub	sp, #20
 8048a8a:	af02      	add	r7, sp, #8
 8048a8c:	6078      	str	r0, [r7, #4]
 8048a8e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8048a90:	687b      	ldr	r3, [r7, #4]
 8048a92:	689b      	ldr	r3, [r3, #8]
 8048a94:	2b00      	cmp	r3, #0
 8048a96:	d011      	beq.n	8048abc <osMessageCreate+0x36>
 8048a98:	687b      	ldr	r3, [r7, #4]
 8048a9a:	68db      	ldr	r3, [r3, #12]
 8048a9c:	2b00      	cmp	r3, #0
 8048a9e:	d00d      	beq.n	8048abc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8048aa0:	687b      	ldr	r3, [r7, #4]
 8048aa2:	6818      	ldr	r0, [r3, #0]
 8048aa4:	687b      	ldr	r3, [r7, #4]
 8048aa6:	6859      	ldr	r1, [r3, #4]
 8048aa8:	687b      	ldr	r3, [r7, #4]
 8048aaa:	689a      	ldr	r2, [r3, #8]
 8048aac:	687b      	ldr	r3, [r7, #4]
 8048aae:	68db      	ldr	r3, [r3, #12]
 8048ab0:	2400      	movs	r4, #0
 8048ab2:	9400      	str	r4, [sp, #0]
 8048ab4:	f000 fa0c 	bl	8048ed0 <xQueueGenericCreateStatic>
 8048ab8:	4603      	mov	r3, r0
 8048aba:	e008      	b.n	8048ace <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8048abc:	687b      	ldr	r3, [r7, #4]
 8048abe:	6818      	ldr	r0, [r3, #0]
 8048ac0:	687b      	ldr	r3, [r7, #4]
 8048ac2:	685b      	ldr	r3, [r3, #4]
 8048ac4:	2200      	movs	r2, #0
 8048ac6:	4619      	mov	r1, r3
 8048ac8:	f000 fa84 	bl	8048fd4 <xQueueGenericCreate>
 8048acc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8048ace:	4618      	mov	r0, r3
 8048ad0:	370c      	adds	r7, #12
 8048ad2:	46bd      	mov	sp, r7
 8048ad4:	bd90      	pop	{r4, r7, pc}
	...

08048ad8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8048ad8:	b580      	push	{r7, lr}
 8048ada:	b086      	sub	sp, #24
 8048adc:	af00      	add	r7, sp, #0
 8048ade:	60f8      	str	r0, [r7, #12]
 8048ae0:	60b9      	str	r1, [r7, #8]
 8048ae2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8048ae4:	2300      	movs	r3, #0
 8048ae6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8048ae8:	687b      	ldr	r3, [r7, #4]
 8048aea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8048aec:	697b      	ldr	r3, [r7, #20]
 8048aee:	2b00      	cmp	r3, #0
 8048af0:	d101      	bne.n	8048af6 <osMessagePut+0x1e>
    ticks = 1;
 8048af2:	2301      	movs	r3, #1
 8048af4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8048af6:	f7ff fdd8 	bl	80486aa <inHandlerMode>
 8048afa:	4603      	mov	r3, r0
 8048afc:	2b00      	cmp	r3, #0
 8048afe:	d018      	beq.n	8048b32 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8048b00:	f107 0210 	add.w	r2, r7, #16
 8048b04:	f107 0108 	add.w	r1, r7, #8
 8048b08:	2300      	movs	r3, #0
 8048b0a:	68f8      	ldr	r0, [r7, #12]
 8048b0c:	f000 fc16 	bl	804933c <xQueueGenericSendFromISR>
 8048b10:	4603      	mov	r3, r0
 8048b12:	2b01      	cmp	r3, #1
 8048b14:	d001      	beq.n	8048b1a <osMessagePut+0x42>
      return osErrorOS;
 8048b16:	23ff      	movs	r3, #255	; 0xff
 8048b18:	e018      	b.n	8048b4c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8048b1a:	693b      	ldr	r3, [r7, #16]
 8048b1c:	2b00      	cmp	r3, #0
 8048b1e:	d014      	beq.n	8048b4a <osMessagePut+0x72>
 8048b20:	4b0c      	ldr	r3, [pc, #48]	; (8048b54 <osMessagePut+0x7c>)
 8048b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048b26:	601a      	str	r2, [r3, #0]
 8048b28:	f3bf 8f4f 	dsb	sy
 8048b2c:	f3bf 8f6f 	isb	sy
 8048b30:	e00b      	b.n	8048b4a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8048b32:	f107 0108 	add.w	r1, r7, #8
 8048b36:	2300      	movs	r3, #0
 8048b38:	697a      	ldr	r2, [r7, #20]
 8048b3a:	68f8      	ldr	r0, [r7, #12]
 8048b3c:	f000 faf8 	bl	8049130 <xQueueGenericSend>
 8048b40:	4603      	mov	r3, r0
 8048b42:	2b01      	cmp	r3, #1
 8048b44:	d001      	beq.n	8048b4a <osMessagePut+0x72>
      return osErrorOS;
 8048b46:	23ff      	movs	r3, #255	; 0xff
 8048b48:	e000      	b.n	8048b4c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8048b4a:	2300      	movs	r3, #0
}
 8048b4c:	4618      	mov	r0, r3
 8048b4e:	3718      	adds	r7, #24
 8048b50:	46bd      	mov	sp, r7
 8048b52:	bd80      	pop	{r7, pc}
 8048b54:	e000ed04 	.word	0xe000ed04

08048b58 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8048b58:	b590      	push	{r4, r7, lr}
 8048b5a:	b08b      	sub	sp, #44	; 0x2c
 8048b5c:	af00      	add	r7, sp, #0
 8048b5e:	60f8      	str	r0, [r7, #12]
 8048b60:	60b9      	str	r1, [r7, #8]
 8048b62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8048b64:	68bb      	ldr	r3, [r7, #8]
 8048b66:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8048b68:	2300      	movs	r3, #0
 8048b6a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8048b6c:	68bb      	ldr	r3, [r7, #8]
 8048b6e:	2b00      	cmp	r3, #0
 8048b70:	d10a      	bne.n	8048b88 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8048b72:	2380      	movs	r3, #128	; 0x80
 8048b74:	617b      	str	r3, [r7, #20]
    return event;
 8048b76:	68fb      	ldr	r3, [r7, #12]
 8048b78:	461c      	mov	r4, r3
 8048b7a:	f107 0314 	add.w	r3, r7, #20
 8048b7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8048b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8048b86:	e054      	b.n	8048c32 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8048b88:	2300      	movs	r3, #0
 8048b8a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8048b8c:	2300      	movs	r3, #0
 8048b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8048b90:	687b      	ldr	r3, [r7, #4]
 8048b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8048b96:	d103      	bne.n	8048ba0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8048b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8048b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8048b9e:	e009      	b.n	8048bb4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8048ba0:	687b      	ldr	r3, [r7, #4]
 8048ba2:	2b00      	cmp	r3, #0
 8048ba4:	d006      	beq.n	8048bb4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8048ba6:	687b      	ldr	r3, [r7, #4]
 8048ba8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8048baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048bac:	2b00      	cmp	r3, #0
 8048bae:	d101      	bne.n	8048bb4 <osMessageGet+0x5c>
      ticks = 1;
 8048bb0:	2301      	movs	r3, #1
 8048bb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8048bb4:	f7ff fd79 	bl	80486aa <inHandlerMode>
 8048bb8:	4603      	mov	r3, r0
 8048bba:	2b00      	cmp	r3, #0
 8048bbc:	d01c      	beq.n	8048bf8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8048bbe:	f107 0220 	add.w	r2, r7, #32
 8048bc2:	f107 0314 	add.w	r3, r7, #20
 8048bc6:	3304      	adds	r3, #4
 8048bc8:	4619      	mov	r1, r3
 8048bca:	68b8      	ldr	r0, [r7, #8]
 8048bcc:	f000 fee6 	bl	804999c <xQueueReceiveFromISR>
 8048bd0:	4603      	mov	r3, r0
 8048bd2:	2b01      	cmp	r3, #1
 8048bd4:	d102      	bne.n	8048bdc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8048bd6:	2310      	movs	r3, #16
 8048bd8:	617b      	str	r3, [r7, #20]
 8048bda:	e001      	b.n	8048be0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8048bdc:	2300      	movs	r3, #0
 8048bde:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8048be0:	6a3b      	ldr	r3, [r7, #32]
 8048be2:	2b00      	cmp	r3, #0
 8048be4:	d01d      	beq.n	8048c22 <osMessageGet+0xca>
 8048be6:	4b15      	ldr	r3, [pc, #84]	; (8048c3c <osMessageGet+0xe4>)
 8048be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048bec:	601a      	str	r2, [r3, #0]
 8048bee:	f3bf 8f4f 	dsb	sy
 8048bf2:	f3bf 8f6f 	isb	sy
 8048bf6:	e014      	b.n	8048c22 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8048bf8:	f107 0314 	add.w	r3, r7, #20
 8048bfc:	3304      	adds	r3, #4
 8048bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8048c00:	4619      	mov	r1, r3
 8048c02:	68b8      	ldr	r0, [r7, #8]
 8048c04:	f000 fcd0 	bl	80495a8 <xQueueReceive>
 8048c08:	4603      	mov	r3, r0
 8048c0a:	2b01      	cmp	r3, #1
 8048c0c:	d102      	bne.n	8048c14 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8048c0e:	2310      	movs	r3, #16
 8048c10:	617b      	str	r3, [r7, #20]
 8048c12:	e006      	b.n	8048c22 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8048c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048c16:	2b00      	cmp	r3, #0
 8048c18:	d101      	bne.n	8048c1e <osMessageGet+0xc6>
 8048c1a:	2300      	movs	r3, #0
 8048c1c:	e000      	b.n	8048c20 <osMessageGet+0xc8>
 8048c1e:	2340      	movs	r3, #64	; 0x40
 8048c20:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8048c22:	68fb      	ldr	r3, [r7, #12]
 8048c24:	461c      	mov	r4, r3
 8048c26:	f107 0314 	add.w	r3, r7, #20
 8048c2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8048c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8048c32:	68f8      	ldr	r0, [r7, #12]
 8048c34:	372c      	adds	r7, #44	; 0x2c
 8048c36:	46bd      	mov	sp, r7
 8048c38:	bd90      	pop	{r4, r7, pc}
 8048c3a:	bf00      	nop
 8048c3c:	e000ed04 	.word	0xe000ed04

08048c40 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8048c40:	b580      	push	{r7, lr}
 8048c42:	b082      	sub	sp, #8
 8048c44:	af00      	add	r7, sp, #0
 8048c46:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8048c48:	f7ff fd2f 	bl	80486aa <inHandlerMode>
 8048c4c:	4603      	mov	r3, r0
 8048c4e:	2b00      	cmp	r3, #0
 8048c50:	d004      	beq.n	8048c5c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8048c52:	6878      	ldr	r0, [r7, #4]
 8048c54:	f000 ff48 	bl	8049ae8 <uxQueueMessagesWaitingFromISR>
 8048c58:	4603      	mov	r3, r0
 8048c5a:	e003      	b.n	8048c64 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8048c5c:	6878      	ldr	r0, [r7, #4]
 8048c5e:	f000 ff23 	bl	8049aa8 <uxQueueMessagesWaiting>
 8048c62:	4603      	mov	r3, r0
  }
}
 8048c64:	4618      	mov	r0, r3
 8048c66:	3708      	adds	r7, #8
 8048c68:	46bd      	mov	sp, r7
 8048c6a:	bd80      	pop	{r7, pc}

08048c6c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8048c6c:	b580      	push	{r7, lr}
 8048c6e:	b082      	sub	sp, #8
 8048c70:	af00      	add	r7, sp, #0
 8048c72:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8048c74:	f7ff fd19 	bl	80486aa <inHandlerMode>
 8048c78:	4603      	mov	r3, r0
 8048c7a:	2b00      	cmp	r3, #0
 8048c7c:	d001      	beq.n	8048c82 <osMessageDelete+0x16>
    return osErrorISR;
 8048c7e:	2382      	movs	r3, #130	; 0x82
 8048c80:	e003      	b.n	8048c8a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8048c82:	6878      	ldr	r0, [r7, #4]
 8048c84:	f000 ff50 	bl	8049b28 <vQueueDelete>

  return osOK; 
 8048c88:	2300      	movs	r3, #0
}
 8048c8a:	4618      	mov	r0, r3
 8048c8c:	3708      	adds	r7, #8
 8048c8e:	46bd      	mov	sp, r7
 8048c90:	bd80      	pop	{r7, pc}

08048c92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8048c92:	b480      	push	{r7}
 8048c94:	b083      	sub	sp, #12
 8048c96:	af00      	add	r7, sp, #0
 8048c98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8048c9a:	687b      	ldr	r3, [r7, #4]
 8048c9c:	f103 0208 	add.w	r2, r3, #8
 8048ca0:	687b      	ldr	r3, [r7, #4]
 8048ca2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8048ca4:	687b      	ldr	r3, [r7, #4]
 8048ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8048caa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8048cac:	687b      	ldr	r3, [r7, #4]
 8048cae:	f103 0208 	add.w	r2, r3, #8
 8048cb2:	687b      	ldr	r3, [r7, #4]
 8048cb4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8048cb6:	687b      	ldr	r3, [r7, #4]
 8048cb8:	f103 0208 	add.w	r2, r3, #8
 8048cbc:	687b      	ldr	r3, [r7, #4]
 8048cbe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8048cc0:	687b      	ldr	r3, [r7, #4]
 8048cc2:	2200      	movs	r2, #0
 8048cc4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8048cc6:	bf00      	nop
 8048cc8:	370c      	adds	r7, #12
 8048cca:	46bd      	mov	sp, r7
 8048ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cd0:	4770      	bx	lr

08048cd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8048cd2:	b480      	push	{r7}
 8048cd4:	b083      	sub	sp, #12
 8048cd6:	af00      	add	r7, sp, #0
 8048cd8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8048cda:	687b      	ldr	r3, [r7, #4]
 8048cdc:	2200      	movs	r2, #0
 8048cde:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8048ce0:	bf00      	nop
 8048ce2:	370c      	adds	r7, #12
 8048ce4:	46bd      	mov	sp, r7
 8048ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cea:	4770      	bx	lr

08048cec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8048cec:	b480      	push	{r7}
 8048cee:	b085      	sub	sp, #20
 8048cf0:	af00      	add	r7, sp, #0
 8048cf2:	6078      	str	r0, [r7, #4]
 8048cf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8048cf6:	687b      	ldr	r3, [r7, #4]
 8048cf8:	685b      	ldr	r3, [r3, #4]
 8048cfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8048cfc:	683b      	ldr	r3, [r7, #0]
 8048cfe:	68fa      	ldr	r2, [r7, #12]
 8048d00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8048d02:	68fb      	ldr	r3, [r7, #12]
 8048d04:	689a      	ldr	r2, [r3, #8]
 8048d06:	683b      	ldr	r3, [r7, #0]
 8048d08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8048d0a:	68fb      	ldr	r3, [r7, #12]
 8048d0c:	689b      	ldr	r3, [r3, #8]
 8048d0e:	683a      	ldr	r2, [r7, #0]
 8048d10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8048d12:	68fb      	ldr	r3, [r7, #12]
 8048d14:	683a      	ldr	r2, [r7, #0]
 8048d16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8048d18:	683b      	ldr	r3, [r7, #0]
 8048d1a:	687a      	ldr	r2, [r7, #4]
 8048d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8048d1e:	687b      	ldr	r3, [r7, #4]
 8048d20:	681b      	ldr	r3, [r3, #0]
 8048d22:	1c5a      	adds	r2, r3, #1
 8048d24:	687b      	ldr	r3, [r7, #4]
 8048d26:	601a      	str	r2, [r3, #0]
}
 8048d28:	bf00      	nop
 8048d2a:	3714      	adds	r7, #20
 8048d2c:	46bd      	mov	sp, r7
 8048d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d32:	4770      	bx	lr

08048d34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8048d34:	b480      	push	{r7}
 8048d36:	b085      	sub	sp, #20
 8048d38:	af00      	add	r7, sp, #0
 8048d3a:	6078      	str	r0, [r7, #4]
 8048d3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8048d3e:	683b      	ldr	r3, [r7, #0]
 8048d40:	681b      	ldr	r3, [r3, #0]
 8048d42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8048d44:	68bb      	ldr	r3, [r7, #8]
 8048d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8048d4a:	d103      	bne.n	8048d54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8048d4c:	687b      	ldr	r3, [r7, #4]
 8048d4e:	691b      	ldr	r3, [r3, #16]
 8048d50:	60fb      	str	r3, [r7, #12]
 8048d52:	e00c      	b.n	8048d6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8048d54:	687b      	ldr	r3, [r7, #4]
 8048d56:	3308      	adds	r3, #8
 8048d58:	60fb      	str	r3, [r7, #12]
 8048d5a:	e002      	b.n	8048d62 <vListInsert+0x2e>
 8048d5c:	68fb      	ldr	r3, [r7, #12]
 8048d5e:	685b      	ldr	r3, [r3, #4]
 8048d60:	60fb      	str	r3, [r7, #12]
 8048d62:	68fb      	ldr	r3, [r7, #12]
 8048d64:	685b      	ldr	r3, [r3, #4]
 8048d66:	681b      	ldr	r3, [r3, #0]
 8048d68:	68ba      	ldr	r2, [r7, #8]
 8048d6a:	429a      	cmp	r2, r3
 8048d6c:	d2f6      	bcs.n	8048d5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8048d6e:	68fb      	ldr	r3, [r7, #12]
 8048d70:	685a      	ldr	r2, [r3, #4]
 8048d72:	683b      	ldr	r3, [r7, #0]
 8048d74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8048d76:	683b      	ldr	r3, [r7, #0]
 8048d78:	685b      	ldr	r3, [r3, #4]
 8048d7a:	683a      	ldr	r2, [r7, #0]
 8048d7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8048d7e:	683b      	ldr	r3, [r7, #0]
 8048d80:	68fa      	ldr	r2, [r7, #12]
 8048d82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8048d84:	68fb      	ldr	r3, [r7, #12]
 8048d86:	683a      	ldr	r2, [r7, #0]
 8048d88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8048d8a:	683b      	ldr	r3, [r7, #0]
 8048d8c:	687a      	ldr	r2, [r7, #4]
 8048d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8048d90:	687b      	ldr	r3, [r7, #4]
 8048d92:	681b      	ldr	r3, [r3, #0]
 8048d94:	1c5a      	adds	r2, r3, #1
 8048d96:	687b      	ldr	r3, [r7, #4]
 8048d98:	601a      	str	r2, [r3, #0]
}
 8048d9a:	bf00      	nop
 8048d9c:	3714      	adds	r7, #20
 8048d9e:	46bd      	mov	sp, r7
 8048da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048da4:	4770      	bx	lr

08048da6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8048da6:	b480      	push	{r7}
 8048da8:	b085      	sub	sp, #20
 8048daa:	af00      	add	r7, sp, #0
 8048dac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8048dae:	687b      	ldr	r3, [r7, #4]
 8048db0:	691b      	ldr	r3, [r3, #16]
 8048db2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8048db4:	687b      	ldr	r3, [r7, #4]
 8048db6:	685b      	ldr	r3, [r3, #4]
 8048db8:	687a      	ldr	r2, [r7, #4]
 8048dba:	6892      	ldr	r2, [r2, #8]
 8048dbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8048dbe:	687b      	ldr	r3, [r7, #4]
 8048dc0:	689b      	ldr	r3, [r3, #8]
 8048dc2:	687a      	ldr	r2, [r7, #4]
 8048dc4:	6852      	ldr	r2, [r2, #4]
 8048dc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8048dc8:	68fb      	ldr	r3, [r7, #12]
 8048dca:	685b      	ldr	r3, [r3, #4]
 8048dcc:	687a      	ldr	r2, [r7, #4]
 8048dce:	429a      	cmp	r2, r3
 8048dd0:	d103      	bne.n	8048dda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8048dd2:	687b      	ldr	r3, [r7, #4]
 8048dd4:	689a      	ldr	r2, [r3, #8]
 8048dd6:	68fb      	ldr	r3, [r7, #12]
 8048dd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8048dda:	687b      	ldr	r3, [r7, #4]
 8048ddc:	2200      	movs	r2, #0
 8048dde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8048de0:	68fb      	ldr	r3, [r7, #12]
 8048de2:	681b      	ldr	r3, [r3, #0]
 8048de4:	1e5a      	subs	r2, r3, #1
 8048de6:	68fb      	ldr	r3, [r7, #12]
 8048de8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8048dea:	68fb      	ldr	r3, [r7, #12]
 8048dec:	681b      	ldr	r3, [r3, #0]
}
 8048dee:	4618      	mov	r0, r3
 8048df0:	3714      	adds	r7, #20
 8048df2:	46bd      	mov	sp, r7
 8048df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048df8:	4770      	bx	lr
	...

08048dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8048dfc:	b580      	push	{r7, lr}
 8048dfe:	b084      	sub	sp, #16
 8048e00:	af00      	add	r7, sp, #0
 8048e02:	6078      	str	r0, [r7, #4]
 8048e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8048e06:	687b      	ldr	r3, [r7, #4]
 8048e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8048e0a:	68fb      	ldr	r3, [r7, #12]
 8048e0c:	2b00      	cmp	r3, #0
 8048e0e:	d10c      	bne.n	8048e2a <xQueueGenericReset+0x2e>
	__asm volatile
 8048e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048e14:	b672      	cpsid	i
 8048e16:	f383 8811 	msr	BASEPRI, r3
 8048e1a:	f3bf 8f6f 	isb	sy
 8048e1e:	f3bf 8f4f 	dsb	sy
 8048e22:	b662      	cpsie	i
 8048e24:	60bb      	str	r3, [r7, #8]
}
 8048e26:	bf00      	nop
 8048e28:	e7fe      	b.n	8048e28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8048e2a:	f002 fa87 	bl	804b33c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8048e2e:	68fb      	ldr	r3, [r7, #12]
 8048e30:	681a      	ldr	r2, [r3, #0]
 8048e32:	68fb      	ldr	r3, [r7, #12]
 8048e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048e36:	68f9      	ldr	r1, [r7, #12]
 8048e38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8048e3a:	fb01 f303 	mul.w	r3, r1, r3
 8048e3e:	441a      	add	r2, r3
 8048e40:	68fb      	ldr	r3, [r7, #12]
 8048e42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8048e44:	68fb      	ldr	r3, [r7, #12]
 8048e46:	2200      	movs	r2, #0
 8048e48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8048e4a:	68fb      	ldr	r3, [r7, #12]
 8048e4c:	681a      	ldr	r2, [r3, #0]
 8048e4e:	68fb      	ldr	r3, [r7, #12]
 8048e50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8048e52:	68fb      	ldr	r3, [r7, #12]
 8048e54:	681a      	ldr	r2, [r3, #0]
 8048e56:	68fb      	ldr	r3, [r7, #12]
 8048e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048e5a:	3b01      	subs	r3, #1
 8048e5c:	68f9      	ldr	r1, [r7, #12]
 8048e5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8048e60:	fb01 f303 	mul.w	r3, r1, r3
 8048e64:	441a      	add	r2, r3
 8048e66:	68fb      	ldr	r3, [r7, #12]
 8048e68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8048e6a:	68fb      	ldr	r3, [r7, #12]
 8048e6c:	22ff      	movs	r2, #255	; 0xff
 8048e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8048e72:	68fb      	ldr	r3, [r7, #12]
 8048e74:	22ff      	movs	r2, #255	; 0xff
 8048e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8048e7a:	683b      	ldr	r3, [r7, #0]
 8048e7c:	2b00      	cmp	r3, #0
 8048e7e:	d114      	bne.n	8048eaa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8048e80:	68fb      	ldr	r3, [r7, #12]
 8048e82:	691b      	ldr	r3, [r3, #16]
 8048e84:	2b00      	cmp	r3, #0
 8048e86:	d01a      	beq.n	8048ebe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8048e88:	68fb      	ldr	r3, [r7, #12]
 8048e8a:	3310      	adds	r3, #16
 8048e8c:	4618      	mov	r0, r3
 8048e8e:	f001 fd41 	bl	804a914 <xTaskRemoveFromEventList>
 8048e92:	4603      	mov	r3, r0
 8048e94:	2b00      	cmp	r3, #0
 8048e96:	d012      	beq.n	8048ebe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8048e98:	4b0c      	ldr	r3, [pc, #48]	; (8048ecc <xQueueGenericReset+0xd0>)
 8048e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8048e9e:	601a      	str	r2, [r3, #0]
 8048ea0:	f3bf 8f4f 	dsb	sy
 8048ea4:	f3bf 8f6f 	isb	sy
 8048ea8:	e009      	b.n	8048ebe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8048eaa:	68fb      	ldr	r3, [r7, #12]
 8048eac:	3310      	adds	r3, #16
 8048eae:	4618      	mov	r0, r3
 8048eb0:	f7ff feef 	bl	8048c92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8048eb4:	68fb      	ldr	r3, [r7, #12]
 8048eb6:	3324      	adds	r3, #36	; 0x24
 8048eb8:	4618      	mov	r0, r3
 8048eba:	f7ff feea 	bl	8048c92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8048ebe:	f002 fa71 	bl	804b3a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8048ec2:	2301      	movs	r3, #1
}
 8048ec4:	4618      	mov	r0, r3
 8048ec6:	3710      	adds	r7, #16
 8048ec8:	46bd      	mov	sp, r7
 8048eca:	bd80      	pop	{r7, pc}
 8048ecc:	e000ed04 	.word	0xe000ed04

08048ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8048ed0:	b580      	push	{r7, lr}
 8048ed2:	b08e      	sub	sp, #56	; 0x38
 8048ed4:	af02      	add	r7, sp, #8
 8048ed6:	60f8      	str	r0, [r7, #12]
 8048ed8:	60b9      	str	r1, [r7, #8]
 8048eda:	607a      	str	r2, [r7, #4]
 8048edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8048ede:	68fb      	ldr	r3, [r7, #12]
 8048ee0:	2b00      	cmp	r3, #0
 8048ee2:	d10c      	bne.n	8048efe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8048ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048ee8:	b672      	cpsid	i
 8048eea:	f383 8811 	msr	BASEPRI, r3
 8048eee:	f3bf 8f6f 	isb	sy
 8048ef2:	f3bf 8f4f 	dsb	sy
 8048ef6:	b662      	cpsie	i
 8048ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8048efa:	bf00      	nop
 8048efc:	e7fe      	b.n	8048efc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8048efe:	683b      	ldr	r3, [r7, #0]
 8048f00:	2b00      	cmp	r3, #0
 8048f02:	d10c      	bne.n	8048f1e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8048f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048f08:	b672      	cpsid	i
 8048f0a:	f383 8811 	msr	BASEPRI, r3
 8048f0e:	f3bf 8f6f 	isb	sy
 8048f12:	f3bf 8f4f 	dsb	sy
 8048f16:	b662      	cpsie	i
 8048f18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8048f1a:	bf00      	nop
 8048f1c:	e7fe      	b.n	8048f1c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8048f1e:	687b      	ldr	r3, [r7, #4]
 8048f20:	2b00      	cmp	r3, #0
 8048f22:	d002      	beq.n	8048f2a <xQueueGenericCreateStatic+0x5a>
 8048f24:	68bb      	ldr	r3, [r7, #8]
 8048f26:	2b00      	cmp	r3, #0
 8048f28:	d001      	beq.n	8048f2e <xQueueGenericCreateStatic+0x5e>
 8048f2a:	2301      	movs	r3, #1
 8048f2c:	e000      	b.n	8048f30 <xQueueGenericCreateStatic+0x60>
 8048f2e:	2300      	movs	r3, #0
 8048f30:	2b00      	cmp	r3, #0
 8048f32:	d10c      	bne.n	8048f4e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8048f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048f38:	b672      	cpsid	i
 8048f3a:	f383 8811 	msr	BASEPRI, r3
 8048f3e:	f3bf 8f6f 	isb	sy
 8048f42:	f3bf 8f4f 	dsb	sy
 8048f46:	b662      	cpsie	i
 8048f48:	623b      	str	r3, [r7, #32]
}
 8048f4a:	bf00      	nop
 8048f4c:	e7fe      	b.n	8048f4c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8048f4e:	687b      	ldr	r3, [r7, #4]
 8048f50:	2b00      	cmp	r3, #0
 8048f52:	d102      	bne.n	8048f5a <xQueueGenericCreateStatic+0x8a>
 8048f54:	68bb      	ldr	r3, [r7, #8]
 8048f56:	2b00      	cmp	r3, #0
 8048f58:	d101      	bne.n	8048f5e <xQueueGenericCreateStatic+0x8e>
 8048f5a:	2301      	movs	r3, #1
 8048f5c:	e000      	b.n	8048f60 <xQueueGenericCreateStatic+0x90>
 8048f5e:	2300      	movs	r3, #0
 8048f60:	2b00      	cmp	r3, #0
 8048f62:	d10c      	bne.n	8048f7e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8048f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048f68:	b672      	cpsid	i
 8048f6a:	f383 8811 	msr	BASEPRI, r3
 8048f6e:	f3bf 8f6f 	isb	sy
 8048f72:	f3bf 8f4f 	dsb	sy
 8048f76:	b662      	cpsie	i
 8048f78:	61fb      	str	r3, [r7, #28]
}
 8048f7a:	bf00      	nop
 8048f7c:	e7fe      	b.n	8048f7c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8048f7e:	2348      	movs	r3, #72	; 0x48
 8048f80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8048f82:	697b      	ldr	r3, [r7, #20]
 8048f84:	2b48      	cmp	r3, #72	; 0x48
 8048f86:	d00c      	beq.n	8048fa2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8048f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048f8c:	b672      	cpsid	i
 8048f8e:	f383 8811 	msr	BASEPRI, r3
 8048f92:	f3bf 8f6f 	isb	sy
 8048f96:	f3bf 8f4f 	dsb	sy
 8048f9a:	b662      	cpsie	i
 8048f9c:	61bb      	str	r3, [r7, #24]
}
 8048f9e:	bf00      	nop
 8048fa0:	e7fe      	b.n	8048fa0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8048fa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8048fa4:	683b      	ldr	r3, [r7, #0]
 8048fa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8048fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048faa:	2b00      	cmp	r3, #0
 8048fac:	d00d      	beq.n	8048fca <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8048fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048fb0:	2201      	movs	r2, #1
 8048fb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8048fb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8048fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048fbc:	9300      	str	r3, [sp, #0]
 8048fbe:	4613      	mov	r3, r2
 8048fc0:	687a      	ldr	r2, [r7, #4]
 8048fc2:	68b9      	ldr	r1, [r7, #8]
 8048fc4:	68f8      	ldr	r0, [r7, #12]
 8048fc6:	f000 f847 	bl	8049058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8048fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8048fcc:	4618      	mov	r0, r3
 8048fce:	3730      	adds	r7, #48	; 0x30
 8048fd0:	46bd      	mov	sp, r7
 8048fd2:	bd80      	pop	{r7, pc}

08048fd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8048fd4:	b580      	push	{r7, lr}
 8048fd6:	b08a      	sub	sp, #40	; 0x28
 8048fd8:	af02      	add	r7, sp, #8
 8048fda:	60f8      	str	r0, [r7, #12]
 8048fdc:	60b9      	str	r1, [r7, #8]
 8048fde:	4613      	mov	r3, r2
 8048fe0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8048fe2:	68fb      	ldr	r3, [r7, #12]
 8048fe4:	2b00      	cmp	r3, #0
 8048fe6:	d10c      	bne.n	8049002 <xQueueGenericCreate+0x2e>
	__asm volatile
 8048fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8048fec:	b672      	cpsid	i
 8048fee:	f383 8811 	msr	BASEPRI, r3
 8048ff2:	f3bf 8f6f 	isb	sy
 8048ff6:	f3bf 8f4f 	dsb	sy
 8048ffa:	b662      	cpsie	i
 8048ffc:	613b      	str	r3, [r7, #16]
}
 8048ffe:	bf00      	nop
 8049000:	e7fe      	b.n	8049000 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8049002:	68bb      	ldr	r3, [r7, #8]
 8049004:	2b00      	cmp	r3, #0
 8049006:	d102      	bne.n	804900e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8049008:	2300      	movs	r3, #0
 804900a:	61fb      	str	r3, [r7, #28]
 804900c:	e004      	b.n	8049018 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804900e:	68fb      	ldr	r3, [r7, #12]
 8049010:	68ba      	ldr	r2, [r7, #8]
 8049012:	fb02 f303 	mul.w	r3, r2, r3
 8049016:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8049018:	69fb      	ldr	r3, [r7, #28]
 804901a:	3348      	adds	r3, #72	; 0x48
 804901c:	4618      	mov	r0, r3
 804901e:	f7f7 fc40 	bl	80408a2 <pvPortMalloc>
 8049022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8049024:	69bb      	ldr	r3, [r7, #24]
 8049026:	2b00      	cmp	r3, #0
 8049028:	d011      	beq.n	804904e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 804902a:	69bb      	ldr	r3, [r7, #24]
 804902c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 804902e:	697b      	ldr	r3, [r7, #20]
 8049030:	3348      	adds	r3, #72	; 0x48
 8049032:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8049034:	69bb      	ldr	r3, [r7, #24]
 8049036:	2200      	movs	r2, #0
 8049038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 804903c:	79fa      	ldrb	r2, [r7, #7]
 804903e:	69bb      	ldr	r3, [r7, #24]
 8049040:	9300      	str	r3, [sp, #0]
 8049042:	4613      	mov	r3, r2
 8049044:	697a      	ldr	r2, [r7, #20]
 8049046:	68b9      	ldr	r1, [r7, #8]
 8049048:	68f8      	ldr	r0, [r7, #12]
 804904a:	f000 f805 	bl	8049058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 804904e:	69bb      	ldr	r3, [r7, #24]
	}
 8049050:	4618      	mov	r0, r3
 8049052:	3720      	adds	r7, #32
 8049054:	46bd      	mov	sp, r7
 8049056:	bd80      	pop	{r7, pc}

08049058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8049058:	b580      	push	{r7, lr}
 804905a:	b084      	sub	sp, #16
 804905c:	af00      	add	r7, sp, #0
 804905e:	60f8      	str	r0, [r7, #12]
 8049060:	60b9      	str	r1, [r7, #8]
 8049062:	607a      	str	r2, [r7, #4]
 8049064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8049066:	68bb      	ldr	r3, [r7, #8]
 8049068:	2b00      	cmp	r3, #0
 804906a:	d103      	bne.n	8049074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 804906c:	69bb      	ldr	r3, [r7, #24]
 804906e:	69ba      	ldr	r2, [r7, #24]
 8049070:	601a      	str	r2, [r3, #0]
 8049072:	e002      	b.n	804907a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8049074:	69bb      	ldr	r3, [r7, #24]
 8049076:	687a      	ldr	r2, [r7, #4]
 8049078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 804907a:	69bb      	ldr	r3, [r7, #24]
 804907c:	68fa      	ldr	r2, [r7, #12]
 804907e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8049080:	69bb      	ldr	r3, [r7, #24]
 8049082:	68ba      	ldr	r2, [r7, #8]
 8049084:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8049086:	2101      	movs	r1, #1
 8049088:	69b8      	ldr	r0, [r7, #24]
 804908a:	f7ff feb7 	bl	8048dfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 804908e:	bf00      	nop
 8049090:	3710      	adds	r7, #16
 8049092:	46bd      	mov	sp, r7
 8049094:	bd80      	pop	{r7, pc}

08049096 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8049096:	b580      	push	{r7, lr}
 8049098:	b082      	sub	sp, #8
 804909a:	af00      	add	r7, sp, #0
 804909c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 804909e:	687b      	ldr	r3, [r7, #4]
 80490a0:	2b00      	cmp	r3, #0
 80490a2:	d00e      	beq.n	80490c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80490a4:	687b      	ldr	r3, [r7, #4]
 80490a6:	2200      	movs	r2, #0
 80490a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80490aa:	687b      	ldr	r3, [r7, #4]
 80490ac:	2200      	movs	r2, #0
 80490ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80490b0:	687b      	ldr	r3, [r7, #4]
 80490b2:	2200      	movs	r2, #0
 80490b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80490b6:	2300      	movs	r3, #0
 80490b8:	2200      	movs	r2, #0
 80490ba:	2100      	movs	r1, #0
 80490bc:	6878      	ldr	r0, [r7, #4]
 80490be:	f000 f837 	bl	8049130 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80490c2:	bf00      	nop
 80490c4:	3708      	adds	r7, #8
 80490c6:	46bd      	mov	sp, r7
 80490c8:	bd80      	pop	{r7, pc}

080490ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80490ca:	b580      	push	{r7, lr}
 80490cc:	b086      	sub	sp, #24
 80490ce:	af00      	add	r7, sp, #0
 80490d0:	4603      	mov	r3, r0
 80490d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80490d4:	2301      	movs	r3, #1
 80490d6:	617b      	str	r3, [r7, #20]
 80490d8:	2300      	movs	r3, #0
 80490da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80490dc:	79fb      	ldrb	r3, [r7, #7]
 80490de:	461a      	mov	r2, r3
 80490e0:	6939      	ldr	r1, [r7, #16]
 80490e2:	6978      	ldr	r0, [r7, #20]
 80490e4:	f7ff ff76 	bl	8048fd4 <xQueueGenericCreate>
 80490e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80490ea:	68f8      	ldr	r0, [r7, #12]
 80490ec:	f7ff ffd3 	bl	8049096 <prvInitialiseMutex>

		return xNewQueue;
 80490f0:	68fb      	ldr	r3, [r7, #12]
	}
 80490f2:	4618      	mov	r0, r3
 80490f4:	3718      	adds	r7, #24
 80490f6:	46bd      	mov	sp, r7
 80490f8:	bd80      	pop	{r7, pc}

080490fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80490fa:	b580      	push	{r7, lr}
 80490fc:	b088      	sub	sp, #32
 80490fe:	af02      	add	r7, sp, #8
 8049100:	4603      	mov	r3, r0
 8049102:	6039      	str	r1, [r7, #0]
 8049104:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8049106:	2301      	movs	r3, #1
 8049108:	617b      	str	r3, [r7, #20]
 804910a:	2300      	movs	r3, #0
 804910c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 804910e:	79fb      	ldrb	r3, [r7, #7]
 8049110:	9300      	str	r3, [sp, #0]
 8049112:	683b      	ldr	r3, [r7, #0]
 8049114:	2200      	movs	r2, #0
 8049116:	6939      	ldr	r1, [r7, #16]
 8049118:	6978      	ldr	r0, [r7, #20]
 804911a:	f7ff fed9 	bl	8048ed0 <xQueueGenericCreateStatic>
 804911e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8049120:	68f8      	ldr	r0, [r7, #12]
 8049122:	f7ff ffb8 	bl	8049096 <prvInitialiseMutex>

		return xNewQueue;
 8049126:	68fb      	ldr	r3, [r7, #12]
	}
 8049128:	4618      	mov	r0, r3
 804912a:	3718      	adds	r7, #24
 804912c:	46bd      	mov	sp, r7
 804912e:	bd80      	pop	{r7, pc}

08049130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8049130:	b580      	push	{r7, lr}
 8049132:	b08e      	sub	sp, #56	; 0x38
 8049134:	af00      	add	r7, sp, #0
 8049136:	60f8      	str	r0, [r7, #12]
 8049138:	60b9      	str	r1, [r7, #8]
 804913a:	607a      	str	r2, [r7, #4]
 804913c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 804913e:	2300      	movs	r3, #0
 8049140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8049142:	68fb      	ldr	r3, [r7, #12]
 8049144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8049146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049148:	2b00      	cmp	r3, #0
 804914a:	d10c      	bne.n	8049166 <xQueueGenericSend+0x36>
	__asm volatile
 804914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049150:	b672      	cpsid	i
 8049152:	f383 8811 	msr	BASEPRI, r3
 8049156:	f3bf 8f6f 	isb	sy
 804915a:	f3bf 8f4f 	dsb	sy
 804915e:	b662      	cpsie	i
 8049160:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8049162:	bf00      	nop
 8049164:	e7fe      	b.n	8049164 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8049166:	68bb      	ldr	r3, [r7, #8]
 8049168:	2b00      	cmp	r3, #0
 804916a:	d103      	bne.n	8049174 <xQueueGenericSend+0x44>
 804916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049170:	2b00      	cmp	r3, #0
 8049172:	d101      	bne.n	8049178 <xQueueGenericSend+0x48>
 8049174:	2301      	movs	r3, #1
 8049176:	e000      	b.n	804917a <xQueueGenericSend+0x4a>
 8049178:	2300      	movs	r3, #0
 804917a:	2b00      	cmp	r3, #0
 804917c:	d10c      	bne.n	8049198 <xQueueGenericSend+0x68>
	__asm volatile
 804917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049182:	b672      	cpsid	i
 8049184:	f383 8811 	msr	BASEPRI, r3
 8049188:	f3bf 8f6f 	isb	sy
 804918c:	f3bf 8f4f 	dsb	sy
 8049190:	b662      	cpsie	i
 8049192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8049194:	bf00      	nop
 8049196:	e7fe      	b.n	8049196 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8049198:	683b      	ldr	r3, [r7, #0]
 804919a:	2b02      	cmp	r3, #2
 804919c:	d103      	bne.n	80491a6 <xQueueGenericSend+0x76>
 804919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80491a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80491a2:	2b01      	cmp	r3, #1
 80491a4:	d101      	bne.n	80491aa <xQueueGenericSend+0x7a>
 80491a6:	2301      	movs	r3, #1
 80491a8:	e000      	b.n	80491ac <xQueueGenericSend+0x7c>
 80491aa:	2300      	movs	r3, #0
 80491ac:	2b00      	cmp	r3, #0
 80491ae:	d10c      	bne.n	80491ca <xQueueGenericSend+0x9a>
	__asm volatile
 80491b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80491b4:	b672      	cpsid	i
 80491b6:	f383 8811 	msr	BASEPRI, r3
 80491ba:	f3bf 8f6f 	isb	sy
 80491be:	f3bf 8f4f 	dsb	sy
 80491c2:	b662      	cpsie	i
 80491c4:	623b      	str	r3, [r7, #32]
}
 80491c6:	bf00      	nop
 80491c8:	e7fe      	b.n	80491c8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80491ca:	f001 fd6b 	bl	804aca4 <xTaskGetSchedulerState>
 80491ce:	4603      	mov	r3, r0
 80491d0:	2b00      	cmp	r3, #0
 80491d2:	d102      	bne.n	80491da <xQueueGenericSend+0xaa>
 80491d4:	687b      	ldr	r3, [r7, #4]
 80491d6:	2b00      	cmp	r3, #0
 80491d8:	d101      	bne.n	80491de <xQueueGenericSend+0xae>
 80491da:	2301      	movs	r3, #1
 80491dc:	e000      	b.n	80491e0 <xQueueGenericSend+0xb0>
 80491de:	2300      	movs	r3, #0
 80491e0:	2b00      	cmp	r3, #0
 80491e2:	d10c      	bne.n	80491fe <xQueueGenericSend+0xce>
	__asm volatile
 80491e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80491e8:	b672      	cpsid	i
 80491ea:	f383 8811 	msr	BASEPRI, r3
 80491ee:	f3bf 8f6f 	isb	sy
 80491f2:	f3bf 8f4f 	dsb	sy
 80491f6:	b662      	cpsie	i
 80491f8:	61fb      	str	r3, [r7, #28]
}
 80491fa:	bf00      	nop
 80491fc:	e7fe      	b.n	80491fc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80491fe:	f002 f89d 	bl	804b33c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8049202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8049206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804920a:	429a      	cmp	r2, r3
 804920c:	d302      	bcc.n	8049214 <xQueueGenericSend+0xe4>
 804920e:	683b      	ldr	r3, [r7, #0]
 8049210:	2b02      	cmp	r3, #2
 8049212:	d129      	bne.n	8049268 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8049214:	683a      	ldr	r2, [r7, #0]
 8049216:	68b9      	ldr	r1, [r7, #8]
 8049218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 804921a:	f000 fcc2 	bl	8049ba2 <prvCopyDataToQueue>
 804921e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8049220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049224:	2b00      	cmp	r3, #0
 8049226:	d010      	beq.n	804924a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8049228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804922a:	3324      	adds	r3, #36	; 0x24
 804922c:	4618      	mov	r0, r3
 804922e:	f001 fb71 	bl	804a914 <xTaskRemoveFromEventList>
 8049232:	4603      	mov	r3, r0
 8049234:	2b00      	cmp	r3, #0
 8049236:	d013      	beq.n	8049260 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8049238:	4b3f      	ldr	r3, [pc, #252]	; (8049338 <xQueueGenericSend+0x208>)
 804923a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804923e:	601a      	str	r2, [r3, #0]
 8049240:	f3bf 8f4f 	dsb	sy
 8049244:	f3bf 8f6f 	isb	sy
 8049248:	e00a      	b.n	8049260 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 804924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804924c:	2b00      	cmp	r3, #0
 804924e:	d007      	beq.n	8049260 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8049250:	4b39      	ldr	r3, [pc, #228]	; (8049338 <xQueueGenericSend+0x208>)
 8049252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8049256:	601a      	str	r2, [r3, #0]
 8049258:	f3bf 8f4f 	dsb	sy
 804925c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8049260:	f002 f8a0 	bl	804b3a4 <vPortExitCritical>
				return pdPASS;
 8049264:	2301      	movs	r3, #1
 8049266:	e063      	b.n	8049330 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8049268:	687b      	ldr	r3, [r7, #4]
 804926a:	2b00      	cmp	r3, #0
 804926c:	d103      	bne.n	8049276 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 804926e:	f002 f899 	bl	804b3a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8049272:	2300      	movs	r3, #0
 8049274:	e05c      	b.n	8049330 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8049276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8049278:	2b00      	cmp	r3, #0
 804927a:	d106      	bne.n	804928a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 804927c:	f107 0314 	add.w	r3, r7, #20
 8049280:	4618      	mov	r0, r3
 8049282:	f001 fbab 	bl	804a9dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8049286:	2301      	movs	r3, #1
 8049288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 804928a:	f002 f88b 	bl	804b3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 804928e:	f001 f92f 	bl	804a4f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8049292:	f002 f853 	bl	804b33c <vPortEnterCritical>
 8049296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 804929c:	b25b      	sxtb	r3, r3
 804929e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80492a2:	d103      	bne.n	80492ac <xQueueGenericSend+0x17c>
 80492a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80492a6:	2200      	movs	r2, #0
 80492a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80492ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80492ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80492b2:	b25b      	sxtb	r3, r3
 80492b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80492b8:	d103      	bne.n	80492c2 <xQueueGenericSend+0x192>
 80492ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80492bc:	2200      	movs	r2, #0
 80492be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80492c2:	f002 f86f 	bl	804b3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80492c6:	1d3a      	adds	r2, r7, #4
 80492c8:	f107 0314 	add.w	r3, r7, #20
 80492cc:	4611      	mov	r1, r2
 80492ce:	4618      	mov	r0, r3
 80492d0:	f001 fb9a 	bl	804aa08 <xTaskCheckForTimeOut>
 80492d4:	4603      	mov	r3, r0
 80492d6:	2b00      	cmp	r3, #0
 80492d8:	d124      	bne.n	8049324 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80492da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80492dc:	f000 fd59 	bl	8049d92 <prvIsQueueFull>
 80492e0:	4603      	mov	r3, r0
 80492e2:	2b00      	cmp	r3, #0
 80492e4:	d018      	beq.n	8049318 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80492e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80492e8:	3310      	adds	r3, #16
 80492ea:	687a      	ldr	r2, [r7, #4]
 80492ec:	4611      	mov	r1, r2
 80492ee:	4618      	mov	r0, r3
 80492f0:	f001 faea 	bl	804a8c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80492f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80492f6:	f000 fce4 	bl	8049cc2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80492fa:	f001 f907 	bl	804a50c <xTaskResumeAll>
 80492fe:	4603      	mov	r3, r0
 8049300:	2b00      	cmp	r3, #0
 8049302:	f47f af7c 	bne.w	80491fe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8049306:	4b0c      	ldr	r3, [pc, #48]	; (8049338 <xQueueGenericSend+0x208>)
 8049308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804930c:	601a      	str	r2, [r3, #0]
 804930e:	f3bf 8f4f 	dsb	sy
 8049312:	f3bf 8f6f 	isb	sy
 8049316:	e772      	b.n	80491fe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8049318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 804931a:	f000 fcd2 	bl	8049cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 804931e:	f001 f8f5 	bl	804a50c <xTaskResumeAll>
 8049322:	e76c      	b.n	80491fe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8049324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8049326:	f000 fccc 	bl	8049cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 804932a:	f001 f8ef 	bl	804a50c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 804932e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8049330:	4618      	mov	r0, r3
 8049332:	3738      	adds	r7, #56	; 0x38
 8049334:	46bd      	mov	sp, r7
 8049336:	bd80      	pop	{r7, pc}
 8049338:	e000ed04 	.word	0xe000ed04

0804933c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 804933c:	b580      	push	{r7, lr}
 804933e:	b08e      	sub	sp, #56	; 0x38
 8049340:	af00      	add	r7, sp, #0
 8049342:	60f8      	str	r0, [r7, #12]
 8049344:	60b9      	str	r1, [r7, #8]
 8049346:	607a      	str	r2, [r7, #4]
 8049348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 804934a:	68fb      	ldr	r3, [r7, #12]
 804934c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 804934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049350:	2b00      	cmp	r3, #0
 8049352:	d10c      	bne.n	804936e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8049354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049358:	b672      	cpsid	i
 804935a:	f383 8811 	msr	BASEPRI, r3
 804935e:	f3bf 8f6f 	isb	sy
 8049362:	f3bf 8f4f 	dsb	sy
 8049366:	b662      	cpsie	i
 8049368:	627b      	str	r3, [r7, #36]	; 0x24
}
 804936a:	bf00      	nop
 804936c:	e7fe      	b.n	804936c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 804936e:	68bb      	ldr	r3, [r7, #8]
 8049370:	2b00      	cmp	r3, #0
 8049372:	d103      	bne.n	804937c <xQueueGenericSendFromISR+0x40>
 8049374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049378:	2b00      	cmp	r3, #0
 804937a:	d101      	bne.n	8049380 <xQueueGenericSendFromISR+0x44>
 804937c:	2301      	movs	r3, #1
 804937e:	e000      	b.n	8049382 <xQueueGenericSendFromISR+0x46>
 8049380:	2300      	movs	r3, #0
 8049382:	2b00      	cmp	r3, #0
 8049384:	d10c      	bne.n	80493a0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8049386:	f04f 0350 	mov.w	r3, #80	; 0x50
 804938a:	b672      	cpsid	i
 804938c:	f383 8811 	msr	BASEPRI, r3
 8049390:	f3bf 8f6f 	isb	sy
 8049394:	f3bf 8f4f 	dsb	sy
 8049398:	b662      	cpsie	i
 804939a:	623b      	str	r3, [r7, #32]
}
 804939c:	bf00      	nop
 804939e:	e7fe      	b.n	804939e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80493a0:	683b      	ldr	r3, [r7, #0]
 80493a2:	2b02      	cmp	r3, #2
 80493a4:	d103      	bne.n	80493ae <xQueueGenericSendFromISR+0x72>
 80493a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80493a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80493aa:	2b01      	cmp	r3, #1
 80493ac:	d101      	bne.n	80493b2 <xQueueGenericSendFromISR+0x76>
 80493ae:	2301      	movs	r3, #1
 80493b0:	e000      	b.n	80493b4 <xQueueGenericSendFromISR+0x78>
 80493b2:	2300      	movs	r3, #0
 80493b4:	2b00      	cmp	r3, #0
 80493b6:	d10c      	bne.n	80493d2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80493b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80493bc:	b672      	cpsid	i
 80493be:	f383 8811 	msr	BASEPRI, r3
 80493c2:	f3bf 8f6f 	isb	sy
 80493c6:	f3bf 8f4f 	dsb	sy
 80493ca:	b662      	cpsie	i
 80493cc:	61fb      	str	r3, [r7, #28]
}
 80493ce:	bf00      	nop
 80493d0:	e7fe      	b.n	80493d0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80493d2:	f002 f89b 	bl	804b50c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80493d6:	f3ef 8211 	mrs	r2, BASEPRI
 80493da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80493de:	b672      	cpsid	i
 80493e0:	f383 8811 	msr	BASEPRI, r3
 80493e4:	f3bf 8f6f 	isb	sy
 80493e8:	f3bf 8f4f 	dsb	sy
 80493ec:	b662      	cpsie	i
 80493ee:	61ba      	str	r2, [r7, #24]
 80493f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80493f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80493f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80493f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80493f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80493fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80493fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80493fe:	429a      	cmp	r2, r3
 8049400:	d302      	bcc.n	8049408 <xQueueGenericSendFromISR+0xcc>
 8049402:	683b      	ldr	r3, [r7, #0]
 8049404:	2b02      	cmp	r3, #2
 8049406:	d12c      	bne.n	8049462 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8049408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804940a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 804940e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8049412:	683a      	ldr	r2, [r7, #0]
 8049414:	68b9      	ldr	r1, [r7, #8]
 8049416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8049418:	f000 fbc3 	bl	8049ba2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 804941c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8049420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8049424:	d112      	bne.n	804944c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8049426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804942a:	2b00      	cmp	r3, #0
 804942c:	d016      	beq.n	804945c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 804942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049430:	3324      	adds	r3, #36	; 0x24
 8049432:	4618      	mov	r0, r3
 8049434:	f001 fa6e 	bl	804a914 <xTaskRemoveFromEventList>
 8049438:	4603      	mov	r3, r0
 804943a:	2b00      	cmp	r3, #0
 804943c:	d00e      	beq.n	804945c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 804943e:	687b      	ldr	r3, [r7, #4]
 8049440:	2b00      	cmp	r3, #0
 8049442:	d00b      	beq.n	804945c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8049444:	687b      	ldr	r3, [r7, #4]
 8049446:	2201      	movs	r2, #1
 8049448:	601a      	str	r2, [r3, #0]
 804944a:	e007      	b.n	804945c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 804944c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8049450:	3301      	adds	r3, #1
 8049452:	b2db      	uxtb	r3, r3
 8049454:	b25a      	sxtb	r2, r3
 8049456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 804945c:	2301      	movs	r3, #1
 804945e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8049460:	e001      	b.n	8049466 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8049462:	2300      	movs	r3, #0
 8049464:	637b      	str	r3, [r7, #52]	; 0x34
 8049466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049468:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 804946a:	693b      	ldr	r3, [r7, #16]
 804946c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8049470:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8049472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8049474:	4618      	mov	r0, r3
 8049476:	3738      	adds	r7, #56	; 0x38
 8049478:	46bd      	mov	sp, r7
 804947a:	bd80      	pop	{r7, pc}

0804947c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 804947c:	b580      	push	{r7, lr}
 804947e:	b08e      	sub	sp, #56	; 0x38
 8049480:	af00      	add	r7, sp, #0
 8049482:	6078      	str	r0, [r7, #4]
 8049484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8049486:	687b      	ldr	r3, [r7, #4]
 8049488:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 804948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804948c:	2b00      	cmp	r3, #0
 804948e:	d10c      	bne.n	80494aa <xQueueGiveFromISR+0x2e>
	__asm volatile
 8049490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049494:	b672      	cpsid	i
 8049496:	f383 8811 	msr	BASEPRI, r3
 804949a:	f3bf 8f6f 	isb	sy
 804949e:	f3bf 8f4f 	dsb	sy
 80494a2:	b662      	cpsie	i
 80494a4:	623b      	str	r3, [r7, #32]
}
 80494a6:	bf00      	nop
 80494a8:	e7fe      	b.n	80494a8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80494aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80494ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80494ae:	2b00      	cmp	r3, #0
 80494b0:	d00c      	beq.n	80494cc <xQueueGiveFromISR+0x50>
	__asm volatile
 80494b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80494b6:	b672      	cpsid	i
 80494b8:	f383 8811 	msr	BASEPRI, r3
 80494bc:	f3bf 8f6f 	isb	sy
 80494c0:	f3bf 8f4f 	dsb	sy
 80494c4:	b662      	cpsie	i
 80494c6:	61fb      	str	r3, [r7, #28]
}
 80494c8:	bf00      	nop
 80494ca:	e7fe      	b.n	80494ca <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80494cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80494ce:	681b      	ldr	r3, [r3, #0]
 80494d0:	2b00      	cmp	r3, #0
 80494d2:	d103      	bne.n	80494dc <xQueueGiveFromISR+0x60>
 80494d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80494d6:	689b      	ldr	r3, [r3, #8]
 80494d8:	2b00      	cmp	r3, #0
 80494da:	d101      	bne.n	80494e0 <xQueueGiveFromISR+0x64>
 80494dc:	2301      	movs	r3, #1
 80494de:	e000      	b.n	80494e2 <xQueueGiveFromISR+0x66>
 80494e0:	2300      	movs	r3, #0
 80494e2:	2b00      	cmp	r3, #0
 80494e4:	d10c      	bne.n	8049500 <xQueueGiveFromISR+0x84>
	__asm volatile
 80494e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80494ea:	b672      	cpsid	i
 80494ec:	f383 8811 	msr	BASEPRI, r3
 80494f0:	f3bf 8f6f 	isb	sy
 80494f4:	f3bf 8f4f 	dsb	sy
 80494f8:	b662      	cpsie	i
 80494fa:	61bb      	str	r3, [r7, #24]
}
 80494fc:	bf00      	nop
 80494fe:	e7fe      	b.n	80494fe <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8049500:	f002 f804 	bl	804b50c <vPortValidateInterruptPriority>
	__asm volatile
 8049504:	f3ef 8211 	mrs	r2, BASEPRI
 8049508:	f04f 0350 	mov.w	r3, #80	; 0x50
 804950c:	b672      	cpsid	i
 804950e:	f383 8811 	msr	BASEPRI, r3
 8049512:	f3bf 8f6f 	isb	sy
 8049516:	f3bf 8f4f 	dsb	sy
 804951a:	b662      	cpsie	i
 804951c:	617a      	str	r2, [r7, #20]
 804951e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8049520:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8049522:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8049524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049528:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 804952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804952c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804952e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8049530:	429a      	cmp	r2, r3
 8049532:	d22b      	bcs.n	804958c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8049534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 804953a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 804953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049540:	1c5a      	adds	r2, r3, #1
 8049542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049544:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8049546:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 804954a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804954e:	d112      	bne.n	8049576 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8049550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049554:	2b00      	cmp	r3, #0
 8049556:	d016      	beq.n	8049586 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8049558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804955a:	3324      	adds	r3, #36	; 0x24
 804955c:	4618      	mov	r0, r3
 804955e:	f001 f9d9 	bl	804a914 <xTaskRemoveFromEventList>
 8049562:	4603      	mov	r3, r0
 8049564:	2b00      	cmp	r3, #0
 8049566:	d00e      	beq.n	8049586 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8049568:	683b      	ldr	r3, [r7, #0]
 804956a:	2b00      	cmp	r3, #0
 804956c:	d00b      	beq.n	8049586 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 804956e:	683b      	ldr	r3, [r7, #0]
 8049570:	2201      	movs	r2, #1
 8049572:	601a      	str	r2, [r3, #0]
 8049574:	e007      	b.n	8049586 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8049576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804957a:	3301      	adds	r3, #1
 804957c:	b2db      	uxtb	r3, r3
 804957e:	b25a      	sxtb	r2, r3
 8049580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8049586:	2301      	movs	r3, #1
 8049588:	637b      	str	r3, [r7, #52]	; 0x34
 804958a:	e001      	b.n	8049590 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 804958c:	2300      	movs	r3, #0
 804958e:	637b      	str	r3, [r7, #52]	; 0x34
 8049590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049592:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8049594:	68fb      	ldr	r3, [r7, #12]
 8049596:	f383 8811 	msr	BASEPRI, r3
}
 804959a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 804959c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 804959e:	4618      	mov	r0, r3
 80495a0:	3738      	adds	r7, #56	; 0x38
 80495a2:	46bd      	mov	sp, r7
 80495a4:	bd80      	pop	{r7, pc}
	...

080495a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80495a8:	b580      	push	{r7, lr}
 80495aa:	b08c      	sub	sp, #48	; 0x30
 80495ac:	af00      	add	r7, sp, #0
 80495ae:	60f8      	str	r0, [r7, #12]
 80495b0:	60b9      	str	r1, [r7, #8]
 80495b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80495b4:	2300      	movs	r3, #0
 80495b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80495b8:	68fb      	ldr	r3, [r7, #12]
 80495ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80495bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80495be:	2b00      	cmp	r3, #0
 80495c0:	d10c      	bne.n	80495dc <xQueueReceive+0x34>
	__asm volatile
 80495c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80495c6:	b672      	cpsid	i
 80495c8:	f383 8811 	msr	BASEPRI, r3
 80495cc:	f3bf 8f6f 	isb	sy
 80495d0:	f3bf 8f4f 	dsb	sy
 80495d4:	b662      	cpsie	i
 80495d6:	623b      	str	r3, [r7, #32]
}
 80495d8:	bf00      	nop
 80495da:	e7fe      	b.n	80495da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80495dc:	68bb      	ldr	r3, [r7, #8]
 80495de:	2b00      	cmp	r3, #0
 80495e0:	d103      	bne.n	80495ea <xQueueReceive+0x42>
 80495e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80495e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80495e6:	2b00      	cmp	r3, #0
 80495e8:	d101      	bne.n	80495ee <xQueueReceive+0x46>
 80495ea:	2301      	movs	r3, #1
 80495ec:	e000      	b.n	80495f0 <xQueueReceive+0x48>
 80495ee:	2300      	movs	r3, #0
 80495f0:	2b00      	cmp	r3, #0
 80495f2:	d10c      	bne.n	804960e <xQueueReceive+0x66>
	__asm volatile
 80495f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80495f8:	b672      	cpsid	i
 80495fa:	f383 8811 	msr	BASEPRI, r3
 80495fe:	f3bf 8f6f 	isb	sy
 8049602:	f3bf 8f4f 	dsb	sy
 8049606:	b662      	cpsie	i
 8049608:	61fb      	str	r3, [r7, #28]
}
 804960a:	bf00      	nop
 804960c:	e7fe      	b.n	804960c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 804960e:	f001 fb49 	bl	804aca4 <xTaskGetSchedulerState>
 8049612:	4603      	mov	r3, r0
 8049614:	2b00      	cmp	r3, #0
 8049616:	d102      	bne.n	804961e <xQueueReceive+0x76>
 8049618:	687b      	ldr	r3, [r7, #4]
 804961a:	2b00      	cmp	r3, #0
 804961c:	d101      	bne.n	8049622 <xQueueReceive+0x7a>
 804961e:	2301      	movs	r3, #1
 8049620:	e000      	b.n	8049624 <xQueueReceive+0x7c>
 8049622:	2300      	movs	r3, #0
 8049624:	2b00      	cmp	r3, #0
 8049626:	d10c      	bne.n	8049642 <xQueueReceive+0x9a>
	__asm volatile
 8049628:	f04f 0350 	mov.w	r3, #80	; 0x50
 804962c:	b672      	cpsid	i
 804962e:	f383 8811 	msr	BASEPRI, r3
 8049632:	f3bf 8f6f 	isb	sy
 8049636:	f3bf 8f4f 	dsb	sy
 804963a:	b662      	cpsie	i
 804963c:	61bb      	str	r3, [r7, #24]
}
 804963e:	bf00      	nop
 8049640:	e7fe      	b.n	8049640 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8049642:	f001 fe7b 	bl	804b33c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8049646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804964a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 804964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804964e:	2b00      	cmp	r3, #0
 8049650:	d01f      	beq.n	8049692 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8049652:	68b9      	ldr	r1, [r7, #8]
 8049654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8049656:	f000 fb0e 	bl	8049c76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 804965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804965c:	1e5a      	subs	r2, r3, #1
 804965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049660:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8049662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049664:	691b      	ldr	r3, [r3, #16]
 8049666:	2b00      	cmp	r3, #0
 8049668:	d00f      	beq.n	804968a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 804966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804966c:	3310      	adds	r3, #16
 804966e:	4618      	mov	r0, r3
 8049670:	f001 f950 	bl	804a914 <xTaskRemoveFromEventList>
 8049674:	4603      	mov	r3, r0
 8049676:	2b00      	cmp	r3, #0
 8049678:	d007      	beq.n	804968a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 804967a:	4b3d      	ldr	r3, [pc, #244]	; (8049770 <xQueueReceive+0x1c8>)
 804967c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8049680:	601a      	str	r2, [r3, #0]
 8049682:	f3bf 8f4f 	dsb	sy
 8049686:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 804968a:	f001 fe8b 	bl	804b3a4 <vPortExitCritical>
				return pdPASS;
 804968e:	2301      	movs	r3, #1
 8049690:	e069      	b.n	8049766 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8049692:	687b      	ldr	r3, [r7, #4]
 8049694:	2b00      	cmp	r3, #0
 8049696:	d103      	bne.n	80496a0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8049698:	f001 fe84 	bl	804b3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 804969c:	2300      	movs	r3, #0
 804969e:	e062      	b.n	8049766 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80496a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80496a2:	2b00      	cmp	r3, #0
 80496a4:	d106      	bne.n	80496b4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80496a6:	f107 0310 	add.w	r3, r7, #16
 80496aa:	4618      	mov	r0, r3
 80496ac:	f001 f996 	bl	804a9dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80496b0:	2301      	movs	r3, #1
 80496b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80496b4:	f001 fe76 	bl	804b3a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80496b8:	f000 ff1a 	bl	804a4f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80496bc:	f001 fe3e 	bl	804b33c <vPortEnterCritical>
 80496c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80496c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80496c6:	b25b      	sxtb	r3, r3
 80496c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80496cc:	d103      	bne.n	80496d6 <xQueueReceive+0x12e>
 80496ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80496d0:	2200      	movs	r2, #0
 80496d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80496d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80496d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80496dc:	b25b      	sxtb	r3, r3
 80496de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80496e2:	d103      	bne.n	80496ec <xQueueReceive+0x144>
 80496e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80496e6:	2200      	movs	r2, #0
 80496e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80496ec:	f001 fe5a 	bl	804b3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80496f0:	1d3a      	adds	r2, r7, #4
 80496f2:	f107 0310 	add.w	r3, r7, #16
 80496f6:	4611      	mov	r1, r2
 80496f8:	4618      	mov	r0, r3
 80496fa:	f001 f985 	bl	804aa08 <xTaskCheckForTimeOut>
 80496fe:	4603      	mov	r3, r0
 8049700:	2b00      	cmp	r3, #0
 8049702:	d123      	bne.n	804974c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8049704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8049706:	f000 fb2e 	bl	8049d66 <prvIsQueueEmpty>
 804970a:	4603      	mov	r3, r0
 804970c:	2b00      	cmp	r3, #0
 804970e:	d017      	beq.n	8049740 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8049710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049712:	3324      	adds	r3, #36	; 0x24
 8049714:	687a      	ldr	r2, [r7, #4]
 8049716:	4611      	mov	r1, r2
 8049718:	4618      	mov	r0, r3
 804971a:	f001 f8d5 	bl	804a8c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 804971e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8049720:	f000 facf 	bl	8049cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8049724:	f000 fef2 	bl	804a50c <xTaskResumeAll>
 8049728:	4603      	mov	r3, r0
 804972a:	2b00      	cmp	r3, #0
 804972c:	d189      	bne.n	8049642 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 804972e:	4b10      	ldr	r3, [pc, #64]	; (8049770 <xQueueReceive+0x1c8>)
 8049730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8049734:	601a      	str	r2, [r3, #0]
 8049736:	f3bf 8f4f 	dsb	sy
 804973a:	f3bf 8f6f 	isb	sy
 804973e:	e780      	b.n	8049642 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8049740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8049742:	f000 fabe 	bl	8049cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8049746:	f000 fee1 	bl	804a50c <xTaskResumeAll>
 804974a:	e77a      	b.n	8049642 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 804974c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804974e:	f000 fab8 	bl	8049cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8049752:	f000 fedb 	bl	804a50c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8049756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8049758:	f000 fb05 	bl	8049d66 <prvIsQueueEmpty>
 804975c:	4603      	mov	r3, r0
 804975e:	2b00      	cmp	r3, #0
 8049760:	f43f af6f 	beq.w	8049642 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8049764:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8049766:	4618      	mov	r0, r3
 8049768:	3730      	adds	r7, #48	; 0x30
 804976a:	46bd      	mov	sp, r7
 804976c:	bd80      	pop	{r7, pc}
 804976e:	bf00      	nop
 8049770:	e000ed04 	.word	0xe000ed04

08049774 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8049774:	b580      	push	{r7, lr}
 8049776:	b08e      	sub	sp, #56	; 0x38
 8049778:	af00      	add	r7, sp, #0
 804977a:	6078      	str	r0, [r7, #4]
 804977c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 804977e:	2300      	movs	r3, #0
 8049780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8049782:	687b      	ldr	r3, [r7, #4]
 8049784:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8049786:	2300      	movs	r3, #0
 8049788:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 804978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804978c:	2b00      	cmp	r3, #0
 804978e:	d10c      	bne.n	80497aa <xQueueSemaphoreTake+0x36>
	__asm volatile
 8049790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049794:	b672      	cpsid	i
 8049796:	f383 8811 	msr	BASEPRI, r3
 804979a:	f3bf 8f6f 	isb	sy
 804979e:	f3bf 8f4f 	dsb	sy
 80497a2:	b662      	cpsie	i
 80497a4:	623b      	str	r3, [r7, #32]
}
 80497a6:	bf00      	nop
 80497a8:	e7fe      	b.n	80497a8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80497aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80497ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80497ae:	2b00      	cmp	r3, #0
 80497b0:	d00c      	beq.n	80497cc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80497b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80497b6:	b672      	cpsid	i
 80497b8:	f383 8811 	msr	BASEPRI, r3
 80497bc:	f3bf 8f6f 	isb	sy
 80497c0:	f3bf 8f4f 	dsb	sy
 80497c4:	b662      	cpsie	i
 80497c6:	61fb      	str	r3, [r7, #28]
}
 80497c8:	bf00      	nop
 80497ca:	e7fe      	b.n	80497ca <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80497cc:	f001 fa6a 	bl	804aca4 <xTaskGetSchedulerState>
 80497d0:	4603      	mov	r3, r0
 80497d2:	2b00      	cmp	r3, #0
 80497d4:	d102      	bne.n	80497dc <xQueueSemaphoreTake+0x68>
 80497d6:	683b      	ldr	r3, [r7, #0]
 80497d8:	2b00      	cmp	r3, #0
 80497da:	d101      	bne.n	80497e0 <xQueueSemaphoreTake+0x6c>
 80497dc:	2301      	movs	r3, #1
 80497de:	e000      	b.n	80497e2 <xQueueSemaphoreTake+0x6e>
 80497e0:	2300      	movs	r3, #0
 80497e2:	2b00      	cmp	r3, #0
 80497e4:	d10c      	bne.n	8049800 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80497e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80497ea:	b672      	cpsid	i
 80497ec:	f383 8811 	msr	BASEPRI, r3
 80497f0:	f3bf 8f6f 	isb	sy
 80497f4:	f3bf 8f4f 	dsb	sy
 80497f8:	b662      	cpsie	i
 80497fa:	61bb      	str	r3, [r7, #24]
}
 80497fc:	bf00      	nop
 80497fe:	e7fe      	b.n	80497fe <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8049800:	f001 fd9c 	bl	804b33c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8049804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049808:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 804980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804980c:	2b00      	cmp	r3, #0
 804980e:	d024      	beq.n	804985a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8049810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049812:	1e5a      	subs	r2, r3, #1
 8049814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049816:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8049818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804981a:	681b      	ldr	r3, [r3, #0]
 804981c:	2b00      	cmp	r3, #0
 804981e:	d104      	bne.n	804982a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8049820:	f001 fc06 	bl	804b030 <pvTaskIncrementMutexHeldCount>
 8049824:	4602      	mov	r2, r0
 8049826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049828:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 804982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804982c:	691b      	ldr	r3, [r3, #16]
 804982e:	2b00      	cmp	r3, #0
 8049830:	d00f      	beq.n	8049852 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8049832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049834:	3310      	adds	r3, #16
 8049836:	4618      	mov	r0, r3
 8049838:	f001 f86c 	bl	804a914 <xTaskRemoveFromEventList>
 804983c:	4603      	mov	r3, r0
 804983e:	2b00      	cmp	r3, #0
 8049840:	d007      	beq.n	8049852 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8049842:	4b55      	ldr	r3, [pc, #340]	; (8049998 <xQueueSemaphoreTake+0x224>)
 8049844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8049848:	601a      	str	r2, [r3, #0]
 804984a:	f3bf 8f4f 	dsb	sy
 804984e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8049852:	f001 fda7 	bl	804b3a4 <vPortExitCritical>
				return pdPASS;
 8049856:	2301      	movs	r3, #1
 8049858:	e099      	b.n	804998e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 804985a:	683b      	ldr	r3, [r7, #0]
 804985c:	2b00      	cmp	r3, #0
 804985e:	d113      	bne.n	8049888 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8049860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049862:	2b00      	cmp	r3, #0
 8049864:	d00c      	beq.n	8049880 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8049866:	f04f 0350 	mov.w	r3, #80	; 0x50
 804986a:	b672      	cpsid	i
 804986c:	f383 8811 	msr	BASEPRI, r3
 8049870:	f3bf 8f6f 	isb	sy
 8049874:	f3bf 8f4f 	dsb	sy
 8049878:	b662      	cpsie	i
 804987a:	617b      	str	r3, [r7, #20]
}
 804987c:	bf00      	nop
 804987e:	e7fe      	b.n	804987e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8049880:	f001 fd90 	bl	804b3a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8049884:	2300      	movs	r3, #0
 8049886:	e082      	b.n	804998e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8049888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804988a:	2b00      	cmp	r3, #0
 804988c:	d106      	bne.n	804989c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 804988e:	f107 030c 	add.w	r3, r7, #12
 8049892:	4618      	mov	r0, r3
 8049894:	f001 f8a2 	bl	804a9dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8049898:	2301      	movs	r3, #1
 804989a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 804989c:	f001 fd82 	bl	804b3a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80498a0:	f000 fe26 	bl	804a4f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80498a4:	f001 fd4a 	bl	804b33c <vPortEnterCritical>
 80498a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80498aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80498ae:	b25b      	sxtb	r3, r3
 80498b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80498b4:	d103      	bne.n	80498be <xQueueSemaphoreTake+0x14a>
 80498b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80498b8:	2200      	movs	r2, #0
 80498ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80498be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80498c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80498c4:	b25b      	sxtb	r3, r3
 80498c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80498ca:	d103      	bne.n	80498d4 <xQueueSemaphoreTake+0x160>
 80498cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80498ce:	2200      	movs	r2, #0
 80498d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80498d4:	f001 fd66 	bl	804b3a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80498d8:	463a      	mov	r2, r7
 80498da:	f107 030c 	add.w	r3, r7, #12
 80498de:	4611      	mov	r1, r2
 80498e0:	4618      	mov	r0, r3
 80498e2:	f001 f891 	bl	804aa08 <xTaskCheckForTimeOut>
 80498e6:	4603      	mov	r3, r0
 80498e8:	2b00      	cmp	r3, #0
 80498ea:	d132      	bne.n	8049952 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80498ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80498ee:	f000 fa3a 	bl	8049d66 <prvIsQueueEmpty>
 80498f2:	4603      	mov	r3, r0
 80498f4:	2b00      	cmp	r3, #0
 80498f6:	d026      	beq.n	8049946 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80498f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80498fa:	681b      	ldr	r3, [r3, #0]
 80498fc:	2b00      	cmp	r3, #0
 80498fe:	d109      	bne.n	8049914 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8049900:	f001 fd1c 	bl	804b33c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8049904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049906:	689b      	ldr	r3, [r3, #8]
 8049908:	4618      	mov	r0, r3
 804990a:	f001 f9e9 	bl	804ace0 <xTaskPriorityInherit>
 804990e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8049910:	f001 fd48 	bl	804b3a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8049914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049916:	3324      	adds	r3, #36	; 0x24
 8049918:	683a      	ldr	r2, [r7, #0]
 804991a:	4611      	mov	r1, r2
 804991c:	4618      	mov	r0, r3
 804991e:	f000 ffd3 	bl	804a8c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8049922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8049924:	f000 f9cd 	bl	8049cc2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8049928:	f000 fdf0 	bl	804a50c <xTaskResumeAll>
 804992c:	4603      	mov	r3, r0
 804992e:	2b00      	cmp	r3, #0
 8049930:	f47f af66 	bne.w	8049800 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8049934:	4b18      	ldr	r3, [pc, #96]	; (8049998 <xQueueSemaphoreTake+0x224>)
 8049936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804993a:	601a      	str	r2, [r3, #0]
 804993c:	f3bf 8f4f 	dsb	sy
 8049940:	f3bf 8f6f 	isb	sy
 8049944:	e75c      	b.n	8049800 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8049946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8049948:	f000 f9bb 	bl	8049cc2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 804994c:	f000 fdde 	bl	804a50c <xTaskResumeAll>
 8049950:	e756      	b.n	8049800 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8049952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8049954:	f000 f9b5 	bl	8049cc2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8049958:	f000 fdd8 	bl	804a50c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 804995c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 804995e:	f000 fa02 	bl	8049d66 <prvIsQueueEmpty>
 8049962:	4603      	mov	r3, r0
 8049964:	2b00      	cmp	r3, #0
 8049966:	f43f af4b 	beq.w	8049800 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 804996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804996c:	2b00      	cmp	r3, #0
 804996e:	d00d      	beq.n	804998c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8049970:	f001 fce4 	bl	804b33c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8049974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8049976:	f000 f8fc 	bl	8049b72 <prvGetDisinheritPriorityAfterTimeout>
 804997a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 804997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804997e:	689b      	ldr	r3, [r3, #8]
 8049980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8049982:	4618      	mov	r0, r3
 8049984:	f001 fab6 	bl	804aef4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8049988:	f001 fd0c 	bl	804b3a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 804998c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 804998e:	4618      	mov	r0, r3
 8049990:	3738      	adds	r7, #56	; 0x38
 8049992:	46bd      	mov	sp, r7
 8049994:	bd80      	pop	{r7, pc}
 8049996:	bf00      	nop
 8049998:	e000ed04 	.word	0xe000ed04

0804999c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 804999c:	b580      	push	{r7, lr}
 804999e:	b08e      	sub	sp, #56	; 0x38
 80499a0:	af00      	add	r7, sp, #0
 80499a2:	60f8      	str	r0, [r7, #12]
 80499a4:	60b9      	str	r1, [r7, #8]
 80499a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80499a8:	68fb      	ldr	r3, [r7, #12]
 80499aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80499ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80499ae:	2b00      	cmp	r3, #0
 80499b0:	d10c      	bne.n	80499cc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80499b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80499b6:	b672      	cpsid	i
 80499b8:	f383 8811 	msr	BASEPRI, r3
 80499bc:	f3bf 8f6f 	isb	sy
 80499c0:	f3bf 8f4f 	dsb	sy
 80499c4:	b662      	cpsie	i
 80499c6:	623b      	str	r3, [r7, #32]
}
 80499c8:	bf00      	nop
 80499ca:	e7fe      	b.n	80499ca <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80499cc:	68bb      	ldr	r3, [r7, #8]
 80499ce:	2b00      	cmp	r3, #0
 80499d0:	d103      	bne.n	80499da <xQueueReceiveFromISR+0x3e>
 80499d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80499d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80499d6:	2b00      	cmp	r3, #0
 80499d8:	d101      	bne.n	80499de <xQueueReceiveFromISR+0x42>
 80499da:	2301      	movs	r3, #1
 80499dc:	e000      	b.n	80499e0 <xQueueReceiveFromISR+0x44>
 80499de:	2300      	movs	r3, #0
 80499e0:	2b00      	cmp	r3, #0
 80499e2:	d10c      	bne.n	80499fe <xQueueReceiveFromISR+0x62>
	__asm volatile
 80499e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80499e8:	b672      	cpsid	i
 80499ea:	f383 8811 	msr	BASEPRI, r3
 80499ee:	f3bf 8f6f 	isb	sy
 80499f2:	f3bf 8f4f 	dsb	sy
 80499f6:	b662      	cpsie	i
 80499f8:	61fb      	str	r3, [r7, #28]
}
 80499fa:	bf00      	nop
 80499fc:	e7fe      	b.n	80499fc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80499fe:	f001 fd85 	bl	804b50c <vPortValidateInterruptPriority>
	__asm volatile
 8049a02:	f3ef 8211 	mrs	r2, BASEPRI
 8049a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049a0a:	b672      	cpsid	i
 8049a0c:	f383 8811 	msr	BASEPRI, r3
 8049a10:	f3bf 8f6f 	isb	sy
 8049a14:	f3bf 8f4f 	dsb	sy
 8049a18:	b662      	cpsie	i
 8049a1a:	61ba      	str	r2, [r7, #24]
 8049a1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8049a1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8049a20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8049a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049a26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8049a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049a2a:	2b00      	cmp	r3, #0
 8049a2c:	d02f      	beq.n	8049a8e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8049a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8049a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8049a38:	68b9      	ldr	r1, [r7, #8]
 8049a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8049a3c:	f000 f91b 	bl	8049c76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8049a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049a42:	1e5a      	subs	r2, r3, #1
 8049a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049a46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8049a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8049a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8049a50:	d112      	bne.n	8049a78 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8049a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049a54:	691b      	ldr	r3, [r3, #16]
 8049a56:	2b00      	cmp	r3, #0
 8049a58:	d016      	beq.n	8049a88 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8049a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049a5c:	3310      	adds	r3, #16
 8049a5e:	4618      	mov	r0, r3
 8049a60:	f000 ff58 	bl	804a914 <xTaskRemoveFromEventList>
 8049a64:	4603      	mov	r3, r0
 8049a66:	2b00      	cmp	r3, #0
 8049a68:	d00e      	beq.n	8049a88 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8049a6a:	687b      	ldr	r3, [r7, #4]
 8049a6c:	2b00      	cmp	r3, #0
 8049a6e:	d00b      	beq.n	8049a88 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8049a70:	687b      	ldr	r3, [r7, #4]
 8049a72:	2201      	movs	r2, #1
 8049a74:	601a      	str	r2, [r3, #0]
 8049a76:	e007      	b.n	8049a88 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8049a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8049a7c:	3301      	adds	r3, #1
 8049a7e:	b2db      	uxtb	r3, r3
 8049a80:	b25a      	sxtb	r2, r3
 8049a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8049a88:	2301      	movs	r3, #1
 8049a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8049a8c:	e001      	b.n	8049a92 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8049a8e:	2300      	movs	r3, #0
 8049a90:	637b      	str	r3, [r7, #52]	; 0x34
 8049a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049a94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8049a96:	693b      	ldr	r3, [r7, #16]
 8049a98:	f383 8811 	msr	BASEPRI, r3
}
 8049a9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8049a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8049aa0:	4618      	mov	r0, r3
 8049aa2:	3738      	adds	r7, #56	; 0x38
 8049aa4:	46bd      	mov	sp, r7
 8049aa6:	bd80      	pop	{r7, pc}

08049aa8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8049aa8:	b580      	push	{r7, lr}
 8049aaa:	b084      	sub	sp, #16
 8049aac:	af00      	add	r7, sp, #0
 8049aae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8049ab0:	687b      	ldr	r3, [r7, #4]
 8049ab2:	2b00      	cmp	r3, #0
 8049ab4:	d10c      	bne.n	8049ad0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8049ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049aba:	b672      	cpsid	i
 8049abc:	f383 8811 	msr	BASEPRI, r3
 8049ac0:	f3bf 8f6f 	isb	sy
 8049ac4:	f3bf 8f4f 	dsb	sy
 8049ac8:	b662      	cpsie	i
 8049aca:	60bb      	str	r3, [r7, #8]
}
 8049acc:	bf00      	nop
 8049ace:	e7fe      	b.n	8049ace <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8049ad0:	f001 fc34 	bl	804b33c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8049ad4:	687b      	ldr	r3, [r7, #4]
 8049ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049ad8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8049ada:	f001 fc63 	bl	804b3a4 <vPortExitCritical>

	return uxReturn;
 8049ade:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8049ae0:	4618      	mov	r0, r3
 8049ae2:	3710      	adds	r7, #16
 8049ae4:	46bd      	mov	sp, r7
 8049ae6:	bd80      	pop	{r7, pc}

08049ae8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8049ae8:	b480      	push	{r7}
 8049aea:	b087      	sub	sp, #28
 8049aec:	af00      	add	r7, sp, #0
 8049aee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8049af0:	687b      	ldr	r3, [r7, #4]
 8049af2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8049af4:	697b      	ldr	r3, [r7, #20]
 8049af6:	2b00      	cmp	r3, #0
 8049af8:	d10c      	bne.n	8049b14 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8049afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049afe:	b672      	cpsid	i
 8049b00:	f383 8811 	msr	BASEPRI, r3
 8049b04:	f3bf 8f6f 	isb	sy
 8049b08:	f3bf 8f4f 	dsb	sy
 8049b0c:	b662      	cpsie	i
 8049b0e:	60fb      	str	r3, [r7, #12]
}
 8049b10:	bf00      	nop
 8049b12:	e7fe      	b.n	8049b12 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8049b14:	697b      	ldr	r3, [r7, #20]
 8049b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049b18:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8049b1a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8049b1c:	4618      	mov	r0, r3
 8049b1e:	371c      	adds	r7, #28
 8049b20:	46bd      	mov	sp, r7
 8049b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b26:	4770      	bx	lr

08049b28 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8049b28:	b580      	push	{r7, lr}
 8049b2a:	b084      	sub	sp, #16
 8049b2c:	af00      	add	r7, sp, #0
 8049b2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8049b30:	687b      	ldr	r3, [r7, #4]
 8049b32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8049b34:	68fb      	ldr	r3, [r7, #12]
 8049b36:	2b00      	cmp	r3, #0
 8049b38:	d10c      	bne.n	8049b54 <vQueueDelete+0x2c>
	__asm volatile
 8049b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049b3e:	b672      	cpsid	i
 8049b40:	f383 8811 	msr	BASEPRI, r3
 8049b44:	f3bf 8f6f 	isb	sy
 8049b48:	f3bf 8f4f 	dsb	sy
 8049b4c:	b662      	cpsie	i
 8049b4e:	60bb      	str	r3, [r7, #8]
}
 8049b50:	bf00      	nop
 8049b52:	e7fe      	b.n	8049b52 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8049b54:	68f8      	ldr	r0, [r7, #12]
 8049b56:	f000 f935 	bl	8049dc4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8049b5a:	68fb      	ldr	r3, [r7, #12]
 8049b5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8049b60:	2b00      	cmp	r3, #0
 8049b62:	d102      	bne.n	8049b6a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8049b64:	68f8      	ldr	r0, [r7, #12]
 8049b66:	f7f6 feaa 	bl	80408be <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8049b6a:	bf00      	nop
 8049b6c:	3710      	adds	r7, #16
 8049b6e:	46bd      	mov	sp, r7
 8049b70:	bd80      	pop	{r7, pc}

08049b72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8049b72:	b480      	push	{r7}
 8049b74:	b085      	sub	sp, #20
 8049b76:	af00      	add	r7, sp, #0
 8049b78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8049b7a:	687b      	ldr	r3, [r7, #4]
 8049b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049b7e:	2b00      	cmp	r3, #0
 8049b80:	d006      	beq.n	8049b90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8049b82:	687b      	ldr	r3, [r7, #4]
 8049b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8049b86:	681b      	ldr	r3, [r3, #0]
 8049b88:	f1c3 0307 	rsb	r3, r3, #7
 8049b8c:	60fb      	str	r3, [r7, #12]
 8049b8e:	e001      	b.n	8049b94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8049b90:	2300      	movs	r3, #0
 8049b92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8049b94:	68fb      	ldr	r3, [r7, #12]
	}
 8049b96:	4618      	mov	r0, r3
 8049b98:	3714      	adds	r7, #20
 8049b9a:	46bd      	mov	sp, r7
 8049b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ba0:	4770      	bx	lr

08049ba2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8049ba2:	b580      	push	{r7, lr}
 8049ba4:	b086      	sub	sp, #24
 8049ba6:	af00      	add	r7, sp, #0
 8049ba8:	60f8      	str	r0, [r7, #12]
 8049baa:	60b9      	str	r1, [r7, #8]
 8049bac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8049bae:	2300      	movs	r3, #0
 8049bb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8049bb2:	68fb      	ldr	r3, [r7, #12]
 8049bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049bb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8049bb8:	68fb      	ldr	r3, [r7, #12]
 8049bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049bbc:	2b00      	cmp	r3, #0
 8049bbe:	d10d      	bne.n	8049bdc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8049bc0:	68fb      	ldr	r3, [r7, #12]
 8049bc2:	681b      	ldr	r3, [r3, #0]
 8049bc4:	2b00      	cmp	r3, #0
 8049bc6:	d14d      	bne.n	8049c64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8049bc8:	68fb      	ldr	r3, [r7, #12]
 8049bca:	689b      	ldr	r3, [r3, #8]
 8049bcc:	4618      	mov	r0, r3
 8049bce:	f001 f907 	bl	804ade0 <xTaskPriorityDisinherit>
 8049bd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8049bd4:	68fb      	ldr	r3, [r7, #12]
 8049bd6:	2200      	movs	r2, #0
 8049bd8:	609a      	str	r2, [r3, #8]
 8049bda:	e043      	b.n	8049c64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8049bdc:	687b      	ldr	r3, [r7, #4]
 8049bde:	2b00      	cmp	r3, #0
 8049be0:	d119      	bne.n	8049c16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8049be2:	68fb      	ldr	r3, [r7, #12]
 8049be4:	6858      	ldr	r0, [r3, #4]
 8049be6:	68fb      	ldr	r3, [r7, #12]
 8049be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049bea:	461a      	mov	r2, r3
 8049bec:	68b9      	ldr	r1, [r7, #8]
 8049bee:	f00f f911 	bl	8058e14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8049bf2:	68fb      	ldr	r3, [r7, #12]
 8049bf4:	685a      	ldr	r2, [r3, #4]
 8049bf6:	68fb      	ldr	r3, [r7, #12]
 8049bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049bfa:	441a      	add	r2, r3
 8049bfc:	68fb      	ldr	r3, [r7, #12]
 8049bfe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8049c00:	68fb      	ldr	r3, [r7, #12]
 8049c02:	685a      	ldr	r2, [r3, #4]
 8049c04:	68fb      	ldr	r3, [r7, #12]
 8049c06:	689b      	ldr	r3, [r3, #8]
 8049c08:	429a      	cmp	r2, r3
 8049c0a:	d32b      	bcc.n	8049c64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8049c0c:	68fb      	ldr	r3, [r7, #12]
 8049c0e:	681a      	ldr	r2, [r3, #0]
 8049c10:	68fb      	ldr	r3, [r7, #12]
 8049c12:	605a      	str	r2, [r3, #4]
 8049c14:	e026      	b.n	8049c64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8049c16:	68fb      	ldr	r3, [r7, #12]
 8049c18:	68d8      	ldr	r0, [r3, #12]
 8049c1a:	68fb      	ldr	r3, [r7, #12]
 8049c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049c1e:	461a      	mov	r2, r3
 8049c20:	68b9      	ldr	r1, [r7, #8]
 8049c22:	f00f f8f7 	bl	8058e14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8049c26:	68fb      	ldr	r3, [r7, #12]
 8049c28:	68da      	ldr	r2, [r3, #12]
 8049c2a:	68fb      	ldr	r3, [r7, #12]
 8049c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049c2e:	425b      	negs	r3, r3
 8049c30:	441a      	add	r2, r3
 8049c32:	68fb      	ldr	r3, [r7, #12]
 8049c34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8049c36:	68fb      	ldr	r3, [r7, #12]
 8049c38:	68da      	ldr	r2, [r3, #12]
 8049c3a:	68fb      	ldr	r3, [r7, #12]
 8049c3c:	681b      	ldr	r3, [r3, #0]
 8049c3e:	429a      	cmp	r2, r3
 8049c40:	d207      	bcs.n	8049c52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8049c42:	68fb      	ldr	r3, [r7, #12]
 8049c44:	689a      	ldr	r2, [r3, #8]
 8049c46:	68fb      	ldr	r3, [r7, #12]
 8049c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049c4a:	425b      	negs	r3, r3
 8049c4c:	441a      	add	r2, r3
 8049c4e:	68fb      	ldr	r3, [r7, #12]
 8049c50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8049c52:	687b      	ldr	r3, [r7, #4]
 8049c54:	2b02      	cmp	r3, #2
 8049c56:	d105      	bne.n	8049c64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8049c58:	693b      	ldr	r3, [r7, #16]
 8049c5a:	2b00      	cmp	r3, #0
 8049c5c:	d002      	beq.n	8049c64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8049c5e:	693b      	ldr	r3, [r7, #16]
 8049c60:	3b01      	subs	r3, #1
 8049c62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8049c64:	693b      	ldr	r3, [r7, #16]
 8049c66:	1c5a      	adds	r2, r3, #1
 8049c68:	68fb      	ldr	r3, [r7, #12]
 8049c6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8049c6c:	697b      	ldr	r3, [r7, #20]
}
 8049c6e:	4618      	mov	r0, r3
 8049c70:	3718      	adds	r7, #24
 8049c72:	46bd      	mov	sp, r7
 8049c74:	bd80      	pop	{r7, pc}

08049c76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8049c76:	b580      	push	{r7, lr}
 8049c78:	b082      	sub	sp, #8
 8049c7a:	af00      	add	r7, sp, #0
 8049c7c:	6078      	str	r0, [r7, #4]
 8049c7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8049c80:	687b      	ldr	r3, [r7, #4]
 8049c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049c84:	2b00      	cmp	r3, #0
 8049c86:	d018      	beq.n	8049cba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8049c88:	687b      	ldr	r3, [r7, #4]
 8049c8a:	68da      	ldr	r2, [r3, #12]
 8049c8c:	687b      	ldr	r3, [r7, #4]
 8049c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049c90:	441a      	add	r2, r3
 8049c92:	687b      	ldr	r3, [r7, #4]
 8049c94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8049c96:	687b      	ldr	r3, [r7, #4]
 8049c98:	68da      	ldr	r2, [r3, #12]
 8049c9a:	687b      	ldr	r3, [r7, #4]
 8049c9c:	689b      	ldr	r3, [r3, #8]
 8049c9e:	429a      	cmp	r2, r3
 8049ca0:	d303      	bcc.n	8049caa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8049ca2:	687b      	ldr	r3, [r7, #4]
 8049ca4:	681a      	ldr	r2, [r3, #0]
 8049ca6:	687b      	ldr	r3, [r7, #4]
 8049ca8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8049caa:	687b      	ldr	r3, [r7, #4]
 8049cac:	68d9      	ldr	r1, [r3, #12]
 8049cae:	687b      	ldr	r3, [r7, #4]
 8049cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8049cb2:	461a      	mov	r2, r3
 8049cb4:	6838      	ldr	r0, [r7, #0]
 8049cb6:	f00f f8ad 	bl	8058e14 <memcpy>
	}
}
 8049cba:	bf00      	nop
 8049cbc:	3708      	adds	r7, #8
 8049cbe:	46bd      	mov	sp, r7
 8049cc0:	bd80      	pop	{r7, pc}

08049cc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8049cc2:	b580      	push	{r7, lr}
 8049cc4:	b084      	sub	sp, #16
 8049cc6:	af00      	add	r7, sp, #0
 8049cc8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8049cca:	f001 fb37 	bl	804b33c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8049cce:	687b      	ldr	r3, [r7, #4]
 8049cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8049cd4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8049cd6:	e011      	b.n	8049cfc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8049cd8:	687b      	ldr	r3, [r7, #4]
 8049cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049cdc:	2b00      	cmp	r3, #0
 8049cde:	d012      	beq.n	8049d06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8049ce0:	687b      	ldr	r3, [r7, #4]
 8049ce2:	3324      	adds	r3, #36	; 0x24
 8049ce4:	4618      	mov	r0, r3
 8049ce6:	f000 fe15 	bl	804a914 <xTaskRemoveFromEventList>
 8049cea:	4603      	mov	r3, r0
 8049cec:	2b00      	cmp	r3, #0
 8049cee:	d001      	beq.n	8049cf4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8049cf0:	f000 fef0 	bl	804aad4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8049cf4:	7bfb      	ldrb	r3, [r7, #15]
 8049cf6:	3b01      	subs	r3, #1
 8049cf8:	b2db      	uxtb	r3, r3
 8049cfa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8049cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8049d00:	2b00      	cmp	r3, #0
 8049d02:	dce9      	bgt.n	8049cd8 <prvUnlockQueue+0x16>
 8049d04:	e000      	b.n	8049d08 <prvUnlockQueue+0x46>
					break;
 8049d06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8049d08:	687b      	ldr	r3, [r7, #4]
 8049d0a:	22ff      	movs	r2, #255	; 0xff
 8049d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8049d10:	f001 fb48 	bl	804b3a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8049d14:	f001 fb12 	bl	804b33c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8049d18:	687b      	ldr	r3, [r7, #4]
 8049d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8049d1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8049d20:	e011      	b.n	8049d46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8049d22:	687b      	ldr	r3, [r7, #4]
 8049d24:	691b      	ldr	r3, [r3, #16]
 8049d26:	2b00      	cmp	r3, #0
 8049d28:	d012      	beq.n	8049d50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8049d2a:	687b      	ldr	r3, [r7, #4]
 8049d2c:	3310      	adds	r3, #16
 8049d2e:	4618      	mov	r0, r3
 8049d30:	f000 fdf0 	bl	804a914 <xTaskRemoveFromEventList>
 8049d34:	4603      	mov	r3, r0
 8049d36:	2b00      	cmp	r3, #0
 8049d38:	d001      	beq.n	8049d3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8049d3a:	f000 fecb 	bl	804aad4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8049d3e:	7bbb      	ldrb	r3, [r7, #14]
 8049d40:	3b01      	subs	r3, #1
 8049d42:	b2db      	uxtb	r3, r3
 8049d44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8049d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8049d4a:	2b00      	cmp	r3, #0
 8049d4c:	dce9      	bgt.n	8049d22 <prvUnlockQueue+0x60>
 8049d4e:	e000      	b.n	8049d52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8049d50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8049d52:	687b      	ldr	r3, [r7, #4]
 8049d54:	22ff      	movs	r2, #255	; 0xff
 8049d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8049d5a:	f001 fb23 	bl	804b3a4 <vPortExitCritical>
}
 8049d5e:	bf00      	nop
 8049d60:	3710      	adds	r7, #16
 8049d62:	46bd      	mov	sp, r7
 8049d64:	bd80      	pop	{r7, pc}

08049d66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8049d66:	b580      	push	{r7, lr}
 8049d68:	b084      	sub	sp, #16
 8049d6a:	af00      	add	r7, sp, #0
 8049d6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8049d6e:	f001 fae5 	bl	804b33c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8049d72:	687b      	ldr	r3, [r7, #4]
 8049d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049d76:	2b00      	cmp	r3, #0
 8049d78:	d102      	bne.n	8049d80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8049d7a:	2301      	movs	r3, #1
 8049d7c:	60fb      	str	r3, [r7, #12]
 8049d7e:	e001      	b.n	8049d84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8049d80:	2300      	movs	r3, #0
 8049d82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8049d84:	f001 fb0e 	bl	804b3a4 <vPortExitCritical>

	return xReturn;
 8049d88:	68fb      	ldr	r3, [r7, #12]
}
 8049d8a:	4618      	mov	r0, r3
 8049d8c:	3710      	adds	r7, #16
 8049d8e:	46bd      	mov	sp, r7
 8049d90:	bd80      	pop	{r7, pc}

08049d92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8049d92:	b580      	push	{r7, lr}
 8049d94:	b084      	sub	sp, #16
 8049d96:	af00      	add	r7, sp, #0
 8049d98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8049d9a:	f001 facf 	bl	804b33c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8049d9e:	687b      	ldr	r3, [r7, #4]
 8049da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8049da2:	687b      	ldr	r3, [r7, #4]
 8049da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049da6:	429a      	cmp	r2, r3
 8049da8:	d102      	bne.n	8049db0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8049daa:	2301      	movs	r3, #1
 8049dac:	60fb      	str	r3, [r7, #12]
 8049dae:	e001      	b.n	8049db4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8049db0:	2300      	movs	r3, #0
 8049db2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8049db4:	f001 faf6 	bl	804b3a4 <vPortExitCritical>

	return xReturn;
 8049db8:	68fb      	ldr	r3, [r7, #12]
}
 8049dba:	4618      	mov	r0, r3
 8049dbc:	3710      	adds	r7, #16
 8049dbe:	46bd      	mov	sp, r7
 8049dc0:	bd80      	pop	{r7, pc}
	...

08049dc4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8049dc4:	b480      	push	{r7}
 8049dc6:	b085      	sub	sp, #20
 8049dc8:	af00      	add	r7, sp, #0
 8049dca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8049dcc:	2300      	movs	r3, #0
 8049dce:	60fb      	str	r3, [r7, #12]
 8049dd0:	e016      	b.n	8049e00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8049dd2:	4a10      	ldr	r2, [pc, #64]	; (8049e14 <vQueueUnregisterQueue+0x50>)
 8049dd4:	68fb      	ldr	r3, [r7, #12]
 8049dd6:	00db      	lsls	r3, r3, #3
 8049dd8:	4413      	add	r3, r2
 8049dda:	685b      	ldr	r3, [r3, #4]
 8049ddc:	687a      	ldr	r2, [r7, #4]
 8049dde:	429a      	cmp	r2, r3
 8049de0:	d10b      	bne.n	8049dfa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8049de2:	4a0c      	ldr	r2, [pc, #48]	; (8049e14 <vQueueUnregisterQueue+0x50>)
 8049de4:	68fb      	ldr	r3, [r7, #12]
 8049de6:	2100      	movs	r1, #0
 8049de8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8049dec:	4a09      	ldr	r2, [pc, #36]	; (8049e14 <vQueueUnregisterQueue+0x50>)
 8049dee:	68fb      	ldr	r3, [r7, #12]
 8049df0:	00db      	lsls	r3, r3, #3
 8049df2:	4413      	add	r3, r2
 8049df4:	2200      	movs	r2, #0
 8049df6:	605a      	str	r2, [r3, #4]
				break;
 8049df8:	e006      	b.n	8049e08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8049dfa:	68fb      	ldr	r3, [r7, #12]
 8049dfc:	3301      	adds	r3, #1
 8049dfe:	60fb      	str	r3, [r7, #12]
 8049e00:	68fb      	ldr	r3, [r7, #12]
 8049e02:	2b07      	cmp	r3, #7
 8049e04:	d9e5      	bls.n	8049dd2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8049e06:	bf00      	nop
 8049e08:	bf00      	nop
 8049e0a:	3714      	adds	r7, #20
 8049e0c:	46bd      	mov	sp, r7
 8049e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049e12:	4770      	bx	lr
 8049e14:	20005b34 	.word	0x20005b34

08049e18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8049e18:	b580      	push	{r7, lr}
 8049e1a:	b08e      	sub	sp, #56	; 0x38
 8049e1c:	af04      	add	r7, sp, #16
 8049e1e:	60f8      	str	r0, [r7, #12]
 8049e20:	60b9      	str	r1, [r7, #8]
 8049e22:	607a      	str	r2, [r7, #4]
 8049e24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8049e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8049e28:	2b00      	cmp	r3, #0
 8049e2a:	d10c      	bne.n	8049e46 <xTaskCreateStatic+0x2e>
	__asm volatile
 8049e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049e30:	b672      	cpsid	i
 8049e32:	f383 8811 	msr	BASEPRI, r3
 8049e36:	f3bf 8f6f 	isb	sy
 8049e3a:	f3bf 8f4f 	dsb	sy
 8049e3e:	b662      	cpsie	i
 8049e40:	623b      	str	r3, [r7, #32]
}
 8049e42:	bf00      	nop
 8049e44:	e7fe      	b.n	8049e44 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8049e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8049e48:	2b00      	cmp	r3, #0
 8049e4a:	d10c      	bne.n	8049e66 <xTaskCreateStatic+0x4e>
	__asm volatile
 8049e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049e50:	b672      	cpsid	i
 8049e52:	f383 8811 	msr	BASEPRI, r3
 8049e56:	f3bf 8f6f 	isb	sy
 8049e5a:	f3bf 8f4f 	dsb	sy
 8049e5e:	b662      	cpsie	i
 8049e60:	61fb      	str	r3, [r7, #28]
}
 8049e62:	bf00      	nop
 8049e64:	e7fe      	b.n	8049e64 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8049e66:	23b4      	movs	r3, #180	; 0xb4
 8049e68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8049e6a:	693b      	ldr	r3, [r7, #16]
 8049e6c:	2bb4      	cmp	r3, #180	; 0xb4
 8049e6e:	d00c      	beq.n	8049e8a <xTaskCreateStatic+0x72>
	__asm volatile
 8049e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049e74:	b672      	cpsid	i
 8049e76:	f383 8811 	msr	BASEPRI, r3
 8049e7a:	f3bf 8f6f 	isb	sy
 8049e7e:	f3bf 8f4f 	dsb	sy
 8049e82:	b662      	cpsie	i
 8049e84:	61bb      	str	r3, [r7, #24]
}
 8049e86:	bf00      	nop
 8049e88:	e7fe      	b.n	8049e88 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8049e8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8049e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8049e8e:	2b00      	cmp	r3, #0
 8049e90:	d01e      	beq.n	8049ed0 <xTaskCreateStatic+0xb8>
 8049e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8049e94:	2b00      	cmp	r3, #0
 8049e96:	d01b      	beq.n	8049ed0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8049e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8049e9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8049e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8049ea0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8049ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049ea4:	2202      	movs	r2, #2
 8049ea6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8049eaa:	2300      	movs	r3, #0
 8049eac:	9303      	str	r3, [sp, #12]
 8049eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049eb0:	9302      	str	r3, [sp, #8]
 8049eb2:	f107 0314 	add.w	r3, r7, #20
 8049eb6:	9301      	str	r3, [sp, #4]
 8049eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049eba:	9300      	str	r3, [sp, #0]
 8049ebc:	683b      	ldr	r3, [r7, #0]
 8049ebe:	687a      	ldr	r2, [r7, #4]
 8049ec0:	68b9      	ldr	r1, [r7, #8]
 8049ec2:	68f8      	ldr	r0, [r7, #12]
 8049ec4:	f000 f850 	bl	8049f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8049ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8049eca:	f000 f8ed 	bl	804a0a8 <prvAddNewTaskToReadyList>
 8049ece:	e001      	b.n	8049ed4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8049ed0:	2300      	movs	r3, #0
 8049ed2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8049ed4:	697b      	ldr	r3, [r7, #20]
	}
 8049ed6:	4618      	mov	r0, r3
 8049ed8:	3728      	adds	r7, #40	; 0x28
 8049eda:	46bd      	mov	sp, r7
 8049edc:	bd80      	pop	{r7, pc}

08049ede <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8049ede:	b580      	push	{r7, lr}
 8049ee0:	b08c      	sub	sp, #48	; 0x30
 8049ee2:	af04      	add	r7, sp, #16
 8049ee4:	60f8      	str	r0, [r7, #12]
 8049ee6:	60b9      	str	r1, [r7, #8]
 8049ee8:	603b      	str	r3, [r7, #0]
 8049eea:	4613      	mov	r3, r2
 8049eec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8049eee:	88fb      	ldrh	r3, [r7, #6]
 8049ef0:	009b      	lsls	r3, r3, #2
 8049ef2:	4618      	mov	r0, r3
 8049ef4:	f7f6 fcd5 	bl	80408a2 <pvPortMalloc>
 8049ef8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8049efa:	697b      	ldr	r3, [r7, #20]
 8049efc:	2b00      	cmp	r3, #0
 8049efe:	d00e      	beq.n	8049f1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8049f00:	20b4      	movs	r0, #180	; 0xb4
 8049f02:	f7f6 fcce 	bl	80408a2 <pvPortMalloc>
 8049f06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8049f08:	69fb      	ldr	r3, [r7, #28]
 8049f0a:	2b00      	cmp	r3, #0
 8049f0c:	d003      	beq.n	8049f16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8049f0e:	69fb      	ldr	r3, [r7, #28]
 8049f10:	697a      	ldr	r2, [r7, #20]
 8049f12:	631a      	str	r2, [r3, #48]	; 0x30
 8049f14:	e005      	b.n	8049f22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8049f16:	6978      	ldr	r0, [r7, #20]
 8049f18:	f7f6 fcd1 	bl	80408be <vPortFree>
 8049f1c:	e001      	b.n	8049f22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8049f1e:	2300      	movs	r3, #0
 8049f20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8049f22:	69fb      	ldr	r3, [r7, #28]
 8049f24:	2b00      	cmp	r3, #0
 8049f26:	d017      	beq.n	8049f58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8049f28:	69fb      	ldr	r3, [r7, #28]
 8049f2a:	2200      	movs	r2, #0
 8049f2c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8049f30:	88fa      	ldrh	r2, [r7, #6]
 8049f32:	2300      	movs	r3, #0
 8049f34:	9303      	str	r3, [sp, #12]
 8049f36:	69fb      	ldr	r3, [r7, #28]
 8049f38:	9302      	str	r3, [sp, #8]
 8049f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049f3c:	9301      	str	r3, [sp, #4]
 8049f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049f40:	9300      	str	r3, [sp, #0]
 8049f42:	683b      	ldr	r3, [r7, #0]
 8049f44:	68b9      	ldr	r1, [r7, #8]
 8049f46:	68f8      	ldr	r0, [r7, #12]
 8049f48:	f000 f80e 	bl	8049f68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8049f4c:	69f8      	ldr	r0, [r7, #28]
 8049f4e:	f000 f8ab 	bl	804a0a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8049f52:	2301      	movs	r3, #1
 8049f54:	61bb      	str	r3, [r7, #24]
 8049f56:	e002      	b.n	8049f5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8049f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8049f5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8049f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8049f60:	4618      	mov	r0, r3
 8049f62:	3720      	adds	r7, #32
 8049f64:	46bd      	mov	sp, r7
 8049f66:	bd80      	pop	{r7, pc}

08049f68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8049f68:	b580      	push	{r7, lr}
 8049f6a:	b088      	sub	sp, #32
 8049f6c:	af00      	add	r7, sp, #0
 8049f6e:	60f8      	str	r0, [r7, #12]
 8049f70:	60b9      	str	r1, [r7, #8]
 8049f72:	607a      	str	r2, [r7, #4]
 8049f74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8049f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8049f7a:	6879      	ldr	r1, [r7, #4]
 8049f7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8049f80:	440b      	add	r3, r1
 8049f82:	009b      	lsls	r3, r3, #2
 8049f84:	4413      	add	r3, r2
 8049f86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8049f88:	69bb      	ldr	r3, [r7, #24]
 8049f8a:	f023 0307 	bic.w	r3, r3, #7
 8049f8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8049f90:	69bb      	ldr	r3, [r7, #24]
 8049f92:	f003 0307 	and.w	r3, r3, #7
 8049f96:	2b00      	cmp	r3, #0
 8049f98:	d00c      	beq.n	8049fb4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8049f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8049f9e:	b672      	cpsid	i
 8049fa0:	f383 8811 	msr	BASEPRI, r3
 8049fa4:	f3bf 8f6f 	isb	sy
 8049fa8:	f3bf 8f4f 	dsb	sy
 8049fac:	b662      	cpsie	i
 8049fae:	617b      	str	r3, [r7, #20]
}
 8049fb0:	bf00      	nop
 8049fb2:	e7fe      	b.n	8049fb2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8049fb4:	68bb      	ldr	r3, [r7, #8]
 8049fb6:	2b00      	cmp	r3, #0
 8049fb8:	d01f      	beq.n	8049ffa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8049fba:	2300      	movs	r3, #0
 8049fbc:	61fb      	str	r3, [r7, #28]
 8049fbe:	e012      	b.n	8049fe6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8049fc0:	68ba      	ldr	r2, [r7, #8]
 8049fc2:	69fb      	ldr	r3, [r7, #28]
 8049fc4:	4413      	add	r3, r2
 8049fc6:	7819      	ldrb	r1, [r3, #0]
 8049fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8049fca:	69fb      	ldr	r3, [r7, #28]
 8049fcc:	4413      	add	r3, r2
 8049fce:	3334      	adds	r3, #52	; 0x34
 8049fd0:	460a      	mov	r2, r1
 8049fd2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8049fd4:	68ba      	ldr	r2, [r7, #8]
 8049fd6:	69fb      	ldr	r3, [r7, #28]
 8049fd8:	4413      	add	r3, r2
 8049fda:	781b      	ldrb	r3, [r3, #0]
 8049fdc:	2b00      	cmp	r3, #0
 8049fde:	d006      	beq.n	8049fee <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8049fe0:	69fb      	ldr	r3, [r7, #28]
 8049fe2:	3301      	adds	r3, #1
 8049fe4:	61fb      	str	r3, [r7, #28]
 8049fe6:	69fb      	ldr	r3, [r7, #28]
 8049fe8:	2b0f      	cmp	r3, #15
 8049fea:	d9e9      	bls.n	8049fc0 <prvInitialiseNewTask+0x58>
 8049fec:	e000      	b.n	8049ff0 <prvInitialiseNewTask+0x88>
			{
				break;
 8049fee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8049ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049ff2:	2200      	movs	r2, #0
 8049ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8049ff8:	e003      	b.n	804a002 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8049ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049ffc:	2200      	movs	r2, #0
 8049ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 804a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804a004:	2b06      	cmp	r3, #6
 804a006:	d901      	bls.n	804a00c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 804a008:	2306      	movs	r3, #6
 804a00a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 804a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804a010:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 804a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804a016:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 804a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a01a:	2200      	movs	r2, #0
 804a01c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 804a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a020:	3304      	adds	r3, #4
 804a022:	4618      	mov	r0, r3
 804a024:	f7fe fe55 	bl	8048cd2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 804a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a02a:	3318      	adds	r3, #24
 804a02c:	4618      	mov	r0, r3
 804a02e:	f7fe fe50 	bl	8048cd2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 804a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804a036:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804a03a:	f1c3 0207 	rsb	r2, r3, #7
 804a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a040:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 804a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804a046:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 804a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a04a:	2200      	movs	r2, #0
 804a04c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 804a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a052:	2200      	movs	r2, #0
 804a054:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 804a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a05a:	334c      	adds	r3, #76	; 0x4c
 804a05c:	2260      	movs	r2, #96	; 0x60
 804a05e:	2100      	movs	r1, #0
 804a060:	4618      	mov	r0, r3
 804a062:	f00e feff 	bl	8058e64 <memset>
 804a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a068:	4a0c      	ldr	r2, [pc, #48]	; (804a09c <prvInitialiseNewTask+0x134>)
 804a06a:	651a      	str	r2, [r3, #80]	; 0x50
 804a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a06e:	4a0c      	ldr	r2, [pc, #48]	; (804a0a0 <prvInitialiseNewTask+0x138>)
 804a070:	655a      	str	r2, [r3, #84]	; 0x54
 804a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a074:	4a0b      	ldr	r2, [pc, #44]	; (804a0a4 <prvInitialiseNewTask+0x13c>)
 804a076:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 804a078:	683a      	ldr	r2, [r7, #0]
 804a07a:	68f9      	ldr	r1, [r7, #12]
 804a07c:	69b8      	ldr	r0, [r7, #24]
 804a07e:	f001 f851 	bl	804b124 <pxPortInitialiseStack>
 804a082:	4602      	mov	r2, r0
 804a084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804a086:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 804a088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804a08a:	2b00      	cmp	r3, #0
 804a08c:	d002      	beq.n	804a094 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 804a08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804a090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804a092:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 804a094:	bf00      	nop
 804a096:	3720      	adds	r7, #32
 804a098:	46bd      	mov	sp, r7
 804a09a:	bd80      	pop	{r7, pc}
 804a09c:	0805d964 	.word	0x0805d964
 804a0a0:	0805d984 	.word	0x0805d984
 804a0a4:	0805d944 	.word	0x0805d944

0804a0a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 804a0a8:	b580      	push	{r7, lr}
 804a0aa:	b082      	sub	sp, #8
 804a0ac:	af00      	add	r7, sp, #0
 804a0ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 804a0b0:	f001 f944 	bl	804b33c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 804a0b4:	4b2a      	ldr	r3, [pc, #168]	; (804a160 <prvAddNewTaskToReadyList+0xb8>)
 804a0b6:	681b      	ldr	r3, [r3, #0]
 804a0b8:	3301      	adds	r3, #1
 804a0ba:	4a29      	ldr	r2, [pc, #164]	; (804a160 <prvAddNewTaskToReadyList+0xb8>)
 804a0bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 804a0be:	4b29      	ldr	r3, [pc, #164]	; (804a164 <prvAddNewTaskToReadyList+0xbc>)
 804a0c0:	681b      	ldr	r3, [r3, #0]
 804a0c2:	2b00      	cmp	r3, #0
 804a0c4:	d109      	bne.n	804a0da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 804a0c6:	4a27      	ldr	r2, [pc, #156]	; (804a164 <prvAddNewTaskToReadyList+0xbc>)
 804a0c8:	687b      	ldr	r3, [r7, #4]
 804a0ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 804a0cc:	4b24      	ldr	r3, [pc, #144]	; (804a160 <prvAddNewTaskToReadyList+0xb8>)
 804a0ce:	681b      	ldr	r3, [r3, #0]
 804a0d0:	2b01      	cmp	r3, #1
 804a0d2:	d110      	bne.n	804a0f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 804a0d4:	f000 fd22 	bl	804ab1c <prvInitialiseTaskLists>
 804a0d8:	e00d      	b.n	804a0f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 804a0da:	4b23      	ldr	r3, [pc, #140]	; (804a168 <prvAddNewTaskToReadyList+0xc0>)
 804a0dc:	681b      	ldr	r3, [r3, #0]
 804a0de:	2b00      	cmp	r3, #0
 804a0e0:	d109      	bne.n	804a0f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 804a0e2:	4b20      	ldr	r3, [pc, #128]	; (804a164 <prvAddNewTaskToReadyList+0xbc>)
 804a0e4:	681b      	ldr	r3, [r3, #0]
 804a0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a0e8:	687b      	ldr	r3, [r7, #4]
 804a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a0ec:	429a      	cmp	r2, r3
 804a0ee:	d802      	bhi.n	804a0f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 804a0f0:	4a1c      	ldr	r2, [pc, #112]	; (804a164 <prvAddNewTaskToReadyList+0xbc>)
 804a0f2:	687b      	ldr	r3, [r7, #4]
 804a0f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 804a0f6:	4b1d      	ldr	r3, [pc, #116]	; (804a16c <prvAddNewTaskToReadyList+0xc4>)
 804a0f8:	681b      	ldr	r3, [r3, #0]
 804a0fa:	3301      	adds	r3, #1
 804a0fc:	4a1b      	ldr	r2, [pc, #108]	; (804a16c <prvAddNewTaskToReadyList+0xc4>)
 804a0fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 804a100:	687b      	ldr	r3, [r7, #4]
 804a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a104:	2201      	movs	r2, #1
 804a106:	409a      	lsls	r2, r3
 804a108:	4b19      	ldr	r3, [pc, #100]	; (804a170 <prvAddNewTaskToReadyList+0xc8>)
 804a10a:	681b      	ldr	r3, [r3, #0]
 804a10c:	4313      	orrs	r3, r2
 804a10e:	4a18      	ldr	r2, [pc, #96]	; (804a170 <prvAddNewTaskToReadyList+0xc8>)
 804a110:	6013      	str	r3, [r2, #0]
 804a112:	687b      	ldr	r3, [r7, #4]
 804a114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a116:	4613      	mov	r3, r2
 804a118:	009b      	lsls	r3, r3, #2
 804a11a:	4413      	add	r3, r2
 804a11c:	009b      	lsls	r3, r3, #2
 804a11e:	4a15      	ldr	r2, [pc, #84]	; (804a174 <prvAddNewTaskToReadyList+0xcc>)
 804a120:	441a      	add	r2, r3
 804a122:	687b      	ldr	r3, [r7, #4]
 804a124:	3304      	adds	r3, #4
 804a126:	4619      	mov	r1, r3
 804a128:	4610      	mov	r0, r2
 804a12a:	f7fe fddf 	bl	8048cec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 804a12e:	f001 f939 	bl	804b3a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 804a132:	4b0d      	ldr	r3, [pc, #52]	; (804a168 <prvAddNewTaskToReadyList+0xc0>)
 804a134:	681b      	ldr	r3, [r3, #0]
 804a136:	2b00      	cmp	r3, #0
 804a138:	d00e      	beq.n	804a158 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 804a13a:	4b0a      	ldr	r3, [pc, #40]	; (804a164 <prvAddNewTaskToReadyList+0xbc>)
 804a13c:	681b      	ldr	r3, [r3, #0]
 804a13e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a140:	687b      	ldr	r3, [r7, #4]
 804a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a144:	429a      	cmp	r2, r3
 804a146:	d207      	bcs.n	804a158 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 804a148:	4b0b      	ldr	r3, [pc, #44]	; (804a178 <prvAddNewTaskToReadyList+0xd0>)
 804a14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804a14e:	601a      	str	r2, [r3, #0]
 804a150:	f3bf 8f4f 	dsb	sy
 804a154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 804a158:	bf00      	nop
 804a15a:	3708      	adds	r7, #8
 804a15c:	46bd      	mov	sp, r7
 804a15e:	bd80      	pop	{r7, pc}
 804a160:	20005c74 	.word	0x20005c74
 804a164:	20005b74 	.word	0x20005b74
 804a168:	20005c80 	.word	0x20005c80
 804a16c:	20005c90 	.word	0x20005c90
 804a170:	20005c7c 	.word	0x20005c7c
 804a174:	20005b78 	.word	0x20005b78
 804a178:	e000ed04 	.word	0xe000ed04

0804a17c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 804a17c:	b580      	push	{r7, lr}
 804a17e:	b084      	sub	sp, #16
 804a180:	af00      	add	r7, sp, #0
 804a182:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 804a184:	f001 f8da 	bl	804b33c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 804a188:	687b      	ldr	r3, [r7, #4]
 804a18a:	2b00      	cmp	r3, #0
 804a18c:	d102      	bne.n	804a194 <vTaskDelete+0x18>
 804a18e:	4b3a      	ldr	r3, [pc, #232]	; (804a278 <vTaskDelete+0xfc>)
 804a190:	681b      	ldr	r3, [r3, #0]
 804a192:	e000      	b.n	804a196 <vTaskDelete+0x1a>
 804a194:	687b      	ldr	r3, [r7, #4]
 804a196:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804a198:	68fb      	ldr	r3, [r7, #12]
 804a19a:	3304      	adds	r3, #4
 804a19c:	4618      	mov	r0, r3
 804a19e:	f7fe fe02 	bl	8048da6 <uxListRemove>
 804a1a2:	4603      	mov	r3, r0
 804a1a4:	2b00      	cmp	r3, #0
 804a1a6:	d115      	bne.n	804a1d4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 804a1a8:	68fb      	ldr	r3, [r7, #12]
 804a1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a1ac:	4933      	ldr	r1, [pc, #204]	; (804a27c <vTaskDelete+0x100>)
 804a1ae:	4613      	mov	r3, r2
 804a1b0:	009b      	lsls	r3, r3, #2
 804a1b2:	4413      	add	r3, r2
 804a1b4:	009b      	lsls	r3, r3, #2
 804a1b6:	440b      	add	r3, r1
 804a1b8:	681b      	ldr	r3, [r3, #0]
 804a1ba:	2b00      	cmp	r3, #0
 804a1bc:	d10a      	bne.n	804a1d4 <vTaskDelete+0x58>
 804a1be:	68fb      	ldr	r3, [r7, #12]
 804a1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a1c2:	2201      	movs	r2, #1
 804a1c4:	fa02 f303 	lsl.w	r3, r2, r3
 804a1c8:	43da      	mvns	r2, r3
 804a1ca:	4b2d      	ldr	r3, [pc, #180]	; (804a280 <vTaskDelete+0x104>)
 804a1cc:	681b      	ldr	r3, [r3, #0]
 804a1ce:	4013      	ands	r3, r2
 804a1d0:	4a2b      	ldr	r2, [pc, #172]	; (804a280 <vTaskDelete+0x104>)
 804a1d2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 804a1d4:	68fb      	ldr	r3, [r7, #12]
 804a1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a1d8:	2b00      	cmp	r3, #0
 804a1da:	d004      	beq.n	804a1e6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804a1dc:	68fb      	ldr	r3, [r7, #12]
 804a1de:	3318      	adds	r3, #24
 804a1e0:	4618      	mov	r0, r3
 804a1e2:	f7fe fde0 	bl	8048da6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 804a1e6:	4b27      	ldr	r3, [pc, #156]	; (804a284 <vTaskDelete+0x108>)
 804a1e8:	681b      	ldr	r3, [r3, #0]
 804a1ea:	3301      	adds	r3, #1
 804a1ec:	4a25      	ldr	r2, [pc, #148]	; (804a284 <vTaskDelete+0x108>)
 804a1ee:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 804a1f0:	4b21      	ldr	r3, [pc, #132]	; (804a278 <vTaskDelete+0xfc>)
 804a1f2:	681b      	ldr	r3, [r3, #0]
 804a1f4:	68fa      	ldr	r2, [r7, #12]
 804a1f6:	429a      	cmp	r2, r3
 804a1f8:	d10b      	bne.n	804a212 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 804a1fa:	68fb      	ldr	r3, [r7, #12]
 804a1fc:	3304      	adds	r3, #4
 804a1fe:	4619      	mov	r1, r3
 804a200:	4821      	ldr	r0, [pc, #132]	; (804a288 <vTaskDelete+0x10c>)
 804a202:	f7fe fd73 	bl	8048cec <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 804a206:	4b21      	ldr	r3, [pc, #132]	; (804a28c <vTaskDelete+0x110>)
 804a208:	681b      	ldr	r3, [r3, #0]
 804a20a:	3301      	adds	r3, #1
 804a20c:	4a1f      	ldr	r2, [pc, #124]	; (804a28c <vTaskDelete+0x110>)
 804a20e:	6013      	str	r3, [r2, #0]
 804a210:	e009      	b.n	804a226 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 804a212:	4b1f      	ldr	r3, [pc, #124]	; (804a290 <vTaskDelete+0x114>)
 804a214:	681b      	ldr	r3, [r3, #0]
 804a216:	3b01      	subs	r3, #1
 804a218:	4a1d      	ldr	r2, [pc, #116]	; (804a290 <vTaskDelete+0x114>)
 804a21a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 804a21c:	68f8      	ldr	r0, [r7, #12]
 804a21e:	f000 fceb 	bl	804abf8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 804a222:	f000 fd1f 	bl	804ac64 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 804a226:	f001 f8bd 	bl	804b3a4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 804a22a:	4b1a      	ldr	r3, [pc, #104]	; (804a294 <vTaskDelete+0x118>)
 804a22c:	681b      	ldr	r3, [r3, #0]
 804a22e:	2b00      	cmp	r3, #0
 804a230:	d01d      	beq.n	804a26e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 804a232:	4b11      	ldr	r3, [pc, #68]	; (804a278 <vTaskDelete+0xfc>)
 804a234:	681b      	ldr	r3, [r3, #0]
 804a236:	68fa      	ldr	r2, [r7, #12]
 804a238:	429a      	cmp	r2, r3
 804a23a:	d118      	bne.n	804a26e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 804a23c:	4b16      	ldr	r3, [pc, #88]	; (804a298 <vTaskDelete+0x11c>)
 804a23e:	681b      	ldr	r3, [r3, #0]
 804a240:	2b00      	cmp	r3, #0
 804a242:	d00c      	beq.n	804a25e <vTaskDelete+0xe2>
	__asm volatile
 804a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a248:	b672      	cpsid	i
 804a24a:	f383 8811 	msr	BASEPRI, r3
 804a24e:	f3bf 8f6f 	isb	sy
 804a252:	f3bf 8f4f 	dsb	sy
 804a256:	b662      	cpsie	i
 804a258:	60bb      	str	r3, [r7, #8]
}
 804a25a:	bf00      	nop
 804a25c:	e7fe      	b.n	804a25c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 804a25e:	4b0f      	ldr	r3, [pc, #60]	; (804a29c <vTaskDelete+0x120>)
 804a260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804a264:	601a      	str	r2, [r3, #0]
 804a266:	f3bf 8f4f 	dsb	sy
 804a26a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 804a26e:	bf00      	nop
 804a270:	3710      	adds	r7, #16
 804a272:	46bd      	mov	sp, r7
 804a274:	bd80      	pop	{r7, pc}
 804a276:	bf00      	nop
 804a278:	20005b74 	.word	0x20005b74
 804a27c:	20005b78 	.word	0x20005b78
 804a280:	20005c7c 	.word	0x20005c7c
 804a284:	20005c90 	.word	0x20005c90
 804a288:	20005c48 	.word	0x20005c48
 804a28c:	20005c5c 	.word	0x20005c5c
 804a290:	20005c74 	.word	0x20005c74
 804a294:	20005c80 	.word	0x20005c80
 804a298:	20005c9c 	.word	0x20005c9c
 804a29c:	e000ed04 	.word	0xe000ed04

0804a2a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 804a2a0:	b580      	push	{r7, lr}
 804a2a2:	b08a      	sub	sp, #40	; 0x28
 804a2a4:	af00      	add	r7, sp, #0
 804a2a6:	6078      	str	r0, [r7, #4]
 804a2a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 804a2aa:	2300      	movs	r3, #0
 804a2ac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 804a2ae:	687b      	ldr	r3, [r7, #4]
 804a2b0:	2b00      	cmp	r3, #0
 804a2b2:	d10c      	bne.n	804a2ce <vTaskDelayUntil+0x2e>
	__asm volatile
 804a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a2b8:	b672      	cpsid	i
 804a2ba:	f383 8811 	msr	BASEPRI, r3
 804a2be:	f3bf 8f6f 	isb	sy
 804a2c2:	f3bf 8f4f 	dsb	sy
 804a2c6:	b662      	cpsie	i
 804a2c8:	617b      	str	r3, [r7, #20]
}
 804a2ca:	bf00      	nop
 804a2cc:	e7fe      	b.n	804a2cc <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 804a2ce:	683b      	ldr	r3, [r7, #0]
 804a2d0:	2b00      	cmp	r3, #0
 804a2d2:	d10c      	bne.n	804a2ee <vTaskDelayUntil+0x4e>
	__asm volatile
 804a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a2d8:	b672      	cpsid	i
 804a2da:	f383 8811 	msr	BASEPRI, r3
 804a2de:	f3bf 8f6f 	isb	sy
 804a2e2:	f3bf 8f4f 	dsb	sy
 804a2e6:	b662      	cpsie	i
 804a2e8:	613b      	str	r3, [r7, #16]
}
 804a2ea:	bf00      	nop
 804a2ec:	e7fe      	b.n	804a2ec <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 804a2ee:	4b2b      	ldr	r3, [pc, #172]	; (804a39c <vTaskDelayUntil+0xfc>)
 804a2f0:	681b      	ldr	r3, [r3, #0]
 804a2f2:	2b00      	cmp	r3, #0
 804a2f4:	d00c      	beq.n	804a310 <vTaskDelayUntil+0x70>
	__asm volatile
 804a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a2fa:	b672      	cpsid	i
 804a2fc:	f383 8811 	msr	BASEPRI, r3
 804a300:	f3bf 8f6f 	isb	sy
 804a304:	f3bf 8f4f 	dsb	sy
 804a308:	b662      	cpsie	i
 804a30a:	60fb      	str	r3, [r7, #12]
}
 804a30c:	bf00      	nop
 804a30e:	e7fe      	b.n	804a30e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 804a310:	f000 f8ee 	bl	804a4f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 804a314:	4b22      	ldr	r3, [pc, #136]	; (804a3a0 <vTaskDelayUntil+0x100>)
 804a316:	681b      	ldr	r3, [r3, #0]
 804a318:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 804a31a:	687b      	ldr	r3, [r7, #4]
 804a31c:	681b      	ldr	r3, [r3, #0]
 804a31e:	683a      	ldr	r2, [r7, #0]
 804a320:	4413      	add	r3, r2
 804a322:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 804a324:	687b      	ldr	r3, [r7, #4]
 804a326:	681b      	ldr	r3, [r3, #0]
 804a328:	6a3a      	ldr	r2, [r7, #32]
 804a32a:	429a      	cmp	r2, r3
 804a32c:	d20b      	bcs.n	804a346 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 804a32e:	687b      	ldr	r3, [r7, #4]
 804a330:	681b      	ldr	r3, [r3, #0]
 804a332:	69fa      	ldr	r2, [r7, #28]
 804a334:	429a      	cmp	r2, r3
 804a336:	d211      	bcs.n	804a35c <vTaskDelayUntil+0xbc>
 804a338:	69fa      	ldr	r2, [r7, #28]
 804a33a:	6a3b      	ldr	r3, [r7, #32]
 804a33c:	429a      	cmp	r2, r3
 804a33e:	d90d      	bls.n	804a35c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 804a340:	2301      	movs	r3, #1
 804a342:	627b      	str	r3, [r7, #36]	; 0x24
 804a344:	e00a      	b.n	804a35c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 804a346:	687b      	ldr	r3, [r7, #4]
 804a348:	681b      	ldr	r3, [r3, #0]
 804a34a:	69fa      	ldr	r2, [r7, #28]
 804a34c:	429a      	cmp	r2, r3
 804a34e:	d303      	bcc.n	804a358 <vTaskDelayUntil+0xb8>
 804a350:	69fa      	ldr	r2, [r7, #28]
 804a352:	6a3b      	ldr	r3, [r7, #32]
 804a354:	429a      	cmp	r2, r3
 804a356:	d901      	bls.n	804a35c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 804a358:	2301      	movs	r3, #1
 804a35a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 804a35c:	687b      	ldr	r3, [r7, #4]
 804a35e:	69fa      	ldr	r2, [r7, #28]
 804a360:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 804a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804a364:	2b00      	cmp	r3, #0
 804a366:	d006      	beq.n	804a376 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 804a368:	69fa      	ldr	r2, [r7, #28]
 804a36a:	6a3b      	ldr	r3, [r7, #32]
 804a36c:	1ad3      	subs	r3, r2, r3
 804a36e:	2100      	movs	r1, #0
 804a370:	4618      	mov	r0, r3
 804a372:	f000 fe71 	bl	804b058 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 804a376:	f000 f8c9 	bl	804a50c <xTaskResumeAll>
 804a37a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 804a37c:	69bb      	ldr	r3, [r7, #24]
 804a37e:	2b00      	cmp	r3, #0
 804a380:	d107      	bne.n	804a392 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 804a382:	4b08      	ldr	r3, [pc, #32]	; (804a3a4 <vTaskDelayUntil+0x104>)
 804a384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804a388:	601a      	str	r2, [r3, #0]
 804a38a:	f3bf 8f4f 	dsb	sy
 804a38e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 804a392:	bf00      	nop
 804a394:	3728      	adds	r7, #40	; 0x28
 804a396:	46bd      	mov	sp, r7
 804a398:	bd80      	pop	{r7, pc}
 804a39a:	bf00      	nop
 804a39c:	20005c9c 	.word	0x20005c9c
 804a3a0:	20005c78 	.word	0x20005c78
 804a3a4:	e000ed04 	.word	0xe000ed04

0804a3a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 804a3a8:	b580      	push	{r7, lr}
 804a3aa:	b084      	sub	sp, #16
 804a3ac:	af00      	add	r7, sp, #0
 804a3ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 804a3b0:	2300      	movs	r3, #0
 804a3b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 804a3b4:	687b      	ldr	r3, [r7, #4]
 804a3b6:	2b00      	cmp	r3, #0
 804a3b8:	d019      	beq.n	804a3ee <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 804a3ba:	4b14      	ldr	r3, [pc, #80]	; (804a40c <vTaskDelay+0x64>)
 804a3bc:	681b      	ldr	r3, [r3, #0]
 804a3be:	2b00      	cmp	r3, #0
 804a3c0:	d00c      	beq.n	804a3dc <vTaskDelay+0x34>
	__asm volatile
 804a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a3c6:	b672      	cpsid	i
 804a3c8:	f383 8811 	msr	BASEPRI, r3
 804a3cc:	f3bf 8f6f 	isb	sy
 804a3d0:	f3bf 8f4f 	dsb	sy
 804a3d4:	b662      	cpsie	i
 804a3d6:	60bb      	str	r3, [r7, #8]
}
 804a3d8:	bf00      	nop
 804a3da:	e7fe      	b.n	804a3da <vTaskDelay+0x32>
			vTaskSuspendAll();
 804a3dc:	f000 f888 	bl	804a4f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 804a3e0:	2100      	movs	r1, #0
 804a3e2:	6878      	ldr	r0, [r7, #4]
 804a3e4:	f000 fe38 	bl	804b058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 804a3e8:	f000 f890 	bl	804a50c <xTaskResumeAll>
 804a3ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 804a3ee:	68fb      	ldr	r3, [r7, #12]
 804a3f0:	2b00      	cmp	r3, #0
 804a3f2:	d107      	bne.n	804a404 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 804a3f4:	4b06      	ldr	r3, [pc, #24]	; (804a410 <vTaskDelay+0x68>)
 804a3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804a3fa:	601a      	str	r2, [r3, #0]
 804a3fc:	f3bf 8f4f 	dsb	sy
 804a400:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 804a404:	bf00      	nop
 804a406:	3710      	adds	r7, #16
 804a408:	46bd      	mov	sp, r7
 804a40a:	bd80      	pop	{r7, pc}
 804a40c:	20005c9c 	.word	0x20005c9c
 804a410:	e000ed04 	.word	0xe000ed04

0804a414 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 804a414:	b580      	push	{r7, lr}
 804a416:	b08a      	sub	sp, #40	; 0x28
 804a418:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 804a41a:	2300      	movs	r3, #0
 804a41c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 804a41e:	2300      	movs	r3, #0
 804a420:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 804a422:	463a      	mov	r2, r7
 804a424:	1d39      	adds	r1, r7, #4
 804a426:	f107 0308 	add.w	r3, r7, #8
 804a42a:	4618      	mov	r0, r3
 804a42c:	f7f6 fef2 	bl	8041214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 804a430:	6839      	ldr	r1, [r7, #0]
 804a432:	687b      	ldr	r3, [r7, #4]
 804a434:	68ba      	ldr	r2, [r7, #8]
 804a436:	9202      	str	r2, [sp, #8]
 804a438:	9301      	str	r3, [sp, #4]
 804a43a:	2300      	movs	r3, #0
 804a43c:	9300      	str	r3, [sp, #0]
 804a43e:	2300      	movs	r3, #0
 804a440:	460a      	mov	r2, r1
 804a442:	4923      	ldr	r1, [pc, #140]	; (804a4d0 <vTaskStartScheduler+0xbc>)
 804a444:	4823      	ldr	r0, [pc, #140]	; (804a4d4 <vTaskStartScheduler+0xc0>)
 804a446:	f7ff fce7 	bl	8049e18 <xTaskCreateStatic>
 804a44a:	4603      	mov	r3, r0
 804a44c:	4a22      	ldr	r2, [pc, #136]	; (804a4d8 <vTaskStartScheduler+0xc4>)
 804a44e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 804a450:	4b21      	ldr	r3, [pc, #132]	; (804a4d8 <vTaskStartScheduler+0xc4>)
 804a452:	681b      	ldr	r3, [r3, #0]
 804a454:	2b00      	cmp	r3, #0
 804a456:	d002      	beq.n	804a45e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 804a458:	2301      	movs	r3, #1
 804a45a:	617b      	str	r3, [r7, #20]
 804a45c:	e001      	b.n	804a462 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 804a45e:	2300      	movs	r3, #0
 804a460:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 804a462:	697b      	ldr	r3, [r7, #20]
 804a464:	2b01      	cmp	r3, #1
 804a466:	d11d      	bne.n	804a4a4 <vTaskStartScheduler+0x90>
	__asm volatile
 804a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a46c:	b672      	cpsid	i
 804a46e:	f383 8811 	msr	BASEPRI, r3
 804a472:	f3bf 8f6f 	isb	sy
 804a476:	f3bf 8f4f 	dsb	sy
 804a47a:	b662      	cpsie	i
 804a47c:	613b      	str	r3, [r7, #16]
}
 804a47e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 804a480:	4b16      	ldr	r3, [pc, #88]	; (804a4dc <vTaskStartScheduler+0xc8>)
 804a482:	681b      	ldr	r3, [r3, #0]
 804a484:	334c      	adds	r3, #76	; 0x4c
 804a486:	4a16      	ldr	r2, [pc, #88]	; (804a4e0 <vTaskStartScheduler+0xcc>)
 804a488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 804a48a:	4b16      	ldr	r3, [pc, #88]	; (804a4e4 <vTaskStartScheduler+0xd0>)
 804a48c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804a490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 804a492:	4b15      	ldr	r3, [pc, #84]	; (804a4e8 <vTaskStartScheduler+0xd4>)
 804a494:	2201      	movs	r2, #1
 804a496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 804a498:	4b14      	ldr	r3, [pc, #80]	; (804a4ec <vTaskStartScheduler+0xd8>)
 804a49a:	2200      	movs	r2, #0
 804a49c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 804a49e:	f000 fecf 	bl	804b240 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 804a4a2:	e010      	b.n	804a4c6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 804a4a4:	697b      	ldr	r3, [r7, #20]
 804a4a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804a4aa:	d10c      	bne.n	804a4c6 <vTaskStartScheduler+0xb2>
	__asm volatile
 804a4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a4b0:	b672      	cpsid	i
 804a4b2:	f383 8811 	msr	BASEPRI, r3
 804a4b6:	f3bf 8f6f 	isb	sy
 804a4ba:	f3bf 8f4f 	dsb	sy
 804a4be:	b662      	cpsie	i
 804a4c0:	60fb      	str	r3, [r7, #12]
}
 804a4c2:	bf00      	nop
 804a4c4:	e7fe      	b.n	804a4c4 <vTaskStartScheduler+0xb0>
}
 804a4c6:	bf00      	nop
 804a4c8:	3718      	adds	r7, #24
 804a4ca:	46bd      	mov	sp, r7
 804a4cc:	bd80      	pop	{r7, pc}
 804a4ce:	bf00      	nop
 804a4d0:	0805a318 	.word	0x0805a318
 804a4d4:	0804aaed 	.word	0x0804aaed
 804a4d8:	20005c98 	.word	0x20005c98
 804a4dc:	20005b74 	.word	0x20005b74
 804a4e0:	20000034 	.word	0x20000034
 804a4e4:	20005c94 	.word	0x20005c94
 804a4e8:	20005c80 	.word	0x20005c80
 804a4ec:	20005c78 	.word	0x20005c78

0804a4f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 804a4f0:	b480      	push	{r7}
 804a4f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 804a4f4:	4b04      	ldr	r3, [pc, #16]	; (804a508 <vTaskSuspendAll+0x18>)
 804a4f6:	681b      	ldr	r3, [r3, #0]
 804a4f8:	3301      	adds	r3, #1
 804a4fa:	4a03      	ldr	r2, [pc, #12]	; (804a508 <vTaskSuspendAll+0x18>)
 804a4fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 804a4fe:	bf00      	nop
 804a500:	46bd      	mov	sp, r7
 804a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a506:	4770      	bx	lr
 804a508:	20005c9c 	.word	0x20005c9c

0804a50c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 804a50c:	b580      	push	{r7, lr}
 804a50e:	b084      	sub	sp, #16
 804a510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 804a512:	2300      	movs	r3, #0
 804a514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 804a516:	2300      	movs	r3, #0
 804a518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 804a51a:	4b42      	ldr	r3, [pc, #264]	; (804a624 <xTaskResumeAll+0x118>)
 804a51c:	681b      	ldr	r3, [r3, #0]
 804a51e:	2b00      	cmp	r3, #0
 804a520:	d10c      	bne.n	804a53c <xTaskResumeAll+0x30>
	__asm volatile
 804a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a526:	b672      	cpsid	i
 804a528:	f383 8811 	msr	BASEPRI, r3
 804a52c:	f3bf 8f6f 	isb	sy
 804a530:	f3bf 8f4f 	dsb	sy
 804a534:	b662      	cpsie	i
 804a536:	603b      	str	r3, [r7, #0]
}
 804a538:	bf00      	nop
 804a53a:	e7fe      	b.n	804a53a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 804a53c:	f000 fefe 	bl	804b33c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 804a540:	4b38      	ldr	r3, [pc, #224]	; (804a624 <xTaskResumeAll+0x118>)
 804a542:	681b      	ldr	r3, [r3, #0]
 804a544:	3b01      	subs	r3, #1
 804a546:	4a37      	ldr	r2, [pc, #220]	; (804a624 <xTaskResumeAll+0x118>)
 804a548:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804a54a:	4b36      	ldr	r3, [pc, #216]	; (804a624 <xTaskResumeAll+0x118>)
 804a54c:	681b      	ldr	r3, [r3, #0]
 804a54e:	2b00      	cmp	r3, #0
 804a550:	d161      	bne.n	804a616 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 804a552:	4b35      	ldr	r3, [pc, #212]	; (804a628 <xTaskResumeAll+0x11c>)
 804a554:	681b      	ldr	r3, [r3, #0]
 804a556:	2b00      	cmp	r3, #0
 804a558:	d05d      	beq.n	804a616 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 804a55a:	e02e      	b.n	804a5ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804a55c:	4b33      	ldr	r3, [pc, #204]	; (804a62c <xTaskResumeAll+0x120>)
 804a55e:	68db      	ldr	r3, [r3, #12]
 804a560:	68db      	ldr	r3, [r3, #12]
 804a562:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804a564:	68fb      	ldr	r3, [r7, #12]
 804a566:	3318      	adds	r3, #24
 804a568:	4618      	mov	r0, r3
 804a56a:	f7fe fc1c 	bl	8048da6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 804a56e:	68fb      	ldr	r3, [r7, #12]
 804a570:	3304      	adds	r3, #4
 804a572:	4618      	mov	r0, r3
 804a574:	f7fe fc17 	bl	8048da6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 804a578:	68fb      	ldr	r3, [r7, #12]
 804a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a57c:	2201      	movs	r2, #1
 804a57e:	409a      	lsls	r2, r3
 804a580:	4b2b      	ldr	r3, [pc, #172]	; (804a630 <xTaskResumeAll+0x124>)
 804a582:	681b      	ldr	r3, [r3, #0]
 804a584:	4313      	orrs	r3, r2
 804a586:	4a2a      	ldr	r2, [pc, #168]	; (804a630 <xTaskResumeAll+0x124>)
 804a588:	6013      	str	r3, [r2, #0]
 804a58a:	68fb      	ldr	r3, [r7, #12]
 804a58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a58e:	4613      	mov	r3, r2
 804a590:	009b      	lsls	r3, r3, #2
 804a592:	4413      	add	r3, r2
 804a594:	009b      	lsls	r3, r3, #2
 804a596:	4a27      	ldr	r2, [pc, #156]	; (804a634 <xTaskResumeAll+0x128>)
 804a598:	441a      	add	r2, r3
 804a59a:	68fb      	ldr	r3, [r7, #12]
 804a59c:	3304      	adds	r3, #4
 804a59e:	4619      	mov	r1, r3
 804a5a0:	4610      	mov	r0, r2
 804a5a2:	f7fe fba3 	bl	8048cec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 804a5a6:	68fb      	ldr	r3, [r7, #12]
 804a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a5aa:	4b23      	ldr	r3, [pc, #140]	; (804a638 <xTaskResumeAll+0x12c>)
 804a5ac:	681b      	ldr	r3, [r3, #0]
 804a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a5b0:	429a      	cmp	r2, r3
 804a5b2:	d302      	bcc.n	804a5ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 804a5b4:	4b21      	ldr	r3, [pc, #132]	; (804a63c <xTaskResumeAll+0x130>)
 804a5b6:	2201      	movs	r2, #1
 804a5b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 804a5ba:	4b1c      	ldr	r3, [pc, #112]	; (804a62c <xTaskResumeAll+0x120>)
 804a5bc:	681b      	ldr	r3, [r3, #0]
 804a5be:	2b00      	cmp	r3, #0
 804a5c0:	d1cc      	bne.n	804a55c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 804a5c2:	68fb      	ldr	r3, [r7, #12]
 804a5c4:	2b00      	cmp	r3, #0
 804a5c6:	d001      	beq.n	804a5cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 804a5c8:	f000 fb4c 	bl	804ac64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 804a5cc:	4b1c      	ldr	r3, [pc, #112]	; (804a640 <xTaskResumeAll+0x134>)
 804a5ce:	681b      	ldr	r3, [r3, #0]
 804a5d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 804a5d2:	687b      	ldr	r3, [r7, #4]
 804a5d4:	2b00      	cmp	r3, #0
 804a5d6:	d010      	beq.n	804a5fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 804a5d8:	f000 f858 	bl	804a68c <xTaskIncrementTick>
 804a5dc:	4603      	mov	r3, r0
 804a5de:	2b00      	cmp	r3, #0
 804a5e0:	d002      	beq.n	804a5e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 804a5e2:	4b16      	ldr	r3, [pc, #88]	; (804a63c <xTaskResumeAll+0x130>)
 804a5e4:	2201      	movs	r2, #1
 804a5e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 804a5e8:	687b      	ldr	r3, [r7, #4]
 804a5ea:	3b01      	subs	r3, #1
 804a5ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 804a5ee:	687b      	ldr	r3, [r7, #4]
 804a5f0:	2b00      	cmp	r3, #0
 804a5f2:	d1f1      	bne.n	804a5d8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 804a5f4:	4b12      	ldr	r3, [pc, #72]	; (804a640 <xTaskResumeAll+0x134>)
 804a5f6:	2200      	movs	r2, #0
 804a5f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 804a5fa:	4b10      	ldr	r3, [pc, #64]	; (804a63c <xTaskResumeAll+0x130>)
 804a5fc:	681b      	ldr	r3, [r3, #0]
 804a5fe:	2b00      	cmp	r3, #0
 804a600:	d009      	beq.n	804a616 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 804a602:	2301      	movs	r3, #1
 804a604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 804a606:	4b0f      	ldr	r3, [pc, #60]	; (804a644 <xTaskResumeAll+0x138>)
 804a608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804a60c:	601a      	str	r2, [r3, #0]
 804a60e:	f3bf 8f4f 	dsb	sy
 804a612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 804a616:	f000 fec5 	bl	804b3a4 <vPortExitCritical>

	return xAlreadyYielded;
 804a61a:	68bb      	ldr	r3, [r7, #8]
}
 804a61c:	4618      	mov	r0, r3
 804a61e:	3710      	adds	r7, #16
 804a620:	46bd      	mov	sp, r7
 804a622:	bd80      	pop	{r7, pc}
 804a624:	20005c9c 	.word	0x20005c9c
 804a628:	20005c74 	.word	0x20005c74
 804a62c:	20005c34 	.word	0x20005c34
 804a630:	20005c7c 	.word	0x20005c7c
 804a634:	20005b78 	.word	0x20005b78
 804a638:	20005b74 	.word	0x20005b74
 804a63c:	20005c88 	.word	0x20005c88
 804a640:	20005c84 	.word	0x20005c84
 804a644:	e000ed04 	.word	0xe000ed04

0804a648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 804a648:	b480      	push	{r7}
 804a64a:	b083      	sub	sp, #12
 804a64c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 804a64e:	4b05      	ldr	r3, [pc, #20]	; (804a664 <xTaskGetTickCount+0x1c>)
 804a650:	681b      	ldr	r3, [r3, #0]
 804a652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 804a654:	687b      	ldr	r3, [r7, #4]
}
 804a656:	4618      	mov	r0, r3
 804a658:	370c      	adds	r7, #12
 804a65a:	46bd      	mov	sp, r7
 804a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a660:	4770      	bx	lr
 804a662:	bf00      	nop
 804a664:	20005c78 	.word	0x20005c78

0804a668 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 804a668:	b580      	push	{r7, lr}
 804a66a:	b082      	sub	sp, #8
 804a66c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 804a66e:	f000 ff4d 	bl	804b50c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 804a672:	2300      	movs	r3, #0
 804a674:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 804a676:	4b04      	ldr	r3, [pc, #16]	; (804a688 <xTaskGetTickCountFromISR+0x20>)
 804a678:	681b      	ldr	r3, [r3, #0]
 804a67a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 804a67c:	683b      	ldr	r3, [r7, #0]
}
 804a67e:	4618      	mov	r0, r3
 804a680:	3708      	adds	r7, #8
 804a682:	46bd      	mov	sp, r7
 804a684:	bd80      	pop	{r7, pc}
 804a686:	bf00      	nop
 804a688:	20005c78 	.word	0x20005c78

0804a68c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 804a68c:	b580      	push	{r7, lr}
 804a68e:	b086      	sub	sp, #24
 804a690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 804a692:	2300      	movs	r3, #0
 804a694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804a696:	4b4f      	ldr	r3, [pc, #316]	; (804a7d4 <xTaskIncrementTick+0x148>)
 804a698:	681b      	ldr	r3, [r3, #0]
 804a69a:	2b00      	cmp	r3, #0
 804a69c:	f040 808a 	bne.w	804a7b4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 804a6a0:	4b4d      	ldr	r3, [pc, #308]	; (804a7d8 <xTaskIncrementTick+0x14c>)
 804a6a2:	681b      	ldr	r3, [r3, #0]
 804a6a4:	3301      	adds	r3, #1
 804a6a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 804a6a8:	4a4b      	ldr	r2, [pc, #300]	; (804a7d8 <xTaskIncrementTick+0x14c>)
 804a6aa:	693b      	ldr	r3, [r7, #16]
 804a6ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 804a6ae:	693b      	ldr	r3, [r7, #16]
 804a6b0:	2b00      	cmp	r3, #0
 804a6b2:	d122      	bne.n	804a6fa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 804a6b4:	4b49      	ldr	r3, [pc, #292]	; (804a7dc <xTaskIncrementTick+0x150>)
 804a6b6:	681b      	ldr	r3, [r3, #0]
 804a6b8:	681b      	ldr	r3, [r3, #0]
 804a6ba:	2b00      	cmp	r3, #0
 804a6bc:	d00c      	beq.n	804a6d8 <xTaskIncrementTick+0x4c>
	__asm volatile
 804a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a6c2:	b672      	cpsid	i
 804a6c4:	f383 8811 	msr	BASEPRI, r3
 804a6c8:	f3bf 8f6f 	isb	sy
 804a6cc:	f3bf 8f4f 	dsb	sy
 804a6d0:	b662      	cpsie	i
 804a6d2:	603b      	str	r3, [r7, #0]
}
 804a6d4:	bf00      	nop
 804a6d6:	e7fe      	b.n	804a6d6 <xTaskIncrementTick+0x4a>
 804a6d8:	4b40      	ldr	r3, [pc, #256]	; (804a7dc <xTaskIncrementTick+0x150>)
 804a6da:	681b      	ldr	r3, [r3, #0]
 804a6dc:	60fb      	str	r3, [r7, #12]
 804a6de:	4b40      	ldr	r3, [pc, #256]	; (804a7e0 <xTaskIncrementTick+0x154>)
 804a6e0:	681b      	ldr	r3, [r3, #0]
 804a6e2:	4a3e      	ldr	r2, [pc, #248]	; (804a7dc <xTaskIncrementTick+0x150>)
 804a6e4:	6013      	str	r3, [r2, #0]
 804a6e6:	4a3e      	ldr	r2, [pc, #248]	; (804a7e0 <xTaskIncrementTick+0x154>)
 804a6e8:	68fb      	ldr	r3, [r7, #12]
 804a6ea:	6013      	str	r3, [r2, #0]
 804a6ec:	4b3d      	ldr	r3, [pc, #244]	; (804a7e4 <xTaskIncrementTick+0x158>)
 804a6ee:	681b      	ldr	r3, [r3, #0]
 804a6f0:	3301      	adds	r3, #1
 804a6f2:	4a3c      	ldr	r2, [pc, #240]	; (804a7e4 <xTaskIncrementTick+0x158>)
 804a6f4:	6013      	str	r3, [r2, #0]
 804a6f6:	f000 fab5 	bl	804ac64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 804a6fa:	4b3b      	ldr	r3, [pc, #236]	; (804a7e8 <xTaskIncrementTick+0x15c>)
 804a6fc:	681b      	ldr	r3, [r3, #0]
 804a6fe:	693a      	ldr	r2, [r7, #16]
 804a700:	429a      	cmp	r2, r3
 804a702:	d348      	bcc.n	804a796 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 804a704:	4b35      	ldr	r3, [pc, #212]	; (804a7dc <xTaskIncrementTick+0x150>)
 804a706:	681b      	ldr	r3, [r3, #0]
 804a708:	681b      	ldr	r3, [r3, #0]
 804a70a:	2b00      	cmp	r3, #0
 804a70c:	d104      	bne.n	804a718 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804a70e:	4b36      	ldr	r3, [pc, #216]	; (804a7e8 <xTaskIncrementTick+0x15c>)
 804a710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804a714:	601a      	str	r2, [r3, #0]
					break;
 804a716:	e03e      	b.n	804a796 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804a718:	4b30      	ldr	r3, [pc, #192]	; (804a7dc <xTaskIncrementTick+0x150>)
 804a71a:	681b      	ldr	r3, [r3, #0]
 804a71c:	68db      	ldr	r3, [r3, #12]
 804a71e:	68db      	ldr	r3, [r3, #12]
 804a720:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 804a722:	68bb      	ldr	r3, [r7, #8]
 804a724:	685b      	ldr	r3, [r3, #4]
 804a726:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 804a728:	693a      	ldr	r2, [r7, #16]
 804a72a:	687b      	ldr	r3, [r7, #4]
 804a72c:	429a      	cmp	r2, r3
 804a72e:	d203      	bcs.n	804a738 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 804a730:	4a2d      	ldr	r2, [pc, #180]	; (804a7e8 <xTaskIncrementTick+0x15c>)
 804a732:	687b      	ldr	r3, [r7, #4]
 804a734:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 804a736:	e02e      	b.n	804a796 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 804a738:	68bb      	ldr	r3, [r7, #8]
 804a73a:	3304      	adds	r3, #4
 804a73c:	4618      	mov	r0, r3
 804a73e:	f7fe fb32 	bl	8048da6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 804a742:	68bb      	ldr	r3, [r7, #8]
 804a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a746:	2b00      	cmp	r3, #0
 804a748:	d004      	beq.n	804a754 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 804a74a:	68bb      	ldr	r3, [r7, #8]
 804a74c:	3318      	adds	r3, #24
 804a74e:	4618      	mov	r0, r3
 804a750:	f7fe fb29 	bl	8048da6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 804a754:	68bb      	ldr	r3, [r7, #8]
 804a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a758:	2201      	movs	r2, #1
 804a75a:	409a      	lsls	r2, r3
 804a75c:	4b23      	ldr	r3, [pc, #140]	; (804a7ec <xTaskIncrementTick+0x160>)
 804a75e:	681b      	ldr	r3, [r3, #0]
 804a760:	4313      	orrs	r3, r2
 804a762:	4a22      	ldr	r2, [pc, #136]	; (804a7ec <xTaskIncrementTick+0x160>)
 804a764:	6013      	str	r3, [r2, #0]
 804a766:	68bb      	ldr	r3, [r7, #8]
 804a768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a76a:	4613      	mov	r3, r2
 804a76c:	009b      	lsls	r3, r3, #2
 804a76e:	4413      	add	r3, r2
 804a770:	009b      	lsls	r3, r3, #2
 804a772:	4a1f      	ldr	r2, [pc, #124]	; (804a7f0 <xTaskIncrementTick+0x164>)
 804a774:	441a      	add	r2, r3
 804a776:	68bb      	ldr	r3, [r7, #8]
 804a778:	3304      	adds	r3, #4
 804a77a:	4619      	mov	r1, r3
 804a77c:	4610      	mov	r0, r2
 804a77e:	f7fe fab5 	bl	8048cec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 804a782:	68bb      	ldr	r3, [r7, #8]
 804a784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a786:	4b1b      	ldr	r3, [pc, #108]	; (804a7f4 <xTaskIncrementTick+0x168>)
 804a788:	681b      	ldr	r3, [r3, #0]
 804a78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a78c:	429a      	cmp	r2, r3
 804a78e:	d3b9      	bcc.n	804a704 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 804a790:	2301      	movs	r3, #1
 804a792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 804a794:	e7b6      	b.n	804a704 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 804a796:	4b17      	ldr	r3, [pc, #92]	; (804a7f4 <xTaskIncrementTick+0x168>)
 804a798:	681b      	ldr	r3, [r3, #0]
 804a79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a79c:	4914      	ldr	r1, [pc, #80]	; (804a7f0 <xTaskIncrementTick+0x164>)
 804a79e:	4613      	mov	r3, r2
 804a7a0:	009b      	lsls	r3, r3, #2
 804a7a2:	4413      	add	r3, r2
 804a7a4:	009b      	lsls	r3, r3, #2
 804a7a6:	440b      	add	r3, r1
 804a7a8:	681b      	ldr	r3, [r3, #0]
 804a7aa:	2b01      	cmp	r3, #1
 804a7ac:	d907      	bls.n	804a7be <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 804a7ae:	2301      	movs	r3, #1
 804a7b0:	617b      	str	r3, [r7, #20]
 804a7b2:	e004      	b.n	804a7be <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 804a7b4:	4b10      	ldr	r3, [pc, #64]	; (804a7f8 <xTaskIncrementTick+0x16c>)
 804a7b6:	681b      	ldr	r3, [r3, #0]
 804a7b8:	3301      	adds	r3, #1
 804a7ba:	4a0f      	ldr	r2, [pc, #60]	; (804a7f8 <xTaskIncrementTick+0x16c>)
 804a7bc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 804a7be:	4b0f      	ldr	r3, [pc, #60]	; (804a7fc <xTaskIncrementTick+0x170>)
 804a7c0:	681b      	ldr	r3, [r3, #0]
 804a7c2:	2b00      	cmp	r3, #0
 804a7c4:	d001      	beq.n	804a7ca <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 804a7c6:	2301      	movs	r3, #1
 804a7c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 804a7ca:	697b      	ldr	r3, [r7, #20]
}
 804a7cc:	4618      	mov	r0, r3
 804a7ce:	3718      	adds	r7, #24
 804a7d0:	46bd      	mov	sp, r7
 804a7d2:	bd80      	pop	{r7, pc}
 804a7d4:	20005c9c 	.word	0x20005c9c
 804a7d8:	20005c78 	.word	0x20005c78
 804a7dc:	20005c2c 	.word	0x20005c2c
 804a7e0:	20005c30 	.word	0x20005c30
 804a7e4:	20005c8c 	.word	0x20005c8c
 804a7e8:	20005c94 	.word	0x20005c94
 804a7ec:	20005c7c 	.word	0x20005c7c
 804a7f0:	20005b78 	.word	0x20005b78
 804a7f4:	20005b74 	.word	0x20005b74
 804a7f8:	20005c84 	.word	0x20005c84
 804a7fc:	20005c88 	.word	0x20005c88

0804a800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 804a800:	b480      	push	{r7}
 804a802:	b087      	sub	sp, #28
 804a804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 804a806:	4b2a      	ldr	r3, [pc, #168]	; (804a8b0 <vTaskSwitchContext+0xb0>)
 804a808:	681b      	ldr	r3, [r3, #0]
 804a80a:	2b00      	cmp	r3, #0
 804a80c:	d003      	beq.n	804a816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 804a80e:	4b29      	ldr	r3, [pc, #164]	; (804a8b4 <vTaskSwitchContext+0xb4>)
 804a810:	2201      	movs	r2, #1
 804a812:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 804a814:	e046      	b.n	804a8a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 804a816:	4b27      	ldr	r3, [pc, #156]	; (804a8b4 <vTaskSwitchContext+0xb4>)
 804a818:	2200      	movs	r2, #0
 804a81a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804a81c:	4b26      	ldr	r3, [pc, #152]	; (804a8b8 <vTaskSwitchContext+0xb8>)
 804a81e:	681b      	ldr	r3, [r3, #0]
 804a820:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 804a822:	68fb      	ldr	r3, [r7, #12]
 804a824:	fab3 f383 	clz	r3, r3
 804a828:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 804a82a:	7afb      	ldrb	r3, [r7, #11]
 804a82c:	f1c3 031f 	rsb	r3, r3, #31
 804a830:	617b      	str	r3, [r7, #20]
 804a832:	4922      	ldr	r1, [pc, #136]	; (804a8bc <vTaskSwitchContext+0xbc>)
 804a834:	697a      	ldr	r2, [r7, #20]
 804a836:	4613      	mov	r3, r2
 804a838:	009b      	lsls	r3, r3, #2
 804a83a:	4413      	add	r3, r2
 804a83c:	009b      	lsls	r3, r3, #2
 804a83e:	440b      	add	r3, r1
 804a840:	681b      	ldr	r3, [r3, #0]
 804a842:	2b00      	cmp	r3, #0
 804a844:	d10c      	bne.n	804a860 <vTaskSwitchContext+0x60>
	__asm volatile
 804a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a84a:	b672      	cpsid	i
 804a84c:	f383 8811 	msr	BASEPRI, r3
 804a850:	f3bf 8f6f 	isb	sy
 804a854:	f3bf 8f4f 	dsb	sy
 804a858:	b662      	cpsie	i
 804a85a:	607b      	str	r3, [r7, #4]
}
 804a85c:	bf00      	nop
 804a85e:	e7fe      	b.n	804a85e <vTaskSwitchContext+0x5e>
 804a860:	697a      	ldr	r2, [r7, #20]
 804a862:	4613      	mov	r3, r2
 804a864:	009b      	lsls	r3, r3, #2
 804a866:	4413      	add	r3, r2
 804a868:	009b      	lsls	r3, r3, #2
 804a86a:	4a14      	ldr	r2, [pc, #80]	; (804a8bc <vTaskSwitchContext+0xbc>)
 804a86c:	4413      	add	r3, r2
 804a86e:	613b      	str	r3, [r7, #16]
 804a870:	693b      	ldr	r3, [r7, #16]
 804a872:	685b      	ldr	r3, [r3, #4]
 804a874:	685a      	ldr	r2, [r3, #4]
 804a876:	693b      	ldr	r3, [r7, #16]
 804a878:	605a      	str	r2, [r3, #4]
 804a87a:	693b      	ldr	r3, [r7, #16]
 804a87c:	685a      	ldr	r2, [r3, #4]
 804a87e:	693b      	ldr	r3, [r7, #16]
 804a880:	3308      	adds	r3, #8
 804a882:	429a      	cmp	r2, r3
 804a884:	d104      	bne.n	804a890 <vTaskSwitchContext+0x90>
 804a886:	693b      	ldr	r3, [r7, #16]
 804a888:	685b      	ldr	r3, [r3, #4]
 804a88a:	685a      	ldr	r2, [r3, #4]
 804a88c:	693b      	ldr	r3, [r7, #16]
 804a88e:	605a      	str	r2, [r3, #4]
 804a890:	693b      	ldr	r3, [r7, #16]
 804a892:	685b      	ldr	r3, [r3, #4]
 804a894:	68db      	ldr	r3, [r3, #12]
 804a896:	4a0a      	ldr	r2, [pc, #40]	; (804a8c0 <vTaskSwitchContext+0xc0>)
 804a898:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 804a89a:	4b09      	ldr	r3, [pc, #36]	; (804a8c0 <vTaskSwitchContext+0xc0>)
 804a89c:	681b      	ldr	r3, [r3, #0]
 804a89e:	334c      	adds	r3, #76	; 0x4c
 804a8a0:	4a08      	ldr	r2, [pc, #32]	; (804a8c4 <vTaskSwitchContext+0xc4>)
 804a8a2:	6013      	str	r3, [r2, #0]
}
 804a8a4:	bf00      	nop
 804a8a6:	371c      	adds	r7, #28
 804a8a8:	46bd      	mov	sp, r7
 804a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a8ae:	4770      	bx	lr
 804a8b0:	20005c9c 	.word	0x20005c9c
 804a8b4:	20005c88 	.word	0x20005c88
 804a8b8:	20005c7c 	.word	0x20005c7c
 804a8bc:	20005b78 	.word	0x20005b78
 804a8c0:	20005b74 	.word	0x20005b74
 804a8c4:	20000034 	.word	0x20000034

0804a8c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 804a8c8:	b580      	push	{r7, lr}
 804a8ca:	b084      	sub	sp, #16
 804a8cc:	af00      	add	r7, sp, #0
 804a8ce:	6078      	str	r0, [r7, #4]
 804a8d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 804a8d2:	687b      	ldr	r3, [r7, #4]
 804a8d4:	2b00      	cmp	r3, #0
 804a8d6:	d10c      	bne.n	804a8f2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 804a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a8dc:	b672      	cpsid	i
 804a8de:	f383 8811 	msr	BASEPRI, r3
 804a8e2:	f3bf 8f6f 	isb	sy
 804a8e6:	f3bf 8f4f 	dsb	sy
 804a8ea:	b662      	cpsie	i
 804a8ec:	60fb      	str	r3, [r7, #12]
}
 804a8ee:	bf00      	nop
 804a8f0:	e7fe      	b.n	804a8f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 804a8f2:	4b07      	ldr	r3, [pc, #28]	; (804a910 <vTaskPlaceOnEventList+0x48>)
 804a8f4:	681b      	ldr	r3, [r3, #0]
 804a8f6:	3318      	adds	r3, #24
 804a8f8:	4619      	mov	r1, r3
 804a8fa:	6878      	ldr	r0, [r7, #4]
 804a8fc:	f7fe fa1a 	bl	8048d34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 804a900:	2101      	movs	r1, #1
 804a902:	6838      	ldr	r0, [r7, #0]
 804a904:	f000 fba8 	bl	804b058 <prvAddCurrentTaskToDelayedList>
}
 804a908:	bf00      	nop
 804a90a:	3710      	adds	r7, #16
 804a90c:	46bd      	mov	sp, r7
 804a90e:	bd80      	pop	{r7, pc}
 804a910:	20005b74 	.word	0x20005b74

0804a914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 804a914:	b580      	push	{r7, lr}
 804a916:	b086      	sub	sp, #24
 804a918:	af00      	add	r7, sp, #0
 804a91a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804a91c:	687b      	ldr	r3, [r7, #4]
 804a91e:	68db      	ldr	r3, [r3, #12]
 804a920:	68db      	ldr	r3, [r3, #12]
 804a922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 804a924:	693b      	ldr	r3, [r7, #16]
 804a926:	2b00      	cmp	r3, #0
 804a928:	d10c      	bne.n	804a944 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 804a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 804a92e:	b672      	cpsid	i
 804a930:	f383 8811 	msr	BASEPRI, r3
 804a934:	f3bf 8f6f 	isb	sy
 804a938:	f3bf 8f4f 	dsb	sy
 804a93c:	b662      	cpsie	i
 804a93e:	60fb      	str	r3, [r7, #12]
}
 804a940:	bf00      	nop
 804a942:	e7fe      	b.n	804a942 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 804a944:	693b      	ldr	r3, [r7, #16]
 804a946:	3318      	adds	r3, #24
 804a948:	4618      	mov	r0, r3
 804a94a:	f7fe fa2c 	bl	8048da6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804a94e:	4b1d      	ldr	r3, [pc, #116]	; (804a9c4 <xTaskRemoveFromEventList+0xb0>)
 804a950:	681b      	ldr	r3, [r3, #0]
 804a952:	2b00      	cmp	r3, #0
 804a954:	d11c      	bne.n	804a990 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 804a956:	693b      	ldr	r3, [r7, #16]
 804a958:	3304      	adds	r3, #4
 804a95a:	4618      	mov	r0, r3
 804a95c:	f7fe fa23 	bl	8048da6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 804a960:	693b      	ldr	r3, [r7, #16]
 804a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a964:	2201      	movs	r2, #1
 804a966:	409a      	lsls	r2, r3
 804a968:	4b17      	ldr	r3, [pc, #92]	; (804a9c8 <xTaskRemoveFromEventList+0xb4>)
 804a96a:	681b      	ldr	r3, [r3, #0]
 804a96c:	4313      	orrs	r3, r2
 804a96e:	4a16      	ldr	r2, [pc, #88]	; (804a9c8 <xTaskRemoveFromEventList+0xb4>)
 804a970:	6013      	str	r3, [r2, #0]
 804a972:	693b      	ldr	r3, [r7, #16]
 804a974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a976:	4613      	mov	r3, r2
 804a978:	009b      	lsls	r3, r3, #2
 804a97a:	4413      	add	r3, r2
 804a97c:	009b      	lsls	r3, r3, #2
 804a97e:	4a13      	ldr	r2, [pc, #76]	; (804a9cc <xTaskRemoveFromEventList+0xb8>)
 804a980:	441a      	add	r2, r3
 804a982:	693b      	ldr	r3, [r7, #16]
 804a984:	3304      	adds	r3, #4
 804a986:	4619      	mov	r1, r3
 804a988:	4610      	mov	r0, r2
 804a98a:	f7fe f9af 	bl	8048cec <vListInsertEnd>
 804a98e:	e005      	b.n	804a99c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 804a990:	693b      	ldr	r3, [r7, #16]
 804a992:	3318      	adds	r3, #24
 804a994:	4619      	mov	r1, r3
 804a996:	480e      	ldr	r0, [pc, #56]	; (804a9d0 <xTaskRemoveFromEventList+0xbc>)
 804a998:	f7fe f9a8 	bl	8048cec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 804a99c:	693b      	ldr	r3, [r7, #16]
 804a99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804a9a0:	4b0c      	ldr	r3, [pc, #48]	; (804a9d4 <xTaskRemoveFromEventList+0xc0>)
 804a9a2:	681b      	ldr	r3, [r3, #0]
 804a9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a9a6:	429a      	cmp	r2, r3
 804a9a8:	d905      	bls.n	804a9b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 804a9aa:	2301      	movs	r3, #1
 804a9ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 804a9ae:	4b0a      	ldr	r3, [pc, #40]	; (804a9d8 <xTaskRemoveFromEventList+0xc4>)
 804a9b0:	2201      	movs	r2, #1
 804a9b2:	601a      	str	r2, [r3, #0]
 804a9b4:	e001      	b.n	804a9ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 804a9b6:	2300      	movs	r3, #0
 804a9b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 804a9ba:	697b      	ldr	r3, [r7, #20]
}
 804a9bc:	4618      	mov	r0, r3
 804a9be:	3718      	adds	r7, #24
 804a9c0:	46bd      	mov	sp, r7
 804a9c2:	bd80      	pop	{r7, pc}
 804a9c4:	20005c9c 	.word	0x20005c9c
 804a9c8:	20005c7c 	.word	0x20005c7c
 804a9cc:	20005b78 	.word	0x20005b78
 804a9d0:	20005c34 	.word	0x20005c34
 804a9d4:	20005b74 	.word	0x20005b74
 804a9d8:	20005c88 	.word	0x20005c88

0804a9dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 804a9dc:	b480      	push	{r7}
 804a9de:	b083      	sub	sp, #12
 804a9e0:	af00      	add	r7, sp, #0
 804a9e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 804a9e4:	4b06      	ldr	r3, [pc, #24]	; (804aa00 <vTaskInternalSetTimeOutState+0x24>)
 804a9e6:	681a      	ldr	r2, [r3, #0]
 804a9e8:	687b      	ldr	r3, [r7, #4]
 804a9ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 804a9ec:	4b05      	ldr	r3, [pc, #20]	; (804aa04 <vTaskInternalSetTimeOutState+0x28>)
 804a9ee:	681a      	ldr	r2, [r3, #0]
 804a9f0:	687b      	ldr	r3, [r7, #4]
 804a9f2:	605a      	str	r2, [r3, #4]
}
 804a9f4:	bf00      	nop
 804a9f6:	370c      	adds	r7, #12
 804a9f8:	46bd      	mov	sp, r7
 804a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9fe:	4770      	bx	lr
 804aa00:	20005c8c 	.word	0x20005c8c
 804aa04:	20005c78 	.word	0x20005c78

0804aa08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 804aa08:	b580      	push	{r7, lr}
 804aa0a:	b088      	sub	sp, #32
 804aa0c:	af00      	add	r7, sp, #0
 804aa0e:	6078      	str	r0, [r7, #4]
 804aa10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 804aa12:	687b      	ldr	r3, [r7, #4]
 804aa14:	2b00      	cmp	r3, #0
 804aa16:	d10c      	bne.n	804aa32 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 804aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 804aa1c:	b672      	cpsid	i
 804aa1e:	f383 8811 	msr	BASEPRI, r3
 804aa22:	f3bf 8f6f 	isb	sy
 804aa26:	f3bf 8f4f 	dsb	sy
 804aa2a:	b662      	cpsie	i
 804aa2c:	613b      	str	r3, [r7, #16]
}
 804aa2e:	bf00      	nop
 804aa30:	e7fe      	b.n	804aa30 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 804aa32:	683b      	ldr	r3, [r7, #0]
 804aa34:	2b00      	cmp	r3, #0
 804aa36:	d10c      	bne.n	804aa52 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 804aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 804aa3c:	b672      	cpsid	i
 804aa3e:	f383 8811 	msr	BASEPRI, r3
 804aa42:	f3bf 8f6f 	isb	sy
 804aa46:	f3bf 8f4f 	dsb	sy
 804aa4a:	b662      	cpsie	i
 804aa4c:	60fb      	str	r3, [r7, #12]
}
 804aa4e:	bf00      	nop
 804aa50:	e7fe      	b.n	804aa50 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 804aa52:	f000 fc73 	bl	804b33c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 804aa56:	4b1d      	ldr	r3, [pc, #116]	; (804aacc <xTaskCheckForTimeOut+0xc4>)
 804aa58:	681b      	ldr	r3, [r3, #0]
 804aa5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 804aa5c:	687b      	ldr	r3, [r7, #4]
 804aa5e:	685b      	ldr	r3, [r3, #4]
 804aa60:	69ba      	ldr	r2, [r7, #24]
 804aa62:	1ad3      	subs	r3, r2, r3
 804aa64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 804aa66:	683b      	ldr	r3, [r7, #0]
 804aa68:	681b      	ldr	r3, [r3, #0]
 804aa6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804aa6e:	d102      	bne.n	804aa76 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 804aa70:	2300      	movs	r3, #0
 804aa72:	61fb      	str	r3, [r7, #28]
 804aa74:	e023      	b.n	804aabe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 804aa76:	687b      	ldr	r3, [r7, #4]
 804aa78:	681a      	ldr	r2, [r3, #0]
 804aa7a:	4b15      	ldr	r3, [pc, #84]	; (804aad0 <xTaskCheckForTimeOut+0xc8>)
 804aa7c:	681b      	ldr	r3, [r3, #0]
 804aa7e:	429a      	cmp	r2, r3
 804aa80:	d007      	beq.n	804aa92 <xTaskCheckForTimeOut+0x8a>
 804aa82:	687b      	ldr	r3, [r7, #4]
 804aa84:	685b      	ldr	r3, [r3, #4]
 804aa86:	69ba      	ldr	r2, [r7, #24]
 804aa88:	429a      	cmp	r2, r3
 804aa8a:	d302      	bcc.n	804aa92 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 804aa8c:	2301      	movs	r3, #1
 804aa8e:	61fb      	str	r3, [r7, #28]
 804aa90:	e015      	b.n	804aabe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 804aa92:	683b      	ldr	r3, [r7, #0]
 804aa94:	681b      	ldr	r3, [r3, #0]
 804aa96:	697a      	ldr	r2, [r7, #20]
 804aa98:	429a      	cmp	r2, r3
 804aa9a:	d20b      	bcs.n	804aab4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 804aa9c:	683b      	ldr	r3, [r7, #0]
 804aa9e:	681a      	ldr	r2, [r3, #0]
 804aaa0:	697b      	ldr	r3, [r7, #20]
 804aaa2:	1ad2      	subs	r2, r2, r3
 804aaa4:	683b      	ldr	r3, [r7, #0]
 804aaa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 804aaa8:	6878      	ldr	r0, [r7, #4]
 804aaaa:	f7ff ff97 	bl	804a9dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 804aaae:	2300      	movs	r3, #0
 804aab0:	61fb      	str	r3, [r7, #28]
 804aab2:	e004      	b.n	804aabe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 804aab4:	683b      	ldr	r3, [r7, #0]
 804aab6:	2200      	movs	r2, #0
 804aab8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 804aaba:	2301      	movs	r3, #1
 804aabc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 804aabe:	f000 fc71 	bl	804b3a4 <vPortExitCritical>

	return xReturn;
 804aac2:	69fb      	ldr	r3, [r7, #28]
}
 804aac4:	4618      	mov	r0, r3
 804aac6:	3720      	adds	r7, #32
 804aac8:	46bd      	mov	sp, r7
 804aaca:	bd80      	pop	{r7, pc}
 804aacc:	20005c78 	.word	0x20005c78
 804aad0:	20005c8c 	.word	0x20005c8c

0804aad4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 804aad4:	b480      	push	{r7}
 804aad6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 804aad8:	4b03      	ldr	r3, [pc, #12]	; (804aae8 <vTaskMissedYield+0x14>)
 804aada:	2201      	movs	r2, #1
 804aadc:	601a      	str	r2, [r3, #0]
}
 804aade:	bf00      	nop
 804aae0:	46bd      	mov	sp, r7
 804aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aae6:	4770      	bx	lr
 804aae8:	20005c88 	.word	0x20005c88

0804aaec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 804aaec:	b580      	push	{r7, lr}
 804aaee:	b082      	sub	sp, #8
 804aaf0:	af00      	add	r7, sp, #0
 804aaf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 804aaf4:	f000 f852 	bl	804ab9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 804aaf8:	4b06      	ldr	r3, [pc, #24]	; (804ab14 <prvIdleTask+0x28>)
 804aafa:	681b      	ldr	r3, [r3, #0]
 804aafc:	2b01      	cmp	r3, #1
 804aafe:	d9f9      	bls.n	804aaf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 804ab00:	4b05      	ldr	r3, [pc, #20]	; (804ab18 <prvIdleTask+0x2c>)
 804ab02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804ab06:	601a      	str	r2, [r3, #0]
 804ab08:	f3bf 8f4f 	dsb	sy
 804ab0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 804ab10:	e7f0      	b.n	804aaf4 <prvIdleTask+0x8>
 804ab12:	bf00      	nop
 804ab14:	20005b78 	.word	0x20005b78
 804ab18:	e000ed04 	.word	0xe000ed04

0804ab1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 804ab1c:	b580      	push	{r7, lr}
 804ab1e:	b082      	sub	sp, #8
 804ab20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 804ab22:	2300      	movs	r3, #0
 804ab24:	607b      	str	r3, [r7, #4]
 804ab26:	e00c      	b.n	804ab42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 804ab28:	687a      	ldr	r2, [r7, #4]
 804ab2a:	4613      	mov	r3, r2
 804ab2c:	009b      	lsls	r3, r3, #2
 804ab2e:	4413      	add	r3, r2
 804ab30:	009b      	lsls	r3, r3, #2
 804ab32:	4a12      	ldr	r2, [pc, #72]	; (804ab7c <prvInitialiseTaskLists+0x60>)
 804ab34:	4413      	add	r3, r2
 804ab36:	4618      	mov	r0, r3
 804ab38:	f7fe f8ab 	bl	8048c92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 804ab3c:	687b      	ldr	r3, [r7, #4]
 804ab3e:	3301      	adds	r3, #1
 804ab40:	607b      	str	r3, [r7, #4]
 804ab42:	687b      	ldr	r3, [r7, #4]
 804ab44:	2b06      	cmp	r3, #6
 804ab46:	d9ef      	bls.n	804ab28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 804ab48:	480d      	ldr	r0, [pc, #52]	; (804ab80 <prvInitialiseTaskLists+0x64>)
 804ab4a:	f7fe f8a2 	bl	8048c92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 804ab4e:	480d      	ldr	r0, [pc, #52]	; (804ab84 <prvInitialiseTaskLists+0x68>)
 804ab50:	f7fe f89f 	bl	8048c92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 804ab54:	480c      	ldr	r0, [pc, #48]	; (804ab88 <prvInitialiseTaskLists+0x6c>)
 804ab56:	f7fe f89c 	bl	8048c92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 804ab5a:	480c      	ldr	r0, [pc, #48]	; (804ab8c <prvInitialiseTaskLists+0x70>)
 804ab5c:	f7fe f899 	bl	8048c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 804ab60:	480b      	ldr	r0, [pc, #44]	; (804ab90 <prvInitialiseTaskLists+0x74>)
 804ab62:	f7fe f896 	bl	8048c92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 804ab66:	4b0b      	ldr	r3, [pc, #44]	; (804ab94 <prvInitialiseTaskLists+0x78>)
 804ab68:	4a05      	ldr	r2, [pc, #20]	; (804ab80 <prvInitialiseTaskLists+0x64>)
 804ab6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 804ab6c:	4b0a      	ldr	r3, [pc, #40]	; (804ab98 <prvInitialiseTaskLists+0x7c>)
 804ab6e:	4a05      	ldr	r2, [pc, #20]	; (804ab84 <prvInitialiseTaskLists+0x68>)
 804ab70:	601a      	str	r2, [r3, #0]
}
 804ab72:	bf00      	nop
 804ab74:	3708      	adds	r7, #8
 804ab76:	46bd      	mov	sp, r7
 804ab78:	bd80      	pop	{r7, pc}
 804ab7a:	bf00      	nop
 804ab7c:	20005b78 	.word	0x20005b78
 804ab80:	20005c04 	.word	0x20005c04
 804ab84:	20005c18 	.word	0x20005c18
 804ab88:	20005c34 	.word	0x20005c34
 804ab8c:	20005c48 	.word	0x20005c48
 804ab90:	20005c60 	.word	0x20005c60
 804ab94:	20005c2c 	.word	0x20005c2c
 804ab98:	20005c30 	.word	0x20005c30

0804ab9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 804ab9c:	b580      	push	{r7, lr}
 804ab9e:	b082      	sub	sp, #8
 804aba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 804aba2:	e019      	b.n	804abd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 804aba4:	f000 fbca 	bl	804b33c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804aba8:	4b10      	ldr	r3, [pc, #64]	; (804abec <prvCheckTasksWaitingTermination+0x50>)
 804abaa:	68db      	ldr	r3, [r3, #12]
 804abac:	68db      	ldr	r3, [r3, #12]
 804abae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 804abb0:	687b      	ldr	r3, [r7, #4]
 804abb2:	3304      	adds	r3, #4
 804abb4:	4618      	mov	r0, r3
 804abb6:	f7fe f8f6 	bl	8048da6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 804abba:	4b0d      	ldr	r3, [pc, #52]	; (804abf0 <prvCheckTasksWaitingTermination+0x54>)
 804abbc:	681b      	ldr	r3, [r3, #0]
 804abbe:	3b01      	subs	r3, #1
 804abc0:	4a0b      	ldr	r2, [pc, #44]	; (804abf0 <prvCheckTasksWaitingTermination+0x54>)
 804abc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 804abc4:	4b0b      	ldr	r3, [pc, #44]	; (804abf4 <prvCheckTasksWaitingTermination+0x58>)
 804abc6:	681b      	ldr	r3, [r3, #0]
 804abc8:	3b01      	subs	r3, #1
 804abca:	4a0a      	ldr	r2, [pc, #40]	; (804abf4 <prvCheckTasksWaitingTermination+0x58>)
 804abcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 804abce:	f000 fbe9 	bl	804b3a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 804abd2:	6878      	ldr	r0, [r7, #4]
 804abd4:	f000 f810 	bl	804abf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 804abd8:	4b06      	ldr	r3, [pc, #24]	; (804abf4 <prvCheckTasksWaitingTermination+0x58>)
 804abda:	681b      	ldr	r3, [r3, #0]
 804abdc:	2b00      	cmp	r3, #0
 804abde:	d1e1      	bne.n	804aba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 804abe0:	bf00      	nop
 804abe2:	bf00      	nop
 804abe4:	3708      	adds	r7, #8
 804abe6:	46bd      	mov	sp, r7
 804abe8:	bd80      	pop	{r7, pc}
 804abea:	bf00      	nop
 804abec:	20005c48 	.word	0x20005c48
 804abf0:	20005c74 	.word	0x20005c74
 804abf4:	20005c5c 	.word	0x20005c5c

0804abf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 804abf8:	b580      	push	{r7, lr}
 804abfa:	b084      	sub	sp, #16
 804abfc:	af00      	add	r7, sp, #0
 804abfe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 804ac00:	687b      	ldr	r3, [r7, #4]
 804ac02:	334c      	adds	r3, #76	; 0x4c
 804ac04:	4618      	mov	r0, r3
 804ac06:	f00e fa79 	bl	80590fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 804ac0a:	687b      	ldr	r3, [r7, #4]
 804ac0c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 804ac10:	2b00      	cmp	r3, #0
 804ac12:	d108      	bne.n	804ac26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 804ac14:	687b      	ldr	r3, [r7, #4]
 804ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804ac18:	4618      	mov	r0, r3
 804ac1a:	f7f5 fe50 	bl	80408be <vPortFree>
				vPortFree( pxTCB );
 804ac1e:	6878      	ldr	r0, [r7, #4]
 804ac20:	f7f5 fe4d 	bl	80408be <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 804ac24:	e01a      	b.n	804ac5c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 804ac26:	687b      	ldr	r3, [r7, #4]
 804ac28:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 804ac2c:	2b01      	cmp	r3, #1
 804ac2e:	d103      	bne.n	804ac38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 804ac30:	6878      	ldr	r0, [r7, #4]
 804ac32:	f7f5 fe44 	bl	80408be <vPortFree>
	}
 804ac36:	e011      	b.n	804ac5c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 804ac38:	687b      	ldr	r3, [r7, #4]
 804ac3a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 804ac3e:	2b02      	cmp	r3, #2
 804ac40:	d00c      	beq.n	804ac5c <prvDeleteTCB+0x64>
	__asm volatile
 804ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 804ac46:	b672      	cpsid	i
 804ac48:	f383 8811 	msr	BASEPRI, r3
 804ac4c:	f3bf 8f6f 	isb	sy
 804ac50:	f3bf 8f4f 	dsb	sy
 804ac54:	b662      	cpsie	i
 804ac56:	60fb      	str	r3, [r7, #12]
}
 804ac58:	bf00      	nop
 804ac5a:	e7fe      	b.n	804ac5a <prvDeleteTCB+0x62>
	}
 804ac5c:	bf00      	nop
 804ac5e:	3710      	adds	r7, #16
 804ac60:	46bd      	mov	sp, r7
 804ac62:	bd80      	pop	{r7, pc}

0804ac64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 804ac64:	b480      	push	{r7}
 804ac66:	b083      	sub	sp, #12
 804ac68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 804ac6a:	4b0c      	ldr	r3, [pc, #48]	; (804ac9c <prvResetNextTaskUnblockTime+0x38>)
 804ac6c:	681b      	ldr	r3, [r3, #0]
 804ac6e:	681b      	ldr	r3, [r3, #0]
 804ac70:	2b00      	cmp	r3, #0
 804ac72:	d104      	bne.n	804ac7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 804ac74:	4b0a      	ldr	r3, [pc, #40]	; (804aca0 <prvResetNextTaskUnblockTime+0x3c>)
 804ac76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804ac7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 804ac7c:	e008      	b.n	804ac90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 804ac7e:	4b07      	ldr	r3, [pc, #28]	; (804ac9c <prvResetNextTaskUnblockTime+0x38>)
 804ac80:	681b      	ldr	r3, [r3, #0]
 804ac82:	68db      	ldr	r3, [r3, #12]
 804ac84:	68db      	ldr	r3, [r3, #12]
 804ac86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 804ac88:	687b      	ldr	r3, [r7, #4]
 804ac8a:	685b      	ldr	r3, [r3, #4]
 804ac8c:	4a04      	ldr	r2, [pc, #16]	; (804aca0 <prvResetNextTaskUnblockTime+0x3c>)
 804ac8e:	6013      	str	r3, [r2, #0]
}
 804ac90:	bf00      	nop
 804ac92:	370c      	adds	r7, #12
 804ac94:	46bd      	mov	sp, r7
 804ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ac9a:	4770      	bx	lr
 804ac9c:	20005c2c 	.word	0x20005c2c
 804aca0:	20005c94 	.word	0x20005c94

0804aca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 804aca4:	b480      	push	{r7}
 804aca6:	b083      	sub	sp, #12
 804aca8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 804acaa:	4b0b      	ldr	r3, [pc, #44]	; (804acd8 <xTaskGetSchedulerState+0x34>)
 804acac:	681b      	ldr	r3, [r3, #0]
 804acae:	2b00      	cmp	r3, #0
 804acb0:	d102      	bne.n	804acb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 804acb2:	2301      	movs	r3, #1
 804acb4:	607b      	str	r3, [r7, #4]
 804acb6:	e008      	b.n	804acca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 804acb8:	4b08      	ldr	r3, [pc, #32]	; (804acdc <xTaskGetSchedulerState+0x38>)
 804acba:	681b      	ldr	r3, [r3, #0]
 804acbc:	2b00      	cmp	r3, #0
 804acbe:	d102      	bne.n	804acc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 804acc0:	2302      	movs	r3, #2
 804acc2:	607b      	str	r3, [r7, #4]
 804acc4:	e001      	b.n	804acca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 804acc6:	2300      	movs	r3, #0
 804acc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 804acca:	687b      	ldr	r3, [r7, #4]
	}
 804accc:	4618      	mov	r0, r3
 804acce:	370c      	adds	r7, #12
 804acd0:	46bd      	mov	sp, r7
 804acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804acd6:	4770      	bx	lr
 804acd8:	20005c80 	.word	0x20005c80
 804acdc:	20005c9c 	.word	0x20005c9c

0804ace0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 804ace0:	b580      	push	{r7, lr}
 804ace2:	b084      	sub	sp, #16
 804ace4:	af00      	add	r7, sp, #0
 804ace6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 804ace8:	687b      	ldr	r3, [r7, #4]
 804acea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 804acec:	2300      	movs	r3, #0
 804acee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 804acf0:	687b      	ldr	r3, [r7, #4]
 804acf2:	2b00      	cmp	r3, #0
 804acf4:	d069      	beq.n	804adca <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 804acf6:	68bb      	ldr	r3, [r7, #8]
 804acf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804acfa:	4b36      	ldr	r3, [pc, #216]	; (804add4 <xTaskPriorityInherit+0xf4>)
 804acfc:	681b      	ldr	r3, [r3, #0]
 804acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ad00:	429a      	cmp	r2, r3
 804ad02:	d259      	bcs.n	804adb8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 804ad04:	68bb      	ldr	r3, [r7, #8]
 804ad06:	699b      	ldr	r3, [r3, #24]
 804ad08:	2b00      	cmp	r3, #0
 804ad0a:	db06      	blt.n	804ad1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804ad0c:	4b31      	ldr	r3, [pc, #196]	; (804add4 <xTaskPriorityInherit+0xf4>)
 804ad0e:	681b      	ldr	r3, [r3, #0]
 804ad10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ad12:	f1c3 0207 	rsb	r2, r3, #7
 804ad16:	68bb      	ldr	r3, [r7, #8]
 804ad18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 804ad1a:	68bb      	ldr	r3, [r7, #8]
 804ad1c:	6959      	ldr	r1, [r3, #20]
 804ad1e:	68bb      	ldr	r3, [r7, #8]
 804ad20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ad22:	4613      	mov	r3, r2
 804ad24:	009b      	lsls	r3, r3, #2
 804ad26:	4413      	add	r3, r2
 804ad28:	009b      	lsls	r3, r3, #2
 804ad2a:	4a2b      	ldr	r2, [pc, #172]	; (804add8 <xTaskPriorityInherit+0xf8>)
 804ad2c:	4413      	add	r3, r2
 804ad2e:	4299      	cmp	r1, r3
 804ad30:	d13a      	bne.n	804ada8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804ad32:	68bb      	ldr	r3, [r7, #8]
 804ad34:	3304      	adds	r3, #4
 804ad36:	4618      	mov	r0, r3
 804ad38:	f7fe f835 	bl	8048da6 <uxListRemove>
 804ad3c:	4603      	mov	r3, r0
 804ad3e:	2b00      	cmp	r3, #0
 804ad40:	d115      	bne.n	804ad6e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 804ad42:	68bb      	ldr	r3, [r7, #8]
 804ad44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ad46:	4924      	ldr	r1, [pc, #144]	; (804add8 <xTaskPriorityInherit+0xf8>)
 804ad48:	4613      	mov	r3, r2
 804ad4a:	009b      	lsls	r3, r3, #2
 804ad4c:	4413      	add	r3, r2
 804ad4e:	009b      	lsls	r3, r3, #2
 804ad50:	440b      	add	r3, r1
 804ad52:	681b      	ldr	r3, [r3, #0]
 804ad54:	2b00      	cmp	r3, #0
 804ad56:	d10a      	bne.n	804ad6e <xTaskPriorityInherit+0x8e>
 804ad58:	68bb      	ldr	r3, [r7, #8]
 804ad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ad5c:	2201      	movs	r2, #1
 804ad5e:	fa02 f303 	lsl.w	r3, r2, r3
 804ad62:	43da      	mvns	r2, r3
 804ad64:	4b1d      	ldr	r3, [pc, #116]	; (804addc <xTaskPriorityInherit+0xfc>)
 804ad66:	681b      	ldr	r3, [r3, #0]
 804ad68:	4013      	ands	r3, r2
 804ad6a:	4a1c      	ldr	r2, [pc, #112]	; (804addc <xTaskPriorityInherit+0xfc>)
 804ad6c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 804ad6e:	4b19      	ldr	r3, [pc, #100]	; (804add4 <xTaskPriorityInherit+0xf4>)
 804ad70:	681b      	ldr	r3, [r3, #0]
 804ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ad74:	68bb      	ldr	r3, [r7, #8]
 804ad76:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 804ad78:	68bb      	ldr	r3, [r7, #8]
 804ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ad7c:	2201      	movs	r2, #1
 804ad7e:	409a      	lsls	r2, r3
 804ad80:	4b16      	ldr	r3, [pc, #88]	; (804addc <xTaskPriorityInherit+0xfc>)
 804ad82:	681b      	ldr	r3, [r3, #0]
 804ad84:	4313      	orrs	r3, r2
 804ad86:	4a15      	ldr	r2, [pc, #84]	; (804addc <xTaskPriorityInherit+0xfc>)
 804ad88:	6013      	str	r3, [r2, #0]
 804ad8a:	68bb      	ldr	r3, [r7, #8]
 804ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ad8e:	4613      	mov	r3, r2
 804ad90:	009b      	lsls	r3, r3, #2
 804ad92:	4413      	add	r3, r2
 804ad94:	009b      	lsls	r3, r3, #2
 804ad96:	4a10      	ldr	r2, [pc, #64]	; (804add8 <xTaskPriorityInherit+0xf8>)
 804ad98:	441a      	add	r2, r3
 804ad9a:	68bb      	ldr	r3, [r7, #8]
 804ad9c:	3304      	adds	r3, #4
 804ad9e:	4619      	mov	r1, r3
 804ada0:	4610      	mov	r0, r2
 804ada2:	f7fd ffa3 	bl	8048cec <vListInsertEnd>
 804ada6:	e004      	b.n	804adb2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 804ada8:	4b0a      	ldr	r3, [pc, #40]	; (804add4 <xTaskPriorityInherit+0xf4>)
 804adaa:	681b      	ldr	r3, [r3, #0]
 804adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804adae:	68bb      	ldr	r3, [r7, #8]
 804adb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 804adb2:	2301      	movs	r3, #1
 804adb4:	60fb      	str	r3, [r7, #12]
 804adb6:	e008      	b.n	804adca <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 804adb8:	68bb      	ldr	r3, [r7, #8]
 804adba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804adbc:	4b05      	ldr	r3, [pc, #20]	; (804add4 <xTaskPriorityInherit+0xf4>)
 804adbe:	681b      	ldr	r3, [r3, #0]
 804adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804adc2:	429a      	cmp	r2, r3
 804adc4:	d201      	bcs.n	804adca <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 804adc6:	2301      	movs	r3, #1
 804adc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 804adca:	68fb      	ldr	r3, [r7, #12]
	}
 804adcc:	4618      	mov	r0, r3
 804adce:	3710      	adds	r7, #16
 804add0:	46bd      	mov	sp, r7
 804add2:	bd80      	pop	{r7, pc}
 804add4:	20005b74 	.word	0x20005b74
 804add8:	20005b78 	.word	0x20005b78
 804addc:	20005c7c 	.word	0x20005c7c

0804ade0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 804ade0:	b580      	push	{r7, lr}
 804ade2:	b086      	sub	sp, #24
 804ade4:	af00      	add	r7, sp, #0
 804ade6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 804ade8:	687b      	ldr	r3, [r7, #4]
 804adea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 804adec:	2300      	movs	r3, #0
 804adee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 804adf0:	687b      	ldr	r3, [r7, #4]
 804adf2:	2b00      	cmp	r3, #0
 804adf4:	d072      	beq.n	804aedc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 804adf6:	4b3c      	ldr	r3, [pc, #240]	; (804aee8 <xTaskPriorityDisinherit+0x108>)
 804adf8:	681b      	ldr	r3, [r3, #0]
 804adfa:	693a      	ldr	r2, [r7, #16]
 804adfc:	429a      	cmp	r2, r3
 804adfe:	d00c      	beq.n	804ae1a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 804ae00:	f04f 0350 	mov.w	r3, #80	; 0x50
 804ae04:	b672      	cpsid	i
 804ae06:	f383 8811 	msr	BASEPRI, r3
 804ae0a:	f3bf 8f6f 	isb	sy
 804ae0e:	f3bf 8f4f 	dsb	sy
 804ae12:	b662      	cpsie	i
 804ae14:	60fb      	str	r3, [r7, #12]
}
 804ae16:	bf00      	nop
 804ae18:	e7fe      	b.n	804ae18 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 804ae1a:	693b      	ldr	r3, [r7, #16]
 804ae1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ae1e:	2b00      	cmp	r3, #0
 804ae20:	d10c      	bne.n	804ae3c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 804ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 804ae26:	b672      	cpsid	i
 804ae28:	f383 8811 	msr	BASEPRI, r3
 804ae2c:	f3bf 8f6f 	isb	sy
 804ae30:	f3bf 8f4f 	dsb	sy
 804ae34:	b662      	cpsie	i
 804ae36:	60bb      	str	r3, [r7, #8]
}
 804ae38:	bf00      	nop
 804ae3a:	e7fe      	b.n	804ae3a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 804ae3c:	693b      	ldr	r3, [r7, #16]
 804ae3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ae40:	1e5a      	subs	r2, r3, #1
 804ae42:	693b      	ldr	r3, [r7, #16]
 804ae44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 804ae46:	693b      	ldr	r3, [r7, #16]
 804ae48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ae4a:	693b      	ldr	r3, [r7, #16]
 804ae4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804ae4e:	429a      	cmp	r2, r3
 804ae50:	d044      	beq.n	804aedc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 804ae52:	693b      	ldr	r3, [r7, #16]
 804ae54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ae56:	2b00      	cmp	r3, #0
 804ae58:	d140      	bne.n	804aedc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804ae5a:	693b      	ldr	r3, [r7, #16]
 804ae5c:	3304      	adds	r3, #4
 804ae5e:	4618      	mov	r0, r3
 804ae60:	f7fd ffa1 	bl	8048da6 <uxListRemove>
 804ae64:	4603      	mov	r3, r0
 804ae66:	2b00      	cmp	r3, #0
 804ae68:	d115      	bne.n	804ae96 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 804ae6a:	693b      	ldr	r3, [r7, #16]
 804ae6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804ae6e:	491f      	ldr	r1, [pc, #124]	; (804aeec <xTaskPriorityDisinherit+0x10c>)
 804ae70:	4613      	mov	r3, r2
 804ae72:	009b      	lsls	r3, r3, #2
 804ae74:	4413      	add	r3, r2
 804ae76:	009b      	lsls	r3, r3, #2
 804ae78:	440b      	add	r3, r1
 804ae7a:	681b      	ldr	r3, [r3, #0]
 804ae7c:	2b00      	cmp	r3, #0
 804ae7e:	d10a      	bne.n	804ae96 <xTaskPriorityDisinherit+0xb6>
 804ae80:	693b      	ldr	r3, [r7, #16]
 804ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ae84:	2201      	movs	r2, #1
 804ae86:	fa02 f303 	lsl.w	r3, r2, r3
 804ae8a:	43da      	mvns	r2, r3
 804ae8c:	4b18      	ldr	r3, [pc, #96]	; (804aef0 <xTaskPriorityDisinherit+0x110>)
 804ae8e:	681b      	ldr	r3, [r3, #0]
 804ae90:	4013      	ands	r3, r2
 804ae92:	4a17      	ldr	r2, [pc, #92]	; (804aef0 <xTaskPriorityDisinherit+0x110>)
 804ae94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 804ae96:	693b      	ldr	r3, [r7, #16]
 804ae98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804ae9a:	693b      	ldr	r3, [r7, #16]
 804ae9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804ae9e:	693b      	ldr	r3, [r7, #16]
 804aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804aea2:	f1c3 0207 	rsb	r2, r3, #7
 804aea6:	693b      	ldr	r3, [r7, #16]
 804aea8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 804aeaa:	693b      	ldr	r3, [r7, #16]
 804aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804aeae:	2201      	movs	r2, #1
 804aeb0:	409a      	lsls	r2, r3
 804aeb2:	4b0f      	ldr	r3, [pc, #60]	; (804aef0 <xTaskPriorityDisinherit+0x110>)
 804aeb4:	681b      	ldr	r3, [r3, #0]
 804aeb6:	4313      	orrs	r3, r2
 804aeb8:	4a0d      	ldr	r2, [pc, #52]	; (804aef0 <xTaskPriorityDisinherit+0x110>)
 804aeba:	6013      	str	r3, [r2, #0]
 804aebc:	693b      	ldr	r3, [r7, #16]
 804aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804aec0:	4613      	mov	r3, r2
 804aec2:	009b      	lsls	r3, r3, #2
 804aec4:	4413      	add	r3, r2
 804aec6:	009b      	lsls	r3, r3, #2
 804aec8:	4a08      	ldr	r2, [pc, #32]	; (804aeec <xTaskPriorityDisinherit+0x10c>)
 804aeca:	441a      	add	r2, r3
 804aecc:	693b      	ldr	r3, [r7, #16]
 804aece:	3304      	adds	r3, #4
 804aed0:	4619      	mov	r1, r3
 804aed2:	4610      	mov	r0, r2
 804aed4:	f7fd ff0a 	bl	8048cec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 804aed8:	2301      	movs	r3, #1
 804aeda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 804aedc:	697b      	ldr	r3, [r7, #20]
	}
 804aede:	4618      	mov	r0, r3
 804aee0:	3718      	adds	r7, #24
 804aee2:	46bd      	mov	sp, r7
 804aee4:	bd80      	pop	{r7, pc}
 804aee6:	bf00      	nop
 804aee8:	20005b74 	.word	0x20005b74
 804aeec:	20005b78 	.word	0x20005b78
 804aef0:	20005c7c 	.word	0x20005c7c

0804aef4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 804aef4:	b580      	push	{r7, lr}
 804aef6:	b088      	sub	sp, #32
 804aef8:	af00      	add	r7, sp, #0
 804aefa:	6078      	str	r0, [r7, #4]
 804aefc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 804aefe:	687b      	ldr	r3, [r7, #4]
 804af00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 804af02:	2301      	movs	r3, #1
 804af04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 804af06:	687b      	ldr	r3, [r7, #4]
 804af08:	2b00      	cmp	r3, #0
 804af0a:	f000 8087 	beq.w	804b01c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 804af0e:	69bb      	ldr	r3, [r7, #24]
 804af10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804af12:	2b00      	cmp	r3, #0
 804af14:	d10c      	bne.n	804af30 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 804af16:	f04f 0350 	mov.w	r3, #80	; 0x50
 804af1a:	b672      	cpsid	i
 804af1c:	f383 8811 	msr	BASEPRI, r3
 804af20:	f3bf 8f6f 	isb	sy
 804af24:	f3bf 8f4f 	dsb	sy
 804af28:	b662      	cpsie	i
 804af2a:	60fb      	str	r3, [r7, #12]
}
 804af2c:	bf00      	nop
 804af2e:	e7fe      	b.n	804af2e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 804af30:	69bb      	ldr	r3, [r7, #24]
 804af32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804af34:	683a      	ldr	r2, [r7, #0]
 804af36:	429a      	cmp	r2, r3
 804af38:	d902      	bls.n	804af40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 804af3a:	683b      	ldr	r3, [r7, #0]
 804af3c:	61fb      	str	r3, [r7, #28]
 804af3e:	e002      	b.n	804af46 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 804af40:	69bb      	ldr	r3, [r7, #24]
 804af42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804af44:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 804af46:	69bb      	ldr	r3, [r7, #24]
 804af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804af4a:	69fa      	ldr	r2, [r7, #28]
 804af4c:	429a      	cmp	r2, r3
 804af4e:	d065      	beq.n	804b01c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 804af50:	69bb      	ldr	r3, [r7, #24]
 804af52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804af54:	697a      	ldr	r2, [r7, #20]
 804af56:	429a      	cmp	r2, r3
 804af58:	d160      	bne.n	804b01c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 804af5a:	4b32      	ldr	r3, [pc, #200]	; (804b024 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 804af5c:	681b      	ldr	r3, [r3, #0]
 804af5e:	69ba      	ldr	r2, [r7, #24]
 804af60:	429a      	cmp	r2, r3
 804af62:	d10c      	bne.n	804af7e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 804af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 804af68:	b672      	cpsid	i
 804af6a:	f383 8811 	msr	BASEPRI, r3
 804af6e:	f3bf 8f6f 	isb	sy
 804af72:	f3bf 8f4f 	dsb	sy
 804af76:	b662      	cpsie	i
 804af78:	60bb      	str	r3, [r7, #8]
}
 804af7a:	bf00      	nop
 804af7c:	e7fe      	b.n	804af7c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 804af7e:	69bb      	ldr	r3, [r7, #24]
 804af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804af82:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 804af84:	69bb      	ldr	r3, [r7, #24]
 804af86:	69fa      	ldr	r2, [r7, #28]
 804af88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 804af8a:	69bb      	ldr	r3, [r7, #24]
 804af8c:	699b      	ldr	r3, [r3, #24]
 804af8e:	2b00      	cmp	r3, #0
 804af90:	db04      	blt.n	804af9c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 804af92:	69fb      	ldr	r3, [r7, #28]
 804af94:	f1c3 0207 	rsb	r2, r3, #7
 804af98:	69bb      	ldr	r3, [r7, #24]
 804af9a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 804af9c:	69bb      	ldr	r3, [r7, #24]
 804af9e:	6959      	ldr	r1, [r3, #20]
 804afa0:	693a      	ldr	r2, [r7, #16]
 804afa2:	4613      	mov	r3, r2
 804afa4:	009b      	lsls	r3, r3, #2
 804afa6:	4413      	add	r3, r2
 804afa8:	009b      	lsls	r3, r3, #2
 804afaa:	4a1f      	ldr	r2, [pc, #124]	; (804b028 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 804afac:	4413      	add	r3, r2
 804afae:	4299      	cmp	r1, r3
 804afb0:	d134      	bne.n	804b01c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804afb2:	69bb      	ldr	r3, [r7, #24]
 804afb4:	3304      	adds	r3, #4
 804afb6:	4618      	mov	r0, r3
 804afb8:	f7fd fef5 	bl	8048da6 <uxListRemove>
 804afbc:	4603      	mov	r3, r0
 804afbe:	2b00      	cmp	r3, #0
 804afc0:	d115      	bne.n	804afee <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 804afc2:	69bb      	ldr	r3, [r7, #24]
 804afc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804afc6:	4918      	ldr	r1, [pc, #96]	; (804b028 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 804afc8:	4613      	mov	r3, r2
 804afca:	009b      	lsls	r3, r3, #2
 804afcc:	4413      	add	r3, r2
 804afce:	009b      	lsls	r3, r3, #2
 804afd0:	440b      	add	r3, r1
 804afd2:	681b      	ldr	r3, [r3, #0]
 804afd4:	2b00      	cmp	r3, #0
 804afd6:	d10a      	bne.n	804afee <vTaskPriorityDisinheritAfterTimeout+0xfa>
 804afd8:	69bb      	ldr	r3, [r7, #24]
 804afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804afdc:	2201      	movs	r2, #1
 804afde:	fa02 f303 	lsl.w	r3, r2, r3
 804afe2:	43da      	mvns	r2, r3
 804afe4:	4b11      	ldr	r3, [pc, #68]	; (804b02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 804afe6:	681b      	ldr	r3, [r3, #0]
 804afe8:	4013      	ands	r3, r2
 804afea:	4a10      	ldr	r2, [pc, #64]	; (804b02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 804afec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 804afee:	69bb      	ldr	r3, [r7, #24]
 804aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804aff2:	2201      	movs	r2, #1
 804aff4:	409a      	lsls	r2, r3
 804aff6:	4b0d      	ldr	r3, [pc, #52]	; (804b02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 804aff8:	681b      	ldr	r3, [r3, #0]
 804affa:	4313      	orrs	r3, r2
 804affc:	4a0b      	ldr	r2, [pc, #44]	; (804b02c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 804affe:	6013      	str	r3, [r2, #0]
 804b000:	69bb      	ldr	r3, [r7, #24]
 804b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804b004:	4613      	mov	r3, r2
 804b006:	009b      	lsls	r3, r3, #2
 804b008:	4413      	add	r3, r2
 804b00a:	009b      	lsls	r3, r3, #2
 804b00c:	4a06      	ldr	r2, [pc, #24]	; (804b028 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 804b00e:	441a      	add	r2, r3
 804b010:	69bb      	ldr	r3, [r7, #24]
 804b012:	3304      	adds	r3, #4
 804b014:	4619      	mov	r1, r3
 804b016:	4610      	mov	r0, r2
 804b018:	f7fd fe68 	bl	8048cec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 804b01c:	bf00      	nop
 804b01e:	3720      	adds	r7, #32
 804b020:	46bd      	mov	sp, r7
 804b022:	bd80      	pop	{r7, pc}
 804b024:	20005b74 	.word	0x20005b74
 804b028:	20005b78 	.word	0x20005b78
 804b02c:	20005c7c 	.word	0x20005c7c

0804b030 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 804b030:	b480      	push	{r7}
 804b032:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 804b034:	4b07      	ldr	r3, [pc, #28]	; (804b054 <pvTaskIncrementMutexHeldCount+0x24>)
 804b036:	681b      	ldr	r3, [r3, #0]
 804b038:	2b00      	cmp	r3, #0
 804b03a:	d004      	beq.n	804b046 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 804b03c:	4b05      	ldr	r3, [pc, #20]	; (804b054 <pvTaskIncrementMutexHeldCount+0x24>)
 804b03e:	681b      	ldr	r3, [r3, #0]
 804b040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804b042:	3201      	adds	r2, #1
 804b044:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 804b046:	4b03      	ldr	r3, [pc, #12]	; (804b054 <pvTaskIncrementMutexHeldCount+0x24>)
 804b048:	681b      	ldr	r3, [r3, #0]
	}
 804b04a:	4618      	mov	r0, r3
 804b04c:	46bd      	mov	sp, r7
 804b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b052:	4770      	bx	lr
 804b054:	20005b74 	.word	0x20005b74

0804b058 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 804b058:	b580      	push	{r7, lr}
 804b05a:	b084      	sub	sp, #16
 804b05c:	af00      	add	r7, sp, #0
 804b05e:	6078      	str	r0, [r7, #4]
 804b060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 804b062:	4b29      	ldr	r3, [pc, #164]	; (804b108 <prvAddCurrentTaskToDelayedList+0xb0>)
 804b064:	681b      	ldr	r3, [r3, #0]
 804b066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 804b068:	4b28      	ldr	r3, [pc, #160]	; (804b10c <prvAddCurrentTaskToDelayedList+0xb4>)
 804b06a:	681b      	ldr	r3, [r3, #0]
 804b06c:	3304      	adds	r3, #4
 804b06e:	4618      	mov	r0, r3
 804b070:	f7fd fe99 	bl	8048da6 <uxListRemove>
 804b074:	4603      	mov	r3, r0
 804b076:	2b00      	cmp	r3, #0
 804b078:	d10b      	bne.n	804b092 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 804b07a:	4b24      	ldr	r3, [pc, #144]	; (804b10c <prvAddCurrentTaskToDelayedList+0xb4>)
 804b07c:	681b      	ldr	r3, [r3, #0]
 804b07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804b080:	2201      	movs	r2, #1
 804b082:	fa02 f303 	lsl.w	r3, r2, r3
 804b086:	43da      	mvns	r2, r3
 804b088:	4b21      	ldr	r3, [pc, #132]	; (804b110 <prvAddCurrentTaskToDelayedList+0xb8>)
 804b08a:	681b      	ldr	r3, [r3, #0]
 804b08c:	4013      	ands	r3, r2
 804b08e:	4a20      	ldr	r2, [pc, #128]	; (804b110 <prvAddCurrentTaskToDelayedList+0xb8>)
 804b090:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 804b092:	687b      	ldr	r3, [r7, #4]
 804b094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804b098:	d10a      	bne.n	804b0b0 <prvAddCurrentTaskToDelayedList+0x58>
 804b09a:	683b      	ldr	r3, [r7, #0]
 804b09c:	2b00      	cmp	r3, #0
 804b09e:	d007      	beq.n	804b0b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804b0a0:	4b1a      	ldr	r3, [pc, #104]	; (804b10c <prvAddCurrentTaskToDelayedList+0xb4>)
 804b0a2:	681b      	ldr	r3, [r3, #0]
 804b0a4:	3304      	adds	r3, #4
 804b0a6:	4619      	mov	r1, r3
 804b0a8:	481a      	ldr	r0, [pc, #104]	; (804b114 <prvAddCurrentTaskToDelayedList+0xbc>)
 804b0aa:	f7fd fe1f 	bl	8048cec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 804b0ae:	e026      	b.n	804b0fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 804b0b0:	68fa      	ldr	r2, [r7, #12]
 804b0b2:	687b      	ldr	r3, [r7, #4]
 804b0b4:	4413      	add	r3, r2
 804b0b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 804b0b8:	4b14      	ldr	r3, [pc, #80]	; (804b10c <prvAddCurrentTaskToDelayedList+0xb4>)
 804b0ba:	681b      	ldr	r3, [r3, #0]
 804b0bc:	68ba      	ldr	r2, [r7, #8]
 804b0be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 804b0c0:	68ba      	ldr	r2, [r7, #8]
 804b0c2:	68fb      	ldr	r3, [r7, #12]
 804b0c4:	429a      	cmp	r2, r3
 804b0c6:	d209      	bcs.n	804b0dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804b0c8:	4b13      	ldr	r3, [pc, #76]	; (804b118 <prvAddCurrentTaskToDelayedList+0xc0>)
 804b0ca:	681a      	ldr	r2, [r3, #0]
 804b0cc:	4b0f      	ldr	r3, [pc, #60]	; (804b10c <prvAddCurrentTaskToDelayedList+0xb4>)
 804b0ce:	681b      	ldr	r3, [r3, #0]
 804b0d0:	3304      	adds	r3, #4
 804b0d2:	4619      	mov	r1, r3
 804b0d4:	4610      	mov	r0, r2
 804b0d6:	f7fd fe2d 	bl	8048d34 <vListInsert>
}
 804b0da:	e010      	b.n	804b0fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 804b0dc:	4b0f      	ldr	r3, [pc, #60]	; (804b11c <prvAddCurrentTaskToDelayedList+0xc4>)
 804b0de:	681a      	ldr	r2, [r3, #0]
 804b0e0:	4b0a      	ldr	r3, [pc, #40]	; (804b10c <prvAddCurrentTaskToDelayedList+0xb4>)
 804b0e2:	681b      	ldr	r3, [r3, #0]
 804b0e4:	3304      	adds	r3, #4
 804b0e6:	4619      	mov	r1, r3
 804b0e8:	4610      	mov	r0, r2
 804b0ea:	f7fd fe23 	bl	8048d34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 804b0ee:	4b0c      	ldr	r3, [pc, #48]	; (804b120 <prvAddCurrentTaskToDelayedList+0xc8>)
 804b0f0:	681b      	ldr	r3, [r3, #0]
 804b0f2:	68ba      	ldr	r2, [r7, #8]
 804b0f4:	429a      	cmp	r2, r3
 804b0f6:	d202      	bcs.n	804b0fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 804b0f8:	4a09      	ldr	r2, [pc, #36]	; (804b120 <prvAddCurrentTaskToDelayedList+0xc8>)
 804b0fa:	68bb      	ldr	r3, [r7, #8]
 804b0fc:	6013      	str	r3, [r2, #0]
}
 804b0fe:	bf00      	nop
 804b100:	3710      	adds	r7, #16
 804b102:	46bd      	mov	sp, r7
 804b104:	bd80      	pop	{r7, pc}
 804b106:	bf00      	nop
 804b108:	20005c78 	.word	0x20005c78
 804b10c:	20005b74 	.word	0x20005b74
 804b110:	20005c7c 	.word	0x20005c7c
 804b114:	20005c60 	.word	0x20005c60
 804b118:	20005c30 	.word	0x20005c30
 804b11c:	20005c2c 	.word	0x20005c2c
 804b120:	20005c94 	.word	0x20005c94

0804b124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 804b124:	b480      	push	{r7}
 804b126:	b085      	sub	sp, #20
 804b128:	af00      	add	r7, sp, #0
 804b12a:	60f8      	str	r0, [r7, #12]
 804b12c:	60b9      	str	r1, [r7, #8]
 804b12e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 804b130:	68fb      	ldr	r3, [r7, #12]
 804b132:	3b04      	subs	r3, #4
 804b134:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 804b136:	68fb      	ldr	r3, [r7, #12]
 804b138:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 804b13c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 804b13e:	68fb      	ldr	r3, [r7, #12]
 804b140:	3b04      	subs	r3, #4
 804b142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 804b144:	68bb      	ldr	r3, [r7, #8]
 804b146:	f023 0201 	bic.w	r2, r3, #1
 804b14a:	68fb      	ldr	r3, [r7, #12]
 804b14c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 804b14e:	68fb      	ldr	r3, [r7, #12]
 804b150:	3b04      	subs	r3, #4
 804b152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 804b154:	4a0c      	ldr	r2, [pc, #48]	; (804b188 <pxPortInitialiseStack+0x64>)
 804b156:	68fb      	ldr	r3, [r7, #12]
 804b158:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 804b15a:	68fb      	ldr	r3, [r7, #12]
 804b15c:	3b14      	subs	r3, #20
 804b15e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 804b160:	687a      	ldr	r2, [r7, #4]
 804b162:	68fb      	ldr	r3, [r7, #12]
 804b164:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 804b166:	68fb      	ldr	r3, [r7, #12]
 804b168:	3b04      	subs	r3, #4
 804b16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 804b16c:	68fb      	ldr	r3, [r7, #12]
 804b16e:	f06f 0202 	mvn.w	r2, #2
 804b172:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 804b174:	68fb      	ldr	r3, [r7, #12]
 804b176:	3b20      	subs	r3, #32
 804b178:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 804b17a:	68fb      	ldr	r3, [r7, #12]
}
 804b17c:	4618      	mov	r0, r3
 804b17e:	3714      	adds	r7, #20
 804b180:	46bd      	mov	sp, r7
 804b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b186:	4770      	bx	lr
 804b188:	0804b18d 	.word	0x0804b18d

0804b18c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 804b18c:	b480      	push	{r7}
 804b18e:	b085      	sub	sp, #20
 804b190:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 804b192:	2300      	movs	r3, #0
 804b194:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 804b196:	4b14      	ldr	r3, [pc, #80]	; (804b1e8 <prvTaskExitError+0x5c>)
 804b198:	681b      	ldr	r3, [r3, #0]
 804b19a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804b19e:	d00c      	beq.n	804b1ba <prvTaskExitError+0x2e>
	__asm volatile
 804b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b1a4:	b672      	cpsid	i
 804b1a6:	f383 8811 	msr	BASEPRI, r3
 804b1aa:	f3bf 8f6f 	isb	sy
 804b1ae:	f3bf 8f4f 	dsb	sy
 804b1b2:	b662      	cpsie	i
 804b1b4:	60fb      	str	r3, [r7, #12]
}
 804b1b6:	bf00      	nop
 804b1b8:	e7fe      	b.n	804b1b8 <prvTaskExitError+0x2c>
	__asm volatile
 804b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b1be:	b672      	cpsid	i
 804b1c0:	f383 8811 	msr	BASEPRI, r3
 804b1c4:	f3bf 8f6f 	isb	sy
 804b1c8:	f3bf 8f4f 	dsb	sy
 804b1cc:	b662      	cpsie	i
 804b1ce:	60bb      	str	r3, [r7, #8]
}
 804b1d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 804b1d2:	bf00      	nop
 804b1d4:	687b      	ldr	r3, [r7, #4]
 804b1d6:	2b00      	cmp	r3, #0
 804b1d8:	d0fc      	beq.n	804b1d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 804b1da:	bf00      	nop
 804b1dc:	bf00      	nop
 804b1de:	3714      	adds	r7, #20
 804b1e0:	46bd      	mov	sp, r7
 804b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b1e6:	4770      	bx	lr
 804b1e8:	20000024 	.word	0x20000024
 804b1ec:	00000000 	.word	0x00000000

0804b1f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 804b1f0:	4b07      	ldr	r3, [pc, #28]	; (804b210 <pxCurrentTCBConst2>)
 804b1f2:	6819      	ldr	r1, [r3, #0]
 804b1f4:	6808      	ldr	r0, [r1, #0]
 804b1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b1fa:	f380 8809 	msr	PSP, r0
 804b1fe:	f3bf 8f6f 	isb	sy
 804b202:	f04f 0000 	mov.w	r0, #0
 804b206:	f380 8811 	msr	BASEPRI, r0
 804b20a:	4770      	bx	lr
 804b20c:	f3af 8000 	nop.w

0804b210 <pxCurrentTCBConst2>:
 804b210:	20005b74 	.word	0x20005b74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 804b214:	bf00      	nop
 804b216:	bf00      	nop

0804b218 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 804b218:	4808      	ldr	r0, [pc, #32]	; (804b23c <prvPortStartFirstTask+0x24>)
 804b21a:	6800      	ldr	r0, [r0, #0]
 804b21c:	6800      	ldr	r0, [r0, #0]
 804b21e:	f380 8808 	msr	MSP, r0
 804b222:	f04f 0000 	mov.w	r0, #0
 804b226:	f380 8814 	msr	CONTROL, r0
 804b22a:	b662      	cpsie	i
 804b22c:	b661      	cpsie	f
 804b22e:	f3bf 8f4f 	dsb	sy
 804b232:	f3bf 8f6f 	isb	sy
 804b236:	df00      	svc	0
 804b238:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 804b23a:	bf00      	nop
 804b23c:	e000ed08 	.word	0xe000ed08

0804b240 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 804b240:	b580      	push	{r7, lr}
 804b242:	b084      	sub	sp, #16
 804b244:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 804b246:	4b37      	ldr	r3, [pc, #220]	; (804b324 <xPortStartScheduler+0xe4>)
 804b248:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 804b24a:	68fb      	ldr	r3, [r7, #12]
 804b24c:	781b      	ldrb	r3, [r3, #0]
 804b24e:	b2db      	uxtb	r3, r3
 804b250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 804b252:	68fb      	ldr	r3, [r7, #12]
 804b254:	22ff      	movs	r2, #255	; 0xff
 804b256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 804b258:	68fb      	ldr	r3, [r7, #12]
 804b25a:	781b      	ldrb	r3, [r3, #0]
 804b25c:	b2db      	uxtb	r3, r3
 804b25e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 804b260:	78fb      	ldrb	r3, [r7, #3]
 804b262:	b2db      	uxtb	r3, r3
 804b264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 804b268:	b2da      	uxtb	r2, r3
 804b26a:	4b2f      	ldr	r3, [pc, #188]	; (804b328 <xPortStartScheduler+0xe8>)
 804b26c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 804b26e:	4b2f      	ldr	r3, [pc, #188]	; (804b32c <xPortStartScheduler+0xec>)
 804b270:	2207      	movs	r2, #7
 804b272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 804b274:	e009      	b.n	804b28a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 804b276:	4b2d      	ldr	r3, [pc, #180]	; (804b32c <xPortStartScheduler+0xec>)
 804b278:	681b      	ldr	r3, [r3, #0]
 804b27a:	3b01      	subs	r3, #1
 804b27c:	4a2b      	ldr	r2, [pc, #172]	; (804b32c <xPortStartScheduler+0xec>)
 804b27e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 804b280:	78fb      	ldrb	r3, [r7, #3]
 804b282:	b2db      	uxtb	r3, r3
 804b284:	005b      	lsls	r3, r3, #1
 804b286:	b2db      	uxtb	r3, r3
 804b288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 804b28a:	78fb      	ldrb	r3, [r7, #3]
 804b28c:	b2db      	uxtb	r3, r3
 804b28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804b292:	2b80      	cmp	r3, #128	; 0x80
 804b294:	d0ef      	beq.n	804b276 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 804b296:	4b25      	ldr	r3, [pc, #148]	; (804b32c <xPortStartScheduler+0xec>)
 804b298:	681b      	ldr	r3, [r3, #0]
 804b29a:	f1c3 0307 	rsb	r3, r3, #7
 804b29e:	2b04      	cmp	r3, #4
 804b2a0:	d00c      	beq.n	804b2bc <xPortStartScheduler+0x7c>
	__asm volatile
 804b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b2a6:	b672      	cpsid	i
 804b2a8:	f383 8811 	msr	BASEPRI, r3
 804b2ac:	f3bf 8f6f 	isb	sy
 804b2b0:	f3bf 8f4f 	dsb	sy
 804b2b4:	b662      	cpsie	i
 804b2b6:	60bb      	str	r3, [r7, #8]
}
 804b2b8:	bf00      	nop
 804b2ba:	e7fe      	b.n	804b2ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 804b2bc:	4b1b      	ldr	r3, [pc, #108]	; (804b32c <xPortStartScheduler+0xec>)
 804b2be:	681b      	ldr	r3, [r3, #0]
 804b2c0:	021b      	lsls	r3, r3, #8
 804b2c2:	4a1a      	ldr	r2, [pc, #104]	; (804b32c <xPortStartScheduler+0xec>)
 804b2c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 804b2c6:	4b19      	ldr	r3, [pc, #100]	; (804b32c <xPortStartScheduler+0xec>)
 804b2c8:	681b      	ldr	r3, [r3, #0]
 804b2ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 804b2ce:	4a17      	ldr	r2, [pc, #92]	; (804b32c <xPortStartScheduler+0xec>)
 804b2d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 804b2d2:	687b      	ldr	r3, [r7, #4]
 804b2d4:	b2da      	uxtb	r2, r3
 804b2d6:	68fb      	ldr	r3, [r7, #12]
 804b2d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 804b2da:	4b15      	ldr	r3, [pc, #84]	; (804b330 <xPortStartScheduler+0xf0>)
 804b2dc:	681b      	ldr	r3, [r3, #0]
 804b2de:	4a14      	ldr	r2, [pc, #80]	; (804b330 <xPortStartScheduler+0xf0>)
 804b2e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 804b2e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 804b2e6:	4b12      	ldr	r3, [pc, #72]	; (804b330 <xPortStartScheduler+0xf0>)
 804b2e8:	681b      	ldr	r3, [r3, #0]
 804b2ea:	4a11      	ldr	r2, [pc, #68]	; (804b330 <xPortStartScheduler+0xf0>)
 804b2ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 804b2f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 804b2f2:	f000 f8dd 	bl	804b4b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 804b2f6:	4b0f      	ldr	r3, [pc, #60]	; (804b334 <xPortStartScheduler+0xf4>)
 804b2f8:	2200      	movs	r2, #0
 804b2fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 804b2fc:	f000 f8fc 	bl	804b4f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 804b300:	4b0d      	ldr	r3, [pc, #52]	; (804b338 <xPortStartScheduler+0xf8>)
 804b302:	681b      	ldr	r3, [r3, #0]
 804b304:	4a0c      	ldr	r2, [pc, #48]	; (804b338 <xPortStartScheduler+0xf8>)
 804b306:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 804b30a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 804b30c:	f7ff ff84 	bl	804b218 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 804b310:	f7ff fa76 	bl	804a800 <vTaskSwitchContext>
	prvTaskExitError();
 804b314:	f7ff ff3a 	bl	804b18c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 804b318:	2300      	movs	r3, #0
}
 804b31a:	4618      	mov	r0, r3
 804b31c:	3710      	adds	r7, #16
 804b31e:	46bd      	mov	sp, r7
 804b320:	bd80      	pop	{r7, pc}
 804b322:	bf00      	nop
 804b324:	e000e400 	.word	0xe000e400
 804b328:	20005ca0 	.word	0x20005ca0
 804b32c:	20005ca4 	.word	0x20005ca4
 804b330:	e000ed20 	.word	0xe000ed20
 804b334:	20000024 	.word	0x20000024
 804b338:	e000ef34 	.word	0xe000ef34

0804b33c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 804b33c:	b480      	push	{r7}
 804b33e:	b083      	sub	sp, #12
 804b340:	af00      	add	r7, sp, #0
	__asm volatile
 804b342:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b346:	b672      	cpsid	i
 804b348:	f383 8811 	msr	BASEPRI, r3
 804b34c:	f3bf 8f6f 	isb	sy
 804b350:	f3bf 8f4f 	dsb	sy
 804b354:	b662      	cpsie	i
 804b356:	607b      	str	r3, [r7, #4]
}
 804b358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 804b35a:	4b10      	ldr	r3, [pc, #64]	; (804b39c <vPortEnterCritical+0x60>)
 804b35c:	681b      	ldr	r3, [r3, #0]
 804b35e:	3301      	adds	r3, #1
 804b360:	4a0e      	ldr	r2, [pc, #56]	; (804b39c <vPortEnterCritical+0x60>)
 804b362:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 804b364:	4b0d      	ldr	r3, [pc, #52]	; (804b39c <vPortEnterCritical+0x60>)
 804b366:	681b      	ldr	r3, [r3, #0]
 804b368:	2b01      	cmp	r3, #1
 804b36a:	d111      	bne.n	804b390 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 804b36c:	4b0c      	ldr	r3, [pc, #48]	; (804b3a0 <vPortEnterCritical+0x64>)
 804b36e:	681b      	ldr	r3, [r3, #0]
 804b370:	b2db      	uxtb	r3, r3
 804b372:	2b00      	cmp	r3, #0
 804b374:	d00c      	beq.n	804b390 <vPortEnterCritical+0x54>
	__asm volatile
 804b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b37a:	b672      	cpsid	i
 804b37c:	f383 8811 	msr	BASEPRI, r3
 804b380:	f3bf 8f6f 	isb	sy
 804b384:	f3bf 8f4f 	dsb	sy
 804b388:	b662      	cpsie	i
 804b38a:	603b      	str	r3, [r7, #0]
}
 804b38c:	bf00      	nop
 804b38e:	e7fe      	b.n	804b38e <vPortEnterCritical+0x52>
	}
}
 804b390:	bf00      	nop
 804b392:	370c      	adds	r7, #12
 804b394:	46bd      	mov	sp, r7
 804b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b39a:	4770      	bx	lr
 804b39c:	20000024 	.word	0x20000024
 804b3a0:	e000ed04 	.word	0xe000ed04

0804b3a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 804b3a4:	b480      	push	{r7}
 804b3a6:	b083      	sub	sp, #12
 804b3a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 804b3aa:	4b13      	ldr	r3, [pc, #76]	; (804b3f8 <vPortExitCritical+0x54>)
 804b3ac:	681b      	ldr	r3, [r3, #0]
 804b3ae:	2b00      	cmp	r3, #0
 804b3b0:	d10c      	bne.n	804b3cc <vPortExitCritical+0x28>
	__asm volatile
 804b3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b3b6:	b672      	cpsid	i
 804b3b8:	f383 8811 	msr	BASEPRI, r3
 804b3bc:	f3bf 8f6f 	isb	sy
 804b3c0:	f3bf 8f4f 	dsb	sy
 804b3c4:	b662      	cpsie	i
 804b3c6:	607b      	str	r3, [r7, #4]
}
 804b3c8:	bf00      	nop
 804b3ca:	e7fe      	b.n	804b3ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 804b3cc:	4b0a      	ldr	r3, [pc, #40]	; (804b3f8 <vPortExitCritical+0x54>)
 804b3ce:	681b      	ldr	r3, [r3, #0]
 804b3d0:	3b01      	subs	r3, #1
 804b3d2:	4a09      	ldr	r2, [pc, #36]	; (804b3f8 <vPortExitCritical+0x54>)
 804b3d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 804b3d6:	4b08      	ldr	r3, [pc, #32]	; (804b3f8 <vPortExitCritical+0x54>)
 804b3d8:	681b      	ldr	r3, [r3, #0]
 804b3da:	2b00      	cmp	r3, #0
 804b3dc:	d105      	bne.n	804b3ea <vPortExitCritical+0x46>
 804b3de:	2300      	movs	r3, #0
 804b3e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 804b3e2:	683b      	ldr	r3, [r7, #0]
 804b3e4:	f383 8811 	msr	BASEPRI, r3
}
 804b3e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 804b3ea:	bf00      	nop
 804b3ec:	370c      	adds	r7, #12
 804b3ee:	46bd      	mov	sp, r7
 804b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b3f4:	4770      	bx	lr
 804b3f6:	bf00      	nop
 804b3f8:	20000024 	.word	0x20000024
 804b3fc:	00000000 	.word	0x00000000

0804b400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 804b400:	f3ef 8009 	mrs	r0, PSP
 804b404:	f3bf 8f6f 	isb	sy
 804b408:	4b15      	ldr	r3, [pc, #84]	; (804b460 <pxCurrentTCBConst>)
 804b40a:	681a      	ldr	r2, [r3, #0]
 804b40c:	f01e 0f10 	tst.w	lr, #16
 804b410:	bf08      	it	eq
 804b412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 804b416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b41a:	6010      	str	r0, [r2, #0]
 804b41c:	e92d 0009 	stmdb	sp!, {r0, r3}
 804b420:	f04f 0050 	mov.w	r0, #80	; 0x50
 804b424:	b672      	cpsid	i
 804b426:	f380 8811 	msr	BASEPRI, r0
 804b42a:	f3bf 8f4f 	dsb	sy
 804b42e:	f3bf 8f6f 	isb	sy
 804b432:	b662      	cpsie	i
 804b434:	f7ff f9e4 	bl	804a800 <vTaskSwitchContext>
 804b438:	f04f 0000 	mov.w	r0, #0
 804b43c:	f380 8811 	msr	BASEPRI, r0
 804b440:	bc09      	pop	{r0, r3}
 804b442:	6819      	ldr	r1, [r3, #0]
 804b444:	6808      	ldr	r0, [r1, #0]
 804b446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804b44a:	f01e 0f10 	tst.w	lr, #16
 804b44e:	bf08      	it	eq
 804b450:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 804b454:	f380 8809 	msr	PSP, r0
 804b458:	f3bf 8f6f 	isb	sy
 804b45c:	4770      	bx	lr
 804b45e:	bf00      	nop

0804b460 <pxCurrentTCBConst>:
 804b460:	20005b74 	.word	0x20005b74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 804b464:	bf00      	nop
 804b466:	bf00      	nop

0804b468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 804b468:	b580      	push	{r7, lr}
 804b46a:	b082      	sub	sp, #8
 804b46c:	af00      	add	r7, sp, #0
	__asm volatile
 804b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b472:	b672      	cpsid	i
 804b474:	f383 8811 	msr	BASEPRI, r3
 804b478:	f3bf 8f6f 	isb	sy
 804b47c:	f3bf 8f4f 	dsb	sy
 804b480:	b662      	cpsie	i
 804b482:	607b      	str	r3, [r7, #4]
}
 804b484:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 804b486:	f7ff f901 	bl	804a68c <xTaskIncrementTick>
 804b48a:	4603      	mov	r3, r0
 804b48c:	2b00      	cmp	r3, #0
 804b48e:	d003      	beq.n	804b498 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 804b490:	4b06      	ldr	r3, [pc, #24]	; (804b4ac <SysTick_Handler+0x44>)
 804b492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 804b496:	601a      	str	r2, [r3, #0]
 804b498:	2300      	movs	r3, #0
 804b49a:	603b      	str	r3, [r7, #0]
	__asm volatile
 804b49c:	683b      	ldr	r3, [r7, #0]
 804b49e:	f383 8811 	msr	BASEPRI, r3
}
 804b4a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 804b4a4:	bf00      	nop
 804b4a6:	3708      	adds	r7, #8
 804b4a8:	46bd      	mov	sp, r7
 804b4aa:	bd80      	pop	{r7, pc}
 804b4ac:	e000ed04 	.word	0xe000ed04

0804b4b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 804b4b0:	b480      	push	{r7}
 804b4b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 804b4b4:	4b0b      	ldr	r3, [pc, #44]	; (804b4e4 <vPortSetupTimerInterrupt+0x34>)
 804b4b6:	2200      	movs	r2, #0
 804b4b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 804b4ba:	4b0b      	ldr	r3, [pc, #44]	; (804b4e8 <vPortSetupTimerInterrupt+0x38>)
 804b4bc:	2200      	movs	r2, #0
 804b4be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 804b4c0:	4b0a      	ldr	r3, [pc, #40]	; (804b4ec <vPortSetupTimerInterrupt+0x3c>)
 804b4c2:	681b      	ldr	r3, [r3, #0]
 804b4c4:	4a0a      	ldr	r2, [pc, #40]	; (804b4f0 <vPortSetupTimerInterrupt+0x40>)
 804b4c6:	fba2 2303 	umull	r2, r3, r2, r3
 804b4ca:	099b      	lsrs	r3, r3, #6
 804b4cc:	4a09      	ldr	r2, [pc, #36]	; (804b4f4 <vPortSetupTimerInterrupt+0x44>)
 804b4ce:	3b01      	subs	r3, #1
 804b4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 804b4d2:	4b04      	ldr	r3, [pc, #16]	; (804b4e4 <vPortSetupTimerInterrupt+0x34>)
 804b4d4:	2207      	movs	r2, #7
 804b4d6:	601a      	str	r2, [r3, #0]
}
 804b4d8:	bf00      	nop
 804b4da:	46bd      	mov	sp, r7
 804b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b4e0:	4770      	bx	lr
 804b4e2:	bf00      	nop
 804b4e4:	e000e010 	.word	0xe000e010
 804b4e8:	e000e018 	.word	0xe000e018
 804b4ec:	20000004 	.word	0x20000004
 804b4f0:	10624dd3 	.word	0x10624dd3
 804b4f4:	e000e014 	.word	0xe000e014

0804b4f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 804b4f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 804b508 <vPortEnableVFP+0x10>
 804b4fc:	6801      	ldr	r1, [r0, #0]
 804b4fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804b502:	6001      	str	r1, [r0, #0]
 804b504:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 804b506:	bf00      	nop
 804b508:	e000ed88 	.word	0xe000ed88

0804b50c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 804b50c:	b480      	push	{r7}
 804b50e:	b085      	sub	sp, #20
 804b510:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 804b512:	f3ef 8305 	mrs	r3, IPSR
 804b516:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 804b518:	68fb      	ldr	r3, [r7, #12]
 804b51a:	2b0f      	cmp	r3, #15
 804b51c:	d916      	bls.n	804b54c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 804b51e:	4a19      	ldr	r2, [pc, #100]	; (804b584 <vPortValidateInterruptPriority+0x78>)
 804b520:	68fb      	ldr	r3, [r7, #12]
 804b522:	4413      	add	r3, r2
 804b524:	781b      	ldrb	r3, [r3, #0]
 804b526:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 804b528:	4b17      	ldr	r3, [pc, #92]	; (804b588 <vPortValidateInterruptPriority+0x7c>)
 804b52a:	781b      	ldrb	r3, [r3, #0]
 804b52c:	7afa      	ldrb	r2, [r7, #11]
 804b52e:	429a      	cmp	r2, r3
 804b530:	d20c      	bcs.n	804b54c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 804b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b536:	b672      	cpsid	i
 804b538:	f383 8811 	msr	BASEPRI, r3
 804b53c:	f3bf 8f6f 	isb	sy
 804b540:	f3bf 8f4f 	dsb	sy
 804b544:	b662      	cpsie	i
 804b546:	607b      	str	r3, [r7, #4]
}
 804b548:	bf00      	nop
 804b54a:	e7fe      	b.n	804b54a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 804b54c:	4b0f      	ldr	r3, [pc, #60]	; (804b58c <vPortValidateInterruptPriority+0x80>)
 804b54e:	681b      	ldr	r3, [r3, #0]
 804b550:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 804b554:	4b0e      	ldr	r3, [pc, #56]	; (804b590 <vPortValidateInterruptPriority+0x84>)
 804b556:	681b      	ldr	r3, [r3, #0]
 804b558:	429a      	cmp	r2, r3
 804b55a:	d90c      	bls.n	804b576 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 804b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 804b560:	b672      	cpsid	i
 804b562:	f383 8811 	msr	BASEPRI, r3
 804b566:	f3bf 8f6f 	isb	sy
 804b56a:	f3bf 8f4f 	dsb	sy
 804b56e:	b662      	cpsie	i
 804b570:	603b      	str	r3, [r7, #0]
}
 804b572:	bf00      	nop
 804b574:	e7fe      	b.n	804b574 <vPortValidateInterruptPriority+0x68>
	}
 804b576:	bf00      	nop
 804b578:	3714      	adds	r7, #20
 804b57a:	46bd      	mov	sp, r7
 804b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b580:	4770      	bx	lr
 804b582:	bf00      	nop
 804b584:	e000e3f0 	.word	0xe000e3f0
 804b588:	20005ca0 	.word	0x20005ca0
 804b58c:	e000ed0c 	.word	0xe000ed0c
 804b590:	20005ca4 	.word	0x20005ca4

0804b594 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 804b594:	b580      	push	{r7, lr}
 804b596:	b084      	sub	sp, #16
 804b598:	af00      	add	r7, sp, #0
 804b59a:	6078      	str	r0, [r7, #4]
 804b59c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 804b59e:	683b      	ldr	r3, [r7, #0]
 804b5a0:	681b      	ldr	r3, [r3, #0]
 804b5a2:	330c      	adds	r3, #12
 804b5a4:	461a      	mov	r2, r3
 804b5a6:	6839      	ldr	r1, [r7, #0]
 804b5a8:	6878      	ldr	r0, [r7, #4]
 804b5aa:	f002 fa59 	bl	804da60 <tcpip_send_msg_wait_sem>
 804b5ae:	4603      	mov	r3, r0
 804b5b0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 804b5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804b5b6:	2b00      	cmp	r3, #0
 804b5b8:	d103      	bne.n	804b5c2 <netconn_apimsg+0x2e>
    return apimsg->err;
 804b5ba:	683b      	ldr	r3, [r7, #0]
 804b5bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 804b5c0:	e001      	b.n	804b5c6 <netconn_apimsg+0x32>
  }
  return err;
 804b5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 804b5c6:	4618      	mov	r0, r3
 804b5c8:	3710      	adds	r7, #16
 804b5ca:	46bd      	mov	sp, r7
 804b5cc:	bd80      	pop	{r7, pc}
	...

0804b5d0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 804b5d0:	b580      	push	{r7, lr}
 804b5d2:	b08c      	sub	sp, #48	; 0x30
 804b5d4:	af00      	add	r7, sp, #0
 804b5d6:	4603      	mov	r3, r0
 804b5d8:	603a      	str	r2, [r7, #0]
 804b5da:	71fb      	strb	r3, [r7, #7]
 804b5dc:	460b      	mov	r3, r1
 804b5de:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 804b5e0:	79fb      	ldrb	r3, [r7, #7]
 804b5e2:	6839      	ldr	r1, [r7, #0]
 804b5e4:	4618      	mov	r0, r3
 804b5e6:	f001 f923 	bl	804c830 <netconn_alloc>
 804b5ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 804b5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b5ee:	2b00      	cmp	r3, #0
 804b5f0:	d054      	beq.n	804b69c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 804b5f2:	79bb      	ldrb	r3, [r7, #6]
 804b5f4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 804b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b5f8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 804b5fa:	f107 0308 	add.w	r3, r7, #8
 804b5fe:	4619      	mov	r1, r3
 804b600:	4829      	ldr	r0, [pc, #164]	; (804b6a8 <netconn_new_with_proto_and_callback+0xd8>)
 804b602:	f7ff ffc7 	bl	804b594 <netconn_apimsg>
 804b606:	4603      	mov	r3, r0
 804b608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 804b60c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 804b610:	2b00      	cmp	r3, #0
 804b612:	d043      	beq.n	804b69c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 804b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b616:	685b      	ldr	r3, [r3, #4]
 804b618:	2b00      	cmp	r3, #0
 804b61a:	d005      	beq.n	804b628 <netconn_new_with_proto_and_callback+0x58>
 804b61c:	4b23      	ldr	r3, [pc, #140]	; (804b6ac <netconn_new_with_proto_and_callback+0xdc>)
 804b61e:	22a3      	movs	r2, #163	; 0xa3
 804b620:	4923      	ldr	r1, [pc, #140]	; (804b6b0 <netconn_new_with_proto_and_callback+0xe0>)
 804b622:	4824      	ldr	r0, [pc, #144]	; (804b6b4 <netconn_new_with_proto_and_callback+0xe4>)
 804b624:	f00d fd06 	bl	8059034 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 804b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b62a:	3310      	adds	r3, #16
 804b62c:	4618      	mov	r0, r3
 804b62e:	f00d f972 	bl	8058916 <sys_mbox_valid>
 804b632:	4603      	mov	r3, r0
 804b634:	2b00      	cmp	r3, #0
 804b636:	d105      	bne.n	804b644 <netconn_new_with_proto_and_callback+0x74>
 804b638:	4b1c      	ldr	r3, [pc, #112]	; (804b6ac <netconn_new_with_proto_and_callback+0xdc>)
 804b63a:	22a4      	movs	r2, #164	; 0xa4
 804b63c:	491e      	ldr	r1, [pc, #120]	; (804b6b8 <netconn_new_with_proto_and_callback+0xe8>)
 804b63e:	481d      	ldr	r0, [pc, #116]	; (804b6b4 <netconn_new_with_proto_and_callback+0xe4>)
 804b640:	f00d fcf8 	bl	8059034 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 804b644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b646:	3314      	adds	r3, #20
 804b648:	4618      	mov	r0, r3
 804b64a:	f00d f964 	bl	8058916 <sys_mbox_valid>
 804b64e:	4603      	mov	r3, r0
 804b650:	2b00      	cmp	r3, #0
 804b652:	d005      	beq.n	804b660 <netconn_new_with_proto_and_callback+0x90>
 804b654:	4b15      	ldr	r3, [pc, #84]	; (804b6ac <netconn_new_with_proto_and_callback+0xdc>)
 804b656:	22a6      	movs	r2, #166	; 0xa6
 804b658:	4918      	ldr	r1, [pc, #96]	; (804b6bc <netconn_new_with_proto_and_callback+0xec>)
 804b65a:	4816      	ldr	r0, [pc, #88]	; (804b6b4 <netconn_new_with_proto_and_callback+0xe4>)
 804b65c:	f00d fcea 	bl	8059034 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 804b660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b662:	330c      	adds	r3, #12
 804b664:	4618      	mov	r0, r3
 804b666:	f00d f9e7 	bl	8058a38 <sys_sem_valid>
 804b66a:	4603      	mov	r3, r0
 804b66c:	2b00      	cmp	r3, #0
 804b66e:	d105      	bne.n	804b67c <netconn_new_with_proto_and_callback+0xac>
 804b670:	4b0e      	ldr	r3, [pc, #56]	; (804b6ac <netconn_new_with_proto_and_callback+0xdc>)
 804b672:	22a9      	movs	r2, #169	; 0xa9
 804b674:	4912      	ldr	r1, [pc, #72]	; (804b6c0 <netconn_new_with_proto_and_callback+0xf0>)
 804b676:	480f      	ldr	r0, [pc, #60]	; (804b6b4 <netconn_new_with_proto_and_callback+0xe4>)
 804b678:	f00d fcdc 	bl	8059034 <iprintf>
      sys_sem_free(&conn->op_completed);
 804b67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b67e:	330c      	adds	r3, #12
 804b680:	4618      	mov	r0, r3
 804b682:	f00d f9cc 	bl	8058a1e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 804b686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804b688:	3310      	adds	r3, #16
 804b68a:	4618      	mov	r0, r3
 804b68c:	f00d f8bc 	bl	8058808 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 804b690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804b692:	2007      	movs	r0, #7
 804b694:	f002 ff92 	bl	804e5bc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 804b698:	2300      	movs	r3, #0
 804b69a:	e000      	b.n	804b69e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 804b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 804b69e:	4618      	mov	r0, r3
 804b6a0:	3730      	adds	r7, #48	; 0x30
 804b6a2:	46bd      	mov	sp, r7
 804b6a4:	bd80      	pop	{r7, pc}
 804b6a6:	bf00      	nop
 804b6a8:	0804c805 	.word	0x0804c805
 804b6ac:	0805a320 	.word	0x0805a320
 804b6b0:	0805a354 	.word	0x0805a354
 804b6b4:	0805a378 	.word	0x0805a378
 804b6b8:	0805a3a0 	.word	0x0805a3a0
 804b6bc:	0805a3b8 	.word	0x0805a3b8
 804b6c0:	0805a3dc 	.word	0x0805a3dc

0804b6c4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 804b6c4:	b580      	push	{r7, lr}
 804b6c6:	b08c      	sub	sp, #48	; 0x30
 804b6c8:	af00      	add	r7, sp, #0
 804b6ca:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 804b6cc:	687b      	ldr	r3, [r7, #4]
 804b6ce:	2b00      	cmp	r3, #0
 804b6d0:	d101      	bne.n	804b6d6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 804b6d2:	2300      	movs	r3, #0
 804b6d4:	e014      	b.n	804b700 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 804b6d6:	687b      	ldr	r3, [r7, #4]
 804b6d8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 804b6da:	2329      	movs	r3, #41	; 0x29
 804b6dc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 804b6de:	f107 030c 	add.w	r3, r7, #12
 804b6e2:	4619      	mov	r1, r3
 804b6e4:	4808      	ldr	r0, [pc, #32]	; (804b708 <netconn_prepare_delete+0x44>)
 804b6e6:	f7ff ff55 	bl	804b594 <netconn_apimsg>
 804b6ea:	4603      	mov	r3, r0
 804b6ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 804b6f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 804b6f4:	2b00      	cmp	r3, #0
 804b6f6:	d002      	beq.n	804b6fe <netconn_prepare_delete+0x3a>
    return err;
 804b6f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 804b6fc:	e000      	b.n	804b700 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 804b6fe:	2300      	movs	r3, #0
}
 804b700:	4618      	mov	r0, r3
 804b702:	3730      	adds	r7, #48	; 0x30
 804b704:	46bd      	mov	sp, r7
 804b706:	bd80      	pop	{r7, pc}
 804b708:	0804cd71 	.word	0x0804cd71

0804b70c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 804b70c:	b580      	push	{r7, lr}
 804b70e:	b084      	sub	sp, #16
 804b710:	af00      	add	r7, sp, #0
 804b712:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 804b714:	687b      	ldr	r3, [r7, #4]
 804b716:	2b00      	cmp	r3, #0
 804b718:	d101      	bne.n	804b71e <netconn_delete+0x12>
    return ERR_OK;
 804b71a:	2300      	movs	r3, #0
 804b71c:	e00d      	b.n	804b73a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 804b71e:	6878      	ldr	r0, [r7, #4]
 804b720:	f7ff ffd0 	bl	804b6c4 <netconn_prepare_delete>
 804b724:	4603      	mov	r3, r0
 804b726:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 804b728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804b72c:	2b00      	cmp	r3, #0
 804b72e:	d102      	bne.n	804b736 <netconn_delete+0x2a>
    netconn_free(conn);
 804b730:	6878      	ldr	r0, [r7, #4]
 804b732:	f001 f8eb 	bl	804c90c <netconn_free>
  }
  return err;
 804b736:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 804b73a:	4618      	mov	r0, r3
 804b73c:	3710      	adds	r7, #16
 804b73e:	46bd      	mov	sp, r7
 804b740:	bd80      	pop	{r7, pc}
	...

0804b744 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 804b744:	b580      	push	{r7, lr}
 804b746:	b08e      	sub	sp, #56	; 0x38
 804b748:	af00      	add	r7, sp, #0
 804b74a:	60f8      	str	r0, [r7, #12]
 804b74c:	60b9      	str	r1, [r7, #8]
 804b74e:	4613      	mov	r3, r2
 804b750:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 804b752:	68fb      	ldr	r3, [r7, #12]
 804b754:	2b00      	cmp	r3, #0
 804b756:	d109      	bne.n	804b76c <netconn_bind+0x28>
 804b758:	4b11      	ldr	r3, [pc, #68]	; (804b7a0 <netconn_bind+0x5c>)
 804b75a:	f44f 729c 	mov.w	r2, #312	; 0x138
 804b75e:	4911      	ldr	r1, [pc, #68]	; (804b7a4 <netconn_bind+0x60>)
 804b760:	4811      	ldr	r0, [pc, #68]	; (804b7a8 <netconn_bind+0x64>)
 804b762:	f00d fc67 	bl	8059034 <iprintf>
 804b766:	f06f 030f 	mvn.w	r3, #15
 804b76a:	e015      	b.n	804b798 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 804b76c:	68bb      	ldr	r3, [r7, #8]
 804b76e:	2b00      	cmp	r3, #0
 804b770:	d101      	bne.n	804b776 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 804b772:	4b0e      	ldr	r3, [pc, #56]	; (804b7ac <netconn_bind+0x68>)
 804b774:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 804b776:	68fb      	ldr	r3, [r7, #12]
 804b778:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 804b77a:	68bb      	ldr	r3, [r7, #8]
 804b77c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 804b77e:	88fb      	ldrh	r3, [r7, #6]
 804b780:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 804b782:	f107 0314 	add.w	r3, r7, #20
 804b786:	4619      	mov	r1, r3
 804b788:	4809      	ldr	r0, [pc, #36]	; (804b7b0 <netconn_bind+0x6c>)
 804b78a:	f7ff ff03 	bl	804b594 <netconn_apimsg>
 804b78e:	4603      	mov	r3, r0
 804b790:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 804b794:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 804b798:	4618      	mov	r0, r3
 804b79a:	3738      	adds	r7, #56	; 0x38
 804b79c:	46bd      	mov	sp, r7
 804b79e:	bd80      	pop	{r7, pc}
 804b7a0:	0805a320 	.word	0x0805a320
 804b7a4:	0805a458 	.word	0x0805a458
 804b7a8:	0805a378 	.word	0x0805a378
 804b7ac:	0805d928 	.word	0x0805d928
 804b7b0:	0804cf39 	.word	0x0804cf39

0804b7b4 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 804b7b4:	b580      	push	{r7, lr}
 804b7b6:	b08c      	sub	sp, #48	; 0x30
 804b7b8:	af00      	add	r7, sp, #0
 804b7ba:	6078      	str	r0, [r7, #4]
 804b7bc:	460b      	mov	r3, r1
 804b7be:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 804b7c0:	687b      	ldr	r3, [r7, #4]
 804b7c2:	2b00      	cmp	r3, #0
 804b7c4:	d109      	bne.n	804b7da <netconn_listen_with_backlog+0x26>
 804b7c6:	4b0d      	ldr	r3, [pc, #52]	; (804b7fc <netconn_listen_with_backlog+0x48>)
 804b7c8:	f240 12bb 	movw	r2, #443	; 0x1bb
 804b7cc:	490c      	ldr	r1, [pc, #48]	; (804b800 <netconn_listen_with_backlog+0x4c>)
 804b7ce:	480d      	ldr	r0, [pc, #52]	; (804b804 <netconn_listen_with_backlog+0x50>)
 804b7d0:	f00d fc30 	bl	8059034 <iprintf>
 804b7d4:	f06f 030f 	mvn.w	r3, #15
 804b7d8:	e00c      	b.n	804b7f4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 804b7da:	687b      	ldr	r3, [r7, #4]
 804b7dc:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 804b7de:	f107 030c 	add.w	r3, r7, #12
 804b7e2:	4619      	mov	r1, r3
 804b7e4:	4808      	ldr	r0, [pc, #32]	; (804b808 <netconn_listen_with_backlog+0x54>)
 804b7e6:	f7ff fed5 	bl	804b594 <netconn_apimsg>
 804b7ea:	4603      	mov	r3, r0
 804b7ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 804b7f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 804b7f4:	4618      	mov	r0, r3
 804b7f6:	3730      	adds	r7, #48	; 0x30
 804b7f8:	46bd      	mov	sp, r7
 804b7fa:	bd80      	pop	{r7, pc}
 804b7fc:	0805a320 	.word	0x0805a320
 804b800:	0805a4d8 	.word	0x0805a4d8
 804b804:	0805a378 	.word	0x0805a378
 804b808:	0804cfad 	.word	0x0804cfad

0804b80c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 804b80c:	b580      	push	{r7, lr}
 804b80e:	b086      	sub	sp, #24
 804b810:	af00      	add	r7, sp, #0
 804b812:	6078      	str	r0, [r7, #4]
 804b814:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 804b816:	683b      	ldr	r3, [r7, #0]
 804b818:	2b00      	cmp	r3, #0
 804b81a:	d109      	bne.n	804b830 <netconn_accept+0x24>
 804b81c:	4b3d      	ldr	r3, [pc, #244]	; (804b914 <netconn_accept+0x108>)
 804b81e:	f240 12e1 	movw	r2, #481	; 0x1e1
 804b822:	493d      	ldr	r1, [pc, #244]	; (804b918 <netconn_accept+0x10c>)
 804b824:	483d      	ldr	r0, [pc, #244]	; (804b91c <netconn_accept+0x110>)
 804b826:	f00d fc05 	bl	8059034 <iprintf>
 804b82a:	f06f 030f 	mvn.w	r3, #15
 804b82e:	e06c      	b.n	804b90a <netconn_accept+0xfe>
  *new_conn = NULL;
 804b830:	683b      	ldr	r3, [r7, #0]
 804b832:	2200      	movs	r2, #0
 804b834:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 804b836:	687b      	ldr	r3, [r7, #4]
 804b838:	2b00      	cmp	r3, #0
 804b83a:	d109      	bne.n	804b850 <netconn_accept+0x44>
 804b83c:	4b35      	ldr	r3, [pc, #212]	; (804b914 <netconn_accept+0x108>)
 804b83e:	f240 12e3 	movw	r2, #483	; 0x1e3
 804b842:	4937      	ldr	r1, [pc, #220]	; (804b920 <netconn_accept+0x114>)
 804b844:	4835      	ldr	r0, [pc, #212]	; (804b91c <netconn_accept+0x110>)
 804b846:	f00d fbf5 	bl	8059034 <iprintf>
 804b84a:	f06f 030f 	mvn.w	r3, #15
 804b84e:	e05c      	b.n	804b90a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 804b850:	6878      	ldr	r0, [r7, #4]
 804b852:	f000 fb6c 	bl	804bf2e <netconn_err>
 804b856:	4603      	mov	r3, r0
 804b858:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 804b85a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804b85e:	2b00      	cmp	r3, #0
 804b860:	d002      	beq.n	804b868 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 804b862:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804b866:	e050      	b.n	804b90a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 804b868:	687b      	ldr	r3, [r7, #4]
 804b86a:	3314      	adds	r3, #20
 804b86c:	4618      	mov	r0, r3
 804b86e:	f00d f852 	bl	8058916 <sys_mbox_valid>
 804b872:	4603      	mov	r3, r0
 804b874:	2b00      	cmp	r3, #0
 804b876:	d005      	beq.n	804b884 <netconn_accept+0x78>
 804b878:	687b      	ldr	r3, [r7, #4]
 804b87a:	7f1b      	ldrb	r3, [r3, #28]
 804b87c:	f003 0301 	and.w	r3, r3, #1
 804b880:	2b00      	cmp	r3, #0
 804b882:	d002      	beq.n	804b88a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 804b884:	f06f 030e 	mvn.w	r3, #14
 804b888:	e03f      	b.n	804b90a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 804b88a:	687b      	ldr	r3, [r7, #4]
 804b88c:	7f1b      	ldrb	r3, [r3, #28]
 804b88e:	f003 0302 	and.w	r3, r3, #2
 804b892:	2b00      	cmp	r3, #0
 804b894:	d00e      	beq.n	804b8b4 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 804b896:	687b      	ldr	r3, [r7, #4]
 804b898:	3314      	adds	r3, #20
 804b89a:	f107 020c 	add.w	r2, r7, #12
 804b89e:	4611      	mov	r1, r2
 804b8a0:	4618      	mov	r0, r3
 804b8a2:	f00d f81c 	bl	80588de <sys_arch_mbox_tryfetch>
 804b8a6:	4603      	mov	r3, r0
 804b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804b8ac:	d10a      	bne.n	804b8c4 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 804b8ae:	f06f 0306 	mvn.w	r3, #6
 804b8b2:	e02a      	b.n	804b90a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 804b8b4:	687b      	ldr	r3, [r7, #4]
 804b8b6:	3314      	adds	r3, #20
 804b8b8:	f107 010c 	add.w	r1, r7, #12
 804b8bc:	2200      	movs	r2, #0
 804b8be:	4618      	mov	r0, r3
 804b8c0:	f00c ffce 	bl	8058860 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 804b8c4:	687b      	ldr	r3, [r7, #4]
 804b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b8c8:	2b00      	cmp	r3, #0
 804b8ca:	d005      	beq.n	804b8d8 <netconn_accept+0xcc>
 804b8cc:	687b      	ldr	r3, [r7, #4]
 804b8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804b8d0:	2200      	movs	r2, #0
 804b8d2:	2101      	movs	r1, #1
 804b8d4:	6878      	ldr	r0, [r7, #4]
 804b8d6:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 804b8d8:	68fb      	ldr	r3, [r7, #12]
 804b8da:	f107 0213 	add.w	r2, r7, #19
 804b8de:	4611      	mov	r1, r2
 804b8e0:	4618      	mov	r0, r3
 804b8e2:	f000 fb75 	bl	804bfd0 <lwip_netconn_is_err_msg>
 804b8e6:	4603      	mov	r3, r0
 804b8e8:	2b00      	cmp	r3, #0
 804b8ea:	d002      	beq.n	804b8f2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 804b8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804b8f0:	e00b      	b.n	804b90a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 804b8f2:	68fb      	ldr	r3, [r7, #12]
 804b8f4:	2b00      	cmp	r3, #0
 804b8f6:	d102      	bne.n	804b8fe <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 804b8f8:	f06f 030e 	mvn.w	r3, #14
 804b8fc:	e005      	b.n	804b90a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 804b8fe:	68fb      	ldr	r3, [r7, #12]
 804b900:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 804b902:	683b      	ldr	r3, [r7, #0]
 804b904:	697a      	ldr	r2, [r7, #20]
 804b906:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 804b908:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 804b90a:	4618      	mov	r0, r3
 804b90c:	3718      	adds	r7, #24
 804b90e:	46bd      	mov	sp, r7
 804b910:	bd80      	pop	{r7, pc}
 804b912:	bf00      	nop
 804b914:	0805a320 	.word	0x0805a320
 804b918:	0805a4f8 	.word	0x0805a4f8
 804b91c:	0805a378 	.word	0x0805a378
 804b920:	0805a518 	.word	0x0805a518

0804b924 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 804b924:	b580      	push	{r7, lr}
 804b926:	b088      	sub	sp, #32
 804b928:	af00      	add	r7, sp, #0
 804b92a:	60f8      	str	r0, [r7, #12]
 804b92c:	60b9      	str	r1, [r7, #8]
 804b92e:	4613      	mov	r3, r2
 804b930:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 804b932:	2300      	movs	r3, #0
 804b934:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 804b936:	68bb      	ldr	r3, [r7, #8]
 804b938:	2b00      	cmp	r3, #0
 804b93a:	d109      	bne.n	804b950 <netconn_recv_data+0x2c>
 804b93c:	4b58      	ldr	r3, [pc, #352]	; (804baa0 <netconn_recv_data+0x17c>)
 804b93e:	f44f 7212 	mov.w	r2, #584	; 0x248
 804b942:	4958      	ldr	r1, [pc, #352]	; (804baa4 <netconn_recv_data+0x180>)
 804b944:	4858      	ldr	r0, [pc, #352]	; (804baa8 <netconn_recv_data+0x184>)
 804b946:	f00d fb75 	bl	8059034 <iprintf>
 804b94a:	f06f 030f 	mvn.w	r3, #15
 804b94e:	e0a2      	b.n	804ba96 <netconn_recv_data+0x172>
  *new_buf = NULL;
 804b950:	68bb      	ldr	r3, [r7, #8]
 804b952:	2200      	movs	r2, #0
 804b954:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 804b956:	68fb      	ldr	r3, [r7, #12]
 804b958:	2b00      	cmp	r3, #0
 804b95a:	d109      	bne.n	804b970 <netconn_recv_data+0x4c>
 804b95c:	4b50      	ldr	r3, [pc, #320]	; (804baa0 <netconn_recv_data+0x17c>)
 804b95e:	f240 224a 	movw	r2, #586	; 0x24a
 804b962:	4952      	ldr	r1, [pc, #328]	; (804baac <netconn_recv_data+0x188>)
 804b964:	4850      	ldr	r0, [pc, #320]	; (804baa8 <netconn_recv_data+0x184>)
 804b966:	f00d fb65 	bl	8059034 <iprintf>
 804b96a:	f06f 030f 	mvn.w	r3, #15
 804b96e:	e092      	b.n	804ba96 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 804b970:	68fb      	ldr	r3, [r7, #12]
 804b972:	3310      	adds	r3, #16
 804b974:	4618      	mov	r0, r3
 804b976:	f00c ffce 	bl	8058916 <sys_mbox_valid>
 804b97a:	4603      	mov	r3, r0
 804b97c:	2b00      	cmp	r3, #0
 804b97e:	d10e      	bne.n	804b99e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 804b980:	68f8      	ldr	r0, [r7, #12]
 804b982:	f000 fad4 	bl	804bf2e <netconn_err>
 804b986:	4603      	mov	r3, r0
 804b988:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 804b98a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 804b98e:	2b00      	cmp	r3, #0
 804b990:	d002      	beq.n	804b998 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 804b992:	f997 301c 	ldrsb.w	r3, [r7, #28]
 804b996:	e07e      	b.n	804ba96 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 804b998:	f06f 030a 	mvn.w	r3, #10
 804b99c:	e07b      	b.n	804ba96 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 804b99e:	68fb      	ldr	r3, [r7, #12]
 804b9a0:	7f1b      	ldrb	r3, [r3, #28]
 804b9a2:	f003 0302 	and.w	r3, r3, #2
 804b9a6:	2b00      	cmp	r3, #0
 804b9a8:	d10f      	bne.n	804b9ca <netconn_recv_data+0xa6>
 804b9aa:	79fb      	ldrb	r3, [r7, #7]
 804b9ac:	f003 0304 	and.w	r3, r3, #4
 804b9b0:	2b00      	cmp	r3, #0
 804b9b2:	d10a      	bne.n	804b9ca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 804b9b4:	68fb      	ldr	r3, [r7, #12]
 804b9b6:	7f1b      	ldrb	r3, [r3, #28]
 804b9b8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 804b9bc:	2b00      	cmp	r3, #0
 804b9be:	d104      	bne.n	804b9ca <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 804b9c0:	68fb      	ldr	r3, [r7, #12]
 804b9c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 804b9c6:	2b00      	cmp	r3, #0
 804b9c8:	d023      	beq.n	804ba12 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 804b9ca:	68fb      	ldr	r3, [r7, #12]
 804b9cc:	3310      	adds	r3, #16
 804b9ce:	f107 0218 	add.w	r2, r7, #24
 804b9d2:	4611      	mov	r1, r2
 804b9d4:	4618      	mov	r0, r3
 804b9d6:	f00c ff82 	bl	80588de <sys_arch_mbox_tryfetch>
 804b9da:	4603      	mov	r3, r0
 804b9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804b9e0:	d11f      	bne.n	804ba22 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 804b9e2:	68f8      	ldr	r0, [r7, #12]
 804b9e4:	f000 faa3 	bl	804bf2e <netconn_err>
 804b9e8:	4603      	mov	r3, r0
 804b9ea:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 804b9ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 804b9f0:	2b00      	cmp	r3, #0
 804b9f2:	d002      	beq.n	804b9fa <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 804b9f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 804b9f8:	e04d      	b.n	804ba96 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 804b9fa:	68fb      	ldr	r3, [r7, #12]
 804b9fc:	7f1b      	ldrb	r3, [r3, #28]
 804b9fe:	f003 0301 	and.w	r3, r3, #1
 804ba02:	2b00      	cmp	r3, #0
 804ba04:	d002      	beq.n	804ba0c <netconn_recv_data+0xe8>
        return ERR_CONN;
 804ba06:	f06f 030a 	mvn.w	r3, #10
 804ba0a:	e044      	b.n	804ba96 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 804ba0c:	f06f 0306 	mvn.w	r3, #6
 804ba10:	e041      	b.n	804ba96 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 804ba12:	68fb      	ldr	r3, [r7, #12]
 804ba14:	3310      	adds	r3, #16
 804ba16:	f107 0118 	add.w	r1, r7, #24
 804ba1a:	2200      	movs	r2, #0
 804ba1c:	4618      	mov	r0, r3
 804ba1e:	f00c ff1f 	bl	8058860 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 804ba22:	68fb      	ldr	r3, [r7, #12]
 804ba24:	781b      	ldrb	r3, [r3, #0]
 804ba26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804ba2a:	2b10      	cmp	r3, #16
 804ba2c:	d117      	bne.n	804ba5e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 804ba2e:	69bb      	ldr	r3, [r7, #24]
 804ba30:	f107 0217 	add.w	r2, r7, #23
 804ba34:	4611      	mov	r1, r2
 804ba36:	4618      	mov	r0, r3
 804ba38:	f000 faca 	bl	804bfd0 <lwip_netconn_is_err_msg>
 804ba3c:	4603      	mov	r3, r0
 804ba3e:	2b00      	cmp	r3, #0
 804ba40:	d009      	beq.n	804ba56 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 804ba42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 804ba46:	f113 0f0f 	cmn.w	r3, #15
 804ba4a:	d101      	bne.n	804ba50 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 804ba4c:	2300      	movs	r3, #0
 804ba4e:	e022      	b.n	804ba96 <netconn_recv_data+0x172>
      }
      return err;
 804ba50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 804ba54:	e01f      	b.n	804ba96 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 804ba56:	69bb      	ldr	r3, [r7, #24]
 804ba58:	891b      	ldrh	r3, [r3, #8]
 804ba5a:	83fb      	strh	r3, [r7, #30]
 804ba5c:	e00d      	b.n	804ba7a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 804ba5e:	69bb      	ldr	r3, [r7, #24]
 804ba60:	2b00      	cmp	r3, #0
 804ba62:	d106      	bne.n	804ba72 <netconn_recv_data+0x14e>
 804ba64:	4b0e      	ldr	r3, [pc, #56]	; (804baa0 <netconn_recv_data+0x17c>)
 804ba66:	f240 2291 	movw	r2, #657	; 0x291
 804ba6a:	4911      	ldr	r1, [pc, #68]	; (804bab0 <netconn_recv_data+0x18c>)
 804ba6c:	480e      	ldr	r0, [pc, #56]	; (804baa8 <netconn_recv_data+0x184>)
 804ba6e:	f00d fae1 	bl	8059034 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 804ba72:	69bb      	ldr	r3, [r7, #24]
 804ba74:	681b      	ldr	r3, [r3, #0]
 804ba76:	891b      	ldrh	r3, [r3, #8]
 804ba78:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 804ba7a:	68fb      	ldr	r3, [r7, #12]
 804ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ba7e:	2b00      	cmp	r3, #0
 804ba80:	d005      	beq.n	804ba8e <netconn_recv_data+0x16a>
 804ba82:	68fb      	ldr	r3, [r7, #12]
 804ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ba86:	8bfa      	ldrh	r2, [r7, #30]
 804ba88:	2101      	movs	r1, #1
 804ba8a:	68f8      	ldr	r0, [r7, #12]
 804ba8c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 804ba8e:	69ba      	ldr	r2, [r7, #24]
 804ba90:	68bb      	ldr	r3, [r7, #8]
 804ba92:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 804ba94:	2300      	movs	r3, #0
}
 804ba96:	4618      	mov	r0, r3
 804ba98:	3720      	adds	r7, #32
 804ba9a:	46bd      	mov	sp, r7
 804ba9c:	bd80      	pop	{r7, pc}
 804ba9e:	bf00      	nop
 804baa0:	0805a320 	.word	0x0805a320
 804baa4:	0805a538 	.word	0x0805a538
 804baa8:	0805a378 	.word	0x0805a378
 804baac:	0805a558 	.word	0x0805a558
 804bab0:	0805a574 	.word	0x0805a574

0804bab4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 804bab4:	b580      	push	{r7, lr}
 804bab6:	b084      	sub	sp, #16
 804bab8:	af00      	add	r7, sp, #0
 804baba:	60f8      	str	r0, [r7, #12]
 804babc:	60b9      	str	r1, [r7, #8]
 804babe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 804bac0:	68fb      	ldr	r3, [r7, #12]
 804bac2:	2b00      	cmp	r3, #0
 804bac4:	d005      	beq.n	804bad2 <netconn_tcp_recvd_msg+0x1e>
 804bac6:	68fb      	ldr	r3, [r7, #12]
 804bac8:	781b      	ldrb	r3, [r3, #0]
 804baca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804bace:	2b10      	cmp	r3, #16
 804bad0:	d009      	beq.n	804bae6 <netconn_tcp_recvd_msg+0x32>
 804bad2:	4b0c      	ldr	r3, [pc, #48]	; (804bb04 <netconn_tcp_recvd_msg+0x50>)
 804bad4:	f240 22a7 	movw	r2, #679	; 0x2a7
 804bad8:	490b      	ldr	r1, [pc, #44]	; (804bb08 <netconn_tcp_recvd_msg+0x54>)
 804bada:	480c      	ldr	r0, [pc, #48]	; (804bb0c <netconn_tcp_recvd_msg+0x58>)
 804badc:	f00d faaa 	bl	8059034 <iprintf>
 804bae0:	f06f 030f 	mvn.w	r3, #15
 804bae4:	e00a      	b.n	804bafc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 804bae6:	687b      	ldr	r3, [r7, #4]
 804bae8:	68fa      	ldr	r2, [r7, #12]
 804baea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 804baec:	687b      	ldr	r3, [r7, #4]
 804baee:	68ba      	ldr	r2, [r7, #8]
 804baf0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 804baf2:	6879      	ldr	r1, [r7, #4]
 804baf4:	4806      	ldr	r0, [pc, #24]	; (804bb10 <netconn_tcp_recvd_msg+0x5c>)
 804baf6:	f7ff fd4d 	bl	804b594 <netconn_apimsg>
 804bafa:	4603      	mov	r3, r0
}
 804bafc:	4618      	mov	r0, r3
 804bafe:	3710      	adds	r7, #16
 804bb00:	46bd      	mov	sp, r7
 804bb02:	bd80      	pop	{r7, pc}
 804bb04:	0805a320 	.word	0x0805a320
 804bb08:	0805a580 	.word	0x0805a580
 804bb0c:	0805a378 	.word	0x0805a378
 804bb10:	0804d0dd 	.word	0x0804d0dd

0804bb14 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 804bb14:	b580      	push	{r7, lr}
 804bb16:	b090      	sub	sp, #64	; 0x40
 804bb18:	af00      	add	r7, sp, #0
 804bb1a:	60f8      	str	r0, [r7, #12]
 804bb1c:	60b9      	str	r1, [r7, #8]
 804bb1e:	4613      	mov	r3, r2
 804bb20:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 804bb22:	68fb      	ldr	r3, [r7, #12]
 804bb24:	3310      	adds	r3, #16
 804bb26:	4618      	mov	r0, r3
 804bb28:	f00c fef5 	bl	8058916 <sys_mbox_valid>
 804bb2c:	4603      	mov	r3, r0
 804bb2e:	2b00      	cmp	r3, #0
 804bb30:	d102      	bne.n	804bb38 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 804bb32:	f06f 030a 	mvn.w	r3, #10
 804bb36:	e06d      	b.n	804bc14 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 804bb38:	68fb      	ldr	r3, [r7, #12]
 804bb3a:	7f1b      	ldrb	r3, [r3, #28]
 804bb3c:	b25b      	sxtb	r3, r3
 804bb3e:	2b00      	cmp	r3, #0
 804bb40:	da07      	bge.n	804bb52 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 804bb42:	68fb      	ldr	r3, [r7, #12]
 804bb44:	7f1b      	ldrb	r3, [r3, #28]
 804bb46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804bb4a:	b2da      	uxtb	r2, r3
 804bb4c:	68fb      	ldr	r3, [r7, #12]
 804bb4e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 804bb50:	e039      	b.n	804bbc6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 804bb52:	79fb      	ldrb	r3, [r7, #7]
 804bb54:	461a      	mov	r2, r3
 804bb56:	68b9      	ldr	r1, [r7, #8]
 804bb58:	68f8      	ldr	r0, [r7, #12]
 804bb5a:	f7ff fee3 	bl	804b924 <netconn_recv_data>
 804bb5e:	4603      	mov	r3, r0
 804bb60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 804bb64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 804bb68:	2b00      	cmp	r3, #0
 804bb6a:	d002      	beq.n	804bb72 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 804bb6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 804bb70:	e050      	b.n	804bc14 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 804bb72:	68bb      	ldr	r3, [r7, #8]
 804bb74:	681b      	ldr	r3, [r3, #0]
 804bb76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 804bb78:	79fb      	ldrb	r3, [r7, #7]
 804bb7a:	f003 0308 	and.w	r3, r3, #8
 804bb7e:	2b00      	cmp	r3, #0
 804bb80:	d10e      	bne.n	804bba0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 804bb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804bb84:	2b00      	cmp	r3, #0
 804bb86:	d002      	beq.n	804bb8e <netconn_recv_data_tcp+0x7a>
 804bb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804bb8a:	891b      	ldrh	r3, [r3, #8]
 804bb8c:	e000      	b.n	804bb90 <netconn_recv_data_tcp+0x7c>
 804bb8e:	2301      	movs	r3, #1
 804bb90:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 804bb92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 804bb94:	f107 0214 	add.w	r2, r7, #20
 804bb98:	4619      	mov	r1, r3
 804bb9a:	68f8      	ldr	r0, [r7, #12]
 804bb9c:	f7ff ff8a 	bl	804bab4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 804bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804bba2:	2b00      	cmp	r3, #0
 804bba4:	d134      	bne.n	804bc10 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 804bba6:	79fb      	ldrb	r3, [r7, #7]
 804bba8:	f003 0310 	and.w	r3, r3, #16
 804bbac:	2b00      	cmp	r3, #0
 804bbae:	d009      	beq.n	804bbc4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 804bbb0:	68fb      	ldr	r3, [r7, #12]
 804bbb2:	7f1b      	ldrb	r3, [r3, #28]
 804bbb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804bbb8:	b2da      	uxtb	r2, r3
 804bbba:	68fb      	ldr	r3, [r7, #12]
 804bbbc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 804bbbe:	f06f 0306 	mvn.w	r3, #6
 804bbc2:	e027      	b.n	804bc14 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 804bbc4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 804bbc6:	68fb      	ldr	r3, [r7, #12]
 804bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804bbca:	2b00      	cmp	r3, #0
 804bbcc:	d005      	beq.n	804bbda <netconn_recv_data_tcp+0xc6>
 804bbce:	68fb      	ldr	r3, [r7, #12]
 804bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804bbd2:	2200      	movs	r2, #0
 804bbd4:	2101      	movs	r1, #1
 804bbd6:	68f8      	ldr	r0, [r7, #12]
 804bbd8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 804bbda:	68fb      	ldr	r3, [r7, #12]
 804bbdc:	685b      	ldr	r3, [r3, #4]
 804bbde:	2b00      	cmp	r3, #0
 804bbe0:	d10f      	bne.n	804bc02 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 804bbe2:	68f8      	ldr	r0, [r7, #12]
 804bbe4:	f000 f9a3 	bl	804bf2e <netconn_err>
 804bbe8:	4603      	mov	r3, r0
 804bbea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 804bbee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 804bbf2:	2b00      	cmp	r3, #0
 804bbf4:	d002      	beq.n	804bbfc <netconn_recv_data_tcp+0xe8>
          return err;
 804bbf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 804bbfa:	e00b      	b.n	804bc14 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 804bbfc:	f06f 030d 	mvn.w	r3, #13
 804bc00:	e008      	b.n	804bc14 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 804bc02:	2101      	movs	r1, #1
 804bc04:	68f8      	ldr	r0, [r7, #12]
 804bc06:	f000 f955 	bl	804beb4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 804bc0a:	f06f 030e 	mvn.w	r3, #14
 804bc0e:	e001      	b.n	804bc14 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 804bc10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 804bc14:	4618      	mov	r0, r3
 804bc16:	3740      	adds	r7, #64	; 0x40
 804bc18:	46bd      	mov	sp, r7
 804bc1a:	bd80      	pop	{r7, pc}

0804bc1c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 804bc1c:	b580      	push	{r7, lr}
 804bc1e:	b086      	sub	sp, #24
 804bc20:	af00      	add	r7, sp, #0
 804bc22:	6078      	str	r0, [r7, #4]
 804bc24:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 804bc26:	2300      	movs	r3, #0
 804bc28:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 804bc2a:	683b      	ldr	r3, [r7, #0]
 804bc2c:	2b00      	cmp	r3, #0
 804bc2e:	d109      	bne.n	804bc44 <netconn_recv+0x28>
 804bc30:	4b32      	ldr	r3, [pc, #200]	; (804bcfc <netconn_recv+0xe0>)
 804bc32:	f240 3263 	movw	r2, #867	; 0x363
 804bc36:	4932      	ldr	r1, [pc, #200]	; (804bd00 <netconn_recv+0xe4>)
 804bc38:	4832      	ldr	r0, [pc, #200]	; (804bd04 <netconn_recv+0xe8>)
 804bc3a:	f00d f9fb 	bl	8059034 <iprintf>
 804bc3e:	f06f 030f 	mvn.w	r3, #15
 804bc42:	e056      	b.n	804bcf2 <netconn_recv+0xd6>
  *new_buf = NULL;
 804bc44:	683b      	ldr	r3, [r7, #0]
 804bc46:	2200      	movs	r2, #0
 804bc48:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 804bc4a:	687b      	ldr	r3, [r7, #4]
 804bc4c:	2b00      	cmp	r3, #0
 804bc4e:	d109      	bne.n	804bc64 <netconn_recv+0x48>
 804bc50:	4b2a      	ldr	r3, [pc, #168]	; (804bcfc <netconn_recv+0xe0>)
 804bc52:	f240 3265 	movw	r2, #869	; 0x365
 804bc56:	492c      	ldr	r1, [pc, #176]	; (804bd08 <netconn_recv+0xec>)
 804bc58:	482a      	ldr	r0, [pc, #168]	; (804bd04 <netconn_recv+0xe8>)
 804bc5a:	f00d f9eb 	bl	8059034 <iprintf>
 804bc5e:	f06f 030f 	mvn.w	r3, #15
 804bc62:	e046      	b.n	804bcf2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 804bc64:	687b      	ldr	r3, [r7, #4]
 804bc66:	781b      	ldrb	r3, [r3, #0]
 804bc68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804bc6c:	2b10      	cmp	r3, #16
 804bc6e:	d13a      	bne.n	804bce6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 804bc70:	2300      	movs	r3, #0
 804bc72:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 804bc74:	2006      	movs	r0, #6
 804bc76:	f002 fc2b 	bl	804e4d0 <memp_malloc>
 804bc7a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 804bc7c:	697b      	ldr	r3, [r7, #20]
 804bc7e:	2b00      	cmp	r3, #0
 804bc80:	d102      	bne.n	804bc88 <netconn_recv+0x6c>
      return ERR_MEM;
 804bc82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804bc86:	e034      	b.n	804bcf2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 804bc88:	f107 030c 	add.w	r3, r7, #12
 804bc8c:	2200      	movs	r2, #0
 804bc8e:	4619      	mov	r1, r3
 804bc90:	6878      	ldr	r0, [r7, #4]
 804bc92:	f7ff ff3f 	bl	804bb14 <netconn_recv_data_tcp>
 804bc96:	4603      	mov	r3, r0
 804bc98:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 804bc9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804bc9e:	2b00      	cmp	r3, #0
 804bca0:	d006      	beq.n	804bcb0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 804bca2:	6979      	ldr	r1, [r7, #20]
 804bca4:	2006      	movs	r0, #6
 804bca6:	f002 fc89 	bl	804e5bc <memp_free>
      return err;
 804bcaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 804bcae:	e020      	b.n	804bcf2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 804bcb0:	68fb      	ldr	r3, [r7, #12]
 804bcb2:	2b00      	cmp	r3, #0
 804bcb4:	d106      	bne.n	804bcc4 <netconn_recv+0xa8>
 804bcb6:	4b11      	ldr	r3, [pc, #68]	; (804bcfc <netconn_recv+0xe0>)
 804bcb8:	f240 3279 	movw	r2, #889	; 0x379
 804bcbc:	4913      	ldr	r1, [pc, #76]	; (804bd0c <netconn_recv+0xf0>)
 804bcbe:	4811      	ldr	r0, [pc, #68]	; (804bd04 <netconn_recv+0xe8>)
 804bcc0:	f00d f9b8 	bl	8059034 <iprintf>

    buf->p = p;
 804bcc4:	68fa      	ldr	r2, [r7, #12]
 804bcc6:	697b      	ldr	r3, [r7, #20]
 804bcc8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 804bcca:	68fa      	ldr	r2, [r7, #12]
 804bccc:	697b      	ldr	r3, [r7, #20]
 804bcce:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 804bcd0:	697b      	ldr	r3, [r7, #20]
 804bcd2:	2200      	movs	r2, #0
 804bcd4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 804bcd6:	697b      	ldr	r3, [r7, #20]
 804bcd8:	2200      	movs	r2, #0
 804bcda:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 804bcdc:	683b      	ldr	r3, [r7, #0]
 804bcde:	697a      	ldr	r2, [r7, #20]
 804bce0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 804bce2:	2300      	movs	r3, #0
 804bce4:	e005      	b.n	804bcf2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 804bce6:	2200      	movs	r2, #0
 804bce8:	6839      	ldr	r1, [r7, #0]
 804bcea:	6878      	ldr	r0, [r7, #4]
 804bcec:	f7ff fe1a 	bl	804b924 <netconn_recv_data>
 804bcf0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 804bcf2:	4618      	mov	r0, r3
 804bcf4:	3718      	adds	r7, #24
 804bcf6:	46bd      	mov	sp, r7
 804bcf8:	bd80      	pop	{r7, pc}
 804bcfa:	bf00      	nop
 804bcfc:	0805a320 	.word	0x0805a320
 804bd00:	0805a538 	.word	0x0805a538
 804bd04:	0805a378 	.word	0x0805a378
 804bd08:	0805a558 	.word	0x0805a558
 804bd0c:	0805a5d0 	.word	0x0805a5d0

0804bd10 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 804bd10:	b580      	push	{r7, lr}
 804bd12:	b088      	sub	sp, #32
 804bd14:	af02      	add	r7, sp, #8
 804bd16:	60f8      	str	r0, [r7, #12]
 804bd18:	60b9      	str	r1, [r7, #8]
 804bd1a:	607a      	str	r2, [r7, #4]
 804bd1c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 804bd1e:	68bb      	ldr	r3, [r7, #8]
 804bd20:	613b      	str	r3, [r7, #16]
  vector.len = size;
 804bd22:	687b      	ldr	r3, [r7, #4]
 804bd24:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 804bd26:	78fa      	ldrb	r2, [r7, #3]
 804bd28:	f107 0110 	add.w	r1, r7, #16
 804bd2c:	6a3b      	ldr	r3, [r7, #32]
 804bd2e:	9300      	str	r3, [sp, #0]
 804bd30:	4613      	mov	r3, r2
 804bd32:	2201      	movs	r2, #1
 804bd34:	68f8      	ldr	r0, [r7, #12]
 804bd36:	f000 f805 	bl	804bd44 <netconn_write_vectors_partly>
 804bd3a:	4603      	mov	r3, r0
}
 804bd3c:	4618      	mov	r0, r3
 804bd3e:	3718      	adds	r7, #24
 804bd40:	46bd      	mov	sp, r7
 804bd42:	bd80      	pop	{r7, pc}

0804bd44 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 804bd44:	b580      	push	{r7, lr}
 804bd46:	b092      	sub	sp, #72	; 0x48
 804bd48:	af00      	add	r7, sp, #0
 804bd4a:	60f8      	str	r0, [r7, #12]
 804bd4c:	60b9      	str	r1, [r7, #8]
 804bd4e:	4611      	mov	r1, r2
 804bd50:	461a      	mov	r2, r3
 804bd52:	460b      	mov	r3, r1
 804bd54:	80fb      	strh	r3, [r7, #6]
 804bd56:	4613      	mov	r3, r2
 804bd58:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 804bd5a:	68fb      	ldr	r3, [r7, #12]
 804bd5c:	2b00      	cmp	r3, #0
 804bd5e:	d109      	bne.n	804bd74 <netconn_write_vectors_partly+0x30>
 804bd60:	4b4e      	ldr	r3, [pc, #312]	; (804be9c <netconn_write_vectors_partly+0x158>)
 804bd62:	f240 32ee 	movw	r2, #1006	; 0x3ee
 804bd66:	494e      	ldr	r1, [pc, #312]	; (804bea0 <netconn_write_vectors_partly+0x15c>)
 804bd68:	484e      	ldr	r0, [pc, #312]	; (804bea4 <netconn_write_vectors_partly+0x160>)
 804bd6a:	f00d f963 	bl	8059034 <iprintf>
 804bd6e:	f06f 030f 	mvn.w	r3, #15
 804bd72:	e08e      	b.n	804be92 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 804bd74:	68fb      	ldr	r3, [r7, #12]
 804bd76:	781b      	ldrb	r3, [r3, #0]
 804bd78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804bd7c:	2b10      	cmp	r3, #16
 804bd7e:	d009      	beq.n	804bd94 <netconn_write_vectors_partly+0x50>
 804bd80:	4b46      	ldr	r3, [pc, #280]	; (804be9c <netconn_write_vectors_partly+0x158>)
 804bd82:	f240 32ef 	movw	r2, #1007	; 0x3ef
 804bd86:	4948      	ldr	r1, [pc, #288]	; (804bea8 <netconn_write_vectors_partly+0x164>)
 804bd88:	4846      	ldr	r0, [pc, #280]	; (804bea4 <netconn_write_vectors_partly+0x160>)
 804bd8a:	f00d f953 	bl	8059034 <iprintf>
 804bd8e:	f06f 0305 	mvn.w	r3, #5
 804bd92:	e07e      	b.n	804be92 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 804bd94:	68fb      	ldr	r3, [r7, #12]
 804bd96:	7f1b      	ldrb	r3, [r3, #28]
 804bd98:	f003 0302 	and.w	r3, r3, #2
 804bd9c:	2b00      	cmp	r3, #0
 804bd9e:	d104      	bne.n	804bdaa <netconn_write_vectors_partly+0x66>
 804bda0:	797b      	ldrb	r3, [r7, #5]
 804bda2:	f003 0304 	and.w	r3, r3, #4
 804bda6:	2b00      	cmp	r3, #0
 804bda8:	d001      	beq.n	804bdae <netconn_write_vectors_partly+0x6a>
 804bdaa:	2301      	movs	r3, #1
 804bdac:	e000      	b.n	804bdb0 <netconn_write_vectors_partly+0x6c>
 804bdae:	2300      	movs	r3, #0
 804bdb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 804bdb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 804bdb8:	2b00      	cmp	r3, #0
 804bdba:	d005      	beq.n	804bdc8 <netconn_write_vectors_partly+0x84>
 804bdbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804bdbe:	2b00      	cmp	r3, #0
 804bdc0:	d102      	bne.n	804bdc8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 804bdc2:	f06f 0305 	mvn.w	r3, #5
 804bdc6:	e064      	b.n	804be92 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 804bdc8:	2300      	movs	r3, #0
 804bdca:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 804bdcc:	2300      	movs	r3, #0
 804bdce:	643b      	str	r3, [r7, #64]	; 0x40
 804bdd0:	e015      	b.n	804bdfe <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 804bdd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804bdd4:	00db      	lsls	r3, r3, #3
 804bdd6:	68ba      	ldr	r2, [r7, #8]
 804bdd8:	4413      	add	r3, r2
 804bdda:	685b      	ldr	r3, [r3, #4]
 804bddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 804bdde:	4413      	add	r3, r2
 804bde0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 804bde2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804bde4:	00db      	lsls	r3, r3, #3
 804bde6:	68ba      	ldr	r2, [r7, #8]
 804bde8:	4413      	add	r3, r2
 804bdea:	685b      	ldr	r3, [r3, #4]
 804bdec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 804bdee:	429a      	cmp	r2, r3
 804bdf0:	d202      	bcs.n	804bdf8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 804bdf2:	f06f 0305 	mvn.w	r3, #5
 804bdf6:	e04c      	b.n	804be92 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 804bdf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804bdfa:	3301      	adds	r3, #1
 804bdfc:	643b      	str	r3, [r7, #64]	; 0x40
 804bdfe:	88fb      	ldrh	r3, [r7, #6]
 804be00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 804be02:	429a      	cmp	r2, r3
 804be04:	dbe5      	blt.n	804bdd2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 804be06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804be08:	2b00      	cmp	r3, #0
 804be0a:	d101      	bne.n	804be10 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 804be0c:	2300      	movs	r3, #0
 804be0e:	e040      	b.n	804be92 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 804be10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804be12:	2b00      	cmp	r3, #0
 804be14:	da0a      	bge.n	804be2c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 804be16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804be18:	2b00      	cmp	r3, #0
 804be1a:	d102      	bne.n	804be22 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 804be1c:	f06f 0305 	mvn.w	r3, #5
 804be20:	e037      	b.n	804be92 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 804be22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 804be26:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 804be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804be2a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 804be2c:	68fb      	ldr	r3, [r7, #12]
 804be2e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 804be30:	68bb      	ldr	r3, [r7, #8]
 804be32:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 804be34:	88fb      	ldrh	r3, [r7, #6]
 804be36:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 804be38:	2300      	movs	r3, #0
 804be3a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 804be3c:	797b      	ldrb	r3, [r7, #5]
 804be3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 804be42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 804be44:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 804be46:	2300      	movs	r3, #0
 804be48:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 804be4a:	f107 0314 	add.w	r3, r7, #20
 804be4e:	4619      	mov	r1, r3
 804be50:	4816      	ldr	r0, [pc, #88]	; (804beac <netconn_write_vectors_partly+0x168>)
 804be52:	f7ff fb9f 	bl	804b594 <netconn_apimsg>
 804be56:	4603      	mov	r3, r0
 804be58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 804be5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 804be60:	2b00      	cmp	r3, #0
 804be62:	d114      	bne.n	804be8e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 804be64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804be66:	2b00      	cmp	r3, #0
 804be68:	d002      	beq.n	804be70 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 804be6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804be6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804be6e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 804be70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 804be74:	2b00      	cmp	r3, #0
 804be76:	d10a      	bne.n	804be8e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 804be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804be7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 804be7c:	429a      	cmp	r2, r3
 804be7e:	d006      	beq.n	804be8e <netconn_write_vectors_partly+0x14a>
 804be80:	4b06      	ldr	r3, [pc, #24]	; (804be9c <netconn_write_vectors_partly+0x158>)
 804be82:	f44f 6286 	mov.w	r2, #1072	; 0x430
 804be86:	490a      	ldr	r1, [pc, #40]	; (804beb0 <netconn_write_vectors_partly+0x16c>)
 804be88:	4806      	ldr	r0, [pc, #24]	; (804bea4 <netconn_write_vectors_partly+0x160>)
 804be8a:	f00d f8d3 	bl	8059034 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 804be8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 804be92:	4618      	mov	r0, r3
 804be94:	3748      	adds	r7, #72	; 0x48
 804be96:	46bd      	mov	sp, r7
 804be98:	bd80      	pop	{r7, pc}
 804be9a:	bf00      	nop
 804be9c:	0805a320 	.word	0x0805a320
 804bea0:	0805a5f8 	.word	0x0805a5f8
 804bea4:	0805a378 	.word	0x0805a378
 804bea8:	0805a614 	.word	0x0805a614
 804beac:	0804d4e1 	.word	0x0804d4e1
 804beb0:	0805a638 	.word	0x0805a638

0804beb4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 804beb4:	b580      	push	{r7, lr}
 804beb6:	b08c      	sub	sp, #48	; 0x30
 804beb8:	af00      	add	r7, sp, #0
 804beba:	6078      	str	r0, [r7, #4]
 804bebc:	460b      	mov	r3, r1
 804bebe:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 804bec0:	687b      	ldr	r3, [r7, #4]
 804bec2:	2b00      	cmp	r3, #0
 804bec4:	d109      	bne.n	804beda <netconn_close_shutdown+0x26>
 804bec6:	4b0f      	ldr	r3, [pc, #60]	; (804bf04 <netconn_close_shutdown+0x50>)
 804bec8:	f240 4247 	movw	r2, #1095	; 0x447
 804becc:	490e      	ldr	r1, [pc, #56]	; (804bf08 <netconn_close_shutdown+0x54>)
 804bece:	480f      	ldr	r0, [pc, #60]	; (804bf0c <netconn_close_shutdown+0x58>)
 804bed0:	f00d f8b0 	bl	8059034 <iprintf>
 804bed4:	f06f 030f 	mvn.w	r3, #15
 804bed8:	e010      	b.n	804befc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 804beda:	687b      	ldr	r3, [r7, #4]
 804bedc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 804bede:	78fb      	ldrb	r3, [r7, #3]
 804bee0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 804bee2:	2329      	movs	r3, #41	; 0x29
 804bee4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 804bee6:	f107 030c 	add.w	r3, r7, #12
 804beea:	4619      	mov	r1, r3
 804beec:	4808      	ldr	r0, [pc, #32]	; (804bf10 <netconn_close_shutdown+0x5c>)
 804beee:	f7ff fb51 	bl	804b594 <netconn_apimsg>
 804bef2:	4603      	mov	r3, r0
 804bef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 804bef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 804befc:	4618      	mov	r0, r3
 804befe:	3730      	adds	r7, #48	; 0x30
 804bf00:	46bd      	mov	sp, r7
 804bf02:	bd80      	pop	{r7, pc}
 804bf04:	0805a320 	.word	0x0805a320
 804bf08:	0805a65c 	.word	0x0805a65c
 804bf0c:	0805a378 	.word	0x0805a378
 804bf10:	0804d5f9 	.word	0x0804d5f9

0804bf14 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 804bf14:	b580      	push	{r7, lr}
 804bf16:	b082      	sub	sp, #8
 804bf18:	af00      	add	r7, sp, #0
 804bf1a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 804bf1c:	2103      	movs	r1, #3
 804bf1e:	6878      	ldr	r0, [r7, #4]
 804bf20:	f7ff ffc8 	bl	804beb4 <netconn_close_shutdown>
 804bf24:	4603      	mov	r3, r0
}
 804bf26:	4618      	mov	r0, r3
 804bf28:	3708      	adds	r7, #8
 804bf2a:	46bd      	mov	sp, r7
 804bf2c:	bd80      	pop	{r7, pc}

0804bf2e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 804bf2e:	b580      	push	{r7, lr}
 804bf30:	b084      	sub	sp, #16
 804bf32:	af00      	add	r7, sp, #0
 804bf34:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 804bf36:	687b      	ldr	r3, [r7, #4]
 804bf38:	2b00      	cmp	r3, #0
 804bf3a:	d101      	bne.n	804bf40 <netconn_err+0x12>
    return ERR_OK;
 804bf3c:	2300      	movs	r3, #0
 804bf3e:	e00d      	b.n	804bf5c <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 804bf40:	f00c fe04 	bl	8058b4c <sys_arch_protect>
 804bf44:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 804bf46:	687b      	ldr	r3, [r7, #4]
 804bf48:	7a1b      	ldrb	r3, [r3, #8]
 804bf4a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 804bf4c:	687b      	ldr	r3, [r7, #4]
 804bf4e:	2200      	movs	r2, #0
 804bf50:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 804bf52:	68f8      	ldr	r0, [r7, #12]
 804bf54:	f00c fe08 	bl	8058b68 <sys_arch_unprotect>
  return err;
 804bf58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 804bf5c:	4618      	mov	r0, r3
 804bf5e:	3710      	adds	r7, #16
 804bf60:	46bd      	mov	sp, r7
 804bf62:	bd80      	pop	{r7, pc}

0804bf64 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 804bf64:	b580      	push	{r7, lr}
 804bf66:	b082      	sub	sp, #8
 804bf68:	af00      	add	r7, sp, #0
 804bf6a:	4603      	mov	r3, r0
 804bf6c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 804bf6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804bf72:	f113 0f0d 	cmn.w	r3, #13
 804bf76:	d009      	beq.n	804bf8c <lwip_netconn_err_to_msg+0x28>
 804bf78:	f113 0f0d 	cmn.w	r3, #13
 804bf7c:	dc0c      	bgt.n	804bf98 <lwip_netconn_err_to_msg+0x34>
 804bf7e:	f113 0f0f 	cmn.w	r3, #15
 804bf82:	d007      	beq.n	804bf94 <lwip_netconn_err_to_msg+0x30>
 804bf84:	f113 0f0e 	cmn.w	r3, #14
 804bf88:	d002      	beq.n	804bf90 <lwip_netconn_err_to_msg+0x2c>
 804bf8a:	e005      	b.n	804bf98 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 804bf8c:	4b0a      	ldr	r3, [pc, #40]	; (804bfb8 <lwip_netconn_err_to_msg+0x54>)
 804bf8e:	e00e      	b.n	804bfae <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 804bf90:	4b0a      	ldr	r3, [pc, #40]	; (804bfbc <lwip_netconn_err_to_msg+0x58>)
 804bf92:	e00c      	b.n	804bfae <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 804bf94:	4b0a      	ldr	r3, [pc, #40]	; (804bfc0 <lwip_netconn_err_to_msg+0x5c>)
 804bf96:	e00a      	b.n	804bfae <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 804bf98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804bf9c:	2b00      	cmp	r3, #0
 804bf9e:	d005      	beq.n	804bfac <lwip_netconn_err_to_msg+0x48>
 804bfa0:	4b08      	ldr	r3, [pc, #32]	; (804bfc4 <lwip_netconn_err_to_msg+0x60>)
 804bfa2:	227d      	movs	r2, #125	; 0x7d
 804bfa4:	4908      	ldr	r1, [pc, #32]	; (804bfc8 <lwip_netconn_err_to_msg+0x64>)
 804bfa6:	4809      	ldr	r0, [pc, #36]	; (804bfcc <lwip_netconn_err_to_msg+0x68>)
 804bfa8:	f00d f844 	bl	8059034 <iprintf>
      return NULL;
 804bfac:	2300      	movs	r3, #0
  }
}
 804bfae:	4618      	mov	r0, r3
 804bfb0:	3708      	adds	r7, #8
 804bfb2:	46bd      	mov	sp, r7
 804bfb4:	bd80      	pop	{r7, pc}
 804bfb6:	bf00      	nop
 804bfb8:	0805d814 	.word	0x0805d814
 804bfbc:	0805d815 	.word	0x0805d815
 804bfc0:	0805d816 	.word	0x0805d816
 804bfc4:	0805a678 	.word	0x0805a678
 804bfc8:	0805a6ac 	.word	0x0805a6ac
 804bfcc:	0805a6bc 	.word	0x0805a6bc

0804bfd0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 804bfd0:	b580      	push	{r7, lr}
 804bfd2:	b082      	sub	sp, #8
 804bfd4:	af00      	add	r7, sp, #0
 804bfd6:	6078      	str	r0, [r7, #4]
 804bfd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 804bfda:	683b      	ldr	r3, [r7, #0]
 804bfdc:	2b00      	cmp	r3, #0
 804bfde:	d105      	bne.n	804bfec <lwip_netconn_is_err_msg+0x1c>
 804bfe0:	4b12      	ldr	r3, [pc, #72]	; (804c02c <lwip_netconn_is_err_msg+0x5c>)
 804bfe2:	2285      	movs	r2, #133	; 0x85
 804bfe4:	4912      	ldr	r1, [pc, #72]	; (804c030 <lwip_netconn_is_err_msg+0x60>)
 804bfe6:	4813      	ldr	r0, [pc, #76]	; (804c034 <lwip_netconn_is_err_msg+0x64>)
 804bfe8:	f00d f824 	bl	8059034 <iprintf>

  if (msg == &netconn_aborted) {
 804bfec:	687b      	ldr	r3, [r7, #4]
 804bfee:	4a12      	ldr	r2, [pc, #72]	; (804c038 <lwip_netconn_is_err_msg+0x68>)
 804bff0:	4293      	cmp	r3, r2
 804bff2:	d104      	bne.n	804bffe <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 804bff4:	683b      	ldr	r3, [r7, #0]
 804bff6:	22f3      	movs	r2, #243	; 0xf3
 804bff8:	701a      	strb	r2, [r3, #0]
    return 1;
 804bffa:	2301      	movs	r3, #1
 804bffc:	e012      	b.n	804c024 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 804bffe:	687b      	ldr	r3, [r7, #4]
 804c000:	4a0e      	ldr	r2, [pc, #56]	; (804c03c <lwip_netconn_is_err_msg+0x6c>)
 804c002:	4293      	cmp	r3, r2
 804c004:	d104      	bne.n	804c010 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 804c006:	683b      	ldr	r3, [r7, #0]
 804c008:	22f2      	movs	r2, #242	; 0xf2
 804c00a:	701a      	strb	r2, [r3, #0]
    return 1;
 804c00c:	2301      	movs	r3, #1
 804c00e:	e009      	b.n	804c024 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 804c010:	687b      	ldr	r3, [r7, #4]
 804c012:	4a0b      	ldr	r2, [pc, #44]	; (804c040 <lwip_netconn_is_err_msg+0x70>)
 804c014:	4293      	cmp	r3, r2
 804c016:	d104      	bne.n	804c022 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 804c018:	683b      	ldr	r3, [r7, #0]
 804c01a:	22f1      	movs	r2, #241	; 0xf1
 804c01c:	701a      	strb	r2, [r3, #0]
    return 1;
 804c01e:	2301      	movs	r3, #1
 804c020:	e000      	b.n	804c024 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 804c022:	2300      	movs	r3, #0
}
 804c024:	4618      	mov	r0, r3
 804c026:	3708      	adds	r7, #8
 804c028:	46bd      	mov	sp, r7
 804c02a:	bd80      	pop	{r7, pc}
 804c02c:	0805a678 	.word	0x0805a678
 804c030:	0805a6e4 	.word	0x0805a6e4
 804c034:	0805a6bc 	.word	0x0805a6bc
 804c038:	0805d814 	.word	0x0805d814
 804c03c:	0805d815 	.word	0x0805d815
 804c040:	0805d816 	.word	0x0805d816

0804c044 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 804c044:	b580      	push	{r7, lr}
 804c046:	b088      	sub	sp, #32
 804c048:	af00      	add	r7, sp, #0
 804c04a:	60f8      	str	r0, [r7, #12]
 804c04c:	60b9      	str	r1, [r7, #8]
 804c04e:	607a      	str	r2, [r7, #4]
 804c050:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 804c052:	68bb      	ldr	r3, [r7, #8]
 804c054:	2b00      	cmp	r3, #0
 804c056:	d105      	bne.n	804c064 <recv_udp+0x20>
 804c058:	4b34      	ldr	r3, [pc, #208]	; (804c12c <recv_udp+0xe8>)
 804c05a:	22e5      	movs	r2, #229	; 0xe5
 804c05c:	4934      	ldr	r1, [pc, #208]	; (804c130 <recv_udp+0xec>)
 804c05e:	4835      	ldr	r0, [pc, #212]	; (804c134 <recv_udp+0xf0>)
 804c060:	f00c ffe8 	bl	8059034 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 804c064:	68fb      	ldr	r3, [r7, #12]
 804c066:	2b00      	cmp	r3, #0
 804c068:	d105      	bne.n	804c076 <recv_udp+0x32>
 804c06a:	4b30      	ldr	r3, [pc, #192]	; (804c12c <recv_udp+0xe8>)
 804c06c:	22e6      	movs	r2, #230	; 0xe6
 804c06e:	4932      	ldr	r1, [pc, #200]	; (804c138 <recv_udp+0xf4>)
 804c070:	4830      	ldr	r0, [pc, #192]	; (804c134 <recv_udp+0xf0>)
 804c072:	f00c ffdf 	bl	8059034 <iprintf>
  conn = (struct netconn *)arg;
 804c076:	68fb      	ldr	r3, [r7, #12]
 804c078:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 804c07a:	69fb      	ldr	r3, [r7, #28]
 804c07c:	2b00      	cmp	r3, #0
 804c07e:	d103      	bne.n	804c088 <recv_udp+0x44>
    pbuf_free(p);
 804c080:	6878      	ldr	r0, [r7, #4]
 804c082:	f003 f93f 	bl	804f304 <pbuf_free>
    return;
 804c086:	e04d      	b.n	804c124 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 804c088:	69fb      	ldr	r3, [r7, #28]
 804c08a:	685b      	ldr	r3, [r3, #4]
 804c08c:	68ba      	ldr	r2, [r7, #8]
 804c08e:	429a      	cmp	r2, r3
 804c090:	d005      	beq.n	804c09e <recv_udp+0x5a>
 804c092:	4b26      	ldr	r3, [pc, #152]	; (804c12c <recv_udp+0xe8>)
 804c094:	22ee      	movs	r2, #238	; 0xee
 804c096:	4929      	ldr	r1, [pc, #164]	; (804c13c <recv_udp+0xf8>)
 804c098:	4826      	ldr	r0, [pc, #152]	; (804c134 <recv_udp+0xf0>)
 804c09a:	f00c ffcb 	bl	8059034 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 804c09e:	69fb      	ldr	r3, [r7, #28]
 804c0a0:	3310      	adds	r3, #16
 804c0a2:	4618      	mov	r0, r3
 804c0a4:	f00c fc37 	bl	8058916 <sys_mbox_valid>
 804c0a8:	4603      	mov	r3, r0
 804c0aa:	2b00      	cmp	r3, #0
 804c0ac:	d103      	bne.n	804c0b6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 804c0ae:	6878      	ldr	r0, [r7, #4]
 804c0b0:	f003 f928 	bl	804f304 <pbuf_free>
    return;
 804c0b4:	e036      	b.n	804c124 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 804c0b6:	2006      	movs	r0, #6
 804c0b8:	f002 fa0a 	bl	804e4d0 <memp_malloc>
 804c0bc:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 804c0be:	69bb      	ldr	r3, [r7, #24]
 804c0c0:	2b00      	cmp	r3, #0
 804c0c2:	d103      	bne.n	804c0cc <recv_udp+0x88>
    pbuf_free(p);
 804c0c4:	6878      	ldr	r0, [r7, #4]
 804c0c6:	f003 f91d 	bl	804f304 <pbuf_free>
    return;
 804c0ca:	e02b      	b.n	804c124 <recv_udp+0xe0>
  } else {
    buf->p = p;
 804c0cc:	69bb      	ldr	r3, [r7, #24]
 804c0ce:	687a      	ldr	r2, [r7, #4]
 804c0d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 804c0d2:	69bb      	ldr	r3, [r7, #24]
 804c0d4:	687a      	ldr	r2, [r7, #4]
 804c0d6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 804c0d8:	683b      	ldr	r3, [r7, #0]
 804c0da:	2b00      	cmp	r3, #0
 804c0dc:	d002      	beq.n	804c0e4 <recv_udp+0xa0>
 804c0de:	683b      	ldr	r3, [r7, #0]
 804c0e0:	681b      	ldr	r3, [r3, #0]
 804c0e2:	e000      	b.n	804c0e6 <recv_udp+0xa2>
 804c0e4:	2300      	movs	r3, #0
 804c0e6:	69ba      	ldr	r2, [r7, #24]
 804c0e8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 804c0ea:	69bb      	ldr	r3, [r7, #24]
 804c0ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 804c0ee:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 804c0f0:	687b      	ldr	r3, [r7, #4]
 804c0f2:	891b      	ldrh	r3, [r3, #8]
 804c0f4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 804c0f6:	69fb      	ldr	r3, [r7, #28]
 804c0f8:	3310      	adds	r3, #16
 804c0fa:	69b9      	ldr	r1, [r7, #24]
 804c0fc:	4618      	mov	r0, r3
 804c0fe:	f00c fb95 	bl	805882c <sys_mbox_trypost>
 804c102:	4603      	mov	r3, r0
 804c104:	2b00      	cmp	r3, #0
 804c106:	d003      	beq.n	804c110 <recv_udp+0xcc>
    netbuf_delete(buf);
 804c108:	69b8      	ldr	r0, [r7, #24]
 804c10a:	f001 fb01 	bl	804d710 <netbuf_delete>
    return;
 804c10e:	e009      	b.n	804c124 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 804c110:	69fb      	ldr	r3, [r7, #28]
 804c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c114:	2b00      	cmp	r3, #0
 804c116:	d005      	beq.n	804c124 <recv_udp+0xe0>
 804c118:	69fb      	ldr	r3, [r7, #28]
 804c11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c11c:	8afa      	ldrh	r2, [r7, #22]
 804c11e:	2100      	movs	r1, #0
 804c120:	69f8      	ldr	r0, [r7, #28]
 804c122:	4798      	blx	r3
  }
}
 804c124:	3720      	adds	r7, #32
 804c126:	46bd      	mov	sp, r7
 804c128:	bd80      	pop	{r7, pc}
 804c12a:	bf00      	nop
 804c12c:	0805a678 	.word	0x0805a678
 804c130:	0805a6f0 	.word	0x0805a6f0
 804c134:	0805a6bc 	.word	0x0805a6bc
 804c138:	0805a714 	.word	0x0805a714
 804c13c:	0805a734 	.word	0x0805a734

0804c140 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 804c140:	b580      	push	{r7, lr}
 804c142:	b088      	sub	sp, #32
 804c144:	af00      	add	r7, sp, #0
 804c146:	60f8      	str	r0, [r7, #12]
 804c148:	60b9      	str	r1, [r7, #8]
 804c14a:	607a      	str	r2, [r7, #4]
 804c14c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 804c14e:	68bb      	ldr	r3, [r7, #8]
 804c150:	2b00      	cmp	r3, #0
 804c152:	d106      	bne.n	804c162 <recv_tcp+0x22>
 804c154:	4b36      	ldr	r3, [pc, #216]	; (804c230 <recv_tcp+0xf0>)
 804c156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 804c15a:	4936      	ldr	r1, [pc, #216]	; (804c234 <recv_tcp+0xf4>)
 804c15c:	4836      	ldr	r0, [pc, #216]	; (804c238 <recv_tcp+0xf8>)
 804c15e:	f00c ff69 	bl	8059034 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 804c162:	68fb      	ldr	r3, [r7, #12]
 804c164:	2b00      	cmp	r3, #0
 804c166:	d106      	bne.n	804c176 <recv_tcp+0x36>
 804c168:	4b31      	ldr	r3, [pc, #196]	; (804c230 <recv_tcp+0xf0>)
 804c16a:	f240 122d 	movw	r2, #301	; 0x12d
 804c16e:	4933      	ldr	r1, [pc, #204]	; (804c23c <recv_tcp+0xfc>)
 804c170:	4831      	ldr	r0, [pc, #196]	; (804c238 <recv_tcp+0xf8>)
 804c172:	f00c ff5f 	bl	8059034 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 804c176:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804c17a:	2b00      	cmp	r3, #0
 804c17c:	d006      	beq.n	804c18c <recv_tcp+0x4c>
 804c17e:	4b2c      	ldr	r3, [pc, #176]	; (804c230 <recv_tcp+0xf0>)
 804c180:	f44f 7297 	mov.w	r2, #302	; 0x12e
 804c184:	492e      	ldr	r1, [pc, #184]	; (804c240 <recv_tcp+0x100>)
 804c186:	482c      	ldr	r0, [pc, #176]	; (804c238 <recv_tcp+0xf8>)
 804c188:	f00c ff54 	bl	8059034 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 804c18c:	68fb      	ldr	r3, [r7, #12]
 804c18e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 804c190:	697b      	ldr	r3, [r7, #20]
 804c192:	2b00      	cmp	r3, #0
 804c194:	d102      	bne.n	804c19c <recv_tcp+0x5c>
    return ERR_VAL;
 804c196:	f06f 0305 	mvn.w	r3, #5
 804c19a:	e045      	b.n	804c228 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 804c19c:	697b      	ldr	r3, [r7, #20]
 804c19e:	685b      	ldr	r3, [r3, #4]
 804c1a0:	68ba      	ldr	r2, [r7, #8]
 804c1a2:	429a      	cmp	r2, r3
 804c1a4:	d006      	beq.n	804c1b4 <recv_tcp+0x74>
 804c1a6:	4b22      	ldr	r3, [pc, #136]	; (804c230 <recv_tcp+0xf0>)
 804c1a8:	f240 1235 	movw	r2, #309	; 0x135
 804c1ac:	4925      	ldr	r1, [pc, #148]	; (804c244 <recv_tcp+0x104>)
 804c1ae:	4822      	ldr	r0, [pc, #136]	; (804c238 <recv_tcp+0xf8>)
 804c1b0:	f00c ff40 	bl	8059034 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 804c1b4:	697b      	ldr	r3, [r7, #20]
 804c1b6:	3310      	adds	r3, #16
 804c1b8:	4618      	mov	r0, r3
 804c1ba:	f00c fbac 	bl	8058916 <sys_mbox_valid>
 804c1be:	4603      	mov	r3, r0
 804c1c0:	2b00      	cmp	r3, #0
 804c1c2:	d10d      	bne.n	804c1e0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 804c1c4:	687b      	ldr	r3, [r7, #4]
 804c1c6:	2b00      	cmp	r3, #0
 804c1c8:	d008      	beq.n	804c1dc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 804c1ca:	687b      	ldr	r3, [r7, #4]
 804c1cc:	891b      	ldrh	r3, [r3, #8]
 804c1ce:	4619      	mov	r1, r3
 804c1d0:	68b8      	ldr	r0, [r7, #8]
 804c1d2:	f004 f84f 	bl	8050274 <tcp_recved>
      pbuf_free(p);
 804c1d6:	6878      	ldr	r0, [r7, #4]
 804c1d8:	f003 f894 	bl	804f304 <pbuf_free>
    }
    return ERR_OK;
 804c1dc:	2300      	movs	r3, #0
 804c1de:	e023      	b.n	804c228 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 804c1e0:	687b      	ldr	r3, [r7, #4]
 804c1e2:	2b00      	cmp	r3, #0
 804c1e4:	d005      	beq.n	804c1f2 <recv_tcp+0xb2>
    msg = p;
 804c1e6:	687b      	ldr	r3, [r7, #4]
 804c1e8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 804c1ea:	687b      	ldr	r3, [r7, #4]
 804c1ec:	891b      	ldrh	r3, [r3, #8]
 804c1ee:	83fb      	strh	r3, [r7, #30]
 804c1f0:	e003      	b.n	804c1fa <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 804c1f2:	4b15      	ldr	r3, [pc, #84]	; (804c248 <recv_tcp+0x108>)
 804c1f4:	61bb      	str	r3, [r7, #24]
    len = 0;
 804c1f6:	2300      	movs	r3, #0
 804c1f8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 804c1fa:	697b      	ldr	r3, [r7, #20]
 804c1fc:	3310      	adds	r3, #16
 804c1fe:	69b9      	ldr	r1, [r7, #24]
 804c200:	4618      	mov	r0, r3
 804c202:	f00c fb13 	bl	805882c <sys_mbox_trypost>
 804c206:	4603      	mov	r3, r0
 804c208:	2b00      	cmp	r3, #0
 804c20a:	d002      	beq.n	804c212 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 804c20c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c210:	e00a      	b.n	804c228 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 804c212:	697b      	ldr	r3, [r7, #20]
 804c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c216:	2b00      	cmp	r3, #0
 804c218:	d005      	beq.n	804c226 <recv_tcp+0xe6>
 804c21a:	697b      	ldr	r3, [r7, #20]
 804c21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c21e:	8bfa      	ldrh	r2, [r7, #30]
 804c220:	2100      	movs	r1, #0
 804c222:	6978      	ldr	r0, [r7, #20]
 804c224:	4798      	blx	r3
  }

  return ERR_OK;
 804c226:	2300      	movs	r3, #0
}
 804c228:	4618      	mov	r0, r3
 804c22a:	3720      	adds	r7, #32
 804c22c:	46bd      	mov	sp, r7
 804c22e:	bd80      	pop	{r7, pc}
 804c230:	0805a678 	.word	0x0805a678
 804c234:	0805a754 	.word	0x0805a754
 804c238:	0805a6bc 	.word	0x0805a6bc
 804c23c:	0805a778 	.word	0x0805a778
 804c240:	0805a798 	.word	0x0805a798
 804c244:	0805a7b0 	.word	0x0805a7b0
 804c248:	0805d816 	.word	0x0805d816

0804c24c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 804c24c:	b580      	push	{r7, lr}
 804c24e:	b084      	sub	sp, #16
 804c250:	af00      	add	r7, sp, #0
 804c252:	6078      	str	r0, [r7, #4]
 804c254:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 804c256:	687b      	ldr	r3, [r7, #4]
 804c258:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 804c25a:	68fb      	ldr	r3, [r7, #12]
 804c25c:	2b00      	cmp	r3, #0
 804c25e:	d106      	bne.n	804c26e <poll_tcp+0x22>
 804c260:	4b29      	ldr	r3, [pc, #164]	; (804c308 <poll_tcp+0xbc>)
 804c262:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 804c266:	4929      	ldr	r1, [pc, #164]	; (804c30c <poll_tcp+0xc0>)
 804c268:	4829      	ldr	r0, [pc, #164]	; (804c310 <poll_tcp+0xc4>)
 804c26a:	f00c fee3 	bl	8059034 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 804c26e:	68fb      	ldr	r3, [r7, #12]
 804c270:	785b      	ldrb	r3, [r3, #1]
 804c272:	2b01      	cmp	r3, #1
 804c274:	d104      	bne.n	804c280 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 804c276:	2101      	movs	r1, #1
 804c278:	68f8      	ldr	r0, [r7, #12]
 804c27a:	f000 ff65 	bl	804d148 <lwip_netconn_do_writemore>
 804c27e:	e016      	b.n	804c2ae <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 804c280:	68fb      	ldr	r3, [r7, #12]
 804c282:	785b      	ldrb	r3, [r3, #1]
 804c284:	2b04      	cmp	r3, #4
 804c286:	d112      	bne.n	804c2ae <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 804c288:	68fb      	ldr	r3, [r7, #12]
 804c28a:	6a1b      	ldr	r3, [r3, #32]
 804c28c:	2b00      	cmp	r3, #0
 804c28e:	d00a      	beq.n	804c2a6 <poll_tcp+0x5a>
 804c290:	68fb      	ldr	r3, [r7, #12]
 804c292:	6a1b      	ldr	r3, [r3, #32]
 804c294:	7a5b      	ldrb	r3, [r3, #9]
 804c296:	2b00      	cmp	r3, #0
 804c298:	d005      	beq.n	804c2a6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 804c29a:	68fb      	ldr	r3, [r7, #12]
 804c29c:	6a1b      	ldr	r3, [r3, #32]
 804c29e:	7a5a      	ldrb	r2, [r3, #9]
 804c2a0:	3a01      	subs	r2, #1
 804c2a2:	b2d2      	uxtb	r2, r2
 804c2a4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 804c2a6:	2101      	movs	r1, #1
 804c2a8:	68f8      	ldr	r0, [r7, #12]
 804c2aa:	f000 fbf7 	bl	804ca9c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 804c2ae:	68fb      	ldr	r3, [r7, #12]
 804c2b0:	7f1b      	ldrb	r3, [r3, #28]
 804c2b2:	f003 0310 	and.w	r3, r3, #16
 804c2b6:	2b00      	cmp	r3, #0
 804c2b8:	d021      	beq.n	804c2fe <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 804c2ba:	68fb      	ldr	r3, [r7, #12]
 804c2bc:	685b      	ldr	r3, [r3, #4]
 804c2be:	2b00      	cmp	r3, #0
 804c2c0:	d01d      	beq.n	804c2fe <poll_tcp+0xb2>
 804c2c2:	68fb      	ldr	r3, [r7, #12]
 804c2c4:	685b      	ldr	r3, [r3, #4]
 804c2c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 804c2ca:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 804c2ce:	d316      	bcc.n	804c2fe <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 804c2d0:	68fb      	ldr	r3, [r7, #12]
 804c2d2:	685b      	ldr	r3, [r3, #4]
 804c2d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 804c2d8:	2b04      	cmp	r3, #4
 804c2da:	d810      	bhi.n	804c2fe <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 804c2dc:	68fb      	ldr	r3, [r7, #12]
 804c2de:	7f1b      	ldrb	r3, [r3, #28]
 804c2e0:	f023 0310 	bic.w	r3, r3, #16
 804c2e4:	b2da      	uxtb	r2, r3
 804c2e6:	68fb      	ldr	r3, [r7, #12]
 804c2e8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 804c2ea:	68fb      	ldr	r3, [r7, #12]
 804c2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c2ee:	2b00      	cmp	r3, #0
 804c2f0:	d005      	beq.n	804c2fe <poll_tcp+0xb2>
 804c2f2:	68fb      	ldr	r3, [r7, #12]
 804c2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c2f6:	2200      	movs	r2, #0
 804c2f8:	2102      	movs	r1, #2
 804c2fa:	68f8      	ldr	r0, [r7, #12]
 804c2fc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 804c2fe:	2300      	movs	r3, #0
}
 804c300:	4618      	mov	r0, r3
 804c302:	3710      	adds	r7, #16
 804c304:	46bd      	mov	sp, r7
 804c306:	bd80      	pop	{r7, pc}
 804c308:	0805a678 	.word	0x0805a678
 804c30c:	0805a7d0 	.word	0x0805a7d0
 804c310:	0805a6bc 	.word	0x0805a6bc

0804c314 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 804c314:	b580      	push	{r7, lr}
 804c316:	b086      	sub	sp, #24
 804c318:	af00      	add	r7, sp, #0
 804c31a:	60f8      	str	r0, [r7, #12]
 804c31c:	60b9      	str	r1, [r7, #8]
 804c31e:	4613      	mov	r3, r2
 804c320:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 804c322:	68fb      	ldr	r3, [r7, #12]
 804c324:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 804c326:	697b      	ldr	r3, [r7, #20]
 804c328:	2b00      	cmp	r3, #0
 804c32a:	d106      	bne.n	804c33a <sent_tcp+0x26>
 804c32c:	4b20      	ldr	r3, [pc, #128]	; (804c3b0 <sent_tcp+0x9c>)
 804c32e:	f240 1293 	movw	r2, #403	; 0x193
 804c332:	4920      	ldr	r1, [pc, #128]	; (804c3b4 <sent_tcp+0xa0>)
 804c334:	4820      	ldr	r0, [pc, #128]	; (804c3b8 <sent_tcp+0xa4>)
 804c336:	f00c fe7d 	bl	8059034 <iprintf>

  if (conn) {
 804c33a:	697b      	ldr	r3, [r7, #20]
 804c33c:	2b00      	cmp	r3, #0
 804c33e:	d032      	beq.n	804c3a6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 804c340:	697b      	ldr	r3, [r7, #20]
 804c342:	785b      	ldrb	r3, [r3, #1]
 804c344:	2b01      	cmp	r3, #1
 804c346:	d104      	bne.n	804c352 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 804c348:	2101      	movs	r1, #1
 804c34a:	6978      	ldr	r0, [r7, #20]
 804c34c:	f000 fefc 	bl	804d148 <lwip_netconn_do_writemore>
 804c350:	e007      	b.n	804c362 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 804c352:	697b      	ldr	r3, [r7, #20]
 804c354:	785b      	ldrb	r3, [r3, #1]
 804c356:	2b04      	cmp	r3, #4
 804c358:	d103      	bne.n	804c362 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 804c35a:	2101      	movs	r1, #1
 804c35c:	6978      	ldr	r0, [r7, #20]
 804c35e:	f000 fb9d 	bl	804ca9c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 804c362:	697b      	ldr	r3, [r7, #20]
 804c364:	685b      	ldr	r3, [r3, #4]
 804c366:	2b00      	cmp	r3, #0
 804c368:	d01d      	beq.n	804c3a6 <sent_tcp+0x92>
 804c36a:	697b      	ldr	r3, [r7, #20]
 804c36c:	685b      	ldr	r3, [r3, #4]
 804c36e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 804c372:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 804c376:	d316      	bcc.n	804c3a6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 804c378:	697b      	ldr	r3, [r7, #20]
 804c37a:	685b      	ldr	r3, [r3, #4]
 804c37c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 804c380:	2b04      	cmp	r3, #4
 804c382:	d810      	bhi.n	804c3a6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 804c384:	697b      	ldr	r3, [r7, #20]
 804c386:	7f1b      	ldrb	r3, [r3, #28]
 804c388:	f023 0310 	bic.w	r3, r3, #16
 804c38c:	b2da      	uxtb	r2, r3
 804c38e:	697b      	ldr	r3, [r7, #20]
 804c390:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 804c392:	697b      	ldr	r3, [r7, #20]
 804c394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c396:	2b00      	cmp	r3, #0
 804c398:	d005      	beq.n	804c3a6 <sent_tcp+0x92>
 804c39a:	697b      	ldr	r3, [r7, #20]
 804c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c39e:	88fa      	ldrh	r2, [r7, #6]
 804c3a0:	2102      	movs	r1, #2
 804c3a2:	6978      	ldr	r0, [r7, #20]
 804c3a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 804c3a6:	2300      	movs	r3, #0
}
 804c3a8:	4618      	mov	r0, r3
 804c3aa:	3718      	adds	r7, #24
 804c3ac:	46bd      	mov	sp, r7
 804c3ae:	bd80      	pop	{r7, pc}
 804c3b0:	0805a678 	.word	0x0805a678
 804c3b4:	0805a7d0 	.word	0x0805a7d0
 804c3b8:	0805a6bc 	.word	0x0805a6bc

0804c3bc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 804c3bc:	b580      	push	{r7, lr}
 804c3be:	b088      	sub	sp, #32
 804c3c0:	af00      	add	r7, sp, #0
 804c3c2:	6078      	str	r0, [r7, #4]
 804c3c4:	460b      	mov	r3, r1
 804c3c6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 804c3c8:	687b      	ldr	r3, [r7, #4]
 804c3ca:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 804c3cc:	69fb      	ldr	r3, [r7, #28]
 804c3ce:	2b00      	cmp	r3, #0
 804c3d0:	d106      	bne.n	804c3e0 <err_tcp+0x24>
 804c3d2:	4b5f      	ldr	r3, [pc, #380]	; (804c550 <err_tcp+0x194>)
 804c3d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 804c3d8:	495e      	ldr	r1, [pc, #376]	; (804c554 <err_tcp+0x198>)
 804c3da:	485f      	ldr	r0, [pc, #380]	; (804c558 <err_tcp+0x19c>)
 804c3dc:	f00c fe2a 	bl	8059034 <iprintf>

  SYS_ARCH_PROTECT(lev);
 804c3e0:	f00c fbb4 	bl	8058b4c <sys_arch_protect>
 804c3e4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 804c3e6:	69fb      	ldr	r3, [r7, #28]
 804c3e8:	2200      	movs	r2, #0
 804c3ea:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 804c3ec:	69fb      	ldr	r3, [r7, #28]
 804c3ee:	78fa      	ldrb	r2, [r7, #3]
 804c3f0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 804c3f2:	69fb      	ldr	r3, [r7, #28]
 804c3f4:	7f1b      	ldrb	r3, [r3, #28]
 804c3f6:	f043 0301 	orr.w	r3, r3, #1
 804c3fa:	b2da      	uxtb	r2, r3
 804c3fc:	69fb      	ldr	r3, [r7, #28]
 804c3fe:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 804c400:	69fb      	ldr	r3, [r7, #28]
 804c402:	785b      	ldrb	r3, [r3, #1]
 804c404:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 804c406:	69fb      	ldr	r3, [r7, #28]
 804c408:	2200      	movs	r2, #0
 804c40a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 804c40c:	69b8      	ldr	r0, [r7, #24]
 804c40e:	f00c fbab 	bl	8058b68 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 804c412:	69fb      	ldr	r3, [r7, #28]
 804c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c416:	2b00      	cmp	r3, #0
 804c418:	d005      	beq.n	804c426 <err_tcp+0x6a>
 804c41a:	69fb      	ldr	r3, [r7, #28]
 804c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c41e:	2200      	movs	r2, #0
 804c420:	2104      	movs	r1, #4
 804c422:	69f8      	ldr	r0, [r7, #28]
 804c424:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 804c426:	69fb      	ldr	r3, [r7, #28]
 804c428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c42a:	2b00      	cmp	r3, #0
 804c42c:	d005      	beq.n	804c43a <err_tcp+0x7e>
 804c42e:	69fb      	ldr	r3, [r7, #28]
 804c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c432:	2200      	movs	r2, #0
 804c434:	2100      	movs	r1, #0
 804c436:	69f8      	ldr	r0, [r7, #28]
 804c438:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 804c43a:	69fb      	ldr	r3, [r7, #28]
 804c43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c43e:	2b00      	cmp	r3, #0
 804c440:	d005      	beq.n	804c44e <err_tcp+0x92>
 804c442:	69fb      	ldr	r3, [r7, #28]
 804c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c446:	2200      	movs	r2, #0
 804c448:	2102      	movs	r1, #2
 804c44a:	69f8      	ldr	r0, [r7, #28]
 804c44c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 804c44e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804c452:	4618      	mov	r0, r3
 804c454:	f7ff fd86 	bl	804bf64 <lwip_netconn_err_to_msg>
 804c458:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 804c45a:	69fb      	ldr	r3, [r7, #28]
 804c45c:	3310      	adds	r3, #16
 804c45e:	4618      	mov	r0, r3
 804c460:	f00c fa59 	bl	8058916 <sys_mbox_valid>
 804c464:	4603      	mov	r3, r0
 804c466:	2b00      	cmp	r3, #0
 804c468:	d005      	beq.n	804c476 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 804c46a:	69fb      	ldr	r3, [r7, #28]
 804c46c:	3310      	adds	r3, #16
 804c46e:	6939      	ldr	r1, [r7, #16]
 804c470:	4618      	mov	r0, r3
 804c472:	f00c f9db 	bl	805882c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 804c476:	69fb      	ldr	r3, [r7, #28]
 804c478:	3314      	adds	r3, #20
 804c47a:	4618      	mov	r0, r3
 804c47c:	f00c fa4b 	bl	8058916 <sys_mbox_valid>
 804c480:	4603      	mov	r3, r0
 804c482:	2b00      	cmp	r3, #0
 804c484:	d005      	beq.n	804c492 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 804c486:	69fb      	ldr	r3, [r7, #28]
 804c488:	3314      	adds	r3, #20
 804c48a:	6939      	ldr	r1, [r7, #16]
 804c48c:	4618      	mov	r0, r3
 804c48e:	f00c f9cd 	bl	805882c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 804c492:	7dfb      	ldrb	r3, [r7, #23]
 804c494:	2b01      	cmp	r3, #1
 804c496:	d005      	beq.n	804c4a4 <err_tcp+0xe8>
 804c498:	7dfb      	ldrb	r3, [r7, #23]
 804c49a:	2b04      	cmp	r3, #4
 804c49c:	d002      	beq.n	804c4a4 <err_tcp+0xe8>
 804c49e:	7dfb      	ldrb	r3, [r7, #23]
 804c4a0:	2b03      	cmp	r3, #3
 804c4a2:	d143      	bne.n	804c52c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 804c4a4:	69fb      	ldr	r3, [r7, #28]
 804c4a6:	7f1b      	ldrb	r3, [r3, #28]
 804c4a8:	f003 0304 	and.w	r3, r3, #4
 804c4ac:	2b00      	cmp	r3, #0
 804c4ae:	bf14      	ite	ne
 804c4b0:	2301      	movne	r3, #1
 804c4b2:	2300      	moveq	r3, #0
 804c4b4:	b2db      	uxtb	r3, r3
 804c4b6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 804c4b8:	69fb      	ldr	r3, [r7, #28]
 804c4ba:	7f1b      	ldrb	r3, [r3, #28]
 804c4bc:	f023 0304 	bic.w	r3, r3, #4
 804c4c0:	b2da      	uxtb	r2, r3
 804c4c2:	69fb      	ldr	r3, [r7, #28]
 804c4c4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 804c4c6:	68fb      	ldr	r3, [r7, #12]
 804c4c8:	2b00      	cmp	r3, #0
 804c4ca:	d13b      	bne.n	804c544 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 804c4cc:	69fb      	ldr	r3, [r7, #28]
 804c4ce:	6a1b      	ldr	r3, [r3, #32]
 804c4d0:	2b00      	cmp	r3, #0
 804c4d2:	d106      	bne.n	804c4e2 <err_tcp+0x126>
 804c4d4:	4b1e      	ldr	r3, [pc, #120]	; (804c550 <err_tcp+0x194>)
 804c4d6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 804c4da:	4920      	ldr	r1, [pc, #128]	; (804c55c <err_tcp+0x1a0>)
 804c4dc:	481e      	ldr	r0, [pc, #120]	; (804c558 <err_tcp+0x19c>)
 804c4de:	f00c fda9 	bl	8059034 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 804c4e2:	7dfb      	ldrb	r3, [r7, #23]
 804c4e4:	2b04      	cmp	r3, #4
 804c4e6:	d104      	bne.n	804c4f2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 804c4e8:	69fb      	ldr	r3, [r7, #28]
 804c4ea:	6a1b      	ldr	r3, [r3, #32]
 804c4ec:	2200      	movs	r2, #0
 804c4ee:	711a      	strb	r2, [r3, #4]
 804c4f0:	e003      	b.n	804c4fa <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 804c4f2:	69fb      	ldr	r3, [r7, #28]
 804c4f4:	6a1b      	ldr	r3, [r3, #32]
 804c4f6:	78fa      	ldrb	r2, [r7, #3]
 804c4f8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 804c4fa:	69fb      	ldr	r3, [r7, #28]
 804c4fc:	6a1b      	ldr	r3, [r3, #32]
 804c4fe:	681b      	ldr	r3, [r3, #0]
 804c500:	330c      	adds	r3, #12
 804c502:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 804c504:	68b8      	ldr	r0, [r7, #8]
 804c506:	f00c fa97 	bl	8058a38 <sys_sem_valid>
 804c50a:	4603      	mov	r3, r0
 804c50c:	2b00      	cmp	r3, #0
 804c50e:	d106      	bne.n	804c51e <err_tcp+0x162>
 804c510:	4b0f      	ldr	r3, [pc, #60]	; (804c550 <err_tcp+0x194>)
 804c512:	f240 12ef 	movw	r2, #495	; 0x1ef
 804c516:	4912      	ldr	r1, [pc, #72]	; (804c560 <err_tcp+0x1a4>)
 804c518:	480f      	ldr	r0, [pc, #60]	; (804c558 <err_tcp+0x19c>)
 804c51a:	f00c fd8b 	bl	8059034 <iprintf>
      conn->current_msg = NULL;
 804c51e:	69fb      	ldr	r3, [r7, #28]
 804c520:	2200      	movs	r2, #0
 804c522:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 804c524:	68b8      	ldr	r0, [r7, #8]
 804c526:	f00c fa6d 	bl	8058a04 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 804c52a:	e00b      	b.n	804c544 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 804c52c:	69fb      	ldr	r3, [r7, #28]
 804c52e:	6a1b      	ldr	r3, [r3, #32]
 804c530:	2b00      	cmp	r3, #0
 804c532:	d008      	beq.n	804c546 <err_tcp+0x18a>
 804c534:	4b06      	ldr	r3, [pc, #24]	; (804c550 <err_tcp+0x194>)
 804c536:	f240 12f7 	movw	r2, #503	; 0x1f7
 804c53a:	490a      	ldr	r1, [pc, #40]	; (804c564 <err_tcp+0x1a8>)
 804c53c:	4806      	ldr	r0, [pc, #24]	; (804c558 <err_tcp+0x19c>)
 804c53e:	f00c fd79 	bl	8059034 <iprintf>
  }
}
 804c542:	e000      	b.n	804c546 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 804c544:	bf00      	nop
}
 804c546:	bf00      	nop
 804c548:	3720      	adds	r7, #32
 804c54a:	46bd      	mov	sp, r7
 804c54c:	bd80      	pop	{r7, pc}
 804c54e:	bf00      	nop
 804c550:	0805a678 	.word	0x0805a678
 804c554:	0805a7d0 	.word	0x0805a7d0
 804c558:	0805a6bc 	.word	0x0805a6bc
 804c55c:	0805a7e0 	.word	0x0805a7e0
 804c560:	0805a7fc 	.word	0x0805a7fc
 804c564:	0805a818 	.word	0x0805a818

0804c568 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 804c568:	b580      	push	{r7, lr}
 804c56a:	b084      	sub	sp, #16
 804c56c:	af00      	add	r7, sp, #0
 804c56e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 804c570:	687b      	ldr	r3, [r7, #4]
 804c572:	685b      	ldr	r3, [r3, #4]
 804c574:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 804c576:	6879      	ldr	r1, [r7, #4]
 804c578:	68f8      	ldr	r0, [r7, #12]
 804c57a:	f004 fd41 	bl	8051000 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 804c57e:	490a      	ldr	r1, [pc, #40]	; (804c5a8 <setup_tcp+0x40>)
 804c580:	68f8      	ldr	r0, [r7, #12]
 804c582:	f004 fd4f 	bl	8051024 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 804c586:	4909      	ldr	r1, [pc, #36]	; (804c5ac <setup_tcp+0x44>)
 804c588:	68f8      	ldr	r0, [r7, #12]
 804c58a:	f004 fd6d 	bl	8051068 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 804c58e:	2202      	movs	r2, #2
 804c590:	4907      	ldr	r1, [pc, #28]	; (804c5b0 <setup_tcp+0x48>)
 804c592:	68f8      	ldr	r0, [r7, #12]
 804c594:	f004 fdc4 	bl	8051120 <tcp_poll>
  tcp_err(pcb, err_tcp);
 804c598:	4906      	ldr	r1, [pc, #24]	; (804c5b4 <setup_tcp+0x4c>)
 804c59a:	68f8      	ldr	r0, [r7, #12]
 804c59c:	f004 fd86 	bl	80510ac <tcp_err>
}
 804c5a0:	bf00      	nop
 804c5a2:	3710      	adds	r7, #16
 804c5a4:	46bd      	mov	sp, r7
 804c5a6:	bd80      	pop	{r7, pc}
 804c5a8:	0804c141 	.word	0x0804c141
 804c5ac:	0804c315 	.word	0x0804c315
 804c5b0:	0804c24d 	.word	0x0804c24d
 804c5b4:	0804c3bd 	.word	0x0804c3bd

0804c5b8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 804c5b8:	b590      	push	{r4, r7, lr}
 804c5ba:	b089      	sub	sp, #36	; 0x24
 804c5bc:	af00      	add	r7, sp, #0
 804c5be:	60f8      	str	r0, [r7, #12]
 804c5c0:	60b9      	str	r1, [r7, #8]
 804c5c2:	4613      	mov	r3, r2
 804c5c4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 804c5c6:	68fb      	ldr	r3, [r7, #12]
 804c5c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 804c5ca:	69fb      	ldr	r3, [r7, #28]
 804c5cc:	2b00      	cmp	r3, #0
 804c5ce:	d102      	bne.n	804c5d6 <accept_function+0x1e>
    return ERR_VAL;
 804c5d0:	f06f 0305 	mvn.w	r3, #5
 804c5d4:	e0a1      	b.n	804c71a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 804c5d6:	69fb      	ldr	r3, [r7, #28]
 804c5d8:	3314      	adds	r3, #20
 804c5da:	4618      	mov	r0, r3
 804c5dc:	f00c f99b 	bl	8058916 <sys_mbox_valid>
 804c5e0:	4603      	mov	r3, r0
 804c5e2:	2b00      	cmp	r3, #0
 804c5e4:	d102      	bne.n	804c5ec <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 804c5e6:	f06f 0305 	mvn.w	r3, #5
 804c5ea:	e096      	b.n	804c71a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 804c5ec:	68bb      	ldr	r3, [r7, #8]
 804c5ee:	2b00      	cmp	r3, #0
 804c5f0:	d11b      	bne.n	804c62a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 804c5f2:	69fb      	ldr	r3, [r7, #28]
 804c5f4:	f103 0414 	add.w	r4, r3, #20
 804c5f8:	f06f 000c 	mvn.w	r0, #12
 804c5fc:	f7ff fcb2 	bl	804bf64 <lwip_netconn_err_to_msg>
 804c600:	4603      	mov	r3, r0
 804c602:	4619      	mov	r1, r3
 804c604:	4620      	mov	r0, r4
 804c606:	f00c f911 	bl	805882c <sys_mbox_trypost>
 804c60a:	4603      	mov	r3, r0
 804c60c:	2b00      	cmp	r3, #0
 804c60e:	d109      	bne.n	804c624 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 804c610:	69fb      	ldr	r3, [r7, #28]
 804c612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c614:	2b00      	cmp	r3, #0
 804c616:	d005      	beq.n	804c624 <accept_function+0x6c>
 804c618:	69fb      	ldr	r3, [r7, #28]
 804c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c61c:	2200      	movs	r2, #0
 804c61e:	2100      	movs	r1, #0
 804c620:	69f8      	ldr	r0, [r7, #28]
 804c622:	4798      	blx	r3
    }
    return ERR_VAL;
 804c624:	f06f 0305 	mvn.w	r3, #5
 804c628:	e077      	b.n	804c71a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 804c62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804c62e:	2b00      	cmp	r3, #0
 804c630:	d006      	beq.n	804c640 <accept_function+0x88>
 804c632:	4b3c      	ldr	r3, [pc, #240]	; (804c724 <accept_function+0x16c>)
 804c634:	f240 222a 	movw	r2, #554	; 0x22a
 804c638:	493b      	ldr	r1, [pc, #236]	; (804c728 <accept_function+0x170>)
 804c63a:	483c      	ldr	r0, [pc, #240]	; (804c72c <accept_function+0x174>)
 804c63c:	f00c fcfa 	bl	8059034 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 804c640:	69fb      	ldr	r3, [r7, #28]
 804c642:	781a      	ldrb	r2, [r3, #0]
 804c644:	69fb      	ldr	r3, [r7, #28]
 804c646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c648:	4619      	mov	r1, r3
 804c64a:	4610      	mov	r0, r2
 804c64c:	f000 f8f0 	bl	804c830 <netconn_alloc>
 804c650:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 804c652:	69bb      	ldr	r3, [r7, #24]
 804c654:	2b00      	cmp	r3, #0
 804c656:	d11b      	bne.n	804c690 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 804c658:	69fb      	ldr	r3, [r7, #28]
 804c65a:	f103 0414 	add.w	r4, r3, #20
 804c65e:	f06f 000c 	mvn.w	r0, #12
 804c662:	f7ff fc7f 	bl	804bf64 <lwip_netconn_err_to_msg>
 804c666:	4603      	mov	r3, r0
 804c668:	4619      	mov	r1, r3
 804c66a:	4620      	mov	r0, r4
 804c66c:	f00c f8de 	bl	805882c <sys_mbox_trypost>
 804c670:	4603      	mov	r3, r0
 804c672:	2b00      	cmp	r3, #0
 804c674:	d109      	bne.n	804c68a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 804c676:	69fb      	ldr	r3, [r7, #28]
 804c678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c67a:	2b00      	cmp	r3, #0
 804c67c:	d005      	beq.n	804c68a <accept_function+0xd2>
 804c67e:	69fb      	ldr	r3, [r7, #28]
 804c680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c682:	2200      	movs	r2, #0
 804c684:	2100      	movs	r1, #0
 804c686:	69f8      	ldr	r0, [r7, #28]
 804c688:	4798      	blx	r3
    }
    return ERR_MEM;
 804c68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c68e:	e044      	b.n	804c71a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 804c690:	69bb      	ldr	r3, [r7, #24]
 804c692:	68ba      	ldr	r2, [r7, #8]
 804c694:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 804c696:	69b8      	ldr	r0, [r7, #24]
 804c698:	f7ff ff66 	bl	804c568 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 804c69c:	69fb      	ldr	r3, [r7, #28]
 804c69e:	3314      	adds	r3, #20
 804c6a0:	69b9      	ldr	r1, [r7, #24]
 804c6a2:	4618      	mov	r0, r3
 804c6a4:	f00c f8c2 	bl	805882c <sys_mbox_trypost>
 804c6a8:	4603      	mov	r3, r0
 804c6aa:	2b00      	cmp	r3, #0
 804c6ac:	d02a      	beq.n	804c704 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 804c6ae:	69bb      	ldr	r3, [r7, #24]
 804c6b0:	685b      	ldr	r3, [r3, #4]
 804c6b2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 804c6b4:	2100      	movs	r1, #0
 804c6b6:	6978      	ldr	r0, [r7, #20]
 804c6b8:	f004 fca2 	bl	8051000 <tcp_arg>
    tcp_recv(pcb, NULL);
 804c6bc:	2100      	movs	r1, #0
 804c6be:	6978      	ldr	r0, [r7, #20]
 804c6c0:	f004 fcb0 	bl	8051024 <tcp_recv>
    tcp_sent(pcb, NULL);
 804c6c4:	2100      	movs	r1, #0
 804c6c6:	6978      	ldr	r0, [r7, #20]
 804c6c8:	f004 fcce 	bl	8051068 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 804c6cc:	2200      	movs	r2, #0
 804c6ce:	2100      	movs	r1, #0
 804c6d0:	6978      	ldr	r0, [r7, #20]
 804c6d2:	f004 fd25 	bl	8051120 <tcp_poll>
    tcp_err(pcb, NULL);
 804c6d6:	2100      	movs	r1, #0
 804c6d8:	6978      	ldr	r0, [r7, #20]
 804c6da:	f004 fce7 	bl	80510ac <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 804c6de:	69bb      	ldr	r3, [r7, #24]
 804c6e0:	2200      	movs	r2, #0
 804c6e2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 804c6e4:	69bb      	ldr	r3, [r7, #24]
 804c6e6:	3310      	adds	r3, #16
 804c6e8:	4618      	mov	r0, r3
 804c6ea:	f00c f88d 	bl	8058808 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 804c6ee:	69bb      	ldr	r3, [r7, #24]
 804c6f0:	3310      	adds	r3, #16
 804c6f2:	4618      	mov	r0, r3
 804c6f4:	f00c f920 	bl	8058938 <sys_mbox_set_invalid>
    netconn_free(newconn);
 804c6f8:	69b8      	ldr	r0, [r7, #24]
 804c6fa:	f000 f907 	bl	804c90c <netconn_free>
    return ERR_MEM;
 804c6fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804c702:	e00a      	b.n	804c71a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 804c704:	69fb      	ldr	r3, [r7, #28]
 804c706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c708:	2b00      	cmp	r3, #0
 804c70a:	d005      	beq.n	804c718 <accept_function+0x160>
 804c70c:	69fb      	ldr	r3, [r7, #28]
 804c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c710:	2200      	movs	r2, #0
 804c712:	2100      	movs	r1, #0
 804c714:	69f8      	ldr	r0, [r7, #28]
 804c716:	4798      	blx	r3
  }

  return ERR_OK;
 804c718:	2300      	movs	r3, #0
}
 804c71a:	4618      	mov	r0, r3
 804c71c:	3724      	adds	r7, #36	; 0x24
 804c71e:	46bd      	mov	sp, r7
 804c720:	bd90      	pop	{r4, r7, pc}
 804c722:	bf00      	nop
 804c724:	0805a678 	.word	0x0805a678
 804c728:	0805a834 	.word	0x0805a834
 804c72c:	0805a6bc 	.word	0x0805a6bc

0804c730 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 804c730:	b590      	push	{r4, r7, lr}
 804c732:	b085      	sub	sp, #20
 804c734:	af00      	add	r7, sp, #0
 804c736:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 804c738:	2300      	movs	r3, #0
 804c73a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 804c73c:	687b      	ldr	r3, [r7, #4]
 804c73e:	681b      	ldr	r3, [r3, #0]
 804c740:	685b      	ldr	r3, [r3, #4]
 804c742:	2b00      	cmp	r3, #0
 804c744:	d006      	beq.n	804c754 <pcb_new+0x24>
 804c746:	4b2b      	ldr	r3, [pc, #172]	; (804c7f4 <pcb_new+0xc4>)
 804c748:	f240 2265 	movw	r2, #613	; 0x265
 804c74c:	492a      	ldr	r1, [pc, #168]	; (804c7f8 <pcb_new+0xc8>)
 804c74e:	482b      	ldr	r0, [pc, #172]	; (804c7fc <pcb_new+0xcc>)
 804c750:	f00c fc70 	bl	8059034 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 804c754:	687b      	ldr	r3, [r7, #4]
 804c756:	681b      	ldr	r3, [r3, #0]
 804c758:	781b      	ldrb	r3, [r3, #0]
 804c75a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804c75e:	2b10      	cmp	r3, #16
 804c760:	d022      	beq.n	804c7a8 <pcb_new+0x78>
 804c762:	2b20      	cmp	r3, #32
 804c764:	d133      	bne.n	804c7ce <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 804c766:	687b      	ldr	r3, [r7, #4]
 804c768:	681c      	ldr	r4, [r3, #0]
 804c76a:	7bfb      	ldrb	r3, [r7, #15]
 804c76c:	4618      	mov	r0, r3
 804c76e:	f009 fd26 	bl	80561be <udp_new_ip_type>
 804c772:	4603      	mov	r3, r0
 804c774:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 804c776:	687b      	ldr	r3, [r7, #4]
 804c778:	681b      	ldr	r3, [r3, #0]
 804c77a:	685b      	ldr	r3, [r3, #4]
 804c77c:	2b00      	cmp	r3, #0
 804c77e:	d02a      	beq.n	804c7d6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 804c780:	687b      	ldr	r3, [r7, #4]
 804c782:	681b      	ldr	r3, [r3, #0]
 804c784:	781b      	ldrb	r3, [r3, #0]
 804c786:	2b22      	cmp	r3, #34	; 0x22
 804c788:	d104      	bne.n	804c794 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 804c78a:	687b      	ldr	r3, [r7, #4]
 804c78c:	681b      	ldr	r3, [r3, #0]
 804c78e:	685b      	ldr	r3, [r3, #4]
 804c790:	2201      	movs	r2, #1
 804c792:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 804c794:	687b      	ldr	r3, [r7, #4]
 804c796:	681b      	ldr	r3, [r3, #0]
 804c798:	6858      	ldr	r0, [r3, #4]
 804c79a:	687b      	ldr	r3, [r7, #4]
 804c79c:	681b      	ldr	r3, [r3, #0]
 804c79e:	461a      	mov	r2, r3
 804c7a0:	4917      	ldr	r1, [pc, #92]	; (804c800 <pcb_new+0xd0>)
 804c7a2:	f009 fc93 	bl	80560cc <udp_recv>
      }
      break;
 804c7a6:	e016      	b.n	804c7d6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 804c7a8:	687b      	ldr	r3, [r7, #4]
 804c7aa:	681c      	ldr	r4, [r3, #0]
 804c7ac:	7bfb      	ldrb	r3, [r7, #15]
 804c7ae:	4618      	mov	r0, r3
 804c7b0:	f004 fc18 	bl	8050fe4 <tcp_new_ip_type>
 804c7b4:	4603      	mov	r3, r0
 804c7b6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 804c7b8:	687b      	ldr	r3, [r7, #4]
 804c7ba:	681b      	ldr	r3, [r3, #0]
 804c7bc:	685b      	ldr	r3, [r3, #4]
 804c7be:	2b00      	cmp	r3, #0
 804c7c0:	d00b      	beq.n	804c7da <pcb_new+0xaa>
        setup_tcp(msg->conn);
 804c7c2:	687b      	ldr	r3, [r7, #4]
 804c7c4:	681b      	ldr	r3, [r3, #0]
 804c7c6:	4618      	mov	r0, r3
 804c7c8:	f7ff fece 	bl	804c568 <setup_tcp>
      }
      break;
 804c7cc:	e005      	b.n	804c7da <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 804c7ce:	687b      	ldr	r3, [r7, #4]
 804c7d0:	22fa      	movs	r2, #250	; 0xfa
 804c7d2:	711a      	strb	r2, [r3, #4]
      return;
 804c7d4:	e00a      	b.n	804c7ec <pcb_new+0xbc>
      break;
 804c7d6:	bf00      	nop
 804c7d8:	e000      	b.n	804c7dc <pcb_new+0xac>
      break;
 804c7da:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 804c7dc:	687b      	ldr	r3, [r7, #4]
 804c7de:	681b      	ldr	r3, [r3, #0]
 804c7e0:	685b      	ldr	r3, [r3, #4]
 804c7e2:	2b00      	cmp	r3, #0
 804c7e4:	d102      	bne.n	804c7ec <pcb_new+0xbc>
    msg->err = ERR_MEM;
 804c7e6:	687b      	ldr	r3, [r7, #4]
 804c7e8:	22ff      	movs	r2, #255	; 0xff
 804c7ea:	711a      	strb	r2, [r3, #4]
  }
}
 804c7ec:	3714      	adds	r7, #20
 804c7ee:	46bd      	mov	sp, r7
 804c7f0:	bd90      	pop	{r4, r7, pc}
 804c7f2:	bf00      	nop
 804c7f4:	0805a678 	.word	0x0805a678
 804c7f8:	0805a85c 	.word	0x0805a85c
 804c7fc:	0805a6bc 	.word	0x0805a6bc
 804c800:	0804c045 	.word	0x0804c045

0804c804 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 804c804:	b580      	push	{r7, lr}
 804c806:	b084      	sub	sp, #16
 804c808:	af00      	add	r7, sp, #0
 804c80a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804c80c:	687b      	ldr	r3, [r7, #4]
 804c80e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 804c810:	68fb      	ldr	r3, [r7, #12]
 804c812:	2200      	movs	r2, #0
 804c814:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 804c816:	68fb      	ldr	r3, [r7, #12]
 804c818:	681b      	ldr	r3, [r3, #0]
 804c81a:	685b      	ldr	r3, [r3, #4]
 804c81c:	2b00      	cmp	r3, #0
 804c81e:	d102      	bne.n	804c826 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 804c820:	68f8      	ldr	r0, [r7, #12]
 804c822:	f7ff ff85 	bl	804c730 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 804c826:	bf00      	nop
 804c828:	3710      	adds	r7, #16
 804c82a:	46bd      	mov	sp, r7
 804c82c:	bd80      	pop	{r7, pc}
	...

0804c830 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 804c830:	b580      	push	{r7, lr}
 804c832:	b086      	sub	sp, #24
 804c834:	af00      	add	r7, sp, #0
 804c836:	4603      	mov	r3, r0
 804c838:	6039      	str	r1, [r7, #0]
 804c83a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 804c83c:	2300      	movs	r3, #0
 804c83e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 804c840:	2007      	movs	r0, #7
 804c842:	f001 fe45 	bl	804e4d0 <memp_malloc>
 804c846:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 804c848:	68fb      	ldr	r3, [r7, #12]
 804c84a:	2b00      	cmp	r3, #0
 804c84c:	d101      	bne.n	804c852 <netconn_alloc+0x22>
    return NULL;
 804c84e:	2300      	movs	r3, #0
 804c850:	e052      	b.n	804c8f8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 804c852:	68fb      	ldr	r3, [r7, #12]
 804c854:	2200      	movs	r2, #0
 804c856:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 804c858:	68fb      	ldr	r3, [r7, #12]
 804c85a:	79fa      	ldrb	r2, [r7, #7]
 804c85c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 804c85e:	68fb      	ldr	r3, [r7, #12]
 804c860:	2200      	movs	r2, #0
 804c862:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 804c864:	79fb      	ldrb	r3, [r7, #7]
 804c866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804c86a:	2b10      	cmp	r3, #16
 804c86c:	d004      	beq.n	804c878 <netconn_alloc+0x48>
 804c86e:	2b20      	cmp	r3, #32
 804c870:	d105      	bne.n	804c87e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 804c872:	2306      	movs	r3, #6
 804c874:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 804c876:	e00a      	b.n	804c88e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 804c878:	2306      	movs	r3, #6
 804c87a:	617b      	str	r3, [r7, #20]
      break;
 804c87c:	e007      	b.n	804c88e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 804c87e:	4b20      	ldr	r3, [pc, #128]	; (804c900 <netconn_alloc+0xd0>)
 804c880:	f240 22e5 	movw	r2, #741	; 0x2e5
 804c884:	491f      	ldr	r1, [pc, #124]	; (804c904 <netconn_alloc+0xd4>)
 804c886:	4820      	ldr	r0, [pc, #128]	; (804c908 <netconn_alloc+0xd8>)
 804c888:	f00c fbd4 	bl	8059034 <iprintf>
      goto free_and_return;
 804c88c:	e02f      	b.n	804c8ee <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 804c88e:	68fb      	ldr	r3, [r7, #12]
 804c890:	3310      	adds	r3, #16
 804c892:	6979      	ldr	r1, [r7, #20]
 804c894:	4618      	mov	r0, r3
 804c896:	f00b ff95 	bl	80587c4 <sys_mbox_new>
 804c89a:	4603      	mov	r3, r0
 804c89c:	2b00      	cmp	r3, #0
 804c89e:	d125      	bne.n	804c8ec <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 804c8a0:	68fb      	ldr	r3, [r7, #12]
 804c8a2:	330c      	adds	r3, #12
 804c8a4:	2100      	movs	r1, #0
 804c8a6:	4618      	mov	r0, r3
 804c8a8:	f00c f853 	bl	8058952 <sys_sem_new>
 804c8ac:	4603      	mov	r3, r0
 804c8ae:	2b00      	cmp	r3, #0
 804c8b0:	d005      	beq.n	804c8be <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 804c8b2:	68fb      	ldr	r3, [r7, #12]
 804c8b4:	3310      	adds	r3, #16
 804c8b6:	4618      	mov	r0, r3
 804c8b8:	f00b ffa6 	bl	8058808 <sys_mbox_free>
    goto free_and_return;
 804c8bc:	e017      	b.n	804c8ee <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 804c8be:	68fb      	ldr	r3, [r7, #12]
 804c8c0:	3314      	adds	r3, #20
 804c8c2:	4618      	mov	r0, r3
 804c8c4:	f00c f838 	bl	8058938 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 804c8c8:	68fb      	ldr	r3, [r7, #12]
 804c8ca:	2200      	movs	r2, #0
 804c8cc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 804c8ce:	68fb      	ldr	r3, [r7, #12]
 804c8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804c8d4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 804c8d6:	68fb      	ldr	r3, [r7, #12]
 804c8d8:	683a      	ldr	r2, [r7, #0]
 804c8da:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 804c8dc:	68fb      	ldr	r3, [r7, #12]
 804c8de:	2200      	movs	r2, #0
 804c8e0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 804c8e2:	68fb      	ldr	r3, [r7, #12]
 804c8e4:	7cfa      	ldrb	r2, [r7, #19]
 804c8e6:	771a      	strb	r2, [r3, #28]
  return conn;
 804c8e8:	68fb      	ldr	r3, [r7, #12]
 804c8ea:	e005      	b.n	804c8f8 <netconn_alloc+0xc8>
    goto free_and_return;
 804c8ec:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 804c8ee:	68f9      	ldr	r1, [r7, #12]
 804c8f0:	2007      	movs	r0, #7
 804c8f2:	f001 fe63 	bl	804e5bc <memp_free>
  return NULL;
 804c8f6:	2300      	movs	r3, #0
}
 804c8f8:	4618      	mov	r0, r3
 804c8fa:	3718      	adds	r7, #24
 804c8fc:	46bd      	mov	sp, r7
 804c8fe:	bd80      	pop	{r7, pc}
 804c900:	0805a678 	.word	0x0805a678
 804c904:	0805a87c 	.word	0x0805a87c
 804c908:	0805a6bc 	.word	0x0805a6bc

0804c90c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 804c90c:	b580      	push	{r7, lr}
 804c90e:	b082      	sub	sp, #8
 804c910:	af00      	add	r7, sp, #0
 804c912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 804c914:	687b      	ldr	r3, [r7, #4]
 804c916:	685b      	ldr	r3, [r3, #4]
 804c918:	2b00      	cmp	r3, #0
 804c91a:	d006      	beq.n	804c92a <netconn_free+0x1e>
 804c91c:	4b1b      	ldr	r3, [pc, #108]	; (804c98c <netconn_free+0x80>)
 804c91e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 804c922:	491b      	ldr	r1, [pc, #108]	; (804c990 <netconn_free+0x84>)
 804c924:	481b      	ldr	r0, [pc, #108]	; (804c994 <netconn_free+0x88>)
 804c926:	f00c fb85 	bl	8059034 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 804c92a:	687b      	ldr	r3, [r7, #4]
 804c92c:	3310      	adds	r3, #16
 804c92e:	4618      	mov	r0, r3
 804c930:	f00b fff1 	bl	8058916 <sys_mbox_valid>
 804c934:	4603      	mov	r3, r0
 804c936:	2b00      	cmp	r3, #0
 804c938:	d006      	beq.n	804c948 <netconn_free+0x3c>
 804c93a:	4b14      	ldr	r3, [pc, #80]	; (804c98c <netconn_free+0x80>)
 804c93c:	f240 3223 	movw	r2, #803	; 0x323
 804c940:	4915      	ldr	r1, [pc, #84]	; (804c998 <netconn_free+0x8c>)
 804c942:	4814      	ldr	r0, [pc, #80]	; (804c994 <netconn_free+0x88>)
 804c944:	f00c fb76 	bl	8059034 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 804c948:	687b      	ldr	r3, [r7, #4]
 804c94a:	3314      	adds	r3, #20
 804c94c:	4618      	mov	r0, r3
 804c94e:	f00b ffe2 	bl	8058916 <sys_mbox_valid>
 804c952:	4603      	mov	r3, r0
 804c954:	2b00      	cmp	r3, #0
 804c956:	d006      	beq.n	804c966 <netconn_free+0x5a>
 804c958:	4b0c      	ldr	r3, [pc, #48]	; (804c98c <netconn_free+0x80>)
 804c95a:	f240 3226 	movw	r2, #806	; 0x326
 804c95e:	490f      	ldr	r1, [pc, #60]	; (804c99c <netconn_free+0x90>)
 804c960:	480c      	ldr	r0, [pc, #48]	; (804c994 <netconn_free+0x88>)
 804c962:	f00c fb67 	bl	8059034 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 804c966:	687b      	ldr	r3, [r7, #4]
 804c968:	330c      	adds	r3, #12
 804c96a:	4618      	mov	r0, r3
 804c96c:	f00c f857 	bl	8058a1e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 804c970:	687b      	ldr	r3, [r7, #4]
 804c972:	330c      	adds	r3, #12
 804c974:	4618      	mov	r0, r3
 804c976:	f00c f870 	bl	8058a5a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 804c97a:	6879      	ldr	r1, [r7, #4]
 804c97c:	2007      	movs	r0, #7
 804c97e:	f001 fe1d 	bl	804e5bc <memp_free>
}
 804c982:	bf00      	nop
 804c984:	3708      	adds	r7, #8
 804c986:	46bd      	mov	sp, r7
 804c988:	bd80      	pop	{r7, pc}
 804c98a:	bf00      	nop
 804c98c:	0805a678 	.word	0x0805a678
 804c990:	0805a8a4 	.word	0x0805a8a4
 804c994:	0805a6bc 	.word	0x0805a6bc
 804c998:	0805a8d4 	.word	0x0805a8d4
 804c99c:	0805a910 	.word	0x0805a910

0804c9a0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 804c9a0:	b580      	push	{r7, lr}
 804c9a2:	b086      	sub	sp, #24
 804c9a4:	af00      	add	r7, sp, #0
 804c9a6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 804c9a8:	687b      	ldr	r3, [r7, #4]
 804c9aa:	3310      	adds	r3, #16
 804c9ac:	4618      	mov	r0, r3
 804c9ae:	f00b ffb2 	bl	8058916 <sys_mbox_valid>
 804c9b2:	4603      	mov	r3, r0
 804c9b4:	2b00      	cmp	r3, #0
 804c9b6:	d02f      	beq.n	804ca18 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 804c9b8:	e018      	b.n	804c9ec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 804c9ba:	687b      	ldr	r3, [r7, #4]
 804c9bc:	781b      	ldrb	r3, [r3, #0]
 804c9be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804c9c2:	2b10      	cmp	r3, #16
 804c9c4:	d10e      	bne.n	804c9e4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 804c9c6:	693b      	ldr	r3, [r7, #16]
 804c9c8:	f107 020f 	add.w	r2, r7, #15
 804c9cc:	4611      	mov	r1, r2
 804c9ce:	4618      	mov	r0, r3
 804c9d0:	f7ff fafe 	bl	804bfd0 <lwip_netconn_is_err_msg>
 804c9d4:	4603      	mov	r3, r0
 804c9d6:	2b00      	cmp	r3, #0
 804c9d8:	d108      	bne.n	804c9ec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 804c9da:	693b      	ldr	r3, [r7, #16]
 804c9dc:	4618      	mov	r0, r3
 804c9de:	f002 fc91 	bl	804f304 <pbuf_free>
 804c9e2:	e003      	b.n	804c9ec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 804c9e4:	693b      	ldr	r3, [r7, #16]
 804c9e6:	4618      	mov	r0, r3
 804c9e8:	f000 fe92 	bl	804d710 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 804c9ec:	687b      	ldr	r3, [r7, #4]
 804c9ee:	3310      	adds	r3, #16
 804c9f0:	f107 0210 	add.w	r2, r7, #16
 804c9f4:	4611      	mov	r1, r2
 804c9f6:	4618      	mov	r0, r3
 804c9f8:	f00b ff71 	bl	80588de <sys_arch_mbox_tryfetch>
 804c9fc:	4603      	mov	r3, r0
 804c9fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804ca02:	d1da      	bne.n	804c9ba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 804ca04:	687b      	ldr	r3, [r7, #4]
 804ca06:	3310      	adds	r3, #16
 804ca08:	4618      	mov	r0, r3
 804ca0a:	f00b fefd 	bl	8058808 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 804ca0e:	687b      	ldr	r3, [r7, #4]
 804ca10:	3310      	adds	r3, #16
 804ca12:	4618      	mov	r0, r3
 804ca14:	f00b ff90 	bl	8058938 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 804ca18:	687b      	ldr	r3, [r7, #4]
 804ca1a:	3314      	adds	r3, #20
 804ca1c:	4618      	mov	r0, r3
 804ca1e:	f00b ff7a 	bl	8058916 <sys_mbox_valid>
 804ca22:	4603      	mov	r3, r0
 804ca24:	2b00      	cmp	r3, #0
 804ca26:	d034      	beq.n	804ca92 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 804ca28:	e01d      	b.n	804ca66 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 804ca2a:	693b      	ldr	r3, [r7, #16]
 804ca2c:	f107 020e 	add.w	r2, r7, #14
 804ca30:	4611      	mov	r1, r2
 804ca32:	4618      	mov	r0, r3
 804ca34:	f7ff facc 	bl	804bfd0 <lwip_netconn_is_err_msg>
 804ca38:	4603      	mov	r3, r0
 804ca3a:	2b00      	cmp	r3, #0
 804ca3c:	d113      	bne.n	804ca66 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 804ca3e:	693b      	ldr	r3, [r7, #16]
 804ca40:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 804ca42:	6978      	ldr	r0, [r7, #20]
 804ca44:	f7ff ffac 	bl	804c9a0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 804ca48:	697b      	ldr	r3, [r7, #20]
 804ca4a:	685b      	ldr	r3, [r3, #4]
 804ca4c:	2b00      	cmp	r3, #0
 804ca4e:	d007      	beq.n	804ca60 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 804ca50:	697b      	ldr	r3, [r7, #20]
 804ca52:	685b      	ldr	r3, [r3, #4]
 804ca54:	4618      	mov	r0, r3
 804ca56:	f003 fa45 	bl	804fee4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 804ca5a:	697b      	ldr	r3, [r7, #20]
 804ca5c:	2200      	movs	r2, #0
 804ca5e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 804ca60:	6978      	ldr	r0, [r7, #20]
 804ca62:	f7ff ff53 	bl	804c90c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 804ca66:	687b      	ldr	r3, [r7, #4]
 804ca68:	3314      	adds	r3, #20
 804ca6a:	f107 0210 	add.w	r2, r7, #16
 804ca6e:	4611      	mov	r1, r2
 804ca70:	4618      	mov	r0, r3
 804ca72:	f00b ff34 	bl	80588de <sys_arch_mbox_tryfetch>
 804ca76:	4603      	mov	r3, r0
 804ca78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804ca7c:	d1d5      	bne.n	804ca2a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 804ca7e:	687b      	ldr	r3, [r7, #4]
 804ca80:	3314      	adds	r3, #20
 804ca82:	4618      	mov	r0, r3
 804ca84:	f00b fec0 	bl	8058808 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 804ca88:	687b      	ldr	r3, [r7, #4]
 804ca8a:	3314      	adds	r3, #20
 804ca8c:	4618      	mov	r0, r3
 804ca8e:	f00b ff53 	bl	8058938 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 804ca92:	bf00      	nop
 804ca94:	3718      	adds	r7, #24
 804ca96:	46bd      	mov	sp, r7
 804ca98:	bd80      	pop	{r7, pc}
	...

0804ca9c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 804ca9c:	b580      	push	{r7, lr}
 804ca9e:	b086      	sub	sp, #24
 804caa0:	af00      	add	r7, sp, #0
 804caa2:	6078      	str	r0, [r7, #4]
 804caa4:	460b      	mov	r3, r1
 804caa6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 804caa8:	2300      	movs	r3, #0
 804caaa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 804caac:	687b      	ldr	r3, [r7, #4]
 804caae:	2b00      	cmp	r3, #0
 804cab0:	d106      	bne.n	804cac0 <lwip_netconn_do_close_internal+0x24>
 804cab2:	4b87      	ldr	r3, [pc, #540]	; (804ccd0 <lwip_netconn_do_close_internal+0x234>)
 804cab4:	f240 32a2 	movw	r2, #930	; 0x3a2
 804cab8:	4986      	ldr	r1, [pc, #536]	; (804ccd4 <lwip_netconn_do_close_internal+0x238>)
 804caba:	4887      	ldr	r0, [pc, #540]	; (804ccd8 <lwip_netconn_do_close_internal+0x23c>)
 804cabc:	f00c faba 	bl	8059034 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 804cac0:	687b      	ldr	r3, [r7, #4]
 804cac2:	781b      	ldrb	r3, [r3, #0]
 804cac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804cac8:	2b10      	cmp	r3, #16
 804caca:	d006      	beq.n	804cada <lwip_netconn_do_close_internal+0x3e>
 804cacc:	4b80      	ldr	r3, [pc, #512]	; (804ccd0 <lwip_netconn_do_close_internal+0x234>)
 804cace:	f240 32a3 	movw	r2, #931	; 0x3a3
 804cad2:	4982      	ldr	r1, [pc, #520]	; (804ccdc <lwip_netconn_do_close_internal+0x240>)
 804cad4:	4880      	ldr	r0, [pc, #512]	; (804ccd8 <lwip_netconn_do_close_internal+0x23c>)
 804cad6:	f00c faad 	bl	8059034 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 804cada:	687b      	ldr	r3, [r7, #4]
 804cadc:	785b      	ldrb	r3, [r3, #1]
 804cade:	2b04      	cmp	r3, #4
 804cae0:	d006      	beq.n	804caf0 <lwip_netconn_do_close_internal+0x54>
 804cae2:	4b7b      	ldr	r3, [pc, #492]	; (804ccd0 <lwip_netconn_do_close_internal+0x234>)
 804cae4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 804cae8:	497d      	ldr	r1, [pc, #500]	; (804cce0 <lwip_netconn_do_close_internal+0x244>)
 804caea:	487b      	ldr	r0, [pc, #492]	; (804ccd8 <lwip_netconn_do_close_internal+0x23c>)
 804caec:	f00c faa2 	bl	8059034 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 804caf0:	687b      	ldr	r3, [r7, #4]
 804caf2:	685b      	ldr	r3, [r3, #4]
 804caf4:	2b00      	cmp	r3, #0
 804caf6:	d106      	bne.n	804cb06 <lwip_netconn_do_close_internal+0x6a>
 804caf8:	4b75      	ldr	r3, [pc, #468]	; (804ccd0 <lwip_netconn_do_close_internal+0x234>)
 804cafa:	f240 32a5 	movw	r2, #933	; 0x3a5
 804cafe:	4979      	ldr	r1, [pc, #484]	; (804cce4 <lwip_netconn_do_close_internal+0x248>)
 804cb00:	4875      	ldr	r0, [pc, #468]	; (804ccd8 <lwip_netconn_do_close_internal+0x23c>)
 804cb02:	f00c fa97 	bl	8059034 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 804cb06:	687b      	ldr	r3, [r7, #4]
 804cb08:	6a1b      	ldr	r3, [r3, #32]
 804cb0a:	2b00      	cmp	r3, #0
 804cb0c:	d106      	bne.n	804cb1c <lwip_netconn_do_close_internal+0x80>
 804cb0e:	4b70      	ldr	r3, [pc, #448]	; (804ccd0 <lwip_netconn_do_close_internal+0x234>)
 804cb10:	f240 32a6 	movw	r2, #934	; 0x3a6
 804cb14:	4974      	ldr	r1, [pc, #464]	; (804cce8 <lwip_netconn_do_close_internal+0x24c>)
 804cb16:	4870      	ldr	r0, [pc, #448]	; (804ccd8 <lwip_netconn_do_close_internal+0x23c>)
 804cb18:	f00c fa8c 	bl	8059034 <iprintf>

  tpcb = conn->pcb.tcp;
 804cb1c:	687b      	ldr	r3, [r7, #4]
 804cb1e:	685b      	ldr	r3, [r3, #4]
 804cb20:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 804cb22:	687b      	ldr	r3, [r7, #4]
 804cb24:	6a1b      	ldr	r3, [r3, #32]
 804cb26:	7a1b      	ldrb	r3, [r3, #8]
 804cb28:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 804cb2a:	7bfb      	ldrb	r3, [r7, #15]
 804cb2c:	f003 0301 	and.w	r3, r3, #1
 804cb30:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 804cb32:	7bfb      	ldrb	r3, [r7, #15]
 804cb34:	f003 0302 	and.w	r3, r3, #2
 804cb38:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 804cb3a:	7bfb      	ldrb	r3, [r7, #15]
 804cb3c:	2b03      	cmp	r3, #3
 804cb3e:	d102      	bne.n	804cb46 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 804cb40:	2301      	movs	r3, #1
 804cb42:	75bb      	strb	r3, [r7, #22]
 804cb44:	e01f      	b.n	804cb86 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 804cb46:	7bbb      	ldrb	r3, [r7, #14]
 804cb48:	2b00      	cmp	r3, #0
 804cb4a:	d00e      	beq.n	804cb6a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 804cb4c:	693b      	ldr	r3, [r7, #16]
 804cb4e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 804cb50:	2b05      	cmp	r3, #5
 804cb52:	d007      	beq.n	804cb64 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 804cb54:	693b      	ldr	r3, [r7, #16]
 804cb56:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 804cb58:	2b06      	cmp	r3, #6
 804cb5a:	d003      	beq.n	804cb64 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 804cb5c:	693b      	ldr	r3, [r7, #16]
 804cb5e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 804cb60:	2b08      	cmp	r3, #8
 804cb62:	d102      	bne.n	804cb6a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 804cb64:	2301      	movs	r3, #1
 804cb66:	75bb      	strb	r3, [r7, #22]
 804cb68:	e00d      	b.n	804cb86 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 804cb6a:	7b7b      	ldrb	r3, [r7, #13]
 804cb6c:	2b00      	cmp	r3, #0
 804cb6e:	d008      	beq.n	804cb82 <lwip_netconn_do_close_internal+0xe6>
 804cb70:	693b      	ldr	r3, [r7, #16]
 804cb72:	8b5b      	ldrh	r3, [r3, #26]
 804cb74:	f003 0310 	and.w	r3, r3, #16
 804cb78:	2b00      	cmp	r3, #0
 804cb7a:	d002      	beq.n	804cb82 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 804cb7c:	2301      	movs	r3, #1
 804cb7e:	75bb      	strb	r3, [r7, #22]
 804cb80:	e001      	b.n	804cb86 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 804cb82:	2300      	movs	r3, #0
 804cb84:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 804cb86:	7dbb      	ldrb	r3, [r7, #22]
 804cb88:	2b00      	cmp	r3, #0
 804cb8a:	d003      	beq.n	804cb94 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 804cb8c:	2100      	movs	r1, #0
 804cb8e:	6938      	ldr	r0, [r7, #16]
 804cb90:	f004 fa36 	bl	8051000 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 804cb94:	693b      	ldr	r3, [r7, #16]
 804cb96:	7d1b      	ldrb	r3, [r3, #20]
 804cb98:	2b01      	cmp	r3, #1
 804cb9a:	d104      	bne.n	804cba6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 804cb9c:	2100      	movs	r1, #0
 804cb9e:	6938      	ldr	r0, [r7, #16]
 804cba0:	f004 faa6 	bl	80510f0 <tcp_accept>
 804cba4:	e01d      	b.n	804cbe2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 804cba6:	7bbb      	ldrb	r3, [r7, #14]
 804cba8:	2b00      	cmp	r3, #0
 804cbaa:	d007      	beq.n	804cbbc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 804cbac:	2100      	movs	r1, #0
 804cbae:	6938      	ldr	r0, [r7, #16]
 804cbb0:	f004 fa38 	bl	8051024 <tcp_recv>
      tcp_accept(tpcb, NULL);
 804cbb4:	2100      	movs	r1, #0
 804cbb6:	6938      	ldr	r0, [r7, #16]
 804cbb8:	f004 fa9a 	bl	80510f0 <tcp_accept>
    }
    if (shut_tx) {
 804cbbc:	7b7b      	ldrb	r3, [r7, #13]
 804cbbe:	2b00      	cmp	r3, #0
 804cbc0:	d003      	beq.n	804cbca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 804cbc2:	2100      	movs	r1, #0
 804cbc4:	6938      	ldr	r0, [r7, #16]
 804cbc6:	f004 fa4f 	bl	8051068 <tcp_sent>
    }
    if (shut_close) {
 804cbca:	7dbb      	ldrb	r3, [r7, #22]
 804cbcc:	2b00      	cmp	r3, #0
 804cbce:	d008      	beq.n	804cbe2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 804cbd0:	2200      	movs	r2, #0
 804cbd2:	2100      	movs	r1, #0
 804cbd4:	6938      	ldr	r0, [r7, #16]
 804cbd6:	f004 faa3 	bl	8051120 <tcp_poll>
      tcp_err(tpcb, NULL);
 804cbda:	2100      	movs	r1, #0
 804cbdc:	6938      	ldr	r0, [r7, #16]
 804cbde:	f004 fa65 	bl	80510ac <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 804cbe2:	7dbb      	ldrb	r3, [r7, #22]
 804cbe4:	2b00      	cmp	r3, #0
 804cbe6:	d005      	beq.n	804cbf4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 804cbe8:	6938      	ldr	r0, [r7, #16]
 804cbea:	f003 f835 	bl	804fc58 <tcp_close>
 804cbee:	4603      	mov	r3, r0
 804cbf0:	75fb      	strb	r3, [r7, #23]
 804cbf2:	e007      	b.n	804cc04 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 804cbf4:	7bbb      	ldrb	r3, [r7, #14]
 804cbf6:	7b7a      	ldrb	r2, [r7, #13]
 804cbf8:	4619      	mov	r1, r3
 804cbfa:	6938      	ldr	r0, [r7, #16]
 804cbfc:	f003 f858 	bl	804fcb0 <tcp_shutdown>
 804cc00:	4603      	mov	r3, r0
 804cc02:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 804cc04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 804cc08:	2b00      	cmp	r3, #0
 804cc0a:	d102      	bne.n	804cc12 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 804cc0c:	2301      	movs	r3, #1
 804cc0e:	757b      	strb	r3, [r7, #21]
 804cc10:	e016      	b.n	804cc40 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 804cc12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 804cc16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804cc1a:	d10f      	bne.n	804cc3c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 804cc1c:	687b      	ldr	r3, [r7, #4]
 804cc1e:	6a1b      	ldr	r3, [r3, #32]
 804cc20:	7a5b      	ldrb	r3, [r3, #9]
 804cc22:	2b00      	cmp	r3, #0
 804cc24:	d10c      	bne.n	804cc40 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 804cc26:	2301      	movs	r3, #1
 804cc28:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 804cc2a:	7dbb      	ldrb	r3, [r7, #22]
 804cc2c:	2b00      	cmp	r3, #0
 804cc2e:	d007      	beq.n	804cc40 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 804cc30:	6938      	ldr	r0, [r7, #16]
 804cc32:	f003 f957 	bl	804fee4 <tcp_abort>
          err = ERR_OK;
 804cc36:	2300      	movs	r3, #0
 804cc38:	75fb      	strb	r3, [r7, #23]
 804cc3a:	e001      	b.n	804cc40 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 804cc3c:	2301      	movs	r3, #1
 804cc3e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 804cc40:	7d7b      	ldrb	r3, [r7, #21]
 804cc42:	2b00      	cmp	r3, #0
 804cc44:	d052      	beq.n	804ccec <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 804cc46:	687b      	ldr	r3, [r7, #4]
 804cc48:	6a1b      	ldr	r3, [r3, #32]
 804cc4a:	681b      	ldr	r3, [r3, #0]
 804cc4c:	330c      	adds	r3, #12
 804cc4e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 804cc50:	687b      	ldr	r3, [r7, #4]
 804cc52:	6a1b      	ldr	r3, [r3, #32]
 804cc54:	7dfa      	ldrb	r2, [r7, #23]
 804cc56:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 804cc58:	687b      	ldr	r3, [r7, #4]
 804cc5a:	2200      	movs	r2, #0
 804cc5c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 804cc5e:	687b      	ldr	r3, [r7, #4]
 804cc60:	2200      	movs	r2, #0
 804cc62:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 804cc64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 804cc68:	2b00      	cmp	r3, #0
 804cc6a:	d129      	bne.n	804ccc0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 804cc6c:	7dbb      	ldrb	r3, [r7, #22]
 804cc6e:	2b00      	cmp	r3, #0
 804cc70:	d00c      	beq.n	804cc8c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 804cc72:	687b      	ldr	r3, [r7, #4]
 804cc74:	2200      	movs	r2, #0
 804cc76:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 804cc78:	687b      	ldr	r3, [r7, #4]
 804cc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cc7c:	2b00      	cmp	r3, #0
 804cc7e:	d005      	beq.n	804cc8c <lwip_netconn_do_close_internal+0x1f0>
 804cc80:	687b      	ldr	r3, [r7, #4]
 804cc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cc84:	2200      	movs	r2, #0
 804cc86:	2104      	movs	r1, #4
 804cc88:	6878      	ldr	r0, [r7, #4]
 804cc8a:	4798      	blx	r3
      }
      if (shut_rx) {
 804cc8c:	7bbb      	ldrb	r3, [r7, #14]
 804cc8e:	2b00      	cmp	r3, #0
 804cc90:	d009      	beq.n	804cca6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 804cc92:	687b      	ldr	r3, [r7, #4]
 804cc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cc96:	2b00      	cmp	r3, #0
 804cc98:	d005      	beq.n	804cca6 <lwip_netconn_do_close_internal+0x20a>
 804cc9a:	687b      	ldr	r3, [r7, #4]
 804cc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cc9e:	2200      	movs	r2, #0
 804cca0:	2100      	movs	r1, #0
 804cca2:	6878      	ldr	r0, [r7, #4]
 804cca4:	4798      	blx	r3
      }
      if (shut_tx) {
 804cca6:	7b7b      	ldrb	r3, [r7, #13]
 804cca8:	2b00      	cmp	r3, #0
 804ccaa:	d009      	beq.n	804ccc0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 804ccac:	687b      	ldr	r3, [r7, #4]
 804ccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ccb0:	2b00      	cmp	r3, #0
 804ccb2:	d005      	beq.n	804ccc0 <lwip_netconn_do_close_internal+0x224>
 804ccb4:	687b      	ldr	r3, [r7, #4]
 804ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ccb8:	2200      	movs	r2, #0
 804ccba:	2102      	movs	r1, #2
 804ccbc:	6878      	ldr	r0, [r7, #4]
 804ccbe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 804ccc0:	78fb      	ldrb	r3, [r7, #3]
 804ccc2:	2b00      	cmp	r3, #0
 804ccc4:	d002      	beq.n	804cccc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 804ccc6:	68b8      	ldr	r0, [r7, #8]
 804ccc8:	f00b fe9c 	bl	8058a04 <sys_sem_signal>
    }
    return ERR_OK;
 804cccc:	2300      	movs	r3, #0
 804ccce:	e03c      	b.n	804cd4a <lwip_netconn_do_close_internal+0x2ae>
 804ccd0:	0805a678 	.word	0x0805a678
 804ccd4:	0805a94c 	.word	0x0805a94c
 804ccd8:	0805a6bc 	.word	0x0805a6bc
 804ccdc:	0805a95c 	.word	0x0805a95c
 804cce0:	0805a97c 	.word	0x0805a97c
 804cce4:	0805a9a0 	.word	0x0805a9a0
 804cce8:	0805a7e0 	.word	0x0805a7e0
  }
  if (!close_finished) {
 804ccec:	7d7b      	ldrb	r3, [r7, #21]
 804ccee:	2b00      	cmp	r3, #0
 804ccf0:	d11e      	bne.n	804cd30 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 804ccf2:	693b      	ldr	r3, [r7, #16]
 804ccf4:	7d1b      	ldrb	r3, [r3, #20]
 804ccf6:	2b01      	cmp	r3, #1
 804ccf8:	d106      	bne.n	804cd08 <lwip_netconn_do_close_internal+0x26c>
 804ccfa:	4b16      	ldr	r3, [pc, #88]	; (804cd54 <lwip_netconn_do_close_internal+0x2b8>)
 804ccfc:	f240 4241 	movw	r2, #1089	; 0x441
 804cd00:	4915      	ldr	r1, [pc, #84]	; (804cd58 <lwip_netconn_do_close_internal+0x2bc>)
 804cd02:	4816      	ldr	r0, [pc, #88]	; (804cd5c <lwip_netconn_do_close_internal+0x2c0>)
 804cd04:	f00c f996 	bl	8059034 <iprintf>
    if (shut_tx) {
 804cd08:	7b7b      	ldrb	r3, [r7, #13]
 804cd0a:	2b00      	cmp	r3, #0
 804cd0c:	d003      	beq.n	804cd16 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 804cd0e:	4914      	ldr	r1, [pc, #80]	; (804cd60 <lwip_netconn_do_close_internal+0x2c4>)
 804cd10:	6938      	ldr	r0, [r7, #16]
 804cd12:	f004 f9a9 	bl	8051068 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 804cd16:	2201      	movs	r2, #1
 804cd18:	4912      	ldr	r1, [pc, #72]	; (804cd64 <lwip_netconn_do_close_internal+0x2c8>)
 804cd1a:	6938      	ldr	r0, [r7, #16]
 804cd1c:	f004 fa00 	bl	8051120 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 804cd20:	4911      	ldr	r1, [pc, #68]	; (804cd68 <lwip_netconn_do_close_internal+0x2cc>)
 804cd22:	6938      	ldr	r0, [r7, #16]
 804cd24:	f004 f9c2 	bl	80510ac <tcp_err>
    tcp_arg(tpcb, conn);
 804cd28:	6879      	ldr	r1, [r7, #4]
 804cd2a:	6938      	ldr	r0, [r7, #16]
 804cd2c:	f004 f968 	bl	8051000 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 804cd30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 804cd34:	2b00      	cmp	r3, #0
 804cd36:	d106      	bne.n	804cd46 <lwip_netconn_do_close_internal+0x2aa>
 804cd38:	4b06      	ldr	r3, [pc, #24]	; (804cd54 <lwip_netconn_do_close_internal+0x2b8>)
 804cd3a:	f240 424d 	movw	r2, #1101	; 0x44d
 804cd3e:	490b      	ldr	r1, [pc, #44]	; (804cd6c <lwip_netconn_do_close_internal+0x2d0>)
 804cd40:	4806      	ldr	r0, [pc, #24]	; (804cd5c <lwip_netconn_do_close_internal+0x2c0>)
 804cd42:	f00c f977 	bl	8059034 <iprintf>
  return err;
 804cd46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 804cd4a:	4618      	mov	r0, r3
 804cd4c:	3718      	adds	r7, #24
 804cd4e:	46bd      	mov	sp, r7
 804cd50:	bd80      	pop	{r7, pc}
 804cd52:	bf00      	nop
 804cd54:	0805a678 	.word	0x0805a678
 804cd58:	0805a9b4 	.word	0x0805a9b4
 804cd5c:	0805a6bc 	.word	0x0805a6bc
 804cd60:	0804c315 	.word	0x0804c315
 804cd64:	0804c24d 	.word	0x0804c24d
 804cd68:	0804c3bd 	.word	0x0804c3bd
 804cd6c:	0805a9d8 	.word	0x0805a9d8

0804cd70 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 804cd70:	b580      	push	{r7, lr}
 804cd72:	b084      	sub	sp, #16
 804cd74:	af00      	add	r7, sp, #0
 804cd76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804cd78:	687b      	ldr	r3, [r7, #4]
 804cd7a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 804cd7c:	68fb      	ldr	r3, [r7, #12]
 804cd7e:	681b      	ldr	r3, [r3, #0]
 804cd80:	785b      	ldrb	r3, [r3, #1]
 804cd82:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 804cd84:	7afb      	ldrb	r3, [r7, #11]
 804cd86:	2b00      	cmp	r3, #0
 804cd88:	d00d      	beq.n	804cda6 <lwip_netconn_do_delconn+0x36>
 804cd8a:	68fb      	ldr	r3, [r7, #12]
 804cd8c:	681b      	ldr	r3, [r3, #0]
 804cd8e:	781b      	ldrb	r3, [r3, #0]
 804cd90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804cd94:	2b10      	cmp	r3, #16
 804cd96:	d006      	beq.n	804cda6 <lwip_netconn_do_delconn+0x36>
 804cd98:	4b60      	ldr	r3, [pc, #384]	; (804cf1c <lwip_netconn_do_delconn+0x1ac>)
 804cd9a:	f240 425e 	movw	r2, #1118	; 0x45e
 804cd9e:	4960      	ldr	r1, [pc, #384]	; (804cf20 <lwip_netconn_do_delconn+0x1b0>)
 804cda0:	4860      	ldr	r0, [pc, #384]	; (804cf24 <lwip_netconn_do_delconn+0x1b4>)
 804cda2:	f00c f947 	bl	8059034 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 804cda6:	7afb      	ldrb	r3, [r7, #11]
 804cda8:	2b00      	cmp	r3, #0
 804cdaa:	d005      	beq.n	804cdb8 <lwip_netconn_do_delconn+0x48>
 804cdac:	7afb      	ldrb	r3, [r7, #11]
 804cdae:	2b02      	cmp	r3, #2
 804cdb0:	d002      	beq.n	804cdb8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 804cdb2:	7afb      	ldrb	r3, [r7, #11]
 804cdb4:	2b03      	cmp	r3, #3
 804cdb6:	d109      	bne.n	804cdcc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 804cdb8:	7afb      	ldrb	r3, [r7, #11]
 804cdba:	2b03      	cmp	r3, #3
 804cdbc:	d10a      	bne.n	804cdd4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 804cdbe:	68fb      	ldr	r3, [r7, #12]
 804cdc0:	681b      	ldr	r3, [r3, #0]
 804cdc2:	7f1b      	ldrb	r3, [r3, #28]
 804cdc4:	f003 0304 	and.w	r3, r3, #4
 804cdc8:	2b00      	cmp	r3, #0
 804cdca:	d103      	bne.n	804cdd4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 804cdcc:	68fb      	ldr	r3, [r7, #12]
 804cdce:	22fb      	movs	r2, #251	; 0xfb
 804cdd0:	711a      	strb	r2, [r3, #4]
 804cdd2:	e097      	b.n	804cf04 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 804cdd4:	7afb      	ldrb	r3, [r7, #11]
 804cdd6:	2b03      	cmp	r3, #3
 804cdd8:	d10d      	bne.n	804cdf6 <lwip_netconn_do_delconn+0x86>
 804cdda:	68fb      	ldr	r3, [r7, #12]
 804cddc:	681b      	ldr	r3, [r3, #0]
 804cdde:	7f1b      	ldrb	r3, [r3, #28]
 804cde0:	f003 0304 	and.w	r3, r3, #4
 804cde4:	2b00      	cmp	r3, #0
 804cde6:	d106      	bne.n	804cdf6 <lwip_netconn_do_delconn+0x86>
 804cde8:	4b4c      	ldr	r3, [pc, #304]	; (804cf1c <lwip_netconn_do_delconn+0x1ac>)
 804cdea:	f240 427a 	movw	r2, #1146	; 0x47a
 804cdee:	494e      	ldr	r1, [pc, #312]	; (804cf28 <lwip_netconn_do_delconn+0x1b8>)
 804cdf0:	484c      	ldr	r0, [pc, #304]	; (804cf24 <lwip_netconn_do_delconn+0x1b4>)
 804cdf2:	f00c f91f 	bl	8059034 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 804cdf6:	68fb      	ldr	r3, [r7, #12]
 804cdf8:	2200      	movs	r2, #0
 804cdfa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 804cdfc:	68fb      	ldr	r3, [r7, #12]
 804cdfe:	681b      	ldr	r3, [r3, #0]
 804ce00:	4618      	mov	r0, r3
 804ce02:	f7ff fdcd 	bl	804c9a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 804ce06:	68fb      	ldr	r3, [r7, #12]
 804ce08:	681b      	ldr	r3, [r3, #0]
 804ce0a:	685b      	ldr	r3, [r3, #4]
 804ce0c:	2b00      	cmp	r3, #0
 804ce0e:	d05f      	beq.n	804ced0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 804ce10:	68fb      	ldr	r3, [r7, #12]
 804ce12:	681b      	ldr	r3, [r3, #0]
 804ce14:	781b      	ldrb	r3, [r3, #0]
 804ce16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804ce1a:	2b10      	cmp	r3, #16
 804ce1c:	d00d      	beq.n	804ce3a <lwip_netconn_do_delconn+0xca>
 804ce1e:	2b20      	cmp	r3, #32
 804ce20:	d151      	bne.n	804cec6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 804ce22:	68fb      	ldr	r3, [r7, #12]
 804ce24:	681b      	ldr	r3, [r3, #0]
 804ce26:	685b      	ldr	r3, [r3, #4]
 804ce28:	2200      	movs	r2, #0
 804ce2a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 804ce2c:	68fb      	ldr	r3, [r7, #12]
 804ce2e:	681b      	ldr	r3, [r3, #0]
 804ce30:	685b      	ldr	r3, [r3, #4]
 804ce32:	4618      	mov	r0, r3
 804ce34:	f009 f96a 	bl	805610c <udp_remove>
          break;
 804ce38:	e046      	b.n	804cec8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 804ce3a:	68fb      	ldr	r3, [r7, #12]
 804ce3c:	681b      	ldr	r3, [r3, #0]
 804ce3e:	6a1b      	ldr	r3, [r3, #32]
 804ce40:	2b00      	cmp	r3, #0
 804ce42:	d006      	beq.n	804ce52 <lwip_netconn_do_delconn+0xe2>
 804ce44:	4b35      	ldr	r3, [pc, #212]	; (804cf1c <lwip_netconn_do_delconn+0x1ac>)
 804ce46:	f240 4294 	movw	r2, #1172	; 0x494
 804ce4a:	4938      	ldr	r1, [pc, #224]	; (804cf2c <lwip_netconn_do_delconn+0x1bc>)
 804ce4c:	4835      	ldr	r0, [pc, #212]	; (804cf24 <lwip_netconn_do_delconn+0x1b4>)
 804ce4e:	f00c f8f1 	bl	8059034 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 804ce52:	68fb      	ldr	r3, [r7, #12]
 804ce54:	681b      	ldr	r3, [r3, #0]
 804ce56:	2204      	movs	r2, #4
 804ce58:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 804ce5a:	68fb      	ldr	r3, [r7, #12]
 804ce5c:	2203      	movs	r2, #3
 804ce5e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 804ce60:	68fb      	ldr	r3, [r7, #12]
 804ce62:	681b      	ldr	r3, [r3, #0]
 804ce64:	68fa      	ldr	r2, [r7, #12]
 804ce66:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 804ce68:	68fb      	ldr	r3, [r7, #12]
 804ce6a:	681b      	ldr	r3, [r3, #0]
 804ce6c:	2100      	movs	r1, #0
 804ce6e:	4618      	mov	r0, r3
 804ce70:	f7ff fe14 	bl	804ca9c <lwip_netconn_do_close_internal>
 804ce74:	4603      	mov	r3, r0
 804ce76:	2b00      	cmp	r3, #0
 804ce78:	d04b      	beq.n	804cf12 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 804ce7a:	68fb      	ldr	r3, [r7, #12]
 804ce7c:	681b      	ldr	r3, [r3, #0]
 804ce7e:	785b      	ldrb	r3, [r3, #1]
 804ce80:	2b04      	cmp	r3, #4
 804ce82:	d006      	beq.n	804ce92 <lwip_netconn_do_delconn+0x122>
 804ce84:	4b25      	ldr	r3, [pc, #148]	; (804cf1c <lwip_netconn_do_delconn+0x1ac>)
 804ce86:	f240 429a 	movw	r2, #1178	; 0x49a
 804ce8a:	4929      	ldr	r1, [pc, #164]	; (804cf30 <lwip_netconn_do_delconn+0x1c0>)
 804ce8c:	4825      	ldr	r0, [pc, #148]	; (804cf24 <lwip_netconn_do_delconn+0x1b4>)
 804ce8e:	f00c f8d1 	bl	8059034 <iprintf>
            UNLOCK_TCPIP_CORE();
 804ce92:	4828      	ldr	r0, [pc, #160]	; (804cf34 <lwip_netconn_do_delconn+0x1c4>)
 804ce94:	f00b fe27 	bl	8058ae6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 804ce98:	68fb      	ldr	r3, [r7, #12]
 804ce9a:	681b      	ldr	r3, [r3, #0]
 804ce9c:	330c      	adds	r3, #12
 804ce9e:	2100      	movs	r1, #0
 804cea0:	4618      	mov	r0, r3
 804cea2:	f00b fd7e 	bl	80589a2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 804cea6:	4823      	ldr	r0, [pc, #140]	; (804cf34 <lwip_netconn_do_delconn+0x1c4>)
 804cea8:	f00b fe0e 	bl	8058ac8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 804ceac:	68fb      	ldr	r3, [r7, #12]
 804ceae:	681b      	ldr	r3, [r3, #0]
 804ceb0:	785b      	ldrb	r3, [r3, #1]
 804ceb2:	2b00      	cmp	r3, #0
 804ceb4:	d02d      	beq.n	804cf12 <lwip_netconn_do_delconn+0x1a2>
 804ceb6:	4b19      	ldr	r3, [pc, #100]	; (804cf1c <lwip_netconn_do_delconn+0x1ac>)
 804ceb8:	f240 429e 	movw	r2, #1182	; 0x49e
 804cebc:	491c      	ldr	r1, [pc, #112]	; (804cf30 <lwip_netconn_do_delconn+0x1c0>)
 804cebe:	4819      	ldr	r0, [pc, #100]	; (804cf24 <lwip_netconn_do_delconn+0x1b4>)
 804cec0:	f00c f8b8 	bl	8059034 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 804cec4:	e025      	b.n	804cf12 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 804cec6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 804cec8:	68fb      	ldr	r3, [r7, #12]
 804ceca:	681b      	ldr	r3, [r3, #0]
 804cecc:	2200      	movs	r2, #0
 804cece:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 804ced0:	68fb      	ldr	r3, [r7, #12]
 804ced2:	681b      	ldr	r3, [r3, #0]
 804ced4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ced6:	2b00      	cmp	r3, #0
 804ced8:	d007      	beq.n	804ceea <lwip_netconn_do_delconn+0x17a>
 804ceda:	68fb      	ldr	r3, [r7, #12]
 804cedc:	681b      	ldr	r3, [r3, #0]
 804cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cee0:	68fa      	ldr	r2, [r7, #12]
 804cee2:	6810      	ldr	r0, [r2, #0]
 804cee4:	2200      	movs	r2, #0
 804cee6:	2100      	movs	r1, #0
 804cee8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 804ceea:	68fb      	ldr	r3, [r7, #12]
 804ceec:	681b      	ldr	r3, [r3, #0]
 804ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cef0:	2b00      	cmp	r3, #0
 804cef2:	d007      	beq.n	804cf04 <lwip_netconn_do_delconn+0x194>
 804cef4:	68fb      	ldr	r3, [r7, #12]
 804cef6:	681b      	ldr	r3, [r3, #0]
 804cef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804cefa:	68fa      	ldr	r2, [r7, #12]
 804cefc:	6810      	ldr	r0, [r2, #0]
 804cefe:	2200      	movs	r2, #0
 804cf00:	2102      	movs	r1, #2
 804cf02:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 804cf04:	68fb      	ldr	r3, [r7, #12]
 804cf06:	681b      	ldr	r3, [r3, #0]
 804cf08:	330c      	adds	r3, #12
 804cf0a:	4618      	mov	r0, r3
 804cf0c:	f00b fd94 	bl	8058a38 <sys_sem_valid>
 804cf10:	e000      	b.n	804cf14 <lwip_netconn_do_delconn+0x1a4>
          return;
 804cf12:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 804cf14:	3710      	adds	r7, #16
 804cf16:	46bd      	mov	sp, r7
 804cf18:	bd80      	pop	{r7, pc}
 804cf1a:	bf00      	nop
 804cf1c:	0805a678 	.word	0x0805a678
 804cf20:	0805a9e8 	.word	0x0805a9e8
 804cf24:	0805a6bc 	.word	0x0805a6bc
 804cf28:	0805a9fc 	.word	0x0805a9fc
 804cf2c:	0805aa1c 	.word	0x0805aa1c
 804cf30:	0805aa38 	.word	0x0805aa38
 804cf34:	20005cb4 	.word	0x20005cb4

0804cf38 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 804cf38:	b580      	push	{r7, lr}
 804cf3a:	b084      	sub	sp, #16
 804cf3c:	af00      	add	r7, sp, #0
 804cf3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804cf40:	687b      	ldr	r3, [r7, #4]
 804cf42:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 804cf44:	68bb      	ldr	r3, [r7, #8]
 804cf46:	681b      	ldr	r3, [r3, #0]
 804cf48:	685b      	ldr	r3, [r3, #4]
 804cf4a:	2b00      	cmp	r3, #0
 804cf4c:	d025      	beq.n	804cf9a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 804cf4e:	68bb      	ldr	r3, [r7, #8]
 804cf50:	681b      	ldr	r3, [r3, #0]
 804cf52:	781b      	ldrb	r3, [r3, #0]
 804cf54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804cf58:	2b10      	cmp	r3, #16
 804cf5a:	d00e      	beq.n	804cf7a <lwip_netconn_do_bind+0x42>
 804cf5c:	2b20      	cmp	r3, #32
 804cf5e:	d119      	bne.n	804cf94 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 804cf60:	68bb      	ldr	r3, [r7, #8]
 804cf62:	681b      	ldr	r3, [r3, #0]
 804cf64:	6858      	ldr	r0, [r3, #4]
 804cf66:	68bb      	ldr	r3, [r7, #8]
 804cf68:	6899      	ldr	r1, [r3, #8]
 804cf6a:	68bb      	ldr	r3, [r7, #8]
 804cf6c:	899b      	ldrh	r3, [r3, #12]
 804cf6e:	461a      	mov	r2, r3
 804cf70:	f009 f824 	bl	8055fbc <udp_bind>
 804cf74:	4603      	mov	r3, r0
 804cf76:	73fb      	strb	r3, [r7, #15]
        break;
 804cf78:	e011      	b.n	804cf9e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 804cf7a:	68bb      	ldr	r3, [r7, #8]
 804cf7c:	681b      	ldr	r3, [r3, #0]
 804cf7e:	6858      	ldr	r0, [r3, #4]
 804cf80:	68bb      	ldr	r3, [r7, #8]
 804cf82:	6899      	ldr	r1, [r3, #8]
 804cf84:	68bb      	ldr	r3, [r7, #8]
 804cf86:	899b      	ldrh	r3, [r3, #12]
 804cf88:	461a      	mov	r2, r3
 804cf8a:	f002 ffb7 	bl	804fefc <tcp_bind>
 804cf8e:	4603      	mov	r3, r0
 804cf90:	73fb      	strb	r3, [r7, #15]
        break;
 804cf92:	e004      	b.n	804cf9e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 804cf94:	23fa      	movs	r3, #250	; 0xfa
 804cf96:	73fb      	strb	r3, [r7, #15]
        break;
 804cf98:	e001      	b.n	804cf9e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 804cf9a:	23fa      	movs	r3, #250	; 0xfa
 804cf9c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 804cf9e:	68bb      	ldr	r3, [r7, #8]
 804cfa0:	7bfa      	ldrb	r2, [r7, #15]
 804cfa2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 804cfa4:	bf00      	nop
 804cfa6:	3710      	adds	r7, #16
 804cfa8:	46bd      	mov	sp, r7
 804cfaa:	bd80      	pop	{r7, pc}

0804cfac <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 804cfac:	b580      	push	{r7, lr}
 804cfae:	b086      	sub	sp, #24
 804cfb0:	af00      	add	r7, sp, #0
 804cfb2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804cfb4:	687b      	ldr	r3, [r7, #4]
 804cfb6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 804cfb8:	697b      	ldr	r3, [r7, #20]
 804cfba:	681b      	ldr	r3, [r3, #0]
 804cfbc:	685b      	ldr	r3, [r3, #4]
 804cfbe:	2b00      	cmp	r3, #0
 804cfc0:	d07f      	beq.n	804d0c2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 804cfc2:	697b      	ldr	r3, [r7, #20]
 804cfc4:	681b      	ldr	r3, [r3, #0]
 804cfc6:	781b      	ldrb	r3, [r3, #0]
 804cfc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804cfcc:	2b10      	cmp	r3, #16
 804cfce:	d175      	bne.n	804d0bc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 804cfd0:	697b      	ldr	r3, [r7, #20]
 804cfd2:	681b      	ldr	r3, [r3, #0]
 804cfd4:	785b      	ldrb	r3, [r3, #1]
 804cfd6:	2b00      	cmp	r3, #0
 804cfd8:	d165      	bne.n	804d0a6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 804cfda:	697b      	ldr	r3, [r7, #20]
 804cfdc:	681b      	ldr	r3, [r3, #0]
 804cfde:	685b      	ldr	r3, [r3, #4]
 804cfe0:	7d1b      	ldrb	r3, [r3, #20]
 804cfe2:	2b00      	cmp	r3, #0
 804cfe4:	d002      	beq.n	804cfec <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 804cfe6:	23fa      	movs	r3, #250	; 0xfa
 804cfe8:	72fb      	strb	r3, [r7, #11]
 804cfea:	e06c      	b.n	804d0c6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 804cfec:	23ff      	movs	r3, #255	; 0xff
 804cfee:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 804cff0:	697b      	ldr	r3, [r7, #20]
 804cff2:	681b      	ldr	r3, [r3, #0]
 804cff4:	685b      	ldr	r3, [r3, #4]
 804cff6:	f107 020b 	add.w	r2, r7, #11
 804cffa:	7cf9      	ldrb	r1, [r7, #19]
 804cffc:	4618      	mov	r0, r3
 804cffe:	f003 f835 	bl	805006c <tcp_listen_with_backlog_and_err>
 804d002:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 804d004:	68fb      	ldr	r3, [r7, #12]
 804d006:	2b00      	cmp	r3, #0
 804d008:	d05d      	beq.n	804d0c6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 804d00a:	697b      	ldr	r3, [r7, #20]
 804d00c:	681b      	ldr	r3, [r3, #0]
 804d00e:	3310      	adds	r3, #16
 804d010:	4618      	mov	r0, r3
 804d012:	f00b fc80 	bl	8058916 <sys_mbox_valid>
 804d016:	4603      	mov	r3, r0
 804d018:	2b00      	cmp	r3, #0
 804d01a:	d00b      	beq.n	804d034 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 804d01c:	697b      	ldr	r3, [r7, #20]
 804d01e:	681b      	ldr	r3, [r3, #0]
 804d020:	3310      	adds	r3, #16
 804d022:	4618      	mov	r0, r3
 804d024:	f00b fbf0 	bl	8058808 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 804d028:	697b      	ldr	r3, [r7, #20]
 804d02a:	681b      	ldr	r3, [r3, #0]
 804d02c:	3310      	adds	r3, #16
 804d02e:	4618      	mov	r0, r3
 804d030:	f00b fc82 	bl	8058938 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 804d034:	2300      	movs	r3, #0
 804d036:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 804d038:	697b      	ldr	r3, [r7, #20]
 804d03a:	681b      	ldr	r3, [r3, #0]
 804d03c:	3314      	adds	r3, #20
 804d03e:	4618      	mov	r0, r3
 804d040:	f00b fc69 	bl	8058916 <sys_mbox_valid>
 804d044:	4603      	mov	r3, r0
 804d046:	2b00      	cmp	r3, #0
 804d048:	d108      	bne.n	804d05c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 804d04a:	697b      	ldr	r3, [r7, #20]
 804d04c:	681b      	ldr	r3, [r3, #0]
 804d04e:	3314      	adds	r3, #20
 804d050:	2106      	movs	r1, #6
 804d052:	4618      	mov	r0, r3
 804d054:	f00b fbb6 	bl	80587c4 <sys_mbox_new>
 804d058:	4603      	mov	r3, r0
 804d05a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 804d05c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 804d060:	2b00      	cmp	r3, #0
 804d062:	d118      	bne.n	804d096 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 804d064:	697b      	ldr	r3, [r7, #20]
 804d066:	681b      	ldr	r3, [r3, #0]
 804d068:	2202      	movs	r2, #2
 804d06a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 804d06c:	697b      	ldr	r3, [r7, #20]
 804d06e:	681b      	ldr	r3, [r3, #0]
 804d070:	68fa      	ldr	r2, [r7, #12]
 804d072:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 804d074:	697b      	ldr	r3, [r7, #20]
 804d076:	681b      	ldr	r3, [r3, #0]
 804d078:	685a      	ldr	r2, [r3, #4]
 804d07a:	697b      	ldr	r3, [r7, #20]
 804d07c:	681b      	ldr	r3, [r3, #0]
 804d07e:	4619      	mov	r1, r3
 804d080:	4610      	mov	r0, r2
 804d082:	f003 ffbd 	bl	8051000 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 804d086:	697b      	ldr	r3, [r7, #20]
 804d088:	681b      	ldr	r3, [r3, #0]
 804d08a:	685b      	ldr	r3, [r3, #4]
 804d08c:	4912      	ldr	r1, [pc, #72]	; (804d0d8 <lwip_netconn_do_listen+0x12c>)
 804d08e:	4618      	mov	r0, r3
 804d090:	f004 f82e 	bl	80510f0 <tcp_accept>
 804d094:	e017      	b.n	804d0c6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 804d096:	68f8      	ldr	r0, [r7, #12]
 804d098:	f002 fdde 	bl	804fc58 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 804d09c:	697b      	ldr	r3, [r7, #20]
 804d09e:	681b      	ldr	r3, [r3, #0]
 804d0a0:	2200      	movs	r2, #0
 804d0a2:	605a      	str	r2, [r3, #4]
 804d0a4:	e00f      	b.n	804d0c6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 804d0a6:	697b      	ldr	r3, [r7, #20]
 804d0a8:	681b      	ldr	r3, [r3, #0]
 804d0aa:	785b      	ldrb	r3, [r3, #1]
 804d0ac:	2b02      	cmp	r3, #2
 804d0ae:	d102      	bne.n	804d0b6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 804d0b0:	2300      	movs	r3, #0
 804d0b2:	72fb      	strb	r3, [r7, #11]
 804d0b4:	e007      	b.n	804d0c6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 804d0b6:	23f5      	movs	r3, #245	; 0xf5
 804d0b8:	72fb      	strb	r3, [r7, #11]
 804d0ba:	e004      	b.n	804d0c6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 804d0bc:	23f0      	movs	r3, #240	; 0xf0
 804d0be:	72fb      	strb	r3, [r7, #11]
 804d0c0:	e001      	b.n	804d0c6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 804d0c2:	23f5      	movs	r3, #245	; 0xf5
 804d0c4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 804d0c6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 804d0ca:	697b      	ldr	r3, [r7, #20]
 804d0cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 804d0ce:	bf00      	nop
 804d0d0:	3718      	adds	r7, #24
 804d0d2:	46bd      	mov	sp, r7
 804d0d4:	bd80      	pop	{r7, pc}
 804d0d6:	bf00      	nop
 804d0d8:	0804c5b9 	.word	0x0804c5b9

0804d0dc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 804d0dc:	b580      	push	{r7, lr}
 804d0de:	b086      	sub	sp, #24
 804d0e0:	af00      	add	r7, sp, #0
 804d0e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804d0e4:	687b      	ldr	r3, [r7, #4]
 804d0e6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 804d0e8:	693b      	ldr	r3, [r7, #16]
 804d0ea:	2200      	movs	r2, #0
 804d0ec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 804d0ee:	693b      	ldr	r3, [r7, #16]
 804d0f0:	681b      	ldr	r3, [r3, #0]
 804d0f2:	685b      	ldr	r3, [r3, #4]
 804d0f4:	2b00      	cmp	r3, #0
 804d0f6:	d022      	beq.n	804d13e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 804d0f8:	693b      	ldr	r3, [r7, #16]
 804d0fa:	681b      	ldr	r3, [r3, #0]
 804d0fc:	781b      	ldrb	r3, [r3, #0]
 804d0fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804d102:	2b10      	cmp	r3, #16
 804d104:	d11b      	bne.n	804d13e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 804d106:	693b      	ldr	r3, [r7, #16]
 804d108:	689b      	ldr	r3, [r3, #8]
 804d10a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 804d10c:	697b      	ldr	r3, [r7, #20]
 804d10e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804d112:	d202      	bcs.n	804d11a <lwip_netconn_do_recv+0x3e>
 804d114:	697b      	ldr	r3, [r7, #20]
 804d116:	b29b      	uxth	r3, r3
 804d118:	e001      	b.n	804d11e <lwip_netconn_do_recv+0x42>
 804d11a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804d11e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 804d120:	693b      	ldr	r3, [r7, #16]
 804d122:	681b      	ldr	r3, [r3, #0]
 804d124:	685b      	ldr	r3, [r3, #4]
 804d126:	89fa      	ldrh	r2, [r7, #14]
 804d128:	4611      	mov	r1, r2
 804d12a:	4618      	mov	r0, r3
 804d12c:	f003 f8a2 	bl	8050274 <tcp_recved>
        remaining -= recved;
 804d130:	89fb      	ldrh	r3, [r7, #14]
 804d132:	697a      	ldr	r2, [r7, #20]
 804d134:	1ad3      	subs	r3, r2, r3
 804d136:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 804d138:	697b      	ldr	r3, [r7, #20]
 804d13a:	2b00      	cmp	r3, #0
 804d13c:	d1e6      	bne.n	804d10c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 804d13e:	bf00      	nop
 804d140:	3718      	adds	r7, #24
 804d142:	46bd      	mov	sp, r7
 804d144:	bd80      	pop	{r7, pc}
	...

0804d148 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 804d148:	b580      	push	{r7, lr}
 804d14a:	b088      	sub	sp, #32
 804d14c:	af00      	add	r7, sp, #0
 804d14e:	6078      	str	r0, [r7, #4]
 804d150:	460b      	mov	r3, r1
 804d152:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 804d154:	2300      	movs	r3, #0
 804d156:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 804d158:	687b      	ldr	r3, [r7, #4]
 804d15a:	2b00      	cmp	r3, #0
 804d15c:	d106      	bne.n	804d16c <lwip_netconn_do_writemore+0x24>
 804d15e:	4b96      	ldr	r3, [pc, #600]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d160:	f240 6273 	movw	r2, #1651	; 0x673
 804d164:	4995      	ldr	r1, [pc, #596]	; (804d3bc <lwip_netconn_do_writemore+0x274>)
 804d166:	4896      	ldr	r0, [pc, #600]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d168:	f00b ff64 	bl	8059034 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 804d16c:	687b      	ldr	r3, [r7, #4]
 804d16e:	785b      	ldrb	r3, [r3, #1]
 804d170:	2b01      	cmp	r3, #1
 804d172:	d006      	beq.n	804d182 <lwip_netconn_do_writemore+0x3a>
 804d174:	4b90      	ldr	r3, [pc, #576]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d176:	f240 6274 	movw	r2, #1652	; 0x674
 804d17a:	4992      	ldr	r1, [pc, #584]	; (804d3c4 <lwip_netconn_do_writemore+0x27c>)
 804d17c:	4890      	ldr	r0, [pc, #576]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d17e:	f00b ff59 	bl	8059034 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 804d182:	687b      	ldr	r3, [r7, #4]
 804d184:	6a1b      	ldr	r3, [r3, #32]
 804d186:	2b00      	cmp	r3, #0
 804d188:	d106      	bne.n	804d198 <lwip_netconn_do_writemore+0x50>
 804d18a:	4b8b      	ldr	r3, [pc, #556]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d18c:	f240 6275 	movw	r2, #1653	; 0x675
 804d190:	498d      	ldr	r1, [pc, #564]	; (804d3c8 <lwip_netconn_do_writemore+0x280>)
 804d192:	488b      	ldr	r0, [pc, #556]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d194:	f00b ff4e 	bl	8059034 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 804d198:	687b      	ldr	r3, [r7, #4]
 804d19a:	685b      	ldr	r3, [r3, #4]
 804d19c:	2b00      	cmp	r3, #0
 804d19e:	d106      	bne.n	804d1ae <lwip_netconn_do_writemore+0x66>
 804d1a0:	4b85      	ldr	r3, [pc, #532]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d1a2:	f240 6276 	movw	r2, #1654	; 0x676
 804d1a6:	4989      	ldr	r1, [pc, #548]	; (804d3cc <lwip_netconn_do_writemore+0x284>)
 804d1a8:	4885      	ldr	r0, [pc, #532]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d1aa:	f00b ff43 	bl	8059034 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 804d1ae:	687b      	ldr	r3, [r7, #4]
 804d1b0:	6a1b      	ldr	r3, [r3, #32]
 804d1b2:	699a      	ldr	r2, [r3, #24]
 804d1b4:	687b      	ldr	r3, [r7, #4]
 804d1b6:	6a1b      	ldr	r3, [r3, #32]
 804d1b8:	695b      	ldr	r3, [r3, #20]
 804d1ba:	429a      	cmp	r2, r3
 804d1bc:	d306      	bcc.n	804d1cc <lwip_netconn_do_writemore+0x84>
 804d1be:	4b7e      	ldr	r3, [pc, #504]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d1c0:	f240 6277 	movw	r2, #1655	; 0x677
 804d1c4:	4982      	ldr	r1, [pc, #520]	; (804d3d0 <lwip_netconn_do_writemore+0x288>)
 804d1c6:	487e      	ldr	r0, [pc, #504]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d1c8:	f00b ff34 	bl	8059034 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 804d1cc:	687b      	ldr	r3, [r7, #4]
 804d1ce:	6a1b      	ldr	r3, [r3, #32]
 804d1d0:	899b      	ldrh	r3, [r3, #12]
 804d1d2:	2b00      	cmp	r3, #0
 804d1d4:	d106      	bne.n	804d1e4 <lwip_netconn_do_writemore+0x9c>
 804d1d6:	4b78      	ldr	r3, [pc, #480]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d1d8:	f240 6279 	movw	r2, #1657	; 0x679
 804d1dc:	497d      	ldr	r1, [pc, #500]	; (804d3d4 <lwip_netconn_do_writemore+0x28c>)
 804d1de:	4878      	ldr	r0, [pc, #480]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d1e0:	f00b ff28 	bl	8059034 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 804d1e4:	687b      	ldr	r3, [r7, #4]
 804d1e6:	6a1b      	ldr	r3, [r3, #32]
 804d1e8:	7f1b      	ldrb	r3, [r3, #28]
 804d1ea:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 804d1ec:	687b      	ldr	r3, [r7, #4]
 804d1ee:	7f1b      	ldrb	r3, [r3, #28]
 804d1f0:	f003 0302 	and.w	r3, r3, #2
 804d1f4:	2b00      	cmp	r3, #0
 804d1f6:	d104      	bne.n	804d202 <lwip_netconn_do_writemore+0xba>
 804d1f8:	7ebb      	ldrb	r3, [r7, #26]
 804d1fa:	f003 0304 	and.w	r3, r3, #4
 804d1fe:	2b00      	cmp	r3, #0
 804d200:	d001      	beq.n	804d206 <lwip_netconn_do_writemore+0xbe>
 804d202:	2301      	movs	r3, #1
 804d204:	e000      	b.n	804d208 <lwip_netconn_do_writemore+0xc0>
 804d206:	2300      	movs	r3, #0
 804d208:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 804d20a:	687b      	ldr	r3, [r7, #4]
 804d20c:	6a1b      	ldr	r3, [r3, #32]
 804d20e:	689b      	ldr	r3, [r3, #8]
 804d210:	681a      	ldr	r2, [r3, #0]
 804d212:	687b      	ldr	r3, [r7, #4]
 804d214:	6a1b      	ldr	r3, [r3, #32]
 804d216:	691b      	ldr	r3, [r3, #16]
 804d218:	4413      	add	r3, r2
 804d21a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 804d21c:	687b      	ldr	r3, [r7, #4]
 804d21e:	6a1b      	ldr	r3, [r3, #32]
 804d220:	689b      	ldr	r3, [r3, #8]
 804d222:	685a      	ldr	r2, [r3, #4]
 804d224:	687b      	ldr	r3, [r7, #4]
 804d226:	6a1b      	ldr	r3, [r3, #32]
 804d228:	691b      	ldr	r3, [r3, #16]
 804d22a:	1ad3      	subs	r3, r2, r3
 804d22c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 804d22e:	693b      	ldr	r3, [r7, #16]
 804d230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804d234:	d307      	bcc.n	804d246 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 804d236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804d23a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 804d23c:	7ebb      	ldrb	r3, [r7, #26]
 804d23e:	f043 0302 	orr.w	r3, r3, #2
 804d242:	76bb      	strb	r3, [r7, #26]
 804d244:	e001      	b.n	804d24a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 804d246:	693b      	ldr	r3, [r7, #16]
 804d248:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 804d24a:	687b      	ldr	r3, [r7, #4]
 804d24c:	685b      	ldr	r3, [r3, #4]
 804d24e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 804d252:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 804d254:	89fa      	ldrh	r2, [r7, #14]
 804d256:	8bbb      	ldrh	r3, [r7, #28]
 804d258:	429a      	cmp	r2, r3
 804d25a:	d216      	bcs.n	804d28a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 804d25c:	89fb      	ldrh	r3, [r7, #14]
 804d25e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 804d260:	7e3b      	ldrb	r3, [r7, #24]
 804d262:	2b00      	cmp	r3, #0
 804d264:	d00d      	beq.n	804d282 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 804d266:	8bbb      	ldrh	r3, [r7, #28]
 804d268:	2b00      	cmp	r3, #0
 804d26a:	d10e      	bne.n	804d28a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 804d26c:	687b      	ldr	r3, [r7, #4]
 804d26e:	6a1b      	ldr	r3, [r3, #32]
 804d270:	699b      	ldr	r3, [r3, #24]
 804d272:	2b00      	cmp	r3, #0
 804d274:	d102      	bne.n	804d27c <lwip_netconn_do_writemore+0x134>
 804d276:	f06f 0306 	mvn.w	r3, #6
 804d27a:	e000      	b.n	804d27e <lwip_netconn_do_writemore+0x136>
 804d27c:	2300      	movs	r3, #0
 804d27e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 804d280:	e07d      	b.n	804d37e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 804d282:	7ebb      	ldrb	r3, [r7, #26]
 804d284:	f043 0302 	orr.w	r3, r3, #2
 804d288:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 804d28a:	687b      	ldr	r3, [r7, #4]
 804d28c:	6a1b      	ldr	r3, [r3, #32]
 804d28e:	691a      	ldr	r2, [r3, #16]
 804d290:	8bbb      	ldrh	r3, [r7, #28]
 804d292:	441a      	add	r2, r3
 804d294:	687b      	ldr	r3, [r7, #4]
 804d296:	6a1b      	ldr	r3, [r3, #32]
 804d298:	689b      	ldr	r3, [r3, #8]
 804d29a:	685b      	ldr	r3, [r3, #4]
 804d29c:	429a      	cmp	r2, r3
 804d29e:	d906      	bls.n	804d2ae <lwip_netconn_do_writemore+0x166>
 804d2a0:	4b45      	ldr	r3, [pc, #276]	; (804d3b8 <lwip_netconn_do_writemore+0x270>)
 804d2a2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 804d2a6:	494c      	ldr	r1, [pc, #304]	; (804d3d8 <lwip_netconn_do_writemore+0x290>)
 804d2a8:	4845      	ldr	r0, [pc, #276]	; (804d3c0 <lwip_netconn_do_writemore+0x278>)
 804d2aa:	f00b fec3 	bl	8059034 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 804d2ae:	8bbb      	ldrh	r3, [r7, #28]
 804d2b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804d2b4:	4293      	cmp	r3, r2
 804d2b6:	d103      	bne.n	804d2c0 <lwip_netconn_do_writemore+0x178>
 804d2b8:	693b      	ldr	r3, [r7, #16]
 804d2ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804d2be:	d209      	bcs.n	804d2d4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 804d2c0:	693b      	ldr	r3, [r7, #16]
 804d2c2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 804d2c4:	8bba      	ldrh	r2, [r7, #28]
 804d2c6:	429a      	cmp	r2, r3
 804d2c8:	d10b      	bne.n	804d2e2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 804d2ca:	687b      	ldr	r3, [r7, #4]
 804d2cc:	6a1b      	ldr	r3, [r3, #32]
 804d2ce:	899b      	ldrh	r3, [r3, #12]
 804d2d0:	2b01      	cmp	r3, #1
 804d2d2:	d906      	bls.n	804d2e2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 804d2d4:	2301      	movs	r3, #1
 804d2d6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 804d2d8:	7ebb      	ldrb	r3, [r7, #26]
 804d2da:	f043 0302 	orr.w	r3, r3, #2
 804d2de:	76bb      	strb	r3, [r7, #26]
 804d2e0:	e001      	b.n	804d2e6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 804d2e2:	2300      	movs	r3, #0
 804d2e4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 804d2e6:	687b      	ldr	r3, [r7, #4]
 804d2e8:	6858      	ldr	r0, [r3, #4]
 804d2ea:	7ebb      	ldrb	r3, [r7, #26]
 804d2ec:	8bba      	ldrh	r2, [r7, #28]
 804d2ee:	6979      	ldr	r1, [r7, #20]
 804d2f0:	f006 fdc8 	bl	8053e84 <tcp_write>
 804d2f4:	4603      	mov	r3, r0
 804d2f6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 804d2f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 804d2fc:	2b00      	cmp	r3, #0
 804d2fe:	d12c      	bne.n	804d35a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 804d300:	687b      	ldr	r3, [r7, #4]
 804d302:	6a1b      	ldr	r3, [r3, #32]
 804d304:	6999      	ldr	r1, [r3, #24]
 804d306:	8bba      	ldrh	r2, [r7, #28]
 804d308:	687b      	ldr	r3, [r7, #4]
 804d30a:	6a1b      	ldr	r3, [r3, #32]
 804d30c:	440a      	add	r2, r1
 804d30e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 804d310:	687b      	ldr	r3, [r7, #4]
 804d312:	6a1b      	ldr	r3, [r3, #32]
 804d314:	6919      	ldr	r1, [r3, #16]
 804d316:	8bba      	ldrh	r2, [r7, #28]
 804d318:	687b      	ldr	r3, [r7, #4]
 804d31a:	6a1b      	ldr	r3, [r3, #32]
 804d31c:	440a      	add	r2, r1
 804d31e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 804d320:	687b      	ldr	r3, [r7, #4]
 804d322:	6a1b      	ldr	r3, [r3, #32]
 804d324:	691a      	ldr	r2, [r3, #16]
 804d326:	687b      	ldr	r3, [r7, #4]
 804d328:	6a1b      	ldr	r3, [r3, #32]
 804d32a:	689b      	ldr	r3, [r3, #8]
 804d32c:	685b      	ldr	r3, [r3, #4]
 804d32e:	429a      	cmp	r2, r3
 804d330:	d113      	bne.n	804d35a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 804d332:	687b      	ldr	r3, [r7, #4]
 804d334:	6a1b      	ldr	r3, [r3, #32]
 804d336:	899a      	ldrh	r2, [r3, #12]
 804d338:	3a01      	subs	r2, #1
 804d33a:	b292      	uxth	r2, r2
 804d33c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 804d33e:	687b      	ldr	r3, [r7, #4]
 804d340:	6a1b      	ldr	r3, [r3, #32]
 804d342:	899b      	ldrh	r3, [r3, #12]
 804d344:	2b00      	cmp	r3, #0
 804d346:	d008      	beq.n	804d35a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 804d348:	687b      	ldr	r3, [r7, #4]
 804d34a:	6a1b      	ldr	r3, [r3, #32]
 804d34c:	689a      	ldr	r2, [r3, #8]
 804d34e:	3208      	adds	r2, #8
 804d350:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 804d352:	687b      	ldr	r3, [r7, #4]
 804d354:	6a1b      	ldr	r3, [r3, #32]
 804d356:	2200      	movs	r2, #0
 804d358:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 804d35a:	7e7b      	ldrb	r3, [r7, #25]
 804d35c:	2b00      	cmp	r3, #0
 804d35e:	d004      	beq.n	804d36a <lwip_netconn_do_writemore+0x222>
 804d360:	f997 301f 	ldrsb.w	r3, [r7, #31]
 804d364:	2b00      	cmp	r3, #0
 804d366:	f43f af50 	beq.w	804d20a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 804d36a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 804d36e:	2b00      	cmp	r3, #0
 804d370:	d004      	beq.n	804d37c <lwip_netconn_do_writemore+0x234>
 804d372:	f997 301f 	ldrsb.w	r3, [r7, #31]
 804d376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804d37a:	d146      	bne.n	804d40a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 804d37c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 804d37e:	7e3b      	ldrb	r3, [r7, #24]
 804d380:	2b00      	cmp	r3, #0
 804d382:	d02b      	beq.n	804d3dc <lwip_netconn_do_writemore+0x294>
 804d384:	687b      	ldr	r3, [r7, #4]
 804d386:	6a1b      	ldr	r3, [r3, #32]
 804d388:	699a      	ldr	r2, [r3, #24]
 804d38a:	687b      	ldr	r3, [r7, #4]
 804d38c:	6a1b      	ldr	r3, [r3, #32]
 804d38e:	695b      	ldr	r3, [r3, #20]
 804d390:	429a      	cmp	r2, r3
 804d392:	d223      	bcs.n	804d3dc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 804d394:	687b      	ldr	r3, [r7, #4]
 804d396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804d398:	2b00      	cmp	r3, #0
 804d39a:	d005      	beq.n	804d3a8 <lwip_netconn_do_writemore+0x260>
 804d39c:	687b      	ldr	r3, [r7, #4]
 804d39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804d3a0:	2200      	movs	r2, #0
 804d3a2:	2103      	movs	r1, #3
 804d3a4:	6878      	ldr	r0, [r7, #4]
 804d3a6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 804d3a8:	687b      	ldr	r3, [r7, #4]
 804d3aa:	7f1b      	ldrb	r3, [r3, #28]
 804d3ac:	f043 0310 	orr.w	r3, r3, #16
 804d3b0:	b2da      	uxtb	r2, r3
 804d3b2:	687b      	ldr	r3, [r7, #4]
 804d3b4:	771a      	strb	r2, [r3, #28]
 804d3b6:	e028      	b.n	804d40a <lwip_netconn_do_writemore+0x2c2>
 804d3b8:	0805a678 	.word	0x0805a678
 804d3bc:	0805a7d0 	.word	0x0805a7d0
 804d3c0:	0805a6bc 	.word	0x0805a6bc
 804d3c4:	0805aad8 	.word	0x0805aad8
 804d3c8:	0805a7e0 	.word	0x0805a7e0
 804d3cc:	0805aaf8 	.word	0x0805aaf8
 804d3d0:	0805ab10 	.word	0x0805ab10
 804d3d4:	0805ab50 	.word	0x0805ab50
 804d3d8:	0805ab78 	.word	0x0805ab78
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 804d3dc:	687b      	ldr	r3, [r7, #4]
 804d3de:	685b      	ldr	r3, [r3, #4]
 804d3e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 804d3e4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 804d3e8:	d305      	bcc.n	804d3f6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 804d3ea:	687b      	ldr	r3, [r7, #4]
 804d3ec:	685b      	ldr	r3, [r3, #4]
 804d3ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 804d3f2:	2b04      	cmp	r3, #4
 804d3f4:	d909      	bls.n	804d40a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 804d3f6:	687b      	ldr	r3, [r7, #4]
 804d3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804d3fa:	2b00      	cmp	r3, #0
 804d3fc:	d005      	beq.n	804d40a <lwip_netconn_do_writemore+0x2c2>
 804d3fe:	687b      	ldr	r3, [r7, #4]
 804d400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804d402:	2200      	movs	r2, #0
 804d404:	2103      	movs	r1, #3
 804d406:	6878      	ldr	r0, [r7, #4]
 804d408:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 804d40a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 804d40e:	2b00      	cmp	r3, #0
 804d410:	d11d      	bne.n	804d44e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 804d412:	687b      	ldr	r3, [r7, #4]
 804d414:	6a1b      	ldr	r3, [r3, #32]
 804d416:	699a      	ldr	r2, [r3, #24]
 804d418:	687b      	ldr	r3, [r7, #4]
 804d41a:	6a1b      	ldr	r3, [r3, #32]
 804d41c:	695b      	ldr	r3, [r3, #20]
 804d41e:	429a      	cmp	r2, r3
 804d420:	d002      	beq.n	804d428 <lwip_netconn_do_writemore+0x2e0>
 804d422:	7e3b      	ldrb	r3, [r7, #24]
 804d424:	2b00      	cmp	r3, #0
 804d426:	d001      	beq.n	804d42c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 804d428:	2301      	movs	r3, #1
 804d42a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 804d42c:	687b      	ldr	r3, [r7, #4]
 804d42e:	685b      	ldr	r3, [r3, #4]
 804d430:	4618      	mov	r0, r3
 804d432:	f007 fb11 	bl	8054a58 <tcp_output>
 804d436:	4603      	mov	r3, r0
 804d438:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 804d43a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 804d43e:	f113 0f04 	cmn.w	r3, #4
 804d442:	d12c      	bne.n	804d49e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 804d444:	7b3b      	ldrb	r3, [r7, #12]
 804d446:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 804d448:	2301      	movs	r3, #1
 804d44a:	76fb      	strb	r3, [r7, #27]
 804d44c:	e027      	b.n	804d49e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 804d44e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 804d452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804d456:	d120      	bne.n	804d49a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 804d458:	687b      	ldr	r3, [r7, #4]
 804d45a:	685b      	ldr	r3, [r3, #4]
 804d45c:	4618      	mov	r0, r3
 804d45e:	f007 fafb 	bl	8054a58 <tcp_output>
 804d462:	4603      	mov	r3, r0
 804d464:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 804d466:	f997 300d 	ldrsb.w	r3, [r7, #13]
 804d46a:	f113 0f04 	cmn.w	r3, #4
 804d46e:	d104      	bne.n	804d47a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 804d470:	7b7b      	ldrb	r3, [r7, #13]
 804d472:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 804d474:	2301      	movs	r3, #1
 804d476:	76fb      	strb	r3, [r7, #27]
 804d478:	e011      	b.n	804d49e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 804d47a:	7e3b      	ldrb	r3, [r7, #24]
 804d47c:	2b00      	cmp	r3, #0
 804d47e:	d00e      	beq.n	804d49e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 804d480:	687b      	ldr	r3, [r7, #4]
 804d482:	6a1b      	ldr	r3, [r3, #32]
 804d484:	699b      	ldr	r3, [r3, #24]
 804d486:	2b00      	cmp	r3, #0
 804d488:	d102      	bne.n	804d490 <lwip_netconn_do_writemore+0x348>
 804d48a:	f06f 0306 	mvn.w	r3, #6
 804d48e:	e000      	b.n	804d492 <lwip_netconn_do_writemore+0x34a>
 804d490:	2300      	movs	r3, #0
 804d492:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 804d494:	2301      	movs	r3, #1
 804d496:	76fb      	strb	r3, [r7, #27]
 804d498:	e001      	b.n	804d49e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 804d49a:	2301      	movs	r3, #1
 804d49c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 804d49e:	7efb      	ldrb	r3, [r7, #27]
 804d4a0:	2b00      	cmp	r3, #0
 804d4a2:	d015      	beq.n	804d4d0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 804d4a4:	687b      	ldr	r3, [r7, #4]
 804d4a6:	6a1b      	ldr	r3, [r3, #32]
 804d4a8:	681b      	ldr	r3, [r3, #0]
 804d4aa:	330c      	adds	r3, #12
 804d4ac:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 804d4ae:	687b      	ldr	r3, [r7, #4]
 804d4b0:	6a1b      	ldr	r3, [r3, #32]
 804d4b2:	7ffa      	ldrb	r2, [r7, #31]
 804d4b4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 804d4b6:	687b      	ldr	r3, [r7, #4]
 804d4b8:	2200      	movs	r2, #0
 804d4ba:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 804d4bc:	687b      	ldr	r3, [r7, #4]
 804d4be:	2200      	movs	r2, #0
 804d4c0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 804d4c2:	78fb      	ldrb	r3, [r7, #3]
 804d4c4:	2b00      	cmp	r3, #0
 804d4c6:	d006      	beq.n	804d4d6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 804d4c8:	68b8      	ldr	r0, [r7, #8]
 804d4ca:	f00b fa9b 	bl	8058a04 <sys_sem_signal>
 804d4ce:	e002      	b.n	804d4d6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 804d4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d4d4:	e000      	b.n	804d4d8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 804d4d6:	2300      	movs	r3, #0
}
 804d4d8:	4618      	mov	r0, r3
 804d4da:	3720      	adds	r7, #32
 804d4dc:	46bd      	mov	sp, r7
 804d4de:	bd80      	pop	{r7, pc}

0804d4e0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 804d4e0:	b580      	push	{r7, lr}
 804d4e2:	b084      	sub	sp, #16
 804d4e4:	af00      	add	r7, sp, #0
 804d4e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804d4e8:	687b      	ldr	r3, [r7, #4]
 804d4ea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 804d4ec:	68bb      	ldr	r3, [r7, #8]
 804d4ee:	681b      	ldr	r3, [r3, #0]
 804d4f0:	4618      	mov	r0, r3
 804d4f2:	f7fe fd1c 	bl	804bf2e <netconn_err>
 804d4f6:	4603      	mov	r3, r0
 804d4f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 804d4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804d4fe:	2b00      	cmp	r3, #0
 804d500:	d166      	bne.n	804d5d0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 804d502:	68bb      	ldr	r3, [r7, #8]
 804d504:	681b      	ldr	r3, [r3, #0]
 804d506:	781b      	ldrb	r3, [r3, #0]
 804d508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804d50c:	2b10      	cmp	r3, #16
 804d50e:	d15d      	bne.n	804d5cc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 804d510:	68bb      	ldr	r3, [r7, #8]
 804d512:	681b      	ldr	r3, [r3, #0]
 804d514:	785b      	ldrb	r3, [r3, #1]
 804d516:	2b00      	cmp	r3, #0
 804d518:	d002      	beq.n	804d520 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 804d51a:	23fb      	movs	r3, #251	; 0xfb
 804d51c:	73fb      	strb	r3, [r7, #15]
 804d51e:	e057      	b.n	804d5d0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 804d520:	68bb      	ldr	r3, [r7, #8]
 804d522:	681b      	ldr	r3, [r3, #0]
 804d524:	685b      	ldr	r3, [r3, #4]
 804d526:	2b00      	cmp	r3, #0
 804d528:	d04d      	beq.n	804d5c6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 804d52a:	68bb      	ldr	r3, [r7, #8]
 804d52c:	681b      	ldr	r3, [r3, #0]
 804d52e:	2201      	movs	r2, #1
 804d530:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 804d532:	68bb      	ldr	r3, [r7, #8]
 804d534:	681b      	ldr	r3, [r3, #0]
 804d536:	6a1b      	ldr	r3, [r3, #32]
 804d538:	2b00      	cmp	r3, #0
 804d53a:	d006      	beq.n	804d54a <lwip_netconn_do_write+0x6a>
 804d53c:	4b28      	ldr	r3, [pc, #160]	; (804d5e0 <lwip_netconn_do_write+0x100>)
 804d53e:	f240 7223 	movw	r2, #1827	; 0x723
 804d542:	4928      	ldr	r1, [pc, #160]	; (804d5e4 <lwip_netconn_do_write+0x104>)
 804d544:	4828      	ldr	r0, [pc, #160]	; (804d5e8 <lwip_netconn_do_write+0x108>)
 804d546:	f00b fd75 	bl	8059034 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 804d54a:	68bb      	ldr	r3, [r7, #8]
 804d54c:	695b      	ldr	r3, [r3, #20]
 804d54e:	2b00      	cmp	r3, #0
 804d550:	d106      	bne.n	804d560 <lwip_netconn_do_write+0x80>
 804d552:	4b23      	ldr	r3, [pc, #140]	; (804d5e0 <lwip_netconn_do_write+0x100>)
 804d554:	f240 7224 	movw	r2, #1828	; 0x724
 804d558:	4924      	ldr	r1, [pc, #144]	; (804d5ec <lwip_netconn_do_write+0x10c>)
 804d55a:	4823      	ldr	r0, [pc, #140]	; (804d5e8 <lwip_netconn_do_write+0x108>)
 804d55c:	f00b fd6a 	bl	8059034 <iprintf>
        msg->conn->current_msg = msg;
 804d560:	68bb      	ldr	r3, [r7, #8]
 804d562:	681b      	ldr	r3, [r3, #0]
 804d564:	68ba      	ldr	r2, [r7, #8]
 804d566:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 804d568:	68bb      	ldr	r3, [r7, #8]
 804d56a:	681b      	ldr	r3, [r3, #0]
 804d56c:	2100      	movs	r1, #0
 804d56e:	4618      	mov	r0, r3
 804d570:	f7ff fdea 	bl	804d148 <lwip_netconn_do_writemore>
 804d574:	4603      	mov	r3, r0
 804d576:	2b00      	cmp	r3, #0
 804d578:	d02e      	beq.n	804d5d8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 804d57a:	68bb      	ldr	r3, [r7, #8]
 804d57c:	681b      	ldr	r3, [r3, #0]
 804d57e:	785b      	ldrb	r3, [r3, #1]
 804d580:	2b01      	cmp	r3, #1
 804d582:	d006      	beq.n	804d592 <lwip_netconn_do_write+0xb2>
 804d584:	4b16      	ldr	r3, [pc, #88]	; (804d5e0 <lwip_netconn_do_write+0x100>)
 804d586:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 804d58a:	4919      	ldr	r1, [pc, #100]	; (804d5f0 <lwip_netconn_do_write+0x110>)
 804d58c:	4816      	ldr	r0, [pc, #88]	; (804d5e8 <lwip_netconn_do_write+0x108>)
 804d58e:	f00b fd51 	bl	8059034 <iprintf>
          UNLOCK_TCPIP_CORE();
 804d592:	4818      	ldr	r0, [pc, #96]	; (804d5f4 <lwip_netconn_do_write+0x114>)
 804d594:	f00b faa7 	bl	8058ae6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 804d598:	68bb      	ldr	r3, [r7, #8]
 804d59a:	681b      	ldr	r3, [r3, #0]
 804d59c:	330c      	adds	r3, #12
 804d59e:	2100      	movs	r1, #0
 804d5a0:	4618      	mov	r0, r3
 804d5a2:	f00b f9fe 	bl	80589a2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 804d5a6:	4813      	ldr	r0, [pc, #76]	; (804d5f4 <lwip_netconn_do_write+0x114>)
 804d5a8:	f00b fa8e 	bl	8058ac8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 804d5ac:	68bb      	ldr	r3, [r7, #8]
 804d5ae:	681b      	ldr	r3, [r3, #0]
 804d5b0:	785b      	ldrb	r3, [r3, #1]
 804d5b2:	2b01      	cmp	r3, #1
 804d5b4:	d110      	bne.n	804d5d8 <lwip_netconn_do_write+0xf8>
 804d5b6:	4b0a      	ldr	r3, [pc, #40]	; (804d5e0 <lwip_netconn_do_write+0x100>)
 804d5b8:	f240 722c 	movw	r2, #1836	; 0x72c
 804d5bc:	490c      	ldr	r1, [pc, #48]	; (804d5f0 <lwip_netconn_do_write+0x110>)
 804d5be:	480a      	ldr	r0, [pc, #40]	; (804d5e8 <lwip_netconn_do_write+0x108>)
 804d5c0:	f00b fd38 	bl	8059034 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 804d5c4:	e008      	b.n	804d5d8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 804d5c6:	23f5      	movs	r3, #245	; 0xf5
 804d5c8:	73fb      	strb	r3, [r7, #15]
 804d5ca:	e001      	b.n	804d5d0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 804d5cc:	23fa      	movs	r3, #250	; 0xfa
 804d5ce:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 804d5d0:	68bb      	ldr	r3, [r7, #8]
 804d5d2:	7bfa      	ldrb	r2, [r7, #15]
 804d5d4:	711a      	strb	r2, [r3, #4]
 804d5d6:	e000      	b.n	804d5da <lwip_netconn_do_write+0xfa>
        return;
 804d5d8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 804d5da:	3710      	adds	r7, #16
 804d5dc:	46bd      	mov	sp, r7
 804d5de:	bd80      	pop	{r7, pc}
 804d5e0:	0805a678 	.word	0x0805a678
 804d5e4:	0805aa1c 	.word	0x0805aa1c
 804d5e8:	0805a6bc 	.word	0x0805a6bc
 804d5ec:	0805aba4 	.word	0x0805aba4
 804d5f0:	0805aa38 	.word	0x0805aa38
 804d5f4:	20005cb4 	.word	0x20005cb4

0804d5f8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 804d5f8:	b580      	push	{r7, lr}
 804d5fa:	b084      	sub	sp, #16
 804d5fc:	af00      	add	r7, sp, #0
 804d5fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 804d600:	687b      	ldr	r3, [r7, #4]
 804d602:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 804d604:	68fb      	ldr	r3, [r7, #12]
 804d606:	681b      	ldr	r3, [r3, #0]
 804d608:	785b      	ldrb	r3, [r3, #1]
 804d60a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 804d60c:	68fb      	ldr	r3, [r7, #12]
 804d60e:	681b      	ldr	r3, [r3, #0]
 804d610:	685b      	ldr	r3, [r3, #4]
 804d612:	2b00      	cmp	r3, #0
 804d614:	d069      	beq.n	804d6ea <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 804d616:	68fb      	ldr	r3, [r7, #12]
 804d618:	681b      	ldr	r3, [r3, #0]
 804d61a:	781b      	ldrb	r3, [r3, #0]
 804d61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 804d620:	2b10      	cmp	r3, #16
 804d622:	d162      	bne.n	804d6ea <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 804d624:	68fb      	ldr	r3, [r7, #12]
 804d626:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 804d628:	2b03      	cmp	r3, #3
 804d62a:	d002      	beq.n	804d632 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 804d62c:	7afb      	ldrb	r3, [r7, #11]
 804d62e:	2b02      	cmp	r3, #2
 804d630:	d05b      	beq.n	804d6ea <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 804d632:	7afb      	ldrb	r3, [r7, #11]
 804d634:	2b03      	cmp	r3, #3
 804d636:	d103      	bne.n	804d640 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 804d638:	68fb      	ldr	r3, [r7, #12]
 804d63a:	22f5      	movs	r2, #245	; 0xf5
 804d63c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 804d63e:	e059      	b.n	804d6f4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 804d640:	7afb      	ldrb	r3, [r7, #11]
 804d642:	2b01      	cmp	r3, #1
 804d644:	d103      	bne.n	804d64e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 804d646:	68fb      	ldr	r3, [r7, #12]
 804d648:	22fb      	movs	r2, #251	; 0xfb
 804d64a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 804d64c:	e052      	b.n	804d6f4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 804d64e:	68fb      	ldr	r3, [r7, #12]
 804d650:	7a1b      	ldrb	r3, [r3, #8]
 804d652:	f003 0301 	and.w	r3, r3, #1
 804d656:	2b00      	cmp	r3, #0
 804d658:	d004      	beq.n	804d664 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 804d65a:	68fb      	ldr	r3, [r7, #12]
 804d65c:	681b      	ldr	r3, [r3, #0]
 804d65e:	4618      	mov	r0, r3
 804d660:	f7ff f99e 	bl	804c9a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 804d664:	68fb      	ldr	r3, [r7, #12]
 804d666:	681b      	ldr	r3, [r3, #0]
 804d668:	6a1b      	ldr	r3, [r3, #32]
 804d66a:	2b00      	cmp	r3, #0
 804d66c:	d006      	beq.n	804d67c <lwip_netconn_do_close+0x84>
 804d66e:	4b23      	ldr	r3, [pc, #140]	; (804d6fc <lwip_netconn_do_close+0x104>)
 804d670:	f240 72bd 	movw	r2, #1981	; 0x7bd
 804d674:	4922      	ldr	r1, [pc, #136]	; (804d700 <lwip_netconn_do_close+0x108>)
 804d676:	4823      	ldr	r0, [pc, #140]	; (804d704 <lwip_netconn_do_close+0x10c>)
 804d678:	f00b fcdc 	bl	8059034 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 804d67c:	68fb      	ldr	r3, [r7, #12]
 804d67e:	681b      	ldr	r3, [r3, #0]
 804d680:	2204      	movs	r2, #4
 804d682:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 804d684:	68fb      	ldr	r3, [r7, #12]
 804d686:	681b      	ldr	r3, [r3, #0]
 804d688:	68fa      	ldr	r2, [r7, #12]
 804d68a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 804d68c:	68fb      	ldr	r3, [r7, #12]
 804d68e:	681b      	ldr	r3, [r3, #0]
 804d690:	2100      	movs	r1, #0
 804d692:	4618      	mov	r0, r3
 804d694:	f7ff fa02 	bl	804ca9c <lwip_netconn_do_close_internal>
 804d698:	4603      	mov	r3, r0
 804d69a:	2b00      	cmp	r3, #0
 804d69c:	d029      	beq.n	804d6f2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 804d69e:	68fb      	ldr	r3, [r7, #12]
 804d6a0:	681b      	ldr	r3, [r3, #0]
 804d6a2:	785b      	ldrb	r3, [r3, #1]
 804d6a4:	2b04      	cmp	r3, #4
 804d6a6:	d006      	beq.n	804d6b6 <lwip_netconn_do_close+0xbe>
 804d6a8:	4b14      	ldr	r3, [pc, #80]	; (804d6fc <lwip_netconn_do_close+0x104>)
 804d6aa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 804d6ae:	4916      	ldr	r1, [pc, #88]	; (804d708 <lwip_netconn_do_close+0x110>)
 804d6b0:	4814      	ldr	r0, [pc, #80]	; (804d704 <lwip_netconn_do_close+0x10c>)
 804d6b2:	f00b fcbf 	bl	8059034 <iprintf>
        UNLOCK_TCPIP_CORE();
 804d6b6:	4815      	ldr	r0, [pc, #84]	; (804d70c <lwip_netconn_do_close+0x114>)
 804d6b8:	f00b fa15 	bl	8058ae6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 804d6bc:	68fb      	ldr	r3, [r7, #12]
 804d6be:	681b      	ldr	r3, [r3, #0]
 804d6c0:	330c      	adds	r3, #12
 804d6c2:	2100      	movs	r1, #0
 804d6c4:	4618      	mov	r0, r3
 804d6c6:	f00b f96c 	bl	80589a2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 804d6ca:	4810      	ldr	r0, [pc, #64]	; (804d70c <lwip_netconn_do_close+0x114>)
 804d6cc:	f00b f9fc 	bl	8058ac8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 804d6d0:	68fb      	ldr	r3, [r7, #12]
 804d6d2:	681b      	ldr	r3, [r3, #0]
 804d6d4:	785b      	ldrb	r3, [r3, #1]
 804d6d6:	2b00      	cmp	r3, #0
 804d6d8:	d00b      	beq.n	804d6f2 <lwip_netconn_do_close+0xfa>
 804d6da:	4b08      	ldr	r3, [pc, #32]	; (804d6fc <lwip_netconn_do_close+0x104>)
 804d6dc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 804d6e0:	4909      	ldr	r1, [pc, #36]	; (804d708 <lwip_netconn_do_close+0x110>)
 804d6e2:	4808      	ldr	r0, [pc, #32]	; (804d704 <lwip_netconn_do_close+0x10c>)
 804d6e4:	f00b fca6 	bl	8059034 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 804d6e8:	e003      	b.n	804d6f2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 804d6ea:	68fb      	ldr	r3, [r7, #12]
 804d6ec:	22f5      	movs	r2, #245	; 0xf5
 804d6ee:	711a      	strb	r2, [r3, #4]
 804d6f0:	e000      	b.n	804d6f4 <lwip_netconn_do_close+0xfc>
      return;
 804d6f2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 804d6f4:	3710      	adds	r7, #16
 804d6f6:	46bd      	mov	sp, r7
 804d6f8:	bd80      	pop	{r7, pc}
 804d6fa:	bf00      	nop
 804d6fc:	0805a678 	.word	0x0805a678
 804d700:	0805aa1c 	.word	0x0805aa1c
 804d704:	0805a6bc 	.word	0x0805a6bc
 804d708:	0805aa38 	.word	0x0805aa38
 804d70c:	20005cb4 	.word	0x20005cb4

0804d710 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 804d710:	b580      	push	{r7, lr}
 804d712:	b082      	sub	sp, #8
 804d714:	af00      	add	r7, sp, #0
 804d716:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 804d718:	687b      	ldr	r3, [r7, #4]
 804d71a:	2b00      	cmp	r3, #0
 804d71c:	d013      	beq.n	804d746 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 804d71e:	687b      	ldr	r3, [r7, #4]
 804d720:	681b      	ldr	r3, [r3, #0]
 804d722:	2b00      	cmp	r3, #0
 804d724:	d00b      	beq.n	804d73e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 804d726:	687b      	ldr	r3, [r7, #4]
 804d728:	681b      	ldr	r3, [r3, #0]
 804d72a:	4618      	mov	r0, r3
 804d72c:	f001 fdea 	bl	804f304 <pbuf_free>
      buf->p = buf->ptr = NULL;
 804d730:	687b      	ldr	r3, [r7, #4]
 804d732:	2200      	movs	r2, #0
 804d734:	605a      	str	r2, [r3, #4]
 804d736:	687b      	ldr	r3, [r7, #4]
 804d738:	685a      	ldr	r2, [r3, #4]
 804d73a:	687b      	ldr	r3, [r7, #4]
 804d73c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 804d73e:	6879      	ldr	r1, [r7, #4]
 804d740:	2006      	movs	r0, #6
 804d742:	f000 ff3b 	bl	804e5bc <memp_free>
  }
}
 804d746:	bf00      	nop
 804d748:	3708      	adds	r7, #8
 804d74a:	46bd      	mov	sp, r7
 804d74c:	bd80      	pop	{r7, pc}
	...

0804d750 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 804d750:	b580      	push	{r7, lr}
 804d752:	b082      	sub	sp, #8
 804d754:	af00      	add	r7, sp, #0
 804d756:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 804d758:	687b      	ldr	r3, [r7, #4]
 804d75a:	2b00      	cmp	r3, #0
 804d75c:	d108      	bne.n	804d770 <netbuf_next+0x20>
 804d75e:	4b11      	ldr	r3, [pc, #68]	; (804d7a4 <netbuf_next+0x54>)
 804d760:	22e0      	movs	r2, #224	; 0xe0
 804d762:	4911      	ldr	r1, [pc, #68]	; (804d7a8 <netbuf_next+0x58>)
 804d764:	4811      	ldr	r0, [pc, #68]	; (804d7ac <netbuf_next+0x5c>)
 804d766:	f00b fc65 	bl	8059034 <iprintf>
 804d76a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d76e:	e014      	b.n	804d79a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 804d770:	687b      	ldr	r3, [r7, #4]
 804d772:	685b      	ldr	r3, [r3, #4]
 804d774:	681b      	ldr	r3, [r3, #0]
 804d776:	2b00      	cmp	r3, #0
 804d778:	d102      	bne.n	804d780 <netbuf_next+0x30>
    return -1;
 804d77a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d77e:	e00c      	b.n	804d79a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 804d780:	687b      	ldr	r3, [r7, #4]
 804d782:	685b      	ldr	r3, [r3, #4]
 804d784:	681a      	ldr	r2, [r3, #0]
 804d786:	687b      	ldr	r3, [r7, #4]
 804d788:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 804d78a:	687b      	ldr	r3, [r7, #4]
 804d78c:	685b      	ldr	r3, [r3, #4]
 804d78e:	681b      	ldr	r3, [r3, #0]
 804d790:	2b00      	cmp	r3, #0
 804d792:	d101      	bne.n	804d798 <netbuf_next+0x48>
    return 1;
 804d794:	2301      	movs	r3, #1
 804d796:	e000      	b.n	804d79a <netbuf_next+0x4a>
  }
  return 0;
 804d798:	2300      	movs	r3, #0
}
 804d79a:	4618      	mov	r0, r3
 804d79c:	3708      	adds	r7, #8
 804d79e:	46bd      	mov	sp, r7
 804d7a0:	bd80      	pop	{r7, pc}
 804d7a2:	bf00      	nop
 804d7a4:	0805abd0 	.word	0x0805abd0
 804d7a8:	0805ad30 	.word	0x0805ad30
 804d7ac:	0805ac20 	.word	0x0805ac20

0804d7b0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 804d7b0:	b580      	push	{r7, lr}
 804d7b2:	b084      	sub	sp, #16
 804d7b4:	af00      	add	r7, sp, #0
 804d7b6:	6078      	str	r0, [r7, #4]
 804d7b8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 804d7ba:	f008 fa05 	bl	8055bc8 <sys_timeouts_sleeptime>
 804d7be:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 804d7c0:	68fb      	ldr	r3, [r7, #12]
 804d7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804d7c6:	d10b      	bne.n	804d7e0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 804d7c8:	4813      	ldr	r0, [pc, #76]	; (804d818 <tcpip_timeouts_mbox_fetch+0x68>)
 804d7ca:	f00b f98c 	bl	8058ae6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 804d7ce:	2200      	movs	r2, #0
 804d7d0:	6839      	ldr	r1, [r7, #0]
 804d7d2:	6878      	ldr	r0, [r7, #4]
 804d7d4:	f00b f844 	bl	8058860 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 804d7d8:	480f      	ldr	r0, [pc, #60]	; (804d818 <tcpip_timeouts_mbox_fetch+0x68>)
 804d7da:	f00b f975 	bl	8058ac8 <sys_mutex_lock>
    return;
 804d7de:	e018      	b.n	804d812 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 804d7e0:	68fb      	ldr	r3, [r7, #12]
 804d7e2:	2b00      	cmp	r3, #0
 804d7e4:	d102      	bne.n	804d7ec <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 804d7e6:	f008 f9b5 	bl	8055b54 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 804d7ea:	e7e6      	b.n	804d7ba <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 804d7ec:	480a      	ldr	r0, [pc, #40]	; (804d818 <tcpip_timeouts_mbox_fetch+0x68>)
 804d7ee:	f00b f97a 	bl	8058ae6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 804d7f2:	68fa      	ldr	r2, [r7, #12]
 804d7f4:	6839      	ldr	r1, [r7, #0]
 804d7f6:	6878      	ldr	r0, [r7, #4]
 804d7f8:	f00b f832 	bl	8058860 <sys_arch_mbox_fetch>
 804d7fc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 804d7fe:	4806      	ldr	r0, [pc, #24]	; (804d818 <tcpip_timeouts_mbox_fetch+0x68>)
 804d800:	f00b f962 	bl	8058ac8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 804d804:	68bb      	ldr	r3, [r7, #8]
 804d806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804d80a:	d102      	bne.n	804d812 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 804d80c:	f008 f9a2 	bl	8055b54 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 804d810:	e7d3      	b.n	804d7ba <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 804d812:	3710      	adds	r7, #16
 804d814:	46bd      	mov	sp, r7
 804d816:	bd80      	pop	{r7, pc}
 804d818:	20005cb4 	.word	0x20005cb4

0804d81c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 804d81c:	b580      	push	{r7, lr}
 804d81e:	b084      	sub	sp, #16
 804d820:	af00      	add	r7, sp, #0
 804d822:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 804d824:	4810      	ldr	r0, [pc, #64]	; (804d868 <tcpip_thread+0x4c>)
 804d826:	f00b f94f 	bl	8058ac8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 804d82a:	4b10      	ldr	r3, [pc, #64]	; (804d86c <tcpip_thread+0x50>)
 804d82c:	681b      	ldr	r3, [r3, #0]
 804d82e:	2b00      	cmp	r3, #0
 804d830:	d005      	beq.n	804d83e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 804d832:	4b0e      	ldr	r3, [pc, #56]	; (804d86c <tcpip_thread+0x50>)
 804d834:	681b      	ldr	r3, [r3, #0]
 804d836:	4a0e      	ldr	r2, [pc, #56]	; (804d870 <tcpip_thread+0x54>)
 804d838:	6812      	ldr	r2, [r2, #0]
 804d83a:	4610      	mov	r0, r2
 804d83c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 804d83e:	f107 030c 	add.w	r3, r7, #12
 804d842:	4619      	mov	r1, r3
 804d844:	480b      	ldr	r0, [pc, #44]	; (804d874 <tcpip_thread+0x58>)
 804d846:	f7ff ffb3 	bl	804d7b0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 804d84a:	68fb      	ldr	r3, [r7, #12]
 804d84c:	2b00      	cmp	r3, #0
 804d84e:	d106      	bne.n	804d85e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 804d850:	4b09      	ldr	r3, [pc, #36]	; (804d878 <tcpip_thread+0x5c>)
 804d852:	2291      	movs	r2, #145	; 0x91
 804d854:	4909      	ldr	r1, [pc, #36]	; (804d87c <tcpip_thread+0x60>)
 804d856:	480a      	ldr	r0, [pc, #40]	; (804d880 <tcpip_thread+0x64>)
 804d858:	f00b fbec 	bl	8059034 <iprintf>
      continue;
 804d85c:	e003      	b.n	804d866 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 804d85e:	68fb      	ldr	r3, [r7, #12]
 804d860:	4618      	mov	r0, r3
 804d862:	f000 f80f 	bl	804d884 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 804d866:	e7ea      	b.n	804d83e <tcpip_thread+0x22>
 804d868:	20005cb4 	.word	0x20005cb4
 804d86c:	20005ca8 	.word	0x20005ca8
 804d870:	20005cac 	.word	0x20005cac
 804d874:	20005cb0 	.word	0x20005cb0
 804d878:	0805ad68 	.word	0x0805ad68
 804d87c:	0805ad98 	.word	0x0805ad98
 804d880:	0805adb8 	.word	0x0805adb8

0804d884 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 804d884:	b580      	push	{r7, lr}
 804d886:	b082      	sub	sp, #8
 804d888:	af00      	add	r7, sp, #0
 804d88a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 804d88c:	687b      	ldr	r3, [r7, #4]
 804d88e:	781b      	ldrb	r3, [r3, #0]
 804d890:	2b02      	cmp	r3, #2
 804d892:	d026      	beq.n	804d8e2 <tcpip_thread_handle_msg+0x5e>
 804d894:	2b02      	cmp	r3, #2
 804d896:	dc2b      	bgt.n	804d8f0 <tcpip_thread_handle_msg+0x6c>
 804d898:	2b00      	cmp	r3, #0
 804d89a:	d002      	beq.n	804d8a2 <tcpip_thread_handle_msg+0x1e>
 804d89c:	2b01      	cmp	r3, #1
 804d89e:	d015      	beq.n	804d8cc <tcpip_thread_handle_msg+0x48>
 804d8a0:	e026      	b.n	804d8f0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 804d8a2:	687b      	ldr	r3, [r7, #4]
 804d8a4:	68db      	ldr	r3, [r3, #12]
 804d8a6:	687a      	ldr	r2, [r7, #4]
 804d8a8:	6850      	ldr	r0, [r2, #4]
 804d8aa:	687a      	ldr	r2, [r7, #4]
 804d8ac:	6892      	ldr	r2, [r2, #8]
 804d8ae:	4611      	mov	r1, r2
 804d8b0:	4798      	blx	r3
 804d8b2:	4603      	mov	r3, r0
 804d8b4:	2b00      	cmp	r3, #0
 804d8b6:	d004      	beq.n	804d8c2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 804d8b8:	687b      	ldr	r3, [r7, #4]
 804d8ba:	685b      	ldr	r3, [r3, #4]
 804d8bc:	4618      	mov	r0, r3
 804d8be:	f001 fd21 	bl	804f304 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 804d8c2:	6879      	ldr	r1, [r7, #4]
 804d8c4:	2009      	movs	r0, #9
 804d8c6:	f000 fe79 	bl	804e5bc <memp_free>
      break;
 804d8ca:	e018      	b.n	804d8fe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 804d8cc:	687b      	ldr	r3, [r7, #4]
 804d8ce:	685b      	ldr	r3, [r3, #4]
 804d8d0:	687a      	ldr	r2, [r7, #4]
 804d8d2:	6892      	ldr	r2, [r2, #8]
 804d8d4:	4610      	mov	r0, r2
 804d8d6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 804d8d8:	6879      	ldr	r1, [r7, #4]
 804d8da:	2008      	movs	r0, #8
 804d8dc:	f000 fe6e 	bl	804e5bc <memp_free>
      break;
 804d8e0:	e00d      	b.n	804d8fe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 804d8e2:	687b      	ldr	r3, [r7, #4]
 804d8e4:	685b      	ldr	r3, [r3, #4]
 804d8e6:	687a      	ldr	r2, [r7, #4]
 804d8e8:	6892      	ldr	r2, [r2, #8]
 804d8ea:	4610      	mov	r0, r2
 804d8ec:	4798      	blx	r3
      break;
 804d8ee:	e006      	b.n	804d8fe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 804d8f0:	4b05      	ldr	r3, [pc, #20]	; (804d908 <tcpip_thread_handle_msg+0x84>)
 804d8f2:	22cf      	movs	r2, #207	; 0xcf
 804d8f4:	4905      	ldr	r1, [pc, #20]	; (804d90c <tcpip_thread_handle_msg+0x88>)
 804d8f6:	4806      	ldr	r0, [pc, #24]	; (804d910 <tcpip_thread_handle_msg+0x8c>)
 804d8f8:	f00b fb9c 	bl	8059034 <iprintf>
      break;
 804d8fc:	bf00      	nop
  }
}
 804d8fe:	bf00      	nop
 804d900:	3708      	adds	r7, #8
 804d902:	46bd      	mov	sp, r7
 804d904:	bd80      	pop	{r7, pc}
 804d906:	bf00      	nop
 804d908:	0805ad68 	.word	0x0805ad68
 804d90c:	0805ad98 	.word	0x0805ad98
 804d910:	0805adb8 	.word	0x0805adb8

0804d914 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 804d914:	b580      	push	{r7, lr}
 804d916:	b086      	sub	sp, #24
 804d918:	af00      	add	r7, sp, #0
 804d91a:	60f8      	str	r0, [r7, #12]
 804d91c:	60b9      	str	r1, [r7, #8]
 804d91e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 804d920:	481a      	ldr	r0, [pc, #104]	; (804d98c <tcpip_inpkt+0x78>)
 804d922:	f00a fff8 	bl	8058916 <sys_mbox_valid>
 804d926:	4603      	mov	r3, r0
 804d928:	2b00      	cmp	r3, #0
 804d92a:	d105      	bne.n	804d938 <tcpip_inpkt+0x24>
 804d92c:	4b18      	ldr	r3, [pc, #96]	; (804d990 <tcpip_inpkt+0x7c>)
 804d92e:	22fc      	movs	r2, #252	; 0xfc
 804d930:	4918      	ldr	r1, [pc, #96]	; (804d994 <tcpip_inpkt+0x80>)
 804d932:	4819      	ldr	r0, [pc, #100]	; (804d998 <tcpip_inpkt+0x84>)
 804d934:	f00b fb7e 	bl	8059034 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 804d938:	2009      	movs	r0, #9
 804d93a:	f000 fdc9 	bl	804e4d0 <memp_malloc>
 804d93e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 804d940:	697b      	ldr	r3, [r7, #20]
 804d942:	2b00      	cmp	r3, #0
 804d944:	d102      	bne.n	804d94c <tcpip_inpkt+0x38>
    return ERR_MEM;
 804d946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d94a:	e01a      	b.n	804d982 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 804d94c:	697b      	ldr	r3, [r7, #20]
 804d94e:	2200      	movs	r2, #0
 804d950:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 804d952:	697b      	ldr	r3, [r7, #20]
 804d954:	68fa      	ldr	r2, [r7, #12]
 804d956:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 804d958:	697b      	ldr	r3, [r7, #20]
 804d95a:	68ba      	ldr	r2, [r7, #8]
 804d95c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 804d95e:	697b      	ldr	r3, [r7, #20]
 804d960:	687a      	ldr	r2, [r7, #4]
 804d962:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 804d964:	6979      	ldr	r1, [r7, #20]
 804d966:	4809      	ldr	r0, [pc, #36]	; (804d98c <tcpip_inpkt+0x78>)
 804d968:	f00a ff60 	bl	805882c <sys_mbox_trypost>
 804d96c:	4603      	mov	r3, r0
 804d96e:	2b00      	cmp	r3, #0
 804d970:	d006      	beq.n	804d980 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 804d972:	6979      	ldr	r1, [r7, #20]
 804d974:	2009      	movs	r0, #9
 804d976:	f000 fe21 	bl	804e5bc <memp_free>
    return ERR_MEM;
 804d97a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804d97e:	e000      	b.n	804d982 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 804d980:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 804d982:	4618      	mov	r0, r3
 804d984:	3718      	adds	r7, #24
 804d986:	46bd      	mov	sp, r7
 804d988:	bd80      	pop	{r7, pc}
 804d98a:	bf00      	nop
 804d98c:	20005cb0 	.word	0x20005cb0
 804d990:	0805ad68 	.word	0x0805ad68
 804d994:	0805ade0 	.word	0x0805ade0
 804d998:	0805adb8 	.word	0x0805adb8

0804d99c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 804d99c:	b580      	push	{r7, lr}
 804d99e:	b082      	sub	sp, #8
 804d9a0:	af00      	add	r7, sp, #0
 804d9a2:	6078      	str	r0, [r7, #4]
 804d9a4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 804d9a6:	683b      	ldr	r3, [r7, #0]
 804d9a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804d9ac:	f003 0318 	and.w	r3, r3, #24
 804d9b0:	2b00      	cmp	r3, #0
 804d9b2:	d006      	beq.n	804d9c2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 804d9b4:	4a08      	ldr	r2, [pc, #32]	; (804d9d8 <tcpip_input+0x3c>)
 804d9b6:	6839      	ldr	r1, [r7, #0]
 804d9b8:	6878      	ldr	r0, [r7, #4]
 804d9ba:	f7ff ffab 	bl	804d914 <tcpip_inpkt>
 804d9be:	4603      	mov	r3, r0
 804d9c0:	e005      	b.n	804d9ce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 804d9c2:	4a06      	ldr	r2, [pc, #24]	; (804d9dc <tcpip_input+0x40>)
 804d9c4:	6839      	ldr	r1, [r7, #0]
 804d9c6:	6878      	ldr	r0, [r7, #4]
 804d9c8:	f7ff ffa4 	bl	804d914 <tcpip_inpkt>
 804d9cc:	4603      	mov	r3, r0
}
 804d9ce:	4618      	mov	r0, r3
 804d9d0:	3708      	adds	r7, #8
 804d9d2:	46bd      	mov	sp, r7
 804d9d4:	bd80      	pop	{r7, pc}
 804d9d6:	bf00      	nop
 804d9d8:	08058619 	.word	0x08058619
 804d9dc:	08057521 	.word	0x08057521

0804d9e0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 804d9e0:	b580      	push	{r7, lr}
 804d9e2:	b084      	sub	sp, #16
 804d9e4:	af00      	add	r7, sp, #0
 804d9e6:	6078      	str	r0, [r7, #4]
 804d9e8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 804d9ea:	4819      	ldr	r0, [pc, #100]	; (804da50 <tcpip_try_callback+0x70>)
 804d9ec:	f00a ff93 	bl	8058916 <sys_mbox_valid>
 804d9f0:	4603      	mov	r3, r0
 804d9f2:	2b00      	cmp	r3, #0
 804d9f4:	d106      	bne.n	804da04 <tcpip_try_callback+0x24>
 804d9f6:	4b17      	ldr	r3, [pc, #92]	; (804da54 <tcpip_try_callback+0x74>)
 804d9f8:	f240 125d 	movw	r2, #349	; 0x15d
 804d9fc:	4916      	ldr	r1, [pc, #88]	; (804da58 <tcpip_try_callback+0x78>)
 804d9fe:	4817      	ldr	r0, [pc, #92]	; (804da5c <tcpip_try_callback+0x7c>)
 804da00:	f00b fb18 	bl	8059034 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 804da04:	2008      	movs	r0, #8
 804da06:	f000 fd63 	bl	804e4d0 <memp_malloc>
 804da0a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 804da0c:	68fb      	ldr	r3, [r7, #12]
 804da0e:	2b00      	cmp	r3, #0
 804da10:	d102      	bne.n	804da18 <tcpip_try_callback+0x38>
    return ERR_MEM;
 804da12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804da16:	e017      	b.n	804da48 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 804da18:	68fb      	ldr	r3, [r7, #12]
 804da1a:	2201      	movs	r2, #1
 804da1c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 804da1e:	68fb      	ldr	r3, [r7, #12]
 804da20:	687a      	ldr	r2, [r7, #4]
 804da22:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 804da24:	68fb      	ldr	r3, [r7, #12]
 804da26:	683a      	ldr	r2, [r7, #0]
 804da28:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 804da2a:	68f9      	ldr	r1, [r7, #12]
 804da2c:	4808      	ldr	r0, [pc, #32]	; (804da50 <tcpip_try_callback+0x70>)
 804da2e:	f00a fefd 	bl	805882c <sys_mbox_trypost>
 804da32:	4603      	mov	r3, r0
 804da34:	2b00      	cmp	r3, #0
 804da36:	d006      	beq.n	804da46 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 804da38:	68f9      	ldr	r1, [r7, #12]
 804da3a:	2008      	movs	r0, #8
 804da3c:	f000 fdbe 	bl	804e5bc <memp_free>
    return ERR_MEM;
 804da40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 804da44:	e000      	b.n	804da48 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 804da46:	2300      	movs	r3, #0
}
 804da48:	4618      	mov	r0, r3
 804da4a:	3710      	adds	r7, #16
 804da4c:	46bd      	mov	sp, r7
 804da4e:	bd80      	pop	{r7, pc}
 804da50:	20005cb0 	.word	0x20005cb0
 804da54:	0805ad68 	.word	0x0805ad68
 804da58:	0805ade0 	.word	0x0805ade0
 804da5c:	0805adb8 	.word	0x0805adb8

0804da60 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 804da60:	b580      	push	{r7, lr}
 804da62:	b084      	sub	sp, #16
 804da64:	af00      	add	r7, sp, #0
 804da66:	60f8      	str	r0, [r7, #12]
 804da68:	60b9      	str	r1, [r7, #8]
 804da6a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 804da6c:	4806      	ldr	r0, [pc, #24]	; (804da88 <tcpip_send_msg_wait_sem+0x28>)
 804da6e:	f00b f82b 	bl	8058ac8 <sys_mutex_lock>
  fn(apimsg);
 804da72:	68fb      	ldr	r3, [r7, #12]
 804da74:	68b8      	ldr	r0, [r7, #8]
 804da76:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 804da78:	4803      	ldr	r0, [pc, #12]	; (804da88 <tcpip_send_msg_wait_sem+0x28>)
 804da7a:	f00b f834 	bl	8058ae6 <sys_mutex_unlock>
  return ERR_OK;
 804da7e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 804da80:	4618      	mov	r0, r3
 804da82:	3710      	adds	r7, #16
 804da84:	46bd      	mov	sp, r7
 804da86:	bd80      	pop	{r7, pc}
 804da88:	20005cb4 	.word	0x20005cb4

0804da8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 804da8c:	b580      	push	{r7, lr}
 804da8e:	b084      	sub	sp, #16
 804da90:	af02      	add	r7, sp, #8
 804da92:	6078      	str	r0, [r7, #4]
 804da94:	6039      	str	r1, [r7, #0]
  lwip_init();
 804da96:	f000 f871 	bl	804db7c <lwip_init>

  tcpip_init_done = initfunc;
 804da9a:	4a17      	ldr	r2, [pc, #92]	; (804daf8 <tcpip_init+0x6c>)
 804da9c:	687b      	ldr	r3, [r7, #4]
 804da9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 804daa0:	4a16      	ldr	r2, [pc, #88]	; (804dafc <tcpip_init+0x70>)
 804daa2:	683b      	ldr	r3, [r7, #0]
 804daa4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 804daa6:	2106      	movs	r1, #6
 804daa8:	4815      	ldr	r0, [pc, #84]	; (804db00 <tcpip_init+0x74>)
 804daaa:	f00a fe8b 	bl	80587c4 <sys_mbox_new>
 804daae:	4603      	mov	r3, r0
 804dab0:	2b00      	cmp	r3, #0
 804dab2:	d006      	beq.n	804dac2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 804dab4:	4b13      	ldr	r3, [pc, #76]	; (804db04 <tcpip_init+0x78>)
 804dab6:	f240 2261 	movw	r2, #609	; 0x261
 804daba:	4913      	ldr	r1, [pc, #76]	; (804db08 <tcpip_init+0x7c>)
 804dabc:	4813      	ldr	r0, [pc, #76]	; (804db0c <tcpip_init+0x80>)
 804dabe:	f00b fab9 	bl	8059034 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 804dac2:	4813      	ldr	r0, [pc, #76]	; (804db10 <tcpip_init+0x84>)
 804dac4:	f00a ffe4 	bl	8058a90 <sys_mutex_new>
 804dac8:	4603      	mov	r3, r0
 804daca:	2b00      	cmp	r3, #0
 804dacc:	d006      	beq.n	804dadc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 804dace:	4b0d      	ldr	r3, [pc, #52]	; (804db04 <tcpip_init+0x78>)
 804dad0:	f240 2265 	movw	r2, #613	; 0x265
 804dad4:	490f      	ldr	r1, [pc, #60]	; (804db14 <tcpip_init+0x88>)
 804dad6:	480d      	ldr	r0, [pc, #52]	; (804db0c <tcpip_init+0x80>)
 804dad8:	f00b faac 	bl	8059034 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 804dadc:	2300      	movs	r3, #0
 804dade:	9300      	str	r3, [sp, #0]
 804dae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804dae4:	2200      	movs	r2, #0
 804dae6:	490c      	ldr	r1, [pc, #48]	; (804db18 <tcpip_init+0x8c>)
 804dae8:	480c      	ldr	r0, [pc, #48]	; (804db1c <tcpip_init+0x90>)
 804daea:	f00b f809 	bl	8058b00 <sys_thread_new>
}
 804daee:	bf00      	nop
 804daf0:	3708      	adds	r7, #8
 804daf2:	46bd      	mov	sp, r7
 804daf4:	bd80      	pop	{r7, pc}
 804daf6:	bf00      	nop
 804daf8:	20005ca8 	.word	0x20005ca8
 804dafc:	20005cac 	.word	0x20005cac
 804db00:	20005cb0 	.word	0x20005cb0
 804db04:	0805ad68 	.word	0x0805ad68
 804db08:	0805adf0 	.word	0x0805adf0
 804db0c:	0805adb8 	.word	0x0805adb8
 804db10:	20005cb4 	.word	0x20005cb4
 804db14:	0805ae14 	.word	0x0805ae14
 804db18:	0804d81d 	.word	0x0804d81d
 804db1c:	0805ae38 	.word	0x0805ae38

0804db20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 804db20:	b480      	push	{r7}
 804db22:	b083      	sub	sp, #12
 804db24:	af00      	add	r7, sp, #0
 804db26:	4603      	mov	r3, r0
 804db28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 804db2a:	88fb      	ldrh	r3, [r7, #6]
 804db2c:	021b      	lsls	r3, r3, #8
 804db2e:	b21a      	sxth	r2, r3
 804db30:	88fb      	ldrh	r3, [r7, #6]
 804db32:	0a1b      	lsrs	r3, r3, #8
 804db34:	b29b      	uxth	r3, r3
 804db36:	b21b      	sxth	r3, r3
 804db38:	4313      	orrs	r3, r2
 804db3a:	b21b      	sxth	r3, r3
 804db3c:	b29b      	uxth	r3, r3
}
 804db3e:	4618      	mov	r0, r3
 804db40:	370c      	adds	r7, #12
 804db42:	46bd      	mov	sp, r7
 804db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db48:	4770      	bx	lr

0804db4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 804db4a:	b480      	push	{r7}
 804db4c:	b083      	sub	sp, #12
 804db4e:	af00      	add	r7, sp, #0
 804db50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 804db52:	687b      	ldr	r3, [r7, #4]
 804db54:	061a      	lsls	r2, r3, #24
 804db56:	687b      	ldr	r3, [r7, #4]
 804db58:	021b      	lsls	r3, r3, #8
 804db5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804db5e:	431a      	orrs	r2, r3
 804db60:	687b      	ldr	r3, [r7, #4]
 804db62:	0a1b      	lsrs	r3, r3, #8
 804db64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804db68:	431a      	orrs	r2, r3
 804db6a:	687b      	ldr	r3, [r7, #4]
 804db6c:	0e1b      	lsrs	r3, r3, #24
 804db6e:	4313      	orrs	r3, r2
}
 804db70:	4618      	mov	r0, r3
 804db72:	370c      	adds	r7, #12
 804db74:	46bd      	mov	sp, r7
 804db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db7a:	4770      	bx	lr

0804db7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 804db7c:	b580      	push	{r7, lr}
 804db7e:	b082      	sub	sp, #8
 804db80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 804db82:	2300      	movs	r3, #0
 804db84:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 804db86:	f00a ff75 	bl	8058a74 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 804db8a:	f000 f8d5 	bl	804dd38 <mem_init>
  memp_init();
 804db8e:	f000 fc31 	bl	804e3f4 <memp_init>
  pbuf_init();
  netif_init();
 804db92:	f000 fd3d 	bl	804e610 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 804db96:	f008 f84f 	bl	8055c38 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 804db9a:	f001 fe4d 	bl	804f838 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 804db9e:	f007 ff91 	bl	8055ac4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 804dba2:	bf00      	nop
 804dba4:	3708      	adds	r7, #8
 804dba6:	46bd      	mov	sp, r7
 804dba8:	bd80      	pop	{r7, pc}
	...

0804dbac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 804dbac:	b480      	push	{r7}
 804dbae:	b083      	sub	sp, #12
 804dbb0:	af00      	add	r7, sp, #0
 804dbb2:	4603      	mov	r3, r0
 804dbb4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 804dbb6:	4b05      	ldr	r3, [pc, #20]	; (804dbcc <ptr_to_mem+0x20>)
 804dbb8:	681a      	ldr	r2, [r3, #0]
 804dbba:	88fb      	ldrh	r3, [r7, #6]
 804dbbc:	4413      	add	r3, r2
}
 804dbbe:	4618      	mov	r0, r3
 804dbc0:	370c      	adds	r7, #12
 804dbc2:	46bd      	mov	sp, r7
 804dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dbc8:	4770      	bx	lr
 804dbca:	bf00      	nop
 804dbcc:	200084e4 	.word	0x200084e4

0804dbd0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 804dbd0:	b480      	push	{r7}
 804dbd2:	b083      	sub	sp, #12
 804dbd4:	af00      	add	r7, sp, #0
 804dbd6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 804dbd8:	4b05      	ldr	r3, [pc, #20]	; (804dbf0 <mem_to_ptr+0x20>)
 804dbda:	681b      	ldr	r3, [r3, #0]
 804dbdc:	687a      	ldr	r2, [r7, #4]
 804dbde:	1ad3      	subs	r3, r2, r3
 804dbe0:	b29b      	uxth	r3, r3
}
 804dbe2:	4618      	mov	r0, r3
 804dbe4:	370c      	adds	r7, #12
 804dbe6:	46bd      	mov	sp, r7
 804dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dbec:	4770      	bx	lr
 804dbee:	bf00      	nop
 804dbf0:	200084e4 	.word	0x200084e4

0804dbf4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 804dbf4:	b590      	push	{r4, r7, lr}
 804dbf6:	b085      	sub	sp, #20
 804dbf8:	af00      	add	r7, sp, #0
 804dbfa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 804dbfc:	4b45      	ldr	r3, [pc, #276]	; (804dd14 <plug_holes+0x120>)
 804dbfe:	681b      	ldr	r3, [r3, #0]
 804dc00:	687a      	ldr	r2, [r7, #4]
 804dc02:	429a      	cmp	r2, r3
 804dc04:	d206      	bcs.n	804dc14 <plug_holes+0x20>
 804dc06:	4b44      	ldr	r3, [pc, #272]	; (804dd18 <plug_holes+0x124>)
 804dc08:	f240 12df 	movw	r2, #479	; 0x1df
 804dc0c:	4943      	ldr	r1, [pc, #268]	; (804dd1c <plug_holes+0x128>)
 804dc0e:	4844      	ldr	r0, [pc, #272]	; (804dd20 <plug_holes+0x12c>)
 804dc10:	f00b fa10 	bl	8059034 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 804dc14:	4b43      	ldr	r3, [pc, #268]	; (804dd24 <plug_holes+0x130>)
 804dc16:	681b      	ldr	r3, [r3, #0]
 804dc18:	687a      	ldr	r2, [r7, #4]
 804dc1a:	429a      	cmp	r2, r3
 804dc1c:	d306      	bcc.n	804dc2c <plug_holes+0x38>
 804dc1e:	4b3e      	ldr	r3, [pc, #248]	; (804dd18 <plug_holes+0x124>)
 804dc20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 804dc24:	4940      	ldr	r1, [pc, #256]	; (804dd28 <plug_holes+0x134>)
 804dc26:	483e      	ldr	r0, [pc, #248]	; (804dd20 <plug_holes+0x12c>)
 804dc28:	f00b fa04 	bl	8059034 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 804dc2c:	687b      	ldr	r3, [r7, #4]
 804dc2e:	791b      	ldrb	r3, [r3, #4]
 804dc30:	2b00      	cmp	r3, #0
 804dc32:	d006      	beq.n	804dc42 <plug_holes+0x4e>
 804dc34:	4b38      	ldr	r3, [pc, #224]	; (804dd18 <plug_holes+0x124>)
 804dc36:	f240 12e1 	movw	r2, #481	; 0x1e1
 804dc3a:	493c      	ldr	r1, [pc, #240]	; (804dd2c <plug_holes+0x138>)
 804dc3c:	4838      	ldr	r0, [pc, #224]	; (804dd20 <plug_holes+0x12c>)
 804dc3e:	f00b f9f9 	bl	8059034 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 804dc42:	687b      	ldr	r3, [r7, #4]
 804dc44:	881b      	ldrh	r3, [r3, #0]
 804dc46:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804dc4a:	d906      	bls.n	804dc5a <plug_holes+0x66>
 804dc4c:	4b32      	ldr	r3, [pc, #200]	; (804dd18 <plug_holes+0x124>)
 804dc4e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 804dc52:	4937      	ldr	r1, [pc, #220]	; (804dd30 <plug_holes+0x13c>)
 804dc54:	4832      	ldr	r0, [pc, #200]	; (804dd20 <plug_holes+0x12c>)
 804dc56:	f00b f9ed 	bl	8059034 <iprintf>

  nmem = ptr_to_mem(mem->next);
 804dc5a:	687b      	ldr	r3, [r7, #4]
 804dc5c:	881b      	ldrh	r3, [r3, #0]
 804dc5e:	4618      	mov	r0, r3
 804dc60:	f7ff ffa4 	bl	804dbac <ptr_to_mem>
 804dc64:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 804dc66:	687a      	ldr	r2, [r7, #4]
 804dc68:	68fb      	ldr	r3, [r7, #12]
 804dc6a:	429a      	cmp	r2, r3
 804dc6c:	d024      	beq.n	804dcb8 <plug_holes+0xc4>
 804dc6e:	68fb      	ldr	r3, [r7, #12]
 804dc70:	791b      	ldrb	r3, [r3, #4]
 804dc72:	2b00      	cmp	r3, #0
 804dc74:	d120      	bne.n	804dcb8 <plug_holes+0xc4>
 804dc76:	4b2b      	ldr	r3, [pc, #172]	; (804dd24 <plug_holes+0x130>)
 804dc78:	681b      	ldr	r3, [r3, #0]
 804dc7a:	68fa      	ldr	r2, [r7, #12]
 804dc7c:	429a      	cmp	r2, r3
 804dc7e:	d01b      	beq.n	804dcb8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 804dc80:	4b2c      	ldr	r3, [pc, #176]	; (804dd34 <plug_holes+0x140>)
 804dc82:	681b      	ldr	r3, [r3, #0]
 804dc84:	68fa      	ldr	r2, [r7, #12]
 804dc86:	429a      	cmp	r2, r3
 804dc88:	d102      	bne.n	804dc90 <plug_holes+0x9c>
      lfree = mem;
 804dc8a:	4a2a      	ldr	r2, [pc, #168]	; (804dd34 <plug_holes+0x140>)
 804dc8c:	687b      	ldr	r3, [r7, #4]
 804dc8e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 804dc90:	68fb      	ldr	r3, [r7, #12]
 804dc92:	881a      	ldrh	r2, [r3, #0]
 804dc94:	687b      	ldr	r3, [r7, #4]
 804dc96:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 804dc98:	68fb      	ldr	r3, [r7, #12]
 804dc9a:	881b      	ldrh	r3, [r3, #0]
 804dc9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804dca0:	d00a      	beq.n	804dcb8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 804dca2:	68fb      	ldr	r3, [r7, #12]
 804dca4:	881b      	ldrh	r3, [r3, #0]
 804dca6:	4618      	mov	r0, r3
 804dca8:	f7ff ff80 	bl	804dbac <ptr_to_mem>
 804dcac:	4604      	mov	r4, r0
 804dcae:	6878      	ldr	r0, [r7, #4]
 804dcb0:	f7ff ff8e 	bl	804dbd0 <mem_to_ptr>
 804dcb4:	4603      	mov	r3, r0
 804dcb6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 804dcb8:	687b      	ldr	r3, [r7, #4]
 804dcba:	885b      	ldrh	r3, [r3, #2]
 804dcbc:	4618      	mov	r0, r3
 804dcbe:	f7ff ff75 	bl	804dbac <ptr_to_mem>
 804dcc2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 804dcc4:	68ba      	ldr	r2, [r7, #8]
 804dcc6:	687b      	ldr	r3, [r7, #4]
 804dcc8:	429a      	cmp	r2, r3
 804dcca:	d01f      	beq.n	804dd0c <plug_holes+0x118>
 804dccc:	68bb      	ldr	r3, [r7, #8]
 804dcce:	791b      	ldrb	r3, [r3, #4]
 804dcd0:	2b00      	cmp	r3, #0
 804dcd2:	d11b      	bne.n	804dd0c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 804dcd4:	4b17      	ldr	r3, [pc, #92]	; (804dd34 <plug_holes+0x140>)
 804dcd6:	681b      	ldr	r3, [r3, #0]
 804dcd8:	687a      	ldr	r2, [r7, #4]
 804dcda:	429a      	cmp	r2, r3
 804dcdc:	d102      	bne.n	804dce4 <plug_holes+0xf0>
      lfree = pmem;
 804dcde:	4a15      	ldr	r2, [pc, #84]	; (804dd34 <plug_holes+0x140>)
 804dce0:	68bb      	ldr	r3, [r7, #8]
 804dce2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 804dce4:	687b      	ldr	r3, [r7, #4]
 804dce6:	881a      	ldrh	r2, [r3, #0]
 804dce8:	68bb      	ldr	r3, [r7, #8]
 804dcea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 804dcec:	687b      	ldr	r3, [r7, #4]
 804dcee:	881b      	ldrh	r3, [r3, #0]
 804dcf0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804dcf4:	d00a      	beq.n	804dd0c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 804dcf6:	687b      	ldr	r3, [r7, #4]
 804dcf8:	881b      	ldrh	r3, [r3, #0]
 804dcfa:	4618      	mov	r0, r3
 804dcfc:	f7ff ff56 	bl	804dbac <ptr_to_mem>
 804dd00:	4604      	mov	r4, r0
 804dd02:	68b8      	ldr	r0, [r7, #8]
 804dd04:	f7ff ff64 	bl	804dbd0 <mem_to_ptr>
 804dd08:	4603      	mov	r3, r0
 804dd0a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 804dd0c:	bf00      	nop
 804dd0e:	3714      	adds	r7, #20
 804dd10:	46bd      	mov	sp, r7
 804dd12:	bd90      	pop	{r4, r7, pc}
 804dd14:	200084e4 	.word	0x200084e4
 804dd18:	0805ae48 	.word	0x0805ae48
 804dd1c:	0805ae78 	.word	0x0805ae78
 804dd20:	0805ae90 	.word	0x0805ae90
 804dd24:	200084e8 	.word	0x200084e8
 804dd28:	0805aeb8 	.word	0x0805aeb8
 804dd2c:	0805aed4 	.word	0x0805aed4
 804dd30:	0805aef0 	.word	0x0805aef0
 804dd34:	200084f0 	.word	0x200084f0

0804dd38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 804dd38:	b580      	push	{r7, lr}
 804dd3a:	b082      	sub	sp, #8
 804dd3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 804dd3e:	4b1f      	ldr	r3, [pc, #124]	; (804ddbc <mem_init+0x84>)
 804dd40:	3303      	adds	r3, #3
 804dd42:	f023 0303 	bic.w	r3, r3, #3
 804dd46:	461a      	mov	r2, r3
 804dd48:	4b1d      	ldr	r3, [pc, #116]	; (804ddc0 <mem_init+0x88>)
 804dd4a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 804dd4c:	4b1c      	ldr	r3, [pc, #112]	; (804ddc0 <mem_init+0x88>)
 804dd4e:	681b      	ldr	r3, [r3, #0]
 804dd50:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 804dd52:	687b      	ldr	r3, [r7, #4]
 804dd54:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 804dd58:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 804dd5a:	687b      	ldr	r3, [r7, #4]
 804dd5c:	2200      	movs	r2, #0
 804dd5e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 804dd60:	687b      	ldr	r3, [r7, #4]
 804dd62:	2200      	movs	r2, #0
 804dd64:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 804dd66:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 804dd6a:	f7ff ff1f 	bl	804dbac <ptr_to_mem>
 804dd6e:	4603      	mov	r3, r0
 804dd70:	4a14      	ldr	r2, [pc, #80]	; (804ddc4 <mem_init+0x8c>)
 804dd72:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 804dd74:	4b13      	ldr	r3, [pc, #76]	; (804ddc4 <mem_init+0x8c>)
 804dd76:	681b      	ldr	r3, [r3, #0]
 804dd78:	2201      	movs	r2, #1
 804dd7a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 804dd7c:	4b11      	ldr	r3, [pc, #68]	; (804ddc4 <mem_init+0x8c>)
 804dd7e:	681b      	ldr	r3, [r3, #0]
 804dd80:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 804dd84:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 804dd86:	4b0f      	ldr	r3, [pc, #60]	; (804ddc4 <mem_init+0x8c>)
 804dd88:	681b      	ldr	r3, [r3, #0]
 804dd8a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 804dd8e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 804dd90:	4b0b      	ldr	r3, [pc, #44]	; (804ddc0 <mem_init+0x88>)
 804dd92:	681b      	ldr	r3, [r3, #0]
 804dd94:	4a0c      	ldr	r2, [pc, #48]	; (804ddc8 <mem_init+0x90>)
 804dd96:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 804dd98:	480c      	ldr	r0, [pc, #48]	; (804ddcc <mem_init+0x94>)
 804dd9a:	f00a fe79 	bl	8058a90 <sys_mutex_new>
 804dd9e:	4603      	mov	r3, r0
 804dda0:	2b00      	cmp	r3, #0
 804dda2:	d006      	beq.n	804ddb2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 804dda4:	4b0a      	ldr	r3, [pc, #40]	; (804ddd0 <mem_init+0x98>)
 804dda6:	f240 221f 	movw	r2, #543	; 0x21f
 804ddaa:	490a      	ldr	r1, [pc, #40]	; (804ddd4 <mem_init+0x9c>)
 804ddac:	480a      	ldr	r0, [pc, #40]	; (804ddd8 <mem_init+0xa0>)
 804ddae:	f00b f941 	bl	8059034 <iprintf>
  }
}
 804ddb2:	bf00      	nop
 804ddb4:	3708      	adds	r7, #8
 804ddb6:	46bd      	mov	sp, r7
 804ddb8:	bd80      	pop	{r7, pc}
 804ddba:	bf00      	nop
 804ddbc:	20005cd0 	.word	0x20005cd0
 804ddc0:	200084e4 	.word	0x200084e4
 804ddc4:	200084e8 	.word	0x200084e8
 804ddc8:	200084f0 	.word	0x200084f0
 804ddcc:	200084ec 	.word	0x200084ec
 804ddd0:	0805ae48 	.word	0x0805ae48
 804ddd4:	0805af1c 	.word	0x0805af1c
 804ddd8:	0805ae90 	.word	0x0805ae90

0804dddc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 804dddc:	b580      	push	{r7, lr}
 804ddde:	b086      	sub	sp, #24
 804dde0:	af00      	add	r7, sp, #0
 804dde2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 804dde4:	6878      	ldr	r0, [r7, #4]
 804dde6:	f7ff fef3 	bl	804dbd0 <mem_to_ptr>
 804ddea:	4603      	mov	r3, r0
 804ddec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 804ddee:	687b      	ldr	r3, [r7, #4]
 804ddf0:	881b      	ldrh	r3, [r3, #0]
 804ddf2:	4618      	mov	r0, r3
 804ddf4:	f7ff feda 	bl	804dbac <ptr_to_mem>
 804ddf8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 804ddfa:	687b      	ldr	r3, [r7, #4]
 804ddfc:	885b      	ldrh	r3, [r3, #2]
 804ddfe:	4618      	mov	r0, r3
 804de00:	f7ff fed4 	bl	804dbac <ptr_to_mem>
 804de04:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 804de06:	687b      	ldr	r3, [r7, #4]
 804de08:	881b      	ldrh	r3, [r3, #0]
 804de0a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804de0e:	d818      	bhi.n	804de42 <mem_link_valid+0x66>
 804de10:	687b      	ldr	r3, [r7, #4]
 804de12:	885b      	ldrh	r3, [r3, #2]
 804de14:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804de18:	d813      	bhi.n	804de42 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 804de1a:	687b      	ldr	r3, [r7, #4]
 804de1c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 804de1e:	8afa      	ldrh	r2, [r7, #22]
 804de20:	429a      	cmp	r2, r3
 804de22:	d004      	beq.n	804de2e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 804de24:	68fb      	ldr	r3, [r7, #12]
 804de26:	881b      	ldrh	r3, [r3, #0]
 804de28:	8afa      	ldrh	r2, [r7, #22]
 804de2a:	429a      	cmp	r2, r3
 804de2c:	d109      	bne.n	804de42 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 804de2e:	4b08      	ldr	r3, [pc, #32]	; (804de50 <mem_link_valid+0x74>)
 804de30:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 804de32:	693a      	ldr	r2, [r7, #16]
 804de34:	429a      	cmp	r2, r3
 804de36:	d006      	beq.n	804de46 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 804de38:	693b      	ldr	r3, [r7, #16]
 804de3a:	885b      	ldrh	r3, [r3, #2]
 804de3c:	8afa      	ldrh	r2, [r7, #22]
 804de3e:	429a      	cmp	r2, r3
 804de40:	d001      	beq.n	804de46 <mem_link_valid+0x6a>
    return 0;
 804de42:	2300      	movs	r3, #0
 804de44:	e000      	b.n	804de48 <mem_link_valid+0x6c>
  }
  return 1;
 804de46:	2301      	movs	r3, #1
}
 804de48:	4618      	mov	r0, r3
 804de4a:	3718      	adds	r7, #24
 804de4c:	46bd      	mov	sp, r7
 804de4e:	bd80      	pop	{r7, pc}
 804de50:	200084e8 	.word	0x200084e8

0804de54 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 804de54:	b580      	push	{r7, lr}
 804de56:	b088      	sub	sp, #32
 804de58:	af00      	add	r7, sp, #0
 804de5a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 804de5c:	687b      	ldr	r3, [r7, #4]
 804de5e:	2b00      	cmp	r3, #0
 804de60:	d070      	beq.n	804df44 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 804de62:	687b      	ldr	r3, [r7, #4]
 804de64:	f003 0303 	and.w	r3, r3, #3
 804de68:	2b00      	cmp	r3, #0
 804de6a:	d00d      	beq.n	804de88 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 804de6c:	4b37      	ldr	r3, [pc, #220]	; (804df4c <mem_free+0xf8>)
 804de6e:	f240 2273 	movw	r2, #627	; 0x273
 804de72:	4937      	ldr	r1, [pc, #220]	; (804df50 <mem_free+0xfc>)
 804de74:	4837      	ldr	r0, [pc, #220]	; (804df54 <mem_free+0x100>)
 804de76:	f00b f8dd 	bl	8059034 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804de7a:	f00a fe67 	bl	8058b4c <sys_arch_protect>
 804de7e:	60f8      	str	r0, [r7, #12]
 804de80:	68f8      	ldr	r0, [r7, #12]
 804de82:	f00a fe71 	bl	8058b68 <sys_arch_unprotect>
    return;
 804de86:	e05e      	b.n	804df46 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 804de88:	687b      	ldr	r3, [r7, #4]
 804de8a:	3b08      	subs	r3, #8
 804de8c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 804de8e:	4b32      	ldr	r3, [pc, #200]	; (804df58 <mem_free+0x104>)
 804de90:	681b      	ldr	r3, [r3, #0]
 804de92:	69fa      	ldr	r2, [r7, #28]
 804de94:	429a      	cmp	r2, r3
 804de96:	d306      	bcc.n	804dea6 <mem_free+0x52>
 804de98:	687b      	ldr	r3, [r7, #4]
 804de9a:	f103 020c 	add.w	r2, r3, #12
 804de9e:	4b2f      	ldr	r3, [pc, #188]	; (804df5c <mem_free+0x108>)
 804dea0:	681b      	ldr	r3, [r3, #0]
 804dea2:	429a      	cmp	r2, r3
 804dea4:	d90d      	bls.n	804dec2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 804dea6:	4b29      	ldr	r3, [pc, #164]	; (804df4c <mem_free+0xf8>)
 804dea8:	f240 227f 	movw	r2, #639	; 0x27f
 804deac:	492c      	ldr	r1, [pc, #176]	; (804df60 <mem_free+0x10c>)
 804deae:	4829      	ldr	r0, [pc, #164]	; (804df54 <mem_free+0x100>)
 804deb0:	f00b f8c0 	bl	8059034 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804deb4:	f00a fe4a 	bl	8058b4c <sys_arch_protect>
 804deb8:	6138      	str	r0, [r7, #16]
 804deba:	6938      	ldr	r0, [r7, #16]
 804debc:	f00a fe54 	bl	8058b68 <sys_arch_unprotect>
    return;
 804dec0:	e041      	b.n	804df46 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 804dec2:	4828      	ldr	r0, [pc, #160]	; (804df64 <mem_free+0x110>)
 804dec4:	f00a fe00 	bl	8058ac8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 804dec8:	69fb      	ldr	r3, [r7, #28]
 804deca:	791b      	ldrb	r3, [r3, #4]
 804decc:	2b00      	cmp	r3, #0
 804dece:	d110      	bne.n	804def2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 804ded0:	4b1e      	ldr	r3, [pc, #120]	; (804df4c <mem_free+0xf8>)
 804ded2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 804ded6:	4924      	ldr	r1, [pc, #144]	; (804df68 <mem_free+0x114>)
 804ded8:	481e      	ldr	r0, [pc, #120]	; (804df54 <mem_free+0x100>)
 804deda:	f00b f8ab 	bl	8059034 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 804dede:	4821      	ldr	r0, [pc, #132]	; (804df64 <mem_free+0x110>)
 804dee0:	f00a fe01 	bl	8058ae6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804dee4:	f00a fe32 	bl	8058b4c <sys_arch_protect>
 804dee8:	6178      	str	r0, [r7, #20]
 804deea:	6978      	ldr	r0, [r7, #20]
 804deec:	f00a fe3c 	bl	8058b68 <sys_arch_unprotect>
    return;
 804def0:	e029      	b.n	804df46 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 804def2:	69f8      	ldr	r0, [r7, #28]
 804def4:	f7ff ff72 	bl	804dddc <mem_link_valid>
 804def8:	4603      	mov	r3, r0
 804defa:	2b00      	cmp	r3, #0
 804defc:	d110      	bne.n	804df20 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 804defe:	4b13      	ldr	r3, [pc, #76]	; (804df4c <mem_free+0xf8>)
 804df00:	f240 2295 	movw	r2, #661	; 0x295
 804df04:	4919      	ldr	r1, [pc, #100]	; (804df6c <mem_free+0x118>)
 804df06:	4813      	ldr	r0, [pc, #76]	; (804df54 <mem_free+0x100>)
 804df08:	f00b f894 	bl	8059034 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 804df0c:	4815      	ldr	r0, [pc, #84]	; (804df64 <mem_free+0x110>)
 804df0e:	f00a fdea 	bl	8058ae6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804df12:	f00a fe1b 	bl	8058b4c <sys_arch_protect>
 804df16:	61b8      	str	r0, [r7, #24]
 804df18:	69b8      	ldr	r0, [r7, #24]
 804df1a:	f00a fe25 	bl	8058b68 <sys_arch_unprotect>
    return;
 804df1e:	e012      	b.n	804df46 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 804df20:	69fb      	ldr	r3, [r7, #28]
 804df22:	2200      	movs	r2, #0
 804df24:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 804df26:	4b12      	ldr	r3, [pc, #72]	; (804df70 <mem_free+0x11c>)
 804df28:	681b      	ldr	r3, [r3, #0]
 804df2a:	69fa      	ldr	r2, [r7, #28]
 804df2c:	429a      	cmp	r2, r3
 804df2e:	d202      	bcs.n	804df36 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 804df30:	4a0f      	ldr	r2, [pc, #60]	; (804df70 <mem_free+0x11c>)
 804df32:	69fb      	ldr	r3, [r7, #28]
 804df34:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 804df36:	69f8      	ldr	r0, [r7, #28]
 804df38:	f7ff fe5c 	bl	804dbf4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 804df3c:	4809      	ldr	r0, [pc, #36]	; (804df64 <mem_free+0x110>)
 804df3e:	f00a fdd2 	bl	8058ae6 <sys_mutex_unlock>
 804df42:	e000      	b.n	804df46 <mem_free+0xf2>
    return;
 804df44:	bf00      	nop
}
 804df46:	3720      	adds	r7, #32
 804df48:	46bd      	mov	sp, r7
 804df4a:	bd80      	pop	{r7, pc}
 804df4c:	0805ae48 	.word	0x0805ae48
 804df50:	0805af38 	.word	0x0805af38
 804df54:	0805ae90 	.word	0x0805ae90
 804df58:	200084e4 	.word	0x200084e4
 804df5c:	200084e8 	.word	0x200084e8
 804df60:	0805af5c 	.word	0x0805af5c
 804df64:	200084ec 	.word	0x200084ec
 804df68:	0805af78 	.word	0x0805af78
 804df6c:	0805afa0 	.word	0x0805afa0
 804df70:	200084f0 	.word	0x200084f0

0804df74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 804df74:	b580      	push	{r7, lr}
 804df76:	b088      	sub	sp, #32
 804df78:	af00      	add	r7, sp, #0
 804df7a:	6078      	str	r0, [r7, #4]
 804df7c:	460b      	mov	r3, r1
 804df7e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 804df80:	887b      	ldrh	r3, [r7, #2]
 804df82:	3303      	adds	r3, #3
 804df84:	b29b      	uxth	r3, r3
 804df86:	f023 0303 	bic.w	r3, r3, #3
 804df8a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 804df8c:	8bfb      	ldrh	r3, [r7, #30]
 804df8e:	2b0b      	cmp	r3, #11
 804df90:	d801      	bhi.n	804df96 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 804df92:	230c      	movs	r3, #12
 804df94:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 804df96:	8bfb      	ldrh	r3, [r7, #30]
 804df98:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804df9c:	d803      	bhi.n	804dfa6 <mem_trim+0x32>
 804df9e:	8bfa      	ldrh	r2, [r7, #30]
 804dfa0:	887b      	ldrh	r3, [r7, #2]
 804dfa2:	429a      	cmp	r2, r3
 804dfa4:	d201      	bcs.n	804dfaa <mem_trim+0x36>
    return NULL;
 804dfa6:	2300      	movs	r3, #0
 804dfa8:	e0d8      	b.n	804e15c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 804dfaa:	4b6e      	ldr	r3, [pc, #440]	; (804e164 <mem_trim+0x1f0>)
 804dfac:	681b      	ldr	r3, [r3, #0]
 804dfae:	687a      	ldr	r2, [r7, #4]
 804dfb0:	429a      	cmp	r2, r3
 804dfb2:	d304      	bcc.n	804dfbe <mem_trim+0x4a>
 804dfb4:	4b6c      	ldr	r3, [pc, #432]	; (804e168 <mem_trim+0x1f4>)
 804dfb6:	681b      	ldr	r3, [r3, #0]
 804dfb8:	687a      	ldr	r2, [r7, #4]
 804dfba:	429a      	cmp	r2, r3
 804dfbc:	d306      	bcc.n	804dfcc <mem_trim+0x58>
 804dfbe:	4b6b      	ldr	r3, [pc, #428]	; (804e16c <mem_trim+0x1f8>)
 804dfc0:	f240 22d1 	movw	r2, #721	; 0x2d1
 804dfc4:	496a      	ldr	r1, [pc, #424]	; (804e170 <mem_trim+0x1fc>)
 804dfc6:	486b      	ldr	r0, [pc, #428]	; (804e174 <mem_trim+0x200>)
 804dfc8:	f00b f834 	bl	8059034 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 804dfcc:	4b65      	ldr	r3, [pc, #404]	; (804e164 <mem_trim+0x1f0>)
 804dfce:	681b      	ldr	r3, [r3, #0]
 804dfd0:	687a      	ldr	r2, [r7, #4]
 804dfd2:	429a      	cmp	r2, r3
 804dfd4:	d304      	bcc.n	804dfe0 <mem_trim+0x6c>
 804dfd6:	4b64      	ldr	r3, [pc, #400]	; (804e168 <mem_trim+0x1f4>)
 804dfd8:	681b      	ldr	r3, [r3, #0]
 804dfda:	687a      	ldr	r2, [r7, #4]
 804dfdc:	429a      	cmp	r2, r3
 804dfde:	d307      	bcc.n	804dff0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 804dfe0:	f00a fdb4 	bl	8058b4c <sys_arch_protect>
 804dfe4:	60b8      	str	r0, [r7, #8]
 804dfe6:	68b8      	ldr	r0, [r7, #8]
 804dfe8:	f00a fdbe 	bl	8058b68 <sys_arch_unprotect>
    return rmem;
 804dfec:	687b      	ldr	r3, [r7, #4]
 804dfee:	e0b5      	b.n	804e15c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 804dff0:	687b      	ldr	r3, [r7, #4]
 804dff2:	3b08      	subs	r3, #8
 804dff4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 804dff6:	69b8      	ldr	r0, [r7, #24]
 804dff8:	f7ff fdea 	bl	804dbd0 <mem_to_ptr>
 804dffc:	4603      	mov	r3, r0
 804dffe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 804e000:	69bb      	ldr	r3, [r7, #24]
 804e002:	881a      	ldrh	r2, [r3, #0]
 804e004:	8afb      	ldrh	r3, [r7, #22]
 804e006:	1ad3      	subs	r3, r2, r3
 804e008:	b29b      	uxth	r3, r3
 804e00a:	3b08      	subs	r3, #8
 804e00c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 804e00e:	8bfa      	ldrh	r2, [r7, #30]
 804e010:	8abb      	ldrh	r3, [r7, #20]
 804e012:	429a      	cmp	r2, r3
 804e014:	d906      	bls.n	804e024 <mem_trim+0xb0>
 804e016:	4b55      	ldr	r3, [pc, #340]	; (804e16c <mem_trim+0x1f8>)
 804e018:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 804e01c:	4956      	ldr	r1, [pc, #344]	; (804e178 <mem_trim+0x204>)
 804e01e:	4855      	ldr	r0, [pc, #340]	; (804e174 <mem_trim+0x200>)
 804e020:	f00b f808 	bl	8059034 <iprintf>
  if (newsize > size) {
 804e024:	8bfa      	ldrh	r2, [r7, #30]
 804e026:	8abb      	ldrh	r3, [r7, #20]
 804e028:	429a      	cmp	r2, r3
 804e02a:	d901      	bls.n	804e030 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 804e02c:	2300      	movs	r3, #0
 804e02e:	e095      	b.n	804e15c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 804e030:	8bfa      	ldrh	r2, [r7, #30]
 804e032:	8abb      	ldrh	r3, [r7, #20]
 804e034:	429a      	cmp	r2, r3
 804e036:	d101      	bne.n	804e03c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 804e038:	687b      	ldr	r3, [r7, #4]
 804e03a:	e08f      	b.n	804e15c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 804e03c:	484f      	ldr	r0, [pc, #316]	; (804e17c <mem_trim+0x208>)
 804e03e:	f00a fd43 	bl	8058ac8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 804e042:	69bb      	ldr	r3, [r7, #24]
 804e044:	881b      	ldrh	r3, [r3, #0]
 804e046:	4618      	mov	r0, r3
 804e048:	f7ff fdb0 	bl	804dbac <ptr_to_mem>
 804e04c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 804e04e:	693b      	ldr	r3, [r7, #16]
 804e050:	791b      	ldrb	r3, [r3, #4]
 804e052:	2b00      	cmp	r3, #0
 804e054:	d13f      	bne.n	804e0d6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 804e056:	69bb      	ldr	r3, [r7, #24]
 804e058:	881b      	ldrh	r3, [r3, #0]
 804e05a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e05e:	d106      	bne.n	804e06e <mem_trim+0xfa>
 804e060:	4b42      	ldr	r3, [pc, #264]	; (804e16c <mem_trim+0x1f8>)
 804e062:	f240 22f5 	movw	r2, #757	; 0x2f5
 804e066:	4946      	ldr	r1, [pc, #280]	; (804e180 <mem_trim+0x20c>)
 804e068:	4842      	ldr	r0, [pc, #264]	; (804e174 <mem_trim+0x200>)
 804e06a:	f00a ffe3 	bl	8059034 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 804e06e:	693b      	ldr	r3, [r7, #16]
 804e070:	881b      	ldrh	r3, [r3, #0]
 804e072:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 804e074:	8afa      	ldrh	r2, [r7, #22]
 804e076:	8bfb      	ldrh	r3, [r7, #30]
 804e078:	4413      	add	r3, r2
 804e07a:	b29b      	uxth	r3, r3
 804e07c:	3308      	adds	r3, #8
 804e07e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 804e080:	4b40      	ldr	r3, [pc, #256]	; (804e184 <mem_trim+0x210>)
 804e082:	681b      	ldr	r3, [r3, #0]
 804e084:	693a      	ldr	r2, [r7, #16]
 804e086:	429a      	cmp	r2, r3
 804e088:	d106      	bne.n	804e098 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 804e08a:	89fb      	ldrh	r3, [r7, #14]
 804e08c:	4618      	mov	r0, r3
 804e08e:	f7ff fd8d 	bl	804dbac <ptr_to_mem>
 804e092:	4603      	mov	r3, r0
 804e094:	4a3b      	ldr	r2, [pc, #236]	; (804e184 <mem_trim+0x210>)
 804e096:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 804e098:	89fb      	ldrh	r3, [r7, #14]
 804e09a:	4618      	mov	r0, r3
 804e09c:	f7ff fd86 	bl	804dbac <ptr_to_mem>
 804e0a0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 804e0a2:	693b      	ldr	r3, [r7, #16]
 804e0a4:	2200      	movs	r2, #0
 804e0a6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 804e0a8:	693b      	ldr	r3, [r7, #16]
 804e0aa:	89ba      	ldrh	r2, [r7, #12]
 804e0ac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 804e0ae:	693b      	ldr	r3, [r7, #16]
 804e0b0:	8afa      	ldrh	r2, [r7, #22]
 804e0b2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 804e0b4:	69bb      	ldr	r3, [r7, #24]
 804e0b6:	89fa      	ldrh	r2, [r7, #14]
 804e0b8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 804e0ba:	693b      	ldr	r3, [r7, #16]
 804e0bc:	881b      	ldrh	r3, [r3, #0]
 804e0be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e0c2:	d047      	beq.n	804e154 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 804e0c4:	693b      	ldr	r3, [r7, #16]
 804e0c6:	881b      	ldrh	r3, [r3, #0]
 804e0c8:	4618      	mov	r0, r3
 804e0ca:	f7ff fd6f 	bl	804dbac <ptr_to_mem>
 804e0ce:	4602      	mov	r2, r0
 804e0d0:	89fb      	ldrh	r3, [r7, #14]
 804e0d2:	8053      	strh	r3, [r2, #2]
 804e0d4:	e03e      	b.n	804e154 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 804e0d6:	8bfb      	ldrh	r3, [r7, #30]
 804e0d8:	f103 0214 	add.w	r2, r3, #20
 804e0dc:	8abb      	ldrh	r3, [r7, #20]
 804e0de:	429a      	cmp	r2, r3
 804e0e0:	d838      	bhi.n	804e154 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 804e0e2:	8afa      	ldrh	r2, [r7, #22]
 804e0e4:	8bfb      	ldrh	r3, [r7, #30]
 804e0e6:	4413      	add	r3, r2
 804e0e8:	b29b      	uxth	r3, r3
 804e0ea:	3308      	adds	r3, #8
 804e0ec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 804e0ee:	69bb      	ldr	r3, [r7, #24]
 804e0f0:	881b      	ldrh	r3, [r3, #0]
 804e0f2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e0f6:	d106      	bne.n	804e106 <mem_trim+0x192>
 804e0f8:	4b1c      	ldr	r3, [pc, #112]	; (804e16c <mem_trim+0x1f8>)
 804e0fa:	f240 3216 	movw	r2, #790	; 0x316
 804e0fe:	4920      	ldr	r1, [pc, #128]	; (804e180 <mem_trim+0x20c>)
 804e100:	481c      	ldr	r0, [pc, #112]	; (804e174 <mem_trim+0x200>)
 804e102:	f00a ff97 	bl	8059034 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 804e106:	89fb      	ldrh	r3, [r7, #14]
 804e108:	4618      	mov	r0, r3
 804e10a:	f7ff fd4f 	bl	804dbac <ptr_to_mem>
 804e10e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 804e110:	4b1c      	ldr	r3, [pc, #112]	; (804e184 <mem_trim+0x210>)
 804e112:	681b      	ldr	r3, [r3, #0]
 804e114:	693a      	ldr	r2, [r7, #16]
 804e116:	429a      	cmp	r2, r3
 804e118:	d202      	bcs.n	804e120 <mem_trim+0x1ac>
      lfree = mem2;
 804e11a:	4a1a      	ldr	r2, [pc, #104]	; (804e184 <mem_trim+0x210>)
 804e11c:	693b      	ldr	r3, [r7, #16]
 804e11e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 804e120:	693b      	ldr	r3, [r7, #16]
 804e122:	2200      	movs	r2, #0
 804e124:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 804e126:	69bb      	ldr	r3, [r7, #24]
 804e128:	881a      	ldrh	r2, [r3, #0]
 804e12a:	693b      	ldr	r3, [r7, #16]
 804e12c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 804e12e:	693b      	ldr	r3, [r7, #16]
 804e130:	8afa      	ldrh	r2, [r7, #22]
 804e132:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 804e134:	69bb      	ldr	r3, [r7, #24]
 804e136:	89fa      	ldrh	r2, [r7, #14]
 804e138:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 804e13a:	693b      	ldr	r3, [r7, #16]
 804e13c:	881b      	ldrh	r3, [r3, #0]
 804e13e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e142:	d007      	beq.n	804e154 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 804e144:	693b      	ldr	r3, [r7, #16]
 804e146:	881b      	ldrh	r3, [r3, #0]
 804e148:	4618      	mov	r0, r3
 804e14a:	f7ff fd2f 	bl	804dbac <ptr_to_mem>
 804e14e:	4602      	mov	r2, r0
 804e150:	89fb      	ldrh	r3, [r7, #14]
 804e152:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 804e154:	4809      	ldr	r0, [pc, #36]	; (804e17c <mem_trim+0x208>)
 804e156:	f00a fcc6 	bl	8058ae6 <sys_mutex_unlock>
  return rmem;
 804e15a:	687b      	ldr	r3, [r7, #4]
}
 804e15c:	4618      	mov	r0, r3
 804e15e:	3720      	adds	r7, #32
 804e160:	46bd      	mov	sp, r7
 804e162:	bd80      	pop	{r7, pc}
 804e164:	200084e4 	.word	0x200084e4
 804e168:	200084e8 	.word	0x200084e8
 804e16c:	0805ae48 	.word	0x0805ae48
 804e170:	0805afd4 	.word	0x0805afd4
 804e174:	0805ae90 	.word	0x0805ae90
 804e178:	0805afec 	.word	0x0805afec
 804e17c:	200084ec 	.word	0x200084ec
 804e180:	0805b00c 	.word	0x0805b00c
 804e184:	200084f0 	.word	0x200084f0

0804e188 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 804e188:	b580      	push	{r7, lr}
 804e18a:	b088      	sub	sp, #32
 804e18c:	af00      	add	r7, sp, #0
 804e18e:	4603      	mov	r3, r0
 804e190:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 804e192:	88fb      	ldrh	r3, [r7, #6]
 804e194:	2b00      	cmp	r3, #0
 804e196:	d101      	bne.n	804e19c <mem_malloc+0x14>
    return NULL;
 804e198:	2300      	movs	r3, #0
 804e19a:	e0e2      	b.n	804e362 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 804e19c:	88fb      	ldrh	r3, [r7, #6]
 804e19e:	3303      	adds	r3, #3
 804e1a0:	b29b      	uxth	r3, r3
 804e1a2:	f023 0303 	bic.w	r3, r3, #3
 804e1a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 804e1a8:	8bbb      	ldrh	r3, [r7, #28]
 804e1aa:	2b0b      	cmp	r3, #11
 804e1ac:	d801      	bhi.n	804e1b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 804e1ae:	230c      	movs	r3, #12
 804e1b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 804e1b2:	8bbb      	ldrh	r3, [r7, #28]
 804e1b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e1b8:	d803      	bhi.n	804e1c2 <mem_malloc+0x3a>
 804e1ba:	8bba      	ldrh	r2, [r7, #28]
 804e1bc:	88fb      	ldrh	r3, [r7, #6]
 804e1be:	429a      	cmp	r2, r3
 804e1c0:	d201      	bcs.n	804e1c6 <mem_malloc+0x3e>
    return NULL;
 804e1c2:	2300      	movs	r3, #0
 804e1c4:	e0cd      	b.n	804e362 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 804e1c6:	4869      	ldr	r0, [pc, #420]	; (804e36c <mem_malloc+0x1e4>)
 804e1c8:	f00a fc7e 	bl	8058ac8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 804e1cc:	4b68      	ldr	r3, [pc, #416]	; (804e370 <mem_malloc+0x1e8>)
 804e1ce:	681b      	ldr	r3, [r3, #0]
 804e1d0:	4618      	mov	r0, r3
 804e1d2:	f7ff fcfd 	bl	804dbd0 <mem_to_ptr>
 804e1d6:	4603      	mov	r3, r0
 804e1d8:	83fb      	strh	r3, [r7, #30]
 804e1da:	e0b7      	b.n	804e34c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 804e1dc:	8bfb      	ldrh	r3, [r7, #30]
 804e1de:	4618      	mov	r0, r3
 804e1e0:	f7ff fce4 	bl	804dbac <ptr_to_mem>
 804e1e4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 804e1e6:	697b      	ldr	r3, [r7, #20]
 804e1e8:	791b      	ldrb	r3, [r3, #4]
 804e1ea:	2b00      	cmp	r3, #0
 804e1ec:	f040 80a7 	bne.w	804e33e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 804e1f0:	697b      	ldr	r3, [r7, #20]
 804e1f2:	881b      	ldrh	r3, [r3, #0]
 804e1f4:	461a      	mov	r2, r3
 804e1f6:	8bfb      	ldrh	r3, [r7, #30]
 804e1f8:	1ad3      	subs	r3, r2, r3
 804e1fa:	f1a3 0208 	sub.w	r2, r3, #8
 804e1fe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 804e200:	429a      	cmp	r2, r3
 804e202:	f0c0 809c 	bcc.w	804e33e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 804e206:	697b      	ldr	r3, [r7, #20]
 804e208:	881b      	ldrh	r3, [r3, #0]
 804e20a:	461a      	mov	r2, r3
 804e20c:	8bfb      	ldrh	r3, [r7, #30]
 804e20e:	1ad3      	subs	r3, r2, r3
 804e210:	f1a3 0208 	sub.w	r2, r3, #8
 804e214:	8bbb      	ldrh	r3, [r7, #28]
 804e216:	3314      	adds	r3, #20
 804e218:	429a      	cmp	r2, r3
 804e21a:	d333      	bcc.n	804e284 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 804e21c:	8bfa      	ldrh	r2, [r7, #30]
 804e21e:	8bbb      	ldrh	r3, [r7, #28]
 804e220:	4413      	add	r3, r2
 804e222:	b29b      	uxth	r3, r3
 804e224:	3308      	adds	r3, #8
 804e226:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 804e228:	8a7b      	ldrh	r3, [r7, #18]
 804e22a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e22e:	d106      	bne.n	804e23e <mem_malloc+0xb6>
 804e230:	4b50      	ldr	r3, [pc, #320]	; (804e374 <mem_malloc+0x1ec>)
 804e232:	f240 3287 	movw	r2, #903	; 0x387
 804e236:	4950      	ldr	r1, [pc, #320]	; (804e378 <mem_malloc+0x1f0>)
 804e238:	4850      	ldr	r0, [pc, #320]	; (804e37c <mem_malloc+0x1f4>)
 804e23a:	f00a fefb 	bl	8059034 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 804e23e:	8a7b      	ldrh	r3, [r7, #18]
 804e240:	4618      	mov	r0, r3
 804e242:	f7ff fcb3 	bl	804dbac <ptr_to_mem>
 804e246:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 804e248:	68fb      	ldr	r3, [r7, #12]
 804e24a:	2200      	movs	r2, #0
 804e24c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 804e24e:	697b      	ldr	r3, [r7, #20]
 804e250:	881a      	ldrh	r2, [r3, #0]
 804e252:	68fb      	ldr	r3, [r7, #12]
 804e254:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 804e256:	68fb      	ldr	r3, [r7, #12]
 804e258:	8bfa      	ldrh	r2, [r7, #30]
 804e25a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 804e25c:	697b      	ldr	r3, [r7, #20]
 804e25e:	8a7a      	ldrh	r2, [r7, #18]
 804e260:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 804e262:	697b      	ldr	r3, [r7, #20]
 804e264:	2201      	movs	r2, #1
 804e266:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 804e268:	68fb      	ldr	r3, [r7, #12]
 804e26a:	881b      	ldrh	r3, [r3, #0]
 804e26c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 804e270:	d00b      	beq.n	804e28a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 804e272:	68fb      	ldr	r3, [r7, #12]
 804e274:	881b      	ldrh	r3, [r3, #0]
 804e276:	4618      	mov	r0, r3
 804e278:	f7ff fc98 	bl	804dbac <ptr_to_mem>
 804e27c:	4602      	mov	r2, r0
 804e27e:	8a7b      	ldrh	r3, [r7, #18]
 804e280:	8053      	strh	r3, [r2, #2]
 804e282:	e002      	b.n	804e28a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 804e284:	697b      	ldr	r3, [r7, #20]
 804e286:	2201      	movs	r2, #1
 804e288:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 804e28a:	4b39      	ldr	r3, [pc, #228]	; (804e370 <mem_malloc+0x1e8>)
 804e28c:	681b      	ldr	r3, [r3, #0]
 804e28e:	697a      	ldr	r2, [r7, #20]
 804e290:	429a      	cmp	r2, r3
 804e292:	d127      	bne.n	804e2e4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 804e294:	4b36      	ldr	r3, [pc, #216]	; (804e370 <mem_malloc+0x1e8>)
 804e296:	681b      	ldr	r3, [r3, #0]
 804e298:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 804e29a:	e005      	b.n	804e2a8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 804e29c:	69bb      	ldr	r3, [r7, #24]
 804e29e:	881b      	ldrh	r3, [r3, #0]
 804e2a0:	4618      	mov	r0, r3
 804e2a2:	f7ff fc83 	bl	804dbac <ptr_to_mem>
 804e2a6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 804e2a8:	69bb      	ldr	r3, [r7, #24]
 804e2aa:	791b      	ldrb	r3, [r3, #4]
 804e2ac:	2b00      	cmp	r3, #0
 804e2ae:	d004      	beq.n	804e2ba <mem_malloc+0x132>
 804e2b0:	4b33      	ldr	r3, [pc, #204]	; (804e380 <mem_malloc+0x1f8>)
 804e2b2:	681b      	ldr	r3, [r3, #0]
 804e2b4:	69ba      	ldr	r2, [r7, #24]
 804e2b6:	429a      	cmp	r2, r3
 804e2b8:	d1f0      	bne.n	804e29c <mem_malloc+0x114>
          }
          lfree = cur;
 804e2ba:	4a2d      	ldr	r2, [pc, #180]	; (804e370 <mem_malloc+0x1e8>)
 804e2bc:	69bb      	ldr	r3, [r7, #24]
 804e2be:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 804e2c0:	4b2b      	ldr	r3, [pc, #172]	; (804e370 <mem_malloc+0x1e8>)
 804e2c2:	681a      	ldr	r2, [r3, #0]
 804e2c4:	4b2e      	ldr	r3, [pc, #184]	; (804e380 <mem_malloc+0x1f8>)
 804e2c6:	681b      	ldr	r3, [r3, #0]
 804e2c8:	429a      	cmp	r2, r3
 804e2ca:	d00b      	beq.n	804e2e4 <mem_malloc+0x15c>
 804e2cc:	4b28      	ldr	r3, [pc, #160]	; (804e370 <mem_malloc+0x1e8>)
 804e2ce:	681b      	ldr	r3, [r3, #0]
 804e2d0:	791b      	ldrb	r3, [r3, #4]
 804e2d2:	2b00      	cmp	r3, #0
 804e2d4:	d006      	beq.n	804e2e4 <mem_malloc+0x15c>
 804e2d6:	4b27      	ldr	r3, [pc, #156]	; (804e374 <mem_malloc+0x1ec>)
 804e2d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 804e2dc:	4929      	ldr	r1, [pc, #164]	; (804e384 <mem_malloc+0x1fc>)
 804e2de:	4827      	ldr	r0, [pc, #156]	; (804e37c <mem_malloc+0x1f4>)
 804e2e0:	f00a fea8 	bl	8059034 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 804e2e4:	4821      	ldr	r0, [pc, #132]	; (804e36c <mem_malloc+0x1e4>)
 804e2e6:	f00a fbfe 	bl	8058ae6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 804e2ea:	8bba      	ldrh	r2, [r7, #28]
 804e2ec:	697b      	ldr	r3, [r7, #20]
 804e2ee:	4413      	add	r3, r2
 804e2f0:	3308      	adds	r3, #8
 804e2f2:	4a23      	ldr	r2, [pc, #140]	; (804e380 <mem_malloc+0x1f8>)
 804e2f4:	6812      	ldr	r2, [r2, #0]
 804e2f6:	4293      	cmp	r3, r2
 804e2f8:	d906      	bls.n	804e308 <mem_malloc+0x180>
 804e2fa:	4b1e      	ldr	r3, [pc, #120]	; (804e374 <mem_malloc+0x1ec>)
 804e2fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 804e300:	4921      	ldr	r1, [pc, #132]	; (804e388 <mem_malloc+0x200>)
 804e302:	481e      	ldr	r0, [pc, #120]	; (804e37c <mem_malloc+0x1f4>)
 804e304:	f00a fe96 	bl	8059034 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 804e308:	697b      	ldr	r3, [r7, #20]
 804e30a:	f003 0303 	and.w	r3, r3, #3
 804e30e:	2b00      	cmp	r3, #0
 804e310:	d006      	beq.n	804e320 <mem_malloc+0x198>
 804e312:	4b18      	ldr	r3, [pc, #96]	; (804e374 <mem_malloc+0x1ec>)
 804e314:	f240 32bb 	movw	r2, #955	; 0x3bb
 804e318:	491c      	ldr	r1, [pc, #112]	; (804e38c <mem_malloc+0x204>)
 804e31a:	4818      	ldr	r0, [pc, #96]	; (804e37c <mem_malloc+0x1f4>)
 804e31c:	f00a fe8a 	bl	8059034 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 804e320:	697b      	ldr	r3, [r7, #20]
 804e322:	f003 0303 	and.w	r3, r3, #3
 804e326:	2b00      	cmp	r3, #0
 804e328:	d006      	beq.n	804e338 <mem_malloc+0x1b0>
 804e32a:	4b12      	ldr	r3, [pc, #72]	; (804e374 <mem_malloc+0x1ec>)
 804e32c:	f240 32bd 	movw	r2, #957	; 0x3bd
 804e330:	4917      	ldr	r1, [pc, #92]	; (804e390 <mem_malloc+0x208>)
 804e332:	4812      	ldr	r0, [pc, #72]	; (804e37c <mem_malloc+0x1f4>)
 804e334:	f00a fe7e 	bl	8059034 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 804e338:	697b      	ldr	r3, [r7, #20]
 804e33a:	3308      	adds	r3, #8
 804e33c:	e011      	b.n	804e362 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 804e33e:	8bfb      	ldrh	r3, [r7, #30]
 804e340:	4618      	mov	r0, r3
 804e342:	f7ff fc33 	bl	804dbac <ptr_to_mem>
 804e346:	4603      	mov	r3, r0
 804e348:	881b      	ldrh	r3, [r3, #0]
 804e34a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 804e34c:	8bfa      	ldrh	r2, [r7, #30]
 804e34e:	8bbb      	ldrh	r3, [r7, #28]
 804e350:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 804e354:	429a      	cmp	r2, r3
 804e356:	f4ff af41 	bcc.w	804e1dc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 804e35a:	4804      	ldr	r0, [pc, #16]	; (804e36c <mem_malloc+0x1e4>)
 804e35c:	f00a fbc3 	bl	8058ae6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 804e360:	2300      	movs	r3, #0
}
 804e362:	4618      	mov	r0, r3
 804e364:	3720      	adds	r7, #32
 804e366:	46bd      	mov	sp, r7
 804e368:	bd80      	pop	{r7, pc}
 804e36a:	bf00      	nop
 804e36c:	200084ec 	.word	0x200084ec
 804e370:	200084f0 	.word	0x200084f0
 804e374:	0805ae48 	.word	0x0805ae48
 804e378:	0805b00c 	.word	0x0805b00c
 804e37c:	0805ae90 	.word	0x0805ae90
 804e380:	200084e8 	.word	0x200084e8
 804e384:	0805b020 	.word	0x0805b020
 804e388:	0805b03c 	.word	0x0805b03c
 804e38c:	0805b06c 	.word	0x0805b06c
 804e390:	0805b09c 	.word	0x0805b09c

0804e394 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 804e394:	b480      	push	{r7}
 804e396:	b085      	sub	sp, #20
 804e398:	af00      	add	r7, sp, #0
 804e39a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 804e39c:	687b      	ldr	r3, [r7, #4]
 804e39e:	689b      	ldr	r3, [r3, #8]
 804e3a0:	2200      	movs	r2, #0
 804e3a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 804e3a4:	687b      	ldr	r3, [r7, #4]
 804e3a6:	685b      	ldr	r3, [r3, #4]
 804e3a8:	3303      	adds	r3, #3
 804e3aa:	f023 0303 	bic.w	r3, r3, #3
 804e3ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 804e3b0:	2300      	movs	r3, #0
 804e3b2:	60fb      	str	r3, [r7, #12]
 804e3b4:	e011      	b.n	804e3da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 804e3b6:	687b      	ldr	r3, [r7, #4]
 804e3b8:	689b      	ldr	r3, [r3, #8]
 804e3ba:	681a      	ldr	r2, [r3, #0]
 804e3bc:	68bb      	ldr	r3, [r7, #8]
 804e3be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 804e3c0:	687b      	ldr	r3, [r7, #4]
 804e3c2:	689b      	ldr	r3, [r3, #8]
 804e3c4:	68ba      	ldr	r2, [r7, #8]
 804e3c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 804e3c8:	687b      	ldr	r3, [r7, #4]
 804e3ca:	881b      	ldrh	r3, [r3, #0]
 804e3cc:	461a      	mov	r2, r3
 804e3ce:	68bb      	ldr	r3, [r7, #8]
 804e3d0:	4413      	add	r3, r2
 804e3d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 804e3d4:	68fb      	ldr	r3, [r7, #12]
 804e3d6:	3301      	adds	r3, #1
 804e3d8:	60fb      	str	r3, [r7, #12]
 804e3da:	687b      	ldr	r3, [r7, #4]
 804e3dc:	885b      	ldrh	r3, [r3, #2]
 804e3de:	461a      	mov	r2, r3
 804e3e0:	68fb      	ldr	r3, [r7, #12]
 804e3e2:	4293      	cmp	r3, r2
 804e3e4:	dbe7      	blt.n	804e3b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 804e3e6:	bf00      	nop
 804e3e8:	bf00      	nop
 804e3ea:	3714      	adds	r7, #20
 804e3ec:	46bd      	mov	sp, r7
 804e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e3f2:	4770      	bx	lr

0804e3f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 804e3f4:	b580      	push	{r7, lr}
 804e3f6:	b082      	sub	sp, #8
 804e3f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 804e3fa:	2300      	movs	r3, #0
 804e3fc:	80fb      	strh	r3, [r7, #6]
 804e3fe:	e009      	b.n	804e414 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 804e400:	88fb      	ldrh	r3, [r7, #6]
 804e402:	4a08      	ldr	r2, [pc, #32]	; (804e424 <memp_init+0x30>)
 804e404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804e408:	4618      	mov	r0, r3
 804e40a:	f7ff ffc3 	bl	804e394 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 804e40e:	88fb      	ldrh	r3, [r7, #6]
 804e410:	3301      	adds	r3, #1
 804e412:	80fb      	strh	r3, [r7, #6]
 804e414:	88fb      	ldrh	r3, [r7, #6]
 804e416:	2b0c      	cmp	r3, #12
 804e418:	d9f2      	bls.n	804e400 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 804e41a:	bf00      	nop
 804e41c:	bf00      	nop
 804e41e:	3708      	adds	r7, #8
 804e420:	46bd      	mov	sp, r7
 804e422:	bd80      	pop	{r7, pc}
 804e424:	0805d8b4 	.word	0x0805d8b4

0804e428 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 804e428:	b580      	push	{r7, lr}
 804e42a:	b084      	sub	sp, #16
 804e42c:	af00      	add	r7, sp, #0
 804e42e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 804e430:	f00a fb8c 	bl	8058b4c <sys_arch_protect>
 804e434:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 804e436:	687b      	ldr	r3, [r7, #4]
 804e438:	689b      	ldr	r3, [r3, #8]
 804e43a:	681b      	ldr	r3, [r3, #0]
 804e43c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 804e43e:	68bb      	ldr	r3, [r7, #8]
 804e440:	2b00      	cmp	r3, #0
 804e442:	d015      	beq.n	804e470 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 804e444:	687b      	ldr	r3, [r7, #4]
 804e446:	689b      	ldr	r3, [r3, #8]
 804e448:	68ba      	ldr	r2, [r7, #8]
 804e44a:	6812      	ldr	r2, [r2, #0]
 804e44c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 804e44e:	68bb      	ldr	r3, [r7, #8]
 804e450:	f003 0303 	and.w	r3, r3, #3
 804e454:	2b00      	cmp	r3, #0
 804e456:	d006      	beq.n	804e466 <do_memp_malloc_pool+0x3e>
 804e458:	4b09      	ldr	r3, [pc, #36]	; (804e480 <do_memp_malloc_pool+0x58>)
 804e45a:	f44f 728c 	mov.w	r2, #280	; 0x118
 804e45e:	4909      	ldr	r1, [pc, #36]	; (804e484 <do_memp_malloc_pool+0x5c>)
 804e460:	4809      	ldr	r0, [pc, #36]	; (804e488 <do_memp_malloc_pool+0x60>)
 804e462:	f00a fde7 	bl	8059034 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 804e466:	68f8      	ldr	r0, [r7, #12]
 804e468:	f00a fb7e 	bl	8058b68 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 804e46c:	68bb      	ldr	r3, [r7, #8]
 804e46e:	e003      	b.n	804e478 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 804e470:	68f8      	ldr	r0, [r7, #12]
 804e472:	f00a fb79 	bl	8058b68 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 804e476:	2300      	movs	r3, #0
}
 804e478:	4618      	mov	r0, r3
 804e47a:	3710      	adds	r7, #16
 804e47c:	46bd      	mov	sp, r7
 804e47e:	bd80      	pop	{r7, pc}
 804e480:	0805b0c0 	.word	0x0805b0c0
 804e484:	0805b0f0 	.word	0x0805b0f0
 804e488:	0805b114 	.word	0x0805b114

0804e48c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 804e48c:	b580      	push	{r7, lr}
 804e48e:	b082      	sub	sp, #8
 804e490:	af00      	add	r7, sp, #0
 804e492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 804e494:	687b      	ldr	r3, [r7, #4]
 804e496:	2b00      	cmp	r3, #0
 804e498:	d106      	bne.n	804e4a8 <memp_malloc_pool+0x1c>
 804e49a:	4b0a      	ldr	r3, [pc, #40]	; (804e4c4 <memp_malloc_pool+0x38>)
 804e49c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 804e4a0:	4909      	ldr	r1, [pc, #36]	; (804e4c8 <memp_malloc_pool+0x3c>)
 804e4a2:	480a      	ldr	r0, [pc, #40]	; (804e4cc <memp_malloc_pool+0x40>)
 804e4a4:	f00a fdc6 	bl	8059034 <iprintf>
  if (desc == NULL) {
 804e4a8:	687b      	ldr	r3, [r7, #4]
 804e4aa:	2b00      	cmp	r3, #0
 804e4ac:	d101      	bne.n	804e4b2 <memp_malloc_pool+0x26>
    return NULL;
 804e4ae:	2300      	movs	r3, #0
 804e4b0:	e003      	b.n	804e4ba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 804e4b2:	6878      	ldr	r0, [r7, #4]
 804e4b4:	f7ff ffb8 	bl	804e428 <do_memp_malloc_pool>
 804e4b8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 804e4ba:	4618      	mov	r0, r3
 804e4bc:	3708      	adds	r7, #8
 804e4be:	46bd      	mov	sp, r7
 804e4c0:	bd80      	pop	{r7, pc}
 804e4c2:	bf00      	nop
 804e4c4:	0805b0c0 	.word	0x0805b0c0
 804e4c8:	0805b13c 	.word	0x0805b13c
 804e4cc:	0805b114 	.word	0x0805b114

0804e4d0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 804e4d0:	b580      	push	{r7, lr}
 804e4d2:	b084      	sub	sp, #16
 804e4d4:	af00      	add	r7, sp, #0
 804e4d6:	4603      	mov	r3, r0
 804e4d8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 804e4da:	79fb      	ldrb	r3, [r7, #7]
 804e4dc:	2b0c      	cmp	r3, #12
 804e4de:	d908      	bls.n	804e4f2 <memp_malloc+0x22>
 804e4e0:	4b0a      	ldr	r3, [pc, #40]	; (804e50c <memp_malloc+0x3c>)
 804e4e2:	f240 1257 	movw	r2, #343	; 0x157
 804e4e6:	490a      	ldr	r1, [pc, #40]	; (804e510 <memp_malloc+0x40>)
 804e4e8:	480a      	ldr	r0, [pc, #40]	; (804e514 <memp_malloc+0x44>)
 804e4ea:	f00a fda3 	bl	8059034 <iprintf>
 804e4ee:	2300      	movs	r3, #0
 804e4f0:	e008      	b.n	804e504 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 804e4f2:	79fb      	ldrb	r3, [r7, #7]
 804e4f4:	4a08      	ldr	r2, [pc, #32]	; (804e518 <memp_malloc+0x48>)
 804e4f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804e4fa:	4618      	mov	r0, r3
 804e4fc:	f7ff ff94 	bl	804e428 <do_memp_malloc_pool>
 804e500:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 804e502:	68fb      	ldr	r3, [r7, #12]
}
 804e504:	4618      	mov	r0, r3
 804e506:	3710      	adds	r7, #16
 804e508:	46bd      	mov	sp, r7
 804e50a:	bd80      	pop	{r7, pc}
 804e50c:	0805b0c0 	.word	0x0805b0c0
 804e510:	0805b150 	.word	0x0805b150
 804e514:	0805b114 	.word	0x0805b114
 804e518:	0805d8b4 	.word	0x0805d8b4

0804e51c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 804e51c:	b580      	push	{r7, lr}
 804e51e:	b084      	sub	sp, #16
 804e520:	af00      	add	r7, sp, #0
 804e522:	6078      	str	r0, [r7, #4]
 804e524:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 804e526:	683b      	ldr	r3, [r7, #0]
 804e528:	f003 0303 	and.w	r3, r3, #3
 804e52c:	2b00      	cmp	r3, #0
 804e52e:	d006      	beq.n	804e53e <do_memp_free_pool+0x22>
 804e530:	4b0d      	ldr	r3, [pc, #52]	; (804e568 <do_memp_free_pool+0x4c>)
 804e532:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 804e536:	490d      	ldr	r1, [pc, #52]	; (804e56c <do_memp_free_pool+0x50>)
 804e538:	480d      	ldr	r0, [pc, #52]	; (804e570 <do_memp_free_pool+0x54>)
 804e53a:	f00a fd7b 	bl	8059034 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 804e53e:	683b      	ldr	r3, [r7, #0]
 804e540:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 804e542:	f00a fb03 	bl	8058b4c <sys_arch_protect>
 804e546:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 804e548:	687b      	ldr	r3, [r7, #4]
 804e54a:	689b      	ldr	r3, [r3, #8]
 804e54c:	681a      	ldr	r2, [r3, #0]
 804e54e:	68fb      	ldr	r3, [r7, #12]
 804e550:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 804e552:	687b      	ldr	r3, [r7, #4]
 804e554:	689b      	ldr	r3, [r3, #8]
 804e556:	68fa      	ldr	r2, [r7, #12]
 804e558:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 804e55a:	68b8      	ldr	r0, [r7, #8]
 804e55c:	f00a fb04 	bl	8058b68 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 804e560:	bf00      	nop
 804e562:	3710      	adds	r7, #16
 804e564:	46bd      	mov	sp, r7
 804e566:	bd80      	pop	{r7, pc}
 804e568:	0805b0c0 	.word	0x0805b0c0
 804e56c:	0805b170 	.word	0x0805b170
 804e570:	0805b114 	.word	0x0805b114

0804e574 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 804e574:	b580      	push	{r7, lr}
 804e576:	b082      	sub	sp, #8
 804e578:	af00      	add	r7, sp, #0
 804e57a:	6078      	str	r0, [r7, #4]
 804e57c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 804e57e:	687b      	ldr	r3, [r7, #4]
 804e580:	2b00      	cmp	r3, #0
 804e582:	d106      	bne.n	804e592 <memp_free_pool+0x1e>
 804e584:	4b0a      	ldr	r3, [pc, #40]	; (804e5b0 <memp_free_pool+0x3c>)
 804e586:	f240 1295 	movw	r2, #405	; 0x195
 804e58a:	490a      	ldr	r1, [pc, #40]	; (804e5b4 <memp_free_pool+0x40>)
 804e58c:	480a      	ldr	r0, [pc, #40]	; (804e5b8 <memp_free_pool+0x44>)
 804e58e:	f00a fd51 	bl	8059034 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 804e592:	687b      	ldr	r3, [r7, #4]
 804e594:	2b00      	cmp	r3, #0
 804e596:	d007      	beq.n	804e5a8 <memp_free_pool+0x34>
 804e598:	683b      	ldr	r3, [r7, #0]
 804e59a:	2b00      	cmp	r3, #0
 804e59c:	d004      	beq.n	804e5a8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 804e59e:	6839      	ldr	r1, [r7, #0]
 804e5a0:	6878      	ldr	r0, [r7, #4]
 804e5a2:	f7ff ffbb 	bl	804e51c <do_memp_free_pool>
 804e5a6:	e000      	b.n	804e5aa <memp_free_pool+0x36>
    return;
 804e5a8:	bf00      	nop
}
 804e5aa:	3708      	adds	r7, #8
 804e5ac:	46bd      	mov	sp, r7
 804e5ae:	bd80      	pop	{r7, pc}
 804e5b0:	0805b0c0 	.word	0x0805b0c0
 804e5b4:	0805b13c 	.word	0x0805b13c
 804e5b8:	0805b114 	.word	0x0805b114

0804e5bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 804e5bc:	b580      	push	{r7, lr}
 804e5be:	b082      	sub	sp, #8
 804e5c0:	af00      	add	r7, sp, #0
 804e5c2:	4603      	mov	r3, r0
 804e5c4:	6039      	str	r1, [r7, #0]
 804e5c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 804e5c8:	79fb      	ldrb	r3, [r7, #7]
 804e5ca:	2b0c      	cmp	r3, #12
 804e5cc:	d907      	bls.n	804e5de <memp_free+0x22>
 804e5ce:	4b0c      	ldr	r3, [pc, #48]	; (804e600 <memp_free+0x44>)
 804e5d0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 804e5d4:	490b      	ldr	r1, [pc, #44]	; (804e604 <memp_free+0x48>)
 804e5d6:	480c      	ldr	r0, [pc, #48]	; (804e608 <memp_free+0x4c>)
 804e5d8:	f00a fd2c 	bl	8059034 <iprintf>
 804e5dc:	e00c      	b.n	804e5f8 <memp_free+0x3c>

  if (mem == NULL) {
 804e5de:	683b      	ldr	r3, [r7, #0]
 804e5e0:	2b00      	cmp	r3, #0
 804e5e2:	d008      	beq.n	804e5f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 804e5e4:	79fb      	ldrb	r3, [r7, #7]
 804e5e6:	4a09      	ldr	r2, [pc, #36]	; (804e60c <memp_free+0x50>)
 804e5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804e5ec:	6839      	ldr	r1, [r7, #0]
 804e5ee:	4618      	mov	r0, r3
 804e5f0:	f7ff ff94 	bl	804e51c <do_memp_free_pool>
 804e5f4:	e000      	b.n	804e5f8 <memp_free+0x3c>
    return;
 804e5f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 804e5f8:	3708      	adds	r7, #8
 804e5fa:	46bd      	mov	sp, r7
 804e5fc:	bd80      	pop	{r7, pc}
 804e5fe:	bf00      	nop
 804e600:	0805b0c0 	.word	0x0805b0c0
 804e604:	0805b190 	.word	0x0805b190
 804e608:	0805b114 	.word	0x0805b114
 804e60c:	0805d8b4 	.word	0x0805d8b4

0804e610 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 804e610:	b480      	push	{r7}
 804e612:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 804e614:	bf00      	nop
 804e616:	46bd      	mov	sp, r7
 804e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e61c:	4770      	bx	lr
	...

0804e620 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 804e620:	b580      	push	{r7, lr}
 804e622:	b086      	sub	sp, #24
 804e624:	af00      	add	r7, sp, #0
 804e626:	60f8      	str	r0, [r7, #12]
 804e628:	60b9      	str	r1, [r7, #8]
 804e62a:	607a      	str	r2, [r7, #4]
 804e62c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 804e62e:	68fb      	ldr	r3, [r7, #12]
 804e630:	2b00      	cmp	r3, #0
 804e632:	d108      	bne.n	804e646 <netif_add+0x26>
 804e634:	4b57      	ldr	r3, [pc, #348]	; (804e794 <netif_add+0x174>)
 804e636:	f240 1227 	movw	r2, #295	; 0x127
 804e63a:	4957      	ldr	r1, [pc, #348]	; (804e798 <netif_add+0x178>)
 804e63c:	4857      	ldr	r0, [pc, #348]	; (804e79c <netif_add+0x17c>)
 804e63e:	f00a fcf9 	bl	8059034 <iprintf>
 804e642:	2300      	movs	r3, #0
 804e644:	e0a2      	b.n	804e78c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 804e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804e648:	2b00      	cmp	r3, #0
 804e64a:	d108      	bne.n	804e65e <netif_add+0x3e>
 804e64c:	4b51      	ldr	r3, [pc, #324]	; (804e794 <netif_add+0x174>)
 804e64e:	f44f 7294 	mov.w	r2, #296	; 0x128
 804e652:	4953      	ldr	r1, [pc, #332]	; (804e7a0 <netif_add+0x180>)
 804e654:	4851      	ldr	r0, [pc, #324]	; (804e79c <netif_add+0x17c>)
 804e656:	f00a fced 	bl	8059034 <iprintf>
 804e65a:	2300      	movs	r3, #0
 804e65c:	e096      	b.n	804e78c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 804e65e:	68bb      	ldr	r3, [r7, #8]
 804e660:	2b00      	cmp	r3, #0
 804e662:	d101      	bne.n	804e668 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 804e664:	4b4f      	ldr	r3, [pc, #316]	; (804e7a4 <netif_add+0x184>)
 804e666:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 804e668:	687b      	ldr	r3, [r7, #4]
 804e66a:	2b00      	cmp	r3, #0
 804e66c:	d101      	bne.n	804e672 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 804e66e:	4b4d      	ldr	r3, [pc, #308]	; (804e7a4 <netif_add+0x184>)
 804e670:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 804e672:	683b      	ldr	r3, [r7, #0]
 804e674:	2b00      	cmp	r3, #0
 804e676:	d101      	bne.n	804e67c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 804e678:	4b4a      	ldr	r3, [pc, #296]	; (804e7a4 <netif_add+0x184>)
 804e67a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 804e67c:	68fb      	ldr	r3, [r7, #12]
 804e67e:	2200      	movs	r2, #0
 804e680:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 804e682:	68fb      	ldr	r3, [r7, #12]
 804e684:	2200      	movs	r2, #0
 804e686:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 804e688:	68fb      	ldr	r3, [r7, #12]
 804e68a:	2200      	movs	r2, #0
 804e68c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 804e68e:	68fb      	ldr	r3, [r7, #12]
 804e690:	4a45      	ldr	r2, [pc, #276]	; (804e7a8 <netif_add+0x188>)
 804e692:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 804e694:	68fb      	ldr	r3, [r7, #12]
 804e696:	2200      	movs	r2, #0
 804e698:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 804e69a:	68fb      	ldr	r3, [r7, #12]
 804e69c:	2200      	movs	r2, #0
 804e69e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 804e6a2:	68fb      	ldr	r3, [r7, #12]
 804e6a4:	2200      	movs	r2, #0
 804e6a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 804e6a8:	68fb      	ldr	r3, [r7, #12]
 804e6aa:	6a3a      	ldr	r2, [r7, #32]
 804e6ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 804e6ae:	4b3f      	ldr	r3, [pc, #252]	; (804e7ac <netif_add+0x18c>)
 804e6b0:	781a      	ldrb	r2, [r3, #0]
 804e6b2:	68fb      	ldr	r3, [r7, #12]
 804e6b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 804e6b8:	68fb      	ldr	r3, [r7, #12]
 804e6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804e6bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 804e6be:	683b      	ldr	r3, [r7, #0]
 804e6c0:	687a      	ldr	r2, [r7, #4]
 804e6c2:	68b9      	ldr	r1, [r7, #8]
 804e6c4:	68f8      	ldr	r0, [r7, #12]
 804e6c6:	f000 f913 	bl	804e8f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 804e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804e6cc:	68f8      	ldr	r0, [r7, #12]
 804e6ce:	4798      	blx	r3
 804e6d0:	4603      	mov	r3, r0
 804e6d2:	2b00      	cmp	r3, #0
 804e6d4:	d001      	beq.n	804e6da <netif_add+0xba>
    return NULL;
 804e6d6:	2300      	movs	r3, #0
 804e6d8:	e058      	b.n	804e78c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 804e6da:	68fb      	ldr	r3, [r7, #12]
 804e6dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e6e0:	2bff      	cmp	r3, #255	; 0xff
 804e6e2:	d103      	bne.n	804e6ec <netif_add+0xcc>
        netif->num = 0;
 804e6e4:	68fb      	ldr	r3, [r7, #12]
 804e6e6:	2200      	movs	r2, #0
 804e6e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 804e6ec:	2300      	movs	r3, #0
 804e6ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 804e6f0:	4b2f      	ldr	r3, [pc, #188]	; (804e7b0 <netif_add+0x190>)
 804e6f2:	681b      	ldr	r3, [r3, #0]
 804e6f4:	617b      	str	r3, [r7, #20]
 804e6f6:	e02b      	b.n	804e750 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 804e6f8:	697a      	ldr	r2, [r7, #20]
 804e6fa:	68fb      	ldr	r3, [r7, #12]
 804e6fc:	429a      	cmp	r2, r3
 804e6fe:	d106      	bne.n	804e70e <netif_add+0xee>
 804e700:	4b24      	ldr	r3, [pc, #144]	; (804e794 <netif_add+0x174>)
 804e702:	f240 128b 	movw	r2, #395	; 0x18b
 804e706:	492b      	ldr	r1, [pc, #172]	; (804e7b4 <netif_add+0x194>)
 804e708:	4824      	ldr	r0, [pc, #144]	; (804e79c <netif_add+0x17c>)
 804e70a:	f00a fc93 	bl	8059034 <iprintf>
        num_netifs++;
 804e70e:	693b      	ldr	r3, [r7, #16]
 804e710:	3301      	adds	r3, #1
 804e712:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 804e714:	693b      	ldr	r3, [r7, #16]
 804e716:	2bff      	cmp	r3, #255	; 0xff
 804e718:	dd06      	ble.n	804e728 <netif_add+0x108>
 804e71a:	4b1e      	ldr	r3, [pc, #120]	; (804e794 <netif_add+0x174>)
 804e71c:	f240 128d 	movw	r2, #397	; 0x18d
 804e720:	4925      	ldr	r1, [pc, #148]	; (804e7b8 <netif_add+0x198>)
 804e722:	481e      	ldr	r0, [pc, #120]	; (804e79c <netif_add+0x17c>)
 804e724:	f00a fc86 	bl	8059034 <iprintf>
        if (netif2->num == netif->num) {
 804e728:	697b      	ldr	r3, [r7, #20]
 804e72a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 804e72e:	68fb      	ldr	r3, [r7, #12]
 804e730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e734:	429a      	cmp	r2, r3
 804e736:	d108      	bne.n	804e74a <netif_add+0x12a>
          netif->num++;
 804e738:	68fb      	ldr	r3, [r7, #12]
 804e73a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e73e:	3301      	adds	r3, #1
 804e740:	b2da      	uxtb	r2, r3
 804e742:	68fb      	ldr	r3, [r7, #12]
 804e744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 804e748:	e005      	b.n	804e756 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 804e74a:	697b      	ldr	r3, [r7, #20]
 804e74c:	681b      	ldr	r3, [r3, #0]
 804e74e:	617b      	str	r3, [r7, #20]
 804e750:	697b      	ldr	r3, [r7, #20]
 804e752:	2b00      	cmp	r3, #0
 804e754:	d1d0      	bne.n	804e6f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 804e756:	697b      	ldr	r3, [r7, #20]
 804e758:	2b00      	cmp	r3, #0
 804e75a:	d1be      	bne.n	804e6da <netif_add+0xba>
  }
  if (netif->num == 254) {
 804e75c:	68fb      	ldr	r3, [r7, #12]
 804e75e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e762:	2bfe      	cmp	r3, #254	; 0xfe
 804e764:	d103      	bne.n	804e76e <netif_add+0x14e>
    netif_num = 0;
 804e766:	4b11      	ldr	r3, [pc, #68]	; (804e7ac <netif_add+0x18c>)
 804e768:	2200      	movs	r2, #0
 804e76a:	701a      	strb	r2, [r3, #0]
 804e76c:	e006      	b.n	804e77c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 804e76e:	68fb      	ldr	r3, [r7, #12]
 804e770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804e774:	3301      	adds	r3, #1
 804e776:	b2da      	uxtb	r2, r3
 804e778:	4b0c      	ldr	r3, [pc, #48]	; (804e7ac <netif_add+0x18c>)
 804e77a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 804e77c:	4b0c      	ldr	r3, [pc, #48]	; (804e7b0 <netif_add+0x190>)
 804e77e:	681a      	ldr	r2, [r3, #0]
 804e780:	68fb      	ldr	r3, [r7, #12]
 804e782:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 804e784:	4a0a      	ldr	r2, [pc, #40]	; (804e7b0 <netif_add+0x190>)
 804e786:	68fb      	ldr	r3, [r7, #12]
 804e788:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 804e78a:	68fb      	ldr	r3, [r7, #12]
}
 804e78c:	4618      	mov	r0, r3
 804e78e:	3718      	adds	r7, #24
 804e790:	46bd      	mov	sp, r7
 804e792:	bd80      	pop	{r7, pc}
 804e794:	0805b1ac 	.word	0x0805b1ac
 804e798:	0805b240 	.word	0x0805b240
 804e79c:	0805b1fc 	.word	0x0805b1fc
 804e7a0:	0805b25c 	.word	0x0805b25c
 804e7a4:	0805d928 	.word	0x0805d928
 804e7a8:	0804ebcb 	.word	0x0804ebcb
 804e7ac:	2000b5c8 	.word	0x2000b5c8
 804e7b0:	2000b5c0 	.word	0x2000b5c0
 804e7b4:	0805b280 	.word	0x0805b280
 804e7b8:	0805b294 	.word	0x0805b294

0804e7bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 804e7bc:	b580      	push	{r7, lr}
 804e7be:	b082      	sub	sp, #8
 804e7c0:	af00      	add	r7, sp, #0
 804e7c2:	6078      	str	r0, [r7, #4]
 804e7c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 804e7c6:	6839      	ldr	r1, [r7, #0]
 804e7c8:	6878      	ldr	r0, [r7, #4]
 804e7ca:	f002 fe4f 	bl	805146c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 804e7ce:	6839      	ldr	r1, [r7, #0]
 804e7d0:	6878      	ldr	r0, [r7, #4]
 804e7d2:	f007 fd01 	bl	80561d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 804e7d6:	bf00      	nop
 804e7d8:	3708      	adds	r7, #8
 804e7da:	46bd      	mov	sp, r7
 804e7dc:	bd80      	pop	{r7, pc}
	...

0804e7e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 804e7e0:	b580      	push	{r7, lr}
 804e7e2:	b086      	sub	sp, #24
 804e7e4:	af00      	add	r7, sp, #0
 804e7e6:	60f8      	str	r0, [r7, #12]
 804e7e8:	60b9      	str	r1, [r7, #8]
 804e7ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 804e7ec:	68bb      	ldr	r3, [r7, #8]
 804e7ee:	2b00      	cmp	r3, #0
 804e7f0:	d106      	bne.n	804e800 <netif_do_set_ipaddr+0x20>
 804e7f2:	4b1d      	ldr	r3, [pc, #116]	; (804e868 <netif_do_set_ipaddr+0x88>)
 804e7f4:	f240 12cb 	movw	r2, #459	; 0x1cb
 804e7f8:	491c      	ldr	r1, [pc, #112]	; (804e86c <netif_do_set_ipaddr+0x8c>)
 804e7fa:	481d      	ldr	r0, [pc, #116]	; (804e870 <netif_do_set_ipaddr+0x90>)
 804e7fc:	f00a fc1a 	bl	8059034 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 804e800:	687b      	ldr	r3, [r7, #4]
 804e802:	2b00      	cmp	r3, #0
 804e804:	d106      	bne.n	804e814 <netif_do_set_ipaddr+0x34>
 804e806:	4b18      	ldr	r3, [pc, #96]	; (804e868 <netif_do_set_ipaddr+0x88>)
 804e808:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 804e80c:	4917      	ldr	r1, [pc, #92]	; (804e86c <netif_do_set_ipaddr+0x8c>)
 804e80e:	4818      	ldr	r0, [pc, #96]	; (804e870 <netif_do_set_ipaddr+0x90>)
 804e810:	f00a fc10 	bl	8059034 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 804e814:	68bb      	ldr	r3, [r7, #8]
 804e816:	681a      	ldr	r2, [r3, #0]
 804e818:	68fb      	ldr	r3, [r7, #12]
 804e81a:	3304      	adds	r3, #4
 804e81c:	681b      	ldr	r3, [r3, #0]
 804e81e:	429a      	cmp	r2, r3
 804e820:	d01c      	beq.n	804e85c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 804e822:	68bb      	ldr	r3, [r7, #8]
 804e824:	681b      	ldr	r3, [r3, #0]
 804e826:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 804e828:	68fb      	ldr	r3, [r7, #12]
 804e82a:	3304      	adds	r3, #4
 804e82c:	681a      	ldr	r2, [r3, #0]
 804e82e:	687b      	ldr	r3, [r7, #4]
 804e830:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 804e832:	f107 0314 	add.w	r3, r7, #20
 804e836:	4619      	mov	r1, r3
 804e838:	6878      	ldr	r0, [r7, #4]
 804e83a:	f7ff ffbf 	bl	804e7bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 804e83e:	68bb      	ldr	r3, [r7, #8]
 804e840:	2b00      	cmp	r3, #0
 804e842:	d002      	beq.n	804e84a <netif_do_set_ipaddr+0x6a>
 804e844:	68bb      	ldr	r3, [r7, #8]
 804e846:	681b      	ldr	r3, [r3, #0]
 804e848:	e000      	b.n	804e84c <netif_do_set_ipaddr+0x6c>
 804e84a:	2300      	movs	r3, #0
 804e84c:	68fa      	ldr	r2, [r7, #12]
 804e84e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 804e850:	2101      	movs	r1, #1
 804e852:	68f8      	ldr	r0, [r7, #12]
 804e854:	f000 f8d2 	bl	804e9fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 804e858:	2301      	movs	r3, #1
 804e85a:	e000      	b.n	804e85e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 804e85c:	2300      	movs	r3, #0
}
 804e85e:	4618      	mov	r0, r3
 804e860:	3718      	adds	r7, #24
 804e862:	46bd      	mov	sp, r7
 804e864:	bd80      	pop	{r7, pc}
 804e866:	bf00      	nop
 804e868:	0805b1ac 	.word	0x0805b1ac
 804e86c:	0805b2c4 	.word	0x0805b2c4
 804e870:	0805b1fc 	.word	0x0805b1fc

0804e874 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 804e874:	b480      	push	{r7}
 804e876:	b085      	sub	sp, #20
 804e878:	af00      	add	r7, sp, #0
 804e87a:	60f8      	str	r0, [r7, #12]
 804e87c:	60b9      	str	r1, [r7, #8]
 804e87e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 804e880:	68bb      	ldr	r3, [r7, #8]
 804e882:	681a      	ldr	r2, [r3, #0]
 804e884:	68fb      	ldr	r3, [r7, #12]
 804e886:	3308      	adds	r3, #8
 804e888:	681b      	ldr	r3, [r3, #0]
 804e88a:	429a      	cmp	r2, r3
 804e88c:	d00a      	beq.n	804e8a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 804e88e:	68bb      	ldr	r3, [r7, #8]
 804e890:	2b00      	cmp	r3, #0
 804e892:	d002      	beq.n	804e89a <netif_do_set_netmask+0x26>
 804e894:	68bb      	ldr	r3, [r7, #8]
 804e896:	681b      	ldr	r3, [r3, #0]
 804e898:	e000      	b.n	804e89c <netif_do_set_netmask+0x28>
 804e89a:	2300      	movs	r3, #0
 804e89c:	68fa      	ldr	r2, [r7, #12]
 804e89e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 804e8a0:	2301      	movs	r3, #1
 804e8a2:	e000      	b.n	804e8a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 804e8a4:	2300      	movs	r3, #0
}
 804e8a6:	4618      	mov	r0, r3
 804e8a8:	3714      	adds	r7, #20
 804e8aa:	46bd      	mov	sp, r7
 804e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e8b0:	4770      	bx	lr

0804e8b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 804e8b2:	b480      	push	{r7}
 804e8b4:	b085      	sub	sp, #20
 804e8b6:	af00      	add	r7, sp, #0
 804e8b8:	60f8      	str	r0, [r7, #12]
 804e8ba:	60b9      	str	r1, [r7, #8]
 804e8bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 804e8be:	68bb      	ldr	r3, [r7, #8]
 804e8c0:	681a      	ldr	r2, [r3, #0]
 804e8c2:	68fb      	ldr	r3, [r7, #12]
 804e8c4:	330c      	adds	r3, #12
 804e8c6:	681b      	ldr	r3, [r3, #0]
 804e8c8:	429a      	cmp	r2, r3
 804e8ca:	d00a      	beq.n	804e8e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 804e8cc:	68bb      	ldr	r3, [r7, #8]
 804e8ce:	2b00      	cmp	r3, #0
 804e8d0:	d002      	beq.n	804e8d8 <netif_do_set_gw+0x26>
 804e8d2:	68bb      	ldr	r3, [r7, #8]
 804e8d4:	681b      	ldr	r3, [r3, #0]
 804e8d6:	e000      	b.n	804e8da <netif_do_set_gw+0x28>
 804e8d8:	2300      	movs	r3, #0
 804e8da:	68fa      	ldr	r2, [r7, #12]
 804e8dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 804e8de:	2301      	movs	r3, #1
 804e8e0:	e000      	b.n	804e8e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 804e8e2:	2300      	movs	r3, #0
}
 804e8e4:	4618      	mov	r0, r3
 804e8e6:	3714      	adds	r7, #20
 804e8e8:	46bd      	mov	sp, r7
 804e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e8ee:	4770      	bx	lr

0804e8f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 804e8f0:	b580      	push	{r7, lr}
 804e8f2:	b088      	sub	sp, #32
 804e8f4:	af00      	add	r7, sp, #0
 804e8f6:	60f8      	str	r0, [r7, #12]
 804e8f8:	60b9      	str	r1, [r7, #8]
 804e8fa:	607a      	str	r2, [r7, #4]
 804e8fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 804e8fe:	2300      	movs	r3, #0
 804e900:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 804e902:	2300      	movs	r3, #0
 804e904:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 804e906:	68bb      	ldr	r3, [r7, #8]
 804e908:	2b00      	cmp	r3, #0
 804e90a:	d101      	bne.n	804e910 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 804e90c:	4b1c      	ldr	r3, [pc, #112]	; (804e980 <netif_set_addr+0x90>)
 804e90e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 804e910:	687b      	ldr	r3, [r7, #4]
 804e912:	2b00      	cmp	r3, #0
 804e914:	d101      	bne.n	804e91a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 804e916:	4b1a      	ldr	r3, [pc, #104]	; (804e980 <netif_set_addr+0x90>)
 804e918:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 804e91a:	683b      	ldr	r3, [r7, #0]
 804e91c:	2b00      	cmp	r3, #0
 804e91e:	d101      	bne.n	804e924 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 804e920:	4b17      	ldr	r3, [pc, #92]	; (804e980 <netif_set_addr+0x90>)
 804e922:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 804e924:	68bb      	ldr	r3, [r7, #8]
 804e926:	2b00      	cmp	r3, #0
 804e928:	d003      	beq.n	804e932 <netif_set_addr+0x42>
 804e92a:	68bb      	ldr	r3, [r7, #8]
 804e92c:	681b      	ldr	r3, [r3, #0]
 804e92e:	2b00      	cmp	r3, #0
 804e930:	d101      	bne.n	804e936 <netif_set_addr+0x46>
 804e932:	2301      	movs	r3, #1
 804e934:	e000      	b.n	804e938 <netif_set_addr+0x48>
 804e936:	2300      	movs	r3, #0
 804e938:	617b      	str	r3, [r7, #20]
  if (remove) {
 804e93a:	697b      	ldr	r3, [r7, #20]
 804e93c:	2b00      	cmp	r3, #0
 804e93e:	d006      	beq.n	804e94e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 804e940:	f107 0310 	add.w	r3, r7, #16
 804e944:	461a      	mov	r2, r3
 804e946:	68b9      	ldr	r1, [r7, #8]
 804e948:	68f8      	ldr	r0, [r7, #12]
 804e94a:	f7ff ff49 	bl	804e7e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 804e94e:	69fa      	ldr	r2, [r7, #28]
 804e950:	6879      	ldr	r1, [r7, #4]
 804e952:	68f8      	ldr	r0, [r7, #12]
 804e954:	f7ff ff8e 	bl	804e874 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 804e958:	69ba      	ldr	r2, [r7, #24]
 804e95a:	6839      	ldr	r1, [r7, #0]
 804e95c:	68f8      	ldr	r0, [r7, #12]
 804e95e:	f7ff ffa8 	bl	804e8b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 804e962:	697b      	ldr	r3, [r7, #20]
 804e964:	2b00      	cmp	r3, #0
 804e966:	d106      	bne.n	804e976 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 804e968:	f107 0310 	add.w	r3, r7, #16
 804e96c:	461a      	mov	r2, r3
 804e96e:	68b9      	ldr	r1, [r7, #8]
 804e970:	68f8      	ldr	r0, [r7, #12]
 804e972:	f7ff ff35 	bl	804e7e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 804e976:	bf00      	nop
 804e978:	3720      	adds	r7, #32
 804e97a:	46bd      	mov	sp, r7
 804e97c:	bd80      	pop	{r7, pc}
 804e97e:	bf00      	nop
 804e980:	0805d928 	.word	0x0805d928

0804e984 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 804e984:	b480      	push	{r7}
 804e986:	b083      	sub	sp, #12
 804e988:	af00      	add	r7, sp, #0
 804e98a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 804e98c:	4a04      	ldr	r2, [pc, #16]	; (804e9a0 <netif_set_default+0x1c>)
 804e98e:	687b      	ldr	r3, [r7, #4]
 804e990:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 804e992:	bf00      	nop
 804e994:	370c      	adds	r7, #12
 804e996:	46bd      	mov	sp, r7
 804e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e99c:	4770      	bx	lr
 804e99e:	bf00      	nop
 804e9a0:	2000b5c4 	.word	0x2000b5c4

0804e9a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 804e9a4:	b580      	push	{r7, lr}
 804e9a6:	b082      	sub	sp, #8
 804e9a8:	af00      	add	r7, sp, #0
 804e9aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 804e9ac:	687b      	ldr	r3, [r7, #4]
 804e9ae:	2b00      	cmp	r3, #0
 804e9b0:	d107      	bne.n	804e9c2 <netif_set_up+0x1e>
 804e9b2:	4b0f      	ldr	r3, [pc, #60]	; (804e9f0 <netif_set_up+0x4c>)
 804e9b4:	f44f 7254 	mov.w	r2, #848	; 0x350
 804e9b8:	490e      	ldr	r1, [pc, #56]	; (804e9f4 <netif_set_up+0x50>)
 804e9ba:	480f      	ldr	r0, [pc, #60]	; (804e9f8 <netif_set_up+0x54>)
 804e9bc:	f00a fb3a 	bl	8059034 <iprintf>
 804e9c0:	e013      	b.n	804e9ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 804e9c2:	687b      	ldr	r3, [r7, #4]
 804e9c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804e9c8:	f003 0301 	and.w	r3, r3, #1
 804e9cc:	2b00      	cmp	r3, #0
 804e9ce:	d10c      	bne.n	804e9ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 804e9d0:	687b      	ldr	r3, [r7, #4]
 804e9d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804e9d6:	f043 0301 	orr.w	r3, r3, #1
 804e9da:	b2da      	uxtb	r2, r3
 804e9dc:	687b      	ldr	r3, [r7, #4]
 804e9de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 804e9e2:	2103      	movs	r1, #3
 804e9e4:	6878      	ldr	r0, [r7, #4]
 804e9e6:	f000 f809 	bl	804e9fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 804e9ea:	3708      	adds	r7, #8
 804e9ec:	46bd      	mov	sp, r7
 804e9ee:	bd80      	pop	{r7, pc}
 804e9f0:	0805b1ac 	.word	0x0805b1ac
 804e9f4:	0805b334 	.word	0x0805b334
 804e9f8:	0805b1fc 	.word	0x0805b1fc

0804e9fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 804e9fc:	b580      	push	{r7, lr}
 804e9fe:	b082      	sub	sp, #8
 804ea00:	af00      	add	r7, sp, #0
 804ea02:	6078      	str	r0, [r7, #4]
 804ea04:	460b      	mov	r3, r1
 804ea06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 804ea08:	687b      	ldr	r3, [r7, #4]
 804ea0a:	2b00      	cmp	r3, #0
 804ea0c:	d106      	bne.n	804ea1c <netif_issue_reports+0x20>
 804ea0e:	4b18      	ldr	r3, [pc, #96]	; (804ea70 <netif_issue_reports+0x74>)
 804ea10:	f240 326d 	movw	r2, #877	; 0x36d
 804ea14:	4917      	ldr	r1, [pc, #92]	; (804ea74 <netif_issue_reports+0x78>)
 804ea16:	4818      	ldr	r0, [pc, #96]	; (804ea78 <netif_issue_reports+0x7c>)
 804ea18:	f00a fb0c 	bl	8059034 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 804ea1c:	687b      	ldr	r3, [r7, #4]
 804ea1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804ea22:	f003 0304 	and.w	r3, r3, #4
 804ea26:	2b00      	cmp	r3, #0
 804ea28:	d01e      	beq.n	804ea68 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 804ea2a:	687b      	ldr	r3, [r7, #4]
 804ea2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804ea30:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 804ea34:	2b00      	cmp	r3, #0
 804ea36:	d017      	beq.n	804ea68 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 804ea38:	78fb      	ldrb	r3, [r7, #3]
 804ea3a:	f003 0301 	and.w	r3, r3, #1
 804ea3e:	2b00      	cmp	r3, #0
 804ea40:	d013      	beq.n	804ea6a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 804ea42:	687b      	ldr	r3, [r7, #4]
 804ea44:	3304      	adds	r3, #4
 804ea46:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 804ea48:	2b00      	cmp	r3, #0
 804ea4a:	d00e      	beq.n	804ea6a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 804ea4c:	687b      	ldr	r3, [r7, #4]
 804ea4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804ea52:	f003 0308 	and.w	r3, r3, #8
 804ea56:	2b00      	cmp	r3, #0
 804ea58:	d007      	beq.n	804ea6a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 804ea5a:	687b      	ldr	r3, [r7, #4]
 804ea5c:	3304      	adds	r3, #4
 804ea5e:	4619      	mov	r1, r3
 804ea60:	6878      	ldr	r0, [r7, #4]
 804ea62:	f008 fb23 	bl	80570ac <etharp_request>
 804ea66:	e000      	b.n	804ea6a <netif_issue_reports+0x6e>
    return;
 804ea68:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 804ea6a:	3708      	adds	r7, #8
 804ea6c:	46bd      	mov	sp, r7
 804ea6e:	bd80      	pop	{r7, pc}
 804ea70:	0805b1ac 	.word	0x0805b1ac
 804ea74:	0805b350 	.word	0x0805b350
 804ea78:	0805b1fc 	.word	0x0805b1fc

0804ea7c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 804ea7c:	b580      	push	{r7, lr}
 804ea7e:	b082      	sub	sp, #8
 804ea80:	af00      	add	r7, sp, #0
 804ea82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 804ea84:	687b      	ldr	r3, [r7, #4]
 804ea86:	2b00      	cmp	r3, #0
 804ea88:	d107      	bne.n	804ea9a <netif_set_down+0x1e>
 804ea8a:	4b12      	ldr	r3, [pc, #72]	; (804ead4 <netif_set_down+0x58>)
 804ea8c:	f240 329b 	movw	r2, #923	; 0x39b
 804ea90:	4911      	ldr	r1, [pc, #68]	; (804ead8 <netif_set_down+0x5c>)
 804ea92:	4812      	ldr	r0, [pc, #72]	; (804eadc <netif_set_down+0x60>)
 804ea94:	f00a face 	bl	8059034 <iprintf>
 804ea98:	e019      	b.n	804eace <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 804ea9a:	687b      	ldr	r3, [r7, #4]
 804ea9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eaa0:	f003 0301 	and.w	r3, r3, #1
 804eaa4:	2b00      	cmp	r3, #0
 804eaa6:	d012      	beq.n	804eace <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 804eaa8:	687b      	ldr	r3, [r7, #4]
 804eaaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eaae:	f023 0301 	bic.w	r3, r3, #1
 804eab2:	b2da      	uxtb	r2, r3
 804eab4:	687b      	ldr	r3, [r7, #4]
 804eab6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 804eaba:	687b      	ldr	r3, [r7, #4]
 804eabc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eac0:	f003 0308 	and.w	r3, r3, #8
 804eac4:	2b00      	cmp	r3, #0
 804eac6:	d002      	beq.n	804eace <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 804eac8:	6878      	ldr	r0, [r7, #4]
 804eaca:	f007 fead 	bl	8056828 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 804eace:	3708      	adds	r7, #8
 804ead0:	46bd      	mov	sp, r7
 804ead2:	bd80      	pop	{r7, pc}
 804ead4:	0805b1ac 	.word	0x0805b1ac
 804ead8:	0805b374 	.word	0x0805b374
 804eadc:	0805b1fc 	.word	0x0805b1fc

0804eae0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 804eae0:	b580      	push	{r7, lr}
 804eae2:	b082      	sub	sp, #8
 804eae4:	af00      	add	r7, sp, #0
 804eae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 804eae8:	687b      	ldr	r3, [r7, #4]
 804eaea:	2b00      	cmp	r3, #0
 804eaec:	d107      	bne.n	804eafe <netif_set_link_up+0x1e>
 804eaee:	4b13      	ldr	r3, [pc, #76]	; (804eb3c <netif_set_link_up+0x5c>)
 804eaf0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 804eaf4:	4912      	ldr	r1, [pc, #72]	; (804eb40 <netif_set_link_up+0x60>)
 804eaf6:	4813      	ldr	r0, [pc, #76]	; (804eb44 <netif_set_link_up+0x64>)
 804eaf8:	f00a fa9c 	bl	8059034 <iprintf>
 804eafc:	e01b      	b.n	804eb36 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 804eafe:	687b      	ldr	r3, [r7, #4]
 804eb00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eb04:	f003 0304 	and.w	r3, r3, #4
 804eb08:	2b00      	cmp	r3, #0
 804eb0a:	d114      	bne.n	804eb36 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 804eb0c:	687b      	ldr	r3, [r7, #4]
 804eb0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eb12:	f043 0304 	orr.w	r3, r3, #4
 804eb16:	b2da      	uxtb	r2, r3
 804eb18:	687b      	ldr	r3, [r7, #4]
 804eb1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 804eb1e:	2103      	movs	r1, #3
 804eb20:	6878      	ldr	r0, [r7, #4]
 804eb22:	f7ff ff6b 	bl	804e9fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 804eb26:	687b      	ldr	r3, [r7, #4]
 804eb28:	69db      	ldr	r3, [r3, #28]
 804eb2a:	2b00      	cmp	r3, #0
 804eb2c:	d003      	beq.n	804eb36 <netif_set_link_up+0x56>
 804eb2e:	687b      	ldr	r3, [r7, #4]
 804eb30:	69db      	ldr	r3, [r3, #28]
 804eb32:	6878      	ldr	r0, [r7, #4]
 804eb34:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 804eb36:	3708      	adds	r7, #8
 804eb38:	46bd      	mov	sp, r7
 804eb3a:	bd80      	pop	{r7, pc}
 804eb3c:	0805b1ac 	.word	0x0805b1ac
 804eb40:	0805b394 	.word	0x0805b394
 804eb44:	0805b1fc 	.word	0x0805b1fc

0804eb48 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 804eb48:	b580      	push	{r7, lr}
 804eb4a:	b082      	sub	sp, #8
 804eb4c:	af00      	add	r7, sp, #0
 804eb4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 804eb50:	687b      	ldr	r3, [r7, #4]
 804eb52:	2b00      	cmp	r3, #0
 804eb54:	d107      	bne.n	804eb66 <netif_set_link_down+0x1e>
 804eb56:	4b11      	ldr	r3, [pc, #68]	; (804eb9c <netif_set_link_down+0x54>)
 804eb58:	f240 4206 	movw	r2, #1030	; 0x406
 804eb5c:	4910      	ldr	r1, [pc, #64]	; (804eba0 <netif_set_link_down+0x58>)
 804eb5e:	4811      	ldr	r0, [pc, #68]	; (804eba4 <netif_set_link_down+0x5c>)
 804eb60:	f00a fa68 	bl	8059034 <iprintf>
 804eb64:	e017      	b.n	804eb96 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 804eb66:	687b      	ldr	r3, [r7, #4]
 804eb68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eb6c:	f003 0304 	and.w	r3, r3, #4
 804eb70:	2b00      	cmp	r3, #0
 804eb72:	d010      	beq.n	804eb96 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 804eb74:	687b      	ldr	r3, [r7, #4]
 804eb76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 804eb7a:	f023 0304 	bic.w	r3, r3, #4
 804eb7e:	b2da      	uxtb	r2, r3
 804eb80:	687b      	ldr	r3, [r7, #4]
 804eb82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 804eb86:	687b      	ldr	r3, [r7, #4]
 804eb88:	69db      	ldr	r3, [r3, #28]
 804eb8a:	2b00      	cmp	r3, #0
 804eb8c:	d003      	beq.n	804eb96 <netif_set_link_down+0x4e>
 804eb8e:	687b      	ldr	r3, [r7, #4]
 804eb90:	69db      	ldr	r3, [r3, #28]
 804eb92:	6878      	ldr	r0, [r7, #4]
 804eb94:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 804eb96:	3708      	adds	r7, #8
 804eb98:	46bd      	mov	sp, r7
 804eb9a:	bd80      	pop	{r7, pc}
 804eb9c:	0805b1ac 	.word	0x0805b1ac
 804eba0:	0805b3b8 	.word	0x0805b3b8
 804eba4:	0805b1fc 	.word	0x0805b1fc

0804eba8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 804eba8:	b480      	push	{r7}
 804ebaa:	b083      	sub	sp, #12
 804ebac:	af00      	add	r7, sp, #0
 804ebae:	6078      	str	r0, [r7, #4]
 804ebb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 804ebb2:	687b      	ldr	r3, [r7, #4]
 804ebb4:	2b00      	cmp	r3, #0
 804ebb6:	d002      	beq.n	804ebbe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 804ebb8:	687b      	ldr	r3, [r7, #4]
 804ebba:	683a      	ldr	r2, [r7, #0]
 804ebbc:	61da      	str	r2, [r3, #28]
  }
}
 804ebbe:	bf00      	nop
 804ebc0:	370c      	adds	r7, #12
 804ebc2:	46bd      	mov	sp, r7
 804ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ebc8:	4770      	bx	lr

0804ebca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 804ebca:	b480      	push	{r7}
 804ebcc:	b085      	sub	sp, #20
 804ebce:	af00      	add	r7, sp, #0
 804ebd0:	60f8      	str	r0, [r7, #12]
 804ebd2:	60b9      	str	r1, [r7, #8]
 804ebd4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 804ebd6:	f06f 030b 	mvn.w	r3, #11
}
 804ebda:	4618      	mov	r0, r3
 804ebdc:	3714      	adds	r7, #20
 804ebde:	46bd      	mov	sp, r7
 804ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ebe4:	4770      	bx	lr
	...

0804ebe8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 804ebe8:	b480      	push	{r7}
 804ebea:	b085      	sub	sp, #20
 804ebec:	af00      	add	r7, sp, #0
 804ebee:	4603      	mov	r3, r0
 804ebf0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 804ebf2:	79fb      	ldrb	r3, [r7, #7]
 804ebf4:	2b00      	cmp	r3, #0
 804ebf6:	d013      	beq.n	804ec20 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 804ebf8:	4b0d      	ldr	r3, [pc, #52]	; (804ec30 <netif_get_by_index+0x48>)
 804ebfa:	681b      	ldr	r3, [r3, #0]
 804ebfc:	60fb      	str	r3, [r7, #12]
 804ebfe:	e00c      	b.n	804ec1a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 804ec00:	68fb      	ldr	r3, [r7, #12]
 804ec02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804ec06:	3301      	adds	r3, #1
 804ec08:	b2db      	uxtb	r3, r3
 804ec0a:	79fa      	ldrb	r2, [r7, #7]
 804ec0c:	429a      	cmp	r2, r3
 804ec0e:	d101      	bne.n	804ec14 <netif_get_by_index+0x2c>
        return netif; /* found! */
 804ec10:	68fb      	ldr	r3, [r7, #12]
 804ec12:	e006      	b.n	804ec22 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 804ec14:	68fb      	ldr	r3, [r7, #12]
 804ec16:	681b      	ldr	r3, [r3, #0]
 804ec18:	60fb      	str	r3, [r7, #12]
 804ec1a:	68fb      	ldr	r3, [r7, #12]
 804ec1c:	2b00      	cmp	r3, #0
 804ec1e:	d1ef      	bne.n	804ec00 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 804ec20:	2300      	movs	r3, #0
}
 804ec22:	4618      	mov	r0, r3
 804ec24:	3714      	adds	r7, #20
 804ec26:	46bd      	mov	sp, r7
 804ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ec2c:	4770      	bx	lr
 804ec2e:	bf00      	nop
 804ec30:	2000b5c0 	.word	0x2000b5c0

0804ec34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 804ec34:	b580      	push	{r7, lr}
 804ec36:	b082      	sub	sp, #8
 804ec38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 804ec3a:	f009 ff87 	bl	8058b4c <sys_arch_protect>
 804ec3e:	6038      	str	r0, [r7, #0]
 804ec40:	4b0d      	ldr	r3, [pc, #52]	; (804ec78 <pbuf_free_ooseq+0x44>)
 804ec42:	2200      	movs	r2, #0
 804ec44:	701a      	strb	r2, [r3, #0]
 804ec46:	6838      	ldr	r0, [r7, #0]
 804ec48:	f009 ff8e 	bl	8058b68 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 804ec4c:	4b0b      	ldr	r3, [pc, #44]	; (804ec7c <pbuf_free_ooseq+0x48>)
 804ec4e:	681b      	ldr	r3, [r3, #0]
 804ec50:	607b      	str	r3, [r7, #4]
 804ec52:	e00a      	b.n	804ec6a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 804ec54:	687b      	ldr	r3, [r7, #4]
 804ec56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804ec58:	2b00      	cmp	r3, #0
 804ec5a:	d003      	beq.n	804ec64 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 804ec5c:	6878      	ldr	r0, [r7, #4]
 804ec5e:	f002 fc43 	bl	80514e8 <tcp_free_ooseq>
      return;
 804ec62:	e005      	b.n	804ec70 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 804ec64:	687b      	ldr	r3, [r7, #4]
 804ec66:	68db      	ldr	r3, [r3, #12]
 804ec68:	607b      	str	r3, [r7, #4]
 804ec6a:	687b      	ldr	r3, [r7, #4]
 804ec6c:	2b00      	cmp	r3, #0
 804ec6e:	d1f1      	bne.n	804ec54 <pbuf_free_ooseq+0x20>
    }
  }
}
 804ec70:	3708      	adds	r7, #8
 804ec72:	46bd      	mov	sp, r7
 804ec74:	bd80      	pop	{r7, pc}
 804ec76:	bf00      	nop
 804ec78:	2000b5c9 	.word	0x2000b5c9
 804ec7c:	2000b5d8 	.word	0x2000b5d8

0804ec80 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 804ec80:	b580      	push	{r7, lr}
 804ec82:	b082      	sub	sp, #8
 804ec84:	af00      	add	r7, sp, #0
 804ec86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 804ec88:	f7ff ffd4 	bl	804ec34 <pbuf_free_ooseq>
}
 804ec8c:	bf00      	nop
 804ec8e:	3708      	adds	r7, #8
 804ec90:	46bd      	mov	sp, r7
 804ec92:	bd80      	pop	{r7, pc}

0804ec94 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 804ec94:	b580      	push	{r7, lr}
 804ec96:	b082      	sub	sp, #8
 804ec98:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 804ec9a:	f009 ff57 	bl	8058b4c <sys_arch_protect>
 804ec9e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 804eca0:	4b0f      	ldr	r3, [pc, #60]	; (804ece0 <pbuf_pool_is_empty+0x4c>)
 804eca2:	781b      	ldrb	r3, [r3, #0]
 804eca4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 804eca6:	4b0e      	ldr	r3, [pc, #56]	; (804ece0 <pbuf_pool_is_empty+0x4c>)
 804eca8:	2201      	movs	r2, #1
 804ecaa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 804ecac:	6878      	ldr	r0, [r7, #4]
 804ecae:	f009 ff5b 	bl	8058b68 <sys_arch_unprotect>

  if (!queued) {
 804ecb2:	78fb      	ldrb	r3, [r7, #3]
 804ecb4:	2b00      	cmp	r3, #0
 804ecb6:	d10f      	bne.n	804ecd8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 804ecb8:	2100      	movs	r1, #0
 804ecba:	480a      	ldr	r0, [pc, #40]	; (804ece4 <pbuf_pool_is_empty+0x50>)
 804ecbc:	f7fe fe90 	bl	804d9e0 <tcpip_try_callback>
 804ecc0:	4603      	mov	r3, r0
 804ecc2:	2b00      	cmp	r3, #0
 804ecc4:	d008      	beq.n	804ecd8 <pbuf_pool_is_empty+0x44>
 804ecc6:	f009 ff41 	bl	8058b4c <sys_arch_protect>
 804ecca:	6078      	str	r0, [r7, #4]
 804eccc:	4b04      	ldr	r3, [pc, #16]	; (804ece0 <pbuf_pool_is_empty+0x4c>)
 804ecce:	2200      	movs	r2, #0
 804ecd0:	701a      	strb	r2, [r3, #0]
 804ecd2:	6878      	ldr	r0, [r7, #4]
 804ecd4:	f009 ff48 	bl	8058b68 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 804ecd8:	bf00      	nop
 804ecda:	3708      	adds	r7, #8
 804ecdc:	46bd      	mov	sp, r7
 804ecde:	bd80      	pop	{r7, pc}
 804ece0:	2000b5c9 	.word	0x2000b5c9
 804ece4:	0804ec81 	.word	0x0804ec81

0804ece8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 804ece8:	b480      	push	{r7}
 804ecea:	b085      	sub	sp, #20
 804ecec:	af00      	add	r7, sp, #0
 804ecee:	60f8      	str	r0, [r7, #12]
 804ecf0:	60b9      	str	r1, [r7, #8]
 804ecf2:	4611      	mov	r1, r2
 804ecf4:	461a      	mov	r2, r3
 804ecf6:	460b      	mov	r3, r1
 804ecf8:	80fb      	strh	r3, [r7, #6]
 804ecfa:	4613      	mov	r3, r2
 804ecfc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 804ecfe:	68fb      	ldr	r3, [r7, #12]
 804ed00:	2200      	movs	r2, #0
 804ed02:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 804ed04:	68fb      	ldr	r3, [r7, #12]
 804ed06:	68ba      	ldr	r2, [r7, #8]
 804ed08:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 804ed0a:	68fb      	ldr	r3, [r7, #12]
 804ed0c:	88fa      	ldrh	r2, [r7, #6]
 804ed0e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 804ed10:	68fb      	ldr	r3, [r7, #12]
 804ed12:	88ba      	ldrh	r2, [r7, #4]
 804ed14:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 804ed16:	8b3b      	ldrh	r3, [r7, #24]
 804ed18:	b2da      	uxtb	r2, r3
 804ed1a:	68fb      	ldr	r3, [r7, #12]
 804ed1c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 804ed1e:	68fb      	ldr	r3, [r7, #12]
 804ed20:	7f3a      	ldrb	r2, [r7, #28]
 804ed22:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 804ed24:	68fb      	ldr	r3, [r7, #12]
 804ed26:	2201      	movs	r2, #1
 804ed28:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 804ed2a:	68fb      	ldr	r3, [r7, #12]
 804ed2c:	2200      	movs	r2, #0
 804ed2e:	73da      	strb	r2, [r3, #15]
}
 804ed30:	bf00      	nop
 804ed32:	3714      	adds	r7, #20
 804ed34:	46bd      	mov	sp, r7
 804ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ed3a:	4770      	bx	lr

0804ed3c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 804ed3c:	b580      	push	{r7, lr}
 804ed3e:	b08c      	sub	sp, #48	; 0x30
 804ed40:	af02      	add	r7, sp, #8
 804ed42:	4603      	mov	r3, r0
 804ed44:	71fb      	strb	r3, [r7, #7]
 804ed46:	460b      	mov	r3, r1
 804ed48:	80bb      	strh	r3, [r7, #4]
 804ed4a:	4613      	mov	r3, r2
 804ed4c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 804ed4e:	79fb      	ldrb	r3, [r7, #7]
 804ed50:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 804ed52:	887b      	ldrh	r3, [r7, #2]
 804ed54:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 804ed58:	d07f      	beq.n	804ee5a <pbuf_alloc+0x11e>
 804ed5a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 804ed5e:	f300 80c8 	bgt.w	804eef2 <pbuf_alloc+0x1b6>
 804ed62:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 804ed66:	d010      	beq.n	804ed8a <pbuf_alloc+0x4e>
 804ed68:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 804ed6c:	f300 80c1 	bgt.w	804eef2 <pbuf_alloc+0x1b6>
 804ed70:	2b01      	cmp	r3, #1
 804ed72:	d002      	beq.n	804ed7a <pbuf_alloc+0x3e>
 804ed74:	2b41      	cmp	r3, #65	; 0x41
 804ed76:	f040 80bc 	bne.w	804eef2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 804ed7a:	887a      	ldrh	r2, [r7, #2]
 804ed7c:	88bb      	ldrh	r3, [r7, #4]
 804ed7e:	4619      	mov	r1, r3
 804ed80:	2000      	movs	r0, #0
 804ed82:	f000 f8d1 	bl	804ef28 <pbuf_alloc_reference>
 804ed86:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 804ed88:	e0bd      	b.n	804ef06 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 804ed8a:	2300      	movs	r3, #0
 804ed8c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 804ed8e:	2300      	movs	r3, #0
 804ed90:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 804ed92:	88bb      	ldrh	r3, [r7, #4]
 804ed94:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 804ed96:	200c      	movs	r0, #12
 804ed98:	f7ff fb9a 	bl	804e4d0 <memp_malloc>
 804ed9c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 804ed9e:	693b      	ldr	r3, [r7, #16]
 804eda0:	2b00      	cmp	r3, #0
 804eda2:	d109      	bne.n	804edb8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 804eda4:	f7ff ff76 	bl	804ec94 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 804eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804edaa:	2b00      	cmp	r3, #0
 804edac:	d002      	beq.n	804edb4 <pbuf_alloc+0x78>
            pbuf_free(p);
 804edae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 804edb0:	f000 faa8 	bl	804f304 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 804edb4:	2300      	movs	r3, #0
 804edb6:	e0a7      	b.n	804ef08 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 804edb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804edba:	3303      	adds	r3, #3
 804edbc:	b29b      	uxth	r3, r3
 804edbe:	f023 0303 	bic.w	r3, r3, #3
 804edc2:	b29b      	uxth	r3, r3
 804edc4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 804edc8:	b29b      	uxth	r3, r3
 804edca:	8b7a      	ldrh	r2, [r7, #26]
 804edcc:	4293      	cmp	r3, r2
 804edce:	bf28      	it	cs
 804edd0:	4613      	movcs	r3, r2
 804edd2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 804edd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804edd6:	3310      	adds	r3, #16
 804edd8:	693a      	ldr	r2, [r7, #16]
 804edda:	4413      	add	r3, r2
 804eddc:	3303      	adds	r3, #3
 804edde:	f023 0303 	bic.w	r3, r3, #3
 804ede2:	4618      	mov	r0, r3
 804ede4:	89f9      	ldrh	r1, [r7, #14]
 804ede6:	8b7a      	ldrh	r2, [r7, #26]
 804ede8:	2300      	movs	r3, #0
 804edea:	9301      	str	r3, [sp, #4]
 804edec:	887b      	ldrh	r3, [r7, #2]
 804edee:	9300      	str	r3, [sp, #0]
 804edf0:	460b      	mov	r3, r1
 804edf2:	4601      	mov	r1, r0
 804edf4:	6938      	ldr	r0, [r7, #16]
 804edf6:	f7ff ff77 	bl	804ece8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 804edfa:	693b      	ldr	r3, [r7, #16]
 804edfc:	685b      	ldr	r3, [r3, #4]
 804edfe:	f003 0303 	and.w	r3, r3, #3
 804ee02:	2b00      	cmp	r3, #0
 804ee04:	d006      	beq.n	804ee14 <pbuf_alloc+0xd8>
 804ee06:	4b42      	ldr	r3, [pc, #264]	; (804ef10 <pbuf_alloc+0x1d4>)
 804ee08:	f44f 7280 	mov.w	r2, #256	; 0x100
 804ee0c:	4941      	ldr	r1, [pc, #260]	; (804ef14 <pbuf_alloc+0x1d8>)
 804ee0e:	4842      	ldr	r0, [pc, #264]	; (804ef18 <pbuf_alloc+0x1dc>)
 804ee10:	f00a f910 	bl	8059034 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 804ee14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804ee16:	3303      	adds	r3, #3
 804ee18:	f023 0303 	bic.w	r3, r3, #3
 804ee1c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 804ee20:	d106      	bne.n	804ee30 <pbuf_alloc+0xf4>
 804ee22:	4b3b      	ldr	r3, [pc, #236]	; (804ef10 <pbuf_alloc+0x1d4>)
 804ee24:	f44f 7281 	mov.w	r2, #258	; 0x102
 804ee28:	493c      	ldr	r1, [pc, #240]	; (804ef1c <pbuf_alloc+0x1e0>)
 804ee2a:	483b      	ldr	r0, [pc, #236]	; (804ef18 <pbuf_alloc+0x1dc>)
 804ee2c:	f00a f902 	bl	8059034 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 804ee30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ee32:	2b00      	cmp	r3, #0
 804ee34:	d102      	bne.n	804ee3c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 804ee36:	693b      	ldr	r3, [r7, #16]
 804ee38:	627b      	str	r3, [r7, #36]	; 0x24
 804ee3a:	e002      	b.n	804ee42 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 804ee3c:	69fb      	ldr	r3, [r7, #28]
 804ee3e:	693a      	ldr	r2, [r7, #16]
 804ee40:	601a      	str	r2, [r3, #0]
        }
        last = q;
 804ee42:	693b      	ldr	r3, [r7, #16]
 804ee44:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 804ee46:	8b7a      	ldrh	r2, [r7, #26]
 804ee48:	89fb      	ldrh	r3, [r7, #14]
 804ee4a:	1ad3      	subs	r3, r2, r3
 804ee4c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 804ee4e:	2300      	movs	r3, #0
 804ee50:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 804ee52:	8b7b      	ldrh	r3, [r7, #26]
 804ee54:	2b00      	cmp	r3, #0
 804ee56:	d19e      	bne.n	804ed96 <pbuf_alloc+0x5a>
      break;
 804ee58:	e055      	b.n	804ef06 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 804ee5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804ee5c:	3303      	adds	r3, #3
 804ee5e:	b29b      	uxth	r3, r3
 804ee60:	f023 0303 	bic.w	r3, r3, #3
 804ee64:	b29a      	uxth	r2, r3
 804ee66:	88bb      	ldrh	r3, [r7, #4]
 804ee68:	3303      	adds	r3, #3
 804ee6a:	b29b      	uxth	r3, r3
 804ee6c:	f023 0303 	bic.w	r3, r3, #3
 804ee70:	b29b      	uxth	r3, r3
 804ee72:	4413      	add	r3, r2
 804ee74:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 804ee76:	8b3b      	ldrh	r3, [r7, #24]
 804ee78:	3310      	adds	r3, #16
 804ee7a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 804ee7c:	8b3a      	ldrh	r2, [r7, #24]
 804ee7e:	88bb      	ldrh	r3, [r7, #4]
 804ee80:	3303      	adds	r3, #3
 804ee82:	f023 0303 	bic.w	r3, r3, #3
 804ee86:	429a      	cmp	r2, r3
 804ee88:	d306      	bcc.n	804ee98 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 804ee8a:	8afa      	ldrh	r2, [r7, #22]
 804ee8c:	88bb      	ldrh	r3, [r7, #4]
 804ee8e:	3303      	adds	r3, #3
 804ee90:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 804ee94:	429a      	cmp	r2, r3
 804ee96:	d201      	bcs.n	804ee9c <pbuf_alloc+0x160>
        return NULL;
 804ee98:	2300      	movs	r3, #0
 804ee9a:	e035      	b.n	804ef08 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 804ee9c:	8afb      	ldrh	r3, [r7, #22]
 804ee9e:	4618      	mov	r0, r3
 804eea0:	f7ff f972 	bl	804e188 <mem_malloc>
 804eea4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 804eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804eea8:	2b00      	cmp	r3, #0
 804eeaa:	d101      	bne.n	804eeb0 <pbuf_alloc+0x174>
        return NULL;
 804eeac:	2300      	movs	r3, #0
 804eeae:	e02b      	b.n	804ef08 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 804eeb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 804eeb2:	3310      	adds	r3, #16
 804eeb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804eeb6:	4413      	add	r3, r2
 804eeb8:	3303      	adds	r3, #3
 804eeba:	f023 0303 	bic.w	r3, r3, #3
 804eebe:	4618      	mov	r0, r3
 804eec0:	88b9      	ldrh	r1, [r7, #4]
 804eec2:	88ba      	ldrh	r2, [r7, #4]
 804eec4:	2300      	movs	r3, #0
 804eec6:	9301      	str	r3, [sp, #4]
 804eec8:	887b      	ldrh	r3, [r7, #2]
 804eeca:	9300      	str	r3, [sp, #0]
 804eecc:	460b      	mov	r3, r1
 804eece:	4601      	mov	r1, r0
 804eed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 804eed2:	f7ff ff09 	bl	804ece8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 804eed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804eed8:	685b      	ldr	r3, [r3, #4]
 804eeda:	f003 0303 	and.w	r3, r3, #3
 804eede:	2b00      	cmp	r3, #0
 804eee0:	d010      	beq.n	804ef04 <pbuf_alloc+0x1c8>
 804eee2:	4b0b      	ldr	r3, [pc, #44]	; (804ef10 <pbuf_alloc+0x1d4>)
 804eee4:	f44f 7291 	mov.w	r2, #290	; 0x122
 804eee8:	490d      	ldr	r1, [pc, #52]	; (804ef20 <pbuf_alloc+0x1e4>)
 804eeea:	480b      	ldr	r0, [pc, #44]	; (804ef18 <pbuf_alloc+0x1dc>)
 804eeec:	f00a f8a2 	bl	8059034 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 804eef0:	e008      	b.n	804ef04 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 804eef2:	4b07      	ldr	r3, [pc, #28]	; (804ef10 <pbuf_alloc+0x1d4>)
 804eef4:	f240 1227 	movw	r2, #295	; 0x127
 804eef8:	490a      	ldr	r1, [pc, #40]	; (804ef24 <pbuf_alloc+0x1e8>)
 804eefa:	4807      	ldr	r0, [pc, #28]	; (804ef18 <pbuf_alloc+0x1dc>)
 804eefc:	f00a f89a 	bl	8059034 <iprintf>
      return NULL;
 804ef00:	2300      	movs	r3, #0
 804ef02:	e001      	b.n	804ef08 <pbuf_alloc+0x1cc>
      break;
 804ef04:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 804ef06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 804ef08:	4618      	mov	r0, r3
 804ef0a:	3728      	adds	r7, #40	; 0x28
 804ef0c:	46bd      	mov	sp, r7
 804ef0e:	bd80      	pop	{r7, pc}
 804ef10:	0805b3dc 	.word	0x0805b3dc
 804ef14:	0805b40c 	.word	0x0805b40c
 804ef18:	0805b43c 	.word	0x0805b43c
 804ef1c:	0805b464 	.word	0x0805b464
 804ef20:	0805b498 	.word	0x0805b498
 804ef24:	0805b4c4 	.word	0x0805b4c4

0804ef28 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 804ef28:	b580      	push	{r7, lr}
 804ef2a:	b086      	sub	sp, #24
 804ef2c:	af02      	add	r7, sp, #8
 804ef2e:	6078      	str	r0, [r7, #4]
 804ef30:	460b      	mov	r3, r1
 804ef32:	807b      	strh	r3, [r7, #2]
 804ef34:	4613      	mov	r3, r2
 804ef36:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 804ef38:	883b      	ldrh	r3, [r7, #0]
 804ef3a:	2b41      	cmp	r3, #65	; 0x41
 804ef3c:	d009      	beq.n	804ef52 <pbuf_alloc_reference+0x2a>
 804ef3e:	883b      	ldrh	r3, [r7, #0]
 804ef40:	2b01      	cmp	r3, #1
 804ef42:	d006      	beq.n	804ef52 <pbuf_alloc_reference+0x2a>
 804ef44:	4b0f      	ldr	r3, [pc, #60]	; (804ef84 <pbuf_alloc_reference+0x5c>)
 804ef46:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 804ef4a:	490f      	ldr	r1, [pc, #60]	; (804ef88 <pbuf_alloc_reference+0x60>)
 804ef4c:	480f      	ldr	r0, [pc, #60]	; (804ef8c <pbuf_alloc_reference+0x64>)
 804ef4e:	f00a f871 	bl	8059034 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 804ef52:	200b      	movs	r0, #11
 804ef54:	f7ff fabc 	bl	804e4d0 <memp_malloc>
 804ef58:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 804ef5a:	68fb      	ldr	r3, [r7, #12]
 804ef5c:	2b00      	cmp	r3, #0
 804ef5e:	d101      	bne.n	804ef64 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 804ef60:	2300      	movs	r3, #0
 804ef62:	e00b      	b.n	804ef7c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 804ef64:	8879      	ldrh	r1, [r7, #2]
 804ef66:	887a      	ldrh	r2, [r7, #2]
 804ef68:	2300      	movs	r3, #0
 804ef6a:	9301      	str	r3, [sp, #4]
 804ef6c:	883b      	ldrh	r3, [r7, #0]
 804ef6e:	9300      	str	r3, [sp, #0]
 804ef70:	460b      	mov	r3, r1
 804ef72:	6879      	ldr	r1, [r7, #4]
 804ef74:	68f8      	ldr	r0, [r7, #12]
 804ef76:	f7ff feb7 	bl	804ece8 <pbuf_init_alloced_pbuf>
  return p;
 804ef7a:	68fb      	ldr	r3, [r7, #12]
}
 804ef7c:	4618      	mov	r0, r3
 804ef7e:	3710      	adds	r7, #16
 804ef80:	46bd      	mov	sp, r7
 804ef82:	bd80      	pop	{r7, pc}
 804ef84:	0805b3dc 	.word	0x0805b3dc
 804ef88:	0805b4e0 	.word	0x0805b4e0
 804ef8c:	0805b43c 	.word	0x0805b43c

0804ef90 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 804ef90:	b580      	push	{r7, lr}
 804ef92:	b088      	sub	sp, #32
 804ef94:	af02      	add	r7, sp, #8
 804ef96:	607b      	str	r3, [r7, #4]
 804ef98:	4603      	mov	r3, r0
 804ef9a:	73fb      	strb	r3, [r7, #15]
 804ef9c:	460b      	mov	r3, r1
 804ef9e:	81bb      	strh	r3, [r7, #12]
 804efa0:	4613      	mov	r3, r2
 804efa2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 804efa4:	7bfb      	ldrb	r3, [r7, #15]
 804efa6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 804efa8:	8a7b      	ldrh	r3, [r7, #18]
 804efaa:	3303      	adds	r3, #3
 804efac:	f023 0203 	bic.w	r2, r3, #3
 804efb0:	89bb      	ldrh	r3, [r7, #12]
 804efb2:	441a      	add	r2, r3
 804efb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804efb6:	429a      	cmp	r2, r3
 804efb8:	d901      	bls.n	804efbe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 804efba:	2300      	movs	r3, #0
 804efbc:	e018      	b.n	804eff0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 804efbe:	6a3b      	ldr	r3, [r7, #32]
 804efc0:	2b00      	cmp	r3, #0
 804efc2:	d007      	beq.n	804efd4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 804efc4:	8a7b      	ldrh	r3, [r7, #18]
 804efc6:	3303      	adds	r3, #3
 804efc8:	f023 0303 	bic.w	r3, r3, #3
 804efcc:	6a3a      	ldr	r2, [r7, #32]
 804efce:	4413      	add	r3, r2
 804efd0:	617b      	str	r3, [r7, #20]
 804efd2:	e001      	b.n	804efd8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 804efd4:	2300      	movs	r3, #0
 804efd6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 804efd8:	6878      	ldr	r0, [r7, #4]
 804efda:	89b9      	ldrh	r1, [r7, #12]
 804efdc:	89ba      	ldrh	r2, [r7, #12]
 804efde:	2302      	movs	r3, #2
 804efe0:	9301      	str	r3, [sp, #4]
 804efe2:	897b      	ldrh	r3, [r7, #10]
 804efe4:	9300      	str	r3, [sp, #0]
 804efe6:	460b      	mov	r3, r1
 804efe8:	6979      	ldr	r1, [r7, #20]
 804efea:	f7ff fe7d 	bl	804ece8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 804efee:	687b      	ldr	r3, [r7, #4]
}
 804eff0:	4618      	mov	r0, r3
 804eff2:	3718      	adds	r7, #24
 804eff4:	46bd      	mov	sp, r7
 804eff6:	bd80      	pop	{r7, pc}

0804eff8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 804eff8:	b580      	push	{r7, lr}
 804effa:	b084      	sub	sp, #16
 804effc:	af00      	add	r7, sp, #0
 804effe:	6078      	str	r0, [r7, #4]
 804f000:	460b      	mov	r3, r1
 804f002:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 804f004:	687b      	ldr	r3, [r7, #4]
 804f006:	2b00      	cmp	r3, #0
 804f008:	d106      	bne.n	804f018 <pbuf_realloc+0x20>
 804f00a:	4b3a      	ldr	r3, [pc, #232]	; (804f0f4 <pbuf_realloc+0xfc>)
 804f00c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 804f010:	4939      	ldr	r1, [pc, #228]	; (804f0f8 <pbuf_realloc+0x100>)
 804f012:	483a      	ldr	r0, [pc, #232]	; (804f0fc <pbuf_realloc+0x104>)
 804f014:	f00a f80e 	bl	8059034 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 804f018:	687b      	ldr	r3, [r7, #4]
 804f01a:	891b      	ldrh	r3, [r3, #8]
 804f01c:	887a      	ldrh	r2, [r7, #2]
 804f01e:	429a      	cmp	r2, r3
 804f020:	d263      	bcs.n	804f0ea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 804f022:	687b      	ldr	r3, [r7, #4]
 804f024:	891a      	ldrh	r2, [r3, #8]
 804f026:	887b      	ldrh	r3, [r7, #2]
 804f028:	1ad3      	subs	r3, r2, r3
 804f02a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 804f02c:	887b      	ldrh	r3, [r7, #2]
 804f02e:	817b      	strh	r3, [r7, #10]
  q = p;
 804f030:	687b      	ldr	r3, [r7, #4]
 804f032:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 804f034:	e018      	b.n	804f068 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 804f036:	68fb      	ldr	r3, [r7, #12]
 804f038:	895b      	ldrh	r3, [r3, #10]
 804f03a:	897a      	ldrh	r2, [r7, #10]
 804f03c:	1ad3      	subs	r3, r2, r3
 804f03e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 804f040:	68fb      	ldr	r3, [r7, #12]
 804f042:	891a      	ldrh	r2, [r3, #8]
 804f044:	893b      	ldrh	r3, [r7, #8]
 804f046:	1ad3      	subs	r3, r2, r3
 804f048:	b29a      	uxth	r2, r3
 804f04a:	68fb      	ldr	r3, [r7, #12]
 804f04c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 804f04e:	68fb      	ldr	r3, [r7, #12]
 804f050:	681b      	ldr	r3, [r3, #0]
 804f052:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 804f054:	68fb      	ldr	r3, [r7, #12]
 804f056:	2b00      	cmp	r3, #0
 804f058:	d106      	bne.n	804f068 <pbuf_realloc+0x70>
 804f05a:	4b26      	ldr	r3, [pc, #152]	; (804f0f4 <pbuf_realloc+0xfc>)
 804f05c:	f240 12af 	movw	r2, #431	; 0x1af
 804f060:	4927      	ldr	r1, [pc, #156]	; (804f100 <pbuf_realloc+0x108>)
 804f062:	4826      	ldr	r0, [pc, #152]	; (804f0fc <pbuf_realloc+0x104>)
 804f064:	f009 ffe6 	bl	8059034 <iprintf>
  while (rem_len > q->len) {
 804f068:	68fb      	ldr	r3, [r7, #12]
 804f06a:	895b      	ldrh	r3, [r3, #10]
 804f06c:	897a      	ldrh	r2, [r7, #10]
 804f06e:	429a      	cmp	r2, r3
 804f070:	d8e1      	bhi.n	804f036 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 804f072:	68fb      	ldr	r3, [r7, #12]
 804f074:	7b1b      	ldrb	r3, [r3, #12]
 804f076:	f003 030f 	and.w	r3, r3, #15
 804f07a:	2b00      	cmp	r3, #0
 804f07c:	d121      	bne.n	804f0c2 <pbuf_realloc+0xca>
 804f07e:	68fb      	ldr	r3, [r7, #12]
 804f080:	895b      	ldrh	r3, [r3, #10]
 804f082:	897a      	ldrh	r2, [r7, #10]
 804f084:	429a      	cmp	r2, r3
 804f086:	d01c      	beq.n	804f0c2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 804f088:	68fb      	ldr	r3, [r7, #12]
 804f08a:	7b5b      	ldrb	r3, [r3, #13]
 804f08c:	f003 0302 	and.w	r3, r3, #2
 804f090:	2b00      	cmp	r3, #0
 804f092:	d116      	bne.n	804f0c2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 804f094:	68fb      	ldr	r3, [r7, #12]
 804f096:	685a      	ldr	r2, [r3, #4]
 804f098:	68fb      	ldr	r3, [r7, #12]
 804f09a:	1ad3      	subs	r3, r2, r3
 804f09c:	b29a      	uxth	r2, r3
 804f09e:	897b      	ldrh	r3, [r7, #10]
 804f0a0:	4413      	add	r3, r2
 804f0a2:	b29b      	uxth	r3, r3
 804f0a4:	4619      	mov	r1, r3
 804f0a6:	68f8      	ldr	r0, [r7, #12]
 804f0a8:	f7fe ff64 	bl	804df74 <mem_trim>
 804f0ac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 804f0ae:	68fb      	ldr	r3, [r7, #12]
 804f0b0:	2b00      	cmp	r3, #0
 804f0b2:	d106      	bne.n	804f0c2 <pbuf_realloc+0xca>
 804f0b4:	4b0f      	ldr	r3, [pc, #60]	; (804f0f4 <pbuf_realloc+0xfc>)
 804f0b6:	f240 12bd 	movw	r2, #445	; 0x1bd
 804f0ba:	4912      	ldr	r1, [pc, #72]	; (804f104 <pbuf_realloc+0x10c>)
 804f0bc:	480f      	ldr	r0, [pc, #60]	; (804f0fc <pbuf_realloc+0x104>)
 804f0be:	f009 ffb9 	bl	8059034 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 804f0c2:	68fb      	ldr	r3, [r7, #12]
 804f0c4:	897a      	ldrh	r2, [r7, #10]
 804f0c6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 804f0c8:	68fb      	ldr	r3, [r7, #12]
 804f0ca:	895a      	ldrh	r2, [r3, #10]
 804f0cc:	68fb      	ldr	r3, [r7, #12]
 804f0ce:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 804f0d0:	68fb      	ldr	r3, [r7, #12]
 804f0d2:	681b      	ldr	r3, [r3, #0]
 804f0d4:	2b00      	cmp	r3, #0
 804f0d6:	d004      	beq.n	804f0e2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 804f0d8:	68fb      	ldr	r3, [r7, #12]
 804f0da:	681b      	ldr	r3, [r3, #0]
 804f0dc:	4618      	mov	r0, r3
 804f0de:	f000 f911 	bl	804f304 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 804f0e2:	68fb      	ldr	r3, [r7, #12]
 804f0e4:	2200      	movs	r2, #0
 804f0e6:	601a      	str	r2, [r3, #0]
 804f0e8:	e000      	b.n	804f0ec <pbuf_realloc+0xf4>
    return;
 804f0ea:	bf00      	nop

}
 804f0ec:	3710      	adds	r7, #16
 804f0ee:	46bd      	mov	sp, r7
 804f0f0:	bd80      	pop	{r7, pc}
 804f0f2:	bf00      	nop
 804f0f4:	0805b3dc 	.word	0x0805b3dc
 804f0f8:	0805b4f4 	.word	0x0805b4f4
 804f0fc:	0805b43c 	.word	0x0805b43c
 804f100:	0805b50c 	.word	0x0805b50c
 804f104:	0805b524 	.word	0x0805b524

0804f108 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 804f108:	b580      	push	{r7, lr}
 804f10a:	b086      	sub	sp, #24
 804f10c:	af00      	add	r7, sp, #0
 804f10e:	60f8      	str	r0, [r7, #12]
 804f110:	60b9      	str	r1, [r7, #8]
 804f112:	4613      	mov	r3, r2
 804f114:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 804f116:	68fb      	ldr	r3, [r7, #12]
 804f118:	2b00      	cmp	r3, #0
 804f11a:	d106      	bne.n	804f12a <pbuf_add_header_impl+0x22>
 804f11c:	4b2b      	ldr	r3, [pc, #172]	; (804f1cc <pbuf_add_header_impl+0xc4>)
 804f11e:	f240 12df 	movw	r2, #479	; 0x1df
 804f122:	492b      	ldr	r1, [pc, #172]	; (804f1d0 <pbuf_add_header_impl+0xc8>)
 804f124:	482b      	ldr	r0, [pc, #172]	; (804f1d4 <pbuf_add_header_impl+0xcc>)
 804f126:	f009 ff85 	bl	8059034 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 804f12a:	68fb      	ldr	r3, [r7, #12]
 804f12c:	2b00      	cmp	r3, #0
 804f12e:	d003      	beq.n	804f138 <pbuf_add_header_impl+0x30>
 804f130:	68bb      	ldr	r3, [r7, #8]
 804f132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804f136:	d301      	bcc.n	804f13c <pbuf_add_header_impl+0x34>
    return 1;
 804f138:	2301      	movs	r3, #1
 804f13a:	e043      	b.n	804f1c4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 804f13c:	68bb      	ldr	r3, [r7, #8]
 804f13e:	2b00      	cmp	r3, #0
 804f140:	d101      	bne.n	804f146 <pbuf_add_header_impl+0x3e>
    return 0;
 804f142:	2300      	movs	r3, #0
 804f144:	e03e      	b.n	804f1c4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 804f146:	68bb      	ldr	r3, [r7, #8]
 804f148:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 804f14a:	68fb      	ldr	r3, [r7, #12]
 804f14c:	891a      	ldrh	r2, [r3, #8]
 804f14e:	8a7b      	ldrh	r3, [r7, #18]
 804f150:	4413      	add	r3, r2
 804f152:	b29b      	uxth	r3, r3
 804f154:	8a7a      	ldrh	r2, [r7, #18]
 804f156:	429a      	cmp	r2, r3
 804f158:	d901      	bls.n	804f15e <pbuf_add_header_impl+0x56>
    return 1;
 804f15a:	2301      	movs	r3, #1
 804f15c:	e032      	b.n	804f1c4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 804f15e:	68fb      	ldr	r3, [r7, #12]
 804f160:	7b1b      	ldrb	r3, [r3, #12]
 804f162:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 804f164:	8a3b      	ldrh	r3, [r7, #16]
 804f166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804f16a:	2b00      	cmp	r3, #0
 804f16c:	d00c      	beq.n	804f188 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 804f16e:	68fb      	ldr	r3, [r7, #12]
 804f170:	685a      	ldr	r2, [r3, #4]
 804f172:	68bb      	ldr	r3, [r7, #8]
 804f174:	425b      	negs	r3, r3
 804f176:	4413      	add	r3, r2
 804f178:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 804f17a:	68fb      	ldr	r3, [r7, #12]
 804f17c:	3310      	adds	r3, #16
 804f17e:	697a      	ldr	r2, [r7, #20]
 804f180:	429a      	cmp	r2, r3
 804f182:	d20d      	bcs.n	804f1a0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 804f184:	2301      	movs	r3, #1
 804f186:	e01d      	b.n	804f1c4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 804f188:	79fb      	ldrb	r3, [r7, #7]
 804f18a:	2b00      	cmp	r3, #0
 804f18c:	d006      	beq.n	804f19c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 804f18e:	68fb      	ldr	r3, [r7, #12]
 804f190:	685a      	ldr	r2, [r3, #4]
 804f192:	68bb      	ldr	r3, [r7, #8]
 804f194:	425b      	negs	r3, r3
 804f196:	4413      	add	r3, r2
 804f198:	617b      	str	r3, [r7, #20]
 804f19a:	e001      	b.n	804f1a0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 804f19c:	2301      	movs	r3, #1
 804f19e:	e011      	b.n	804f1c4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 804f1a0:	68fb      	ldr	r3, [r7, #12]
 804f1a2:	697a      	ldr	r2, [r7, #20]
 804f1a4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 804f1a6:	68fb      	ldr	r3, [r7, #12]
 804f1a8:	895a      	ldrh	r2, [r3, #10]
 804f1aa:	8a7b      	ldrh	r3, [r7, #18]
 804f1ac:	4413      	add	r3, r2
 804f1ae:	b29a      	uxth	r2, r3
 804f1b0:	68fb      	ldr	r3, [r7, #12]
 804f1b2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 804f1b4:	68fb      	ldr	r3, [r7, #12]
 804f1b6:	891a      	ldrh	r2, [r3, #8]
 804f1b8:	8a7b      	ldrh	r3, [r7, #18]
 804f1ba:	4413      	add	r3, r2
 804f1bc:	b29a      	uxth	r2, r3
 804f1be:	68fb      	ldr	r3, [r7, #12]
 804f1c0:	811a      	strh	r2, [r3, #8]


  return 0;
 804f1c2:	2300      	movs	r3, #0
}
 804f1c4:	4618      	mov	r0, r3
 804f1c6:	3718      	adds	r7, #24
 804f1c8:	46bd      	mov	sp, r7
 804f1ca:	bd80      	pop	{r7, pc}
 804f1cc:	0805b3dc 	.word	0x0805b3dc
 804f1d0:	0805b540 	.word	0x0805b540
 804f1d4:	0805b43c 	.word	0x0805b43c

0804f1d8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 804f1d8:	b580      	push	{r7, lr}
 804f1da:	b082      	sub	sp, #8
 804f1dc:	af00      	add	r7, sp, #0
 804f1de:	6078      	str	r0, [r7, #4]
 804f1e0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 804f1e2:	2200      	movs	r2, #0
 804f1e4:	6839      	ldr	r1, [r7, #0]
 804f1e6:	6878      	ldr	r0, [r7, #4]
 804f1e8:	f7ff ff8e 	bl	804f108 <pbuf_add_header_impl>
 804f1ec:	4603      	mov	r3, r0
}
 804f1ee:	4618      	mov	r0, r3
 804f1f0:	3708      	adds	r7, #8
 804f1f2:	46bd      	mov	sp, r7
 804f1f4:	bd80      	pop	{r7, pc}
	...

0804f1f8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 804f1f8:	b580      	push	{r7, lr}
 804f1fa:	b084      	sub	sp, #16
 804f1fc:	af00      	add	r7, sp, #0
 804f1fe:	6078      	str	r0, [r7, #4]
 804f200:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 804f202:	687b      	ldr	r3, [r7, #4]
 804f204:	2b00      	cmp	r3, #0
 804f206:	d106      	bne.n	804f216 <pbuf_remove_header+0x1e>
 804f208:	4b20      	ldr	r3, [pc, #128]	; (804f28c <pbuf_remove_header+0x94>)
 804f20a:	f240 224b 	movw	r2, #587	; 0x24b
 804f20e:	4920      	ldr	r1, [pc, #128]	; (804f290 <pbuf_remove_header+0x98>)
 804f210:	4820      	ldr	r0, [pc, #128]	; (804f294 <pbuf_remove_header+0x9c>)
 804f212:	f009 ff0f 	bl	8059034 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 804f216:	687b      	ldr	r3, [r7, #4]
 804f218:	2b00      	cmp	r3, #0
 804f21a:	d003      	beq.n	804f224 <pbuf_remove_header+0x2c>
 804f21c:	683b      	ldr	r3, [r7, #0]
 804f21e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804f222:	d301      	bcc.n	804f228 <pbuf_remove_header+0x30>
    return 1;
 804f224:	2301      	movs	r3, #1
 804f226:	e02c      	b.n	804f282 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 804f228:	683b      	ldr	r3, [r7, #0]
 804f22a:	2b00      	cmp	r3, #0
 804f22c:	d101      	bne.n	804f232 <pbuf_remove_header+0x3a>
    return 0;
 804f22e:	2300      	movs	r3, #0
 804f230:	e027      	b.n	804f282 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 804f232:	683b      	ldr	r3, [r7, #0]
 804f234:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 804f236:	687b      	ldr	r3, [r7, #4]
 804f238:	895b      	ldrh	r3, [r3, #10]
 804f23a:	89fa      	ldrh	r2, [r7, #14]
 804f23c:	429a      	cmp	r2, r3
 804f23e:	d908      	bls.n	804f252 <pbuf_remove_header+0x5a>
 804f240:	4b12      	ldr	r3, [pc, #72]	; (804f28c <pbuf_remove_header+0x94>)
 804f242:	f240 2255 	movw	r2, #597	; 0x255
 804f246:	4914      	ldr	r1, [pc, #80]	; (804f298 <pbuf_remove_header+0xa0>)
 804f248:	4812      	ldr	r0, [pc, #72]	; (804f294 <pbuf_remove_header+0x9c>)
 804f24a:	f009 fef3 	bl	8059034 <iprintf>
 804f24e:	2301      	movs	r3, #1
 804f250:	e017      	b.n	804f282 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 804f252:	687b      	ldr	r3, [r7, #4]
 804f254:	685b      	ldr	r3, [r3, #4]
 804f256:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 804f258:	687b      	ldr	r3, [r7, #4]
 804f25a:	685a      	ldr	r2, [r3, #4]
 804f25c:	683b      	ldr	r3, [r7, #0]
 804f25e:	441a      	add	r2, r3
 804f260:	687b      	ldr	r3, [r7, #4]
 804f262:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 804f264:	687b      	ldr	r3, [r7, #4]
 804f266:	895a      	ldrh	r2, [r3, #10]
 804f268:	89fb      	ldrh	r3, [r7, #14]
 804f26a:	1ad3      	subs	r3, r2, r3
 804f26c:	b29a      	uxth	r2, r3
 804f26e:	687b      	ldr	r3, [r7, #4]
 804f270:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 804f272:	687b      	ldr	r3, [r7, #4]
 804f274:	891a      	ldrh	r2, [r3, #8]
 804f276:	89fb      	ldrh	r3, [r7, #14]
 804f278:	1ad3      	subs	r3, r2, r3
 804f27a:	b29a      	uxth	r2, r3
 804f27c:	687b      	ldr	r3, [r7, #4]
 804f27e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 804f280:	2300      	movs	r3, #0
}
 804f282:	4618      	mov	r0, r3
 804f284:	3710      	adds	r7, #16
 804f286:	46bd      	mov	sp, r7
 804f288:	bd80      	pop	{r7, pc}
 804f28a:	bf00      	nop
 804f28c:	0805b3dc 	.word	0x0805b3dc
 804f290:	0805b540 	.word	0x0805b540
 804f294:	0805b43c 	.word	0x0805b43c
 804f298:	0805b54c 	.word	0x0805b54c

0804f29c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 804f29c:	b580      	push	{r7, lr}
 804f29e:	b082      	sub	sp, #8
 804f2a0:	af00      	add	r7, sp, #0
 804f2a2:	6078      	str	r0, [r7, #4]
 804f2a4:	460b      	mov	r3, r1
 804f2a6:	807b      	strh	r3, [r7, #2]
 804f2a8:	4613      	mov	r3, r2
 804f2aa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 804f2ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804f2b0:	2b00      	cmp	r3, #0
 804f2b2:	da08      	bge.n	804f2c6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 804f2b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804f2b8:	425b      	negs	r3, r3
 804f2ba:	4619      	mov	r1, r3
 804f2bc:	6878      	ldr	r0, [r7, #4]
 804f2be:	f7ff ff9b 	bl	804f1f8 <pbuf_remove_header>
 804f2c2:	4603      	mov	r3, r0
 804f2c4:	e007      	b.n	804f2d6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 804f2c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804f2ca:	787a      	ldrb	r2, [r7, #1]
 804f2cc:	4619      	mov	r1, r3
 804f2ce:	6878      	ldr	r0, [r7, #4]
 804f2d0:	f7ff ff1a 	bl	804f108 <pbuf_add_header_impl>
 804f2d4:	4603      	mov	r3, r0
  }
}
 804f2d6:	4618      	mov	r0, r3
 804f2d8:	3708      	adds	r7, #8
 804f2da:	46bd      	mov	sp, r7
 804f2dc:	bd80      	pop	{r7, pc}

0804f2de <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 804f2de:	b580      	push	{r7, lr}
 804f2e0:	b082      	sub	sp, #8
 804f2e2:	af00      	add	r7, sp, #0
 804f2e4:	6078      	str	r0, [r7, #4]
 804f2e6:	460b      	mov	r3, r1
 804f2e8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 804f2ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804f2ee:	2201      	movs	r2, #1
 804f2f0:	4619      	mov	r1, r3
 804f2f2:	6878      	ldr	r0, [r7, #4]
 804f2f4:	f7ff ffd2 	bl	804f29c <pbuf_header_impl>
 804f2f8:	4603      	mov	r3, r0
}
 804f2fa:	4618      	mov	r0, r3
 804f2fc:	3708      	adds	r7, #8
 804f2fe:	46bd      	mov	sp, r7
 804f300:	bd80      	pop	{r7, pc}
	...

0804f304 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 804f304:	b580      	push	{r7, lr}
 804f306:	b088      	sub	sp, #32
 804f308:	af00      	add	r7, sp, #0
 804f30a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 804f30c:	687b      	ldr	r3, [r7, #4]
 804f30e:	2b00      	cmp	r3, #0
 804f310:	d10b      	bne.n	804f32a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 804f312:	687b      	ldr	r3, [r7, #4]
 804f314:	2b00      	cmp	r3, #0
 804f316:	d106      	bne.n	804f326 <pbuf_free+0x22>
 804f318:	4b3b      	ldr	r3, [pc, #236]	; (804f408 <pbuf_free+0x104>)
 804f31a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 804f31e:	493b      	ldr	r1, [pc, #236]	; (804f40c <pbuf_free+0x108>)
 804f320:	483b      	ldr	r0, [pc, #236]	; (804f410 <pbuf_free+0x10c>)
 804f322:	f009 fe87 	bl	8059034 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 804f326:	2300      	movs	r3, #0
 804f328:	e069      	b.n	804f3fe <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 804f32a:	2300      	movs	r3, #0
 804f32c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 804f32e:	e062      	b.n	804f3f6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 804f330:	f009 fc0c 	bl	8058b4c <sys_arch_protect>
 804f334:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 804f336:	687b      	ldr	r3, [r7, #4]
 804f338:	7b9b      	ldrb	r3, [r3, #14]
 804f33a:	2b00      	cmp	r3, #0
 804f33c:	d106      	bne.n	804f34c <pbuf_free+0x48>
 804f33e:	4b32      	ldr	r3, [pc, #200]	; (804f408 <pbuf_free+0x104>)
 804f340:	f240 22f1 	movw	r2, #753	; 0x2f1
 804f344:	4933      	ldr	r1, [pc, #204]	; (804f414 <pbuf_free+0x110>)
 804f346:	4832      	ldr	r0, [pc, #200]	; (804f410 <pbuf_free+0x10c>)
 804f348:	f009 fe74 	bl	8059034 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 804f34c:	687b      	ldr	r3, [r7, #4]
 804f34e:	7b9b      	ldrb	r3, [r3, #14]
 804f350:	3b01      	subs	r3, #1
 804f352:	b2da      	uxtb	r2, r3
 804f354:	687b      	ldr	r3, [r7, #4]
 804f356:	739a      	strb	r2, [r3, #14]
 804f358:	687b      	ldr	r3, [r7, #4]
 804f35a:	7b9b      	ldrb	r3, [r3, #14]
 804f35c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 804f35e:	69b8      	ldr	r0, [r7, #24]
 804f360:	f009 fc02 	bl	8058b68 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 804f364:	7dfb      	ldrb	r3, [r7, #23]
 804f366:	2b00      	cmp	r3, #0
 804f368:	d143      	bne.n	804f3f2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 804f36a:	687b      	ldr	r3, [r7, #4]
 804f36c:	681b      	ldr	r3, [r3, #0]
 804f36e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 804f370:	687b      	ldr	r3, [r7, #4]
 804f372:	7b1b      	ldrb	r3, [r3, #12]
 804f374:	f003 030f 	and.w	r3, r3, #15
 804f378:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 804f37a:	687b      	ldr	r3, [r7, #4]
 804f37c:	7b5b      	ldrb	r3, [r3, #13]
 804f37e:	f003 0302 	and.w	r3, r3, #2
 804f382:	2b00      	cmp	r3, #0
 804f384:	d011      	beq.n	804f3aa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 804f386:	687b      	ldr	r3, [r7, #4]
 804f388:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 804f38a:	68bb      	ldr	r3, [r7, #8]
 804f38c:	691b      	ldr	r3, [r3, #16]
 804f38e:	2b00      	cmp	r3, #0
 804f390:	d106      	bne.n	804f3a0 <pbuf_free+0x9c>
 804f392:	4b1d      	ldr	r3, [pc, #116]	; (804f408 <pbuf_free+0x104>)
 804f394:	f240 22ff 	movw	r2, #767	; 0x2ff
 804f398:	491f      	ldr	r1, [pc, #124]	; (804f418 <pbuf_free+0x114>)
 804f39a:	481d      	ldr	r0, [pc, #116]	; (804f410 <pbuf_free+0x10c>)
 804f39c:	f009 fe4a 	bl	8059034 <iprintf>
        pc->custom_free_function(p);
 804f3a0:	68bb      	ldr	r3, [r7, #8]
 804f3a2:	691b      	ldr	r3, [r3, #16]
 804f3a4:	6878      	ldr	r0, [r7, #4]
 804f3a6:	4798      	blx	r3
 804f3a8:	e01d      	b.n	804f3e6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 804f3aa:	7bfb      	ldrb	r3, [r7, #15]
 804f3ac:	2b02      	cmp	r3, #2
 804f3ae:	d104      	bne.n	804f3ba <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 804f3b0:	6879      	ldr	r1, [r7, #4]
 804f3b2:	200c      	movs	r0, #12
 804f3b4:	f7ff f902 	bl	804e5bc <memp_free>
 804f3b8:	e015      	b.n	804f3e6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 804f3ba:	7bfb      	ldrb	r3, [r7, #15]
 804f3bc:	2b01      	cmp	r3, #1
 804f3be:	d104      	bne.n	804f3ca <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 804f3c0:	6879      	ldr	r1, [r7, #4]
 804f3c2:	200b      	movs	r0, #11
 804f3c4:	f7ff f8fa 	bl	804e5bc <memp_free>
 804f3c8:	e00d      	b.n	804f3e6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 804f3ca:	7bfb      	ldrb	r3, [r7, #15]
 804f3cc:	2b00      	cmp	r3, #0
 804f3ce:	d103      	bne.n	804f3d8 <pbuf_free+0xd4>
          mem_free(p);
 804f3d0:	6878      	ldr	r0, [r7, #4]
 804f3d2:	f7fe fd3f 	bl	804de54 <mem_free>
 804f3d6:	e006      	b.n	804f3e6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 804f3d8:	4b0b      	ldr	r3, [pc, #44]	; (804f408 <pbuf_free+0x104>)
 804f3da:	f240 320f 	movw	r2, #783	; 0x30f
 804f3de:	490f      	ldr	r1, [pc, #60]	; (804f41c <pbuf_free+0x118>)
 804f3e0:	480b      	ldr	r0, [pc, #44]	; (804f410 <pbuf_free+0x10c>)
 804f3e2:	f009 fe27 	bl	8059034 <iprintf>
        }
      }
      count++;
 804f3e6:	7ffb      	ldrb	r3, [r7, #31]
 804f3e8:	3301      	adds	r3, #1
 804f3ea:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 804f3ec:	693b      	ldr	r3, [r7, #16]
 804f3ee:	607b      	str	r3, [r7, #4]
 804f3f0:	e001      	b.n	804f3f6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 804f3f2:	2300      	movs	r3, #0
 804f3f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 804f3f6:	687b      	ldr	r3, [r7, #4]
 804f3f8:	2b00      	cmp	r3, #0
 804f3fa:	d199      	bne.n	804f330 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 804f3fc:	7ffb      	ldrb	r3, [r7, #31]
}
 804f3fe:	4618      	mov	r0, r3
 804f400:	3720      	adds	r7, #32
 804f402:	46bd      	mov	sp, r7
 804f404:	bd80      	pop	{r7, pc}
 804f406:	bf00      	nop
 804f408:	0805b3dc 	.word	0x0805b3dc
 804f40c:	0805b540 	.word	0x0805b540
 804f410:	0805b43c 	.word	0x0805b43c
 804f414:	0805b56c 	.word	0x0805b56c
 804f418:	0805b584 	.word	0x0805b584
 804f41c:	0805b5a8 	.word	0x0805b5a8

0804f420 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 804f420:	b480      	push	{r7}
 804f422:	b085      	sub	sp, #20
 804f424:	af00      	add	r7, sp, #0
 804f426:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 804f428:	2300      	movs	r3, #0
 804f42a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 804f42c:	e005      	b.n	804f43a <pbuf_clen+0x1a>
    ++len;
 804f42e:	89fb      	ldrh	r3, [r7, #14]
 804f430:	3301      	adds	r3, #1
 804f432:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 804f434:	687b      	ldr	r3, [r7, #4]
 804f436:	681b      	ldr	r3, [r3, #0]
 804f438:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 804f43a:	687b      	ldr	r3, [r7, #4]
 804f43c:	2b00      	cmp	r3, #0
 804f43e:	d1f6      	bne.n	804f42e <pbuf_clen+0xe>
  }
  return len;
 804f440:	89fb      	ldrh	r3, [r7, #14]
}
 804f442:	4618      	mov	r0, r3
 804f444:	3714      	adds	r7, #20
 804f446:	46bd      	mov	sp, r7
 804f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 804f44c:	4770      	bx	lr
	...

0804f450 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 804f450:	b580      	push	{r7, lr}
 804f452:	b084      	sub	sp, #16
 804f454:	af00      	add	r7, sp, #0
 804f456:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 804f458:	687b      	ldr	r3, [r7, #4]
 804f45a:	2b00      	cmp	r3, #0
 804f45c:	d016      	beq.n	804f48c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 804f45e:	f009 fb75 	bl	8058b4c <sys_arch_protect>
 804f462:	60f8      	str	r0, [r7, #12]
 804f464:	687b      	ldr	r3, [r7, #4]
 804f466:	7b9b      	ldrb	r3, [r3, #14]
 804f468:	3301      	adds	r3, #1
 804f46a:	b2da      	uxtb	r2, r3
 804f46c:	687b      	ldr	r3, [r7, #4]
 804f46e:	739a      	strb	r2, [r3, #14]
 804f470:	68f8      	ldr	r0, [r7, #12]
 804f472:	f009 fb79 	bl	8058b68 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 804f476:	687b      	ldr	r3, [r7, #4]
 804f478:	7b9b      	ldrb	r3, [r3, #14]
 804f47a:	2b00      	cmp	r3, #0
 804f47c:	d106      	bne.n	804f48c <pbuf_ref+0x3c>
 804f47e:	4b05      	ldr	r3, [pc, #20]	; (804f494 <pbuf_ref+0x44>)
 804f480:	f240 3242 	movw	r2, #834	; 0x342
 804f484:	4904      	ldr	r1, [pc, #16]	; (804f498 <pbuf_ref+0x48>)
 804f486:	4805      	ldr	r0, [pc, #20]	; (804f49c <pbuf_ref+0x4c>)
 804f488:	f009 fdd4 	bl	8059034 <iprintf>
  }
}
 804f48c:	bf00      	nop
 804f48e:	3710      	adds	r7, #16
 804f490:	46bd      	mov	sp, r7
 804f492:	bd80      	pop	{r7, pc}
 804f494:	0805b3dc 	.word	0x0805b3dc
 804f498:	0805b5bc 	.word	0x0805b5bc
 804f49c:	0805b43c 	.word	0x0805b43c

0804f4a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 804f4a0:	b580      	push	{r7, lr}
 804f4a2:	b084      	sub	sp, #16
 804f4a4:	af00      	add	r7, sp, #0
 804f4a6:	6078      	str	r0, [r7, #4]
 804f4a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 804f4aa:	687b      	ldr	r3, [r7, #4]
 804f4ac:	2b00      	cmp	r3, #0
 804f4ae:	d002      	beq.n	804f4b6 <pbuf_cat+0x16>
 804f4b0:	683b      	ldr	r3, [r7, #0]
 804f4b2:	2b00      	cmp	r3, #0
 804f4b4:	d107      	bne.n	804f4c6 <pbuf_cat+0x26>
 804f4b6:	4b20      	ldr	r3, [pc, #128]	; (804f538 <pbuf_cat+0x98>)
 804f4b8:	f240 3259 	movw	r2, #857	; 0x359
 804f4bc:	491f      	ldr	r1, [pc, #124]	; (804f53c <pbuf_cat+0x9c>)
 804f4be:	4820      	ldr	r0, [pc, #128]	; (804f540 <pbuf_cat+0xa0>)
 804f4c0:	f009 fdb8 	bl	8059034 <iprintf>
 804f4c4:	e034      	b.n	804f530 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 804f4c6:	687b      	ldr	r3, [r7, #4]
 804f4c8:	60fb      	str	r3, [r7, #12]
 804f4ca:	e00a      	b.n	804f4e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 804f4cc:	68fb      	ldr	r3, [r7, #12]
 804f4ce:	891a      	ldrh	r2, [r3, #8]
 804f4d0:	683b      	ldr	r3, [r7, #0]
 804f4d2:	891b      	ldrh	r3, [r3, #8]
 804f4d4:	4413      	add	r3, r2
 804f4d6:	b29a      	uxth	r2, r3
 804f4d8:	68fb      	ldr	r3, [r7, #12]
 804f4da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 804f4dc:	68fb      	ldr	r3, [r7, #12]
 804f4de:	681b      	ldr	r3, [r3, #0]
 804f4e0:	60fb      	str	r3, [r7, #12]
 804f4e2:	68fb      	ldr	r3, [r7, #12]
 804f4e4:	681b      	ldr	r3, [r3, #0]
 804f4e6:	2b00      	cmp	r3, #0
 804f4e8:	d1f0      	bne.n	804f4cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 804f4ea:	68fb      	ldr	r3, [r7, #12]
 804f4ec:	891a      	ldrh	r2, [r3, #8]
 804f4ee:	68fb      	ldr	r3, [r7, #12]
 804f4f0:	895b      	ldrh	r3, [r3, #10]
 804f4f2:	429a      	cmp	r2, r3
 804f4f4:	d006      	beq.n	804f504 <pbuf_cat+0x64>
 804f4f6:	4b10      	ldr	r3, [pc, #64]	; (804f538 <pbuf_cat+0x98>)
 804f4f8:	f240 3262 	movw	r2, #866	; 0x362
 804f4fc:	4911      	ldr	r1, [pc, #68]	; (804f544 <pbuf_cat+0xa4>)
 804f4fe:	4810      	ldr	r0, [pc, #64]	; (804f540 <pbuf_cat+0xa0>)
 804f500:	f009 fd98 	bl	8059034 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 804f504:	68fb      	ldr	r3, [r7, #12]
 804f506:	681b      	ldr	r3, [r3, #0]
 804f508:	2b00      	cmp	r3, #0
 804f50a:	d006      	beq.n	804f51a <pbuf_cat+0x7a>
 804f50c:	4b0a      	ldr	r3, [pc, #40]	; (804f538 <pbuf_cat+0x98>)
 804f50e:	f240 3263 	movw	r2, #867	; 0x363
 804f512:	490d      	ldr	r1, [pc, #52]	; (804f548 <pbuf_cat+0xa8>)
 804f514:	480a      	ldr	r0, [pc, #40]	; (804f540 <pbuf_cat+0xa0>)
 804f516:	f009 fd8d 	bl	8059034 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 804f51a:	68fb      	ldr	r3, [r7, #12]
 804f51c:	891a      	ldrh	r2, [r3, #8]
 804f51e:	683b      	ldr	r3, [r7, #0]
 804f520:	891b      	ldrh	r3, [r3, #8]
 804f522:	4413      	add	r3, r2
 804f524:	b29a      	uxth	r2, r3
 804f526:	68fb      	ldr	r3, [r7, #12]
 804f528:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 804f52a:	68fb      	ldr	r3, [r7, #12]
 804f52c:	683a      	ldr	r2, [r7, #0]
 804f52e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 804f530:	3710      	adds	r7, #16
 804f532:	46bd      	mov	sp, r7
 804f534:	bd80      	pop	{r7, pc}
 804f536:	bf00      	nop
 804f538:	0805b3dc 	.word	0x0805b3dc
 804f53c:	0805b5d0 	.word	0x0805b5d0
 804f540:	0805b43c 	.word	0x0805b43c
 804f544:	0805b608 	.word	0x0805b608
 804f548:	0805b638 	.word	0x0805b638

0804f54c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 804f54c:	b580      	push	{r7, lr}
 804f54e:	b086      	sub	sp, #24
 804f550:	af00      	add	r7, sp, #0
 804f552:	6078      	str	r0, [r7, #4]
 804f554:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 804f556:	2300      	movs	r3, #0
 804f558:	617b      	str	r3, [r7, #20]
 804f55a:	2300      	movs	r3, #0
 804f55c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 804f55e:	687b      	ldr	r3, [r7, #4]
 804f560:	2b00      	cmp	r3, #0
 804f562:	d008      	beq.n	804f576 <pbuf_copy+0x2a>
 804f564:	683b      	ldr	r3, [r7, #0]
 804f566:	2b00      	cmp	r3, #0
 804f568:	d005      	beq.n	804f576 <pbuf_copy+0x2a>
 804f56a:	687b      	ldr	r3, [r7, #4]
 804f56c:	891a      	ldrh	r2, [r3, #8]
 804f56e:	683b      	ldr	r3, [r7, #0]
 804f570:	891b      	ldrh	r3, [r3, #8]
 804f572:	429a      	cmp	r2, r3
 804f574:	d209      	bcs.n	804f58a <pbuf_copy+0x3e>
 804f576:	4b57      	ldr	r3, [pc, #348]	; (804f6d4 <pbuf_copy+0x188>)
 804f578:	f240 32c9 	movw	r2, #969	; 0x3c9
 804f57c:	4956      	ldr	r1, [pc, #344]	; (804f6d8 <pbuf_copy+0x18c>)
 804f57e:	4857      	ldr	r0, [pc, #348]	; (804f6dc <pbuf_copy+0x190>)
 804f580:	f009 fd58 	bl	8059034 <iprintf>
 804f584:	f06f 030f 	mvn.w	r3, #15
 804f588:	e09f      	b.n	804f6ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 804f58a:	687b      	ldr	r3, [r7, #4]
 804f58c:	895b      	ldrh	r3, [r3, #10]
 804f58e:	461a      	mov	r2, r3
 804f590:	697b      	ldr	r3, [r7, #20]
 804f592:	1ad2      	subs	r2, r2, r3
 804f594:	683b      	ldr	r3, [r7, #0]
 804f596:	895b      	ldrh	r3, [r3, #10]
 804f598:	4619      	mov	r1, r3
 804f59a:	693b      	ldr	r3, [r7, #16]
 804f59c:	1acb      	subs	r3, r1, r3
 804f59e:	429a      	cmp	r2, r3
 804f5a0:	d306      	bcc.n	804f5b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 804f5a2:	683b      	ldr	r3, [r7, #0]
 804f5a4:	895b      	ldrh	r3, [r3, #10]
 804f5a6:	461a      	mov	r2, r3
 804f5a8:	693b      	ldr	r3, [r7, #16]
 804f5aa:	1ad3      	subs	r3, r2, r3
 804f5ac:	60fb      	str	r3, [r7, #12]
 804f5ae:	e005      	b.n	804f5bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 804f5b0:	687b      	ldr	r3, [r7, #4]
 804f5b2:	895b      	ldrh	r3, [r3, #10]
 804f5b4:	461a      	mov	r2, r3
 804f5b6:	697b      	ldr	r3, [r7, #20]
 804f5b8:	1ad3      	subs	r3, r2, r3
 804f5ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 804f5bc:	687b      	ldr	r3, [r7, #4]
 804f5be:	685a      	ldr	r2, [r3, #4]
 804f5c0:	697b      	ldr	r3, [r7, #20]
 804f5c2:	18d0      	adds	r0, r2, r3
 804f5c4:	683b      	ldr	r3, [r7, #0]
 804f5c6:	685a      	ldr	r2, [r3, #4]
 804f5c8:	693b      	ldr	r3, [r7, #16]
 804f5ca:	4413      	add	r3, r2
 804f5cc:	68fa      	ldr	r2, [r7, #12]
 804f5ce:	4619      	mov	r1, r3
 804f5d0:	f009 fc20 	bl	8058e14 <memcpy>
    offset_to += len;
 804f5d4:	697a      	ldr	r2, [r7, #20]
 804f5d6:	68fb      	ldr	r3, [r7, #12]
 804f5d8:	4413      	add	r3, r2
 804f5da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 804f5dc:	693a      	ldr	r2, [r7, #16]
 804f5de:	68fb      	ldr	r3, [r7, #12]
 804f5e0:	4413      	add	r3, r2
 804f5e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 804f5e4:	687b      	ldr	r3, [r7, #4]
 804f5e6:	895b      	ldrh	r3, [r3, #10]
 804f5e8:	461a      	mov	r2, r3
 804f5ea:	697b      	ldr	r3, [r7, #20]
 804f5ec:	4293      	cmp	r3, r2
 804f5ee:	d906      	bls.n	804f5fe <pbuf_copy+0xb2>
 804f5f0:	4b38      	ldr	r3, [pc, #224]	; (804f6d4 <pbuf_copy+0x188>)
 804f5f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 804f5f6:	493a      	ldr	r1, [pc, #232]	; (804f6e0 <pbuf_copy+0x194>)
 804f5f8:	4838      	ldr	r0, [pc, #224]	; (804f6dc <pbuf_copy+0x190>)
 804f5fa:	f009 fd1b 	bl	8059034 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 804f5fe:	683b      	ldr	r3, [r7, #0]
 804f600:	895b      	ldrh	r3, [r3, #10]
 804f602:	461a      	mov	r2, r3
 804f604:	693b      	ldr	r3, [r7, #16]
 804f606:	4293      	cmp	r3, r2
 804f608:	d906      	bls.n	804f618 <pbuf_copy+0xcc>
 804f60a:	4b32      	ldr	r3, [pc, #200]	; (804f6d4 <pbuf_copy+0x188>)
 804f60c:	f240 32da 	movw	r2, #986	; 0x3da
 804f610:	4934      	ldr	r1, [pc, #208]	; (804f6e4 <pbuf_copy+0x198>)
 804f612:	4832      	ldr	r0, [pc, #200]	; (804f6dc <pbuf_copy+0x190>)
 804f614:	f009 fd0e 	bl	8059034 <iprintf>
    if (offset_from >= p_from->len) {
 804f618:	683b      	ldr	r3, [r7, #0]
 804f61a:	895b      	ldrh	r3, [r3, #10]
 804f61c:	461a      	mov	r2, r3
 804f61e:	693b      	ldr	r3, [r7, #16]
 804f620:	4293      	cmp	r3, r2
 804f622:	d304      	bcc.n	804f62e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 804f624:	2300      	movs	r3, #0
 804f626:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 804f628:	683b      	ldr	r3, [r7, #0]
 804f62a:	681b      	ldr	r3, [r3, #0]
 804f62c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 804f62e:	687b      	ldr	r3, [r7, #4]
 804f630:	895b      	ldrh	r3, [r3, #10]
 804f632:	461a      	mov	r2, r3
 804f634:	697b      	ldr	r3, [r7, #20]
 804f636:	4293      	cmp	r3, r2
 804f638:	d114      	bne.n	804f664 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 804f63a:	2300      	movs	r3, #0
 804f63c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 804f63e:	687b      	ldr	r3, [r7, #4]
 804f640:	681b      	ldr	r3, [r3, #0]
 804f642:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 804f644:	687b      	ldr	r3, [r7, #4]
 804f646:	2b00      	cmp	r3, #0
 804f648:	d10c      	bne.n	804f664 <pbuf_copy+0x118>
 804f64a:	683b      	ldr	r3, [r7, #0]
 804f64c:	2b00      	cmp	r3, #0
 804f64e:	d009      	beq.n	804f664 <pbuf_copy+0x118>
 804f650:	4b20      	ldr	r3, [pc, #128]	; (804f6d4 <pbuf_copy+0x188>)
 804f652:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 804f656:	4924      	ldr	r1, [pc, #144]	; (804f6e8 <pbuf_copy+0x19c>)
 804f658:	4820      	ldr	r0, [pc, #128]	; (804f6dc <pbuf_copy+0x190>)
 804f65a:	f009 fceb 	bl	8059034 <iprintf>
 804f65e:	f06f 030f 	mvn.w	r3, #15
 804f662:	e032      	b.n	804f6ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 804f664:	683b      	ldr	r3, [r7, #0]
 804f666:	2b00      	cmp	r3, #0
 804f668:	d013      	beq.n	804f692 <pbuf_copy+0x146>
 804f66a:	683b      	ldr	r3, [r7, #0]
 804f66c:	895a      	ldrh	r2, [r3, #10]
 804f66e:	683b      	ldr	r3, [r7, #0]
 804f670:	891b      	ldrh	r3, [r3, #8]
 804f672:	429a      	cmp	r2, r3
 804f674:	d10d      	bne.n	804f692 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 804f676:	683b      	ldr	r3, [r7, #0]
 804f678:	681b      	ldr	r3, [r3, #0]
 804f67a:	2b00      	cmp	r3, #0
 804f67c:	d009      	beq.n	804f692 <pbuf_copy+0x146>
 804f67e:	4b15      	ldr	r3, [pc, #84]	; (804f6d4 <pbuf_copy+0x188>)
 804f680:	f240 32e9 	movw	r2, #1001	; 0x3e9
 804f684:	4919      	ldr	r1, [pc, #100]	; (804f6ec <pbuf_copy+0x1a0>)
 804f686:	4815      	ldr	r0, [pc, #84]	; (804f6dc <pbuf_copy+0x190>)
 804f688:	f009 fcd4 	bl	8059034 <iprintf>
 804f68c:	f06f 0305 	mvn.w	r3, #5
 804f690:	e01b      	b.n	804f6ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 804f692:	687b      	ldr	r3, [r7, #4]
 804f694:	2b00      	cmp	r3, #0
 804f696:	d013      	beq.n	804f6c0 <pbuf_copy+0x174>
 804f698:	687b      	ldr	r3, [r7, #4]
 804f69a:	895a      	ldrh	r2, [r3, #10]
 804f69c:	687b      	ldr	r3, [r7, #4]
 804f69e:	891b      	ldrh	r3, [r3, #8]
 804f6a0:	429a      	cmp	r2, r3
 804f6a2:	d10d      	bne.n	804f6c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 804f6a4:	687b      	ldr	r3, [r7, #4]
 804f6a6:	681b      	ldr	r3, [r3, #0]
 804f6a8:	2b00      	cmp	r3, #0
 804f6aa:	d009      	beq.n	804f6c0 <pbuf_copy+0x174>
 804f6ac:	4b09      	ldr	r3, [pc, #36]	; (804f6d4 <pbuf_copy+0x188>)
 804f6ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 804f6b2:	490e      	ldr	r1, [pc, #56]	; (804f6ec <pbuf_copy+0x1a0>)
 804f6b4:	4809      	ldr	r0, [pc, #36]	; (804f6dc <pbuf_copy+0x190>)
 804f6b6:	f009 fcbd 	bl	8059034 <iprintf>
 804f6ba:	f06f 0305 	mvn.w	r3, #5
 804f6be:	e004      	b.n	804f6ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 804f6c0:	683b      	ldr	r3, [r7, #0]
 804f6c2:	2b00      	cmp	r3, #0
 804f6c4:	f47f af61 	bne.w	804f58a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 804f6c8:	2300      	movs	r3, #0
}
 804f6ca:	4618      	mov	r0, r3
 804f6cc:	3718      	adds	r7, #24
 804f6ce:	46bd      	mov	sp, r7
 804f6d0:	bd80      	pop	{r7, pc}
 804f6d2:	bf00      	nop
 804f6d4:	0805b3dc 	.word	0x0805b3dc
 804f6d8:	0805b684 	.word	0x0805b684
 804f6dc:	0805b43c 	.word	0x0805b43c
 804f6e0:	0805b6b4 	.word	0x0805b6b4
 804f6e4:	0805b6cc 	.word	0x0805b6cc
 804f6e8:	0805b6e8 	.word	0x0805b6e8
 804f6ec:	0805b6f8 	.word	0x0805b6f8

0804f6f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 804f6f0:	b580      	push	{r7, lr}
 804f6f2:	b088      	sub	sp, #32
 804f6f4:	af00      	add	r7, sp, #0
 804f6f6:	60f8      	str	r0, [r7, #12]
 804f6f8:	60b9      	str	r1, [r7, #8]
 804f6fa:	4611      	mov	r1, r2
 804f6fc:	461a      	mov	r2, r3
 804f6fe:	460b      	mov	r3, r1
 804f700:	80fb      	strh	r3, [r7, #6]
 804f702:	4613      	mov	r3, r2
 804f704:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 804f706:	2300      	movs	r3, #0
 804f708:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 804f70a:	2300      	movs	r3, #0
 804f70c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 804f70e:	68fb      	ldr	r3, [r7, #12]
 804f710:	2b00      	cmp	r3, #0
 804f712:	d108      	bne.n	804f726 <pbuf_copy_partial+0x36>
 804f714:	4b2b      	ldr	r3, [pc, #172]	; (804f7c4 <pbuf_copy_partial+0xd4>)
 804f716:	f240 420a 	movw	r2, #1034	; 0x40a
 804f71a:	492b      	ldr	r1, [pc, #172]	; (804f7c8 <pbuf_copy_partial+0xd8>)
 804f71c:	482b      	ldr	r0, [pc, #172]	; (804f7cc <pbuf_copy_partial+0xdc>)
 804f71e:	f009 fc89 	bl	8059034 <iprintf>
 804f722:	2300      	movs	r3, #0
 804f724:	e04a      	b.n	804f7bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 804f726:	68bb      	ldr	r3, [r7, #8]
 804f728:	2b00      	cmp	r3, #0
 804f72a:	d108      	bne.n	804f73e <pbuf_copy_partial+0x4e>
 804f72c:	4b25      	ldr	r3, [pc, #148]	; (804f7c4 <pbuf_copy_partial+0xd4>)
 804f72e:	f240 420b 	movw	r2, #1035	; 0x40b
 804f732:	4927      	ldr	r1, [pc, #156]	; (804f7d0 <pbuf_copy_partial+0xe0>)
 804f734:	4825      	ldr	r0, [pc, #148]	; (804f7cc <pbuf_copy_partial+0xdc>)
 804f736:	f009 fc7d 	bl	8059034 <iprintf>
 804f73a:	2300      	movs	r3, #0
 804f73c:	e03e      	b.n	804f7bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 804f73e:	68fb      	ldr	r3, [r7, #12]
 804f740:	61fb      	str	r3, [r7, #28]
 804f742:	e034      	b.n	804f7ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 804f744:	88bb      	ldrh	r3, [r7, #4]
 804f746:	2b00      	cmp	r3, #0
 804f748:	d00a      	beq.n	804f760 <pbuf_copy_partial+0x70>
 804f74a:	69fb      	ldr	r3, [r7, #28]
 804f74c:	895b      	ldrh	r3, [r3, #10]
 804f74e:	88ba      	ldrh	r2, [r7, #4]
 804f750:	429a      	cmp	r2, r3
 804f752:	d305      	bcc.n	804f760 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 804f754:	69fb      	ldr	r3, [r7, #28]
 804f756:	895b      	ldrh	r3, [r3, #10]
 804f758:	88ba      	ldrh	r2, [r7, #4]
 804f75a:	1ad3      	subs	r3, r2, r3
 804f75c:	80bb      	strh	r3, [r7, #4]
 804f75e:	e023      	b.n	804f7a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 804f760:	69fb      	ldr	r3, [r7, #28]
 804f762:	895a      	ldrh	r2, [r3, #10]
 804f764:	88bb      	ldrh	r3, [r7, #4]
 804f766:	1ad3      	subs	r3, r2, r3
 804f768:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 804f76a:	8b3a      	ldrh	r2, [r7, #24]
 804f76c:	88fb      	ldrh	r3, [r7, #6]
 804f76e:	429a      	cmp	r2, r3
 804f770:	d901      	bls.n	804f776 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 804f772:	88fb      	ldrh	r3, [r7, #6]
 804f774:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 804f776:	8b7b      	ldrh	r3, [r7, #26]
 804f778:	68ba      	ldr	r2, [r7, #8]
 804f77a:	18d0      	adds	r0, r2, r3
 804f77c:	69fb      	ldr	r3, [r7, #28]
 804f77e:	685a      	ldr	r2, [r3, #4]
 804f780:	88bb      	ldrh	r3, [r7, #4]
 804f782:	4413      	add	r3, r2
 804f784:	8b3a      	ldrh	r2, [r7, #24]
 804f786:	4619      	mov	r1, r3
 804f788:	f009 fb44 	bl	8058e14 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 804f78c:	8afa      	ldrh	r2, [r7, #22]
 804f78e:	8b3b      	ldrh	r3, [r7, #24]
 804f790:	4413      	add	r3, r2
 804f792:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 804f794:	8b7a      	ldrh	r2, [r7, #26]
 804f796:	8b3b      	ldrh	r3, [r7, #24]
 804f798:	4413      	add	r3, r2
 804f79a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 804f79c:	88fa      	ldrh	r2, [r7, #6]
 804f79e:	8b3b      	ldrh	r3, [r7, #24]
 804f7a0:	1ad3      	subs	r3, r2, r3
 804f7a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 804f7a4:	2300      	movs	r3, #0
 804f7a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 804f7a8:	69fb      	ldr	r3, [r7, #28]
 804f7aa:	681b      	ldr	r3, [r3, #0]
 804f7ac:	61fb      	str	r3, [r7, #28]
 804f7ae:	88fb      	ldrh	r3, [r7, #6]
 804f7b0:	2b00      	cmp	r3, #0
 804f7b2:	d002      	beq.n	804f7ba <pbuf_copy_partial+0xca>
 804f7b4:	69fb      	ldr	r3, [r7, #28]
 804f7b6:	2b00      	cmp	r3, #0
 804f7b8:	d1c4      	bne.n	804f744 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 804f7ba:	8afb      	ldrh	r3, [r7, #22]
}
 804f7bc:	4618      	mov	r0, r3
 804f7be:	3720      	adds	r7, #32
 804f7c0:	46bd      	mov	sp, r7
 804f7c2:	bd80      	pop	{r7, pc}
 804f7c4:	0805b3dc 	.word	0x0805b3dc
 804f7c8:	0805b724 	.word	0x0805b724
 804f7cc:	0805b43c 	.word	0x0805b43c
 804f7d0:	0805b744 	.word	0x0805b744

0804f7d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 804f7d4:	b580      	push	{r7, lr}
 804f7d6:	b084      	sub	sp, #16
 804f7d8:	af00      	add	r7, sp, #0
 804f7da:	4603      	mov	r3, r0
 804f7dc:	603a      	str	r2, [r7, #0]
 804f7de:	71fb      	strb	r3, [r7, #7]
 804f7e0:	460b      	mov	r3, r1
 804f7e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 804f7e4:	683b      	ldr	r3, [r7, #0]
 804f7e6:	8919      	ldrh	r1, [r3, #8]
 804f7e8:	88ba      	ldrh	r2, [r7, #4]
 804f7ea:	79fb      	ldrb	r3, [r7, #7]
 804f7ec:	4618      	mov	r0, r3
 804f7ee:	f7ff faa5 	bl	804ed3c <pbuf_alloc>
 804f7f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 804f7f4:	68fb      	ldr	r3, [r7, #12]
 804f7f6:	2b00      	cmp	r3, #0
 804f7f8:	d101      	bne.n	804f7fe <pbuf_clone+0x2a>
    return NULL;
 804f7fa:	2300      	movs	r3, #0
 804f7fc:	e011      	b.n	804f822 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 804f7fe:	6839      	ldr	r1, [r7, #0]
 804f800:	68f8      	ldr	r0, [r7, #12]
 804f802:	f7ff fea3 	bl	804f54c <pbuf_copy>
 804f806:	4603      	mov	r3, r0
 804f808:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 804f80a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 804f80e:	2b00      	cmp	r3, #0
 804f810:	d006      	beq.n	804f820 <pbuf_clone+0x4c>
 804f812:	4b06      	ldr	r3, [pc, #24]	; (804f82c <pbuf_clone+0x58>)
 804f814:	f240 5224 	movw	r2, #1316	; 0x524
 804f818:	4905      	ldr	r1, [pc, #20]	; (804f830 <pbuf_clone+0x5c>)
 804f81a:	4806      	ldr	r0, [pc, #24]	; (804f834 <pbuf_clone+0x60>)
 804f81c:	f009 fc0a 	bl	8059034 <iprintf>
  return q;
 804f820:	68fb      	ldr	r3, [r7, #12]
}
 804f822:	4618      	mov	r0, r3
 804f824:	3710      	adds	r7, #16
 804f826:	46bd      	mov	sp, r7
 804f828:	bd80      	pop	{r7, pc}
 804f82a:	bf00      	nop
 804f82c:	0805b3dc 	.word	0x0805b3dc
 804f830:	0805b850 	.word	0x0805b850
 804f834:	0805b43c 	.word	0x0805b43c

0804f838 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 804f838:	b580      	push	{r7, lr}
 804f83a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 804f83c:	f009 fc12 	bl	8059064 <rand>
 804f840:	4603      	mov	r3, r0
 804f842:	b29b      	uxth	r3, r3
 804f844:	f3c3 030d 	ubfx	r3, r3, #0, #14
 804f848:	b29b      	uxth	r3, r3
 804f84a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 804f84e:	b29a      	uxth	r2, r3
 804f850:	4b01      	ldr	r3, [pc, #4]	; (804f858 <tcp_init+0x20>)
 804f852:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 804f854:	bf00      	nop
 804f856:	bd80      	pop	{r7, pc}
 804f858:	20000028 	.word	0x20000028

0804f85c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 804f85c:	b580      	push	{r7, lr}
 804f85e:	b082      	sub	sp, #8
 804f860:	af00      	add	r7, sp, #0
 804f862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 804f864:	687b      	ldr	r3, [r7, #4]
 804f866:	7d1b      	ldrb	r3, [r3, #20]
 804f868:	2b01      	cmp	r3, #1
 804f86a:	d105      	bne.n	804f878 <tcp_free+0x1c>
 804f86c:	4b06      	ldr	r3, [pc, #24]	; (804f888 <tcp_free+0x2c>)
 804f86e:	22d4      	movs	r2, #212	; 0xd4
 804f870:	4906      	ldr	r1, [pc, #24]	; (804f88c <tcp_free+0x30>)
 804f872:	4807      	ldr	r0, [pc, #28]	; (804f890 <tcp_free+0x34>)
 804f874:	f009 fbde 	bl	8059034 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 804f878:	6879      	ldr	r1, [r7, #4]
 804f87a:	2001      	movs	r0, #1
 804f87c:	f7fe fe9e 	bl	804e5bc <memp_free>
}
 804f880:	bf00      	nop
 804f882:	3708      	adds	r7, #8
 804f884:	46bd      	mov	sp, r7
 804f886:	bd80      	pop	{r7, pc}
 804f888:	0805b8dc 	.word	0x0805b8dc
 804f88c:	0805b90c 	.word	0x0805b90c
 804f890:	0805b920 	.word	0x0805b920

0804f894 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 804f894:	b580      	push	{r7, lr}
 804f896:	b082      	sub	sp, #8
 804f898:	af00      	add	r7, sp, #0
 804f89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 804f89c:	687b      	ldr	r3, [r7, #4]
 804f89e:	7d1b      	ldrb	r3, [r3, #20]
 804f8a0:	2b01      	cmp	r3, #1
 804f8a2:	d105      	bne.n	804f8b0 <tcp_free_listen+0x1c>
 804f8a4:	4b06      	ldr	r3, [pc, #24]	; (804f8c0 <tcp_free_listen+0x2c>)
 804f8a6:	22df      	movs	r2, #223	; 0xdf
 804f8a8:	4906      	ldr	r1, [pc, #24]	; (804f8c4 <tcp_free_listen+0x30>)
 804f8aa:	4807      	ldr	r0, [pc, #28]	; (804f8c8 <tcp_free_listen+0x34>)
 804f8ac:	f009 fbc2 	bl	8059034 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 804f8b0:	6879      	ldr	r1, [r7, #4]
 804f8b2:	2002      	movs	r0, #2
 804f8b4:	f7fe fe82 	bl	804e5bc <memp_free>
}
 804f8b8:	bf00      	nop
 804f8ba:	3708      	adds	r7, #8
 804f8bc:	46bd      	mov	sp, r7
 804f8be:	bd80      	pop	{r7, pc}
 804f8c0:	0805b8dc 	.word	0x0805b8dc
 804f8c4:	0805b948 	.word	0x0805b948
 804f8c8:	0805b920 	.word	0x0805b920

0804f8cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 804f8cc:	b580      	push	{r7, lr}
 804f8ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 804f8d0:	f001 f8a6 	bl	8050a20 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 804f8d4:	4b07      	ldr	r3, [pc, #28]	; (804f8f4 <tcp_tmr+0x28>)
 804f8d6:	781b      	ldrb	r3, [r3, #0]
 804f8d8:	3301      	adds	r3, #1
 804f8da:	b2da      	uxtb	r2, r3
 804f8dc:	4b05      	ldr	r3, [pc, #20]	; (804f8f4 <tcp_tmr+0x28>)
 804f8de:	701a      	strb	r2, [r3, #0]
 804f8e0:	4b04      	ldr	r3, [pc, #16]	; (804f8f4 <tcp_tmr+0x28>)
 804f8e2:	781b      	ldrb	r3, [r3, #0]
 804f8e4:	f003 0301 	and.w	r3, r3, #1
 804f8e8:	2b00      	cmp	r3, #0
 804f8ea:	d001      	beq.n	804f8f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 804f8ec:	f000 fd58 	bl	80503a0 <tcp_slowtmr>
  }
}
 804f8f0:	bf00      	nop
 804f8f2:	bd80      	pop	{r7, pc}
 804f8f4:	2000b5e1 	.word	0x2000b5e1

0804f8f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 804f8f8:	b580      	push	{r7, lr}
 804f8fa:	b084      	sub	sp, #16
 804f8fc:	af00      	add	r7, sp, #0
 804f8fe:	6078      	str	r0, [r7, #4]
 804f900:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 804f902:	683b      	ldr	r3, [r7, #0]
 804f904:	2b00      	cmp	r3, #0
 804f906:	d105      	bne.n	804f914 <tcp_remove_listener+0x1c>
 804f908:	4b0d      	ldr	r3, [pc, #52]	; (804f940 <tcp_remove_listener+0x48>)
 804f90a:	22ff      	movs	r2, #255	; 0xff
 804f90c:	490d      	ldr	r1, [pc, #52]	; (804f944 <tcp_remove_listener+0x4c>)
 804f90e:	480e      	ldr	r0, [pc, #56]	; (804f948 <tcp_remove_listener+0x50>)
 804f910:	f009 fb90 	bl	8059034 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 804f914:	687b      	ldr	r3, [r7, #4]
 804f916:	60fb      	str	r3, [r7, #12]
 804f918:	e00a      	b.n	804f930 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 804f91a:	68fb      	ldr	r3, [r7, #12]
 804f91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804f91e:	683a      	ldr	r2, [r7, #0]
 804f920:	429a      	cmp	r2, r3
 804f922:	d102      	bne.n	804f92a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 804f924:	68fb      	ldr	r3, [r7, #12]
 804f926:	2200      	movs	r2, #0
 804f928:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 804f92a:	68fb      	ldr	r3, [r7, #12]
 804f92c:	68db      	ldr	r3, [r3, #12]
 804f92e:	60fb      	str	r3, [r7, #12]
 804f930:	68fb      	ldr	r3, [r7, #12]
 804f932:	2b00      	cmp	r3, #0
 804f934:	d1f1      	bne.n	804f91a <tcp_remove_listener+0x22>
    }
  }
}
 804f936:	bf00      	nop
 804f938:	bf00      	nop
 804f93a:	3710      	adds	r7, #16
 804f93c:	46bd      	mov	sp, r7
 804f93e:	bd80      	pop	{r7, pc}
 804f940:	0805b8dc 	.word	0x0805b8dc
 804f944:	0805b964 	.word	0x0805b964
 804f948:	0805b920 	.word	0x0805b920

0804f94c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 804f94c:	b580      	push	{r7, lr}
 804f94e:	b084      	sub	sp, #16
 804f950:	af00      	add	r7, sp, #0
 804f952:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 804f954:	687b      	ldr	r3, [r7, #4]
 804f956:	2b00      	cmp	r3, #0
 804f958:	d106      	bne.n	804f968 <tcp_listen_closed+0x1c>
 804f95a:	4b14      	ldr	r3, [pc, #80]	; (804f9ac <tcp_listen_closed+0x60>)
 804f95c:	f240 1211 	movw	r2, #273	; 0x111
 804f960:	4913      	ldr	r1, [pc, #76]	; (804f9b0 <tcp_listen_closed+0x64>)
 804f962:	4814      	ldr	r0, [pc, #80]	; (804f9b4 <tcp_listen_closed+0x68>)
 804f964:	f009 fb66 	bl	8059034 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 804f968:	687b      	ldr	r3, [r7, #4]
 804f96a:	7d1b      	ldrb	r3, [r3, #20]
 804f96c:	2b01      	cmp	r3, #1
 804f96e:	d006      	beq.n	804f97e <tcp_listen_closed+0x32>
 804f970:	4b0e      	ldr	r3, [pc, #56]	; (804f9ac <tcp_listen_closed+0x60>)
 804f972:	f44f 7289 	mov.w	r2, #274	; 0x112
 804f976:	4910      	ldr	r1, [pc, #64]	; (804f9b8 <tcp_listen_closed+0x6c>)
 804f978:	480e      	ldr	r0, [pc, #56]	; (804f9b4 <tcp_listen_closed+0x68>)
 804f97a:	f009 fb5b 	bl	8059034 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 804f97e:	2301      	movs	r3, #1
 804f980:	60fb      	str	r3, [r7, #12]
 804f982:	e00b      	b.n	804f99c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 804f984:	4a0d      	ldr	r2, [pc, #52]	; (804f9bc <tcp_listen_closed+0x70>)
 804f986:	68fb      	ldr	r3, [r7, #12]
 804f988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804f98c:	681b      	ldr	r3, [r3, #0]
 804f98e:	6879      	ldr	r1, [r7, #4]
 804f990:	4618      	mov	r0, r3
 804f992:	f7ff ffb1 	bl	804f8f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 804f996:	68fb      	ldr	r3, [r7, #12]
 804f998:	3301      	adds	r3, #1
 804f99a:	60fb      	str	r3, [r7, #12]
 804f99c:	68fb      	ldr	r3, [r7, #12]
 804f99e:	2b03      	cmp	r3, #3
 804f9a0:	d9f0      	bls.n	804f984 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 804f9a2:	bf00      	nop
 804f9a4:	bf00      	nop
 804f9a6:	3710      	adds	r7, #16
 804f9a8:	46bd      	mov	sp, r7
 804f9aa:	bd80      	pop	{r7, pc}
 804f9ac:	0805b8dc 	.word	0x0805b8dc
 804f9b0:	0805b98c 	.word	0x0805b98c
 804f9b4:	0805b920 	.word	0x0805b920
 804f9b8:	0805b998 	.word	0x0805b998
 804f9bc:	0805d900 	.word	0x0805d900

0804f9c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 804f9c0:	b5b0      	push	{r4, r5, r7, lr}
 804f9c2:	b088      	sub	sp, #32
 804f9c4:	af04      	add	r7, sp, #16
 804f9c6:	6078      	str	r0, [r7, #4]
 804f9c8:	460b      	mov	r3, r1
 804f9ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 804f9cc:	687b      	ldr	r3, [r7, #4]
 804f9ce:	2b00      	cmp	r3, #0
 804f9d0:	d106      	bne.n	804f9e0 <tcp_close_shutdown+0x20>
 804f9d2:	4b63      	ldr	r3, [pc, #396]	; (804fb60 <tcp_close_shutdown+0x1a0>)
 804f9d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 804f9d8:	4962      	ldr	r1, [pc, #392]	; (804fb64 <tcp_close_shutdown+0x1a4>)
 804f9da:	4863      	ldr	r0, [pc, #396]	; (804fb68 <tcp_close_shutdown+0x1a8>)
 804f9dc:	f009 fb2a 	bl	8059034 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 804f9e0:	78fb      	ldrb	r3, [r7, #3]
 804f9e2:	2b00      	cmp	r3, #0
 804f9e4:	d066      	beq.n	804fab4 <tcp_close_shutdown+0xf4>
 804f9e6:	687b      	ldr	r3, [r7, #4]
 804f9e8:	7d1b      	ldrb	r3, [r3, #20]
 804f9ea:	2b04      	cmp	r3, #4
 804f9ec:	d003      	beq.n	804f9f6 <tcp_close_shutdown+0x36>
 804f9ee:	687b      	ldr	r3, [r7, #4]
 804f9f0:	7d1b      	ldrb	r3, [r3, #20]
 804f9f2:	2b07      	cmp	r3, #7
 804f9f4:	d15e      	bne.n	804fab4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 804f9f6:	687b      	ldr	r3, [r7, #4]
 804f9f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804f9fa:	2b00      	cmp	r3, #0
 804f9fc:	d104      	bne.n	804fa08 <tcp_close_shutdown+0x48>
 804f9fe:	687b      	ldr	r3, [r7, #4]
 804fa00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804fa02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 804fa06:	d055      	beq.n	804fab4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 804fa08:	687b      	ldr	r3, [r7, #4]
 804fa0a:	8b5b      	ldrh	r3, [r3, #26]
 804fa0c:	f003 0310 	and.w	r3, r3, #16
 804fa10:	2b00      	cmp	r3, #0
 804fa12:	d106      	bne.n	804fa22 <tcp_close_shutdown+0x62>
 804fa14:	4b52      	ldr	r3, [pc, #328]	; (804fb60 <tcp_close_shutdown+0x1a0>)
 804fa16:	f44f 72b2 	mov.w	r2, #356	; 0x164
 804fa1a:	4954      	ldr	r1, [pc, #336]	; (804fb6c <tcp_close_shutdown+0x1ac>)
 804fa1c:	4852      	ldr	r0, [pc, #328]	; (804fb68 <tcp_close_shutdown+0x1a8>)
 804fa1e:	f009 fb09 	bl	8059034 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 804fa22:	687b      	ldr	r3, [r7, #4]
 804fa24:	6d18      	ldr	r0, [r3, #80]	; 0x50
 804fa26:	687b      	ldr	r3, [r7, #4]
 804fa28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 804fa2a:	687d      	ldr	r5, [r7, #4]
 804fa2c:	687b      	ldr	r3, [r7, #4]
 804fa2e:	3304      	adds	r3, #4
 804fa30:	687a      	ldr	r2, [r7, #4]
 804fa32:	8ad2      	ldrh	r2, [r2, #22]
 804fa34:	6879      	ldr	r1, [r7, #4]
 804fa36:	8b09      	ldrh	r1, [r1, #24]
 804fa38:	9102      	str	r1, [sp, #8]
 804fa3a:	9201      	str	r2, [sp, #4]
 804fa3c:	9300      	str	r3, [sp, #0]
 804fa3e:	462b      	mov	r3, r5
 804fa40:	4622      	mov	r2, r4
 804fa42:	4601      	mov	r1, r0
 804fa44:	6878      	ldr	r0, [r7, #4]
 804fa46:	f005 fdbb 	bl	80555c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 804fa4a:	6878      	ldr	r0, [r7, #4]
 804fa4c:	f001 fb98 	bl	8051180 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 804fa50:	4b47      	ldr	r3, [pc, #284]	; (804fb70 <tcp_close_shutdown+0x1b0>)
 804fa52:	681b      	ldr	r3, [r3, #0]
 804fa54:	687a      	ldr	r2, [r7, #4]
 804fa56:	429a      	cmp	r2, r3
 804fa58:	d105      	bne.n	804fa66 <tcp_close_shutdown+0xa6>
 804fa5a:	4b45      	ldr	r3, [pc, #276]	; (804fb70 <tcp_close_shutdown+0x1b0>)
 804fa5c:	681b      	ldr	r3, [r3, #0]
 804fa5e:	68db      	ldr	r3, [r3, #12]
 804fa60:	4a43      	ldr	r2, [pc, #268]	; (804fb70 <tcp_close_shutdown+0x1b0>)
 804fa62:	6013      	str	r3, [r2, #0]
 804fa64:	e013      	b.n	804fa8e <tcp_close_shutdown+0xce>
 804fa66:	4b42      	ldr	r3, [pc, #264]	; (804fb70 <tcp_close_shutdown+0x1b0>)
 804fa68:	681b      	ldr	r3, [r3, #0]
 804fa6a:	60fb      	str	r3, [r7, #12]
 804fa6c:	e00c      	b.n	804fa88 <tcp_close_shutdown+0xc8>
 804fa6e:	68fb      	ldr	r3, [r7, #12]
 804fa70:	68db      	ldr	r3, [r3, #12]
 804fa72:	687a      	ldr	r2, [r7, #4]
 804fa74:	429a      	cmp	r2, r3
 804fa76:	d104      	bne.n	804fa82 <tcp_close_shutdown+0xc2>
 804fa78:	687b      	ldr	r3, [r7, #4]
 804fa7a:	68da      	ldr	r2, [r3, #12]
 804fa7c:	68fb      	ldr	r3, [r7, #12]
 804fa7e:	60da      	str	r2, [r3, #12]
 804fa80:	e005      	b.n	804fa8e <tcp_close_shutdown+0xce>
 804fa82:	68fb      	ldr	r3, [r7, #12]
 804fa84:	68db      	ldr	r3, [r3, #12]
 804fa86:	60fb      	str	r3, [r7, #12]
 804fa88:	68fb      	ldr	r3, [r7, #12]
 804fa8a:	2b00      	cmp	r3, #0
 804fa8c:	d1ef      	bne.n	804fa6e <tcp_close_shutdown+0xae>
 804fa8e:	687b      	ldr	r3, [r7, #4]
 804fa90:	2200      	movs	r2, #0
 804fa92:	60da      	str	r2, [r3, #12]
 804fa94:	4b37      	ldr	r3, [pc, #220]	; (804fb74 <tcp_close_shutdown+0x1b4>)
 804fa96:	2201      	movs	r2, #1
 804fa98:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 804fa9a:	4b37      	ldr	r3, [pc, #220]	; (804fb78 <tcp_close_shutdown+0x1b8>)
 804fa9c:	681b      	ldr	r3, [r3, #0]
 804fa9e:	687a      	ldr	r2, [r7, #4]
 804faa0:	429a      	cmp	r2, r3
 804faa2:	d102      	bne.n	804faaa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 804faa4:	f004 f830 	bl	8053b08 <tcp_trigger_input_pcb_close>
 804faa8:	e002      	b.n	804fab0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 804faaa:	6878      	ldr	r0, [r7, #4]
 804faac:	f7ff fed6 	bl	804f85c <tcp_free>
      }
      return ERR_OK;
 804fab0:	2300      	movs	r3, #0
 804fab2:	e050      	b.n	804fb56 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 804fab4:	687b      	ldr	r3, [r7, #4]
 804fab6:	7d1b      	ldrb	r3, [r3, #20]
 804fab8:	2b02      	cmp	r3, #2
 804faba:	d03b      	beq.n	804fb34 <tcp_close_shutdown+0x174>
 804fabc:	2b02      	cmp	r3, #2
 804fabe:	dc44      	bgt.n	804fb4a <tcp_close_shutdown+0x18a>
 804fac0:	2b00      	cmp	r3, #0
 804fac2:	d002      	beq.n	804faca <tcp_close_shutdown+0x10a>
 804fac4:	2b01      	cmp	r3, #1
 804fac6:	d02a      	beq.n	804fb1e <tcp_close_shutdown+0x15e>
 804fac8:	e03f      	b.n	804fb4a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 804faca:	687b      	ldr	r3, [r7, #4]
 804facc:	8adb      	ldrh	r3, [r3, #22]
 804face:	2b00      	cmp	r3, #0
 804fad0:	d021      	beq.n	804fb16 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 804fad2:	4b2a      	ldr	r3, [pc, #168]	; (804fb7c <tcp_close_shutdown+0x1bc>)
 804fad4:	681b      	ldr	r3, [r3, #0]
 804fad6:	687a      	ldr	r2, [r7, #4]
 804fad8:	429a      	cmp	r2, r3
 804fada:	d105      	bne.n	804fae8 <tcp_close_shutdown+0x128>
 804fadc:	4b27      	ldr	r3, [pc, #156]	; (804fb7c <tcp_close_shutdown+0x1bc>)
 804fade:	681b      	ldr	r3, [r3, #0]
 804fae0:	68db      	ldr	r3, [r3, #12]
 804fae2:	4a26      	ldr	r2, [pc, #152]	; (804fb7c <tcp_close_shutdown+0x1bc>)
 804fae4:	6013      	str	r3, [r2, #0]
 804fae6:	e013      	b.n	804fb10 <tcp_close_shutdown+0x150>
 804fae8:	4b24      	ldr	r3, [pc, #144]	; (804fb7c <tcp_close_shutdown+0x1bc>)
 804faea:	681b      	ldr	r3, [r3, #0]
 804faec:	60bb      	str	r3, [r7, #8]
 804faee:	e00c      	b.n	804fb0a <tcp_close_shutdown+0x14a>
 804faf0:	68bb      	ldr	r3, [r7, #8]
 804faf2:	68db      	ldr	r3, [r3, #12]
 804faf4:	687a      	ldr	r2, [r7, #4]
 804faf6:	429a      	cmp	r2, r3
 804faf8:	d104      	bne.n	804fb04 <tcp_close_shutdown+0x144>
 804fafa:	687b      	ldr	r3, [r7, #4]
 804fafc:	68da      	ldr	r2, [r3, #12]
 804fafe:	68bb      	ldr	r3, [r7, #8]
 804fb00:	60da      	str	r2, [r3, #12]
 804fb02:	e005      	b.n	804fb10 <tcp_close_shutdown+0x150>
 804fb04:	68bb      	ldr	r3, [r7, #8]
 804fb06:	68db      	ldr	r3, [r3, #12]
 804fb08:	60bb      	str	r3, [r7, #8]
 804fb0a:	68bb      	ldr	r3, [r7, #8]
 804fb0c:	2b00      	cmp	r3, #0
 804fb0e:	d1ef      	bne.n	804faf0 <tcp_close_shutdown+0x130>
 804fb10:	687b      	ldr	r3, [r7, #4]
 804fb12:	2200      	movs	r2, #0
 804fb14:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 804fb16:	6878      	ldr	r0, [r7, #4]
 804fb18:	f7ff fea0 	bl	804f85c <tcp_free>
      break;
 804fb1c:	e01a      	b.n	804fb54 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 804fb1e:	6878      	ldr	r0, [r7, #4]
 804fb20:	f7ff ff14 	bl	804f94c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 804fb24:	6879      	ldr	r1, [r7, #4]
 804fb26:	4816      	ldr	r0, [pc, #88]	; (804fb80 <tcp_close_shutdown+0x1c0>)
 804fb28:	f001 fb7a 	bl	8051220 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 804fb2c:	6878      	ldr	r0, [r7, #4]
 804fb2e:	f7ff feb1 	bl	804f894 <tcp_free_listen>
      break;
 804fb32:	e00f      	b.n	804fb54 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 804fb34:	6879      	ldr	r1, [r7, #4]
 804fb36:	480e      	ldr	r0, [pc, #56]	; (804fb70 <tcp_close_shutdown+0x1b0>)
 804fb38:	f001 fb72 	bl	8051220 <tcp_pcb_remove>
 804fb3c:	4b0d      	ldr	r3, [pc, #52]	; (804fb74 <tcp_close_shutdown+0x1b4>)
 804fb3e:	2201      	movs	r2, #1
 804fb40:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 804fb42:	6878      	ldr	r0, [r7, #4]
 804fb44:	f7ff fe8a 	bl	804f85c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 804fb48:	e004      	b.n	804fb54 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 804fb4a:	6878      	ldr	r0, [r7, #4]
 804fb4c:	f000 f81a 	bl	804fb84 <tcp_close_shutdown_fin>
 804fb50:	4603      	mov	r3, r0
 804fb52:	e000      	b.n	804fb56 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 804fb54:	2300      	movs	r3, #0
}
 804fb56:	4618      	mov	r0, r3
 804fb58:	3710      	adds	r7, #16
 804fb5a:	46bd      	mov	sp, r7
 804fb5c:	bdb0      	pop	{r4, r5, r7, pc}
 804fb5e:	bf00      	nop
 804fb60:	0805b8dc 	.word	0x0805b8dc
 804fb64:	0805b9b0 	.word	0x0805b9b0
 804fb68:	0805b920 	.word	0x0805b920
 804fb6c:	0805b9d0 	.word	0x0805b9d0
 804fb70:	2000b5d8 	.word	0x2000b5d8
 804fb74:	2000b5e0 	.word	0x2000b5e0
 804fb78:	2000b618 	.word	0x2000b618
 804fb7c:	2000b5d0 	.word	0x2000b5d0
 804fb80:	2000b5d4 	.word	0x2000b5d4

0804fb84 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 804fb84:	b580      	push	{r7, lr}
 804fb86:	b084      	sub	sp, #16
 804fb88:	af00      	add	r7, sp, #0
 804fb8a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 804fb8c:	687b      	ldr	r3, [r7, #4]
 804fb8e:	2b00      	cmp	r3, #0
 804fb90:	d106      	bne.n	804fba0 <tcp_close_shutdown_fin+0x1c>
 804fb92:	4b2e      	ldr	r3, [pc, #184]	; (804fc4c <tcp_close_shutdown_fin+0xc8>)
 804fb94:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 804fb98:	492d      	ldr	r1, [pc, #180]	; (804fc50 <tcp_close_shutdown_fin+0xcc>)
 804fb9a:	482e      	ldr	r0, [pc, #184]	; (804fc54 <tcp_close_shutdown_fin+0xd0>)
 804fb9c:	f009 fa4a 	bl	8059034 <iprintf>

  switch (pcb->state) {
 804fba0:	687b      	ldr	r3, [r7, #4]
 804fba2:	7d1b      	ldrb	r3, [r3, #20]
 804fba4:	2b07      	cmp	r3, #7
 804fba6:	d020      	beq.n	804fbea <tcp_close_shutdown_fin+0x66>
 804fba8:	2b07      	cmp	r3, #7
 804fbaa:	dc2b      	bgt.n	804fc04 <tcp_close_shutdown_fin+0x80>
 804fbac:	2b03      	cmp	r3, #3
 804fbae:	d002      	beq.n	804fbb6 <tcp_close_shutdown_fin+0x32>
 804fbb0:	2b04      	cmp	r3, #4
 804fbb2:	d00d      	beq.n	804fbd0 <tcp_close_shutdown_fin+0x4c>
 804fbb4:	e026      	b.n	804fc04 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 804fbb6:	6878      	ldr	r0, [r7, #4]
 804fbb8:	f004 fe10 	bl	80547dc <tcp_send_fin>
 804fbbc:	4603      	mov	r3, r0
 804fbbe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 804fbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804fbc4:	2b00      	cmp	r3, #0
 804fbc6:	d11f      	bne.n	804fc08 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 804fbc8:	687b      	ldr	r3, [r7, #4]
 804fbca:	2205      	movs	r2, #5
 804fbcc:	751a      	strb	r2, [r3, #20]
      }
      break;
 804fbce:	e01b      	b.n	804fc08 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 804fbd0:	6878      	ldr	r0, [r7, #4]
 804fbd2:	f004 fe03 	bl	80547dc <tcp_send_fin>
 804fbd6:	4603      	mov	r3, r0
 804fbd8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 804fbda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804fbde:	2b00      	cmp	r3, #0
 804fbe0:	d114      	bne.n	804fc0c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 804fbe2:	687b      	ldr	r3, [r7, #4]
 804fbe4:	2205      	movs	r2, #5
 804fbe6:	751a      	strb	r2, [r3, #20]
      }
      break;
 804fbe8:	e010      	b.n	804fc0c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 804fbea:	6878      	ldr	r0, [r7, #4]
 804fbec:	f004 fdf6 	bl	80547dc <tcp_send_fin>
 804fbf0:	4603      	mov	r3, r0
 804fbf2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 804fbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804fbf8:	2b00      	cmp	r3, #0
 804fbfa:	d109      	bne.n	804fc10 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 804fbfc:	687b      	ldr	r3, [r7, #4]
 804fbfe:	2209      	movs	r2, #9
 804fc00:	751a      	strb	r2, [r3, #20]
      }
      break;
 804fc02:	e005      	b.n	804fc10 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 804fc04:	2300      	movs	r3, #0
 804fc06:	e01c      	b.n	804fc42 <tcp_close_shutdown_fin+0xbe>
      break;
 804fc08:	bf00      	nop
 804fc0a:	e002      	b.n	804fc12 <tcp_close_shutdown_fin+0x8e>
      break;
 804fc0c:	bf00      	nop
 804fc0e:	e000      	b.n	804fc12 <tcp_close_shutdown_fin+0x8e>
      break;
 804fc10:	bf00      	nop
  }

  if (err == ERR_OK) {
 804fc12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804fc16:	2b00      	cmp	r3, #0
 804fc18:	d103      	bne.n	804fc22 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 804fc1a:	6878      	ldr	r0, [r7, #4]
 804fc1c:	f004 ff1c 	bl	8054a58 <tcp_output>
 804fc20:	e00d      	b.n	804fc3e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 804fc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804fc26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 804fc2a:	d108      	bne.n	804fc3e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 804fc2c:	687b      	ldr	r3, [r7, #4]
 804fc2e:	8b5b      	ldrh	r3, [r3, #26]
 804fc30:	f043 0308 	orr.w	r3, r3, #8
 804fc34:	b29a      	uxth	r2, r3
 804fc36:	687b      	ldr	r3, [r7, #4]
 804fc38:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 804fc3a:	2300      	movs	r3, #0
 804fc3c:	e001      	b.n	804fc42 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 804fc3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 804fc42:	4618      	mov	r0, r3
 804fc44:	3710      	adds	r7, #16
 804fc46:	46bd      	mov	sp, r7
 804fc48:	bd80      	pop	{r7, pc}
 804fc4a:	bf00      	nop
 804fc4c:	0805b8dc 	.word	0x0805b8dc
 804fc50:	0805b98c 	.word	0x0805b98c
 804fc54:	0805b920 	.word	0x0805b920

0804fc58 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 804fc58:	b580      	push	{r7, lr}
 804fc5a:	b082      	sub	sp, #8
 804fc5c:	af00      	add	r7, sp, #0
 804fc5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 804fc60:	687b      	ldr	r3, [r7, #4]
 804fc62:	2b00      	cmp	r3, #0
 804fc64:	d109      	bne.n	804fc7a <tcp_close+0x22>
 804fc66:	4b0f      	ldr	r3, [pc, #60]	; (804fca4 <tcp_close+0x4c>)
 804fc68:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 804fc6c:	490e      	ldr	r1, [pc, #56]	; (804fca8 <tcp_close+0x50>)
 804fc6e:	480f      	ldr	r0, [pc, #60]	; (804fcac <tcp_close+0x54>)
 804fc70:	f009 f9e0 	bl	8059034 <iprintf>
 804fc74:	f06f 030f 	mvn.w	r3, #15
 804fc78:	e00f      	b.n	804fc9a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 804fc7a:	687b      	ldr	r3, [r7, #4]
 804fc7c:	7d1b      	ldrb	r3, [r3, #20]
 804fc7e:	2b01      	cmp	r3, #1
 804fc80:	d006      	beq.n	804fc90 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 804fc82:	687b      	ldr	r3, [r7, #4]
 804fc84:	8b5b      	ldrh	r3, [r3, #26]
 804fc86:	f043 0310 	orr.w	r3, r3, #16
 804fc8a:	b29a      	uxth	r2, r3
 804fc8c:	687b      	ldr	r3, [r7, #4]
 804fc8e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 804fc90:	2101      	movs	r1, #1
 804fc92:	6878      	ldr	r0, [r7, #4]
 804fc94:	f7ff fe94 	bl	804f9c0 <tcp_close_shutdown>
 804fc98:	4603      	mov	r3, r0
}
 804fc9a:	4618      	mov	r0, r3
 804fc9c:	3708      	adds	r7, #8
 804fc9e:	46bd      	mov	sp, r7
 804fca0:	bd80      	pop	{r7, pc}
 804fca2:	bf00      	nop
 804fca4:	0805b8dc 	.word	0x0805b8dc
 804fca8:	0805b9ec 	.word	0x0805b9ec
 804fcac:	0805b920 	.word	0x0805b920

0804fcb0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 804fcb0:	b580      	push	{r7, lr}
 804fcb2:	b084      	sub	sp, #16
 804fcb4:	af00      	add	r7, sp, #0
 804fcb6:	60f8      	str	r0, [r7, #12]
 804fcb8:	60b9      	str	r1, [r7, #8]
 804fcba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 804fcbc:	68fb      	ldr	r3, [r7, #12]
 804fcbe:	2b00      	cmp	r3, #0
 804fcc0:	d109      	bne.n	804fcd6 <tcp_shutdown+0x26>
 804fcc2:	4b26      	ldr	r3, [pc, #152]	; (804fd5c <tcp_shutdown+0xac>)
 804fcc4:	f240 2207 	movw	r2, #519	; 0x207
 804fcc8:	4925      	ldr	r1, [pc, #148]	; (804fd60 <tcp_shutdown+0xb0>)
 804fcca:	4826      	ldr	r0, [pc, #152]	; (804fd64 <tcp_shutdown+0xb4>)
 804fccc:	f009 f9b2 	bl	8059034 <iprintf>
 804fcd0:	f06f 030f 	mvn.w	r3, #15
 804fcd4:	e03d      	b.n	804fd52 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 804fcd6:	68fb      	ldr	r3, [r7, #12]
 804fcd8:	7d1b      	ldrb	r3, [r3, #20]
 804fcda:	2b01      	cmp	r3, #1
 804fcdc:	d102      	bne.n	804fce4 <tcp_shutdown+0x34>
    return ERR_CONN;
 804fcde:	f06f 030a 	mvn.w	r3, #10
 804fce2:	e036      	b.n	804fd52 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 804fce4:	68bb      	ldr	r3, [r7, #8]
 804fce6:	2b00      	cmp	r3, #0
 804fce8:	d01b      	beq.n	804fd22 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 804fcea:	68fb      	ldr	r3, [r7, #12]
 804fcec:	8b5b      	ldrh	r3, [r3, #26]
 804fcee:	f043 0310 	orr.w	r3, r3, #16
 804fcf2:	b29a      	uxth	r2, r3
 804fcf4:	68fb      	ldr	r3, [r7, #12]
 804fcf6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 804fcf8:	687b      	ldr	r3, [r7, #4]
 804fcfa:	2b00      	cmp	r3, #0
 804fcfc:	d005      	beq.n	804fd0a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 804fcfe:	2101      	movs	r1, #1
 804fd00:	68f8      	ldr	r0, [r7, #12]
 804fd02:	f7ff fe5d 	bl	804f9c0 <tcp_close_shutdown>
 804fd06:	4603      	mov	r3, r0
 804fd08:	e023      	b.n	804fd52 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 804fd0a:	68fb      	ldr	r3, [r7, #12]
 804fd0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804fd0e:	2b00      	cmp	r3, #0
 804fd10:	d007      	beq.n	804fd22 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 804fd12:	68fb      	ldr	r3, [r7, #12]
 804fd14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804fd16:	4618      	mov	r0, r3
 804fd18:	f7ff faf4 	bl	804f304 <pbuf_free>
      pcb->refused_data = NULL;
 804fd1c:	68fb      	ldr	r3, [r7, #12]
 804fd1e:	2200      	movs	r2, #0
 804fd20:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 804fd22:	687b      	ldr	r3, [r7, #4]
 804fd24:	2b00      	cmp	r3, #0
 804fd26:	d013      	beq.n	804fd50 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 804fd28:	68fb      	ldr	r3, [r7, #12]
 804fd2a:	7d1b      	ldrb	r3, [r3, #20]
 804fd2c:	2b04      	cmp	r3, #4
 804fd2e:	dc02      	bgt.n	804fd36 <tcp_shutdown+0x86>
 804fd30:	2b03      	cmp	r3, #3
 804fd32:	da02      	bge.n	804fd3a <tcp_shutdown+0x8a>
 804fd34:	e009      	b.n	804fd4a <tcp_shutdown+0x9a>
 804fd36:	2b07      	cmp	r3, #7
 804fd38:	d107      	bne.n	804fd4a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 804fd3a:	68bb      	ldr	r3, [r7, #8]
 804fd3c:	b2db      	uxtb	r3, r3
 804fd3e:	4619      	mov	r1, r3
 804fd40:	68f8      	ldr	r0, [r7, #12]
 804fd42:	f7ff fe3d 	bl	804f9c0 <tcp_close_shutdown>
 804fd46:	4603      	mov	r3, r0
 804fd48:	e003      	b.n	804fd52 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 804fd4a:	f06f 030a 	mvn.w	r3, #10
 804fd4e:	e000      	b.n	804fd52 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 804fd50:	2300      	movs	r3, #0
}
 804fd52:	4618      	mov	r0, r3
 804fd54:	3710      	adds	r7, #16
 804fd56:	46bd      	mov	sp, r7
 804fd58:	bd80      	pop	{r7, pc}
 804fd5a:	bf00      	nop
 804fd5c:	0805b8dc 	.word	0x0805b8dc
 804fd60:	0805ba04 	.word	0x0805ba04
 804fd64:	0805b920 	.word	0x0805b920

0804fd68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 804fd68:	b580      	push	{r7, lr}
 804fd6a:	b08e      	sub	sp, #56	; 0x38
 804fd6c:	af04      	add	r7, sp, #16
 804fd6e:	6078      	str	r0, [r7, #4]
 804fd70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 804fd72:	687b      	ldr	r3, [r7, #4]
 804fd74:	2b00      	cmp	r3, #0
 804fd76:	d107      	bne.n	804fd88 <tcp_abandon+0x20>
 804fd78:	4b52      	ldr	r3, [pc, #328]	; (804fec4 <tcp_abandon+0x15c>)
 804fd7a:	f240 223d 	movw	r2, #573	; 0x23d
 804fd7e:	4952      	ldr	r1, [pc, #328]	; (804fec8 <tcp_abandon+0x160>)
 804fd80:	4852      	ldr	r0, [pc, #328]	; (804fecc <tcp_abandon+0x164>)
 804fd82:	f009 f957 	bl	8059034 <iprintf>
 804fd86:	e099      	b.n	804febc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 804fd88:	687b      	ldr	r3, [r7, #4]
 804fd8a:	7d1b      	ldrb	r3, [r3, #20]
 804fd8c:	2b01      	cmp	r3, #1
 804fd8e:	d106      	bne.n	804fd9e <tcp_abandon+0x36>
 804fd90:	4b4c      	ldr	r3, [pc, #304]	; (804fec4 <tcp_abandon+0x15c>)
 804fd92:	f44f 7210 	mov.w	r2, #576	; 0x240
 804fd96:	494e      	ldr	r1, [pc, #312]	; (804fed0 <tcp_abandon+0x168>)
 804fd98:	484c      	ldr	r0, [pc, #304]	; (804fecc <tcp_abandon+0x164>)
 804fd9a:	f009 f94b 	bl	8059034 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 804fd9e:	687b      	ldr	r3, [r7, #4]
 804fda0:	7d1b      	ldrb	r3, [r3, #20]
 804fda2:	2b0a      	cmp	r3, #10
 804fda4:	d107      	bne.n	804fdb6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 804fda6:	6879      	ldr	r1, [r7, #4]
 804fda8:	484a      	ldr	r0, [pc, #296]	; (804fed4 <tcp_abandon+0x16c>)
 804fdaa:	f001 fa39 	bl	8051220 <tcp_pcb_remove>
    tcp_free(pcb);
 804fdae:	6878      	ldr	r0, [r7, #4]
 804fdb0:	f7ff fd54 	bl	804f85c <tcp_free>
 804fdb4:	e082      	b.n	804febc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 804fdb6:	2300      	movs	r3, #0
 804fdb8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 804fdba:	2300      	movs	r3, #0
 804fdbc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 804fdbe:	687b      	ldr	r3, [r7, #4]
 804fdc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804fdc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 804fdc4:	687b      	ldr	r3, [r7, #4]
 804fdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804fdc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 804fdca:	687b      	ldr	r3, [r7, #4]
 804fdcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804fdd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 804fdd2:	687b      	ldr	r3, [r7, #4]
 804fdd4:	691b      	ldr	r3, [r3, #16]
 804fdd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 804fdd8:	687b      	ldr	r3, [r7, #4]
 804fdda:	7d1b      	ldrb	r3, [r3, #20]
 804fddc:	2b00      	cmp	r3, #0
 804fdde:	d126      	bne.n	804fe2e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 804fde0:	687b      	ldr	r3, [r7, #4]
 804fde2:	8adb      	ldrh	r3, [r3, #22]
 804fde4:	2b00      	cmp	r3, #0
 804fde6:	d02e      	beq.n	804fe46 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 804fde8:	4b3b      	ldr	r3, [pc, #236]	; (804fed8 <tcp_abandon+0x170>)
 804fdea:	681b      	ldr	r3, [r3, #0]
 804fdec:	687a      	ldr	r2, [r7, #4]
 804fdee:	429a      	cmp	r2, r3
 804fdf0:	d105      	bne.n	804fdfe <tcp_abandon+0x96>
 804fdf2:	4b39      	ldr	r3, [pc, #228]	; (804fed8 <tcp_abandon+0x170>)
 804fdf4:	681b      	ldr	r3, [r3, #0]
 804fdf6:	68db      	ldr	r3, [r3, #12]
 804fdf8:	4a37      	ldr	r2, [pc, #220]	; (804fed8 <tcp_abandon+0x170>)
 804fdfa:	6013      	str	r3, [r2, #0]
 804fdfc:	e013      	b.n	804fe26 <tcp_abandon+0xbe>
 804fdfe:	4b36      	ldr	r3, [pc, #216]	; (804fed8 <tcp_abandon+0x170>)
 804fe00:	681b      	ldr	r3, [r3, #0]
 804fe02:	61fb      	str	r3, [r7, #28]
 804fe04:	e00c      	b.n	804fe20 <tcp_abandon+0xb8>
 804fe06:	69fb      	ldr	r3, [r7, #28]
 804fe08:	68db      	ldr	r3, [r3, #12]
 804fe0a:	687a      	ldr	r2, [r7, #4]
 804fe0c:	429a      	cmp	r2, r3
 804fe0e:	d104      	bne.n	804fe1a <tcp_abandon+0xb2>
 804fe10:	687b      	ldr	r3, [r7, #4]
 804fe12:	68da      	ldr	r2, [r3, #12]
 804fe14:	69fb      	ldr	r3, [r7, #28]
 804fe16:	60da      	str	r2, [r3, #12]
 804fe18:	e005      	b.n	804fe26 <tcp_abandon+0xbe>
 804fe1a:	69fb      	ldr	r3, [r7, #28]
 804fe1c:	68db      	ldr	r3, [r3, #12]
 804fe1e:	61fb      	str	r3, [r7, #28]
 804fe20:	69fb      	ldr	r3, [r7, #28]
 804fe22:	2b00      	cmp	r3, #0
 804fe24:	d1ef      	bne.n	804fe06 <tcp_abandon+0x9e>
 804fe26:	687b      	ldr	r3, [r7, #4]
 804fe28:	2200      	movs	r2, #0
 804fe2a:	60da      	str	r2, [r3, #12]
 804fe2c:	e00b      	b.n	804fe46 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 804fe2e:	683b      	ldr	r3, [r7, #0]
 804fe30:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 804fe32:	687b      	ldr	r3, [r7, #4]
 804fe34:	8adb      	ldrh	r3, [r3, #22]
 804fe36:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 804fe38:	6879      	ldr	r1, [r7, #4]
 804fe3a:	4828      	ldr	r0, [pc, #160]	; (804fedc <tcp_abandon+0x174>)
 804fe3c:	f001 f9f0 	bl	8051220 <tcp_pcb_remove>
 804fe40:	4b27      	ldr	r3, [pc, #156]	; (804fee0 <tcp_abandon+0x178>)
 804fe42:	2201      	movs	r2, #1
 804fe44:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 804fe46:	687b      	ldr	r3, [r7, #4]
 804fe48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804fe4a:	2b00      	cmp	r3, #0
 804fe4c:	d004      	beq.n	804fe58 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 804fe4e:	687b      	ldr	r3, [r7, #4]
 804fe50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804fe52:	4618      	mov	r0, r3
 804fe54:	f000 fec4 	bl	8050be0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 804fe58:	687b      	ldr	r3, [r7, #4]
 804fe5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804fe5c:	2b00      	cmp	r3, #0
 804fe5e:	d004      	beq.n	804fe6a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 804fe60:	687b      	ldr	r3, [r7, #4]
 804fe62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804fe64:	4618      	mov	r0, r3
 804fe66:	f000 febb 	bl	8050be0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 804fe6a:	687b      	ldr	r3, [r7, #4]
 804fe6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fe6e:	2b00      	cmp	r3, #0
 804fe70:	d004      	beq.n	804fe7c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 804fe72:	687b      	ldr	r3, [r7, #4]
 804fe74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804fe76:	4618      	mov	r0, r3
 804fe78:	f000 feb2 	bl	8050be0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 804fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804fe7e:	2b00      	cmp	r3, #0
 804fe80:	d00e      	beq.n	804fea0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 804fe82:	6879      	ldr	r1, [r7, #4]
 804fe84:	687b      	ldr	r3, [r7, #4]
 804fe86:	3304      	adds	r3, #4
 804fe88:	687a      	ldr	r2, [r7, #4]
 804fe8a:	8b12      	ldrh	r2, [r2, #24]
 804fe8c:	9202      	str	r2, [sp, #8]
 804fe8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 804fe90:	9201      	str	r2, [sp, #4]
 804fe92:	9300      	str	r3, [sp, #0]
 804fe94:	460b      	mov	r3, r1
 804fe96:	697a      	ldr	r2, [r7, #20]
 804fe98:	69b9      	ldr	r1, [r7, #24]
 804fe9a:	6878      	ldr	r0, [r7, #4]
 804fe9c:	f005 fb90 	bl	80555c0 <tcp_rst>
    }
    last_state = pcb->state;
 804fea0:	687b      	ldr	r3, [r7, #4]
 804fea2:	7d1b      	ldrb	r3, [r3, #20]
 804fea4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 804fea6:	6878      	ldr	r0, [r7, #4]
 804fea8:	f7ff fcd8 	bl	804f85c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 804feac:	693b      	ldr	r3, [r7, #16]
 804feae:	2b00      	cmp	r3, #0
 804feb0:	d004      	beq.n	804febc <tcp_abandon+0x154>
 804feb2:	693b      	ldr	r3, [r7, #16]
 804feb4:	f06f 010c 	mvn.w	r1, #12
 804feb8:	68f8      	ldr	r0, [r7, #12]
 804feba:	4798      	blx	r3
  }
}
 804febc:	3728      	adds	r7, #40	; 0x28
 804febe:	46bd      	mov	sp, r7
 804fec0:	bd80      	pop	{r7, pc}
 804fec2:	bf00      	nop
 804fec4:	0805b8dc 	.word	0x0805b8dc
 804fec8:	0805ba20 	.word	0x0805ba20
 804fecc:	0805b920 	.word	0x0805b920
 804fed0:	0805ba3c 	.word	0x0805ba3c
 804fed4:	2000b5dc 	.word	0x2000b5dc
 804fed8:	2000b5d0 	.word	0x2000b5d0
 804fedc:	2000b5d8 	.word	0x2000b5d8
 804fee0:	2000b5e0 	.word	0x2000b5e0

0804fee4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 804fee4:	b580      	push	{r7, lr}
 804fee6:	b082      	sub	sp, #8
 804fee8:	af00      	add	r7, sp, #0
 804feea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 804feec:	2101      	movs	r1, #1
 804feee:	6878      	ldr	r0, [r7, #4]
 804fef0:	f7ff ff3a 	bl	804fd68 <tcp_abandon>
}
 804fef4:	bf00      	nop
 804fef6:	3708      	adds	r7, #8
 804fef8:	46bd      	mov	sp, r7
 804fefa:	bd80      	pop	{r7, pc}

0804fefc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 804fefc:	b580      	push	{r7, lr}
 804fefe:	b088      	sub	sp, #32
 804ff00:	af00      	add	r7, sp, #0
 804ff02:	60f8      	str	r0, [r7, #12]
 804ff04:	60b9      	str	r1, [r7, #8]
 804ff06:	4613      	mov	r3, r2
 804ff08:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 804ff0a:	2304      	movs	r3, #4
 804ff0c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 804ff0e:	68bb      	ldr	r3, [r7, #8]
 804ff10:	2b00      	cmp	r3, #0
 804ff12:	d101      	bne.n	804ff18 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 804ff14:	4b3e      	ldr	r3, [pc, #248]	; (8050010 <tcp_bind+0x114>)
 804ff16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 804ff18:	68fb      	ldr	r3, [r7, #12]
 804ff1a:	2b00      	cmp	r3, #0
 804ff1c:	d109      	bne.n	804ff32 <tcp_bind+0x36>
 804ff1e:	4b3d      	ldr	r3, [pc, #244]	; (8050014 <tcp_bind+0x118>)
 804ff20:	f240 22a9 	movw	r2, #681	; 0x2a9
 804ff24:	493c      	ldr	r1, [pc, #240]	; (8050018 <tcp_bind+0x11c>)
 804ff26:	483d      	ldr	r0, [pc, #244]	; (805001c <tcp_bind+0x120>)
 804ff28:	f009 f884 	bl	8059034 <iprintf>
 804ff2c:	f06f 030f 	mvn.w	r3, #15
 804ff30:	e06a      	b.n	8050008 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 804ff32:	68fb      	ldr	r3, [r7, #12]
 804ff34:	7d1b      	ldrb	r3, [r3, #20]
 804ff36:	2b00      	cmp	r3, #0
 804ff38:	d009      	beq.n	804ff4e <tcp_bind+0x52>
 804ff3a:	4b36      	ldr	r3, [pc, #216]	; (8050014 <tcp_bind+0x118>)
 804ff3c:	f240 22ab 	movw	r2, #683	; 0x2ab
 804ff40:	4937      	ldr	r1, [pc, #220]	; (8050020 <tcp_bind+0x124>)
 804ff42:	4836      	ldr	r0, [pc, #216]	; (805001c <tcp_bind+0x120>)
 804ff44:	f009 f876 	bl	8059034 <iprintf>
 804ff48:	f06f 0305 	mvn.w	r3, #5
 804ff4c:	e05c      	b.n	8050008 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 804ff4e:	88fb      	ldrh	r3, [r7, #6]
 804ff50:	2b00      	cmp	r3, #0
 804ff52:	d109      	bne.n	804ff68 <tcp_bind+0x6c>
    port = tcp_new_port();
 804ff54:	f000 f9de 	bl	8050314 <tcp_new_port>
 804ff58:	4603      	mov	r3, r0
 804ff5a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 804ff5c:	88fb      	ldrh	r3, [r7, #6]
 804ff5e:	2b00      	cmp	r3, #0
 804ff60:	d135      	bne.n	804ffce <tcp_bind+0xd2>
      return ERR_BUF;
 804ff62:	f06f 0301 	mvn.w	r3, #1
 804ff66:	e04f      	b.n	8050008 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 804ff68:	2300      	movs	r3, #0
 804ff6a:	61fb      	str	r3, [r7, #28]
 804ff6c:	e02b      	b.n	804ffc6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 804ff6e:	4a2d      	ldr	r2, [pc, #180]	; (8050024 <tcp_bind+0x128>)
 804ff70:	69fb      	ldr	r3, [r7, #28]
 804ff72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804ff76:	681b      	ldr	r3, [r3, #0]
 804ff78:	61bb      	str	r3, [r7, #24]
 804ff7a:	e01e      	b.n	804ffba <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 804ff7c:	69bb      	ldr	r3, [r7, #24]
 804ff7e:	8adb      	ldrh	r3, [r3, #22]
 804ff80:	88fa      	ldrh	r2, [r7, #6]
 804ff82:	429a      	cmp	r2, r3
 804ff84:	d116      	bne.n	804ffb4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 804ff86:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 804ff88:	2b00      	cmp	r3, #0
 804ff8a:	d010      	beq.n	804ffae <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 804ff8c:	69bb      	ldr	r3, [r7, #24]
 804ff8e:	681b      	ldr	r3, [r3, #0]
 804ff90:	2b00      	cmp	r3, #0
 804ff92:	d00c      	beq.n	804ffae <tcp_bind+0xb2>
 804ff94:	68bb      	ldr	r3, [r7, #8]
 804ff96:	2b00      	cmp	r3, #0
 804ff98:	d009      	beq.n	804ffae <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 804ff9a:	68bb      	ldr	r3, [r7, #8]
 804ff9c:	681b      	ldr	r3, [r3, #0]
 804ff9e:	2b00      	cmp	r3, #0
 804ffa0:	d005      	beq.n	804ffae <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 804ffa2:	69bb      	ldr	r3, [r7, #24]
 804ffa4:	681a      	ldr	r2, [r3, #0]
 804ffa6:	68bb      	ldr	r3, [r7, #8]
 804ffa8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 804ffaa:	429a      	cmp	r2, r3
 804ffac:	d102      	bne.n	804ffb4 <tcp_bind+0xb8>
              return ERR_USE;
 804ffae:	f06f 0307 	mvn.w	r3, #7
 804ffb2:	e029      	b.n	8050008 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 804ffb4:	69bb      	ldr	r3, [r7, #24]
 804ffb6:	68db      	ldr	r3, [r3, #12]
 804ffb8:	61bb      	str	r3, [r7, #24]
 804ffba:	69bb      	ldr	r3, [r7, #24]
 804ffbc:	2b00      	cmp	r3, #0
 804ffbe:	d1dd      	bne.n	804ff7c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 804ffc0:	69fb      	ldr	r3, [r7, #28]
 804ffc2:	3301      	adds	r3, #1
 804ffc4:	61fb      	str	r3, [r7, #28]
 804ffc6:	69fa      	ldr	r2, [r7, #28]
 804ffc8:	697b      	ldr	r3, [r7, #20]
 804ffca:	429a      	cmp	r2, r3
 804ffcc:	dbcf      	blt.n	804ff6e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 804ffce:	68bb      	ldr	r3, [r7, #8]
 804ffd0:	2b00      	cmp	r3, #0
 804ffd2:	d00c      	beq.n	804ffee <tcp_bind+0xf2>
 804ffd4:	68bb      	ldr	r3, [r7, #8]
 804ffd6:	681b      	ldr	r3, [r3, #0]
 804ffd8:	2b00      	cmp	r3, #0
 804ffda:	d008      	beq.n	804ffee <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 804ffdc:	68bb      	ldr	r3, [r7, #8]
 804ffde:	2b00      	cmp	r3, #0
 804ffe0:	d002      	beq.n	804ffe8 <tcp_bind+0xec>
 804ffe2:	68bb      	ldr	r3, [r7, #8]
 804ffe4:	681b      	ldr	r3, [r3, #0]
 804ffe6:	e000      	b.n	804ffea <tcp_bind+0xee>
 804ffe8:	2300      	movs	r3, #0
 804ffea:	68fa      	ldr	r2, [r7, #12]
 804ffec:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 804ffee:	68fb      	ldr	r3, [r7, #12]
 804fff0:	88fa      	ldrh	r2, [r7, #6]
 804fff2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 804fff4:	4b0c      	ldr	r3, [pc, #48]	; (8050028 <tcp_bind+0x12c>)
 804fff6:	681a      	ldr	r2, [r3, #0]
 804fff8:	68fb      	ldr	r3, [r7, #12]
 804fffa:	60da      	str	r2, [r3, #12]
 804fffc:	4a0a      	ldr	r2, [pc, #40]	; (8050028 <tcp_bind+0x12c>)
 804fffe:	68fb      	ldr	r3, [r7, #12]
 8050000:	6013      	str	r3, [r2, #0]
 8050002:	f005 fc9f 	bl	8055944 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8050006:	2300      	movs	r3, #0
}
 8050008:	4618      	mov	r0, r3
 805000a:	3720      	adds	r7, #32
 805000c:	46bd      	mov	sp, r7
 805000e:	bd80      	pop	{r7, pc}
 8050010:	0805d928 	.word	0x0805d928
 8050014:	0805b8dc 	.word	0x0805b8dc
 8050018:	0805ba70 	.word	0x0805ba70
 805001c:	0805b920 	.word	0x0805b920
 8050020:	0805ba88 	.word	0x0805ba88
 8050024:	0805d900 	.word	0x0805d900
 8050028:	2000b5d0 	.word	0x2000b5d0

0805002c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 805002c:	b580      	push	{r7, lr}
 805002e:	b084      	sub	sp, #16
 8050030:	af00      	add	r7, sp, #0
 8050032:	60f8      	str	r0, [r7, #12]
 8050034:	60b9      	str	r1, [r7, #8]
 8050036:	4613      	mov	r3, r2
 8050038:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 805003a:	68bb      	ldr	r3, [r7, #8]
 805003c:	2b00      	cmp	r3, #0
 805003e:	d106      	bne.n	805004e <tcp_accept_null+0x22>
 8050040:	4b07      	ldr	r3, [pc, #28]	; (8050060 <tcp_accept_null+0x34>)
 8050042:	f240 320f 	movw	r2, #783	; 0x30f
 8050046:	4907      	ldr	r1, [pc, #28]	; (8050064 <tcp_accept_null+0x38>)
 8050048:	4807      	ldr	r0, [pc, #28]	; (8050068 <tcp_accept_null+0x3c>)
 805004a:	f008 fff3 	bl	8059034 <iprintf>

  tcp_abort(pcb);
 805004e:	68b8      	ldr	r0, [r7, #8]
 8050050:	f7ff ff48 	bl	804fee4 <tcp_abort>

  return ERR_ABRT;
 8050054:	f06f 030c 	mvn.w	r3, #12
}
 8050058:	4618      	mov	r0, r3
 805005a:	3710      	adds	r7, #16
 805005c:	46bd      	mov	sp, r7
 805005e:	bd80      	pop	{r7, pc}
 8050060:	0805b8dc 	.word	0x0805b8dc
 8050064:	0805bab0 	.word	0x0805bab0
 8050068:	0805b920 	.word	0x0805b920

0805006c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 805006c:	b580      	push	{r7, lr}
 805006e:	b088      	sub	sp, #32
 8050070:	af00      	add	r7, sp, #0
 8050072:	60f8      	str	r0, [r7, #12]
 8050074:	460b      	mov	r3, r1
 8050076:	607a      	str	r2, [r7, #4]
 8050078:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 805007a:	2300      	movs	r3, #0
 805007c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 805007e:	68fb      	ldr	r3, [r7, #12]
 8050080:	2b00      	cmp	r3, #0
 8050082:	d109      	bne.n	8050098 <tcp_listen_with_backlog_and_err+0x2c>
 8050084:	4b47      	ldr	r3, [pc, #284]	; (80501a4 <tcp_listen_with_backlog_and_err+0x138>)
 8050086:	f240 3259 	movw	r2, #857	; 0x359
 805008a:	4947      	ldr	r1, [pc, #284]	; (80501a8 <tcp_listen_with_backlog_and_err+0x13c>)
 805008c:	4847      	ldr	r0, [pc, #284]	; (80501ac <tcp_listen_with_backlog_and_err+0x140>)
 805008e:	f008 ffd1 	bl	8059034 <iprintf>
 8050092:	23f0      	movs	r3, #240	; 0xf0
 8050094:	76fb      	strb	r3, [r7, #27]
 8050096:	e079      	b.n	805018c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8050098:	68fb      	ldr	r3, [r7, #12]
 805009a:	7d1b      	ldrb	r3, [r3, #20]
 805009c:	2b00      	cmp	r3, #0
 805009e:	d009      	beq.n	80500b4 <tcp_listen_with_backlog_and_err+0x48>
 80500a0:	4b40      	ldr	r3, [pc, #256]	; (80501a4 <tcp_listen_with_backlog_and_err+0x138>)
 80500a2:	f240 325a 	movw	r2, #858	; 0x35a
 80500a6:	4942      	ldr	r1, [pc, #264]	; (80501b0 <tcp_listen_with_backlog_and_err+0x144>)
 80500a8:	4840      	ldr	r0, [pc, #256]	; (80501ac <tcp_listen_with_backlog_and_err+0x140>)
 80500aa:	f008 ffc3 	bl	8059034 <iprintf>
 80500ae:	23f1      	movs	r3, #241	; 0xf1
 80500b0:	76fb      	strb	r3, [r7, #27]
 80500b2:	e06b      	b.n	805018c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80500b4:	68fb      	ldr	r3, [r7, #12]
 80500b6:	7d1b      	ldrb	r3, [r3, #20]
 80500b8:	2b01      	cmp	r3, #1
 80500ba:	d104      	bne.n	80500c6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80500bc:	68fb      	ldr	r3, [r7, #12]
 80500be:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80500c0:	23f7      	movs	r3, #247	; 0xf7
 80500c2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80500c4:	e062      	b.n	805018c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80500c6:	2002      	movs	r0, #2
 80500c8:	f7fe fa02 	bl	804e4d0 <memp_malloc>
 80500cc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80500ce:	69fb      	ldr	r3, [r7, #28]
 80500d0:	2b00      	cmp	r3, #0
 80500d2:	d102      	bne.n	80500da <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80500d4:	23ff      	movs	r3, #255	; 0xff
 80500d6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80500d8:	e058      	b.n	805018c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80500da:	68fb      	ldr	r3, [r7, #12]
 80500dc:	691a      	ldr	r2, [r3, #16]
 80500de:	69fb      	ldr	r3, [r7, #28]
 80500e0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80500e2:	68fb      	ldr	r3, [r7, #12]
 80500e4:	8ada      	ldrh	r2, [r3, #22]
 80500e6:	69fb      	ldr	r3, [r7, #28]
 80500e8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80500ea:	69fb      	ldr	r3, [r7, #28]
 80500ec:	2201      	movs	r2, #1
 80500ee:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80500f0:	68fb      	ldr	r3, [r7, #12]
 80500f2:	7d5a      	ldrb	r2, [r3, #21]
 80500f4:	69fb      	ldr	r3, [r7, #28]
 80500f6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80500f8:	68fb      	ldr	r3, [r7, #12]
 80500fa:	7a5a      	ldrb	r2, [r3, #9]
 80500fc:	69fb      	ldr	r3, [r7, #28]
 80500fe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8050100:	69fb      	ldr	r3, [r7, #28]
 8050102:	2200      	movs	r2, #0
 8050104:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8050106:	68fb      	ldr	r3, [r7, #12]
 8050108:	7ada      	ldrb	r2, [r3, #11]
 805010a:	69fb      	ldr	r3, [r7, #28]
 805010c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 805010e:	68fb      	ldr	r3, [r7, #12]
 8050110:	7a9a      	ldrb	r2, [r3, #10]
 8050112:	69fb      	ldr	r3, [r7, #28]
 8050114:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8050116:	68fb      	ldr	r3, [r7, #12]
 8050118:	681a      	ldr	r2, [r3, #0]
 805011a:	69fb      	ldr	r3, [r7, #28]
 805011c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 805011e:	68fb      	ldr	r3, [r7, #12]
 8050120:	8adb      	ldrh	r3, [r3, #22]
 8050122:	2b00      	cmp	r3, #0
 8050124:	d021      	beq.n	805016a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8050126:	4b23      	ldr	r3, [pc, #140]	; (80501b4 <tcp_listen_with_backlog_and_err+0x148>)
 8050128:	681b      	ldr	r3, [r3, #0]
 805012a:	68fa      	ldr	r2, [r7, #12]
 805012c:	429a      	cmp	r2, r3
 805012e:	d105      	bne.n	805013c <tcp_listen_with_backlog_and_err+0xd0>
 8050130:	4b20      	ldr	r3, [pc, #128]	; (80501b4 <tcp_listen_with_backlog_and_err+0x148>)
 8050132:	681b      	ldr	r3, [r3, #0]
 8050134:	68db      	ldr	r3, [r3, #12]
 8050136:	4a1f      	ldr	r2, [pc, #124]	; (80501b4 <tcp_listen_with_backlog_and_err+0x148>)
 8050138:	6013      	str	r3, [r2, #0]
 805013a:	e013      	b.n	8050164 <tcp_listen_with_backlog_and_err+0xf8>
 805013c:	4b1d      	ldr	r3, [pc, #116]	; (80501b4 <tcp_listen_with_backlog_and_err+0x148>)
 805013e:	681b      	ldr	r3, [r3, #0]
 8050140:	617b      	str	r3, [r7, #20]
 8050142:	e00c      	b.n	805015e <tcp_listen_with_backlog_and_err+0xf2>
 8050144:	697b      	ldr	r3, [r7, #20]
 8050146:	68db      	ldr	r3, [r3, #12]
 8050148:	68fa      	ldr	r2, [r7, #12]
 805014a:	429a      	cmp	r2, r3
 805014c:	d104      	bne.n	8050158 <tcp_listen_with_backlog_and_err+0xec>
 805014e:	68fb      	ldr	r3, [r7, #12]
 8050150:	68da      	ldr	r2, [r3, #12]
 8050152:	697b      	ldr	r3, [r7, #20]
 8050154:	60da      	str	r2, [r3, #12]
 8050156:	e005      	b.n	8050164 <tcp_listen_with_backlog_and_err+0xf8>
 8050158:	697b      	ldr	r3, [r7, #20]
 805015a:	68db      	ldr	r3, [r3, #12]
 805015c:	617b      	str	r3, [r7, #20]
 805015e:	697b      	ldr	r3, [r7, #20]
 8050160:	2b00      	cmp	r3, #0
 8050162:	d1ef      	bne.n	8050144 <tcp_listen_with_backlog_and_err+0xd8>
 8050164:	68fb      	ldr	r3, [r7, #12]
 8050166:	2200      	movs	r2, #0
 8050168:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 805016a:	68f8      	ldr	r0, [r7, #12]
 805016c:	f7ff fb76 	bl	804f85c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8050170:	69fb      	ldr	r3, [r7, #28]
 8050172:	4a11      	ldr	r2, [pc, #68]	; (80501b8 <tcp_listen_with_backlog_and_err+0x14c>)
 8050174:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8050176:	4b11      	ldr	r3, [pc, #68]	; (80501bc <tcp_listen_with_backlog_and_err+0x150>)
 8050178:	681a      	ldr	r2, [r3, #0]
 805017a:	69fb      	ldr	r3, [r7, #28]
 805017c:	60da      	str	r2, [r3, #12]
 805017e:	4a0f      	ldr	r2, [pc, #60]	; (80501bc <tcp_listen_with_backlog_and_err+0x150>)
 8050180:	69fb      	ldr	r3, [r7, #28]
 8050182:	6013      	str	r3, [r2, #0]
 8050184:	f005 fbde 	bl	8055944 <tcp_timer_needed>
  res = ERR_OK;
 8050188:	2300      	movs	r3, #0
 805018a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 805018c:	687b      	ldr	r3, [r7, #4]
 805018e:	2b00      	cmp	r3, #0
 8050190:	d002      	beq.n	8050198 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8050192:	687b      	ldr	r3, [r7, #4]
 8050194:	7efa      	ldrb	r2, [r7, #27]
 8050196:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8050198:	69fb      	ldr	r3, [r7, #28]
}
 805019a:	4618      	mov	r0, r3
 805019c:	3720      	adds	r7, #32
 805019e:	46bd      	mov	sp, r7
 80501a0:	bd80      	pop	{r7, pc}
 80501a2:	bf00      	nop
 80501a4:	0805b8dc 	.word	0x0805b8dc
 80501a8:	0805bad0 	.word	0x0805bad0
 80501ac:	0805b920 	.word	0x0805b920
 80501b0:	0805bb00 	.word	0x0805bb00
 80501b4:	2000b5d0 	.word	0x2000b5d0
 80501b8:	0805002d 	.word	0x0805002d
 80501bc:	2000b5d4 	.word	0x2000b5d4

080501c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80501c0:	b580      	push	{r7, lr}
 80501c2:	b084      	sub	sp, #16
 80501c4:	af00      	add	r7, sp, #0
 80501c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80501c8:	687b      	ldr	r3, [r7, #4]
 80501ca:	2b00      	cmp	r3, #0
 80501cc:	d106      	bne.n	80501dc <tcp_update_rcv_ann_wnd+0x1c>
 80501ce:	4b25      	ldr	r3, [pc, #148]	; (8050264 <tcp_update_rcv_ann_wnd+0xa4>)
 80501d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80501d4:	4924      	ldr	r1, [pc, #144]	; (8050268 <tcp_update_rcv_ann_wnd+0xa8>)
 80501d6:	4825      	ldr	r0, [pc, #148]	; (805026c <tcp_update_rcv_ann_wnd+0xac>)
 80501d8:	f008 ff2c 	bl	8059034 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80501dc:	687b      	ldr	r3, [r7, #4]
 80501de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80501e0:	687a      	ldr	r2, [r7, #4]
 80501e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80501e4:	4413      	add	r3, r2
 80501e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80501e8:	687b      	ldr	r3, [r7, #4]
 80501ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80501ec:	687a      	ldr	r2, [r7, #4]
 80501ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80501f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80501f4:	bf28      	it	cs
 80501f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80501fa:	b292      	uxth	r2, r2
 80501fc:	4413      	add	r3, r2
 80501fe:	68fa      	ldr	r2, [r7, #12]
 8050200:	1ad3      	subs	r3, r2, r3
 8050202:	2b00      	cmp	r3, #0
 8050204:	db08      	blt.n	8050218 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8050206:	687b      	ldr	r3, [r7, #4]
 8050208:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 805020a:	687b      	ldr	r3, [r7, #4]
 805020c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 805020e:	687b      	ldr	r3, [r7, #4]
 8050210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050212:	68fa      	ldr	r2, [r7, #12]
 8050214:	1ad3      	subs	r3, r2, r3
 8050216:	e020      	b.n	805025a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8050218:	687b      	ldr	r3, [r7, #4]
 805021a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805021c:	687b      	ldr	r3, [r7, #4]
 805021e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050220:	1ad3      	subs	r3, r2, r3
 8050222:	2b00      	cmp	r3, #0
 8050224:	dd03      	ble.n	805022e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8050226:	687b      	ldr	r3, [r7, #4]
 8050228:	2200      	movs	r2, #0
 805022a:	855a      	strh	r2, [r3, #42]	; 0x2a
 805022c:	e014      	b.n	8050258 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 805022e:	687b      	ldr	r3, [r7, #4]
 8050230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8050232:	687b      	ldr	r3, [r7, #4]
 8050234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8050236:	1ad3      	subs	r3, r2, r3
 8050238:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 805023a:	68bb      	ldr	r3, [r7, #8]
 805023c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8050240:	d306      	bcc.n	8050250 <tcp_update_rcv_ann_wnd+0x90>
 8050242:	4b08      	ldr	r3, [pc, #32]	; (8050264 <tcp_update_rcv_ann_wnd+0xa4>)
 8050244:	f240 32b6 	movw	r2, #950	; 0x3b6
 8050248:	4909      	ldr	r1, [pc, #36]	; (8050270 <tcp_update_rcv_ann_wnd+0xb0>)
 805024a:	4808      	ldr	r0, [pc, #32]	; (805026c <tcp_update_rcv_ann_wnd+0xac>)
 805024c:	f008 fef2 	bl	8059034 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8050250:	68bb      	ldr	r3, [r7, #8]
 8050252:	b29a      	uxth	r2, r3
 8050254:	687b      	ldr	r3, [r7, #4]
 8050256:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8050258:	2300      	movs	r3, #0
  }
}
 805025a:	4618      	mov	r0, r3
 805025c:	3710      	adds	r7, #16
 805025e:	46bd      	mov	sp, r7
 8050260:	bd80      	pop	{r7, pc}
 8050262:	bf00      	nop
 8050264:	0805b8dc 	.word	0x0805b8dc
 8050268:	0805bb38 	.word	0x0805bb38
 805026c:	0805b920 	.word	0x0805b920
 8050270:	0805bb5c 	.word	0x0805bb5c

08050274 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8050274:	b580      	push	{r7, lr}
 8050276:	b084      	sub	sp, #16
 8050278:	af00      	add	r7, sp, #0
 805027a:	6078      	str	r0, [r7, #4]
 805027c:	460b      	mov	r3, r1
 805027e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8050280:	687b      	ldr	r3, [r7, #4]
 8050282:	2b00      	cmp	r3, #0
 8050284:	d107      	bne.n	8050296 <tcp_recved+0x22>
 8050286:	4b1f      	ldr	r3, [pc, #124]	; (8050304 <tcp_recved+0x90>)
 8050288:	f240 32cf 	movw	r2, #975	; 0x3cf
 805028c:	491e      	ldr	r1, [pc, #120]	; (8050308 <tcp_recved+0x94>)
 805028e:	481f      	ldr	r0, [pc, #124]	; (805030c <tcp_recved+0x98>)
 8050290:	f008 fed0 	bl	8059034 <iprintf>
 8050294:	e032      	b.n	80502fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8050296:	687b      	ldr	r3, [r7, #4]
 8050298:	7d1b      	ldrb	r3, [r3, #20]
 805029a:	2b01      	cmp	r3, #1
 805029c:	d106      	bne.n	80502ac <tcp_recved+0x38>
 805029e:	4b19      	ldr	r3, [pc, #100]	; (8050304 <tcp_recved+0x90>)
 80502a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80502a4:	491a      	ldr	r1, [pc, #104]	; (8050310 <tcp_recved+0x9c>)
 80502a6:	4819      	ldr	r0, [pc, #100]	; (805030c <tcp_recved+0x98>)
 80502a8:	f008 fec4 	bl	8059034 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80502ac:	687b      	ldr	r3, [r7, #4]
 80502ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80502b0:	887b      	ldrh	r3, [r7, #2]
 80502b2:	4413      	add	r3, r2
 80502b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80502b6:	89fb      	ldrh	r3, [r7, #14]
 80502b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80502bc:	d804      	bhi.n	80502c8 <tcp_recved+0x54>
 80502be:	687b      	ldr	r3, [r7, #4]
 80502c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80502c2:	89fa      	ldrh	r2, [r7, #14]
 80502c4:	429a      	cmp	r2, r3
 80502c6:	d204      	bcs.n	80502d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80502c8:	687b      	ldr	r3, [r7, #4]
 80502ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80502ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80502d0:	e002      	b.n	80502d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80502d2:	687b      	ldr	r3, [r7, #4]
 80502d4:	89fa      	ldrh	r2, [r7, #14]
 80502d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80502d8:	6878      	ldr	r0, [r7, #4]
 80502da:	f7ff ff71 	bl	80501c0 <tcp_update_rcv_ann_wnd>
 80502de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80502e0:	68bb      	ldr	r3, [r7, #8]
 80502e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80502e6:	d309      	bcc.n	80502fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80502e8:	687b      	ldr	r3, [r7, #4]
 80502ea:	8b5b      	ldrh	r3, [r3, #26]
 80502ec:	f043 0302 	orr.w	r3, r3, #2
 80502f0:	b29a      	uxth	r2, r3
 80502f2:	687b      	ldr	r3, [r7, #4]
 80502f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80502f6:	6878      	ldr	r0, [r7, #4]
 80502f8:	f004 fbae 	bl	8054a58 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80502fc:	3710      	adds	r7, #16
 80502fe:	46bd      	mov	sp, r7
 8050300:	bd80      	pop	{r7, pc}
 8050302:	bf00      	nop
 8050304:	0805b8dc 	.word	0x0805b8dc
 8050308:	0805bb78 	.word	0x0805bb78
 805030c:	0805b920 	.word	0x0805b920
 8050310:	0805bb90 	.word	0x0805bb90

08050314 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8050314:	b480      	push	{r7}
 8050316:	b083      	sub	sp, #12
 8050318:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 805031a:	2300      	movs	r3, #0
 805031c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 805031e:	4b1e      	ldr	r3, [pc, #120]	; (8050398 <tcp_new_port+0x84>)
 8050320:	881b      	ldrh	r3, [r3, #0]
 8050322:	3301      	adds	r3, #1
 8050324:	b29a      	uxth	r2, r3
 8050326:	4b1c      	ldr	r3, [pc, #112]	; (8050398 <tcp_new_port+0x84>)
 8050328:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 805032a:	4b1b      	ldr	r3, [pc, #108]	; (8050398 <tcp_new_port+0x84>)
 805032c:	881b      	ldrh	r3, [r3, #0]
 805032e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8050332:	4293      	cmp	r3, r2
 8050334:	d103      	bne.n	805033e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8050336:	4b18      	ldr	r3, [pc, #96]	; (8050398 <tcp_new_port+0x84>)
 8050338:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 805033c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 805033e:	2300      	movs	r3, #0
 8050340:	71fb      	strb	r3, [r7, #7]
 8050342:	e01e      	b.n	8050382 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8050344:	79fb      	ldrb	r3, [r7, #7]
 8050346:	4a15      	ldr	r2, [pc, #84]	; (805039c <tcp_new_port+0x88>)
 8050348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 805034c:	681b      	ldr	r3, [r3, #0]
 805034e:	603b      	str	r3, [r7, #0]
 8050350:	e011      	b.n	8050376 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8050352:	683b      	ldr	r3, [r7, #0]
 8050354:	8ada      	ldrh	r2, [r3, #22]
 8050356:	4b10      	ldr	r3, [pc, #64]	; (8050398 <tcp_new_port+0x84>)
 8050358:	881b      	ldrh	r3, [r3, #0]
 805035a:	429a      	cmp	r2, r3
 805035c:	d108      	bne.n	8050370 <tcp_new_port+0x5c>
        n++;
 805035e:	88bb      	ldrh	r3, [r7, #4]
 8050360:	3301      	adds	r3, #1
 8050362:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8050364:	88bb      	ldrh	r3, [r7, #4]
 8050366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 805036a:	d3d8      	bcc.n	805031e <tcp_new_port+0xa>
          return 0;
 805036c:	2300      	movs	r3, #0
 805036e:	e00d      	b.n	805038c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8050370:	683b      	ldr	r3, [r7, #0]
 8050372:	68db      	ldr	r3, [r3, #12]
 8050374:	603b      	str	r3, [r7, #0]
 8050376:	683b      	ldr	r3, [r7, #0]
 8050378:	2b00      	cmp	r3, #0
 805037a:	d1ea      	bne.n	8050352 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 805037c:	79fb      	ldrb	r3, [r7, #7]
 805037e:	3301      	adds	r3, #1
 8050380:	71fb      	strb	r3, [r7, #7]
 8050382:	79fb      	ldrb	r3, [r7, #7]
 8050384:	2b03      	cmp	r3, #3
 8050386:	d9dd      	bls.n	8050344 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8050388:	4b03      	ldr	r3, [pc, #12]	; (8050398 <tcp_new_port+0x84>)
 805038a:	881b      	ldrh	r3, [r3, #0]
}
 805038c:	4618      	mov	r0, r3
 805038e:	370c      	adds	r7, #12
 8050390:	46bd      	mov	sp, r7
 8050392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8050396:	4770      	bx	lr
 8050398:	20000028 	.word	0x20000028
 805039c:	0805d900 	.word	0x0805d900

080503a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80503a0:	b5b0      	push	{r4, r5, r7, lr}
 80503a2:	b090      	sub	sp, #64	; 0x40
 80503a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80503a6:	2300      	movs	r3, #0
 80503a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80503ac:	4b94      	ldr	r3, [pc, #592]	; (8050600 <tcp_slowtmr+0x260>)
 80503ae:	681b      	ldr	r3, [r3, #0]
 80503b0:	3301      	adds	r3, #1
 80503b2:	4a93      	ldr	r2, [pc, #588]	; (8050600 <tcp_slowtmr+0x260>)
 80503b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80503b6:	4b93      	ldr	r3, [pc, #588]	; (8050604 <tcp_slowtmr+0x264>)
 80503b8:	781b      	ldrb	r3, [r3, #0]
 80503ba:	3301      	adds	r3, #1
 80503bc:	b2da      	uxtb	r2, r3
 80503be:	4b91      	ldr	r3, [pc, #580]	; (8050604 <tcp_slowtmr+0x264>)
 80503c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80503c2:	2300      	movs	r3, #0
 80503c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80503c6:	4b90      	ldr	r3, [pc, #576]	; (8050608 <tcp_slowtmr+0x268>)
 80503c8:	681b      	ldr	r3, [r3, #0]
 80503ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80503cc:	e29d      	b.n	805090a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80503ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80503d0:	7d1b      	ldrb	r3, [r3, #20]
 80503d2:	2b00      	cmp	r3, #0
 80503d4:	d106      	bne.n	80503e4 <tcp_slowtmr+0x44>
 80503d6:	4b8d      	ldr	r3, [pc, #564]	; (805060c <tcp_slowtmr+0x26c>)
 80503d8:	f240 42be 	movw	r2, #1214	; 0x4be
 80503dc:	498c      	ldr	r1, [pc, #560]	; (8050610 <tcp_slowtmr+0x270>)
 80503de:	488d      	ldr	r0, [pc, #564]	; (8050614 <tcp_slowtmr+0x274>)
 80503e0:	f008 fe28 	bl	8059034 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80503e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80503e6:	7d1b      	ldrb	r3, [r3, #20]
 80503e8:	2b01      	cmp	r3, #1
 80503ea:	d106      	bne.n	80503fa <tcp_slowtmr+0x5a>
 80503ec:	4b87      	ldr	r3, [pc, #540]	; (805060c <tcp_slowtmr+0x26c>)
 80503ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80503f2:	4989      	ldr	r1, [pc, #548]	; (8050618 <tcp_slowtmr+0x278>)
 80503f4:	4887      	ldr	r0, [pc, #540]	; (8050614 <tcp_slowtmr+0x274>)
 80503f6:	f008 fe1d 	bl	8059034 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80503fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80503fc:	7d1b      	ldrb	r3, [r3, #20]
 80503fe:	2b0a      	cmp	r3, #10
 8050400:	d106      	bne.n	8050410 <tcp_slowtmr+0x70>
 8050402:	4b82      	ldr	r3, [pc, #520]	; (805060c <tcp_slowtmr+0x26c>)
 8050404:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8050408:	4984      	ldr	r1, [pc, #528]	; (805061c <tcp_slowtmr+0x27c>)
 805040a:	4882      	ldr	r0, [pc, #520]	; (8050614 <tcp_slowtmr+0x274>)
 805040c:	f008 fe12 	bl	8059034 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8050410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050412:	7f9a      	ldrb	r2, [r3, #30]
 8050414:	4b7b      	ldr	r3, [pc, #492]	; (8050604 <tcp_slowtmr+0x264>)
 8050416:	781b      	ldrb	r3, [r3, #0]
 8050418:	429a      	cmp	r2, r3
 805041a:	d105      	bne.n	8050428 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 805041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805041e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8050420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050422:	68db      	ldr	r3, [r3, #12]
 8050424:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8050426:	e270      	b.n	805090a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8050428:	4b76      	ldr	r3, [pc, #472]	; (8050604 <tcp_slowtmr+0x264>)
 805042a:	781a      	ldrb	r2, [r3, #0]
 805042c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805042e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8050430:	2300      	movs	r3, #0
 8050432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8050436:	2300      	movs	r3, #0
 8050438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 805043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805043e:	7d1b      	ldrb	r3, [r3, #20]
 8050440:	2b02      	cmp	r3, #2
 8050442:	d10a      	bne.n	805045a <tcp_slowtmr+0xba>
 8050444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 805044a:	2b05      	cmp	r3, #5
 805044c:	d905      	bls.n	805045a <tcp_slowtmr+0xba>
      ++pcb_remove;
 805044e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8050452:	3301      	adds	r3, #1
 8050454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8050458:	e11e      	b.n	8050698 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 805045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805045c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8050460:	2b0b      	cmp	r3, #11
 8050462:	d905      	bls.n	8050470 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8050464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8050468:	3301      	adds	r3, #1
 805046a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 805046e:	e113      	b.n	8050698 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8050470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050472:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8050476:	2b00      	cmp	r3, #0
 8050478:	d075      	beq.n	8050566 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 805047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805047c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805047e:	2b00      	cmp	r3, #0
 8050480:	d006      	beq.n	8050490 <tcp_slowtmr+0xf0>
 8050482:	4b62      	ldr	r3, [pc, #392]	; (805060c <tcp_slowtmr+0x26c>)
 8050484:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8050488:	4965      	ldr	r1, [pc, #404]	; (8050620 <tcp_slowtmr+0x280>)
 805048a:	4862      	ldr	r0, [pc, #392]	; (8050614 <tcp_slowtmr+0x274>)
 805048c:	f008 fdd2 	bl	8059034 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8050490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8050494:	2b00      	cmp	r3, #0
 8050496:	d106      	bne.n	80504a6 <tcp_slowtmr+0x106>
 8050498:	4b5c      	ldr	r3, [pc, #368]	; (805060c <tcp_slowtmr+0x26c>)
 805049a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 805049e:	4961      	ldr	r1, [pc, #388]	; (8050624 <tcp_slowtmr+0x284>)
 80504a0:	485c      	ldr	r0, [pc, #368]	; (8050614 <tcp_slowtmr+0x274>)
 80504a2:	f008 fdc7 	bl	8059034 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80504a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80504ac:	2b0b      	cmp	r3, #11
 80504ae:	d905      	bls.n	80504bc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80504b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80504b4:	3301      	adds	r3, #1
 80504b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80504ba:	e0ed      	b.n	8050698 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80504bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80504c2:	3b01      	subs	r3, #1
 80504c4:	4a58      	ldr	r2, [pc, #352]	; (8050628 <tcp_slowtmr+0x288>)
 80504c6:	5cd3      	ldrb	r3, [r2, r3]
 80504c8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80504ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80504d0:	7c7a      	ldrb	r2, [r7, #17]
 80504d2:	429a      	cmp	r2, r3
 80504d4:	d907      	bls.n	80504e6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80504d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80504dc:	3301      	adds	r3, #1
 80504de:	b2da      	uxtb	r2, r3
 80504e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80504e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80504ec:	7c7a      	ldrb	r2, [r7, #17]
 80504ee:	429a      	cmp	r2, r3
 80504f0:	f200 80d2 	bhi.w	8050698 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80504f4:	2301      	movs	r3, #1
 80504f6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80504f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80504fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80504fe:	2b00      	cmp	r3, #0
 8050500:	d108      	bne.n	8050514 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8050502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8050504:	f005 f950 	bl	80557a8 <tcp_zero_window_probe>
 8050508:	4603      	mov	r3, r0
 805050a:	2b00      	cmp	r3, #0
 805050c:	d014      	beq.n	8050538 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 805050e:	2300      	movs	r3, #0
 8050510:	623b      	str	r3, [r7, #32]
 8050512:	e011      	b.n	8050538 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8050514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 805051a:	4619      	mov	r1, r3
 805051c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805051e:	f004 f815 	bl	805454c <tcp_split_unsent_seg>
 8050522:	4603      	mov	r3, r0
 8050524:	2b00      	cmp	r3, #0
 8050526:	d107      	bne.n	8050538 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8050528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805052a:	f004 fa95 	bl	8054a58 <tcp_output>
 805052e:	4603      	mov	r3, r0
 8050530:	2b00      	cmp	r3, #0
 8050532:	d101      	bne.n	8050538 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8050534:	2300      	movs	r3, #0
 8050536:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8050538:	6a3b      	ldr	r3, [r7, #32]
 805053a:	2b00      	cmp	r3, #0
 805053c:	f000 80ac 	beq.w	8050698 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8050540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050542:	2200      	movs	r2, #0
 8050544:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8050548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805054a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 805054e:	2b06      	cmp	r3, #6
 8050550:	f200 80a2 	bhi.w	8050698 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8050554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050556:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 805055a:	3301      	adds	r3, #1
 805055c:	b2da      	uxtb	r2, r3
 805055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050560:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8050564:	e098      	b.n	8050698 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8050566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050568:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 805056c:	2b00      	cmp	r3, #0
 805056e:	db0f      	blt.n	8050590 <tcp_slowtmr+0x1f0>
 8050570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050572:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8050576:	f647 72ff 	movw	r2, #32767	; 0x7fff
 805057a:	4293      	cmp	r3, r2
 805057c:	d008      	beq.n	8050590 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 805057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050580:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8050584:	b29b      	uxth	r3, r3
 8050586:	3301      	adds	r3, #1
 8050588:	b29b      	uxth	r3, r3
 805058a:	b21a      	sxth	r2, r3
 805058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805058e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8050590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050592:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8050596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050598:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 805059c:	429a      	cmp	r2, r3
 805059e:	db7b      	blt.n	8050698 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80505a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80505a2:	f004 fd4b 	bl	805503c <tcp_rexmit_rto_prepare>
 80505a6:	4603      	mov	r3, r0
 80505a8:	2b00      	cmp	r3, #0
 80505aa:	d007      	beq.n	80505bc <tcp_slowtmr+0x21c>
 80505ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80505ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80505b0:	2b00      	cmp	r3, #0
 80505b2:	d171      	bne.n	8050698 <tcp_slowtmr+0x2f8>
 80505b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80505b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80505b8:	2b00      	cmp	r3, #0
 80505ba:	d06d      	beq.n	8050698 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80505bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80505be:	7d1b      	ldrb	r3, [r3, #20]
 80505c0:	2b02      	cmp	r3, #2
 80505c2:	d03a      	beq.n	805063a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80505c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80505c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80505ca:	2b0c      	cmp	r3, #12
 80505cc:	bf28      	it	cs
 80505ce:	230c      	movcs	r3, #12
 80505d0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80505d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80505d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80505d8:	10db      	asrs	r3, r3, #3
 80505da:	b21b      	sxth	r3, r3
 80505dc:	461a      	mov	r2, r3
 80505de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80505e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80505e4:	4413      	add	r3, r2
 80505e6:	7efa      	ldrb	r2, [r7, #27]
 80505e8:	4910      	ldr	r1, [pc, #64]	; (805062c <tcp_slowtmr+0x28c>)
 80505ea:	5c8a      	ldrb	r2, [r1, r2]
 80505ec:	4093      	lsls	r3, r2
 80505ee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80505f0:	697b      	ldr	r3, [r7, #20]
 80505f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80505f6:	4293      	cmp	r3, r2
 80505f8:	dc1a      	bgt.n	8050630 <tcp_slowtmr+0x290>
 80505fa:	697b      	ldr	r3, [r7, #20]
 80505fc:	b21a      	sxth	r2, r3
 80505fe:	e019      	b.n	8050634 <tcp_slowtmr+0x294>
 8050600:	2000b5cc 	.word	0x2000b5cc
 8050604:	2000b5e2 	.word	0x2000b5e2
 8050608:	2000b5d8 	.word	0x2000b5d8
 805060c:	0805b8dc 	.word	0x0805b8dc
 8050610:	0805bc20 	.word	0x0805bc20
 8050614:	0805b920 	.word	0x0805b920
 8050618:	0805bc4c 	.word	0x0805bc4c
 805061c:	0805bc78 	.word	0x0805bc78
 8050620:	0805bca8 	.word	0x0805bca8
 8050624:	0805bcdc 	.word	0x0805bcdc
 8050628:	0805d8f8 	.word	0x0805d8f8
 805062c:	0805d8e8 	.word	0x0805d8e8
 8050630:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8050634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050636:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 805063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805063c:	2200      	movs	r2, #0
 805063e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8050640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050642:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8050646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050648:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 805064c:	4293      	cmp	r3, r2
 805064e:	bf28      	it	cs
 8050650:	4613      	movcs	r3, r2
 8050652:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8050654:	8a7b      	ldrh	r3, [r7, #18]
 8050656:	085b      	lsrs	r3, r3, #1
 8050658:	b29a      	uxth	r2, r3
 805065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805065c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8050660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050662:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8050666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 805066a:	005b      	lsls	r3, r3, #1
 805066c:	b29b      	uxth	r3, r3
 805066e:	429a      	cmp	r2, r3
 8050670:	d206      	bcs.n	8050680 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8050672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8050676:	005b      	lsls	r3, r3, #1
 8050678:	b29a      	uxth	r2, r3
 805067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805067c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8050680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050682:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8050684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 805068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805068c:	2200      	movs	r2, #0
 805068e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8050692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8050694:	f004 fd42 	bl	805511c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8050698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805069a:	7d1b      	ldrb	r3, [r3, #20]
 805069c:	2b06      	cmp	r3, #6
 805069e:	d111      	bne.n	80506c4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80506a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506a2:	8b5b      	ldrh	r3, [r3, #26]
 80506a4:	f003 0310 	and.w	r3, r3, #16
 80506a8:	2b00      	cmp	r3, #0
 80506aa:	d00b      	beq.n	80506c4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80506ac:	4b9c      	ldr	r3, [pc, #624]	; (8050920 <tcp_slowtmr+0x580>)
 80506ae:	681a      	ldr	r2, [r3, #0]
 80506b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506b2:	6a1b      	ldr	r3, [r3, #32]
 80506b4:	1ad3      	subs	r3, r2, r3
 80506b6:	2b28      	cmp	r3, #40	; 0x28
 80506b8:	d904      	bls.n	80506c4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80506ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80506be:	3301      	adds	r3, #1
 80506c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80506c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506c6:	7a5b      	ldrb	r3, [r3, #9]
 80506c8:	f003 0308 	and.w	r3, r3, #8
 80506cc:	2b00      	cmp	r3, #0
 80506ce:	d04a      	beq.n	8050766 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80506d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506d2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80506d4:	2b04      	cmp	r3, #4
 80506d6:	d003      	beq.n	80506e0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80506d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506da:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80506dc:	2b07      	cmp	r3, #7
 80506de:	d142      	bne.n	8050766 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80506e0:	4b8f      	ldr	r3, [pc, #572]	; (8050920 <tcp_slowtmr+0x580>)
 80506e2:	681a      	ldr	r2, [r3, #0]
 80506e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506e6:	6a1b      	ldr	r3, [r3, #32]
 80506e8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80506ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80506ec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80506f0:	4b8c      	ldr	r3, [pc, #560]	; (8050924 <tcp_slowtmr+0x584>)
 80506f2:	440b      	add	r3, r1
 80506f4:	498c      	ldr	r1, [pc, #560]	; (8050928 <tcp_slowtmr+0x588>)
 80506f6:	fba1 1303 	umull	r1, r3, r1, r3
 80506fa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80506fc:	429a      	cmp	r2, r3
 80506fe:	d90a      	bls.n	8050716 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8050700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8050704:	3301      	adds	r3, #1
 8050706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 805070a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 805070e:	3301      	adds	r3, #1
 8050710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8050714:	e027      	b.n	8050766 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8050716:	4b82      	ldr	r3, [pc, #520]	; (8050920 <tcp_slowtmr+0x580>)
 8050718:	681a      	ldr	r2, [r3, #0]
 805071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805071c:	6a1b      	ldr	r3, [r3, #32]
 805071e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8050720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050722:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8050726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050728:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 805072c:	4618      	mov	r0, r3
 805072e:	4b7f      	ldr	r3, [pc, #508]	; (805092c <tcp_slowtmr+0x58c>)
 8050730:	fb00 f303 	mul.w	r3, r0, r3
 8050734:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8050736:	497c      	ldr	r1, [pc, #496]	; (8050928 <tcp_slowtmr+0x588>)
 8050738:	fba1 1303 	umull	r1, r3, r1, r3
 805073c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 805073e:	429a      	cmp	r2, r3
 8050740:	d911      	bls.n	8050766 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8050742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8050744:	f004 fff0 	bl	8055728 <tcp_keepalive>
 8050748:	4603      	mov	r3, r0
 805074a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 805074e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8050752:	2b00      	cmp	r3, #0
 8050754:	d107      	bne.n	8050766 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8050756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050758:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 805075c:	3301      	adds	r3, #1
 805075e:	b2da      	uxtb	r2, r3
 8050760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050762:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8050766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 805076a:	2b00      	cmp	r3, #0
 805076c:	d011      	beq.n	8050792 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 805076e:	4b6c      	ldr	r3, [pc, #432]	; (8050920 <tcp_slowtmr+0x580>)
 8050770:	681a      	ldr	r2, [r3, #0]
 8050772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050774:	6a1b      	ldr	r3, [r3, #32]
 8050776:	1ad2      	subs	r2, r2, r3
 8050778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805077a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 805077e:	4619      	mov	r1, r3
 8050780:	460b      	mov	r3, r1
 8050782:	005b      	lsls	r3, r3, #1
 8050784:	440b      	add	r3, r1
 8050786:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8050788:	429a      	cmp	r2, r3
 805078a:	d302      	bcc.n	8050792 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 805078c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805078e:	f000 feab 	bl	80514e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8050792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050794:	7d1b      	ldrb	r3, [r3, #20]
 8050796:	2b03      	cmp	r3, #3
 8050798:	d10b      	bne.n	80507b2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 805079a:	4b61      	ldr	r3, [pc, #388]	; (8050920 <tcp_slowtmr+0x580>)
 805079c:	681a      	ldr	r2, [r3, #0]
 805079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80507a0:	6a1b      	ldr	r3, [r3, #32]
 80507a2:	1ad3      	subs	r3, r2, r3
 80507a4:	2b28      	cmp	r3, #40	; 0x28
 80507a6:	d904      	bls.n	80507b2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80507a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80507ac:	3301      	adds	r3, #1
 80507ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80507b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80507b4:	7d1b      	ldrb	r3, [r3, #20]
 80507b6:	2b09      	cmp	r3, #9
 80507b8:	d10b      	bne.n	80507d2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80507ba:	4b59      	ldr	r3, [pc, #356]	; (8050920 <tcp_slowtmr+0x580>)
 80507bc:	681a      	ldr	r2, [r3, #0]
 80507be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80507c0:	6a1b      	ldr	r3, [r3, #32]
 80507c2:	1ad3      	subs	r3, r2, r3
 80507c4:	2bf0      	cmp	r3, #240	; 0xf0
 80507c6:	d904      	bls.n	80507d2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80507c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80507cc:	3301      	adds	r3, #1
 80507ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80507d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80507d6:	2b00      	cmp	r3, #0
 80507d8:	d060      	beq.n	805089c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80507da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80507dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80507e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80507e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80507e4:	f000 fccc 	bl	8051180 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80507e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80507ea:	2b00      	cmp	r3, #0
 80507ec:	d010      	beq.n	8050810 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80507ee:	4b50      	ldr	r3, [pc, #320]	; (8050930 <tcp_slowtmr+0x590>)
 80507f0:	681b      	ldr	r3, [r3, #0]
 80507f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80507f4:	429a      	cmp	r2, r3
 80507f6:	d106      	bne.n	8050806 <tcp_slowtmr+0x466>
 80507f8:	4b4e      	ldr	r3, [pc, #312]	; (8050934 <tcp_slowtmr+0x594>)
 80507fa:	f240 526d 	movw	r2, #1389	; 0x56d
 80507fe:	494e      	ldr	r1, [pc, #312]	; (8050938 <tcp_slowtmr+0x598>)
 8050800:	484e      	ldr	r0, [pc, #312]	; (805093c <tcp_slowtmr+0x59c>)
 8050802:	f008 fc17 	bl	8059034 <iprintf>
        prev->next = pcb->next;
 8050806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050808:	68da      	ldr	r2, [r3, #12]
 805080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805080c:	60da      	str	r2, [r3, #12]
 805080e:	e00f      	b.n	8050830 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8050810:	4b47      	ldr	r3, [pc, #284]	; (8050930 <tcp_slowtmr+0x590>)
 8050812:	681b      	ldr	r3, [r3, #0]
 8050814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8050816:	429a      	cmp	r2, r3
 8050818:	d006      	beq.n	8050828 <tcp_slowtmr+0x488>
 805081a:	4b46      	ldr	r3, [pc, #280]	; (8050934 <tcp_slowtmr+0x594>)
 805081c:	f240 5271 	movw	r2, #1393	; 0x571
 8050820:	4947      	ldr	r1, [pc, #284]	; (8050940 <tcp_slowtmr+0x5a0>)
 8050822:	4846      	ldr	r0, [pc, #280]	; (805093c <tcp_slowtmr+0x59c>)
 8050824:	f008 fc06 	bl	8059034 <iprintf>
        tcp_active_pcbs = pcb->next;
 8050828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805082a:	68db      	ldr	r3, [r3, #12]
 805082c:	4a40      	ldr	r2, [pc, #256]	; (8050930 <tcp_slowtmr+0x590>)
 805082e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8050830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8050834:	2b00      	cmp	r3, #0
 8050836:	d013      	beq.n	8050860 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8050838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805083a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 805083c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805083e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8050840:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8050842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050844:	3304      	adds	r3, #4
 8050846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8050848:	8ad2      	ldrh	r2, [r2, #22]
 805084a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 805084c:	8b09      	ldrh	r1, [r1, #24]
 805084e:	9102      	str	r1, [sp, #8]
 8050850:	9201      	str	r2, [sp, #4]
 8050852:	9300      	str	r3, [sp, #0]
 8050854:	462b      	mov	r3, r5
 8050856:	4622      	mov	r2, r4
 8050858:	4601      	mov	r1, r0
 805085a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805085c:	f004 feb0 	bl	80555c0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8050860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050862:	691b      	ldr	r3, [r3, #16]
 8050864:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8050866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050868:	7d1b      	ldrb	r3, [r3, #20]
 805086a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 805086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805086e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8050870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8050872:	68db      	ldr	r3, [r3, #12]
 8050874:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8050876:	6838      	ldr	r0, [r7, #0]
 8050878:	f7fe fff0 	bl	804f85c <tcp_free>

      tcp_active_pcbs_changed = 0;
 805087c:	4b31      	ldr	r3, [pc, #196]	; (8050944 <tcp_slowtmr+0x5a4>)
 805087e:	2200      	movs	r2, #0
 8050880:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8050882:	68fb      	ldr	r3, [r7, #12]
 8050884:	2b00      	cmp	r3, #0
 8050886:	d004      	beq.n	8050892 <tcp_slowtmr+0x4f2>
 8050888:	68fb      	ldr	r3, [r7, #12]
 805088a:	f06f 010c 	mvn.w	r1, #12
 805088e:	68b8      	ldr	r0, [r7, #8]
 8050890:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8050892:	4b2c      	ldr	r3, [pc, #176]	; (8050944 <tcp_slowtmr+0x5a4>)
 8050894:	781b      	ldrb	r3, [r3, #0]
 8050896:	2b00      	cmp	r3, #0
 8050898:	d037      	beq.n	805090a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 805089a:	e592      	b.n	80503c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 805089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805089e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80508a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80508a2:	68db      	ldr	r3, [r3, #12]
 80508a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80508a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508a8:	7f1b      	ldrb	r3, [r3, #28]
 80508aa:	3301      	adds	r3, #1
 80508ac:	b2da      	uxtb	r2, r3
 80508ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80508b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508b4:	7f1a      	ldrb	r2, [r3, #28]
 80508b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508b8:	7f5b      	ldrb	r3, [r3, #29]
 80508ba:	429a      	cmp	r2, r3
 80508bc:	d325      	bcc.n	805090a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80508be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508c0:	2200      	movs	r2, #0
 80508c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80508c4:	4b1f      	ldr	r3, [pc, #124]	; (8050944 <tcp_slowtmr+0x5a4>)
 80508c6:	2200      	movs	r2, #0
 80508c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80508ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80508d0:	2b00      	cmp	r3, #0
 80508d2:	d00b      	beq.n	80508ec <tcp_slowtmr+0x54c>
 80508d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80508d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80508da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80508dc:	6912      	ldr	r2, [r2, #16]
 80508de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80508e0:	4610      	mov	r0, r2
 80508e2:	4798      	blx	r3
 80508e4:	4603      	mov	r3, r0
 80508e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80508ea:	e002      	b.n	80508f2 <tcp_slowtmr+0x552>
 80508ec:	2300      	movs	r3, #0
 80508ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80508f2:	4b14      	ldr	r3, [pc, #80]	; (8050944 <tcp_slowtmr+0x5a4>)
 80508f4:	781b      	ldrb	r3, [r3, #0]
 80508f6:	2b00      	cmp	r3, #0
 80508f8:	d000      	beq.n	80508fc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80508fa:	e562      	b.n	80503c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80508fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8050900:	2b00      	cmp	r3, #0
 8050902:	d102      	bne.n	805090a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8050904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8050906:	f004 f8a7 	bl	8054a58 <tcp_output>
  while (pcb != NULL) {
 805090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805090c:	2b00      	cmp	r3, #0
 805090e:	f47f ad5e 	bne.w	80503ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8050912:	2300      	movs	r3, #0
 8050914:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8050916:	4b0c      	ldr	r3, [pc, #48]	; (8050948 <tcp_slowtmr+0x5a8>)
 8050918:	681b      	ldr	r3, [r3, #0]
 805091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 805091c:	e069      	b.n	80509f2 <tcp_slowtmr+0x652>
 805091e:	bf00      	nop
 8050920:	2000b5cc 	.word	0x2000b5cc
 8050924:	000a4cb8 	.word	0x000a4cb8
 8050928:	10624dd3 	.word	0x10624dd3
 805092c:	000124f8 	.word	0x000124f8
 8050930:	2000b5d8 	.word	0x2000b5d8
 8050934:	0805b8dc 	.word	0x0805b8dc
 8050938:	0805bd14 	.word	0x0805bd14
 805093c:	0805b920 	.word	0x0805b920
 8050940:	0805bd40 	.word	0x0805bd40
 8050944:	2000b5e0 	.word	0x2000b5e0
 8050948:	2000b5dc 	.word	0x2000b5dc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 805094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805094e:	7d1b      	ldrb	r3, [r3, #20]
 8050950:	2b0a      	cmp	r3, #10
 8050952:	d006      	beq.n	8050962 <tcp_slowtmr+0x5c2>
 8050954:	4b2b      	ldr	r3, [pc, #172]	; (8050a04 <tcp_slowtmr+0x664>)
 8050956:	f240 52a1 	movw	r2, #1441	; 0x5a1
 805095a:	492b      	ldr	r1, [pc, #172]	; (8050a08 <tcp_slowtmr+0x668>)
 805095c:	482b      	ldr	r0, [pc, #172]	; (8050a0c <tcp_slowtmr+0x66c>)
 805095e:	f008 fb69 	bl	8059034 <iprintf>
    pcb_remove = 0;
 8050962:	2300      	movs	r3, #0
 8050964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8050968:	4b29      	ldr	r3, [pc, #164]	; (8050a10 <tcp_slowtmr+0x670>)
 805096a:	681a      	ldr	r2, [r3, #0]
 805096c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805096e:	6a1b      	ldr	r3, [r3, #32]
 8050970:	1ad3      	subs	r3, r2, r3
 8050972:	2bf0      	cmp	r3, #240	; 0xf0
 8050974:	d904      	bls.n	8050980 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8050976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 805097a:	3301      	adds	r3, #1
 805097c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8050980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8050984:	2b00      	cmp	r3, #0
 8050986:	d02f      	beq.n	80509e8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8050988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 805098a:	f000 fbf9 	bl	8051180 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 805098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8050990:	2b00      	cmp	r3, #0
 8050992:	d010      	beq.n	80509b6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8050994:	4b1f      	ldr	r3, [pc, #124]	; (8050a14 <tcp_slowtmr+0x674>)
 8050996:	681b      	ldr	r3, [r3, #0]
 8050998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 805099a:	429a      	cmp	r2, r3
 805099c:	d106      	bne.n	80509ac <tcp_slowtmr+0x60c>
 805099e:	4b19      	ldr	r3, [pc, #100]	; (8050a04 <tcp_slowtmr+0x664>)
 80509a0:	f240 52af 	movw	r2, #1455	; 0x5af
 80509a4:	491c      	ldr	r1, [pc, #112]	; (8050a18 <tcp_slowtmr+0x678>)
 80509a6:	4819      	ldr	r0, [pc, #100]	; (8050a0c <tcp_slowtmr+0x66c>)
 80509a8:	f008 fb44 	bl	8059034 <iprintf>
        prev->next = pcb->next;
 80509ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509ae:	68da      	ldr	r2, [r3, #12]
 80509b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80509b2:	60da      	str	r2, [r3, #12]
 80509b4:	e00f      	b.n	80509d6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80509b6:	4b17      	ldr	r3, [pc, #92]	; (8050a14 <tcp_slowtmr+0x674>)
 80509b8:	681b      	ldr	r3, [r3, #0]
 80509ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80509bc:	429a      	cmp	r2, r3
 80509be:	d006      	beq.n	80509ce <tcp_slowtmr+0x62e>
 80509c0:	4b10      	ldr	r3, [pc, #64]	; (8050a04 <tcp_slowtmr+0x664>)
 80509c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80509c6:	4915      	ldr	r1, [pc, #84]	; (8050a1c <tcp_slowtmr+0x67c>)
 80509c8:	4810      	ldr	r0, [pc, #64]	; (8050a0c <tcp_slowtmr+0x66c>)
 80509ca:	f008 fb33 	bl	8059034 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80509ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509d0:	68db      	ldr	r3, [r3, #12]
 80509d2:	4a10      	ldr	r2, [pc, #64]	; (8050a14 <tcp_slowtmr+0x674>)
 80509d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80509d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80509da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509dc:	68db      	ldr	r3, [r3, #12]
 80509de:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80509e0:	69f8      	ldr	r0, [r7, #28]
 80509e2:	f7fe ff3b 	bl	804f85c <tcp_free>
 80509e6:	e004      	b.n	80509f2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80509e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80509ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509ee:	68db      	ldr	r3, [r3, #12]
 80509f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80509f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80509f4:	2b00      	cmp	r3, #0
 80509f6:	d1a9      	bne.n	805094c <tcp_slowtmr+0x5ac>
    }
  }
}
 80509f8:	bf00      	nop
 80509fa:	bf00      	nop
 80509fc:	3730      	adds	r7, #48	; 0x30
 80509fe:	46bd      	mov	sp, r7
 8050a00:	bdb0      	pop	{r4, r5, r7, pc}
 8050a02:	bf00      	nop
 8050a04:	0805b8dc 	.word	0x0805b8dc
 8050a08:	0805bd6c 	.word	0x0805bd6c
 8050a0c:	0805b920 	.word	0x0805b920
 8050a10:	2000b5cc 	.word	0x2000b5cc
 8050a14:	2000b5dc 	.word	0x2000b5dc
 8050a18:	0805bd9c 	.word	0x0805bd9c
 8050a1c:	0805bdc4 	.word	0x0805bdc4

08050a20 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8050a20:	b580      	push	{r7, lr}
 8050a22:	b082      	sub	sp, #8
 8050a24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8050a26:	4b2d      	ldr	r3, [pc, #180]	; (8050adc <tcp_fasttmr+0xbc>)
 8050a28:	781b      	ldrb	r3, [r3, #0]
 8050a2a:	3301      	adds	r3, #1
 8050a2c:	b2da      	uxtb	r2, r3
 8050a2e:	4b2b      	ldr	r3, [pc, #172]	; (8050adc <tcp_fasttmr+0xbc>)
 8050a30:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8050a32:	4b2b      	ldr	r3, [pc, #172]	; (8050ae0 <tcp_fasttmr+0xc0>)
 8050a34:	681b      	ldr	r3, [r3, #0]
 8050a36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8050a38:	e048      	b.n	8050acc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8050a3a:	687b      	ldr	r3, [r7, #4]
 8050a3c:	7f9a      	ldrb	r2, [r3, #30]
 8050a3e:	4b27      	ldr	r3, [pc, #156]	; (8050adc <tcp_fasttmr+0xbc>)
 8050a40:	781b      	ldrb	r3, [r3, #0]
 8050a42:	429a      	cmp	r2, r3
 8050a44:	d03f      	beq.n	8050ac6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8050a46:	4b25      	ldr	r3, [pc, #148]	; (8050adc <tcp_fasttmr+0xbc>)
 8050a48:	781a      	ldrb	r2, [r3, #0]
 8050a4a:	687b      	ldr	r3, [r7, #4]
 8050a4c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8050a4e:	687b      	ldr	r3, [r7, #4]
 8050a50:	8b5b      	ldrh	r3, [r3, #26]
 8050a52:	f003 0301 	and.w	r3, r3, #1
 8050a56:	2b00      	cmp	r3, #0
 8050a58:	d010      	beq.n	8050a7c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8050a5a:	687b      	ldr	r3, [r7, #4]
 8050a5c:	8b5b      	ldrh	r3, [r3, #26]
 8050a5e:	f043 0302 	orr.w	r3, r3, #2
 8050a62:	b29a      	uxth	r2, r3
 8050a64:	687b      	ldr	r3, [r7, #4]
 8050a66:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8050a68:	6878      	ldr	r0, [r7, #4]
 8050a6a:	f003 fff5 	bl	8054a58 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8050a6e:	687b      	ldr	r3, [r7, #4]
 8050a70:	8b5b      	ldrh	r3, [r3, #26]
 8050a72:	f023 0303 	bic.w	r3, r3, #3
 8050a76:	b29a      	uxth	r2, r3
 8050a78:	687b      	ldr	r3, [r7, #4]
 8050a7a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8050a7c:	687b      	ldr	r3, [r7, #4]
 8050a7e:	8b5b      	ldrh	r3, [r3, #26]
 8050a80:	f003 0308 	and.w	r3, r3, #8
 8050a84:	2b00      	cmp	r3, #0
 8050a86:	d009      	beq.n	8050a9c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8050a88:	687b      	ldr	r3, [r7, #4]
 8050a8a:	8b5b      	ldrh	r3, [r3, #26]
 8050a8c:	f023 0308 	bic.w	r3, r3, #8
 8050a90:	b29a      	uxth	r2, r3
 8050a92:	687b      	ldr	r3, [r7, #4]
 8050a94:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8050a96:	6878      	ldr	r0, [r7, #4]
 8050a98:	f7ff f874 	bl	804fb84 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8050a9c:	687b      	ldr	r3, [r7, #4]
 8050a9e:	68db      	ldr	r3, [r3, #12]
 8050aa0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8050aa2:	687b      	ldr	r3, [r7, #4]
 8050aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8050aa6:	2b00      	cmp	r3, #0
 8050aa8:	d00a      	beq.n	8050ac0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8050aaa:	4b0e      	ldr	r3, [pc, #56]	; (8050ae4 <tcp_fasttmr+0xc4>)
 8050aac:	2200      	movs	r2, #0
 8050aae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8050ab0:	6878      	ldr	r0, [r7, #4]
 8050ab2:	f000 f819 	bl	8050ae8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8050ab6:	4b0b      	ldr	r3, [pc, #44]	; (8050ae4 <tcp_fasttmr+0xc4>)
 8050ab8:	781b      	ldrb	r3, [r3, #0]
 8050aba:	2b00      	cmp	r3, #0
 8050abc:	d000      	beq.n	8050ac0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8050abe:	e7b8      	b.n	8050a32 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8050ac0:	683b      	ldr	r3, [r7, #0]
 8050ac2:	607b      	str	r3, [r7, #4]
 8050ac4:	e002      	b.n	8050acc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8050ac6:	687b      	ldr	r3, [r7, #4]
 8050ac8:	68db      	ldr	r3, [r3, #12]
 8050aca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8050acc:	687b      	ldr	r3, [r7, #4]
 8050ace:	2b00      	cmp	r3, #0
 8050ad0:	d1b3      	bne.n	8050a3a <tcp_fasttmr+0x1a>
    }
  }
}
 8050ad2:	bf00      	nop
 8050ad4:	bf00      	nop
 8050ad6:	3708      	adds	r7, #8
 8050ad8:	46bd      	mov	sp, r7
 8050ada:	bd80      	pop	{r7, pc}
 8050adc:	2000b5e2 	.word	0x2000b5e2
 8050ae0:	2000b5d8 	.word	0x2000b5d8
 8050ae4:	2000b5e0 	.word	0x2000b5e0

08050ae8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8050ae8:	b590      	push	{r4, r7, lr}
 8050aea:	b085      	sub	sp, #20
 8050aec:	af00      	add	r7, sp, #0
 8050aee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8050af0:	687b      	ldr	r3, [r7, #4]
 8050af2:	2b00      	cmp	r3, #0
 8050af4:	d109      	bne.n	8050b0a <tcp_process_refused_data+0x22>
 8050af6:	4b37      	ldr	r3, [pc, #220]	; (8050bd4 <tcp_process_refused_data+0xec>)
 8050af8:	f240 6209 	movw	r2, #1545	; 0x609
 8050afc:	4936      	ldr	r1, [pc, #216]	; (8050bd8 <tcp_process_refused_data+0xf0>)
 8050afe:	4837      	ldr	r0, [pc, #220]	; (8050bdc <tcp_process_refused_data+0xf4>)
 8050b00:	f008 fa98 	bl	8059034 <iprintf>
 8050b04:	f06f 030f 	mvn.w	r3, #15
 8050b08:	e060      	b.n	8050bcc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8050b0a:	687b      	ldr	r3, [r7, #4]
 8050b0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8050b0e:	7b5b      	ldrb	r3, [r3, #13]
 8050b10:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8050b12:	687b      	ldr	r3, [r7, #4]
 8050b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8050b16:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8050b18:	687b      	ldr	r3, [r7, #4]
 8050b1a:	2200      	movs	r2, #0
 8050b1c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8050b1e:	687b      	ldr	r3, [r7, #4]
 8050b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8050b24:	2b00      	cmp	r3, #0
 8050b26:	d00b      	beq.n	8050b40 <tcp_process_refused_data+0x58>
 8050b28:	687b      	ldr	r3, [r7, #4]
 8050b2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8050b2e:	687b      	ldr	r3, [r7, #4]
 8050b30:	6918      	ldr	r0, [r3, #16]
 8050b32:	2300      	movs	r3, #0
 8050b34:	68ba      	ldr	r2, [r7, #8]
 8050b36:	6879      	ldr	r1, [r7, #4]
 8050b38:	47a0      	blx	r4
 8050b3a:	4603      	mov	r3, r0
 8050b3c:	73fb      	strb	r3, [r7, #15]
 8050b3e:	e007      	b.n	8050b50 <tcp_process_refused_data+0x68>
 8050b40:	2300      	movs	r3, #0
 8050b42:	68ba      	ldr	r2, [r7, #8]
 8050b44:	6879      	ldr	r1, [r7, #4]
 8050b46:	2000      	movs	r0, #0
 8050b48:	f000 f8a4 	bl	8050c94 <tcp_recv_null>
 8050b4c:	4603      	mov	r3, r0
 8050b4e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8050b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8050b54:	2b00      	cmp	r3, #0
 8050b56:	d12a      	bne.n	8050bae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8050b58:	7bbb      	ldrb	r3, [r7, #14]
 8050b5a:	f003 0320 	and.w	r3, r3, #32
 8050b5e:	2b00      	cmp	r3, #0
 8050b60:	d033      	beq.n	8050bca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8050b62:	687b      	ldr	r3, [r7, #4]
 8050b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8050b66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8050b6a:	d005      	beq.n	8050b78 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8050b6c:	687b      	ldr	r3, [r7, #4]
 8050b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8050b70:	3301      	adds	r3, #1
 8050b72:	b29a      	uxth	r2, r3
 8050b74:	687b      	ldr	r3, [r7, #4]
 8050b76:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8050b78:	687b      	ldr	r3, [r7, #4]
 8050b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8050b7e:	2b00      	cmp	r3, #0
 8050b80:	d00b      	beq.n	8050b9a <tcp_process_refused_data+0xb2>
 8050b82:	687b      	ldr	r3, [r7, #4]
 8050b84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8050b88:	687b      	ldr	r3, [r7, #4]
 8050b8a:	6918      	ldr	r0, [r3, #16]
 8050b8c:	2300      	movs	r3, #0
 8050b8e:	2200      	movs	r2, #0
 8050b90:	6879      	ldr	r1, [r7, #4]
 8050b92:	47a0      	blx	r4
 8050b94:	4603      	mov	r3, r0
 8050b96:	73fb      	strb	r3, [r7, #15]
 8050b98:	e001      	b.n	8050b9e <tcp_process_refused_data+0xb6>
 8050b9a:	2300      	movs	r3, #0
 8050b9c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8050b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8050ba2:	f113 0f0d 	cmn.w	r3, #13
 8050ba6:	d110      	bne.n	8050bca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8050ba8:	f06f 030c 	mvn.w	r3, #12
 8050bac:	e00e      	b.n	8050bcc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8050bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8050bb2:	f113 0f0d 	cmn.w	r3, #13
 8050bb6:	d102      	bne.n	8050bbe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8050bb8:	f06f 030c 	mvn.w	r3, #12
 8050bbc:	e006      	b.n	8050bcc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8050bbe:	687b      	ldr	r3, [r7, #4]
 8050bc0:	68ba      	ldr	r2, [r7, #8]
 8050bc2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8050bc4:	f06f 0304 	mvn.w	r3, #4
 8050bc8:	e000      	b.n	8050bcc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8050bca:	2300      	movs	r3, #0
}
 8050bcc:	4618      	mov	r0, r3
 8050bce:	3714      	adds	r7, #20
 8050bd0:	46bd      	mov	sp, r7
 8050bd2:	bd90      	pop	{r4, r7, pc}
 8050bd4:	0805b8dc 	.word	0x0805b8dc
 8050bd8:	0805bdec 	.word	0x0805bdec
 8050bdc:	0805b920 	.word	0x0805b920

08050be0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8050be0:	b580      	push	{r7, lr}
 8050be2:	b084      	sub	sp, #16
 8050be4:	af00      	add	r7, sp, #0
 8050be6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8050be8:	e007      	b.n	8050bfa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8050bea:	687b      	ldr	r3, [r7, #4]
 8050bec:	681b      	ldr	r3, [r3, #0]
 8050bee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8050bf0:	6878      	ldr	r0, [r7, #4]
 8050bf2:	f000 f80a 	bl	8050c0a <tcp_seg_free>
    seg = next;
 8050bf6:	68fb      	ldr	r3, [r7, #12]
 8050bf8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8050bfa:	687b      	ldr	r3, [r7, #4]
 8050bfc:	2b00      	cmp	r3, #0
 8050bfe:	d1f4      	bne.n	8050bea <tcp_segs_free+0xa>
  }
}
 8050c00:	bf00      	nop
 8050c02:	bf00      	nop
 8050c04:	3710      	adds	r7, #16
 8050c06:	46bd      	mov	sp, r7
 8050c08:	bd80      	pop	{r7, pc}

08050c0a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8050c0a:	b580      	push	{r7, lr}
 8050c0c:	b082      	sub	sp, #8
 8050c0e:	af00      	add	r7, sp, #0
 8050c10:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8050c12:	687b      	ldr	r3, [r7, #4]
 8050c14:	2b00      	cmp	r3, #0
 8050c16:	d00c      	beq.n	8050c32 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8050c18:	687b      	ldr	r3, [r7, #4]
 8050c1a:	685b      	ldr	r3, [r3, #4]
 8050c1c:	2b00      	cmp	r3, #0
 8050c1e:	d004      	beq.n	8050c2a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8050c20:	687b      	ldr	r3, [r7, #4]
 8050c22:	685b      	ldr	r3, [r3, #4]
 8050c24:	4618      	mov	r0, r3
 8050c26:	f7fe fb6d 	bl	804f304 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8050c2a:	6879      	ldr	r1, [r7, #4]
 8050c2c:	2003      	movs	r0, #3
 8050c2e:	f7fd fcc5 	bl	804e5bc <memp_free>
  }
}
 8050c32:	bf00      	nop
 8050c34:	3708      	adds	r7, #8
 8050c36:	46bd      	mov	sp, r7
 8050c38:	bd80      	pop	{r7, pc}
	...

08050c3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8050c3c:	b580      	push	{r7, lr}
 8050c3e:	b084      	sub	sp, #16
 8050c40:	af00      	add	r7, sp, #0
 8050c42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8050c44:	687b      	ldr	r3, [r7, #4]
 8050c46:	2b00      	cmp	r3, #0
 8050c48:	d106      	bne.n	8050c58 <tcp_seg_copy+0x1c>
 8050c4a:	4b0f      	ldr	r3, [pc, #60]	; (8050c88 <tcp_seg_copy+0x4c>)
 8050c4c:	f240 6282 	movw	r2, #1666	; 0x682
 8050c50:	490e      	ldr	r1, [pc, #56]	; (8050c8c <tcp_seg_copy+0x50>)
 8050c52:	480f      	ldr	r0, [pc, #60]	; (8050c90 <tcp_seg_copy+0x54>)
 8050c54:	f008 f9ee 	bl	8059034 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8050c58:	2003      	movs	r0, #3
 8050c5a:	f7fd fc39 	bl	804e4d0 <memp_malloc>
 8050c5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8050c60:	68fb      	ldr	r3, [r7, #12]
 8050c62:	2b00      	cmp	r3, #0
 8050c64:	d101      	bne.n	8050c6a <tcp_seg_copy+0x2e>
    return NULL;
 8050c66:	2300      	movs	r3, #0
 8050c68:	e00a      	b.n	8050c80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8050c6a:	2210      	movs	r2, #16
 8050c6c:	6879      	ldr	r1, [r7, #4]
 8050c6e:	68f8      	ldr	r0, [r7, #12]
 8050c70:	f008 f8d0 	bl	8058e14 <memcpy>
  pbuf_ref(cseg->p);
 8050c74:	68fb      	ldr	r3, [r7, #12]
 8050c76:	685b      	ldr	r3, [r3, #4]
 8050c78:	4618      	mov	r0, r3
 8050c7a:	f7fe fbe9 	bl	804f450 <pbuf_ref>
  return cseg;
 8050c7e:	68fb      	ldr	r3, [r7, #12]
}
 8050c80:	4618      	mov	r0, r3
 8050c82:	3710      	adds	r7, #16
 8050c84:	46bd      	mov	sp, r7
 8050c86:	bd80      	pop	{r7, pc}
 8050c88:	0805b8dc 	.word	0x0805b8dc
 8050c8c:	0805be30 	.word	0x0805be30
 8050c90:	0805b920 	.word	0x0805b920

08050c94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8050c94:	b580      	push	{r7, lr}
 8050c96:	b084      	sub	sp, #16
 8050c98:	af00      	add	r7, sp, #0
 8050c9a:	60f8      	str	r0, [r7, #12]
 8050c9c:	60b9      	str	r1, [r7, #8]
 8050c9e:	607a      	str	r2, [r7, #4]
 8050ca0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8050ca2:	68bb      	ldr	r3, [r7, #8]
 8050ca4:	2b00      	cmp	r3, #0
 8050ca6:	d109      	bne.n	8050cbc <tcp_recv_null+0x28>
 8050ca8:	4b12      	ldr	r3, [pc, #72]	; (8050cf4 <tcp_recv_null+0x60>)
 8050caa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8050cae:	4912      	ldr	r1, [pc, #72]	; (8050cf8 <tcp_recv_null+0x64>)
 8050cb0:	4812      	ldr	r0, [pc, #72]	; (8050cfc <tcp_recv_null+0x68>)
 8050cb2:	f008 f9bf 	bl	8059034 <iprintf>
 8050cb6:	f06f 030f 	mvn.w	r3, #15
 8050cba:	e016      	b.n	8050cea <tcp_recv_null+0x56>

  if (p != NULL) {
 8050cbc:	687b      	ldr	r3, [r7, #4]
 8050cbe:	2b00      	cmp	r3, #0
 8050cc0:	d009      	beq.n	8050cd6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8050cc2:	687b      	ldr	r3, [r7, #4]
 8050cc4:	891b      	ldrh	r3, [r3, #8]
 8050cc6:	4619      	mov	r1, r3
 8050cc8:	68b8      	ldr	r0, [r7, #8]
 8050cca:	f7ff fad3 	bl	8050274 <tcp_recved>
    pbuf_free(p);
 8050cce:	6878      	ldr	r0, [r7, #4]
 8050cd0:	f7fe fb18 	bl	804f304 <pbuf_free>
 8050cd4:	e008      	b.n	8050ce8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8050cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8050cda:	2b00      	cmp	r3, #0
 8050cdc:	d104      	bne.n	8050ce8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8050cde:	68b8      	ldr	r0, [r7, #8]
 8050ce0:	f7fe ffba 	bl	804fc58 <tcp_close>
 8050ce4:	4603      	mov	r3, r0
 8050ce6:	e000      	b.n	8050cea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8050ce8:	2300      	movs	r3, #0
}
 8050cea:	4618      	mov	r0, r3
 8050cec:	3710      	adds	r7, #16
 8050cee:	46bd      	mov	sp, r7
 8050cf0:	bd80      	pop	{r7, pc}
 8050cf2:	bf00      	nop
 8050cf4:	0805b8dc 	.word	0x0805b8dc
 8050cf8:	0805be4c 	.word	0x0805be4c
 8050cfc:	0805b920 	.word	0x0805b920

08050d00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8050d00:	b580      	push	{r7, lr}
 8050d02:	b086      	sub	sp, #24
 8050d04:	af00      	add	r7, sp, #0
 8050d06:	4603      	mov	r3, r0
 8050d08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8050d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8050d0e:	2b00      	cmp	r3, #0
 8050d10:	db01      	blt.n	8050d16 <tcp_kill_prio+0x16>
 8050d12:	79fb      	ldrb	r3, [r7, #7]
 8050d14:	e000      	b.n	8050d18 <tcp_kill_prio+0x18>
 8050d16:	237f      	movs	r3, #127	; 0x7f
 8050d18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8050d1a:	7afb      	ldrb	r3, [r7, #11]
 8050d1c:	2b00      	cmp	r3, #0
 8050d1e:	d034      	beq.n	8050d8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8050d20:	7afb      	ldrb	r3, [r7, #11]
 8050d22:	3b01      	subs	r3, #1
 8050d24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8050d26:	2300      	movs	r3, #0
 8050d28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8050d2a:	2300      	movs	r3, #0
 8050d2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8050d2e:	4b19      	ldr	r3, [pc, #100]	; (8050d94 <tcp_kill_prio+0x94>)
 8050d30:	681b      	ldr	r3, [r3, #0]
 8050d32:	617b      	str	r3, [r7, #20]
 8050d34:	e01f      	b.n	8050d76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8050d36:	697b      	ldr	r3, [r7, #20]
 8050d38:	7d5b      	ldrb	r3, [r3, #21]
 8050d3a:	7afa      	ldrb	r2, [r7, #11]
 8050d3c:	429a      	cmp	r2, r3
 8050d3e:	d80c      	bhi.n	8050d5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8050d40:	697b      	ldr	r3, [r7, #20]
 8050d42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8050d44:	7afa      	ldrb	r2, [r7, #11]
 8050d46:	429a      	cmp	r2, r3
 8050d48:	d112      	bne.n	8050d70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8050d4a:	4b13      	ldr	r3, [pc, #76]	; (8050d98 <tcp_kill_prio+0x98>)
 8050d4c:	681a      	ldr	r2, [r3, #0]
 8050d4e:	697b      	ldr	r3, [r7, #20]
 8050d50:	6a1b      	ldr	r3, [r3, #32]
 8050d52:	1ad3      	subs	r3, r2, r3
 8050d54:	68fa      	ldr	r2, [r7, #12]
 8050d56:	429a      	cmp	r2, r3
 8050d58:	d80a      	bhi.n	8050d70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8050d5a:	4b0f      	ldr	r3, [pc, #60]	; (8050d98 <tcp_kill_prio+0x98>)
 8050d5c:	681a      	ldr	r2, [r3, #0]
 8050d5e:	697b      	ldr	r3, [r7, #20]
 8050d60:	6a1b      	ldr	r3, [r3, #32]
 8050d62:	1ad3      	subs	r3, r2, r3
 8050d64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8050d66:	697b      	ldr	r3, [r7, #20]
 8050d68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8050d6a:	697b      	ldr	r3, [r7, #20]
 8050d6c:	7d5b      	ldrb	r3, [r3, #21]
 8050d6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8050d70:	697b      	ldr	r3, [r7, #20]
 8050d72:	68db      	ldr	r3, [r3, #12]
 8050d74:	617b      	str	r3, [r7, #20]
 8050d76:	697b      	ldr	r3, [r7, #20]
 8050d78:	2b00      	cmp	r3, #0
 8050d7a:	d1dc      	bne.n	8050d36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8050d7c:	693b      	ldr	r3, [r7, #16]
 8050d7e:	2b00      	cmp	r3, #0
 8050d80:	d004      	beq.n	8050d8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8050d82:	6938      	ldr	r0, [r7, #16]
 8050d84:	f7ff f8ae 	bl	804fee4 <tcp_abort>
 8050d88:	e000      	b.n	8050d8c <tcp_kill_prio+0x8c>
    return;
 8050d8a:	bf00      	nop
  }
}
 8050d8c:	3718      	adds	r7, #24
 8050d8e:	46bd      	mov	sp, r7
 8050d90:	bd80      	pop	{r7, pc}
 8050d92:	bf00      	nop
 8050d94:	2000b5d8 	.word	0x2000b5d8
 8050d98:	2000b5cc 	.word	0x2000b5cc

08050d9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8050d9c:	b580      	push	{r7, lr}
 8050d9e:	b086      	sub	sp, #24
 8050da0:	af00      	add	r7, sp, #0
 8050da2:	4603      	mov	r3, r0
 8050da4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8050da6:	79fb      	ldrb	r3, [r7, #7]
 8050da8:	2b08      	cmp	r3, #8
 8050daa:	d009      	beq.n	8050dc0 <tcp_kill_state+0x24>
 8050dac:	79fb      	ldrb	r3, [r7, #7]
 8050dae:	2b09      	cmp	r3, #9
 8050db0:	d006      	beq.n	8050dc0 <tcp_kill_state+0x24>
 8050db2:	4b1a      	ldr	r3, [pc, #104]	; (8050e1c <tcp_kill_state+0x80>)
 8050db4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8050db8:	4919      	ldr	r1, [pc, #100]	; (8050e20 <tcp_kill_state+0x84>)
 8050dba:	481a      	ldr	r0, [pc, #104]	; (8050e24 <tcp_kill_state+0x88>)
 8050dbc:	f008 f93a 	bl	8059034 <iprintf>

  inactivity = 0;
 8050dc0:	2300      	movs	r3, #0
 8050dc2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8050dc4:	2300      	movs	r3, #0
 8050dc6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8050dc8:	4b17      	ldr	r3, [pc, #92]	; (8050e28 <tcp_kill_state+0x8c>)
 8050dca:	681b      	ldr	r3, [r3, #0]
 8050dcc:	617b      	str	r3, [r7, #20]
 8050dce:	e017      	b.n	8050e00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8050dd0:	697b      	ldr	r3, [r7, #20]
 8050dd2:	7d1b      	ldrb	r3, [r3, #20]
 8050dd4:	79fa      	ldrb	r2, [r7, #7]
 8050dd6:	429a      	cmp	r2, r3
 8050dd8:	d10f      	bne.n	8050dfa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8050dda:	4b14      	ldr	r3, [pc, #80]	; (8050e2c <tcp_kill_state+0x90>)
 8050ddc:	681a      	ldr	r2, [r3, #0]
 8050dde:	697b      	ldr	r3, [r7, #20]
 8050de0:	6a1b      	ldr	r3, [r3, #32]
 8050de2:	1ad3      	subs	r3, r2, r3
 8050de4:	68fa      	ldr	r2, [r7, #12]
 8050de6:	429a      	cmp	r2, r3
 8050de8:	d807      	bhi.n	8050dfa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8050dea:	4b10      	ldr	r3, [pc, #64]	; (8050e2c <tcp_kill_state+0x90>)
 8050dec:	681a      	ldr	r2, [r3, #0]
 8050dee:	697b      	ldr	r3, [r7, #20]
 8050df0:	6a1b      	ldr	r3, [r3, #32]
 8050df2:	1ad3      	subs	r3, r2, r3
 8050df4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8050df6:	697b      	ldr	r3, [r7, #20]
 8050df8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8050dfa:	697b      	ldr	r3, [r7, #20]
 8050dfc:	68db      	ldr	r3, [r3, #12]
 8050dfe:	617b      	str	r3, [r7, #20]
 8050e00:	697b      	ldr	r3, [r7, #20]
 8050e02:	2b00      	cmp	r3, #0
 8050e04:	d1e4      	bne.n	8050dd0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8050e06:	693b      	ldr	r3, [r7, #16]
 8050e08:	2b00      	cmp	r3, #0
 8050e0a:	d003      	beq.n	8050e14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8050e0c:	2100      	movs	r1, #0
 8050e0e:	6938      	ldr	r0, [r7, #16]
 8050e10:	f7fe ffaa 	bl	804fd68 <tcp_abandon>
  }
}
 8050e14:	bf00      	nop
 8050e16:	3718      	adds	r7, #24
 8050e18:	46bd      	mov	sp, r7
 8050e1a:	bd80      	pop	{r7, pc}
 8050e1c:	0805b8dc 	.word	0x0805b8dc
 8050e20:	0805be68 	.word	0x0805be68
 8050e24:	0805b920 	.word	0x0805b920
 8050e28:	2000b5d8 	.word	0x2000b5d8
 8050e2c:	2000b5cc 	.word	0x2000b5cc

08050e30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8050e30:	b580      	push	{r7, lr}
 8050e32:	b084      	sub	sp, #16
 8050e34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8050e36:	2300      	movs	r3, #0
 8050e38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8050e3a:	2300      	movs	r3, #0
 8050e3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8050e3e:	4b12      	ldr	r3, [pc, #72]	; (8050e88 <tcp_kill_timewait+0x58>)
 8050e40:	681b      	ldr	r3, [r3, #0]
 8050e42:	60fb      	str	r3, [r7, #12]
 8050e44:	e012      	b.n	8050e6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8050e46:	4b11      	ldr	r3, [pc, #68]	; (8050e8c <tcp_kill_timewait+0x5c>)
 8050e48:	681a      	ldr	r2, [r3, #0]
 8050e4a:	68fb      	ldr	r3, [r7, #12]
 8050e4c:	6a1b      	ldr	r3, [r3, #32]
 8050e4e:	1ad3      	subs	r3, r2, r3
 8050e50:	687a      	ldr	r2, [r7, #4]
 8050e52:	429a      	cmp	r2, r3
 8050e54:	d807      	bhi.n	8050e66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8050e56:	4b0d      	ldr	r3, [pc, #52]	; (8050e8c <tcp_kill_timewait+0x5c>)
 8050e58:	681a      	ldr	r2, [r3, #0]
 8050e5a:	68fb      	ldr	r3, [r7, #12]
 8050e5c:	6a1b      	ldr	r3, [r3, #32]
 8050e5e:	1ad3      	subs	r3, r2, r3
 8050e60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8050e62:	68fb      	ldr	r3, [r7, #12]
 8050e64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8050e66:	68fb      	ldr	r3, [r7, #12]
 8050e68:	68db      	ldr	r3, [r3, #12]
 8050e6a:	60fb      	str	r3, [r7, #12]
 8050e6c:	68fb      	ldr	r3, [r7, #12]
 8050e6e:	2b00      	cmp	r3, #0
 8050e70:	d1e9      	bne.n	8050e46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8050e72:	68bb      	ldr	r3, [r7, #8]
 8050e74:	2b00      	cmp	r3, #0
 8050e76:	d002      	beq.n	8050e7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8050e78:	68b8      	ldr	r0, [r7, #8]
 8050e7a:	f7ff f833 	bl	804fee4 <tcp_abort>
  }
}
 8050e7e:	bf00      	nop
 8050e80:	3710      	adds	r7, #16
 8050e82:	46bd      	mov	sp, r7
 8050e84:	bd80      	pop	{r7, pc}
 8050e86:	bf00      	nop
 8050e88:	2000b5dc 	.word	0x2000b5dc
 8050e8c:	2000b5cc 	.word	0x2000b5cc

08050e90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8050e90:	b580      	push	{r7, lr}
 8050e92:	b082      	sub	sp, #8
 8050e94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8050e96:	4b10      	ldr	r3, [pc, #64]	; (8050ed8 <tcp_handle_closepend+0x48>)
 8050e98:	681b      	ldr	r3, [r3, #0]
 8050e9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8050e9c:	e014      	b.n	8050ec8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8050e9e:	687b      	ldr	r3, [r7, #4]
 8050ea0:	68db      	ldr	r3, [r3, #12]
 8050ea2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8050ea4:	687b      	ldr	r3, [r7, #4]
 8050ea6:	8b5b      	ldrh	r3, [r3, #26]
 8050ea8:	f003 0308 	and.w	r3, r3, #8
 8050eac:	2b00      	cmp	r3, #0
 8050eae:	d009      	beq.n	8050ec4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8050eb0:	687b      	ldr	r3, [r7, #4]
 8050eb2:	8b5b      	ldrh	r3, [r3, #26]
 8050eb4:	f023 0308 	bic.w	r3, r3, #8
 8050eb8:	b29a      	uxth	r2, r3
 8050eba:	687b      	ldr	r3, [r7, #4]
 8050ebc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8050ebe:	6878      	ldr	r0, [r7, #4]
 8050ec0:	f7fe fe60 	bl	804fb84 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8050ec4:	683b      	ldr	r3, [r7, #0]
 8050ec6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8050ec8:	687b      	ldr	r3, [r7, #4]
 8050eca:	2b00      	cmp	r3, #0
 8050ecc:	d1e7      	bne.n	8050e9e <tcp_handle_closepend+0xe>
  }
}
 8050ece:	bf00      	nop
 8050ed0:	bf00      	nop
 8050ed2:	3708      	adds	r7, #8
 8050ed4:	46bd      	mov	sp, r7
 8050ed6:	bd80      	pop	{r7, pc}
 8050ed8:	2000b5d8 	.word	0x2000b5d8

08050edc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8050edc:	b580      	push	{r7, lr}
 8050ede:	b084      	sub	sp, #16
 8050ee0:	af00      	add	r7, sp, #0
 8050ee2:	4603      	mov	r3, r0
 8050ee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8050ee6:	2001      	movs	r0, #1
 8050ee8:	f7fd faf2 	bl	804e4d0 <memp_malloc>
 8050eec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8050eee:	68fb      	ldr	r3, [r7, #12]
 8050ef0:	2b00      	cmp	r3, #0
 8050ef2:	d126      	bne.n	8050f42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8050ef4:	f7ff ffcc 	bl	8050e90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8050ef8:	f7ff ff9a 	bl	8050e30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8050efc:	2001      	movs	r0, #1
 8050efe:	f7fd fae7 	bl	804e4d0 <memp_malloc>
 8050f02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8050f04:	68fb      	ldr	r3, [r7, #12]
 8050f06:	2b00      	cmp	r3, #0
 8050f08:	d11b      	bne.n	8050f42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8050f0a:	2009      	movs	r0, #9
 8050f0c:	f7ff ff46 	bl	8050d9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8050f10:	2001      	movs	r0, #1
 8050f12:	f7fd fadd 	bl	804e4d0 <memp_malloc>
 8050f16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8050f18:	68fb      	ldr	r3, [r7, #12]
 8050f1a:	2b00      	cmp	r3, #0
 8050f1c:	d111      	bne.n	8050f42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8050f1e:	2008      	movs	r0, #8
 8050f20:	f7ff ff3c 	bl	8050d9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8050f24:	2001      	movs	r0, #1
 8050f26:	f7fd fad3 	bl	804e4d0 <memp_malloc>
 8050f2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8050f2c:	68fb      	ldr	r3, [r7, #12]
 8050f2e:	2b00      	cmp	r3, #0
 8050f30:	d107      	bne.n	8050f42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8050f32:	79fb      	ldrb	r3, [r7, #7]
 8050f34:	4618      	mov	r0, r3
 8050f36:	f7ff fee3 	bl	8050d00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8050f3a:	2001      	movs	r0, #1
 8050f3c:	f7fd fac8 	bl	804e4d0 <memp_malloc>
 8050f40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8050f42:	68fb      	ldr	r3, [r7, #12]
 8050f44:	2b00      	cmp	r3, #0
 8050f46:	d03f      	beq.n	8050fc8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8050f48:	229c      	movs	r2, #156	; 0x9c
 8050f4a:	2100      	movs	r1, #0
 8050f4c:	68f8      	ldr	r0, [r7, #12]
 8050f4e:	f007 ff89 	bl	8058e64 <memset>
    pcb->prio = prio;
 8050f52:	68fb      	ldr	r3, [r7, #12]
 8050f54:	79fa      	ldrb	r2, [r7, #7]
 8050f56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8050f58:	68fb      	ldr	r3, [r7, #12]
 8050f5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8050f5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8050f62:	68fb      	ldr	r3, [r7, #12]
 8050f64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8050f68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8050f6a:	68fb      	ldr	r3, [r7, #12]
 8050f6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8050f6e:	68fb      	ldr	r3, [r7, #12]
 8050f70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8050f72:	68fb      	ldr	r3, [r7, #12]
 8050f74:	22ff      	movs	r2, #255	; 0xff
 8050f76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8050f78:	68fb      	ldr	r3, [r7, #12]
 8050f7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8050f7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8050f80:	68fb      	ldr	r3, [r7, #12]
 8050f82:	2206      	movs	r2, #6
 8050f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8050f88:	68fb      	ldr	r3, [r7, #12]
 8050f8a:	2206      	movs	r2, #6
 8050f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8050f8e:	68fb      	ldr	r3, [r7, #12]
 8050f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8050f94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8050f96:	68fb      	ldr	r3, [r7, #12]
 8050f98:	2201      	movs	r2, #1
 8050f9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8050f9e:	4b0d      	ldr	r3, [pc, #52]	; (8050fd4 <tcp_alloc+0xf8>)
 8050fa0:	681a      	ldr	r2, [r3, #0]
 8050fa2:	68fb      	ldr	r3, [r7, #12]
 8050fa4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8050fa6:	4b0c      	ldr	r3, [pc, #48]	; (8050fd8 <tcp_alloc+0xfc>)
 8050fa8:	781a      	ldrb	r2, [r3, #0]
 8050faa:	68fb      	ldr	r3, [r7, #12]
 8050fac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8050fae:	68fb      	ldr	r3, [r7, #12]
 8050fb0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8050fb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8050fb8:	68fb      	ldr	r3, [r7, #12]
 8050fba:	4a08      	ldr	r2, [pc, #32]	; (8050fdc <tcp_alloc+0x100>)
 8050fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8050fc0:	68fb      	ldr	r3, [r7, #12]
 8050fc2:	4a07      	ldr	r2, [pc, #28]	; (8050fe0 <tcp_alloc+0x104>)
 8050fc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8050fc8:	68fb      	ldr	r3, [r7, #12]
}
 8050fca:	4618      	mov	r0, r3
 8050fcc:	3710      	adds	r7, #16
 8050fce:	46bd      	mov	sp, r7
 8050fd0:	bd80      	pop	{r7, pc}
 8050fd2:	bf00      	nop
 8050fd4:	2000b5cc 	.word	0x2000b5cc
 8050fd8:	2000b5e2 	.word	0x2000b5e2
 8050fdc:	08050c95 	.word	0x08050c95
 8050fe0:	006ddd00 	.word	0x006ddd00

08050fe4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8050fe4:	b580      	push	{r7, lr}
 8050fe6:	b084      	sub	sp, #16
 8050fe8:	af00      	add	r7, sp, #0
 8050fea:	4603      	mov	r3, r0
 8050fec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8050fee:	2040      	movs	r0, #64	; 0x40
 8050ff0:	f7ff ff74 	bl	8050edc <tcp_alloc>
 8050ff4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8050ff6:	68fb      	ldr	r3, [r7, #12]
}
 8050ff8:	4618      	mov	r0, r3
 8050ffa:	3710      	adds	r7, #16
 8050ffc:	46bd      	mov	sp, r7
 8050ffe:	bd80      	pop	{r7, pc}

08051000 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8051000:	b480      	push	{r7}
 8051002:	b083      	sub	sp, #12
 8051004:	af00      	add	r7, sp, #0
 8051006:	6078      	str	r0, [r7, #4]
 8051008:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 805100a:	687b      	ldr	r3, [r7, #4]
 805100c:	2b00      	cmp	r3, #0
 805100e:	d002      	beq.n	8051016 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8051010:	687b      	ldr	r3, [r7, #4]
 8051012:	683a      	ldr	r2, [r7, #0]
 8051014:	611a      	str	r2, [r3, #16]
  }
}
 8051016:	bf00      	nop
 8051018:	370c      	adds	r7, #12
 805101a:	46bd      	mov	sp, r7
 805101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8051020:	4770      	bx	lr
	...

08051024 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8051024:	b580      	push	{r7, lr}
 8051026:	b082      	sub	sp, #8
 8051028:	af00      	add	r7, sp, #0
 805102a:	6078      	str	r0, [r7, #4]
 805102c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 805102e:	687b      	ldr	r3, [r7, #4]
 8051030:	2b00      	cmp	r3, #0
 8051032:	d00e      	beq.n	8051052 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8051034:	687b      	ldr	r3, [r7, #4]
 8051036:	7d1b      	ldrb	r3, [r3, #20]
 8051038:	2b01      	cmp	r3, #1
 805103a:	d106      	bne.n	805104a <tcp_recv+0x26>
 805103c:	4b07      	ldr	r3, [pc, #28]	; (805105c <tcp_recv+0x38>)
 805103e:	f240 72df 	movw	r2, #2015	; 0x7df
 8051042:	4907      	ldr	r1, [pc, #28]	; (8051060 <tcp_recv+0x3c>)
 8051044:	4807      	ldr	r0, [pc, #28]	; (8051064 <tcp_recv+0x40>)
 8051046:	f007 fff5 	bl	8059034 <iprintf>
    pcb->recv = recv;
 805104a:	687b      	ldr	r3, [r7, #4]
 805104c:	683a      	ldr	r2, [r7, #0]
 805104e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8051052:	bf00      	nop
 8051054:	3708      	adds	r7, #8
 8051056:	46bd      	mov	sp, r7
 8051058:	bd80      	pop	{r7, pc}
 805105a:	bf00      	nop
 805105c:	0805b8dc 	.word	0x0805b8dc
 8051060:	0805be78 	.word	0x0805be78
 8051064:	0805b920 	.word	0x0805b920

08051068 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8051068:	b580      	push	{r7, lr}
 805106a:	b082      	sub	sp, #8
 805106c:	af00      	add	r7, sp, #0
 805106e:	6078      	str	r0, [r7, #4]
 8051070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8051072:	687b      	ldr	r3, [r7, #4]
 8051074:	2b00      	cmp	r3, #0
 8051076:	d00e      	beq.n	8051096 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8051078:	687b      	ldr	r3, [r7, #4]
 805107a:	7d1b      	ldrb	r3, [r3, #20]
 805107c:	2b01      	cmp	r3, #1
 805107e:	d106      	bne.n	805108e <tcp_sent+0x26>
 8051080:	4b07      	ldr	r3, [pc, #28]	; (80510a0 <tcp_sent+0x38>)
 8051082:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8051086:	4907      	ldr	r1, [pc, #28]	; (80510a4 <tcp_sent+0x3c>)
 8051088:	4807      	ldr	r0, [pc, #28]	; (80510a8 <tcp_sent+0x40>)
 805108a:	f007 ffd3 	bl	8059034 <iprintf>
    pcb->sent = sent;
 805108e:	687b      	ldr	r3, [r7, #4]
 8051090:	683a      	ldr	r2, [r7, #0]
 8051092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8051096:	bf00      	nop
 8051098:	3708      	adds	r7, #8
 805109a:	46bd      	mov	sp, r7
 805109c:	bd80      	pop	{r7, pc}
 805109e:	bf00      	nop
 80510a0:	0805b8dc 	.word	0x0805b8dc
 80510a4:	0805bea0 	.word	0x0805bea0
 80510a8:	0805b920 	.word	0x0805b920

080510ac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80510ac:	b580      	push	{r7, lr}
 80510ae:	b082      	sub	sp, #8
 80510b0:	af00      	add	r7, sp, #0
 80510b2:	6078      	str	r0, [r7, #4]
 80510b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80510b6:	687b      	ldr	r3, [r7, #4]
 80510b8:	2b00      	cmp	r3, #0
 80510ba:	d00e      	beq.n	80510da <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80510bc:	687b      	ldr	r3, [r7, #4]
 80510be:	7d1b      	ldrb	r3, [r3, #20]
 80510c0:	2b01      	cmp	r3, #1
 80510c2:	d106      	bne.n	80510d2 <tcp_err+0x26>
 80510c4:	4b07      	ldr	r3, [pc, #28]	; (80510e4 <tcp_err+0x38>)
 80510c6:	f640 020d 	movw	r2, #2061	; 0x80d
 80510ca:	4907      	ldr	r1, [pc, #28]	; (80510e8 <tcp_err+0x3c>)
 80510cc:	4807      	ldr	r0, [pc, #28]	; (80510ec <tcp_err+0x40>)
 80510ce:	f007 ffb1 	bl	8059034 <iprintf>
    pcb->errf = err;
 80510d2:	687b      	ldr	r3, [r7, #4]
 80510d4:	683a      	ldr	r2, [r7, #0]
 80510d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80510da:	bf00      	nop
 80510dc:	3708      	adds	r7, #8
 80510de:	46bd      	mov	sp, r7
 80510e0:	bd80      	pop	{r7, pc}
 80510e2:	bf00      	nop
 80510e4:	0805b8dc 	.word	0x0805b8dc
 80510e8:	0805bec8 	.word	0x0805bec8
 80510ec:	0805b920 	.word	0x0805b920

080510f0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80510f0:	b480      	push	{r7}
 80510f2:	b085      	sub	sp, #20
 80510f4:	af00      	add	r7, sp, #0
 80510f6:	6078      	str	r0, [r7, #4]
 80510f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80510fa:	687b      	ldr	r3, [r7, #4]
 80510fc:	2b00      	cmp	r3, #0
 80510fe:	d008      	beq.n	8051112 <tcp_accept+0x22>
 8051100:	687b      	ldr	r3, [r7, #4]
 8051102:	7d1b      	ldrb	r3, [r3, #20]
 8051104:	2b01      	cmp	r3, #1
 8051106:	d104      	bne.n	8051112 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8051108:	687b      	ldr	r3, [r7, #4]
 805110a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 805110c:	68fb      	ldr	r3, [r7, #12]
 805110e:	683a      	ldr	r2, [r7, #0]
 8051110:	619a      	str	r2, [r3, #24]
  }
}
 8051112:	bf00      	nop
 8051114:	3714      	adds	r7, #20
 8051116:	46bd      	mov	sp, r7
 8051118:	f85d 7b04 	ldr.w	r7, [sp], #4
 805111c:	4770      	bx	lr
	...

08051120 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8051120:	b580      	push	{r7, lr}
 8051122:	b084      	sub	sp, #16
 8051124:	af00      	add	r7, sp, #0
 8051126:	60f8      	str	r0, [r7, #12]
 8051128:	60b9      	str	r1, [r7, #8]
 805112a:	4613      	mov	r3, r2
 805112c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 805112e:	68fb      	ldr	r3, [r7, #12]
 8051130:	2b00      	cmp	r3, #0
 8051132:	d107      	bne.n	8051144 <tcp_poll+0x24>
 8051134:	4b0e      	ldr	r3, [pc, #56]	; (8051170 <tcp_poll+0x50>)
 8051136:	f640 023d 	movw	r2, #2109	; 0x83d
 805113a:	490e      	ldr	r1, [pc, #56]	; (8051174 <tcp_poll+0x54>)
 805113c:	480e      	ldr	r0, [pc, #56]	; (8051178 <tcp_poll+0x58>)
 805113e:	f007 ff79 	bl	8059034 <iprintf>
 8051142:	e011      	b.n	8051168 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8051144:	68fb      	ldr	r3, [r7, #12]
 8051146:	7d1b      	ldrb	r3, [r3, #20]
 8051148:	2b01      	cmp	r3, #1
 805114a:	d106      	bne.n	805115a <tcp_poll+0x3a>
 805114c:	4b08      	ldr	r3, [pc, #32]	; (8051170 <tcp_poll+0x50>)
 805114e:	f640 023e 	movw	r2, #2110	; 0x83e
 8051152:	490a      	ldr	r1, [pc, #40]	; (805117c <tcp_poll+0x5c>)
 8051154:	4808      	ldr	r0, [pc, #32]	; (8051178 <tcp_poll+0x58>)
 8051156:	f007 ff6d 	bl	8059034 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 805115a:	68fb      	ldr	r3, [r7, #12]
 805115c:	68ba      	ldr	r2, [r7, #8]
 805115e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8051162:	68fb      	ldr	r3, [r7, #12]
 8051164:	79fa      	ldrb	r2, [r7, #7]
 8051166:	775a      	strb	r2, [r3, #29]
}
 8051168:	3710      	adds	r7, #16
 805116a:	46bd      	mov	sp, r7
 805116c:	bd80      	pop	{r7, pc}
 805116e:	bf00      	nop
 8051170:	0805b8dc 	.word	0x0805b8dc
 8051174:	0805bef0 	.word	0x0805bef0
 8051178:	0805b920 	.word	0x0805b920
 805117c:	0805bf08 	.word	0x0805bf08

08051180 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8051180:	b580      	push	{r7, lr}
 8051182:	b082      	sub	sp, #8
 8051184:	af00      	add	r7, sp, #0
 8051186:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8051188:	687b      	ldr	r3, [r7, #4]
 805118a:	2b00      	cmp	r3, #0
 805118c:	d107      	bne.n	805119e <tcp_pcb_purge+0x1e>
 805118e:	4b21      	ldr	r3, [pc, #132]	; (8051214 <tcp_pcb_purge+0x94>)
 8051190:	f640 0251 	movw	r2, #2129	; 0x851
 8051194:	4920      	ldr	r1, [pc, #128]	; (8051218 <tcp_pcb_purge+0x98>)
 8051196:	4821      	ldr	r0, [pc, #132]	; (805121c <tcp_pcb_purge+0x9c>)
 8051198:	f007 ff4c 	bl	8059034 <iprintf>
 805119c:	e037      	b.n	805120e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 805119e:	687b      	ldr	r3, [r7, #4]
 80511a0:	7d1b      	ldrb	r3, [r3, #20]
 80511a2:	2b00      	cmp	r3, #0
 80511a4:	d033      	beq.n	805120e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80511a6:	687b      	ldr	r3, [r7, #4]
 80511a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80511aa:	2b0a      	cmp	r3, #10
 80511ac:	d02f      	beq.n	805120e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80511ae:	687b      	ldr	r3, [r7, #4]
 80511b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80511b2:	2b01      	cmp	r3, #1
 80511b4:	d02b      	beq.n	805120e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80511b6:	687b      	ldr	r3, [r7, #4]
 80511b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80511ba:	2b00      	cmp	r3, #0
 80511bc:	d007      	beq.n	80511ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80511be:	687b      	ldr	r3, [r7, #4]
 80511c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80511c2:	4618      	mov	r0, r3
 80511c4:	f7fe f89e 	bl	804f304 <pbuf_free>
      pcb->refused_data = NULL;
 80511c8:	687b      	ldr	r3, [r7, #4]
 80511ca:	2200      	movs	r2, #0
 80511cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80511ce:	687b      	ldr	r3, [r7, #4]
 80511d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80511d2:	2b00      	cmp	r3, #0
 80511d4:	d002      	beq.n	80511dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80511d6:	6878      	ldr	r0, [r7, #4]
 80511d8:	f000 f986 	bl	80514e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80511dc:	687b      	ldr	r3, [r7, #4]
 80511de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80511e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80511e4:	687b      	ldr	r3, [r7, #4]
 80511e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80511e8:	4618      	mov	r0, r3
 80511ea:	f7ff fcf9 	bl	8050be0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80511ee:	687b      	ldr	r3, [r7, #4]
 80511f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80511f2:	4618      	mov	r0, r3
 80511f4:	f7ff fcf4 	bl	8050be0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80511f8:	687b      	ldr	r3, [r7, #4]
 80511fa:	2200      	movs	r2, #0
 80511fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80511fe:	687b      	ldr	r3, [r7, #4]
 8051200:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8051202:	687b      	ldr	r3, [r7, #4]
 8051204:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8051206:	687b      	ldr	r3, [r7, #4]
 8051208:	2200      	movs	r2, #0
 805120a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 805120e:	3708      	adds	r7, #8
 8051210:	46bd      	mov	sp, r7
 8051212:	bd80      	pop	{r7, pc}
 8051214:	0805b8dc 	.word	0x0805b8dc
 8051218:	0805bf28 	.word	0x0805bf28
 805121c:	0805b920 	.word	0x0805b920

08051220 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8051220:	b580      	push	{r7, lr}
 8051222:	b084      	sub	sp, #16
 8051224:	af00      	add	r7, sp, #0
 8051226:	6078      	str	r0, [r7, #4]
 8051228:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 805122a:	683b      	ldr	r3, [r7, #0]
 805122c:	2b00      	cmp	r3, #0
 805122e:	d106      	bne.n	805123e <tcp_pcb_remove+0x1e>
 8051230:	4b3e      	ldr	r3, [pc, #248]	; (805132c <tcp_pcb_remove+0x10c>)
 8051232:	f640 0283 	movw	r2, #2179	; 0x883
 8051236:	493e      	ldr	r1, [pc, #248]	; (8051330 <tcp_pcb_remove+0x110>)
 8051238:	483e      	ldr	r0, [pc, #248]	; (8051334 <tcp_pcb_remove+0x114>)
 805123a:	f007 fefb 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 805123e:	687b      	ldr	r3, [r7, #4]
 8051240:	2b00      	cmp	r3, #0
 8051242:	d106      	bne.n	8051252 <tcp_pcb_remove+0x32>
 8051244:	4b39      	ldr	r3, [pc, #228]	; (805132c <tcp_pcb_remove+0x10c>)
 8051246:	f640 0284 	movw	r2, #2180	; 0x884
 805124a:	493b      	ldr	r1, [pc, #236]	; (8051338 <tcp_pcb_remove+0x118>)
 805124c:	4839      	ldr	r0, [pc, #228]	; (8051334 <tcp_pcb_remove+0x114>)
 805124e:	f007 fef1 	bl	8059034 <iprintf>

  TCP_RMV(pcblist, pcb);
 8051252:	687b      	ldr	r3, [r7, #4]
 8051254:	681b      	ldr	r3, [r3, #0]
 8051256:	683a      	ldr	r2, [r7, #0]
 8051258:	429a      	cmp	r2, r3
 805125a:	d105      	bne.n	8051268 <tcp_pcb_remove+0x48>
 805125c:	687b      	ldr	r3, [r7, #4]
 805125e:	681b      	ldr	r3, [r3, #0]
 8051260:	68da      	ldr	r2, [r3, #12]
 8051262:	687b      	ldr	r3, [r7, #4]
 8051264:	601a      	str	r2, [r3, #0]
 8051266:	e013      	b.n	8051290 <tcp_pcb_remove+0x70>
 8051268:	687b      	ldr	r3, [r7, #4]
 805126a:	681b      	ldr	r3, [r3, #0]
 805126c:	60fb      	str	r3, [r7, #12]
 805126e:	e00c      	b.n	805128a <tcp_pcb_remove+0x6a>
 8051270:	68fb      	ldr	r3, [r7, #12]
 8051272:	68db      	ldr	r3, [r3, #12]
 8051274:	683a      	ldr	r2, [r7, #0]
 8051276:	429a      	cmp	r2, r3
 8051278:	d104      	bne.n	8051284 <tcp_pcb_remove+0x64>
 805127a:	683b      	ldr	r3, [r7, #0]
 805127c:	68da      	ldr	r2, [r3, #12]
 805127e:	68fb      	ldr	r3, [r7, #12]
 8051280:	60da      	str	r2, [r3, #12]
 8051282:	e005      	b.n	8051290 <tcp_pcb_remove+0x70>
 8051284:	68fb      	ldr	r3, [r7, #12]
 8051286:	68db      	ldr	r3, [r3, #12]
 8051288:	60fb      	str	r3, [r7, #12]
 805128a:	68fb      	ldr	r3, [r7, #12]
 805128c:	2b00      	cmp	r3, #0
 805128e:	d1ef      	bne.n	8051270 <tcp_pcb_remove+0x50>
 8051290:	683b      	ldr	r3, [r7, #0]
 8051292:	2200      	movs	r2, #0
 8051294:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8051296:	6838      	ldr	r0, [r7, #0]
 8051298:	f7ff ff72 	bl	8051180 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 805129c:	683b      	ldr	r3, [r7, #0]
 805129e:	7d1b      	ldrb	r3, [r3, #20]
 80512a0:	2b0a      	cmp	r3, #10
 80512a2:	d013      	beq.n	80512cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80512a4:	683b      	ldr	r3, [r7, #0]
 80512a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80512a8:	2b01      	cmp	r3, #1
 80512aa:	d00f      	beq.n	80512cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80512ac:	683b      	ldr	r3, [r7, #0]
 80512ae:	8b5b      	ldrh	r3, [r3, #26]
 80512b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80512b4:	2b00      	cmp	r3, #0
 80512b6:	d009      	beq.n	80512cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80512b8:	683b      	ldr	r3, [r7, #0]
 80512ba:	8b5b      	ldrh	r3, [r3, #26]
 80512bc:	f043 0302 	orr.w	r3, r3, #2
 80512c0:	b29a      	uxth	r2, r3
 80512c2:	683b      	ldr	r3, [r7, #0]
 80512c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80512c6:	6838      	ldr	r0, [r7, #0]
 80512c8:	f003 fbc6 	bl	8054a58 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80512cc:	683b      	ldr	r3, [r7, #0]
 80512ce:	7d1b      	ldrb	r3, [r3, #20]
 80512d0:	2b01      	cmp	r3, #1
 80512d2:	d020      	beq.n	8051316 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80512d4:	683b      	ldr	r3, [r7, #0]
 80512d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80512d8:	2b00      	cmp	r3, #0
 80512da:	d006      	beq.n	80512ea <tcp_pcb_remove+0xca>
 80512dc:	4b13      	ldr	r3, [pc, #76]	; (805132c <tcp_pcb_remove+0x10c>)
 80512de:	f640 0293 	movw	r2, #2195	; 0x893
 80512e2:	4916      	ldr	r1, [pc, #88]	; (805133c <tcp_pcb_remove+0x11c>)
 80512e4:	4813      	ldr	r0, [pc, #76]	; (8051334 <tcp_pcb_remove+0x114>)
 80512e6:	f007 fea5 	bl	8059034 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80512ea:	683b      	ldr	r3, [r7, #0]
 80512ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80512ee:	2b00      	cmp	r3, #0
 80512f0:	d006      	beq.n	8051300 <tcp_pcb_remove+0xe0>
 80512f2:	4b0e      	ldr	r3, [pc, #56]	; (805132c <tcp_pcb_remove+0x10c>)
 80512f4:	f640 0294 	movw	r2, #2196	; 0x894
 80512f8:	4911      	ldr	r1, [pc, #68]	; (8051340 <tcp_pcb_remove+0x120>)
 80512fa:	480e      	ldr	r0, [pc, #56]	; (8051334 <tcp_pcb_remove+0x114>)
 80512fc:	f007 fe9a 	bl	8059034 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8051300:	683b      	ldr	r3, [r7, #0]
 8051302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8051304:	2b00      	cmp	r3, #0
 8051306:	d006      	beq.n	8051316 <tcp_pcb_remove+0xf6>
 8051308:	4b08      	ldr	r3, [pc, #32]	; (805132c <tcp_pcb_remove+0x10c>)
 805130a:	f640 0296 	movw	r2, #2198	; 0x896
 805130e:	490d      	ldr	r1, [pc, #52]	; (8051344 <tcp_pcb_remove+0x124>)
 8051310:	4808      	ldr	r0, [pc, #32]	; (8051334 <tcp_pcb_remove+0x114>)
 8051312:	f007 fe8f 	bl	8059034 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8051316:	683b      	ldr	r3, [r7, #0]
 8051318:	2200      	movs	r2, #0
 805131a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 805131c:	683b      	ldr	r3, [r7, #0]
 805131e:	2200      	movs	r2, #0
 8051320:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8051322:	bf00      	nop
 8051324:	3710      	adds	r7, #16
 8051326:	46bd      	mov	sp, r7
 8051328:	bd80      	pop	{r7, pc}
 805132a:	bf00      	nop
 805132c:	0805b8dc 	.word	0x0805b8dc
 8051330:	0805bf44 	.word	0x0805bf44
 8051334:	0805b920 	.word	0x0805b920
 8051338:	0805bf60 	.word	0x0805bf60
 805133c:	0805bf80 	.word	0x0805bf80
 8051340:	0805bf98 	.word	0x0805bf98
 8051344:	0805bfb4 	.word	0x0805bfb4

08051348 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8051348:	b580      	push	{r7, lr}
 805134a:	b082      	sub	sp, #8
 805134c:	af00      	add	r7, sp, #0
 805134e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8051350:	687b      	ldr	r3, [r7, #4]
 8051352:	2b00      	cmp	r3, #0
 8051354:	d106      	bne.n	8051364 <tcp_next_iss+0x1c>
 8051356:	4b0a      	ldr	r3, [pc, #40]	; (8051380 <tcp_next_iss+0x38>)
 8051358:	f640 02af 	movw	r2, #2223	; 0x8af
 805135c:	4909      	ldr	r1, [pc, #36]	; (8051384 <tcp_next_iss+0x3c>)
 805135e:	480a      	ldr	r0, [pc, #40]	; (8051388 <tcp_next_iss+0x40>)
 8051360:	f007 fe68 	bl	8059034 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8051364:	4b09      	ldr	r3, [pc, #36]	; (805138c <tcp_next_iss+0x44>)
 8051366:	681a      	ldr	r2, [r3, #0]
 8051368:	4b09      	ldr	r3, [pc, #36]	; (8051390 <tcp_next_iss+0x48>)
 805136a:	681b      	ldr	r3, [r3, #0]
 805136c:	4413      	add	r3, r2
 805136e:	4a07      	ldr	r2, [pc, #28]	; (805138c <tcp_next_iss+0x44>)
 8051370:	6013      	str	r3, [r2, #0]
  return iss;
 8051372:	4b06      	ldr	r3, [pc, #24]	; (805138c <tcp_next_iss+0x44>)
 8051374:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8051376:	4618      	mov	r0, r3
 8051378:	3708      	adds	r7, #8
 805137a:	46bd      	mov	sp, r7
 805137c:	bd80      	pop	{r7, pc}
 805137e:	bf00      	nop
 8051380:	0805b8dc 	.word	0x0805b8dc
 8051384:	0805bfcc 	.word	0x0805bfcc
 8051388:	0805b920 	.word	0x0805b920
 805138c:	2000002c 	.word	0x2000002c
 8051390:	2000b5cc 	.word	0x2000b5cc

08051394 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8051394:	b580      	push	{r7, lr}
 8051396:	b086      	sub	sp, #24
 8051398:	af00      	add	r7, sp, #0
 805139a:	4603      	mov	r3, r0
 805139c:	60b9      	str	r1, [r7, #8]
 805139e:	607a      	str	r2, [r7, #4]
 80513a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80513a2:	687b      	ldr	r3, [r7, #4]
 80513a4:	2b00      	cmp	r3, #0
 80513a6:	d106      	bne.n	80513b6 <tcp_eff_send_mss_netif+0x22>
 80513a8:	4b14      	ldr	r3, [pc, #80]	; (80513fc <tcp_eff_send_mss_netif+0x68>)
 80513aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80513ae:	4914      	ldr	r1, [pc, #80]	; (8051400 <tcp_eff_send_mss_netif+0x6c>)
 80513b0:	4814      	ldr	r0, [pc, #80]	; (8051404 <tcp_eff_send_mss_netif+0x70>)
 80513b2:	f007 fe3f 	bl	8059034 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80513b6:	68bb      	ldr	r3, [r7, #8]
 80513b8:	2b00      	cmp	r3, #0
 80513ba:	d101      	bne.n	80513c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80513bc:	89fb      	ldrh	r3, [r7, #14]
 80513be:	e019      	b.n	80513f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80513c0:	68bb      	ldr	r3, [r7, #8]
 80513c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80513c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80513c6:	8afb      	ldrh	r3, [r7, #22]
 80513c8:	2b00      	cmp	r3, #0
 80513ca:	d012      	beq.n	80513f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80513cc:	2328      	movs	r3, #40	; 0x28
 80513ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80513d0:	8afa      	ldrh	r2, [r7, #22]
 80513d2:	8abb      	ldrh	r3, [r7, #20]
 80513d4:	429a      	cmp	r2, r3
 80513d6:	d904      	bls.n	80513e2 <tcp_eff_send_mss_netif+0x4e>
 80513d8:	8afa      	ldrh	r2, [r7, #22]
 80513da:	8abb      	ldrh	r3, [r7, #20]
 80513dc:	1ad3      	subs	r3, r2, r3
 80513de:	b29b      	uxth	r3, r3
 80513e0:	e000      	b.n	80513e4 <tcp_eff_send_mss_netif+0x50>
 80513e2:	2300      	movs	r3, #0
 80513e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80513e6:	8a7a      	ldrh	r2, [r7, #18]
 80513e8:	89fb      	ldrh	r3, [r7, #14]
 80513ea:	4293      	cmp	r3, r2
 80513ec:	bf28      	it	cs
 80513ee:	4613      	movcs	r3, r2
 80513f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80513f2:	89fb      	ldrh	r3, [r7, #14]
}
 80513f4:	4618      	mov	r0, r3
 80513f6:	3718      	adds	r7, #24
 80513f8:	46bd      	mov	sp, r7
 80513fa:	bd80      	pop	{r7, pc}
 80513fc:	0805b8dc 	.word	0x0805b8dc
 8051400:	0805bfe8 	.word	0x0805bfe8
 8051404:	0805b920 	.word	0x0805b920

08051408 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8051408:	b580      	push	{r7, lr}
 805140a:	b084      	sub	sp, #16
 805140c:	af00      	add	r7, sp, #0
 805140e:	6078      	str	r0, [r7, #4]
 8051410:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8051412:	683b      	ldr	r3, [r7, #0]
 8051414:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8051416:	687b      	ldr	r3, [r7, #4]
 8051418:	2b00      	cmp	r3, #0
 805141a:	d119      	bne.n	8051450 <tcp_netif_ip_addr_changed_pcblist+0x48>
 805141c:	4b10      	ldr	r3, [pc, #64]	; (8051460 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 805141e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8051422:	4910      	ldr	r1, [pc, #64]	; (8051464 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8051424:	4810      	ldr	r0, [pc, #64]	; (8051468 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8051426:	f007 fe05 	bl	8059034 <iprintf>

  while (pcb != NULL) {
 805142a:	e011      	b.n	8051450 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 805142c:	68fb      	ldr	r3, [r7, #12]
 805142e:	681a      	ldr	r2, [r3, #0]
 8051430:	687b      	ldr	r3, [r7, #4]
 8051432:	681b      	ldr	r3, [r3, #0]
 8051434:	429a      	cmp	r2, r3
 8051436:	d108      	bne.n	805144a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8051438:	68fb      	ldr	r3, [r7, #12]
 805143a:	68db      	ldr	r3, [r3, #12]
 805143c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 805143e:	68f8      	ldr	r0, [r7, #12]
 8051440:	f7fe fd50 	bl	804fee4 <tcp_abort>
      pcb = next;
 8051444:	68bb      	ldr	r3, [r7, #8]
 8051446:	60fb      	str	r3, [r7, #12]
 8051448:	e002      	b.n	8051450 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 805144a:	68fb      	ldr	r3, [r7, #12]
 805144c:	68db      	ldr	r3, [r3, #12]
 805144e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8051450:	68fb      	ldr	r3, [r7, #12]
 8051452:	2b00      	cmp	r3, #0
 8051454:	d1ea      	bne.n	805142c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8051456:	bf00      	nop
 8051458:	bf00      	nop
 805145a:	3710      	adds	r7, #16
 805145c:	46bd      	mov	sp, r7
 805145e:	bd80      	pop	{r7, pc}
 8051460:	0805b8dc 	.word	0x0805b8dc
 8051464:	0805c010 	.word	0x0805c010
 8051468:	0805b920 	.word	0x0805b920

0805146c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 805146c:	b580      	push	{r7, lr}
 805146e:	b084      	sub	sp, #16
 8051470:	af00      	add	r7, sp, #0
 8051472:	6078      	str	r0, [r7, #4]
 8051474:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8051476:	687b      	ldr	r3, [r7, #4]
 8051478:	2b00      	cmp	r3, #0
 805147a:	d02a      	beq.n	80514d2 <tcp_netif_ip_addr_changed+0x66>
 805147c:	687b      	ldr	r3, [r7, #4]
 805147e:	681b      	ldr	r3, [r3, #0]
 8051480:	2b00      	cmp	r3, #0
 8051482:	d026      	beq.n	80514d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8051484:	4b15      	ldr	r3, [pc, #84]	; (80514dc <tcp_netif_ip_addr_changed+0x70>)
 8051486:	681b      	ldr	r3, [r3, #0]
 8051488:	4619      	mov	r1, r3
 805148a:	6878      	ldr	r0, [r7, #4]
 805148c:	f7ff ffbc 	bl	8051408 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8051490:	4b13      	ldr	r3, [pc, #76]	; (80514e0 <tcp_netif_ip_addr_changed+0x74>)
 8051492:	681b      	ldr	r3, [r3, #0]
 8051494:	4619      	mov	r1, r3
 8051496:	6878      	ldr	r0, [r7, #4]
 8051498:	f7ff ffb6 	bl	8051408 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 805149c:	683b      	ldr	r3, [r7, #0]
 805149e:	2b00      	cmp	r3, #0
 80514a0:	d017      	beq.n	80514d2 <tcp_netif_ip_addr_changed+0x66>
 80514a2:	683b      	ldr	r3, [r7, #0]
 80514a4:	681b      	ldr	r3, [r3, #0]
 80514a6:	2b00      	cmp	r3, #0
 80514a8:	d013      	beq.n	80514d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80514aa:	4b0e      	ldr	r3, [pc, #56]	; (80514e4 <tcp_netif_ip_addr_changed+0x78>)
 80514ac:	681b      	ldr	r3, [r3, #0]
 80514ae:	60fb      	str	r3, [r7, #12]
 80514b0:	e00c      	b.n	80514cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80514b2:	68fb      	ldr	r3, [r7, #12]
 80514b4:	681a      	ldr	r2, [r3, #0]
 80514b6:	687b      	ldr	r3, [r7, #4]
 80514b8:	681b      	ldr	r3, [r3, #0]
 80514ba:	429a      	cmp	r2, r3
 80514bc:	d103      	bne.n	80514c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80514be:	683b      	ldr	r3, [r7, #0]
 80514c0:	681a      	ldr	r2, [r3, #0]
 80514c2:	68fb      	ldr	r3, [r7, #12]
 80514c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80514c6:	68fb      	ldr	r3, [r7, #12]
 80514c8:	68db      	ldr	r3, [r3, #12]
 80514ca:	60fb      	str	r3, [r7, #12]
 80514cc:	68fb      	ldr	r3, [r7, #12]
 80514ce:	2b00      	cmp	r3, #0
 80514d0:	d1ef      	bne.n	80514b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80514d2:	bf00      	nop
 80514d4:	3710      	adds	r7, #16
 80514d6:	46bd      	mov	sp, r7
 80514d8:	bd80      	pop	{r7, pc}
 80514da:	bf00      	nop
 80514dc:	2000b5d8 	.word	0x2000b5d8
 80514e0:	2000b5d0 	.word	0x2000b5d0
 80514e4:	2000b5d4 	.word	0x2000b5d4

080514e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80514e8:	b580      	push	{r7, lr}
 80514ea:	b082      	sub	sp, #8
 80514ec:	af00      	add	r7, sp, #0
 80514ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80514f0:	687b      	ldr	r3, [r7, #4]
 80514f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80514f4:	2b00      	cmp	r3, #0
 80514f6:	d007      	beq.n	8051508 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80514f8:	687b      	ldr	r3, [r7, #4]
 80514fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80514fc:	4618      	mov	r0, r3
 80514fe:	f7ff fb6f 	bl	8050be0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8051502:	687b      	ldr	r3, [r7, #4]
 8051504:	2200      	movs	r2, #0
 8051506:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8051508:	bf00      	nop
 805150a:	3708      	adds	r7, #8
 805150c:	46bd      	mov	sp, r7
 805150e:	bd80      	pop	{r7, pc}

08051510 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8051510:	b590      	push	{r4, r7, lr}
 8051512:	b08d      	sub	sp, #52	; 0x34
 8051514:	af04      	add	r7, sp, #16
 8051516:	6078      	str	r0, [r7, #4]
 8051518:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 805151a:	687b      	ldr	r3, [r7, #4]
 805151c:	2b00      	cmp	r3, #0
 805151e:	d105      	bne.n	805152c <tcp_input+0x1c>
 8051520:	4b9b      	ldr	r3, [pc, #620]	; (8051790 <tcp_input+0x280>)
 8051522:	2283      	movs	r2, #131	; 0x83
 8051524:	499b      	ldr	r1, [pc, #620]	; (8051794 <tcp_input+0x284>)
 8051526:	489c      	ldr	r0, [pc, #624]	; (8051798 <tcp_input+0x288>)
 8051528:	f007 fd84 	bl	8059034 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 805152c:	687b      	ldr	r3, [r7, #4]
 805152e:	685b      	ldr	r3, [r3, #4]
 8051530:	4a9a      	ldr	r2, [pc, #616]	; (805179c <tcp_input+0x28c>)
 8051532:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8051534:	687b      	ldr	r3, [r7, #4]
 8051536:	895b      	ldrh	r3, [r3, #10]
 8051538:	2b13      	cmp	r3, #19
 805153a:	f240 83d1 	bls.w	8051ce0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 805153e:	4b98      	ldr	r3, [pc, #608]	; (80517a0 <tcp_input+0x290>)
 8051540:	695b      	ldr	r3, [r3, #20]
 8051542:	4a97      	ldr	r2, [pc, #604]	; (80517a0 <tcp_input+0x290>)
 8051544:	6812      	ldr	r2, [r2, #0]
 8051546:	4611      	mov	r1, r2
 8051548:	4618      	mov	r0, r3
 805154a:	f006 f9e5 	bl	8057918 <ip4_addr_isbroadcast_u32>
 805154e:	4603      	mov	r3, r0
 8051550:	2b00      	cmp	r3, #0
 8051552:	f040 83c7 	bne.w	8051ce4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8051556:	4b92      	ldr	r3, [pc, #584]	; (80517a0 <tcp_input+0x290>)
 8051558:	695b      	ldr	r3, [r3, #20]
 805155a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 805155e:	2be0      	cmp	r3, #224	; 0xe0
 8051560:	f000 83c0 	beq.w	8051ce4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8051564:	4b8d      	ldr	r3, [pc, #564]	; (805179c <tcp_input+0x28c>)
 8051566:	681b      	ldr	r3, [r3, #0]
 8051568:	899b      	ldrh	r3, [r3, #12]
 805156a:	b29b      	uxth	r3, r3
 805156c:	4618      	mov	r0, r3
 805156e:	f7fc fad7 	bl	804db20 <lwip_htons>
 8051572:	4603      	mov	r3, r0
 8051574:	0b1b      	lsrs	r3, r3, #12
 8051576:	b29b      	uxth	r3, r3
 8051578:	b2db      	uxtb	r3, r3
 805157a:	009b      	lsls	r3, r3, #2
 805157c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 805157e:	7cbb      	ldrb	r3, [r7, #18]
 8051580:	2b13      	cmp	r3, #19
 8051582:	f240 83b1 	bls.w	8051ce8 <tcp_input+0x7d8>
 8051586:	7cbb      	ldrb	r3, [r7, #18]
 8051588:	b29a      	uxth	r2, r3
 805158a:	687b      	ldr	r3, [r7, #4]
 805158c:	891b      	ldrh	r3, [r3, #8]
 805158e:	429a      	cmp	r2, r3
 8051590:	f200 83aa 	bhi.w	8051ce8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8051594:	7cbb      	ldrb	r3, [r7, #18]
 8051596:	b29b      	uxth	r3, r3
 8051598:	3b14      	subs	r3, #20
 805159a:	b29a      	uxth	r2, r3
 805159c:	4b81      	ldr	r3, [pc, #516]	; (80517a4 <tcp_input+0x294>)
 805159e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80515a0:	4b81      	ldr	r3, [pc, #516]	; (80517a8 <tcp_input+0x298>)
 80515a2:	2200      	movs	r2, #0
 80515a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80515a6:	687b      	ldr	r3, [r7, #4]
 80515a8:	895a      	ldrh	r2, [r3, #10]
 80515aa:	7cbb      	ldrb	r3, [r7, #18]
 80515ac:	b29b      	uxth	r3, r3
 80515ae:	429a      	cmp	r2, r3
 80515b0:	d309      	bcc.n	80515c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80515b2:	4b7c      	ldr	r3, [pc, #496]	; (80517a4 <tcp_input+0x294>)
 80515b4:	881a      	ldrh	r2, [r3, #0]
 80515b6:	4b7d      	ldr	r3, [pc, #500]	; (80517ac <tcp_input+0x29c>)
 80515b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80515ba:	7cbb      	ldrb	r3, [r7, #18]
 80515bc:	4619      	mov	r1, r3
 80515be:	6878      	ldr	r0, [r7, #4]
 80515c0:	f7fd fe1a 	bl	804f1f8 <pbuf_remove_header>
 80515c4:	e04e      	b.n	8051664 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80515c6:	687b      	ldr	r3, [r7, #4]
 80515c8:	681b      	ldr	r3, [r3, #0]
 80515ca:	2b00      	cmp	r3, #0
 80515cc:	d105      	bne.n	80515da <tcp_input+0xca>
 80515ce:	4b70      	ldr	r3, [pc, #448]	; (8051790 <tcp_input+0x280>)
 80515d0:	22c2      	movs	r2, #194	; 0xc2
 80515d2:	4977      	ldr	r1, [pc, #476]	; (80517b0 <tcp_input+0x2a0>)
 80515d4:	4870      	ldr	r0, [pc, #448]	; (8051798 <tcp_input+0x288>)
 80515d6:	f007 fd2d 	bl	8059034 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80515da:	2114      	movs	r1, #20
 80515dc:	6878      	ldr	r0, [r7, #4]
 80515de:	f7fd fe0b 	bl	804f1f8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80515e2:	687b      	ldr	r3, [r7, #4]
 80515e4:	895a      	ldrh	r2, [r3, #10]
 80515e6:	4b71      	ldr	r3, [pc, #452]	; (80517ac <tcp_input+0x29c>)
 80515e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80515ea:	4b6e      	ldr	r3, [pc, #440]	; (80517a4 <tcp_input+0x294>)
 80515ec:	881a      	ldrh	r2, [r3, #0]
 80515ee:	4b6f      	ldr	r3, [pc, #444]	; (80517ac <tcp_input+0x29c>)
 80515f0:	881b      	ldrh	r3, [r3, #0]
 80515f2:	1ad3      	subs	r3, r2, r3
 80515f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80515f6:	4b6d      	ldr	r3, [pc, #436]	; (80517ac <tcp_input+0x29c>)
 80515f8:	881b      	ldrh	r3, [r3, #0]
 80515fa:	4619      	mov	r1, r3
 80515fc:	6878      	ldr	r0, [r7, #4]
 80515fe:	f7fd fdfb 	bl	804f1f8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8051602:	687b      	ldr	r3, [r7, #4]
 8051604:	681b      	ldr	r3, [r3, #0]
 8051606:	895b      	ldrh	r3, [r3, #10]
 8051608:	8a3a      	ldrh	r2, [r7, #16]
 805160a:	429a      	cmp	r2, r3
 805160c:	f200 836e 	bhi.w	8051cec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8051610:	687b      	ldr	r3, [r7, #4]
 8051612:	681b      	ldr	r3, [r3, #0]
 8051614:	685b      	ldr	r3, [r3, #4]
 8051616:	4a64      	ldr	r2, [pc, #400]	; (80517a8 <tcp_input+0x298>)
 8051618:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 805161a:	687b      	ldr	r3, [r7, #4]
 805161c:	681b      	ldr	r3, [r3, #0]
 805161e:	8a3a      	ldrh	r2, [r7, #16]
 8051620:	4611      	mov	r1, r2
 8051622:	4618      	mov	r0, r3
 8051624:	f7fd fde8 	bl	804f1f8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8051628:	687b      	ldr	r3, [r7, #4]
 805162a:	891a      	ldrh	r2, [r3, #8]
 805162c:	8a3b      	ldrh	r3, [r7, #16]
 805162e:	1ad3      	subs	r3, r2, r3
 8051630:	b29a      	uxth	r2, r3
 8051632:	687b      	ldr	r3, [r7, #4]
 8051634:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8051636:	687b      	ldr	r3, [r7, #4]
 8051638:	895b      	ldrh	r3, [r3, #10]
 805163a:	2b00      	cmp	r3, #0
 805163c:	d005      	beq.n	805164a <tcp_input+0x13a>
 805163e:	4b54      	ldr	r3, [pc, #336]	; (8051790 <tcp_input+0x280>)
 8051640:	22df      	movs	r2, #223	; 0xdf
 8051642:	495c      	ldr	r1, [pc, #368]	; (80517b4 <tcp_input+0x2a4>)
 8051644:	4854      	ldr	r0, [pc, #336]	; (8051798 <tcp_input+0x288>)
 8051646:	f007 fcf5 	bl	8059034 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 805164a:	687b      	ldr	r3, [r7, #4]
 805164c:	891a      	ldrh	r2, [r3, #8]
 805164e:	687b      	ldr	r3, [r7, #4]
 8051650:	681b      	ldr	r3, [r3, #0]
 8051652:	891b      	ldrh	r3, [r3, #8]
 8051654:	429a      	cmp	r2, r3
 8051656:	d005      	beq.n	8051664 <tcp_input+0x154>
 8051658:	4b4d      	ldr	r3, [pc, #308]	; (8051790 <tcp_input+0x280>)
 805165a:	22e0      	movs	r2, #224	; 0xe0
 805165c:	4956      	ldr	r1, [pc, #344]	; (80517b8 <tcp_input+0x2a8>)
 805165e:	484e      	ldr	r0, [pc, #312]	; (8051798 <tcp_input+0x288>)
 8051660:	f007 fce8 	bl	8059034 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8051664:	4b4d      	ldr	r3, [pc, #308]	; (805179c <tcp_input+0x28c>)
 8051666:	681b      	ldr	r3, [r3, #0]
 8051668:	881b      	ldrh	r3, [r3, #0]
 805166a:	b29b      	uxth	r3, r3
 805166c:	4a4b      	ldr	r2, [pc, #300]	; (805179c <tcp_input+0x28c>)
 805166e:	6814      	ldr	r4, [r2, #0]
 8051670:	4618      	mov	r0, r3
 8051672:	f7fc fa55 	bl	804db20 <lwip_htons>
 8051676:	4603      	mov	r3, r0
 8051678:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 805167a:	4b48      	ldr	r3, [pc, #288]	; (805179c <tcp_input+0x28c>)
 805167c:	681b      	ldr	r3, [r3, #0]
 805167e:	885b      	ldrh	r3, [r3, #2]
 8051680:	b29b      	uxth	r3, r3
 8051682:	4a46      	ldr	r2, [pc, #280]	; (805179c <tcp_input+0x28c>)
 8051684:	6814      	ldr	r4, [r2, #0]
 8051686:	4618      	mov	r0, r3
 8051688:	f7fc fa4a 	bl	804db20 <lwip_htons>
 805168c:	4603      	mov	r3, r0
 805168e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8051690:	4b42      	ldr	r3, [pc, #264]	; (805179c <tcp_input+0x28c>)
 8051692:	681b      	ldr	r3, [r3, #0]
 8051694:	685b      	ldr	r3, [r3, #4]
 8051696:	4a41      	ldr	r2, [pc, #260]	; (805179c <tcp_input+0x28c>)
 8051698:	6814      	ldr	r4, [r2, #0]
 805169a:	4618      	mov	r0, r3
 805169c:	f7fc fa55 	bl	804db4a <lwip_htonl>
 80516a0:	4603      	mov	r3, r0
 80516a2:	6063      	str	r3, [r4, #4]
 80516a4:	6863      	ldr	r3, [r4, #4]
 80516a6:	4a45      	ldr	r2, [pc, #276]	; (80517bc <tcp_input+0x2ac>)
 80516a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80516aa:	4b3c      	ldr	r3, [pc, #240]	; (805179c <tcp_input+0x28c>)
 80516ac:	681b      	ldr	r3, [r3, #0]
 80516ae:	689b      	ldr	r3, [r3, #8]
 80516b0:	4a3a      	ldr	r2, [pc, #232]	; (805179c <tcp_input+0x28c>)
 80516b2:	6814      	ldr	r4, [r2, #0]
 80516b4:	4618      	mov	r0, r3
 80516b6:	f7fc fa48 	bl	804db4a <lwip_htonl>
 80516ba:	4603      	mov	r3, r0
 80516bc:	60a3      	str	r3, [r4, #8]
 80516be:	68a3      	ldr	r3, [r4, #8]
 80516c0:	4a3f      	ldr	r2, [pc, #252]	; (80517c0 <tcp_input+0x2b0>)
 80516c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80516c4:	4b35      	ldr	r3, [pc, #212]	; (805179c <tcp_input+0x28c>)
 80516c6:	681b      	ldr	r3, [r3, #0]
 80516c8:	89db      	ldrh	r3, [r3, #14]
 80516ca:	b29b      	uxth	r3, r3
 80516cc:	4a33      	ldr	r2, [pc, #204]	; (805179c <tcp_input+0x28c>)
 80516ce:	6814      	ldr	r4, [r2, #0]
 80516d0:	4618      	mov	r0, r3
 80516d2:	f7fc fa25 	bl	804db20 <lwip_htons>
 80516d6:	4603      	mov	r3, r0
 80516d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80516da:	4b30      	ldr	r3, [pc, #192]	; (805179c <tcp_input+0x28c>)
 80516dc:	681b      	ldr	r3, [r3, #0]
 80516de:	899b      	ldrh	r3, [r3, #12]
 80516e0:	b29b      	uxth	r3, r3
 80516e2:	4618      	mov	r0, r3
 80516e4:	f7fc fa1c 	bl	804db20 <lwip_htons>
 80516e8:	4603      	mov	r3, r0
 80516ea:	b2db      	uxtb	r3, r3
 80516ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80516f0:	b2da      	uxtb	r2, r3
 80516f2:	4b34      	ldr	r3, [pc, #208]	; (80517c4 <tcp_input+0x2b4>)
 80516f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80516f6:	687b      	ldr	r3, [r7, #4]
 80516f8:	891a      	ldrh	r2, [r3, #8]
 80516fa:	4b33      	ldr	r3, [pc, #204]	; (80517c8 <tcp_input+0x2b8>)
 80516fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80516fe:	4b31      	ldr	r3, [pc, #196]	; (80517c4 <tcp_input+0x2b4>)
 8051700:	781b      	ldrb	r3, [r3, #0]
 8051702:	f003 0303 	and.w	r3, r3, #3
 8051706:	2b00      	cmp	r3, #0
 8051708:	d00c      	beq.n	8051724 <tcp_input+0x214>
    tcplen++;
 805170a:	4b2f      	ldr	r3, [pc, #188]	; (80517c8 <tcp_input+0x2b8>)
 805170c:	881b      	ldrh	r3, [r3, #0]
 805170e:	3301      	adds	r3, #1
 8051710:	b29a      	uxth	r2, r3
 8051712:	4b2d      	ldr	r3, [pc, #180]	; (80517c8 <tcp_input+0x2b8>)
 8051714:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8051716:	687b      	ldr	r3, [r7, #4]
 8051718:	891a      	ldrh	r2, [r3, #8]
 805171a:	4b2b      	ldr	r3, [pc, #172]	; (80517c8 <tcp_input+0x2b8>)
 805171c:	881b      	ldrh	r3, [r3, #0]
 805171e:	429a      	cmp	r2, r3
 8051720:	f200 82e6 	bhi.w	8051cf0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8051724:	2300      	movs	r3, #0
 8051726:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8051728:	4b28      	ldr	r3, [pc, #160]	; (80517cc <tcp_input+0x2bc>)
 805172a:	681b      	ldr	r3, [r3, #0]
 805172c:	61fb      	str	r3, [r7, #28]
 805172e:	e09d      	b.n	805186c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8051730:	69fb      	ldr	r3, [r7, #28]
 8051732:	7d1b      	ldrb	r3, [r3, #20]
 8051734:	2b00      	cmp	r3, #0
 8051736:	d105      	bne.n	8051744 <tcp_input+0x234>
 8051738:	4b15      	ldr	r3, [pc, #84]	; (8051790 <tcp_input+0x280>)
 805173a:	22fb      	movs	r2, #251	; 0xfb
 805173c:	4924      	ldr	r1, [pc, #144]	; (80517d0 <tcp_input+0x2c0>)
 805173e:	4816      	ldr	r0, [pc, #88]	; (8051798 <tcp_input+0x288>)
 8051740:	f007 fc78 	bl	8059034 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8051744:	69fb      	ldr	r3, [r7, #28]
 8051746:	7d1b      	ldrb	r3, [r3, #20]
 8051748:	2b0a      	cmp	r3, #10
 805174a:	d105      	bne.n	8051758 <tcp_input+0x248>
 805174c:	4b10      	ldr	r3, [pc, #64]	; (8051790 <tcp_input+0x280>)
 805174e:	22fc      	movs	r2, #252	; 0xfc
 8051750:	4920      	ldr	r1, [pc, #128]	; (80517d4 <tcp_input+0x2c4>)
 8051752:	4811      	ldr	r0, [pc, #68]	; (8051798 <tcp_input+0x288>)
 8051754:	f007 fc6e 	bl	8059034 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8051758:	69fb      	ldr	r3, [r7, #28]
 805175a:	7d1b      	ldrb	r3, [r3, #20]
 805175c:	2b01      	cmp	r3, #1
 805175e:	d105      	bne.n	805176c <tcp_input+0x25c>
 8051760:	4b0b      	ldr	r3, [pc, #44]	; (8051790 <tcp_input+0x280>)
 8051762:	22fd      	movs	r2, #253	; 0xfd
 8051764:	491c      	ldr	r1, [pc, #112]	; (80517d8 <tcp_input+0x2c8>)
 8051766:	480c      	ldr	r0, [pc, #48]	; (8051798 <tcp_input+0x288>)
 8051768:	f007 fc64 	bl	8059034 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 805176c:	69fb      	ldr	r3, [r7, #28]
 805176e:	7a1b      	ldrb	r3, [r3, #8]
 8051770:	2b00      	cmp	r3, #0
 8051772:	d033      	beq.n	80517dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8051774:	69fb      	ldr	r3, [r7, #28]
 8051776:	7a1a      	ldrb	r2, [r3, #8]
 8051778:	4b09      	ldr	r3, [pc, #36]	; (80517a0 <tcp_input+0x290>)
 805177a:	685b      	ldr	r3, [r3, #4]
 805177c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8051780:	3301      	adds	r3, #1
 8051782:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8051784:	429a      	cmp	r2, r3
 8051786:	d029      	beq.n	80517dc <tcp_input+0x2cc>
      prev = pcb;
 8051788:	69fb      	ldr	r3, [r7, #28]
 805178a:	61bb      	str	r3, [r7, #24]
      continue;
 805178c:	e06b      	b.n	8051866 <tcp_input+0x356>
 805178e:	bf00      	nop
 8051790:	0805c044 	.word	0x0805c044
 8051794:	0805c078 	.word	0x0805c078
 8051798:	0805c090 	.word	0x0805c090
 805179c:	2000b5f4 	.word	0x2000b5f4
 80517a0:	20005cb8 	.word	0x20005cb8
 80517a4:	2000b5f8 	.word	0x2000b5f8
 80517a8:	2000b5fc 	.word	0x2000b5fc
 80517ac:	2000b5fa 	.word	0x2000b5fa
 80517b0:	0805c0b8 	.word	0x0805c0b8
 80517b4:	0805c0c8 	.word	0x0805c0c8
 80517b8:	0805c0d4 	.word	0x0805c0d4
 80517bc:	2000b604 	.word	0x2000b604
 80517c0:	2000b608 	.word	0x2000b608
 80517c4:	2000b610 	.word	0x2000b610
 80517c8:	2000b60e 	.word	0x2000b60e
 80517cc:	2000b5d8 	.word	0x2000b5d8
 80517d0:	0805c0f4 	.word	0x0805c0f4
 80517d4:	0805c11c 	.word	0x0805c11c
 80517d8:	0805c148 	.word	0x0805c148
    }

    if (pcb->remote_port == tcphdr->src &&
 80517dc:	69fb      	ldr	r3, [r7, #28]
 80517de:	8b1a      	ldrh	r2, [r3, #24]
 80517e0:	4b72      	ldr	r3, [pc, #456]	; (80519ac <tcp_input+0x49c>)
 80517e2:	681b      	ldr	r3, [r3, #0]
 80517e4:	881b      	ldrh	r3, [r3, #0]
 80517e6:	b29b      	uxth	r3, r3
 80517e8:	429a      	cmp	r2, r3
 80517ea:	d13a      	bne.n	8051862 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80517ec:	69fb      	ldr	r3, [r7, #28]
 80517ee:	8ada      	ldrh	r2, [r3, #22]
 80517f0:	4b6e      	ldr	r3, [pc, #440]	; (80519ac <tcp_input+0x49c>)
 80517f2:	681b      	ldr	r3, [r3, #0]
 80517f4:	885b      	ldrh	r3, [r3, #2]
 80517f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80517f8:	429a      	cmp	r2, r3
 80517fa:	d132      	bne.n	8051862 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80517fc:	69fb      	ldr	r3, [r7, #28]
 80517fe:	685a      	ldr	r2, [r3, #4]
 8051800:	4b6b      	ldr	r3, [pc, #428]	; (80519b0 <tcp_input+0x4a0>)
 8051802:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8051804:	429a      	cmp	r2, r3
 8051806:	d12c      	bne.n	8051862 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8051808:	69fb      	ldr	r3, [r7, #28]
 805180a:	681a      	ldr	r2, [r3, #0]
 805180c:	4b68      	ldr	r3, [pc, #416]	; (80519b0 <tcp_input+0x4a0>)
 805180e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8051810:	429a      	cmp	r2, r3
 8051812:	d126      	bne.n	8051862 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8051814:	69fb      	ldr	r3, [r7, #28]
 8051816:	68db      	ldr	r3, [r3, #12]
 8051818:	69fa      	ldr	r2, [r7, #28]
 805181a:	429a      	cmp	r2, r3
 805181c:	d106      	bne.n	805182c <tcp_input+0x31c>
 805181e:	4b65      	ldr	r3, [pc, #404]	; (80519b4 <tcp_input+0x4a4>)
 8051820:	f240 120d 	movw	r2, #269	; 0x10d
 8051824:	4964      	ldr	r1, [pc, #400]	; (80519b8 <tcp_input+0x4a8>)
 8051826:	4865      	ldr	r0, [pc, #404]	; (80519bc <tcp_input+0x4ac>)
 8051828:	f007 fc04 	bl	8059034 <iprintf>
      if (prev != NULL) {
 805182c:	69bb      	ldr	r3, [r7, #24]
 805182e:	2b00      	cmp	r3, #0
 8051830:	d00a      	beq.n	8051848 <tcp_input+0x338>
        prev->next = pcb->next;
 8051832:	69fb      	ldr	r3, [r7, #28]
 8051834:	68da      	ldr	r2, [r3, #12]
 8051836:	69bb      	ldr	r3, [r7, #24]
 8051838:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 805183a:	4b61      	ldr	r3, [pc, #388]	; (80519c0 <tcp_input+0x4b0>)
 805183c:	681a      	ldr	r2, [r3, #0]
 805183e:	69fb      	ldr	r3, [r7, #28]
 8051840:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8051842:	4a5f      	ldr	r2, [pc, #380]	; (80519c0 <tcp_input+0x4b0>)
 8051844:	69fb      	ldr	r3, [r7, #28]
 8051846:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8051848:	69fb      	ldr	r3, [r7, #28]
 805184a:	68db      	ldr	r3, [r3, #12]
 805184c:	69fa      	ldr	r2, [r7, #28]
 805184e:	429a      	cmp	r2, r3
 8051850:	d111      	bne.n	8051876 <tcp_input+0x366>
 8051852:	4b58      	ldr	r3, [pc, #352]	; (80519b4 <tcp_input+0x4a4>)
 8051854:	f240 1215 	movw	r2, #277	; 0x115
 8051858:	495a      	ldr	r1, [pc, #360]	; (80519c4 <tcp_input+0x4b4>)
 805185a:	4858      	ldr	r0, [pc, #352]	; (80519bc <tcp_input+0x4ac>)
 805185c:	f007 fbea 	bl	8059034 <iprintf>
      break;
 8051860:	e009      	b.n	8051876 <tcp_input+0x366>
    }
    prev = pcb;
 8051862:	69fb      	ldr	r3, [r7, #28]
 8051864:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8051866:	69fb      	ldr	r3, [r7, #28]
 8051868:	68db      	ldr	r3, [r3, #12]
 805186a:	61fb      	str	r3, [r7, #28]
 805186c:	69fb      	ldr	r3, [r7, #28]
 805186e:	2b00      	cmp	r3, #0
 8051870:	f47f af5e 	bne.w	8051730 <tcp_input+0x220>
 8051874:	e000      	b.n	8051878 <tcp_input+0x368>
      break;
 8051876:	bf00      	nop
  }

  if (pcb == NULL) {
 8051878:	69fb      	ldr	r3, [r7, #28]
 805187a:	2b00      	cmp	r3, #0
 805187c:	f040 80aa 	bne.w	80519d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8051880:	4b51      	ldr	r3, [pc, #324]	; (80519c8 <tcp_input+0x4b8>)
 8051882:	681b      	ldr	r3, [r3, #0]
 8051884:	61fb      	str	r3, [r7, #28]
 8051886:	e03f      	b.n	8051908 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8051888:	69fb      	ldr	r3, [r7, #28]
 805188a:	7d1b      	ldrb	r3, [r3, #20]
 805188c:	2b0a      	cmp	r3, #10
 805188e:	d006      	beq.n	805189e <tcp_input+0x38e>
 8051890:	4b48      	ldr	r3, [pc, #288]	; (80519b4 <tcp_input+0x4a4>)
 8051892:	f240 121f 	movw	r2, #287	; 0x11f
 8051896:	494d      	ldr	r1, [pc, #308]	; (80519cc <tcp_input+0x4bc>)
 8051898:	4848      	ldr	r0, [pc, #288]	; (80519bc <tcp_input+0x4ac>)
 805189a:	f007 fbcb 	bl	8059034 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 805189e:	69fb      	ldr	r3, [r7, #28]
 80518a0:	7a1b      	ldrb	r3, [r3, #8]
 80518a2:	2b00      	cmp	r3, #0
 80518a4:	d009      	beq.n	80518ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80518a6:	69fb      	ldr	r3, [r7, #28]
 80518a8:	7a1a      	ldrb	r2, [r3, #8]
 80518aa:	4b41      	ldr	r3, [pc, #260]	; (80519b0 <tcp_input+0x4a0>)
 80518ac:	685b      	ldr	r3, [r3, #4]
 80518ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80518b2:	3301      	adds	r3, #1
 80518b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80518b6:	429a      	cmp	r2, r3
 80518b8:	d122      	bne.n	8051900 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80518ba:	69fb      	ldr	r3, [r7, #28]
 80518bc:	8b1a      	ldrh	r2, [r3, #24]
 80518be:	4b3b      	ldr	r3, [pc, #236]	; (80519ac <tcp_input+0x49c>)
 80518c0:	681b      	ldr	r3, [r3, #0]
 80518c2:	881b      	ldrh	r3, [r3, #0]
 80518c4:	b29b      	uxth	r3, r3
 80518c6:	429a      	cmp	r2, r3
 80518c8:	d11b      	bne.n	8051902 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80518ca:	69fb      	ldr	r3, [r7, #28]
 80518cc:	8ada      	ldrh	r2, [r3, #22]
 80518ce:	4b37      	ldr	r3, [pc, #220]	; (80519ac <tcp_input+0x49c>)
 80518d0:	681b      	ldr	r3, [r3, #0]
 80518d2:	885b      	ldrh	r3, [r3, #2]
 80518d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80518d6:	429a      	cmp	r2, r3
 80518d8:	d113      	bne.n	8051902 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80518da:	69fb      	ldr	r3, [r7, #28]
 80518dc:	685a      	ldr	r2, [r3, #4]
 80518de:	4b34      	ldr	r3, [pc, #208]	; (80519b0 <tcp_input+0x4a0>)
 80518e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80518e2:	429a      	cmp	r2, r3
 80518e4:	d10d      	bne.n	8051902 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80518e6:	69fb      	ldr	r3, [r7, #28]
 80518e8:	681a      	ldr	r2, [r3, #0]
 80518ea:	4b31      	ldr	r3, [pc, #196]	; (80519b0 <tcp_input+0x4a0>)
 80518ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80518ee:	429a      	cmp	r2, r3
 80518f0:	d107      	bne.n	8051902 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80518f2:	69f8      	ldr	r0, [r7, #28]
 80518f4:	f000 fb56 	bl	8051fa4 <tcp_timewait_input>
        }
        pbuf_free(p);
 80518f8:	6878      	ldr	r0, [r7, #4]
 80518fa:	f7fd fd03 	bl	804f304 <pbuf_free>
        return;
 80518fe:	e1fd      	b.n	8051cfc <tcp_input+0x7ec>
        continue;
 8051900:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8051902:	69fb      	ldr	r3, [r7, #28]
 8051904:	68db      	ldr	r3, [r3, #12]
 8051906:	61fb      	str	r3, [r7, #28]
 8051908:	69fb      	ldr	r3, [r7, #28]
 805190a:	2b00      	cmp	r3, #0
 805190c:	d1bc      	bne.n	8051888 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 805190e:	2300      	movs	r3, #0
 8051910:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8051912:	4b2f      	ldr	r3, [pc, #188]	; (80519d0 <tcp_input+0x4c0>)
 8051914:	681b      	ldr	r3, [r3, #0]
 8051916:	617b      	str	r3, [r7, #20]
 8051918:	e02a      	b.n	8051970 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 805191a:	697b      	ldr	r3, [r7, #20]
 805191c:	7a1b      	ldrb	r3, [r3, #8]
 805191e:	2b00      	cmp	r3, #0
 8051920:	d00c      	beq.n	805193c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8051922:	697b      	ldr	r3, [r7, #20]
 8051924:	7a1a      	ldrb	r2, [r3, #8]
 8051926:	4b22      	ldr	r3, [pc, #136]	; (80519b0 <tcp_input+0x4a0>)
 8051928:	685b      	ldr	r3, [r3, #4]
 805192a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 805192e:	3301      	adds	r3, #1
 8051930:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8051932:	429a      	cmp	r2, r3
 8051934:	d002      	beq.n	805193c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8051936:	697b      	ldr	r3, [r7, #20]
 8051938:	61bb      	str	r3, [r7, #24]
        continue;
 805193a:	e016      	b.n	805196a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 805193c:	697b      	ldr	r3, [r7, #20]
 805193e:	8ada      	ldrh	r2, [r3, #22]
 8051940:	4b1a      	ldr	r3, [pc, #104]	; (80519ac <tcp_input+0x49c>)
 8051942:	681b      	ldr	r3, [r3, #0]
 8051944:	885b      	ldrh	r3, [r3, #2]
 8051946:	b29b      	uxth	r3, r3
 8051948:	429a      	cmp	r2, r3
 805194a:	d10c      	bne.n	8051966 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 805194c:	697b      	ldr	r3, [r7, #20]
 805194e:	681a      	ldr	r2, [r3, #0]
 8051950:	4b17      	ldr	r3, [pc, #92]	; (80519b0 <tcp_input+0x4a0>)
 8051952:	695b      	ldr	r3, [r3, #20]
 8051954:	429a      	cmp	r2, r3
 8051956:	d00f      	beq.n	8051978 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8051958:	697b      	ldr	r3, [r7, #20]
 805195a:	2b00      	cmp	r3, #0
 805195c:	d00d      	beq.n	805197a <tcp_input+0x46a>
 805195e:	697b      	ldr	r3, [r7, #20]
 8051960:	681b      	ldr	r3, [r3, #0]
 8051962:	2b00      	cmp	r3, #0
 8051964:	d009      	beq.n	805197a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8051966:	697b      	ldr	r3, [r7, #20]
 8051968:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 805196a:	697b      	ldr	r3, [r7, #20]
 805196c:	68db      	ldr	r3, [r3, #12]
 805196e:	617b      	str	r3, [r7, #20]
 8051970:	697b      	ldr	r3, [r7, #20]
 8051972:	2b00      	cmp	r3, #0
 8051974:	d1d1      	bne.n	805191a <tcp_input+0x40a>
 8051976:	e000      	b.n	805197a <tcp_input+0x46a>
            break;
 8051978:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 805197a:	697b      	ldr	r3, [r7, #20]
 805197c:	2b00      	cmp	r3, #0
 805197e:	d029      	beq.n	80519d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8051980:	69bb      	ldr	r3, [r7, #24]
 8051982:	2b00      	cmp	r3, #0
 8051984:	d00a      	beq.n	805199c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8051986:	697b      	ldr	r3, [r7, #20]
 8051988:	68da      	ldr	r2, [r3, #12]
 805198a:	69bb      	ldr	r3, [r7, #24]
 805198c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 805198e:	4b10      	ldr	r3, [pc, #64]	; (80519d0 <tcp_input+0x4c0>)
 8051990:	681a      	ldr	r2, [r3, #0]
 8051992:	697b      	ldr	r3, [r7, #20]
 8051994:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8051996:	4a0e      	ldr	r2, [pc, #56]	; (80519d0 <tcp_input+0x4c0>)
 8051998:	697b      	ldr	r3, [r7, #20]
 805199a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 805199c:	6978      	ldr	r0, [r7, #20]
 805199e:	f000 fa03 	bl	8051da8 <tcp_listen_input>
      }
      pbuf_free(p);
 80519a2:	6878      	ldr	r0, [r7, #4]
 80519a4:	f7fd fcae 	bl	804f304 <pbuf_free>
      return;
 80519a8:	e1a8      	b.n	8051cfc <tcp_input+0x7ec>
 80519aa:	bf00      	nop
 80519ac:	2000b5f4 	.word	0x2000b5f4
 80519b0:	20005cb8 	.word	0x20005cb8
 80519b4:	0805c044 	.word	0x0805c044
 80519b8:	0805c170 	.word	0x0805c170
 80519bc:	0805c090 	.word	0x0805c090
 80519c0:	2000b5d8 	.word	0x2000b5d8
 80519c4:	0805c19c 	.word	0x0805c19c
 80519c8:	2000b5dc 	.word	0x2000b5dc
 80519cc:	0805c1c8 	.word	0x0805c1c8
 80519d0:	2000b5d4 	.word	0x2000b5d4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80519d4:	69fb      	ldr	r3, [r7, #28]
 80519d6:	2b00      	cmp	r3, #0
 80519d8:	f000 8158 	beq.w	8051c8c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80519dc:	4b95      	ldr	r3, [pc, #596]	; (8051c34 <tcp_input+0x724>)
 80519de:	2200      	movs	r2, #0
 80519e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80519e2:	687b      	ldr	r3, [r7, #4]
 80519e4:	891a      	ldrh	r2, [r3, #8]
 80519e6:	4b93      	ldr	r3, [pc, #588]	; (8051c34 <tcp_input+0x724>)
 80519e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80519ea:	4a92      	ldr	r2, [pc, #584]	; (8051c34 <tcp_input+0x724>)
 80519ec:	687b      	ldr	r3, [r7, #4]
 80519ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80519f0:	4b91      	ldr	r3, [pc, #580]	; (8051c38 <tcp_input+0x728>)
 80519f2:	681b      	ldr	r3, [r3, #0]
 80519f4:	4a8f      	ldr	r2, [pc, #572]	; (8051c34 <tcp_input+0x724>)
 80519f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80519f8:	4b90      	ldr	r3, [pc, #576]	; (8051c3c <tcp_input+0x72c>)
 80519fa:	2200      	movs	r2, #0
 80519fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80519fe:	4b90      	ldr	r3, [pc, #576]	; (8051c40 <tcp_input+0x730>)
 8051a00:	2200      	movs	r2, #0
 8051a02:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8051a04:	4b8f      	ldr	r3, [pc, #572]	; (8051c44 <tcp_input+0x734>)
 8051a06:	2200      	movs	r2, #0
 8051a08:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8051a0a:	4b8f      	ldr	r3, [pc, #572]	; (8051c48 <tcp_input+0x738>)
 8051a0c:	781b      	ldrb	r3, [r3, #0]
 8051a0e:	f003 0308 	and.w	r3, r3, #8
 8051a12:	2b00      	cmp	r3, #0
 8051a14:	d006      	beq.n	8051a24 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8051a16:	687b      	ldr	r3, [r7, #4]
 8051a18:	7b5b      	ldrb	r3, [r3, #13]
 8051a1a:	f043 0301 	orr.w	r3, r3, #1
 8051a1e:	b2da      	uxtb	r2, r3
 8051a20:	687b      	ldr	r3, [r7, #4]
 8051a22:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8051a24:	69fb      	ldr	r3, [r7, #28]
 8051a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8051a28:	2b00      	cmp	r3, #0
 8051a2a:	d017      	beq.n	8051a5c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8051a2c:	69f8      	ldr	r0, [r7, #28]
 8051a2e:	f7ff f85b 	bl	8050ae8 <tcp_process_refused_data>
 8051a32:	4603      	mov	r3, r0
 8051a34:	f113 0f0d 	cmn.w	r3, #13
 8051a38:	d007      	beq.n	8051a4a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8051a3a:	69fb      	ldr	r3, [r7, #28]
 8051a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8051a3e:	2b00      	cmp	r3, #0
 8051a40:	d00c      	beq.n	8051a5c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8051a42:	4b82      	ldr	r3, [pc, #520]	; (8051c4c <tcp_input+0x73c>)
 8051a44:	881b      	ldrh	r3, [r3, #0]
 8051a46:	2b00      	cmp	r3, #0
 8051a48:	d008      	beq.n	8051a5c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8051a4a:	69fb      	ldr	r3, [r7, #28]
 8051a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8051a4e:	2b00      	cmp	r3, #0
 8051a50:	f040 80e3 	bne.w	8051c1a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8051a54:	69f8      	ldr	r0, [r7, #28]
 8051a56:	f003 fe05 	bl	8055664 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8051a5a:	e0de      	b.n	8051c1a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8051a5c:	4a7c      	ldr	r2, [pc, #496]	; (8051c50 <tcp_input+0x740>)
 8051a5e:	69fb      	ldr	r3, [r7, #28]
 8051a60:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8051a62:	69f8      	ldr	r0, [r7, #28]
 8051a64:	f000 fb18 	bl	8052098 <tcp_process>
 8051a68:	4603      	mov	r3, r0
 8051a6a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8051a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8051a70:	f113 0f0d 	cmn.w	r3, #13
 8051a74:	f000 80d3 	beq.w	8051c1e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8051a78:	4b71      	ldr	r3, [pc, #452]	; (8051c40 <tcp_input+0x730>)
 8051a7a:	781b      	ldrb	r3, [r3, #0]
 8051a7c:	f003 0308 	and.w	r3, r3, #8
 8051a80:	2b00      	cmp	r3, #0
 8051a82:	d015      	beq.n	8051ab0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8051a84:	69fb      	ldr	r3, [r7, #28]
 8051a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8051a8a:	2b00      	cmp	r3, #0
 8051a8c:	d008      	beq.n	8051aa0 <tcp_input+0x590>
 8051a8e:	69fb      	ldr	r3, [r7, #28]
 8051a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8051a94:	69fa      	ldr	r2, [r7, #28]
 8051a96:	6912      	ldr	r2, [r2, #16]
 8051a98:	f06f 010d 	mvn.w	r1, #13
 8051a9c:	4610      	mov	r0, r2
 8051a9e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8051aa0:	69f9      	ldr	r1, [r7, #28]
 8051aa2:	486c      	ldr	r0, [pc, #432]	; (8051c54 <tcp_input+0x744>)
 8051aa4:	f7ff fbbc 	bl	8051220 <tcp_pcb_remove>
        tcp_free(pcb);
 8051aa8:	69f8      	ldr	r0, [r7, #28]
 8051aaa:	f7fd fed7 	bl	804f85c <tcp_free>
 8051aae:	e0da      	b.n	8051c66 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8051ab0:	2300      	movs	r3, #0
 8051ab2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8051ab4:	4b63      	ldr	r3, [pc, #396]	; (8051c44 <tcp_input+0x734>)
 8051ab6:	881b      	ldrh	r3, [r3, #0]
 8051ab8:	2b00      	cmp	r3, #0
 8051aba:	d01d      	beq.n	8051af8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8051abc:	4b61      	ldr	r3, [pc, #388]	; (8051c44 <tcp_input+0x734>)
 8051abe:	881b      	ldrh	r3, [r3, #0]
 8051ac0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8051ac2:	69fb      	ldr	r3, [r7, #28]
 8051ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8051ac8:	2b00      	cmp	r3, #0
 8051aca:	d00a      	beq.n	8051ae2 <tcp_input+0x5d2>
 8051acc:	69fb      	ldr	r3, [r7, #28]
 8051ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8051ad2:	69fa      	ldr	r2, [r7, #28]
 8051ad4:	6910      	ldr	r0, [r2, #16]
 8051ad6:	89fa      	ldrh	r2, [r7, #14]
 8051ad8:	69f9      	ldr	r1, [r7, #28]
 8051ada:	4798      	blx	r3
 8051adc:	4603      	mov	r3, r0
 8051ade:	74fb      	strb	r3, [r7, #19]
 8051ae0:	e001      	b.n	8051ae6 <tcp_input+0x5d6>
 8051ae2:	2300      	movs	r3, #0
 8051ae4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8051ae6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8051aea:	f113 0f0d 	cmn.w	r3, #13
 8051aee:	f000 8098 	beq.w	8051c22 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8051af2:	4b54      	ldr	r3, [pc, #336]	; (8051c44 <tcp_input+0x734>)
 8051af4:	2200      	movs	r2, #0
 8051af6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8051af8:	69f8      	ldr	r0, [r7, #28]
 8051afa:	f000 f915 	bl	8051d28 <tcp_input_delayed_close>
 8051afe:	4603      	mov	r3, r0
 8051b00:	2b00      	cmp	r3, #0
 8051b02:	f040 8090 	bne.w	8051c26 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8051b06:	4b4d      	ldr	r3, [pc, #308]	; (8051c3c <tcp_input+0x72c>)
 8051b08:	681b      	ldr	r3, [r3, #0]
 8051b0a:	2b00      	cmp	r3, #0
 8051b0c:	d041      	beq.n	8051b92 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8051b0e:	69fb      	ldr	r3, [r7, #28]
 8051b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8051b12:	2b00      	cmp	r3, #0
 8051b14:	d006      	beq.n	8051b24 <tcp_input+0x614>
 8051b16:	4b50      	ldr	r3, [pc, #320]	; (8051c58 <tcp_input+0x748>)
 8051b18:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8051b1c:	494f      	ldr	r1, [pc, #316]	; (8051c5c <tcp_input+0x74c>)
 8051b1e:	4850      	ldr	r0, [pc, #320]	; (8051c60 <tcp_input+0x750>)
 8051b20:	f007 fa88 	bl	8059034 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8051b24:	69fb      	ldr	r3, [r7, #28]
 8051b26:	8b5b      	ldrh	r3, [r3, #26]
 8051b28:	f003 0310 	and.w	r3, r3, #16
 8051b2c:	2b00      	cmp	r3, #0
 8051b2e:	d008      	beq.n	8051b42 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8051b30:	4b42      	ldr	r3, [pc, #264]	; (8051c3c <tcp_input+0x72c>)
 8051b32:	681b      	ldr	r3, [r3, #0]
 8051b34:	4618      	mov	r0, r3
 8051b36:	f7fd fbe5 	bl	804f304 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8051b3a:	69f8      	ldr	r0, [r7, #28]
 8051b3c:	f7fe f9d2 	bl	804fee4 <tcp_abort>
            goto aborted;
 8051b40:	e091      	b.n	8051c66 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8051b42:	69fb      	ldr	r3, [r7, #28]
 8051b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8051b48:	2b00      	cmp	r3, #0
 8051b4a:	d00c      	beq.n	8051b66 <tcp_input+0x656>
 8051b4c:	69fb      	ldr	r3, [r7, #28]
 8051b4e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8051b52:	69fb      	ldr	r3, [r7, #28]
 8051b54:	6918      	ldr	r0, [r3, #16]
 8051b56:	4b39      	ldr	r3, [pc, #228]	; (8051c3c <tcp_input+0x72c>)
 8051b58:	681a      	ldr	r2, [r3, #0]
 8051b5a:	2300      	movs	r3, #0
 8051b5c:	69f9      	ldr	r1, [r7, #28]
 8051b5e:	47a0      	blx	r4
 8051b60:	4603      	mov	r3, r0
 8051b62:	74fb      	strb	r3, [r7, #19]
 8051b64:	e008      	b.n	8051b78 <tcp_input+0x668>
 8051b66:	4b35      	ldr	r3, [pc, #212]	; (8051c3c <tcp_input+0x72c>)
 8051b68:	681a      	ldr	r2, [r3, #0]
 8051b6a:	2300      	movs	r3, #0
 8051b6c:	69f9      	ldr	r1, [r7, #28]
 8051b6e:	2000      	movs	r0, #0
 8051b70:	f7ff f890 	bl	8050c94 <tcp_recv_null>
 8051b74:	4603      	mov	r3, r0
 8051b76:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8051b78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8051b7c:	f113 0f0d 	cmn.w	r3, #13
 8051b80:	d053      	beq.n	8051c2a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8051b82:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8051b86:	2b00      	cmp	r3, #0
 8051b88:	d003      	beq.n	8051b92 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8051b8a:	4b2c      	ldr	r3, [pc, #176]	; (8051c3c <tcp_input+0x72c>)
 8051b8c:	681a      	ldr	r2, [r3, #0]
 8051b8e:	69fb      	ldr	r3, [r7, #28]
 8051b90:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8051b92:	4b2b      	ldr	r3, [pc, #172]	; (8051c40 <tcp_input+0x730>)
 8051b94:	781b      	ldrb	r3, [r3, #0]
 8051b96:	f003 0320 	and.w	r3, r3, #32
 8051b9a:	2b00      	cmp	r3, #0
 8051b9c:	d030      	beq.n	8051c00 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8051b9e:	69fb      	ldr	r3, [r7, #28]
 8051ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8051ba2:	2b00      	cmp	r3, #0
 8051ba4:	d009      	beq.n	8051bba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8051ba6:	69fb      	ldr	r3, [r7, #28]
 8051ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8051baa:	7b5a      	ldrb	r2, [r3, #13]
 8051bac:	69fb      	ldr	r3, [r7, #28]
 8051bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8051bb0:	f042 0220 	orr.w	r2, r2, #32
 8051bb4:	b2d2      	uxtb	r2, r2
 8051bb6:	735a      	strb	r2, [r3, #13]
 8051bb8:	e022      	b.n	8051c00 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8051bba:	69fb      	ldr	r3, [r7, #28]
 8051bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051bbe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8051bc2:	d005      	beq.n	8051bd0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8051bc4:	69fb      	ldr	r3, [r7, #28]
 8051bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8051bc8:	3301      	adds	r3, #1
 8051bca:	b29a      	uxth	r2, r3
 8051bcc:	69fb      	ldr	r3, [r7, #28]
 8051bce:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8051bd0:	69fb      	ldr	r3, [r7, #28]
 8051bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8051bd6:	2b00      	cmp	r3, #0
 8051bd8:	d00b      	beq.n	8051bf2 <tcp_input+0x6e2>
 8051bda:	69fb      	ldr	r3, [r7, #28]
 8051bdc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8051be0:	69fb      	ldr	r3, [r7, #28]
 8051be2:	6918      	ldr	r0, [r3, #16]
 8051be4:	2300      	movs	r3, #0
 8051be6:	2200      	movs	r2, #0
 8051be8:	69f9      	ldr	r1, [r7, #28]
 8051bea:	47a0      	blx	r4
 8051bec:	4603      	mov	r3, r0
 8051bee:	74fb      	strb	r3, [r7, #19]
 8051bf0:	e001      	b.n	8051bf6 <tcp_input+0x6e6>
 8051bf2:	2300      	movs	r3, #0
 8051bf4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8051bf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8051bfa:	f113 0f0d 	cmn.w	r3, #13
 8051bfe:	d016      	beq.n	8051c2e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8051c00:	4b13      	ldr	r3, [pc, #76]	; (8051c50 <tcp_input+0x740>)
 8051c02:	2200      	movs	r2, #0
 8051c04:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8051c06:	69f8      	ldr	r0, [r7, #28]
 8051c08:	f000 f88e 	bl	8051d28 <tcp_input_delayed_close>
 8051c0c:	4603      	mov	r3, r0
 8051c0e:	2b00      	cmp	r3, #0
 8051c10:	d128      	bne.n	8051c64 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8051c12:	69f8      	ldr	r0, [r7, #28]
 8051c14:	f002 ff20 	bl	8054a58 <tcp_output>
 8051c18:	e025      	b.n	8051c66 <tcp_input+0x756>
        goto aborted;
 8051c1a:	bf00      	nop
 8051c1c:	e023      	b.n	8051c66 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8051c1e:	bf00      	nop
 8051c20:	e021      	b.n	8051c66 <tcp_input+0x756>
              goto aborted;
 8051c22:	bf00      	nop
 8051c24:	e01f      	b.n	8051c66 <tcp_input+0x756>
          goto aborted;
 8051c26:	bf00      	nop
 8051c28:	e01d      	b.n	8051c66 <tcp_input+0x756>
            goto aborted;
 8051c2a:	bf00      	nop
 8051c2c:	e01b      	b.n	8051c66 <tcp_input+0x756>
              goto aborted;
 8051c2e:	bf00      	nop
 8051c30:	e019      	b.n	8051c66 <tcp_input+0x756>
 8051c32:	bf00      	nop
 8051c34:	2000b5e4 	.word	0x2000b5e4
 8051c38:	2000b5f4 	.word	0x2000b5f4
 8051c3c:	2000b614 	.word	0x2000b614
 8051c40:	2000b611 	.word	0x2000b611
 8051c44:	2000b60c 	.word	0x2000b60c
 8051c48:	2000b610 	.word	0x2000b610
 8051c4c:	2000b60e 	.word	0x2000b60e
 8051c50:	2000b618 	.word	0x2000b618
 8051c54:	2000b5d8 	.word	0x2000b5d8
 8051c58:	0805c044 	.word	0x0805c044
 8051c5c:	0805c1f8 	.word	0x0805c1f8
 8051c60:	0805c090 	.word	0x0805c090
          goto aborted;
 8051c64:	bf00      	nop
    tcp_input_pcb = NULL;
 8051c66:	4b27      	ldr	r3, [pc, #156]	; (8051d04 <tcp_input+0x7f4>)
 8051c68:	2200      	movs	r2, #0
 8051c6a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8051c6c:	4b26      	ldr	r3, [pc, #152]	; (8051d08 <tcp_input+0x7f8>)
 8051c6e:	2200      	movs	r2, #0
 8051c70:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8051c72:	4b26      	ldr	r3, [pc, #152]	; (8051d0c <tcp_input+0x7fc>)
 8051c74:	685b      	ldr	r3, [r3, #4]
 8051c76:	2b00      	cmp	r3, #0
 8051c78:	d03f      	beq.n	8051cfa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8051c7a:	4b24      	ldr	r3, [pc, #144]	; (8051d0c <tcp_input+0x7fc>)
 8051c7c:	685b      	ldr	r3, [r3, #4]
 8051c7e:	4618      	mov	r0, r3
 8051c80:	f7fd fb40 	bl	804f304 <pbuf_free>
      inseg.p = NULL;
 8051c84:	4b21      	ldr	r3, [pc, #132]	; (8051d0c <tcp_input+0x7fc>)
 8051c86:	2200      	movs	r2, #0
 8051c88:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8051c8a:	e036      	b.n	8051cfa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8051c8c:	4b20      	ldr	r3, [pc, #128]	; (8051d10 <tcp_input+0x800>)
 8051c8e:	681b      	ldr	r3, [r3, #0]
 8051c90:	899b      	ldrh	r3, [r3, #12]
 8051c92:	b29b      	uxth	r3, r3
 8051c94:	4618      	mov	r0, r3
 8051c96:	f7fb ff43 	bl	804db20 <lwip_htons>
 8051c9a:	4603      	mov	r3, r0
 8051c9c:	b2db      	uxtb	r3, r3
 8051c9e:	f003 0304 	and.w	r3, r3, #4
 8051ca2:	2b00      	cmp	r3, #0
 8051ca4:	d118      	bne.n	8051cd8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051ca6:	4b1b      	ldr	r3, [pc, #108]	; (8051d14 <tcp_input+0x804>)
 8051ca8:	6819      	ldr	r1, [r3, #0]
 8051caa:	4b1b      	ldr	r3, [pc, #108]	; (8051d18 <tcp_input+0x808>)
 8051cac:	881b      	ldrh	r3, [r3, #0]
 8051cae:	461a      	mov	r2, r3
 8051cb0:	4b1a      	ldr	r3, [pc, #104]	; (8051d1c <tcp_input+0x80c>)
 8051cb2:	681b      	ldr	r3, [r3, #0]
 8051cb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8051cb6:	4b16      	ldr	r3, [pc, #88]	; (8051d10 <tcp_input+0x800>)
 8051cb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051cba:	885b      	ldrh	r3, [r3, #2]
 8051cbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8051cbe:	4a14      	ldr	r2, [pc, #80]	; (8051d10 <tcp_input+0x800>)
 8051cc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051cc2:	8812      	ldrh	r2, [r2, #0]
 8051cc4:	b292      	uxth	r2, r2
 8051cc6:	9202      	str	r2, [sp, #8]
 8051cc8:	9301      	str	r3, [sp, #4]
 8051cca:	4b15      	ldr	r3, [pc, #84]	; (8051d20 <tcp_input+0x810>)
 8051ccc:	9300      	str	r3, [sp, #0]
 8051cce:	4b15      	ldr	r3, [pc, #84]	; (8051d24 <tcp_input+0x814>)
 8051cd0:	4602      	mov	r2, r0
 8051cd2:	2000      	movs	r0, #0
 8051cd4:	f003 fc74 	bl	80555c0 <tcp_rst>
    pbuf_free(p);
 8051cd8:	6878      	ldr	r0, [r7, #4]
 8051cda:	f7fd fb13 	bl	804f304 <pbuf_free>
  return;
 8051cde:	e00c      	b.n	8051cfa <tcp_input+0x7ea>
    goto dropped;
 8051ce0:	bf00      	nop
 8051ce2:	e006      	b.n	8051cf2 <tcp_input+0x7e2>
    goto dropped;
 8051ce4:	bf00      	nop
 8051ce6:	e004      	b.n	8051cf2 <tcp_input+0x7e2>
    goto dropped;
 8051ce8:	bf00      	nop
 8051cea:	e002      	b.n	8051cf2 <tcp_input+0x7e2>
      goto dropped;
 8051cec:	bf00      	nop
 8051cee:	e000      	b.n	8051cf2 <tcp_input+0x7e2>
      goto dropped;
 8051cf0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8051cf2:	6878      	ldr	r0, [r7, #4]
 8051cf4:	f7fd fb06 	bl	804f304 <pbuf_free>
 8051cf8:	e000      	b.n	8051cfc <tcp_input+0x7ec>
  return;
 8051cfa:	bf00      	nop
}
 8051cfc:	3724      	adds	r7, #36	; 0x24
 8051cfe:	46bd      	mov	sp, r7
 8051d00:	bd90      	pop	{r4, r7, pc}
 8051d02:	bf00      	nop
 8051d04:	2000b618 	.word	0x2000b618
 8051d08:	2000b614 	.word	0x2000b614
 8051d0c:	2000b5e4 	.word	0x2000b5e4
 8051d10:	2000b5f4 	.word	0x2000b5f4
 8051d14:	2000b608 	.word	0x2000b608
 8051d18:	2000b60e 	.word	0x2000b60e
 8051d1c:	2000b604 	.word	0x2000b604
 8051d20:	20005cc8 	.word	0x20005cc8
 8051d24:	20005ccc 	.word	0x20005ccc

08051d28 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8051d28:	b580      	push	{r7, lr}
 8051d2a:	b082      	sub	sp, #8
 8051d2c:	af00      	add	r7, sp, #0
 8051d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8051d30:	687b      	ldr	r3, [r7, #4]
 8051d32:	2b00      	cmp	r3, #0
 8051d34:	d106      	bne.n	8051d44 <tcp_input_delayed_close+0x1c>
 8051d36:	4b17      	ldr	r3, [pc, #92]	; (8051d94 <tcp_input_delayed_close+0x6c>)
 8051d38:	f240 225a 	movw	r2, #602	; 0x25a
 8051d3c:	4916      	ldr	r1, [pc, #88]	; (8051d98 <tcp_input_delayed_close+0x70>)
 8051d3e:	4817      	ldr	r0, [pc, #92]	; (8051d9c <tcp_input_delayed_close+0x74>)
 8051d40:	f007 f978 	bl	8059034 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8051d44:	4b16      	ldr	r3, [pc, #88]	; (8051da0 <tcp_input_delayed_close+0x78>)
 8051d46:	781b      	ldrb	r3, [r3, #0]
 8051d48:	f003 0310 	and.w	r3, r3, #16
 8051d4c:	2b00      	cmp	r3, #0
 8051d4e:	d01c      	beq.n	8051d8a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8051d50:	687b      	ldr	r3, [r7, #4]
 8051d52:	8b5b      	ldrh	r3, [r3, #26]
 8051d54:	f003 0310 	and.w	r3, r3, #16
 8051d58:	2b00      	cmp	r3, #0
 8051d5a:	d10d      	bne.n	8051d78 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8051d5c:	687b      	ldr	r3, [r7, #4]
 8051d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8051d62:	2b00      	cmp	r3, #0
 8051d64:	d008      	beq.n	8051d78 <tcp_input_delayed_close+0x50>
 8051d66:	687b      	ldr	r3, [r7, #4]
 8051d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8051d6c:	687a      	ldr	r2, [r7, #4]
 8051d6e:	6912      	ldr	r2, [r2, #16]
 8051d70:	f06f 010e 	mvn.w	r1, #14
 8051d74:	4610      	mov	r0, r2
 8051d76:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8051d78:	6879      	ldr	r1, [r7, #4]
 8051d7a:	480a      	ldr	r0, [pc, #40]	; (8051da4 <tcp_input_delayed_close+0x7c>)
 8051d7c:	f7ff fa50 	bl	8051220 <tcp_pcb_remove>
    tcp_free(pcb);
 8051d80:	6878      	ldr	r0, [r7, #4]
 8051d82:	f7fd fd6b 	bl	804f85c <tcp_free>
    return 1;
 8051d86:	2301      	movs	r3, #1
 8051d88:	e000      	b.n	8051d8c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8051d8a:	2300      	movs	r3, #0
}
 8051d8c:	4618      	mov	r0, r3
 8051d8e:	3708      	adds	r7, #8
 8051d90:	46bd      	mov	sp, r7
 8051d92:	bd80      	pop	{r7, pc}
 8051d94:	0805c044 	.word	0x0805c044
 8051d98:	0805c214 	.word	0x0805c214
 8051d9c:	0805c090 	.word	0x0805c090
 8051da0:	2000b611 	.word	0x2000b611
 8051da4:	2000b5d8 	.word	0x2000b5d8

08051da8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8051da8:	b590      	push	{r4, r7, lr}
 8051daa:	b08b      	sub	sp, #44	; 0x2c
 8051dac:	af04      	add	r7, sp, #16
 8051dae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8051db0:	4b6f      	ldr	r3, [pc, #444]	; (8051f70 <tcp_listen_input+0x1c8>)
 8051db2:	781b      	ldrb	r3, [r3, #0]
 8051db4:	f003 0304 	and.w	r3, r3, #4
 8051db8:	2b00      	cmp	r3, #0
 8051dba:	f040 80d2 	bne.w	8051f62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8051dbe:	687b      	ldr	r3, [r7, #4]
 8051dc0:	2b00      	cmp	r3, #0
 8051dc2:	d106      	bne.n	8051dd2 <tcp_listen_input+0x2a>
 8051dc4:	4b6b      	ldr	r3, [pc, #428]	; (8051f74 <tcp_listen_input+0x1cc>)
 8051dc6:	f240 2281 	movw	r2, #641	; 0x281
 8051dca:	496b      	ldr	r1, [pc, #428]	; (8051f78 <tcp_listen_input+0x1d0>)
 8051dcc:	486b      	ldr	r0, [pc, #428]	; (8051f7c <tcp_listen_input+0x1d4>)
 8051dce:	f007 f931 	bl	8059034 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8051dd2:	4b67      	ldr	r3, [pc, #412]	; (8051f70 <tcp_listen_input+0x1c8>)
 8051dd4:	781b      	ldrb	r3, [r3, #0]
 8051dd6:	f003 0310 	and.w	r3, r3, #16
 8051dda:	2b00      	cmp	r3, #0
 8051ddc:	d019      	beq.n	8051e12 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051dde:	4b68      	ldr	r3, [pc, #416]	; (8051f80 <tcp_listen_input+0x1d8>)
 8051de0:	6819      	ldr	r1, [r3, #0]
 8051de2:	4b68      	ldr	r3, [pc, #416]	; (8051f84 <tcp_listen_input+0x1dc>)
 8051de4:	881b      	ldrh	r3, [r3, #0]
 8051de6:	461a      	mov	r2, r3
 8051de8:	4b67      	ldr	r3, [pc, #412]	; (8051f88 <tcp_listen_input+0x1e0>)
 8051dea:	681b      	ldr	r3, [r3, #0]
 8051dec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8051dee:	4b67      	ldr	r3, [pc, #412]	; (8051f8c <tcp_listen_input+0x1e4>)
 8051df0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051df2:	885b      	ldrh	r3, [r3, #2]
 8051df4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8051df6:	4a65      	ldr	r2, [pc, #404]	; (8051f8c <tcp_listen_input+0x1e4>)
 8051df8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051dfa:	8812      	ldrh	r2, [r2, #0]
 8051dfc:	b292      	uxth	r2, r2
 8051dfe:	9202      	str	r2, [sp, #8]
 8051e00:	9301      	str	r3, [sp, #4]
 8051e02:	4b63      	ldr	r3, [pc, #396]	; (8051f90 <tcp_listen_input+0x1e8>)
 8051e04:	9300      	str	r3, [sp, #0]
 8051e06:	4b63      	ldr	r3, [pc, #396]	; (8051f94 <tcp_listen_input+0x1ec>)
 8051e08:	4602      	mov	r2, r0
 8051e0a:	6878      	ldr	r0, [r7, #4]
 8051e0c:	f003 fbd8 	bl	80555c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8051e10:	e0a9      	b.n	8051f66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8051e12:	4b57      	ldr	r3, [pc, #348]	; (8051f70 <tcp_listen_input+0x1c8>)
 8051e14:	781b      	ldrb	r3, [r3, #0]
 8051e16:	f003 0302 	and.w	r3, r3, #2
 8051e1a:	2b00      	cmp	r3, #0
 8051e1c:	f000 80a3 	beq.w	8051f66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8051e20:	687b      	ldr	r3, [r7, #4]
 8051e22:	7d5b      	ldrb	r3, [r3, #21]
 8051e24:	4618      	mov	r0, r3
 8051e26:	f7ff f859 	bl	8050edc <tcp_alloc>
 8051e2a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8051e2c:	697b      	ldr	r3, [r7, #20]
 8051e2e:	2b00      	cmp	r3, #0
 8051e30:	d111      	bne.n	8051e56 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8051e32:	687b      	ldr	r3, [r7, #4]
 8051e34:	699b      	ldr	r3, [r3, #24]
 8051e36:	2b00      	cmp	r3, #0
 8051e38:	d00a      	beq.n	8051e50 <tcp_listen_input+0xa8>
 8051e3a:	687b      	ldr	r3, [r7, #4]
 8051e3c:	699b      	ldr	r3, [r3, #24]
 8051e3e:	687a      	ldr	r2, [r7, #4]
 8051e40:	6910      	ldr	r0, [r2, #16]
 8051e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8051e46:	2100      	movs	r1, #0
 8051e48:	4798      	blx	r3
 8051e4a:	4603      	mov	r3, r0
 8051e4c:	73bb      	strb	r3, [r7, #14]
      return;
 8051e4e:	e08b      	b.n	8051f68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8051e50:	23f0      	movs	r3, #240	; 0xf0
 8051e52:	73bb      	strb	r3, [r7, #14]
      return;
 8051e54:	e088      	b.n	8051f68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8051e56:	4b50      	ldr	r3, [pc, #320]	; (8051f98 <tcp_listen_input+0x1f0>)
 8051e58:	695a      	ldr	r2, [r3, #20]
 8051e5a:	697b      	ldr	r3, [r7, #20]
 8051e5c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8051e5e:	4b4e      	ldr	r3, [pc, #312]	; (8051f98 <tcp_listen_input+0x1f0>)
 8051e60:	691a      	ldr	r2, [r3, #16]
 8051e62:	697b      	ldr	r3, [r7, #20]
 8051e64:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8051e66:	687b      	ldr	r3, [r7, #4]
 8051e68:	8ada      	ldrh	r2, [r3, #22]
 8051e6a:	697b      	ldr	r3, [r7, #20]
 8051e6c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8051e6e:	4b47      	ldr	r3, [pc, #284]	; (8051f8c <tcp_listen_input+0x1e4>)
 8051e70:	681b      	ldr	r3, [r3, #0]
 8051e72:	881b      	ldrh	r3, [r3, #0]
 8051e74:	b29a      	uxth	r2, r3
 8051e76:	697b      	ldr	r3, [r7, #20]
 8051e78:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8051e7a:	697b      	ldr	r3, [r7, #20]
 8051e7c:	2203      	movs	r2, #3
 8051e7e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8051e80:	4b41      	ldr	r3, [pc, #260]	; (8051f88 <tcp_listen_input+0x1e0>)
 8051e82:	681b      	ldr	r3, [r3, #0]
 8051e84:	1c5a      	adds	r2, r3, #1
 8051e86:	697b      	ldr	r3, [r7, #20]
 8051e88:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8051e8a:	697b      	ldr	r3, [r7, #20]
 8051e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8051e8e:	697b      	ldr	r3, [r7, #20]
 8051e90:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8051e92:	6978      	ldr	r0, [r7, #20]
 8051e94:	f7ff fa58 	bl	8051348 <tcp_next_iss>
 8051e98:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8051e9a:	697b      	ldr	r3, [r7, #20]
 8051e9c:	693a      	ldr	r2, [r7, #16]
 8051e9e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8051ea0:	697b      	ldr	r3, [r7, #20]
 8051ea2:	693a      	ldr	r2, [r7, #16]
 8051ea4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8051ea6:	697b      	ldr	r3, [r7, #20]
 8051ea8:	693a      	ldr	r2, [r7, #16]
 8051eaa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8051eac:	697b      	ldr	r3, [r7, #20]
 8051eae:	693a      	ldr	r2, [r7, #16]
 8051eb0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8051eb2:	4b35      	ldr	r3, [pc, #212]	; (8051f88 <tcp_listen_input+0x1e0>)
 8051eb4:	681b      	ldr	r3, [r3, #0]
 8051eb6:	1e5a      	subs	r2, r3, #1
 8051eb8:	697b      	ldr	r3, [r7, #20]
 8051eba:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8051ebc:	687b      	ldr	r3, [r7, #4]
 8051ebe:	691a      	ldr	r2, [r3, #16]
 8051ec0:	697b      	ldr	r3, [r7, #20]
 8051ec2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8051ec4:	697b      	ldr	r3, [r7, #20]
 8051ec6:	687a      	ldr	r2, [r7, #4]
 8051ec8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8051eca:	687b      	ldr	r3, [r7, #4]
 8051ecc:	7a5b      	ldrb	r3, [r3, #9]
 8051ece:	f003 030c 	and.w	r3, r3, #12
 8051ed2:	b2da      	uxtb	r2, r3
 8051ed4:	697b      	ldr	r3, [r7, #20]
 8051ed6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8051ed8:	687b      	ldr	r3, [r7, #4]
 8051eda:	7a1a      	ldrb	r2, [r3, #8]
 8051edc:	697b      	ldr	r3, [r7, #20]
 8051ede:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8051ee0:	4b2e      	ldr	r3, [pc, #184]	; (8051f9c <tcp_listen_input+0x1f4>)
 8051ee2:	681a      	ldr	r2, [r3, #0]
 8051ee4:	697b      	ldr	r3, [r7, #20]
 8051ee6:	60da      	str	r2, [r3, #12]
 8051ee8:	4a2c      	ldr	r2, [pc, #176]	; (8051f9c <tcp_listen_input+0x1f4>)
 8051eea:	697b      	ldr	r3, [r7, #20]
 8051eec:	6013      	str	r3, [r2, #0]
 8051eee:	f003 fd29 	bl	8055944 <tcp_timer_needed>
 8051ef2:	4b2b      	ldr	r3, [pc, #172]	; (8051fa0 <tcp_listen_input+0x1f8>)
 8051ef4:	2201      	movs	r2, #1
 8051ef6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8051ef8:	6978      	ldr	r0, [r7, #20]
 8051efa:	f001 fd8f 	bl	8053a1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8051efe:	4b23      	ldr	r3, [pc, #140]	; (8051f8c <tcp_listen_input+0x1e4>)
 8051f00:	681b      	ldr	r3, [r3, #0]
 8051f02:	89db      	ldrh	r3, [r3, #14]
 8051f04:	b29a      	uxth	r2, r3
 8051f06:	697b      	ldr	r3, [r7, #20]
 8051f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8051f0c:	697b      	ldr	r3, [r7, #20]
 8051f0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8051f12:	697b      	ldr	r3, [r7, #20]
 8051f14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8051f18:	697b      	ldr	r3, [r7, #20]
 8051f1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8051f1c:	697b      	ldr	r3, [r7, #20]
 8051f1e:	3304      	adds	r3, #4
 8051f20:	4618      	mov	r0, r3
 8051f22:	f005 fa63 	bl	80573ec <ip4_route>
 8051f26:	4601      	mov	r1, r0
 8051f28:	697b      	ldr	r3, [r7, #20]
 8051f2a:	3304      	adds	r3, #4
 8051f2c:	461a      	mov	r2, r3
 8051f2e:	4620      	mov	r0, r4
 8051f30:	f7ff fa30 	bl	8051394 <tcp_eff_send_mss_netif>
 8051f34:	4603      	mov	r3, r0
 8051f36:	461a      	mov	r2, r3
 8051f38:	697b      	ldr	r3, [r7, #20]
 8051f3a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8051f3c:	2112      	movs	r1, #18
 8051f3e:	6978      	ldr	r0, [r7, #20]
 8051f40:	f002 fc9c 	bl	805487c <tcp_enqueue_flags>
 8051f44:	4603      	mov	r3, r0
 8051f46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8051f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8051f4c:	2b00      	cmp	r3, #0
 8051f4e:	d004      	beq.n	8051f5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8051f50:	2100      	movs	r1, #0
 8051f52:	6978      	ldr	r0, [r7, #20]
 8051f54:	f7fd ff08 	bl	804fd68 <tcp_abandon>
      return;
 8051f58:	e006      	b.n	8051f68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8051f5a:	6978      	ldr	r0, [r7, #20]
 8051f5c:	f002 fd7c 	bl	8054a58 <tcp_output>
  return;
 8051f60:	e001      	b.n	8051f66 <tcp_listen_input+0x1be>
    return;
 8051f62:	bf00      	nop
 8051f64:	e000      	b.n	8051f68 <tcp_listen_input+0x1c0>
  return;
 8051f66:	bf00      	nop
}
 8051f68:	371c      	adds	r7, #28
 8051f6a:	46bd      	mov	sp, r7
 8051f6c:	bd90      	pop	{r4, r7, pc}
 8051f6e:	bf00      	nop
 8051f70:	2000b610 	.word	0x2000b610
 8051f74:	0805c044 	.word	0x0805c044
 8051f78:	0805c23c 	.word	0x0805c23c
 8051f7c:	0805c090 	.word	0x0805c090
 8051f80:	2000b608 	.word	0x2000b608
 8051f84:	2000b60e 	.word	0x2000b60e
 8051f88:	2000b604 	.word	0x2000b604
 8051f8c:	2000b5f4 	.word	0x2000b5f4
 8051f90:	20005cc8 	.word	0x20005cc8
 8051f94:	20005ccc 	.word	0x20005ccc
 8051f98:	20005cb8 	.word	0x20005cb8
 8051f9c:	2000b5d8 	.word	0x2000b5d8
 8051fa0:	2000b5e0 	.word	0x2000b5e0

08051fa4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8051fa4:	b580      	push	{r7, lr}
 8051fa6:	b086      	sub	sp, #24
 8051fa8:	af04      	add	r7, sp, #16
 8051faa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8051fac:	4b2f      	ldr	r3, [pc, #188]	; (805206c <tcp_timewait_input+0xc8>)
 8051fae:	781b      	ldrb	r3, [r3, #0]
 8051fb0:	f003 0304 	and.w	r3, r3, #4
 8051fb4:	2b00      	cmp	r3, #0
 8051fb6:	d153      	bne.n	8052060 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8051fb8:	687b      	ldr	r3, [r7, #4]
 8051fba:	2b00      	cmp	r3, #0
 8051fbc:	d106      	bne.n	8051fcc <tcp_timewait_input+0x28>
 8051fbe:	4b2c      	ldr	r3, [pc, #176]	; (8052070 <tcp_timewait_input+0xcc>)
 8051fc0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8051fc4:	492b      	ldr	r1, [pc, #172]	; (8052074 <tcp_timewait_input+0xd0>)
 8051fc6:	482c      	ldr	r0, [pc, #176]	; (8052078 <tcp_timewait_input+0xd4>)
 8051fc8:	f007 f834 	bl	8059034 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8051fcc:	4b27      	ldr	r3, [pc, #156]	; (805206c <tcp_timewait_input+0xc8>)
 8051fce:	781b      	ldrb	r3, [r3, #0]
 8051fd0:	f003 0302 	and.w	r3, r3, #2
 8051fd4:	2b00      	cmp	r3, #0
 8051fd6:	d02a      	beq.n	805202e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8051fd8:	4b28      	ldr	r3, [pc, #160]	; (805207c <tcp_timewait_input+0xd8>)
 8051fda:	681a      	ldr	r2, [r3, #0]
 8051fdc:	687b      	ldr	r3, [r7, #4]
 8051fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051fe0:	1ad3      	subs	r3, r2, r3
 8051fe2:	2b00      	cmp	r3, #0
 8051fe4:	db2d      	blt.n	8052042 <tcp_timewait_input+0x9e>
 8051fe6:	4b25      	ldr	r3, [pc, #148]	; (805207c <tcp_timewait_input+0xd8>)
 8051fe8:	681a      	ldr	r2, [r3, #0]
 8051fea:	687b      	ldr	r3, [r7, #4]
 8051fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8051fee:	6879      	ldr	r1, [r7, #4]
 8051ff0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8051ff2:	440b      	add	r3, r1
 8051ff4:	1ad3      	subs	r3, r2, r3
 8051ff6:	2b00      	cmp	r3, #0
 8051ff8:	dc23      	bgt.n	8052042 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8051ffa:	4b21      	ldr	r3, [pc, #132]	; (8052080 <tcp_timewait_input+0xdc>)
 8051ffc:	6819      	ldr	r1, [r3, #0]
 8051ffe:	4b21      	ldr	r3, [pc, #132]	; (8052084 <tcp_timewait_input+0xe0>)
 8052000:	881b      	ldrh	r3, [r3, #0]
 8052002:	461a      	mov	r2, r3
 8052004:	4b1d      	ldr	r3, [pc, #116]	; (805207c <tcp_timewait_input+0xd8>)
 8052006:	681b      	ldr	r3, [r3, #0]
 8052008:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 805200a:	4b1f      	ldr	r3, [pc, #124]	; (8052088 <tcp_timewait_input+0xe4>)
 805200c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 805200e:	885b      	ldrh	r3, [r3, #2]
 8052010:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8052012:	4a1d      	ldr	r2, [pc, #116]	; (8052088 <tcp_timewait_input+0xe4>)
 8052014:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8052016:	8812      	ldrh	r2, [r2, #0]
 8052018:	b292      	uxth	r2, r2
 805201a:	9202      	str	r2, [sp, #8]
 805201c:	9301      	str	r3, [sp, #4]
 805201e:	4b1b      	ldr	r3, [pc, #108]	; (805208c <tcp_timewait_input+0xe8>)
 8052020:	9300      	str	r3, [sp, #0]
 8052022:	4b1b      	ldr	r3, [pc, #108]	; (8052090 <tcp_timewait_input+0xec>)
 8052024:	4602      	mov	r2, r0
 8052026:	6878      	ldr	r0, [r7, #4]
 8052028:	f003 faca 	bl	80555c0 <tcp_rst>
      return;
 805202c:	e01b      	b.n	8052066 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 805202e:	4b0f      	ldr	r3, [pc, #60]	; (805206c <tcp_timewait_input+0xc8>)
 8052030:	781b      	ldrb	r3, [r3, #0]
 8052032:	f003 0301 	and.w	r3, r3, #1
 8052036:	2b00      	cmp	r3, #0
 8052038:	d003      	beq.n	8052042 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 805203a:	4b16      	ldr	r3, [pc, #88]	; (8052094 <tcp_timewait_input+0xf0>)
 805203c:	681a      	ldr	r2, [r3, #0]
 805203e:	687b      	ldr	r3, [r7, #4]
 8052040:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8052042:	4b10      	ldr	r3, [pc, #64]	; (8052084 <tcp_timewait_input+0xe0>)
 8052044:	881b      	ldrh	r3, [r3, #0]
 8052046:	2b00      	cmp	r3, #0
 8052048:	d00c      	beq.n	8052064 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 805204a:	687b      	ldr	r3, [r7, #4]
 805204c:	8b5b      	ldrh	r3, [r3, #26]
 805204e:	f043 0302 	orr.w	r3, r3, #2
 8052052:	b29a      	uxth	r2, r3
 8052054:	687b      	ldr	r3, [r7, #4]
 8052056:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8052058:	6878      	ldr	r0, [r7, #4]
 805205a:	f002 fcfd 	bl	8054a58 <tcp_output>
  }
  return;
 805205e:	e001      	b.n	8052064 <tcp_timewait_input+0xc0>
    return;
 8052060:	bf00      	nop
 8052062:	e000      	b.n	8052066 <tcp_timewait_input+0xc2>
  return;
 8052064:	bf00      	nop
}
 8052066:	3708      	adds	r7, #8
 8052068:	46bd      	mov	sp, r7
 805206a:	bd80      	pop	{r7, pc}
 805206c:	2000b610 	.word	0x2000b610
 8052070:	0805c044 	.word	0x0805c044
 8052074:	0805c25c 	.word	0x0805c25c
 8052078:	0805c090 	.word	0x0805c090
 805207c:	2000b604 	.word	0x2000b604
 8052080:	2000b608 	.word	0x2000b608
 8052084:	2000b60e 	.word	0x2000b60e
 8052088:	2000b5f4 	.word	0x2000b5f4
 805208c:	20005cc8 	.word	0x20005cc8
 8052090:	20005ccc 	.word	0x20005ccc
 8052094:	2000b5cc 	.word	0x2000b5cc

08052098 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8052098:	b590      	push	{r4, r7, lr}
 805209a:	b08d      	sub	sp, #52	; 0x34
 805209c:	af04      	add	r7, sp, #16
 805209e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80520a0:	2300      	movs	r3, #0
 80520a2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80520a4:	2300      	movs	r3, #0
 80520a6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80520a8:	687b      	ldr	r3, [r7, #4]
 80520aa:	2b00      	cmp	r3, #0
 80520ac:	d106      	bne.n	80520bc <tcp_process+0x24>
 80520ae:	4b9d      	ldr	r3, [pc, #628]	; (8052324 <tcp_process+0x28c>)
 80520b0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80520b4:	499c      	ldr	r1, [pc, #624]	; (8052328 <tcp_process+0x290>)
 80520b6:	489d      	ldr	r0, [pc, #628]	; (805232c <tcp_process+0x294>)
 80520b8:	f006 ffbc 	bl	8059034 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80520bc:	4b9c      	ldr	r3, [pc, #624]	; (8052330 <tcp_process+0x298>)
 80520be:	781b      	ldrb	r3, [r3, #0]
 80520c0:	f003 0304 	and.w	r3, r3, #4
 80520c4:	2b00      	cmp	r3, #0
 80520c6:	d04e      	beq.n	8052166 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80520c8:	687b      	ldr	r3, [r7, #4]
 80520ca:	7d1b      	ldrb	r3, [r3, #20]
 80520cc:	2b02      	cmp	r3, #2
 80520ce:	d108      	bne.n	80520e2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80520d0:	687b      	ldr	r3, [r7, #4]
 80520d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80520d4:	4b97      	ldr	r3, [pc, #604]	; (8052334 <tcp_process+0x29c>)
 80520d6:	681b      	ldr	r3, [r3, #0]
 80520d8:	429a      	cmp	r2, r3
 80520da:	d123      	bne.n	8052124 <tcp_process+0x8c>
        acceptable = 1;
 80520dc:	2301      	movs	r3, #1
 80520de:	76fb      	strb	r3, [r7, #27]
 80520e0:	e020      	b.n	8052124 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80520e2:	687b      	ldr	r3, [r7, #4]
 80520e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80520e6:	4b94      	ldr	r3, [pc, #592]	; (8052338 <tcp_process+0x2a0>)
 80520e8:	681b      	ldr	r3, [r3, #0]
 80520ea:	429a      	cmp	r2, r3
 80520ec:	d102      	bne.n	80520f4 <tcp_process+0x5c>
        acceptable = 1;
 80520ee:	2301      	movs	r3, #1
 80520f0:	76fb      	strb	r3, [r7, #27]
 80520f2:	e017      	b.n	8052124 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80520f4:	4b90      	ldr	r3, [pc, #576]	; (8052338 <tcp_process+0x2a0>)
 80520f6:	681a      	ldr	r2, [r3, #0]
 80520f8:	687b      	ldr	r3, [r7, #4]
 80520fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80520fc:	1ad3      	subs	r3, r2, r3
 80520fe:	2b00      	cmp	r3, #0
 8052100:	db10      	blt.n	8052124 <tcp_process+0x8c>
 8052102:	4b8d      	ldr	r3, [pc, #564]	; (8052338 <tcp_process+0x2a0>)
 8052104:	681a      	ldr	r2, [r3, #0]
 8052106:	687b      	ldr	r3, [r7, #4]
 8052108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805210a:	6879      	ldr	r1, [r7, #4]
 805210c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 805210e:	440b      	add	r3, r1
 8052110:	1ad3      	subs	r3, r2, r3
 8052112:	2b00      	cmp	r3, #0
 8052114:	dc06      	bgt.n	8052124 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8052116:	687b      	ldr	r3, [r7, #4]
 8052118:	8b5b      	ldrh	r3, [r3, #26]
 805211a:	f043 0302 	orr.w	r3, r3, #2
 805211e:	b29a      	uxth	r2, r3
 8052120:	687b      	ldr	r3, [r7, #4]
 8052122:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8052124:	7efb      	ldrb	r3, [r7, #27]
 8052126:	2b00      	cmp	r3, #0
 8052128:	d01b      	beq.n	8052162 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 805212a:	687b      	ldr	r3, [r7, #4]
 805212c:	7d1b      	ldrb	r3, [r3, #20]
 805212e:	2b00      	cmp	r3, #0
 8052130:	d106      	bne.n	8052140 <tcp_process+0xa8>
 8052132:	4b7c      	ldr	r3, [pc, #496]	; (8052324 <tcp_process+0x28c>)
 8052134:	f44f 724e 	mov.w	r2, #824	; 0x338
 8052138:	4980      	ldr	r1, [pc, #512]	; (805233c <tcp_process+0x2a4>)
 805213a:	487c      	ldr	r0, [pc, #496]	; (805232c <tcp_process+0x294>)
 805213c:	f006 ff7a 	bl	8059034 <iprintf>
      recv_flags |= TF_RESET;
 8052140:	4b7f      	ldr	r3, [pc, #508]	; (8052340 <tcp_process+0x2a8>)
 8052142:	781b      	ldrb	r3, [r3, #0]
 8052144:	f043 0308 	orr.w	r3, r3, #8
 8052148:	b2da      	uxtb	r2, r3
 805214a:	4b7d      	ldr	r3, [pc, #500]	; (8052340 <tcp_process+0x2a8>)
 805214c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 805214e:	687b      	ldr	r3, [r7, #4]
 8052150:	8b5b      	ldrh	r3, [r3, #26]
 8052152:	f023 0301 	bic.w	r3, r3, #1
 8052156:	b29a      	uxth	r2, r3
 8052158:	687b      	ldr	r3, [r7, #4]
 805215a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 805215c:	f06f 030d 	mvn.w	r3, #13
 8052160:	e37a      	b.n	8052858 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8052162:	2300      	movs	r3, #0
 8052164:	e378      	b.n	8052858 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8052166:	4b72      	ldr	r3, [pc, #456]	; (8052330 <tcp_process+0x298>)
 8052168:	781b      	ldrb	r3, [r3, #0]
 805216a:	f003 0302 	and.w	r3, r3, #2
 805216e:	2b00      	cmp	r3, #0
 8052170:	d010      	beq.n	8052194 <tcp_process+0xfc>
 8052172:	687b      	ldr	r3, [r7, #4]
 8052174:	7d1b      	ldrb	r3, [r3, #20]
 8052176:	2b02      	cmp	r3, #2
 8052178:	d00c      	beq.n	8052194 <tcp_process+0xfc>
 805217a:	687b      	ldr	r3, [r7, #4]
 805217c:	7d1b      	ldrb	r3, [r3, #20]
 805217e:	2b03      	cmp	r3, #3
 8052180:	d008      	beq.n	8052194 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8052182:	687b      	ldr	r3, [r7, #4]
 8052184:	8b5b      	ldrh	r3, [r3, #26]
 8052186:	f043 0302 	orr.w	r3, r3, #2
 805218a:	b29a      	uxth	r2, r3
 805218c:	687b      	ldr	r3, [r7, #4]
 805218e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8052190:	2300      	movs	r3, #0
 8052192:	e361      	b.n	8052858 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8052194:	687b      	ldr	r3, [r7, #4]
 8052196:	8b5b      	ldrh	r3, [r3, #26]
 8052198:	f003 0310 	and.w	r3, r3, #16
 805219c:	2b00      	cmp	r3, #0
 805219e:	d103      	bne.n	80521a8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80521a0:	4b68      	ldr	r3, [pc, #416]	; (8052344 <tcp_process+0x2ac>)
 80521a2:	681a      	ldr	r2, [r3, #0]
 80521a4:	687b      	ldr	r3, [r7, #4]
 80521a6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80521a8:	687b      	ldr	r3, [r7, #4]
 80521aa:	2200      	movs	r2, #0
 80521ac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80521b0:	687b      	ldr	r3, [r7, #4]
 80521b2:	2200      	movs	r2, #0
 80521b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80521b8:	6878      	ldr	r0, [r7, #4]
 80521ba:	f001 fc2f 	bl	8053a1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80521be:	687b      	ldr	r3, [r7, #4]
 80521c0:	7d1b      	ldrb	r3, [r3, #20]
 80521c2:	3b02      	subs	r3, #2
 80521c4:	2b07      	cmp	r3, #7
 80521c6:	f200 8337 	bhi.w	8052838 <tcp_process+0x7a0>
 80521ca:	a201      	add	r2, pc, #4	; (adr r2, 80521d0 <tcp_process+0x138>)
 80521cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80521d0:	080521f1 	.word	0x080521f1
 80521d4:	08052421 	.word	0x08052421
 80521d8:	08052599 	.word	0x08052599
 80521dc:	080525c3 	.word	0x080525c3
 80521e0:	080526e7 	.word	0x080526e7
 80521e4:	08052599 	.word	0x08052599
 80521e8:	08052773 	.word	0x08052773
 80521ec:	08052803 	.word	0x08052803
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80521f0:	4b4f      	ldr	r3, [pc, #316]	; (8052330 <tcp_process+0x298>)
 80521f2:	781b      	ldrb	r3, [r3, #0]
 80521f4:	f003 0310 	and.w	r3, r3, #16
 80521f8:	2b00      	cmp	r3, #0
 80521fa:	f000 80e4 	beq.w	80523c6 <tcp_process+0x32e>
 80521fe:	4b4c      	ldr	r3, [pc, #304]	; (8052330 <tcp_process+0x298>)
 8052200:	781b      	ldrb	r3, [r3, #0]
 8052202:	f003 0302 	and.w	r3, r3, #2
 8052206:	2b00      	cmp	r3, #0
 8052208:	f000 80dd 	beq.w	80523c6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 805220c:	687b      	ldr	r3, [r7, #4]
 805220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8052210:	1c5a      	adds	r2, r3, #1
 8052212:	4b48      	ldr	r3, [pc, #288]	; (8052334 <tcp_process+0x29c>)
 8052214:	681b      	ldr	r3, [r3, #0]
 8052216:	429a      	cmp	r2, r3
 8052218:	f040 80d5 	bne.w	80523c6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 805221c:	4b46      	ldr	r3, [pc, #280]	; (8052338 <tcp_process+0x2a0>)
 805221e:	681b      	ldr	r3, [r3, #0]
 8052220:	1c5a      	adds	r2, r3, #1
 8052222:	687b      	ldr	r3, [r7, #4]
 8052224:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8052226:	687b      	ldr	r3, [r7, #4]
 8052228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 805222a:	687b      	ldr	r3, [r7, #4]
 805222c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 805222e:	4b41      	ldr	r3, [pc, #260]	; (8052334 <tcp_process+0x29c>)
 8052230:	681a      	ldr	r2, [r3, #0]
 8052232:	687b      	ldr	r3, [r7, #4]
 8052234:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8052236:	4b44      	ldr	r3, [pc, #272]	; (8052348 <tcp_process+0x2b0>)
 8052238:	681b      	ldr	r3, [r3, #0]
 805223a:	89db      	ldrh	r3, [r3, #14]
 805223c:	b29a      	uxth	r2, r3
 805223e:	687b      	ldr	r3, [r7, #4]
 8052240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8052244:	687b      	ldr	r3, [r7, #4]
 8052246:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 805224a:	687b      	ldr	r3, [r7, #4]
 805224c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8052250:	4b39      	ldr	r3, [pc, #228]	; (8052338 <tcp_process+0x2a0>)
 8052252:	681b      	ldr	r3, [r3, #0]
 8052254:	1e5a      	subs	r2, r3, #1
 8052256:	687b      	ldr	r3, [r7, #4]
 8052258:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 805225a:	687b      	ldr	r3, [r7, #4]
 805225c:	2204      	movs	r2, #4
 805225e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8052260:	687b      	ldr	r3, [r7, #4]
 8052262:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8052264:	687b      	ldr	r3, [r7, #4]
 8052266:	3304      	adds	r3, #4
 8052268:	4618      	mov	r0, r3
 805226a:	f005 f8bf 	bl	80573ec <ip4_route>
 805226e:	4601      	mov	r1, r0
 8052270:	687b      	ldr	r3, [r7, #4]
 8052272:	3304      	adds	r3, #4
 8052274:	461a      	mov	r2, r3
 8052276:	4620      	mov	r0, r4
 8052278:	f7ff f88c 	bl	8051394 <tcp_eff_send_mss_netif>
 805227c:	4603      	mov	r3, r0
 805227e:	461a      	mov	r2, r3
 8052280:	687b      	ldr	r3, [r7, #4]
 8052282:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8052284:	687b      	ldr	r3, [r7, #4]
 8052286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8052288:	009a      	lsls	r2, r3, #2
 805228a:	687b      	ldr	r3, [r7, #4]
 805228c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 805228e:	005b      	lsls	r3, r3, #1
 8052290:	f241 111c 	movw	r1, #4380	; 0x111c
 8052294:	428b      	cmp	r3, r1
 8052296:	bf38      	it	cc
 8052298:	460b      	movcc	r3, r1
 805229a:	429a      	cmp	r2, r3
 805229c:	d204      	bcs.n	80522a8 <tcp_process+0x210>
 805229e:	687b      	ldr	r3, [r7, #4]
 80522a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80522a2:	009b      	lsls	r3, r3, #2
 80522a4:	b29b      	uxth	r3, r3
 80522a6:	e00d      	b.n	80522c4 <tcp_process+0x22c>
 80522a8:	687b      	ldr	r3, [r7, #4]
 80522aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80522ac:	005b      	lsls	r3, r3, #1
 80522ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80522b2:	4293      	cmp	r3, r2
 80522b4:	d904      	bls.n	80522c0 <tcp_process+0x228>
 80522b6:	687b      	ldr	r3, [r7, #4]
 80522b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80522ba:	005b      	lsls	r3, r3, #1
 80522bc:	b29b      	uxth	r3, r3
 80522be:	e001      	b.n	80522c4 <tcp_process+0x22c>
 80522c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80522c4:	687a      	ldr	r2, [r7, #4]
 80522c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80522ca:	687b      	ldr	r3, [r7, #4]
 80522cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80522d0:	2b00      	cmp	r3, #0
 80522d2:	d106      	bne.n	80522e2 <tcp_process+0x24a>
 80522d4:	4b13      	ldr	r3, [pc, #76]	; (8052324 <tcp_process+0x28c>)
 80522d6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80522da:	491c      	ldr	r1, [pc, #112]	; (805234c <tcp_process+0x2b4>)
 80522dc:	4813      	ldr	r0, [pc, #76]	; (805232c <tcp_process+0x294>)
 80522de:	f006 fea9 	bl	8059034 <iprintf>
        --pcb->snd_queuelen;
 80522e2:	687b      	ldr	r3, [r7, #4]
 80522e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80522e8:	3b01      	subs	r3, #1
 80522ea:	b29a      	uxth	r2, r3
 80522ec:	687b      	ldr	r3, [r7, #4]
 80522ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80522f2:	687b      	ldr	r3, [r7, #4]
 80522f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80522f6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80522f8:	69fb      	ldr	r3, [r7, #28]
 80522fa:	2b00      	cmp	r3, #0
 80522fc:	d12a      	bne.n	8052354 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80522fe:	687b      	ldr	r3, [r7, #4]
 8052300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052302:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8052304:	69fb      	ldr	r3, [r7, #28]
 8052306:	2b00      	cmp	r3, #0
 8052308:	d106      	bne.n	8052318 <tcp_process+0x280>
 805230a:	4b06      	ldr	r3, [pc, #24]	; (8052324 <tcp_process+0x28c>)
 805230c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8052310:	490f      	ldr	r1, [pc, #60]	; (8052350 <tcp_process+0x2b8>)
 8052312:	4806      	ldr	r0, [pc, #24]	; (805232c <tcp_process+0x294>)
 8052314:	f006 fe8e 	bl	8059034 <iprintf>
          pcb->unsent = rseg->next;
 8052318:	69fb      	ldr	r3, [r7, #28]
 805231a:	681a      	ldr	r2, [r3, #0]
 805231c:	687b      	ldr	r3, [r7, #4]
 805231e:	66da      	str	r2, [r3, #108]	; 0x6c
 8052320:	e01c      	b.n	805235c <tcp_process+0x2c4>
 8052322:	bf00      	nop
 8052324:	0805c044 	.word	0x0805c044
 8052328:	0805c27c 	.word	0x0805c27c
 805232c:	0805c090 	.word	0x0805c090
 8052330:	2000b610 	.word	0x2000b610
 8052334:	2000b608 	.word	0x2000b608
 8052338:	2000b604 	.word	0x2000b604
 805233c:	0805c298 	.word	0x0805c298
 8052340:	2000b611 	.word	0x2000b611
 8052344:	2000b5cc 	.word	0x2000b5cc
 8052348:	2000b5f4 	.word	0x2000b5f4
 805234c:	0805c2b8 	.word	0x0805c2b8
 8052350:	0805c2d0 	.word	0x0805c2d0
        } else {
          pcb->unacked = rseg->next;
 8052354:	69fb      	ldr	r3, [r7, #28]
 8052356:	681a      	ldr	r2, [r3, #0]
 8052358:	687b      	ldr	r3, [r7, #4]
 805235a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 805235c:	69f8      	ldr	r0, [r7, #28]
 805235e:	f7fe fc54 	bl	8050c0a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8052362:	687b      	ldr	r3, [r7, #4]
 8052364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8052366:	2b00      	cmp	r3, #0
 8052368:	d104      	bne.n	8052374 <tcp_process+0x2dc>
          pcb->rtime = -1;
 805236a:	687b      	ldr	r3, [r7, #4]
 805236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8052370:	861a      	strh	r2, [r3, #48]	; 0x30
 8052372:	e006      	b.n	8052382 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8052374:	687b      	ldr	r3, [r7, #4]
 8052376:	2200      	movs	r2, #0
 8052378:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 805237a:	687b      	ldr	r3, [r7, #4]
 805237c:	2200      	movs	r2, #0
 805237e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8052382:	687b      	ldr	r3, [r7, #4]
 8052384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8052388:	2b00      	cmp	r3, #0
 805238a:	d00a      	beq.n	80523a2 <tcp_process+0x30a>
 805238c:	687b      	ldr	r3, [r7, #4]
 805238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8052392:	687a      	ldr	r2, [r7, #4]
 8052394:	6910      	ldr	r0, [r2, #16]
 8052396:	2200      	movs	r2, #0
 8052398:	6879      	ldr	r1, [r7, #4]
 805239a:	4798      	blx	r3
 805239c:	4603      	mov	r3, r0
 805239e:	76bb      	strb	r3, [r7, #26]
 80523a0:	e001      	b.n	80523a6 <tcp_process+0x30e>
 80523a2:	2300      	movs	r3, #0
 80523a4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80523a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80523aa:	f113 0f0d 	cmn.w	r3, #13
 80523ae:	d102      	bne.n	80523b6 <tcp_process+0x31e>
          return ERR_ABRT;
 80523b0:	f06f 030c 	mvn.w	r3, #12
 80523b4:	e250      	b.n	8052858 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80523b6:	687b      	ldr	r3, [r7, #4]
 80523b8:	8b5b      	ldrh	r3, [r3, #26]
 80523ba:	f043 0302 	orr.w	r3, r3, #2
 80523be:	b29a      	uxth	r2, r3
 80523c0:	687b      	ldr	r3, [r7, #4]
 80523c2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80523c4:	e23a      	b.n	805283c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80523c6:	4b98      	ldr	r3, [pc, #608]	; (8052628 <tcp_process+0x590>)
 80523c8:	781b      	ldrb	r3, [r3, #0]
 80523ca:	f003 0310 	and.w	r3, r3, #16
 80523ce:	2b00      	cmp	r3, #0
 80523d0:	f000 8234 	beq.w	805283c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80523d4:	4b95      	ldr	r3, [pc, #596]	; (805262c <tcp_process+0x594>)
 80523d6:	6819      	ldr	r1, [r3, #0]
 80523d8:	4b95      	ldr	r3, [pc, #596]	; (8052630 <tcp_process+0x598>)
 80523da:	881b      	ldrh	r3, [r3, #0]
 80523dc:	461a      	mov	r2, r3
 80523de:	4b95      	ldr	r3, [pc, #596]	; (8052634 <tcp_process+0x59c>)
 80523e0:	681b      	ldr	r3, [r3, #0]
 80523e2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80523e4:	4b94      	ldr	r3, [pc, #592]	; (8052638 <tcp_process+0x5a0>)
 80523e6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80523e8:	885b      	ldrh	r3, [r3, #2]
 80523ea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80523ec:	4a92      	ldr	r2, [pc, #584]	; (8052638 <tcp_process+0x5a0>)
 80523ee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80523f0:	8812      	ldrh	r2, [r2, #0]
 80523f2:	b292      	uxth	r2, r2
 80523f4:	9202      	str	r2, [sp, #8]
 80523f6:	9301      	str	r3, [sp, #4]
 80523f8:	4b90      	ldr	r3, [pc, #576]	; (805263c <tcp_process+0x5a4>)
 80523fa:	9300      	str	r3, [sp, #0]
 80523fc:	4b90      	ldr	r3, [pc, #576]	; (8052640 <tcp_process+0x5a8>)
 80523fe:	4602      	mov	r2, r0
 8052400:	6878      	ldr	r0, [r7, #4]
 8052402:	f003 f8dd 	bl	80555c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8052406:	687b      	ldr	r3, [r7, #4]
 8052408:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 805240c:	2b05      	cmp	r3, #5
 805240e:	f200 8215 	bhi.w	805283c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8052412:	687b      	ldr	r3, [r7, #4]
 8052414:	2200      	movs	r2, #0
 8052416:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8052418:	6878      	ldr	r0, [r7, #4]
 805241a:	f002 fea7 	bl	805516c <tcp_rexmit_rto>
      break;
 805241e:	e20d      	b.n	805283c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8052420:	4b81      	ldr	r3, [pc, #516]	; (8052628 <tcp_process+0x590>)
 8052422:	781b      	ldrb	r3, [r3, #0]
 8052424:	f003 0310 	and.w	r3, r3, #16
 8052428:	2b00      	cmp	r3, #0
 805242a:	f000 80a1 	beq.w	8052570 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 805242e:	4b7f      	ldr	r3, [pc, #508]	; (805262c <tcp_process+0x594>)
 8052430:	681a      	ldr	r2, [r3, #0]
 8052432:	687b      	ldr	r3, [r7, #4]
 8052434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8052436:	1ad3      	subs	r3, r2, r3
 8052438:	3b01      	subs	r3, #1
 805243a:	2b00      	cmp	r3, #0
 805243c:	db7e      	blt.n	805253c <tcp_process+0x4a4>
 805243e:	4b7b      	ldr	r3, [pc, #492]	; (805262c <tcp_process+0x594>)
 8052440:	681a      	ldr	r2, [r3, #0]
 8052442:	687b      	ldr	r3, [r7, #4]
 8052444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8052446:	1ad3      	subs	r3, r2, r3
 8052448:	2b00      	cmp	r3, #0
 805244a:	dc77      	bgt.n	805253c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 805244c:	687b      	ldr	r3, [r7, #4]
 805244e:	2204      	movs	r2, #4
 8052450:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8052452:	687b      	ldr	r3, [r7, #4]
 8052454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8052456:	2b00      	cmp	r3, #0
 8052458:	d102      	bne.n	8052460 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 805245a:	23fa      	movs	r3, #250	; 0xfa
 805245c:	76bb      	strb	r3, [r7, #26]
 805245e:	e01d      	b.n	805249c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8052460:	687b      	ldr	r3, [r7, #4]
 8052462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8052464:	699b      	ldr	r3, [r3, #24]
 8052466:	2b00      	cmp	r3, #0
 8052468:	d106      	bne.n	8052478 <tcp_process+0x3e0>
 805246a:	4b76      	ldr	r3, [pc, #472]	; (8052644 <tcp_process+0x5ac>)
 805246c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8052470:	4975      	ldr	r1, [pc, #468]	; (8052648 <tcp_process+0x5b0>)
 8052472:	4876      	ldr	r0, [pc, #472]	; (805264c <tcp_process+0x5b4>)
 8052474:	f006 fdde 	bl	8059034 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8052478:	687b      	ldr	r3, [r7, #4]
 805247a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 805247c:	699b      	ldr	r3, [r3, #24]
 805247e:	2b00      	cmp	r3, #0
 8052480:	d00a      	beq.n	8052498 <tcp_process+0x400>
 8052482:	687b      	ldr	r3, [r7, #4]
 8052484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8052486:	699b      	ldr	r3, [r3, #24]
 8052488:	687a      	ldr	r2, [r7, #4]
 805248a:	6910      	ldr	r0, [r2, #16]
 805248c:	2200      	movs	r2, #0
 805248e:	6879      	ldr	r1, [r7, #4]
 8052490:	4798      	blx	r3
 8052492:	4603      	mov	r3, r0
 8052494:	76bb      	strb	r3, [r7, #26]
 8052496:	e001      	b.n	805249c <tcp_process+0x404>
 8052498:	23f0      	movs	r3, #240	; 0xf0
 805249a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 805249c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80524a0:	2b00      	cmp	r3, #0
 80524a2:	d00a      	beq.n	80524ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80524a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80524a8:	f113 0f0d 	cmn.w	r3, #13
 80524ac:	d002      	beq.n	80524b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80524ae:	6878      	ldr	r0, [r7, #4]
 80524b0:	f7fd fd18 	bl	804fee4 <tcp_abort>
            }
            return ERR_ABRT;
 80524b4:	f06f 030c 	mvn.w	r3, #12
 80524b8:	e1ce      	b.n	8052858 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80524ba:	6878      	ldr	r0, [r7, #4]
 80524bc:	f000 fae0 	bl	8052a80 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80524c0:	4b63      	ldr	r3, [pc, #396]	; (8052650 <tcp_process+0x5b8>)
 80524c2:	881b      	ldrh	r3, [r3, #0]
 80524c4:	2b00      	cmp	r3, #0
 80524c6:	d005      	beq.n	80524d4 <tcp_process+0x43c>
            recv_acked--;
 80524c8:	4b61      	ldr	r3, [pc, #388]	; (8052650 <tcp_process+0x5b8>)
 80524ca:	881b      	ldrh	r3, [r3, #0]
 80524cc:	3b01      	subs	r3, #1
 80524ce:	b29a      	uxth	r2, r3
 80524d0:	4b5f      	ldr	r3, [pc, #380]	; (8052650 <tcp_process+0x5b8>)
 80524d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80524d4:	687b      	ldr	r3, [r7, #4]
 80524d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80524d8:	009a      	lsls	r2, r3, #2
 80524da:	687b      	ldr	r3, [r7, #4]
 80524dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80524de:	005b      	lsls	r3, r3, #1
 80524e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80524e4:	428b      	cmp	r3, r1
 80524e6:	bf38      	it	cc
 80524e8:	460b      	movcc	r3, r1
 80524ea:	429a      	cmp	r2, r3
 80524ec:	d204      	bcs.n	80524f8 <tcp_process+0x460>
 80524ee:	687b      	ldr	r3, [r7, #4]
 80524f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80524f2:	009b      	lsls	r3, r3, #2
 80524f4:	b29b      	uxth	r3, r3
 80524f6:	e00d      	b.n	8052514 <tcp_process+0x47c>
 80524f8:	687b      	ldr	r3, [r7, #4]
 80524fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80524fc:	005b      	lsls	r3, r3, #1
 80524fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8052502:	4293      	cmp	r3, r2
 8052504:	d904      	bls.n	8052510 <tcp_process+0x478>
 8052506:	687b      	ldr	r3, [r7, #4]
 8052508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 805250a:	005b      	lsls	r3, r3, #1
 805250c:	b29b      	uxth	r3, r3
 805250e:	e001      	b.n	8052514 <tcp_process+0x47c>
 8052510:	f241 131c 	movw	r3, #4380	; 0x111c
 8052514:	687a      	ldr	r2, [r7, #4]
 8052516:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 805251a:	4b4e      	ldr	r3, [pc, #312]	; (8052654 <tcp_process+0x5bc>)
 805251c:	781b      	ldrb	r3, [r3, #0]
 805251e:	f003 0320 	and.w	r3, r3, #32
 8052522:	2b00      	cmp	r3, #0
 8052524:	d037      	beq.n	8052596 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8052526:	687b      	ldr	r3, [r7, #4]
 8052528:	8b5b      	ldrh	r3, [r3, #26]
 805252a:	f043 0302 	orr.w	r3, r3, #2
 805252e:	b29a      	uxth	r2, r3
 8052530:	687b      	ldr	r3, [r7, #4]
 8052532:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8052534:	687b      	ldr	r3, [r7, #4]
 8052536:	2207      	movs	r2, #7
 8052538:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 805253a:	e02c      	b.n	8052596 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 805253c:	4b3b      	ldr	r3, [pc, #236]	; (805262c <tcp_process+0x594>)
 805253e:	6819      	ldr	r1, [r3, #0]
 8052540:	4b3b      	ldr	r3, [pc, #236]	; (8052630 <tcp_process+0x598>)
 8052542:	881b      	ldrh	r3, [r3, #0]
 8052544:	461a      	mov	r2, r3
 8052546:	4b3b      	ldr	r3, [pc, #236]	; (8052634 <tcp_process+0x59c>)
 8052548:	681b      	ldr	r3, [r3, #0]
 805254a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 805254c:	4b3a      	ldr	r3, [pc, #232]	; (8052638 <tcp_process+0x5a0>)
 805254e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8052550:	885b      	ldrh	r3, [r3, #2]
 8052552:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8052554:	4a38      	ldr	r2, [pc, #224]	; (8052638 <tcp_process+0x5a0>)
 8052556:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8052558:	8812      	ldrh	r2, [r2, #0]
 805255a:	b292      	uxth	r2, r2
 805255c:	9202      	str	r2, [sp, #8]
 805255e:	9301      	str	r3, [sp, #4]
 8052560:	4b36      	ldr	r3, [pc, #216]	; (805263c <tcp_process+0x5a4>)
 8052562:	9300      	str	r3, [sp, #0]
 8052564:	4b36      	ldr	r3, [pc, #216]	; (8052640 <tcp_process+0x5a8>)
 8052566:	4602      	mov	r2, r0
 8052568:	6878      	ldr	r0, [r7, #4]
 805256a:	f003 f829 	bl	80555c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 805256e:	e167      	b.n	8052840 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8052570:	4b2d      	ldr	r3, [pc, #180]	; (8052628 <tcp_process+0x590>)
 8052572:	781b      	ldrb	r3, [r3, #0]
 8052574:	f003 0302 	and.w	r3, r3, #2
 8052578:	2b00      	cmp	r3, #0
 805257a:	f000 8161 	beq.w	8052840 <tcp_process+0x7a8>
 805257e:	687b      	ldr	r3, [r7, #4]
 8052580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8052582:	1e5a      	subs	r2, r3, #1
 8052584:	4b2b      	ldr	r3, [pc, #172]	; (8052634 <tcp_process+0x59c>)
 8052586:	681b      	ldr	r3, [r3, #0]
 8052588:	429a      	cmp	r2, r3
 805258a:	f040 8159 	bne.w	8052840 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 805258e:	6878      	ldr	r0, [r7, #4]
 8052590:	f002 fe0e 	bl	80551b0 <tcp_rexmit>
      break;
 8052594:	e154      	b.n	8052840 <tcp_process+0x7a8>
 8052596:	e153      	b.n	8052840 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8052598:	6878      	ldr	r0, [r7, #4]
 805259a:	f000 fa71 	bl	8052a80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 805259e:	4b2d      	ldr	r3, [pc, #180]	; (8052654 <tcp_process+0x5bc>)
 80525a0:	781b      	ldrb	r3, [r3, #0]
 80525a2:	f003 0320 	and.w	r3, r3, #32
 80525a6:	2b00      	cmp	r3, #0
 80525a8:	f000 814c 	beq.w	8052844 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80525ac:	687b      	ldr	r3, [r7, #4]
 80525ae:	8b5b      	ldrh	r3, [r3, #26]
 80525b0:	f043 0302 	orr.w	r3, r3, #2
 80525b4:	b29a      	uxth	r2, r3
 80525b6:	687b      	ldr	r3, [r7, #4]
 80525b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80525ba:	687b      	ldr	r3, [r7, #4]
 80525bc:	2207      	movs	r2, #7
 80525be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80525c0:	e140      	b.n	8052844 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80525c2:	6878      	ldr	r0, [r7, #4]
 80525c4:	f000 fa5c 	bl	8052a80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80525c8:	4b22      	ldr	r3, [pc, #136]	; (8052654 <tcp_process+0x5bc>)
 80525ca:	781b      	ldrb	r3, [r3, #0]
 80525cc:	f003 0320 	and.w	r3, r3, #32
 80525d0:	2b00      	cmp	r3, #0
 80525d2:	d071      	beq.n	80526b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80525d4:	4b14      	ldr	r3, [pc, #80]	; (8052628 <tcp_process+0x590>)
 80525d6:	781b      	ldrb	r3, [r3, #0]
 80525d8:	f003 0310 	and.w	r3, r3, #16
 80525dc:	2b00      	cmp	r3, #0
 80525de:	d060      	beq.n	80526a2 <tcp_process+0x60a>
 80525e0:	687b      	ldr	r3, [r7, #4]
 80525e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80525e4:	4b11      	ldr	r3, [pc, #68]	; (805262c <tcp_process+0x594>)
 80525e6:	681b      	ldr	r3, [r3, #0]
 80525e8:	429a      	cmp	r2, r3
 80525ea:	d15a      	bne.n	80526a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80525ec:	687b      	ldr	r3, [r7, #4]
 80525ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80525f0:	2b00      	cmp	r3, #0
 80525f2:	d156      	bne.n	80526a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80525f4:	687b      	ldr	r3, [r7, #4]
 80525f6:	8b5b      	ldrh	r3, [r3, #26]
 80525f8:	f043 0302 	orr.w	r3, r3, #2
 80525fc:	b29a      	uxth	r2, r3
 80525fe:	687b      	ldr	r3, [r7, #4]
 8052600:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8052602:	6878      	ldr	r0, [r7, #4]
 8052604:	f7fe fdbc 	bl	8051180 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8052608:	4b13      	ldr	r3, [pc, #76]	; (8052658 <tcp_process+0x5c0>)
 805260a:	681b      	ldr	r3, [r3, #0]
 805260c:	687a      	ldr	r2, [r7, #4]
 805260e:	429a      	cmp	r2, r3
 8052610:	d105      	bne.n	805261e <tcp_process+0x586>
 8052612:	4b11      	ldr	r3, [pc, #68]	; (8052658 <tcp_process+0x5c0>)
 8052614:	681b      	ldr	r3, [r3, #0]
 8052616:	68db      	ldr	r3, [r3, #12]
 8052618:	4a0f      	ldr	r2, [pc, #60]	; (8052658 <tcp_process+0x5c0>)
 805261a:	6013      	str	r3, [r2, #0]
 805261c:	e02e      	b.n	805267c <tcp_process+0x5e4>
 805261e:	4b0e      	ldr	r3, [pc, #56]	; (8052658 <tcp_process+0x5c0>)
 8052620:	681b      	ldr	r3, [r3, #0]
 8052622:	617b      	str	r3, [r7, #20]
 8052624:	e027      	b.n	8052676 <tcp_process+0x5de>
 8052626:	bf00      	nop
 8052628:	2000b610 	.word	0x2000b610
 805262c:	2000b608 	.word	0x2000b608
 8052630:	2000b60e 	.word	0x2000b60e
 8052634:	2000b604 	.word	0x2000b604
 8052638:	2000b5f4 	.word	0x2000b5f4
 805263c:	20005cc8 	.word	0x20005cc8
 8052640:	20005ccc 	.word	0x20005ccc
 8052644:	0805c044 	.word	0x0805c044
 8052648:	0805c2e4 	.word	0x0805c2e4
 805264c:	0805c090 	.word	0x0805c090
 8052650:	2000b60c 	.word	0x2000b60c
 8052654:	2000b611 	.word	0x2000b611
 8052658:	2000b5d8 	.word	0x2000b5d8
 805265c:	697b      	ldr	r3, [r7, #20]
 805265e:	68db      	ldr	r3, [r3, #12]
 8052660:	687a      	ldr	r2, [r7, #4]
 8052662:	429a      	cmp	r2, r3
 8052664:	d104      	bne.n	8052670 <tcp_process+0x5d8>
 8052666:	687b      	ldr	r3, [r7, #4]
 8052668:	68da      	ldr	r2, [r3, #12]
 805266a:	697b      	ldr	r3, [r7, #20]
 805266c:	60da      	str	r2, [r3, #12]
 805266e:	e005      	b.n	805267c <tcp_process+0x5e4>
 8052670:	697b      	ldr	r3, [r7, #20]
 8052672:	68db      	ldr	r3, [r3, #12]
 8052674:	617b      	str	r3, [r7, #20]
 8052676:	697b      	ldr	r3, [r7, #20]
 8052678:	2b00      	cmp	r3, #0
 805267a:	d1ef      	bne.n	805265c <tcp_process+0x5c4>
 805267c:	687b      	ldr	r3, [r7, #4]
 805267e:	2200      	movs	r2, #0
 8052680:	60da      	str	r2, [r3, #12]
 8052682:	4b77      	ldr	r3, [pc, #476]	; (8052860 <tcp_process+0x7c8>)
 8052684:	2201      	movs	r2, #1
 8052686:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8052688:	687b      	ldr	r3, [r7, #4]
 805268a:	220a      	movs	r2, #10
 805268c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 805268e:	4b75      	ldr	r3, [pc, #468]	; (8052864 <tcp_process+0x7cc>)
 8052690:	681a      	ldr	r2, [r3, #0]
 8052692:	687b      	ldr	r3, [r7, #4]
 8052694:	60da      	str	r2, [r3, #12]
 8052696:	4a73      	ldr	r2, [pc, #460]	; (8052864 <tcp_process+0x7cc>)
 8052698:	687b      	ldr	r3, [r7, #4]
 805269a:	6013      	str	r3, [r2, #0]
 805269c:	f003 f952 	bl	8055944 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80526a0:	e0d2      	b.n	8052848 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80526a2:	687b      	ldr	r3, [r7, #4]
 80526a4:	8b5b      	ldrh	r3, [r3, #26]
 80526a6:	f043 0302 	orr.w	r3, r3, #2
 80526aa:	b29a      	uxth	r2, r3
 80526ac:	687b      	ldr	r3, [r7, #4]
 80526ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80526b0:	687b      	ldr	r3, [r7, #4]
 80526b2:	2208      	movs	r2, #8
 80526b4:	751a      	strb	r2, [r3, #20]
      break;
 80526b6:	e0c7      	b.n	8052848 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80526b8:	4b6b      	ldr	r3, [pc, #428]	; (8052868 <tcp_process+0x7d0>)
 80526ba:	781b      	ldrb	r3, [r3, #0]
 80526bc:	f003 0310 	and.w	r3, r3, #16
 80526c0:	2b00      	cmp	r3, #0
 80526c2:	f000 80c1 	beq.w	8052848 <tcp_process+0x7b0>
 80526c6:	687b      	ldr	r3, [r7, #4]
 80526c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80526ca:	4b68      	ldr	r3, [pc, #416]	; (805286c <tcp_process+0x7d4>)
 80526cc:	681b      	ldr	r3, [r3, #0]
 80526ce:	429a      	cmp	r2, r3
 80526d0:	f040 80ba 	bne.w	8052848 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80526d4:	687b      	ldr	r3, [r7, #4]
 80526d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80526d8:	2b00      	cmp	r3, #0
 80526da:	f040 80b5 	bne.w	8052848 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80526de:	687b      	ldr	r3, [r7, #4]
 80526e0:	2206      	movs	r2, #6
 80526e2:	751a      	strb	r2, [r3, #20]
      break;
 80526e4:	e0b0      	b.n	8052848 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80526e6:	6878      	ldr	r0, [r7, #4]
 80526e8:	f000 f9ca 	bl	8052a80 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80526ec:	4b60      	ldr	r3, [pc, #384]	; (8052870 <tcp_process+0x7d8>)
 80526ee:	781b      	ldrb	r3, [r3, #0]
 80526f0:	f003 0320 	and.w	r3, r3, #32
 80526f4:	2b00      	cmp	r3, #0
 80526f6:	f000 80a9 	beq.w	805284c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80526fa:	687b      	ldr	r3, [r7, #4]
 80526fc:	8b5b      	ldrh	r3, [r3, #26]
 80526fe:	f043 0302 	orr.w	r3, r3, #2
 8052702:	b29a      	uxth	r2, r3
 8052704:	687b      	ldr	r3, [r7, #4]
 8052706:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8052708:	6878      	ldr	r0, [r7, #4]
 805270a:	f7fe fd39 	bl	8051180 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 805270e:	4b59      	ldr	r3, [pc, #356]	; (8052874 <tcp_process+0x7dc>)
 8052710:	681b      	ldr	r3, [r3, #0]
 8052712:	687a      	ldr	r2, [r7, #4]
 8052714:	429a      	cmp	r2, r3
 8052716:	d105      	bne.n	8052724 <tcp_process+0x68c>
 8052718:	4b56      	ldr	r3, [pc, #344]	; (8052874 <tcp_process+0x7dc>)
 805271a:	681b      	ldr	r3, [r3, #0]
 805271c:	68db      	ldr	r3, [r3, #12]
 805271e:	4a55      	ldr	r2, [pc, #340]	; (8052874 <tcp_process+0x7dc>)
 8052720:	6013      	str	r3, [r2, #0]
 8052722:	e013      	b.n	805274c <tcp_process+0x6b4>
 8052724:	4b53      	ldr	r3, [pc, #332]	; (8052874 <tcp_process+0x7dc>)
 8052726:	681b      	ldr	r3, [r3, #0]
 8052728:	613b      	str	r3, [r7, #16]
 805272a:	e00c      	b.n	8052746 <tcp_process+0x6ae>
 805272c:	693b      	ldr	r3, [r7, #16]
 805272e:	68db      	ldr	r3, [r3, #12]
 8052730:	687a      	ldr	r2, [r7, #4]
 8052732:	429a      	cmp	r2, r3
 8052734:	d104      	bne.n	8052740 <tcp_process+0x6a8>
 8052736:	687b      	ldr	r3, [r7, #4]
 8052738:	68da      	ldr	r2, [r3, #12]
 805273a:	693b      	ldr	r3, [r7, #16]
 805273c:	60da      	str	r2, [r3, #12]
 805273e:	e005      	b.n	805274c <tcp_process+0x6b4>
 8052740:	693b      	ldr	r3, [r7, #16]
 8052742:	68db      	ldr	r3, [r3, #12]
 8052744:	613b      	str	r3, [r7, #16]
 8052746:	693b      	ldr	r3, [r7, #16]
 8052748:	2b00      	cmp	r3, #0
 805274a:	d1ef      	bne.n	805272c <tcp_process+0x694>
 805274c:	687b      	ldr	r3, [r7, #4]
 805274e:	2200      	movs	r2, #0
 8052750:	60da      	str	r2, [r3, #12]
 8052752:	4b43      	ldr	r3, [pc, #268]	; (8052860 <tcp_process+0x7c8>)
 8052754:	2201      	movs	r2, #1
 8052756:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8052758:	687b      	ldr	r3, [r7, #4]
 805275a:	220a      	movs	r2, #10
 805275c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 805275e:	4b41      	ldr	r3, [pc, #260]	; (8052864 <tcp_process+0x7cc>)
 8052760:	681a      	ldr	r2, [r3, #0]
 8052762:	687b      	ldr	r3, [r7, #4]
 8052764:	60da      	str	r2, [r3, #12]
 8052766:	4a3f      	ldr	r2, [pc, #252]	; (8052864 <tcp_process+0x7cc>)
 8052768:	687b      	ldr	r3, [r7, #4]
 805276a:	6013      	str	r3, [r2, #0]
 805276c:	f003 f8ea 	bl	8055944 <tcp_timer_needed>
      }
      break;
 8052770:	e06c      	b.n	805284c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8052772:	6878      	ldr	r0, [r7, #4]
 8052774:	f000 f984 	bl	8052a80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8052778:	4b3b      	ldr	r3, [pc, #236]	; (8052868 <tcp_process+0x7d0>)
 805277a:	781b      	ldrb	r3, [r3, #0]
 805277c:	f003 0310 	and.w	r3, r3, #16
 8052780:	2b00      	cmp	r3, #0
 8052782:	d065      	beq.n	8052850 <tcp_process+0x7b8>
 8052784:	687b      	ldr	r3, [r7, #4]
 8052786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8052788:	4b38      	ldr	r3, [pc, #224]	; (805286c <tcp_process+0x7d4>)
 805278a:	681b      	ldr	r3, [r3, #0]
 805278c:	429a      	cmp	r2, r3
 805278e:	d15f      	bne.n	8052850 <tcp_process+0x7b8>
 8052790:	687b      	ldr	r3, [r7, #4]
 8052792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052794:	2b00      	cmp	r3, #0
 8052796:	d15b      	bne.n	8052850 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8052798:	6878      	ldr	r0, [r7, #4]
 805279a:	f7fe fcf1 	bl	8051180 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 805279e:	4b35      	ldr	r3, [pc, #212]	; (8052874 <tcp_process+0x7dc>)
 80527a0:	681b      	ldr	r3, [r3, #0]
 80527a2:	687a      	ldr	r2, [r7, #4]
 80527a4:	429a      	cmp	r2, r3
 80527a6:	d105      	bne.n	80527b4 <tcp_process+0x71c>
 80527a8:	4b32      	ldr	r3, [pc, #200]	; (8052874 <tcp_process+0x7dc>)
 80527aa:	681b      	ldr	r3, [r3, #0]
 80527ac:	68db      	ldr	r3, [r3, #12]
 80527ae:	4a31      	ldr	r2, [pc, #196]	; (8052874 <tcp_process+0x7dc>)
 80527b0:	6013      	str	r3, [r2, #0]
 80527b2:	e013      	b.n	80527dc <tcp_process+0x744>
 80527b4:	4b2f      	ldr	r3, [pc, #188]	; (8052874 <tcp_process+0x7dc>)
 80527b6:	681b      	ldr	r3, [r3, #0]
 80527b8:	60fb      	str	r3, [r7, #12]
 80527ba:	e00c      	b.n	80527d6 <tcp_process+0x73e>
 80527bc:	68fb      	ldr	r3, [r7, #12]
 80527be:	68db      	ldr	r3, [r3, #12]
 80527c0:	687a      	ldr	r2, [r7, #4]
 80527c2:	429a      	cmp	r2, r3
 80527c4:	d104      	bne.n	80527d0 <tcp_process+0x738>
 80527c6:	687b      	ldr	r3, [r7, #4]
 80527c8:	68da      	ldr	r2, [r3, #12]
 80527ca:	68fb      	ldr	r3, [r7, #12]
 80527cc:	60da      	str	r2, [r3, #12]
 80527ce:	e005      	b.n	80527dc <tcp_process+0x744>
 80527d0:	68fb      	ldr	r3, [r7, #12]
 80527d2:	68db      	ldr	r3, [r3, #12]
 80527d4:	60fb      	str	r3, [r7, #12]
 80527d6:	68fb      	ldr	r3, [r7, #12]
 80527d8:	2b00      	cmp	r3, #0
 80527da:	d1ef      	bne.n	80527bc <tcp_process+0x724>
 80527dc:	687b      	ldr	r3, [r7, #4]
 80527de:	2200      	movs	r2, #0
 80527e0:	60da      	str	r2, [r3, #12]
 80527e2:	4b1f      	ldr	r3, [pc, #124]	; (8052860 <tcp_process+0x7c8>)
 80527e4:	2201      	movs	r2, #1
 80527e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80527e8:	687b      	ldr	r3, [r7, #4]
 80527ea:	220a      	movs	r2, #10
 80527ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80527ee:	4b1d      	ldr	r3, [pc, #116]	; (8052864 <tcp_process+0x7cc>)
 80527f0:	681a      	ldr	r2, [r3, #0]
 80527f2:	687b      	ldr	r3, [r7, #4]
 80527f4:	60da      	str	r2, [r3, #12]
 80527f6:	4a1b      	ldr	r2, [pc, #108]	; (8052864 <tcp_process+0x7cc>)
 80527f8:	687b      	ldr	r3, [r7, #4]
 80527fa:	6013      	str	r3, [r2, #0]
 80527fc:	f003 f8a2 	bl	8055944 <tcp_timer_needed>
      }
      break;
 8052800:	e026      	b.n	8052850 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8052802:	6878      	ldr	r0, [r7, #4]
 8052804:	f000 f93c 	bl	8052a80 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8052808:	4b17      	ldr	r3, [pc, #92]	; (8052868 <tcp_process+0x7d0>)
 805280a:	781b      	ldrb	r3, [r3, #0]
 805280c:	f003 0310 	and.w	r3, r3, #16
 8052810:	2b00      	cmp	r3, #0
 8052812:	d01f      	beq.n	8052854 <tcp_process+0x7bc>
 8052814:	687b      	ldr	r3, [r7, #4]
 8052816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8052818:	4b14      	ldr	r3, [pc, #80]	; (805286c <tcp_process+0x7d4>)
 805281a:	681b      	ldr	r3, [r3, #0]
 805281c:	429a      	cmp	r2, r3
 805281e:	d119      	bne.n	8052854 <tcp_process+0x7bc>
 8052820:	687b      	ldr	r3, [r7, #4]
 8052822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052824:	2b00      	cmp	r3, #0
 8052826:	d115      	bne.n	8052854 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8052828:	4b11      	ldr	r3, [pc, #68]	; (8052870 <tcp_process+0x7d8>)
 805282a:	781b      	ldrb	r3, [r3, #0]
 805282c:	f043 0310 	orr.w	r3, r3, #16
 8052830:	b2da      	uxtb	r2, r3
 8052832:	4b0f      	ldr	r3, [pc, #60]	; (8052870 <tcp_process+0x7d8>)
 8052834:	701a      	strb	r2, [r3, #0]
      }
      break;
 8052836:	e00d      	b.n	8052854 <tcp_process+0x7bc>
    default:
      break;
 8052838:	bf00      	nop
 805283a:	e00c      	b.n	8052856 <tcp_process+0x7be>
      break;
 805283c:	bf00      	nop
 805283e:	e00a      	b.n	8052856 <tcp_process+0x7be>
      break;
 8052840:	bf00      	nop
 8052842:	e008      	b.n	8052856 <tcp_process+0x7be>
      break;
 8052844:	bf00      	nop
 8052846:	e006      	b.n	8052856 <tcp_process+0x7be>
      break;
 8052848:	bf00      	nop
 805284a:	e004      	b.n	8052856 <tcp_process+0x7be>
      break;
 805284c:	bf00      	nop
 805284e:	e002      	b.n	8052856 <tcp_process+0x7be>
      break;
 8052850:	bf00      	nop
 8052852:	e000      	b.n	8052856 <tcp_process+0x7be>
      break;
 8052854:	bf00      	nop
  }
  return ERR_OK;
 8052856:	2300      	movs	r3, #0
}
 8052858:	4618      	mov	r0, r3
 805285a:	3724      	adds	r7, #36	; 0x24
 805285c:	46bd      	mov	sp, r7
 805285e:	bd90      	pop	{r4, r7, pc}
 8052860:	2000b5e0 	.word	0x2000b5e0
 8052864:	2000b5dc 	.word	0x2000b5dc
 8052868:	2000b610 	.word	0x2000b610
 805286c:	2000b608 	.word	0x2000b608
 8052870:	2000b611 	.word	0x2000b611
 8052874:	2000b5d8 	.word	0x2000b5d8

08052878 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8052878:	b590      	push	{r4, r7, lr}
 805287a:	b085      	sub	sp, #20
 805287c:	af00      	add	r7, sp, #0
 805287e:	6078      	str	r0, [r7, #4]
 8052880:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8052882:	687b      	ldr	r3, [r7, #4]
 8052884:	2b00      	cmp	r3, #0
 8052886:	d106      	bne.n	8052896 <tcp_oos_insert_segment+0x1e>
 8052888:	4b3b      	ldr	r3, [pc, #236]	; (8052978 <tcp_oos_insert_segment+0x100>)
 805288a:	f240 421f 	movw	r2, #1055	; 0x41f
 805288e:	493b      	ldr	r1, [pc, #236]	; (805297c <tcp_oos_insert_segment+0x104>)
 8052890:	483b      	ldr	r0, [pc, #236]	; (8052980 <tcp_oos_insert_segment+0x108>)
 8052892:	f006 fbcf 	bl	8059034 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8052896:	687b      	ldr	r3, [r7, #4]
 8052898:	68db      	ldr	r3, [r3, #12]
 805289a:	899b      	ldrh	r3, [r3, #12]
 805289c:	b29b      	uxth	r3, r3
 805289e:	4618      	mov	r0, r3
 80528a0:	f7fb f93e 	bl	804db20 <lwip_htons>
 80528a4:	4603      	mov	r3, r0
 80528a6:	b2db      	uxtb	r3, r3
 80528a8:	f003 0301 	and.w	r3, r3, #1
 80528ac:	2b00      	cmp	r3, #0
 80528ae:	d028      	beq.n	8052902 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80528b0:	6838      	ldr	r0, [r7, #0]
 80528b2:	f7fe f995 	bl	8050be0 <tcp_segs_free>
    next = NULL;
 80528b6:	2300      	movs	r3, #0
 80528b8:	603b      	str	r3, [r7, #0]
 80528ba:	e056      	b.n	805296a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80528bc:	683b      	ldr	r3, [r7, #0]
 80528be:	68db      	ldr	r3, [r3, #12]
 80528c0:	899b      	ldrh	r3, [r3, #12]
 80528c2:	b29b      	uxth	r3, r3
 80528c4:	4618      	mov	r0, r3
 80528c6:	f7fb f92b 	bl	804db20 <lwip_htons>
 80528ca:	4603      	mov	r3, r0
 80528cc:	b2db      	uxtb	r3, r3
 80528ce:	f003 0301 	and.w	r3, r3, #1
 80528d2:	2b00      	cmp	r3, #0
 80528d4:	d00d      	beq.n	80528f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80528d6:	687b      	ldr	r3, [r7, #4]
 80528d8:	68db      	ldr	r3, [r3, #12]
 80528da:	899b      	ldrh	r3, [r3, #12]
 80528dc:	b29c      	uxth	r4, r3
 80528de:	2001      	movs	r0, #1
 80528e0:	f7fb f91e 	bl	804db20 <lwip_htons>
 80528e4:	4603      	mov	r3, r0
 80528e6:	461a      	mov	r2, r3
 80528e8:	687b      	ldr	r3, [r7, #4]
 80528ea:	68db      	ldr	r3, [r3, #12]
 80528ec:	4322      	orrs	r2, r4
 80528ee:	b292      	uxth	r2, r2
 80528f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80528f2:	683b      	ldr	r3, [r7, #0]
 80528f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80528f6:	683b      	ldr	r3, [r7, #0]
 80528f8:	681b      	ldr	r3, [r3, #0]
 80528fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80528fc:	68f8      	ldr	r0, [r7, #12]
 80528fe:	f7fe f984 	bl	8050c0a <tcp_seg_free>
    while (next &&
 8052902:	683b      	ldr	r3, [r7, #0]
 8052904:	2b00      	cmp	r3, #0
 8052906:	d00e      	beq.n	8052926 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8052908:	687b      	ldr	r3, [r7, #4]
 805290a:	891b      	ldrh	r3, [r3, #8]
 805290c:	461a      	mov	r2, r3
 805290e:	4b1d      	ldr	r3, [pc, #116]	; (8052984 <tcp_oos_insert_segment+0x10c>)
 8052910:	681b      	ldr	r3, [r3, #0]
 8052912:	441a      	add	r2, r3
 8052914:	683b      	ldr	r3, [r7, #0]
 8052916:	68db      	ldr	r3, [r3, #12]
 8052918:	685b      	ldr	r3, [r3, #4]
 805291a:	6839      	ldr	r1, [r7, #0]
 805291c:	8909      	ldrh	r1, [r1, #8]
 805291e:	440b      	add	r3, r1
 8052920:	1ad3      	subs	r3, r2, r3
    while (next &&
 8052922:	2b00      	cmp	r3, #0
 8052924:	daca      	bge.n	80528bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8052926:	683b      	ldr	r3, [r7, #0]
 8052928:	2b00      	cmp	r3, #0
 805292a:	d01e      	beq.n	805296a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 805292c:	687b      	ldr	r3, [r7, #4]
 805292e:	891b      	ldrh	r3, [r3, #8]
 8052930:	461a      	mov	r2, r3
 8052932:	4b14      	ldr	r3, [pc, #80]	; (8052984 <tcp_oos_insert_segment+0x10c>)
 8052934:	681b      	ldr	r3, [r3, #0]
 8052936:	441a      	add	r2, r3
 8052938:	683b      	ldr	r3, [r7, #0]
 805293a:	68db      	ldr	r3, [r3, #12]
 805293c:	685b      	ldr	r3, [r3, #4]
 805293e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8052940:	2b00      	cmp	r3, #0
 8052942:	dd12      	ble.n	805296a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8052944:	683b      	ldr	r3, [r7, #0]
 8052946:	68db      	ldr	r3, [r3, #12]
 8052948:	685b      	ldr	r3, [r3, #4]
 805294a:	b29a      	uxth	r2, r3
 805294c:	4b0d      	ldr	r3, [pc, #52]	; (8052984 <tcp_oos_insert_segment+0x10c>)
 805294e:	681b      	ldr	r3, [r3, #0]
 8052950:	b29b      	uxth	r3, r3
 8052952:	1ad3      	subs	r3, r2, r3
 8052954:	b29a      	uxth	r2, r3
 8052956:	687b      	ldr	r3, [r7, #4]
 8052958:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 805295a:	687b      	ldr	r3, [r7, #4]
 805295c:	685a      	ldr	r2, [r3, #4]
 805295e:	687b      	ldr	r3, [r7, #4]
 8052960:	891b      	ldrh	r3, [r3, #8]
 8052962:	4619      	mov	r1, r3
 8052964:	4610      	mov	r0, r2
 8052966:	f7fc fb47 	bl	804eff8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 805296a:	687b      	ldr	r3, [r7, #4]
 805296c:	683a      	ldr	r2, [r7, #0]
 805296e:	601a      	str	r2, [r3, #0]
}
 8052970:	bf00      	nop
 8052972:	3714      	adds	r7, #20
 8052974:	46bd      	mov	sp, r7
 8052976:	bd90      	pop	{r4, r7, pc}
 8052978:	0805c044 	.word	0x0805c044
 805297c:	0805c304 	.word	0x0805c304
 8052980:	0805c090 	.word	0x0805c090
 8052984:	2000b604 	.word	0x2000b604

08052988 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8052988:	b5b0      	push	{r4, r5, r7, lr}
 805298a:	b086      	sub	sp, #24
 805298c:	af00      	add	r7, sp, #0
 805298e:	60f8      	str	r0, [r7, #12]
 8052990:	60b9      	str	r1, [r7, #8]
 8052992:	607a      	str	r2, [r7, #4]
 8052994:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8052996:	e03e      	b.n	8052a16 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8052998:	68bb      	ldr	r3, [r7, #8]
 805299a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 805299c:	68bb      	ldr	r3, [r7, #8]
 805299e:	681b      	ldr	r3, [r3, #0]
 80529a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80529a2:	697b      	ldr	r3, [r7, #20]
 80529a4:	685b      	ldr	r3, [r3, #4]
 80529a6:	4618      	mov	r0, r3
 80529a8:	f7fc fd3a 	bl	804f420 <pbuf_clen>
 80529ac:	4603      	mov	r3, r0
 80529ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80529b0:	68fb      	ldr	r3, [r7, #12]
 80529b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80529b6:	8a7a      	ldrh	r2, [r7, #18]
 80529b8:	429a      	cmp	r2, r3
 80529ba:	d906      	bls.n	80529ca <tcp_free_acked_segments+0x42>
 80529bc:	4b2a      	ldr	r3, [pc, #168]	; (8052a68 <tcp_free_acked_segments+0xe0>)
 80529be:	f240 4257 	movw	r2, #1111	; 0x457
 80529c2:	492a      	ldr	r1, [pc, #168]	; (8052a6c <tcp_free_acked_segments+0xe4>)
 80529c4:	482a      	ldr	r0, [pc, #168]	; (8052a70 <tcp_free_acked_segments+0xe8>)
 80529c6:	f006 fb35 	bl	8059034 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80529ca:	68fb      	ldr	r3, [r7, #12]
 80529cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80529d0:	8a7b      	ldrh	r3, [r7, #18]
 80529d2:	1ad3      	subs	r3, r2, r3
 80529d4:	b29a      	uxth	r2, r3
 80529d6:	68fb      	ldr	r3, [r7, #12]
 80529d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80529dc:	697b      	ldr	r3, [r7, #20]
 80529de:	891a      	ldrh	r2, [r3, #8]
 80529e0:	4b24      	ldr	r3, [pc, #144]	; (8052a74 <tcp_free_acked_segments+0xec>)
 80529e2:	881b      	ldrh	r3, [r3, #0]
 80529e4:	4413      	add	r3, r2
 80529e6:	b29a      	uxth	r2, r3
 80529e8:	4b22      	ldr	r3, [pc, #136]	; (8052a74 <tcp_free_acked_segments+0xec>)
 80529ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80529ec:	6978      	ldr	r0, [r7, #20]
 80529ee:	f7fe f90c 	bl	8050c0a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80529f2:	68fb      	ldr	r3, [r7, #12]
 80529f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80529f8:	2b00      	cmp	r3, #0
 80529fa:	d00c      	beq.n	8052a16 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80529fc:	68bb      	ldr	r3, [r7, #8]
 80529fe:	2b00      	cmp	r3, #0
 8052a00:	d109      	bne.n	8052a16 <tcp_free_acked_segments+0x8e>
 8052a02:	683b      	ldr	r3, [r7, #0]
 8052a04:	2b00      	cmp	r3, #0
 8052a06:	d106      	bne.n	8052a16 <tcp_free_acked_segments+0x8e>
 8052a08:	4b17      	ldr	r3, [pc, #92]	; (8052a68 <tcp_free_acked_segments+0xe0>)
 8052a0a:	f240 4261 	movw	r2, #1121	; 0x461
 8052a0e:	491a      	ldr	r1, [pc, #104]	; (8052a78 <tcp_free_acked_segments+0xf0>)
 8052a10:	4817      	ldr	r0, [pc, #92]	; (8052a70 <tcp_free_acked_segments+0xe8>)
 8052a12:	f006 fb0f 	bl	8059034 <iprintf>
  while (seg_list != NULL &&
 8052a16:	68bb      	ldr	r3, [r7, #8]
 8052a18:	2b00      	cmp	r3, #0
 8052a1a:	d020      	beq.n	8052a5e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8052a1c:	68bb      	ldr	r3, [r7, #8]
 8052a1e:	68db      	ldr	r3, [r3, #12]
 8052a20:	685b      	ldr	r3, [r3, #4]
 8052a22:	4618      	mov	r0, r3
 8052a24:	f7fb f891 	bl	804db4a <lwip_htonl>
 8052a28:	4604      	mov	r4, r0
 8052a2a:	68bb      	ldr	r3, [r7, #8]
 8052a2c:	891b      	ldrh	r3, [r3, #8]
 8052a2e:	461d      	mov	r5, r3
 8052a30:	68bb      	ldr	r3, [r7, #8]
 8052a32:	68db      	ldr	r3, [r3, #12]
 8052a34:	899b      	ldrh	r3, [r3, #12]
 8052a36:	b29b      	uxth	r3, r3
 8052a38:	4618      	mov	r0, r3
 8052a3a:	f7fb f871 	bl	804db20 <lwip_htons>
 8052a3e:	4603      	mov	r3, r0
 8052a40:	b2db      	uxtb	r3, r3
 8052a42:	f003 0303 	and.w	r3, r3, #3
 8052a46:	2b00      	cmp	r3, #0
 8052a48:	d001      	beq.n	8052a4e <tcp_free_acked_segments+0xc6>
 8052a4a:	2301      	movs	r3, #1
 8052a4c:	e000      	b.n	8052a50 <tcp_free_acked_segments+0xc8>
 8052a4e:	2300      	movs	r3, #0
 8052a50:	442b      	add	r3, r5
 8052a52:	18e2      	adds	r2, r4, r3
 8052a54:	4b09      	ldr	r3, [pc, #36]	; (8052a7c <tcp_free_acked_segments+0xf4>)
 8052a56:	681b      	ldr	r3, [r3, #0]
 8052a58:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8052a5a:	2b00      	cmp	r3, #0
 8052a5c:	dd9c      	ble.n	8052998 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8052a5e:	68bb      	ldr	r3, [r7, #8]
}
 8052a60:	4618      	mov	r0, r3
 8052a62:	3718      	adds	r7, #24
 8052a64:	46bd      	mov	sp, r7
 8052a66:	bdb0      	pop	{r4, r5, r7, pc}
 8052a68:	0805c044 	.word	0x0805c044
 8052a6c:	0805c32c 	.word	0x0805c32c
 8052a70:	0805c090 	.word	0x0805c090
 8052a74:	2000b60c 	.word	0x2000b60c
 8052a78:	0805c354 	.word	0x0805c354
 8052a7c:	2000b608 	.word	0x2000b608

08052a80 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8052a80:	b5b0      	push	{r4, r5, r7, lr}
 8052a82:	b094      	sub	sp, #80	; 0x50
 8052a84:	af00      	add	r7, sp, #0
 8052a86:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8052a88:	2300      	movs	r3, #0
 8052a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8052a8c:	687b      	ldr	r3, [r7, #4]
 8052a8e:	2b00      	cmp	r3, #0
 8052a90:	d106      	bne.n	8052aa0 <tcp_receive+0x20>
 8052a92:	4b91      	ldr	r3, [pc, #580]	; (8052cd8 <tcp_receive+0x258>)
 8052a94:	f240 427b 	movw	r2, #1147	; 0x47b
 8052a98:	4990      	ldr	r1, [pc, #576]	; (8052cdc <tcp_receive+0x25c>)
 8052a9a:	4891      	ldr	r0, [pc, #580]	; (8052ce0 <tcp_receive+0x260>)
 8052a9c:	f006 faca 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8052aa0:	687b      	ldr	r3, [r7, #4]
 8052aa2:	7d1b      	ldrb	r3, [r3, #20]
 8052aa4:	2b03      	cmp	r3, #3
 8052aa6:	d806      	bhi.n	8052ab6 <tcp_receive+0x36>
 8052aa8:	4b8b      	ldr	r3, [pc, #556]	; (8052cd8 <tcp_receive+0x258>)
 8052aaa:	f240 427c 	movw	r2, #1148	; 0x47c
 8052aae:	498d      	ldr	r1, [pc, #564]	; (8052ce4 <tcp_receive+0x264>)
 8052ab0:	488b      	ldr	r0, [pc, #556]	; (8052ce0 <tcp_receive+0x260>)
 8052ab2:	f006 fabf 	bl	8059034 <iprintf>

  if (flags & TCP_ACK) {
 8052ab6:	4b8c      	ldr	r3, [pc, #560]	; (8052ce8 <tcp_receive+0x268>)
 8052ab8:	781b      	ldrb	r3, [r3, #0]
 8052aba:	f003 0310 	and.w	r3, r3, #16
 8052abe:	2b00      	cmp	r3, #0
 8052ac0:	f000 8264 	beq.w	8052f8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8052ac4:	687b      	ldr	r3, [r7, #4]
 8052ac6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8052aca:	461a      	mov	r2, r3
 8052acc:	687b      	ldr	r3, [r7, #4]
 8052ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8052ad0:	4413      	add	r3, r2
 8052ad2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8052ad4:	687b      	ldr	r3, [r7, #4]
 8052ad6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8052ad8:	4b84      	ldr	r3, [pc, #528]	; (8052cec <tcp_receive+0x26c>)
 8052ada:	681b      	ldr	r3, [r3, #0]
 8052adc:	1ad3      	subs	r3, r2, r3
 8052ade:	2b00      	cmp	r3, #0
 8052ae0:	db1b      	blt.n	8052b1a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8052ae2:	687b      	ldr	r3, [r7, #4]
 8052ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8052ae6:	4b81      	ldr	r3, [pc, #516]	; (8052cec <tcp_receive+0x26c>)
 8052ae8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8052aea:	429a      	cmp	r2, r3
 8052aec:	d106      	bne.n	8052afc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8052aee:	687b      	ldr	r3, [r7, #4]
 8052af0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8052af2:	4b7f      	ldr	r3, [pc, #508]	; (8052cf0 <tcp_receive+0x270>)
 8052af4:	681b      	ldr	r3, [r3, #0]
 8052af6:	1ad3      	subs	r3, r2, r3
 8052af8:	2b00      	cmp	r3, #0
 8052afa:	db0e      	blt.n	8052b1a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8052afc:	687b      	ldr	r3, [r7, #4]
 8052afe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8052b00:	4b7b      	ldr	r3, [pc, #492]	; (8052cf0 <tcp_receive+0x270>)
 8052b02:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8052b04:	429a      	cmp	r2, r3
 8052b06:	d125      	bne.n	8052b54 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8052b08:	4b7a      	ldr	r3, [pc, #488]	; (8052cf4 <tcp_receive+0x274>)
 8052b0a:	681b      	ldr	r3, [r3, #0]
 8052b0c:	89db      	ldrh	r3, [r3, #14]
 8052b0e:	b29a      	uxth	r2, r3
 8052b10:	687b      	ldr	r3, [r7, #4]
 8052b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8052b16:	429a      	cmp	r2, r3
 8052b18:	d91c      	bls.n	8052b54 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8052b1a:	4b76      	ldr	r3, [pc, #472]	; (8052cf4 <tcp_receive+0x274>)
 8052b1c:	681b      	ldr	r3, [r3, #0]
 8052b1e:	89db      	ldrh	r3, [r3, #14]
 8052b20:	b29a      	uxth	r2, r3
 8052b22:	687b      	ldr	r3, [r7, #4]
 8052b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8052b28:	687b      	ldr	r3, [r7, #4]
 8052b2a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8052b2e:	687b      	ldr	r3, [r7, #4]
 8052b30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8052b34:	429a      	cmp	r2, r3
 8052b36:	d205      	bcs.n	8052b44 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8052b38:	687b      	ldr	r3, [r7, #4]
 8052b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8052b3e:	687b      	ldr	r3, [r7, #4]
 8052b40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8052b44:	4b69      	ldr	r3, [pc, #420]	; (8052cec <tcp_receive+0x26c>)
 8052b46:	681a      	ldr	r2, [r3, #0]
 8052b48:	687b      	ldr	r3, [r7, #4]
 8052b4a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8052b4c:	4b68      	ldr	r3, [pc, #416]	; (8052cf0 <tcp_receive+0x270>)
 8052b4e:	681a      	ldr	r2, [r3, #0]
 8052b50:	687b      	ldr	r3, [r7, #4]
 8052b52:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8052b54:	4b66      	ldr	r3, [pc, #408]	; (8052cf0 <tcp_receive+0x270>)
 8052b56:	681a      	ldr	r2, [r3, #0]
 8052b58:	687b      	ldr	r3, [r7, #4]
 8052b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8052b5c:	1ad3      	subs	r3, r2, r3
 8052b5e:	2b00      	cmp	r3, #0
 8052b60:	dc58      	bgt.n	8052c14 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8052b62:	4b65      	ldr	r3, [pc, #404]	; (8052cf8 <tcp_receive+0x278>)
 8052b64:	881b      	ldrh	r3, [r3, #0]
 8052b66:	2b00      	cmp	r3, #0
 8052b68:	d14b      	bne.n	8052c02 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8052b6a:	687b      	ldr	r3, [r7, #4]
 8052b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8052b6e:	687a      	ldr	r2, [r7, #4]
 8052b70:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8052b74:	4413      	add	r3, r2
 8052b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8052b78:	429a      	cmp	r2, r3
 8052b7a:	d142      	bne.n	8052c02 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8052b7c:	687b      	ldr	r3, [r7, #4]
 8052b7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8052b82:	2b00      	cmp	r3, #0
 8052b84:	db3d      	blt.n	8052c02 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8052b86:	687b      	ldr	r3, [r7, #4]
 8052b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8052b8a:	4b59      	ldr	r3, [pc, #356]	; (8052cf0 <tcp_receive+0x270>)
 8052b8c:	681b      	ldr	r3, [r3, #0]
 8052b8e:	429a      	cmp	r2, r3
 8052b90:	d137      	bne.n	8052c02 <tcp_receive+0x182>
              found_dupack = 1;
 8052b92:	2301      	movs	r3, #1
 8052b94:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8052b96:	687b      	ldr	r3, [r7, #4]
 8052b98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8052b9c:	2bff      	cmp	r3, #255	; 0xff
 8052b9e:	d007      	beq.n	8052bb0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8052ba0:	687b      	ldr	r3, [r7, #4]
 8052ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8052ba6:	3301      	adds	r3, #1
 8052ba8:	b2da      	uxtb	r2, r3
 8052baa:	687b      	ldr	r3, [r7, #4]
 8052bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8052bb0:	687b      	ldr	r3, [r7, #4]
 8052bb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8052bb6:	2b03      	cmp	r3, #3
 8052bb8:	d91b      	bls.n	8052bf2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8052bba:	687b      	ldr	r3, [r7, #4]
 8052bbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052bc0:	687b      	ldr	r3, [r7, #4]
 8052bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8052bc4:	4413      	add	r3, r2
 8052bc6:	b29a      	uxth	r2, r3
 8052bc8:	687b      	ldr	r3, [r7, #4]
 8052bca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8052bce:	429a      	cmp	r2, r3
 8052bd0:	d30a      	bcc.n	8052be8 <tcp_receive+0x168>
 8052bd2:	687b      	ldr	r3, [r7, #4]
 8052bd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052bd8:	687b      	ldr	r3, [r7, #4]
 8052bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8052bdc:	4413      	add	r3, r2
 8052bde:	b29a      	uxth	r2, r3
 8052be0:	687b      	ldr	r3, [r7, #4]
 8052be2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8052be6:	e004      	b.n	8052bf2 <tcp_receive+0x172>
 8052be8:	687b      	ldr	r3, [r7, #4]
 8052bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8052bee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8052bf2:	687b      	ldr	r3, [r7, #4]
 8052bf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8052bf8:	2b02      	cmp	r3, #2
 8052bfa:	d902      	bls.n	8052c02 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8052bfc:	6878      	ldr	r0, [r7, #4]
 8052bfe:	f002 fb43 	bl	8055288 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8052c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8052c04:	2b00      	cmp	r3, #0
 8052c06:	f040 8161 	bne.w	8052ecc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8052c0a:	687b      	ldr	r3, [r7, #4]
 8052c0c:	2200      	movs	r2, #0
 8052c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8052c12:	e15b      	b.n	8052ecc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8052c14:	4b36      	ldr	r3, [pc, #216]	; (8052cf0 <tcp_receive+0x270>)
 8052c16:	681a      	ldr	r2, [r3, #0]
 8052c18:	687b      	ldr	r3, [r7, #4]
 8052c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8052c1c:	1ad3      	subs	r3, r2, r3
 8052c1e:	3b01      	subs	r3, #1
 8052c20:	2b00      	cmp	r3, #0
 8052c22:	f2c0 814e 	blt.w	8052ec2 <tcp_receive+0x442>
 8052c26:	4b32      	ldr	r3, [pc, #200]	; (8052cf0 <tcp_receive+0x270>)
 8052c28:	681a      	ldr	r2, [r3, #0]
 8052c2a:	687b      	ldr	r3, [r7, #4]
 8052c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8052c2e:	1ad3      	subs	r3, r2, r3
 8052c30:	2b00      	cmp	r3, #0
 8052c32:	f300 8146 	bgt.w	8052ec2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8052c36:	687b      	ldr	r3, [r7, #4]
 8052c38:	8b5b      	ldrh	r3, [r3, #26]
 8052c3a:	f003 0304 	and.w	r3, r3, #4
 8052c3e:	2b00      	cmp	r3, #0
 8052c40:	d010      	beq.n	8052c64 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8052c42:	687b      	ldr	r3, [r7, #4]
 8052c44:	8b5b      	ldrh	r3, [r3, #26]
 8052c46:	f023 0304 	bic.w	r3, r3, #4
 8052c4a:	b29a      	uxth	r2, r3
 8052c4c:	687b      	ldr	r3, [r7, #4]
 8052c4e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8052c50:	687b      	ldr	r3, [r7, #4]
 8052c52:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8052c56:	687b      	ldr	r3, [r7, #4]
 8052c58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8052c5c:	687b      	ldr	r3, [r7, #4]
 8052c5e:	2200      	movs	r2, #0
 8052c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8052c64:	687b      	ldr	r3, [r7, #4]
 8052c66:	2200      	movs	r2, #0
 8052c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8052c6c:	687b      	ldr	r3, [r7, #4]
 8052c6e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8052c72:	10db      	asrs	r3, r3, #3
 8052c74:	b21b      	sxth	r3, r3
 8052c76:	b29a      	uxth	r2, r3
 8052c78:	687b      	ldr	r3, [r7, #4]
 8052c7a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8052c7e:	b29b      	uxth	r3, r3
 8052c80:	4413      	add	r3, r2
 8052c82:	b29b      	uxth	r3, r3
 8052c84:	b21a      	sxth	r2, r3
 8052c86:	687b      	ldr	r3, [r7, #4]
 8052c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8052c8c:	4b18      	ldr	r3, [pc, #96]	; (8052cf0 <tcp_receive+0x270>)
 8052c8e:	681b      	ldr	r3, [r3, #0]
 8052c90:	b29a      	uxth	r2, r3
 8052c92:	687b      	ldr	r3, [r7, #4]
 8052c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8052c96:	b29b      	uxth	r3, r3
 8052c98:	1ad3      	subs	r3, r2, r3
 8052c9a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8052c9c:	687b      	ldr	r3, [r7, #4]
 8052c9e:	2200      	movs	r2, #0
 8052ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8052ca4:	4b12      	ldr	r3, [pc, #72]	; (8052cf0 <tcp_receive+0x270>)
 8052ca6:	681a      	ldr	r2, [r3, #0]
 8052ca8:	687b      	ldr	r3, [r7, #4]
 8052caa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8052cac:	687b      	ldr	r3, [r7, #4]
 8052cae:	7d1b      	ldrb	r3, [r3, #20]
 8052cb0:	2b03      	cmp	r3, #3
 8052cb2:	f240 8097 	bls.w	8052de4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8052cb6:	687b      	ldr	r3, [r7, #4]
 8052cb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052cbc:	687b      	ldr	r3, [r7, #4]
 8052cbe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8052cc2:	429a      	cmp	r2, r3
 8052cc4:	d245      	bcs.n	8052d52 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8052cc6:	687b      	ldr	r3, [r7, #4]
 8052cc8:	8b5b      	ldrh	r3, [r3, #26]
 8052cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8052cce:	2b00      	cmp	r3, #0
 8052cd0:	d014      	beq.n	8052cfc <tcp_receive+0x27c>
 8052cd2:	2301      	movs	r3, #1
 8052cd4:	e013      	b.n	8052cfe <tcp_receive+0x27e>
 8052cd6:	bf00      	nop
 8052cd8:	0805c044 	.word	0x0805c044
 8052cdc:	0805c374 	.word	0x0805c374
 8052ce0:	0805c090 	.word	0x0805c090
 8052ce4:	0805c390 	.word	0x0805c390
 8052ce8:	2000b610 	.word	0x2000b610
 8052cec:	2000b604 	.word	0x2000b604
 8052cf0:	2000b608 	.word	0x2000b608
 8052cf4:	2000b5f4 	.word	0x2000b5f4
 8052cf8:	2000b60e 	.word	0x2000b60e
 8052cfc:	2302      	movs	r3, #2
 8052cfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8052d02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8052d06:	b29a      	uxth	r2, r3
 8052d08:	687b      	ldr	r3, [r7, #4]
 8052d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8052d0c:	fb12 f303 	smulbb	r3, r2, r3
 8052d10:	b29b      	uxth	r3, r3
 8052d12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8052d14:	4293      	cmp	r3, r2
 8052d16:	bf28      	it	cs
 8052d18:	4613      	movcs	r3, r2
 8052d1a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8052d1c:	687b      	ldr	r3, [r7, #4]
 8052d1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052d22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8052d24:	4413      	add	r3, r2
 8052d26:	b29a      	uxth	r2, r3
 8052d28:	687b      	ldr	r3, [r7, #4]
 8052d2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8052d2e:	429a      	cmp	r2, r3
 8052d30:	d309      	bcc.n	8052d46 <tcp_receive+0x2c6>
 8052d32:	687b      	ldr	r3, [r7, #4]
 8052d34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052d38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8052d3a:	4413      	add	r3, r2
 8052d3c:	b29a      	uxth	r2, r3
 8052d3e:	687b      	ldr	r3, [r7, #4]
 8052d40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8052d44:	e04e      	b.n	8052de4 <tcp_receive+0x364>
 8052d46:	687b      	ldr	r3, [r7, #4]
 8052d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8052d4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8052d50:	e048      	b.n	8052de4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8052d52:	687b      	ldr	r3, [r7, #4]
 8052d54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8052d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8052d5a:	4413      	add	r3, r2
 8052d5c:	b29a      	uxth	r2, r3
 8052d5e:	687b      	ldr	r3, [r7, #4]
 8052d60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8052d64:	429a      	cmp	r2, r3
 8052d66:	d309      	bcc.n	8052d7c <tcp_receive+0x2fc>
 8052d68:	687b      	ldr	r3, [r7, #4]
 8052d6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8052d6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8052d70:	4413      	add	r3, r2
 8052d72:	b29a      	uxth	r2, r3
 8052d74:	687b      	ldr	r3, [r7, #4]
 8052d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8052d7a:	e004      	b.n	8052d86 <tcp_receive+0x306>
 8052d7c:	687b      	ldr	r3, [r7, #4]
 8052d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8052d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8052d86:	687b      	ldr	r3, [r7, #4]
 8052d88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8052d8c:	687b      	ldr	r3, [r7, #4]
 8052d8e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8052d92:	429a      	cmp	r2, r3
 8052d94:	d326      	bcc.n	8052de4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8052d96:	687b      	ldr	r3, [r7, #4]
 8052d98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8052d9c:	687b      	ldr	r3, [r7, #4]
 8052d9e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8052da2:	1ad3      	subs	r3, r2, r3
 8052da4:	b29a      	uxth	r2, r3
 8052da6:	687b      	ldr	r3, [r7, #4]
 8052da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8052dac:	687b      	ldr	r3, [r7, #4]
 8052dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052db2:	687b      	ldr	r3, [r7, #4]
 8052db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8052db6:	4413      	add	r3, r2
 8052db8:	b29a      	uxth	r2, r3
 8052dba:	687b      	ldr	r3, [r7, #4]
 8052dbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8052dc0:	429a      	cmp	r2, r3
 8052dc2:	d30a      	bcc.n	8052dda <tcp_receive+0x35a>
 8052dc4:	687b      	ldr	r3, [r7, #4]
 8052dc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8052dca:	687b      	ldr	r3, [r7, #4]
 8052dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8052dce:	4413      	add	r3, r2
 8052dd0:	b29a      	uxth	r2, r3
 8052dd2:	687b      	ldr	r3, [r7, #4]
 8052dd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8052dd8:	e004      	b.n	8052de4 <tcp_receive+0x364>
 8052dda:	687b      	ldr	r3, [r7, #4]
 8052ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8052de0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8052de4:	687b      	ldr	r3, [r7, #4]
 8052de6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8052de8:	687b      	ldr	r3, [r7, #4]
 8052dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052dec:	4a98      	ldr	r2, [pc, #608]	; (8053050 <tcp_receive+0x5d0>)
 8052dee:	6878      	ldr	r0, [r7, #4]
 8052df0:	f7ff fdca 	bl	8052988 <tcp_free_acked_segments>
 8052df4:	4602      	mov	r2, r0
 8052df6:	687b      	ldr	r3, [r7, #4]
 8052df8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8052dfa:	687b      	ldr	r3, [r7, #4]
 8052dfc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8052dfe:	687b      	ldr	r3, [r7, #4]
 8052e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8052e02:	4a94      	ldr	r2, [pc, #592]	; (8053054 <tcp_receive+0x5d4>)
 8052e04:	6878      	ldr	r0, [r7, #4]
 8052e06:	f7ff fdbf 	bl	8052988 <tcp_free_acked_segments>
 8052e0a:	4602      	mov	r2, r0
 8052e0c:	687b      	ldr	r3, [r7, #4]
 8052e0e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8052e10:	687b      	ldr	r3, [r7, #4]
 8052e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8052e14:	2b00      	cmp	r3, #0
 8052e16:	d104      	bne.n	8052e22 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8052e18:	687b      	ldr	r3, [r7, #4]
 8052e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8052e1e:	861a      	strh	r2, [r3, #48]	; 0x30
 8052e20:	e002      	b.n	8052e28 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8052e22:	687b      	ldr	r3, [r7, #4]
 8052e24:	2200      	movs	r2, #0
 8052e26:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8052e28:	687b      	ldr	r3, [r7, #4]
 8052e2a:	2200      	movs	r2, #0
 8052e2c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8052e2e:	687b      	ldr	r3, [r7, #4]
 8052e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052e32:	2b00      	cmp	r3, #0
 8052e34:	d103      	bne.n	8052e3e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8052e36:	687b      	ldr	r3, [r7, #4]
 8052e38:	2200      	movs	r2, #0
 8052e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8052e3e:	687b      	ldr	r3, [r7, #4]
 8052e40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8052e44:	4b84      	ldr	r3, [pc, #528]	; (8053058 <tcp_receive+0x5d8>)
 8052e46:	881b      	ldrh	r3, [r3, #0]
 8052e48:	4413      	add	r3, r2
 8052e4a:	b29a      	uxth	r2, r3
 8052e4c:	687b      	ldr	r3, [r7, #4]
 8052e4e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8052e52:	687b      	ldr	r3, [r7, #4]
 8052e54:	8b5b      	ldrh	r3, [r3, #26]
 8052e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8052e5a:	2b00      	cmp	r3, #0
 8052e5c:	d035      	beq.n	8052eca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8052e5e:	687b      	ldr	r3, [r7, #4]
 8052e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8052e62:	2b00      	cmp	r3, #0
 8052e64:	d118      	bne.n	8052e98 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8052e66:	687b      	ldr	r3, [r7, #4]
 8052e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052e6a:	2b00      	cmp	r3, #0
 8052e6c:	d00c      	beq.n	8052e88 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8052e6e:	687b      	ldr	r3, [r7, #4]
 8052e70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8052e72:	687b      	ldr	r3, [r7, #4]
 8052e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8052e76:	68db      	ldr	r3, [r3, #12]
 8052e78:	685b      	ldr	r3, [r3, #4]
 8052e7a:	4618      	mov	r0, r3
 8052e7c:	f7fa fe65 	bl	804db4a <lwip_htonl>
 8052e80:	4603      	mov	r3, r0
 8052e82:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8052e84:	2b00      	cmp	r3, #0
 8052e86:	dc20      	bgt.n	8052eca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8052e88:	687b      	ldr	r3, [r7, #4]
 8052e8a:	8b5b      	ldrh	r3, [r3, #26]
 8052e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8052e90:	b29a      	uxth	r2, r3
 8052e92:	687b      	ldr	r3, [r7, #4]
 8052e94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8052e96:	e018      	b.n	8052eca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8052e98:	687b      	ldr	r3, [r7, #4]
 8052e9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8052e9c:	687b      	ldr	r3, [r7, #4]
 8052e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8052ea0:	68db      	ldr	r3, [r3, #12]
 8052ea2:	685b      	ldr	r3, [r3, #4]
 8052ea4:	4618      	mov	r0, r3
 8052ea6:	f7fa fe50 	bl	804db4a <lwip_htonl>
 8052eaa:	4603      	mov	r3, r0
 8052eac:	1ae3      	subs	r3, r4, r3
 8052eae:	2b00      	cmp	r3, #0
 8052eb0:	dc0b      	bgt.n	8052eca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8052eb2:	687b      	ldr	r3, [r7, #4]
 8052eb4:	8b5b      	ldrh	r3, [r3, #26]
 8052eb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8052eba:	b29a      	uxth	r2, r3
 8052ebc:	687b      	ldr	r3, [r7, #4]
 8052ebe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8052ec0:	e003      	b.n	8052eca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8052ec2:	6878      	ldr	r0, [r7, #4]
 8052ec4:	f002 fbce 	bl	8055664 <tcp_send_empty_ack>
 8052ec8:	e000      	b.n	8052ecc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8052eca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8052ecc:	687b      	ldr	r3, [r7, #4]
 8052ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8052ed0:	2b00      	cmp	r3, #0
 8052ed2:	d05b      	beq.n	8052f8c <tcp_receive+0x50c>
 8052ed4:	687b      	ldr	r3, [r7, #4]
 8052ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8052ed8:	4b60      	ldr	r3, [pc, #384]	; (805305c <tcp_receive+0x5dc>)
 8052eda:	681b      	ldr	r3, [r3, #0]
 8052edc:	1ad3      	subs	r3, r2, r3
 8052ede:	2b00      	cmp	r3, #0
 8052ee0:	da54      	bge.n	8052f8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8052ee2:	4b5f      	ldr	r3, [pc, #380]	; (8053060 <tcp_receive+0x5e0>)
 8052ee4:	681b      	ldr	r3, [r3, #0]
 8052ee6:	b29a      	uxth	r2, r3
 8052ee8:	687b      	ldr	r3, [r7, #4]
 8052eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8052eec:	b29b      	uxth	r3, r3
 8052eee:	1ad3      	subs	r3, r2, r3
 8052ef0:	b29b      	uxth	r3, r3
 8052ef2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8052ef6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8052efa:	687b      	ldr	r3, [r7, #4]
 8052efc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8052f00:	10db      	asrs	r3, r3, #3
 8052f02:	b21b      	sxth	r3, r3
 8052f04:	b29b      	uxth	r3, r3
 8052f06:	1ad3      	subs	r3, r2, r3
 8052f08:	b29b      	uxth	r3, r3
 8052f0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8052f0e:	687b      	ldr	r3, [r7, #4]
 8052f10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8052f14:	b29a      	uxth	r2, r3
 8052f16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8052f1a:	4413      	add	r3, r2
 8052f1c:	b29b      	uxth	r3, r3
 8052f1e:	b21a      	sxth	r2, r3
 8052f20:	687b      	ldr	r3, [r7, #4]
 8052f22:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8052f24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8052f28:	2b00      	cmp	r3, #0
 8052f2a:	da05      	bge.n	8052f38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8052f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8052f30:	425b      	negs	r3, r3
 8052f32:	b29b      	uxth	r3, r3
 8052f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8052f38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8052f3c:	687b      	ldr	r3, [r7, #4]
 8052f3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8052f42:	109b      	asrs	r3, r3, #2
 8052f44:	b21b      	sxth	r3, r3
 8052f46:	b29b      	uxth	r3, r3
 8052f48:	1ad3      	subs	r3, r2, r3
 8052f4a:	b29b      	uxth	r3, r3
 8052f4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8052f50:	687b      	ldr	r3, [r7, #4]
 8052f52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8052f56:	b29a      	uxth	r2, r3
 8052f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8052f5c:	4413      	add	r3, r2
 8052f5e:	b29b      	uxth	r3, r3
 8052f60:	b21a      	sxth	r2, r3
 8052f62:	687b      	ldr	r3, [r7, #4]
 8052f64:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8052f66:	687b      	ldr	r3, [r7, #4]
 8052f68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8052f6c:	10db      	asrs	r3, r3, #3
 8052f6e:	b21b      	sxth	r3, r3
 8052f70:	b29a      	uxth	r2, r3
 8052f72:	687b      	ldr	r3, [r7, #4]
 8052f74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8052f78:	b29b      	uxth	r3, r3
 8052f7a:	4413      	add	r3, r2
 8052f7c:	b29b      	uxth	r3, r3
 8052f7e:	b21a      	sxth	r2, r3
 8052f80:	687b      	ldr	r3, [r7, #4]
 8052f82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8052f86:	687b      	ldr	r3, [r7, #4]
 8052f88:	2200      	movs	r2, #0
 8052f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8052f8c:	4b35      	ldr	r3, [pc, #212]	; (8053064 <tcp_receive+0x5e4>)
 8052f8e:	881b      	ldrh	r3, [r3, #0]
 8052f90:	2b00      	cmp	r3, #0
 8052f92:	f000 84e2 	beq.w	805395a <tcp_receive+0xeda>
 8052f96:	687b      	ldr	r3, [r7, #4]
 8052f98:	7d1b      	ldrb	r3, [r3, #20]
 8052f9a:	2b06      	cmp	r3, #6
 8052f9c:	f200 84dd 	bhi.w	805395a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8052fa0:	687b      	ldr	r3, [r7, #4]
 8052fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8052fa4:	4b30      	ldr	r3, [pc, #192]	; (8053068 <tcp_receive+0x5e8>)
 8052fa6:	681b      	ldr	r3, [r3, #0]
 8052fa8:	1ad3      	subs	r3, r2, r3
 8052faa:	3b01      	subs	r3, #1
 8052fac:	2b00      	cmp	r3, #0
 8052fae:	f2c0 808f 	blt.w	80530d0 <tcp_receive+0x650>
 8052fb2:	687b      	ldr	r3, [r7, #4]
 8052fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8052fb6:	4b2b      	ldr	r3, [pc, #172]	; (8053064 <tcp_receive+0x5e4>)
 8052fb8:	881b      	ldrh	r3, [r3, #0]
 8052fba:	4619      	mov	r1, r3
 8052fbc:	4b2a      	ldr	r3, [pc, #168]	; (8053068 <tcp_receive+0x5e8>)
 8052fbe:	681b      	ldr	r3, [r3, #0]
 8052fc0:	440b      	add	r3, r1
 8052fc2:	1ad3      	subs	r3, r2, r3
 8052fc4:	3301      	adds	r3, #1
 8052fc6:	2b00      	cmp	r3, #0
 8052fc8:	f300 8082 	bgt.w	80530d0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8052fcc:	4b27      	ldr	r3, [pc, #156]	; (805306c <tcp_receive+0x5ec>)
 8052fce:	685b      	ldr	r3, [r3, #4]
 8052fd0:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8052fd2:	687b      	ldr	r3, [r7, #4]
 8052fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8052fd6:	4b24      	ldr	r3, [pc, #144]	; (8053068 <tcp_receive+0x5e8>)
 8052fd8:	681b      	ldr	r3, [r3, #0]
 8052fda:	1ad3      	subs	r3, r2, r3
 8052fdc:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8052fde:	4b23      	ldr	r3, [pc, #140]	; (805306c <tcp_receive+0x5ec>)
 8052fe0:	685b      	ldr	r3, [r3, #4]
 8052fe2:	2b00      	cmp	r3, #0
 8052fe4:	d106      	bne.n	8052ff4 <tcp_receive+0x574>
 8052fe6:	4b22      	ldr	r3, [pc, #136]	; (8053070 <tcp_receive+0x5f0>)
 8052fe8:	f240 5294 	movw	r2, #1428	; 0x594
 8052fec:	4921      	ldr	r1, [pc, #132]	; (8053074 <tcp_receive+0x5f4>)
 8052fee:	4822      	ldr	r0, [pc, #136]	; (8053078 <tcp_receive+0x5f8>)
 8052ff0:	f006 f820 	bl	8059034 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8052ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8052ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8052ffa:	4293      	cmp	r3, r2
 8052ffc:	d906      	bls.n	805300c <tcp_receive+0x58c>
 8052ffe:	4b1c      	ldr	r3, [pc, #112]	; (8053070 <tcp_receive+0x5f0>)
 8053000:	f240 5295 	movw	r2, #1429	; 0x595
 8053004:	491d      	ldr	r1, [pc, #116]	; (805307c <tcp_receive+0x5fc>)
 8053006:	481c      	ldr	r0, [pc, #112]	; (8053078 <tcp_receive+0x5f8>)
 8053008:	f006 f814 	bl	8059034 <iprintf>
      off = (u16_t)off32;
 805300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805300e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8053012:	4b16      	ldr	r3, [pc, #88]	; (805306c <tcp_receive+0x5ec>)
 8053014:	685b      	ldr	r3, [r3, #4]
 8053016:	891b      	ldrh	r3, [r3, #8]
 8053018:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 805301c:	429a      	cmp	r2, r3
 805301e:	d906      	bls.n	805302e <tcp_receive+0x5ae>
 8053020:	4b13      	ldr	r3, [pc, #76]	; (8053070 <tcp_receive+0x5f0>)
 8053022:	f240 5297 	movw	r2, #1431	; 0x597
 8053026:	4916      	ldr	r1, [pc, #88]	; (8053080 <tcp_receive+0x600>)
 8053028:	4813      	ldr	r0, [pc, #76]	; (8053078 <tcp_receive+0x5f8>)
 805302a:	f006 f803 	bl	8059034 <iprintf>
      inseg.len -= off;
 805302e:	4b0f      	ldr	r3, [pc, #60]	; (805306c <tcp_receive+0x5ec>)
 8053030:	891a      	ldrh	r2, [r3, #8]
 8053032:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8053036:	1ad3      	subs	r3, r2, r3
 8053038:	b29a      	uxth	r2, r3
 805303a:	4b0c      	ldr	r3, [pc, #48]	; (805306c <tcp_receive+0x5ec>)
 805303c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 805303e:	4b0b      	ldr	r3, [pc, #44]	; (805306c <tcp_receive+0x5ec>)
 8053040:	685b      	ldr	r3, [r3, #4]
 8053042:	891a      	ldrh	r2, [r3, #8]
 8053044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8053048:	1ad3      	subs	r3, r2, r3
 805304a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 805304c:	e02a      	b.n	80530a4 <tcp_receive+0x624>
 805304e:	bf00      	nop
 8053050:	0805c3ac 	.word	0x0805c3ac
 8053054:	0805c3b4 	.word	0x0805c3b4
 8053058:	2000b60c 	.word	0x2000b60c
 805305c:	2000b608 	.word	0x2000b608
 8053060:	2000b5cc 	.word	0x2000b5cc
 8053064:	2000b60e 	.word	0x2000b60e
 8053068:	2000b604 	.word	0x2000b604
 805306c:	2000b5e4 	.word	0x2000b5e4
 8053070:	0805c044 	.word	0x0805c044
 8053074:	0805c3bc 	.word	0x0805c3bc
 8053078:	0805c090 	.word	0x0805c090
 805307c:	0805c3cc 	.word	0x0805c3cc
 8053080:	0805c3dc 	.word	0x0805c3dc
        off -= p->len;
 8053084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8053086:	895b      	ldrh	r3, [r3, #10]
 8053088:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 805308c:	1ad3      	subs	r3, r2, r3
 805308e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8053092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8053094:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8053096:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8053098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 805309a:	2200      	movs	r2, #0
 805309c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 805309e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80530a0:	681b      	ldr	r3, [r3, #0]
 80530a2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80530a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80530a6:	895b      	ldrh	r3, [r3, #10]
 80530a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80530ac:	429a      	cmp	r2, r3
 80530ae:	d8e9      	bhi.n	8053084 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80530b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80530b4:	4619      	mov	r1, r3
 80530b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80530b8:	f7fc f89e 	bl	804f1f8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80530bc:	687b      	ldr	r3, [r7, #4]
 80530be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80530c0:	4a91      	ldr	r2, [pc, #580]	; (8053308 <tcp_receive+0x888>)
 80530c2:	6013      	str	r3, [r2, #0]
 80530c4:	4b91      	ldr	r3, [pc, #580]	; (805330c <tcp_receive+0x88c>)
 80530c6:	68db      	ldr	r3, [r3, #12]
 80530c8:	4a8f      	ldr	r2, [pc, #572]	; (8053308 <tcp_receive+0x888>)
 80530ca:	6812      	ldr	r2, [r2, #0]
 80530cc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80530ce:	e00d      	b.n	80530ec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80530d0:	4b8d      	ldr	r3, [pc, #564]	; (8053308 <tcp_receive+0x888>)
 80530d2:	681a      	ldr	r2, [r3, #0]
 80530d4:	687b      	ldr	r3, [r7, #4]
 80530d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80530d8:	1ad3      	subs	r3, r2, r3
 80530da:	2b00      	cmp	r3, #0
 80530dc:	da06      	bge.n	80530ec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80530de:	687b      	ldr	r3, [r7, #4]
 80530e0:	8b5b      	ldrh	r3, [r3, #26]
 80530e2:	f043 0302 	orr.w	r3, r3, #2
 80530e6:	b29a      	uxth	r2, r3
 80530e8:	687b      	ldr	r3, [r7, #4]
 80530ea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80530ec:	4b86      	ldr	r3, [pc, #536]	; (8053308 <tcp_receive+0x888>)
 80530ee:	681a      	ldr	r2, [r3, #0]
 80530f0:	687b      	ldr	r3, [r7, #4]
 80530f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80530f4:	1ad3      	subs	r3, r2, r3
 80530f6:	2b00      	cmp	r3, #0
 80530f8:	f2c0 842a 	blt.w	8053950 <tcp_receive+0xed0>
 80530fc:	4b82      	ldr	r3, [pc, #520]	; (8053308 <tcp_receive+0x888>)
 80530fe:	681a      	ldr	r2, [r3, #0]
 8053100:	687b      	ldr	r3, [r7, #4]
 8053102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8053104:	6879      	ldr	r1, [r7, #4]
 8053106:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8053108:	440b      	add	r3, r1
 805310a:	1ad3      	subs	r3, r2, r3
 805310c:	3301      	adds	r3, #1
 805310e:	2b00      	cmp	r3, #0
 8053110:	f300 841e 	bgt.w	8053950 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8053114:	687b      	ldr	r3, [r7, #4]
 8053116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8053118:	4b7b      	ldr	r3, [pc, #492]	; (8053308 <tcp_receive+0x888>)
 805311a:	681b      	ldr	r3, [r3, #0]
 805311c:	429a      	cmp	r2, r3
 805311e:	f040 829a 	bne.w	8053656 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8053122:	4b7a      	ldr	r3, [pc, #488]	; (805330c <tcp_receive+0x88c>)
 8053124:	891c      	ldrh	r4, [r3, #8]
 8053126:	4b79      	ldr	r3, [pc, #484]	; (805330c <tcp_receive+0x88c>)
 8053128:	68db      	ldr	r3, [r3, #12]
 805312a:	899b      	ldrh	r3, [r3, #12]
 805312c:	b29b      	uxth	r3, r3
 805312e:	4618      	mov	r0, r3
 8053130:	f7fa fcf6 	bl	804db20 <lwip_htons>
 8053134:	4603      	mov	r3, r0
 8053136:	b2db      	uxtb	r3, r3
 8053138:	f003 0303 	and.w	r3, r3, #3
 805313c:	2b00      	cmp	r3, #0
 805313e:	d001      	beq.n	8053144 <tcp_receive+0x6c4>
 8053140:	2301      	movs	r3, #1
 8053142:	e000      	b.n	8053146 <tcp_receive+0x6c6>
 8053144:	2300      	movs	r3, #0
 8053146:	4423      	add	r3, r4
 8053148:	b29a      	uxth	r2, r3
 805314a:	4b71      	ldr	r3, [pc, #452]	; (8053310 <tcp_receive+0x890>)
 805314c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 805314e:	687b      	ldr	r3, [r7, #4]
 8053150:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8053152:	4b6f      	ldr	r3, [pc, #444]	; (8053310 <tcp_receive+0x890>)
 8053154:	881b      	ldrh	r3, [r3, #0]
 8053156:	429a      	cmp	r2, r3
 8053158:	d275      	bcs.n	8053246 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 805315a:	4b6c      	ldr	r3, [pc, #432]	; (805330c <tcp_receive+0x88c>)
 805315c:	68db      	ldr	r3, [r3, #12]
 805315e:	899b      	ldrh	r3, [r3, #12]
 8053160:	b29b      	uxth	r3, r3
 8053162:	4618      	mov	r0, r3
 8053164:	f7fa fcdc 	bl	804db20 <lwip_htons>
 8053168:	4603      	mov	r3, r0
 805316a:	b2db      	uxtb	r3, r3
 805316c:	f003 0301 	and.w	r3, r3, #1
 8053170:	2b00      	cmp	r3, #0
 8053172:	d01f      	beq.n	80531b4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8053174:	4b65      	ldr	r3, [pc, #404]	; (805330c <tcp_receive+0x88c>)
 8053176:	68db      	ldr	r3, [r3, #12]
 8053178:	899b      	ldrh	r3, [r3, #12]
 805317a:	b29b      	uxth	r3, r3
 805317c:	b21b      	sxth	r3, r3
 805317e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8053182:	b21c      	sxth	r4, r3
 8053184:	4b61      	ldr	r3, [pc, #388]	; (805330c <tcp_receive+0x88c>)
 8053186:	68db      	ldr	r3, [r3, #12]
 8053188:	899b      	ldrh	r3, [r3, #12]
 805318a:	b29b      	uxth	r3, r3
 805318c:	4618      	mov	r0, r3
 805318e:	f7fa fcc7 	bl	804db20 <lwip_htons>
 8053192:	4603      	mov	r3, r0
 8053194:	b2db      	uxtb	r3, r3
 8053196:	b29b      	uxth	r3, r3
 8053198:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 805319c:	b29b      	uxth	r3, r3
 805319e:	4618      	mov	r0, r3
 80531a0:	f7fa fcbe 	bl	804db20 <lwip_htons>
 80531a4:	4603      	mov	r3, r0
 80531a6:	b21b      	sxth	r3, r3
 80531a8:	4323      	orrs	r3, r4
 80531aa:	b21a      	sxth	r2, r3
 80531ac:	4b57      	ldr	r3, [pc, #348]	; (805330c <tcp_receive+0x88c>)
 80531ae:	68db      	ldr	r3, [r3, #12]
 80531b0:	b292      	uxth	r2, r2
 80531b2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80531b4:	687b      	ldr	r3, [r7, #4]
 80531b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80531b8:	4b54      	ldr	r3, [pc, #336]	; (805330c <tcp_receive+0x88c>)
 80531ba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80531bc:	4b53      	ldr	r3, [pc, #332]	; (805330c <tcp_receive+0x88c>)
 80531be:	68db      	ldr	r3, [r3, #12]
 80531c0:	899b      	ldrh	r3, [r3, #12]
 80531c2:	b29b      	uxth	r3, r3
 80531c4:	4618      	mov	r0, r3
 80531c6:	f7fa fcab 	bl	804db20 <lwip_htons>
 80531ca:	4603      	mov	r3, r0
 80531cc:	b2db      	uxtb	r3, r3
 80531ce:	f003 0302 	and.w	r3, r3, #2
 80531d2:	2b00      	cmp	r3, #0
 80531d4:	d005      	beq.n	80531e2 <tcp_receive+0x762>
            inseg.len -= 1;
 80531d6:	4b4d      	ldr	r3, [pc, #308]	; (805330c <tcp_receive+0x88c>)
 80531d8:	891b      	ldrh	r3, [r3, #8]
 80531da:	3b01      	subs	r3, #1
 80531dc:	b29a      	uxth	r2, r3
 80531de:	4b4b      	ldr	r3, [pc, #300]	; (805330c <tcp_receive+0x88c>)
 80531e0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80531e2:	4b4a      	ldr	r3, [pc, #296]	; (805330c <tcp_receive+0x88c>)
 80531e4:	685b      	ldr	r3, [r3, #4]
 80531e6:	4a49      	ldr	r2, [pc, #292]	; (805330c <tcp_receive+0x88c>)
 80531e8:	8912      	ldrh	r2, [r2, #8]
 80531ea:	4611      	mov	r1, r2
 80531ec:	4618      	mov	r0, r3
 80531ee:	f7fb ff03 	bl	804eff8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80531f2:	4b46      	ldr	r3, [pc, #280]	; (805330c <tcp_receive+0x88c>)
 80531f4:	891c      	ldrh	r4, [r3, #8]
 80531f6:	4b45      	ldr	r3, [pc, #276]	; (805330c <tcp_receive+0x88c>)
 80531f8:	68db      	ldr	r3, [r3, #12]
 80531fa:	899b      	ldrh	r3, [r3, #12]
 80531fc:	b29b      	uxth	r3, r3
 80531fe:	4618      	mov	r0, r3
 8053200:	f7fa fc8e 	bl	804db20 <lwip_htons>
 8053204:	4603      	mov	r3, r0
 8053206:	b2db      	uxtb	r3, r3
 8053208:	f003 0303 	and.w	r3, r3, #3
 805320c:	2b00      	cmp	r3, #0
 805320e:	d001      	beq.n	8053214 <tcp_receive+0x794>
 8053210:	2301      	movs	r3, #1
 8053212:	e000      	b.n	8053216 <tcp_receive+0x796>
 8053214:	2300      	movs	r3, #0
 8053216:	4423      	add	r3, r4
 8053218:	b29a      	uxth	r2, r3
 805321a:	4b3d      	ldr	r3, [pc, #244]	; (8053310 <tcp_receive+0x890>)
 805321c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 805321e:	4b3c      	ldr	r3, [pc, #240]	; (8053310 <tcp_receive+0x890>)
 8053220:	881b      	ldrh	r3, [r3, #0]
 8053222:	461a      	mov	r2, r3
 8053224:	4b38      	ldr	r3, [pc, #224]	; (8053308 <tcp_receive+0x888>)
 8053226:	681b      	ldr	r3, [r3, #0]
 8053228:	441a      	add	r2, r3
 805322a:	687b      	ldr	r3, [r7, #4]
 805322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805322e:	6879      	ldr	r1, [r7, #4]
 8053230:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8053232:	440b      	add	r3, r1
 8053234:	429a      	cmp	r2, r3
 8053236:	d006      	beq.n	8053246 <tcp_receive+0x7c6>
 8053238:	4b36      	ldr	r3, [pc, #216]	; (8053314 <tcp_receive+0x894>)
 805323a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 805323e:	4936      	ldr	r1, [pc, #216]	; (8053318 <tcp_receive+0x898>)
 8053240:	4836      	ldr	r0, [pc, #216]	; (805331c <tcp_receive+0x89c>)
 8053242:	f005 fef7 	bl	8059034 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8053246:	687b      	ldr	r3, [r7, #4]
 8053248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 805324a:	2b00      	cmp	r3, #0
 805324c:	f000 80e7 	beq.w	805341e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8053250:	4b2e      	ldr	r3, [pc, #184]	; (805330c <tcp_receive+0x88c>)
 8053252:	68db      	ldr	r3, [r3, #12]
 8053254:	899b      	ldrh	r3, [r3, #12]
 8053256:	b29b      	uxth	r3, r3
 8053258:	4618      	mov	r0, r3
 805325a:	f7fa fc61 	bl	804db20 <lwip_htons>
 805325e:	4603      	mov	r3, r0
 8053260:	b2db      	uxtb	r3, r3
 8053262:	f003 0301 	and.w	r3, r3, #1
 8053266:	2b00      	cmp	r3, #0
 8053268:	d010      	beq.n	805328c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 805326a:	e00a      	b.n	8053282 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 805326c:	687b      	ldr	r3, [r7, #4]
 805326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053270:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8053272:	687b      	ldr	r3, [r7, #4]
 8053274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053276:	681a      	ldr	r2, [r3, #0]
 8053278:	687b      	ldr	r3, [r7, #4]
 805327a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 805327c:	68f8      	ldr	r0, [r7, #12]
 805327e:	f7fd fcc4 	bl	8050c0a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8053282:	687b      	ldr	r3, [r7, #4]
 8053284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053286:	2b00      	cmp	r3, #0
 8053288:	d1f0      	bne.n	805326c <tcp_receive+0x7ec>
 805328a:	e0c8      	b.n	805341e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 805328c:	687b      	ldr	r3, [r7, #4]
 805328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053290:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8053292:	e052      	b.n	805333a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8053294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053296:	68db      	ldr	r3, [r3, #12]
 8053298:	899b      	ldrh	r3, [r3, #12]
 805329a:	b29b      	uxth	r3, r3
 805329c:	4618      	mov	r0, r3
 805329e:	f7fa fc3f 	bl	804db20 <lwip_htons>
 80532a2:	4603      	mov	r3, r0
 80532a4:	b2db      	uxtb	r3, r3
 80532a6:	f003 0301 	and.w	r3, r3, #1
 80532aa:	2b00      	cmp	r3, #0
 80532ac:	d03d      	beq.n	805332a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80532ae:	4b17      	ldr	r3, [pc, #92]	; (805330c <tcp_receive+0x88c>)
 80532b0:	68db      	ldr	r3, [r3, #12]
 80532b2:	899b      	ldrh	r3, [r3, #12]
 80532b4:	b29b      	uxth	r3, r3
 80532b6:	4618      	mov	r0, r3
 80532b8:	f7fa fc32 	bl	804db20 <lwip_htons>
 80532bc:	4603      	mov	r3, r0
 80532be:	b2db      	uxtb	r3, r3
 80532c0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80532c4:	2b00      	cmp	r3, #0
 80532c6:	d130      	bne.n	805332a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80532c8:	4b10      	ldr	r3, [pc, #64]	; (805330c <tcp_receive+0x88c>)
 80532ca:	68db      	ldr	r3, [r3, #12]
 80532cc:	899b      	ldrh	r3, [r3, #12]
 80532ce:	b29c      	uxth	r4, r3
 80532d0:	2001      	movs	r0, #1
 80532d2:	f7fa fc25 	bl	804db20 <lwip_htons>
 80532d6:	4603      	mov	r3, r0
 80532d8:	461a      	mov	r2, r3
 80532da:	4b0c      	ldr	r3, [pc, #48]	; (805330c <tcp_receive+0x88c>)
 80532dc:	68db      	ldr	r3, [r3, #12]
 80532de:	4322      	orrs	r2, r4
 80532e0:	b292      	uxth	r2, r2
 80532e2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80532e4:	4b09      	ldr	r3, [pc, #36]	; (805330c <tcp_receive+0x88c>)
 80532e6:	891c      	ldrh	r4, [r3, #8]
 80532e8:	4b08      	ldr	r3, [pc, #32]	; (805330c <tcp_receive+0x88c>)
 80532ea:	68db      	ldr	r3, [r3, #12]
 80532ec:	899b      	ldrh	r3, [r3, #12]
 80532ee:	b29b      	uxth	r3, r3
 80532f0:	4618      	mov	r0, r3
 80532f2:	f7fa fc15 	bl	804db20 <lwip_htons>
 80532f6:	4603      	mov	r3, r0
 80532f8:	b2db      	uxtb	r3, r3
 80532fa:	f003 0303 	and.w	r3, r3, #3
 80532fe:	2b00      	cmp	r3, #0
 8053300:	d00e      	beq.n	8053320 <tcp_receive+0x8a0>
 8053302:	2301      	movs	r3, #1
 8053304:	e00d      	b.n	8053322 <tcp_receive+0x8a2>
 8053306:	bf00      	nop
 8053308:	2000b604 	.word	0x2000b604
 805330c:	2000b5e4 	.word	0x2000b5e4
 8053310:	2000b60e 	.word	0x2000b60e
 8053314:	0805c044 	.word	0x0805c044
 8053318:	0805c3ec 	.word	0x0805c3ec
 805331c:	0805c090 	.word	0x0805c090
 8053320:	2300      	movs	r3, #0
 8053322:	4423      	add	r3, r4
 8053324:	b29a      	uxth	r2, r3
 8053326:	4b98      	ldr	r3, [pc, #608]	; (8053588 <tcp_receive+0xb08>)
 8053328:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 805332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805332c:	613b      	str	r3, [r7, #16]
              next = next->next;
 805332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053330:	681b      	ldr	r3, [r3, #0]
 8053332:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8053334:	6938      	ldr	r0, [r7, #16]
 8053336:	f7fd fc68 	bl	8050c0a <tcp_seg_free>
            while (next &&
 805333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805333c:	2b00      	cmp	r3, #0
 805333e:	d00e      	beq.n	805335e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8053340:	4b91      	ldr	r3, [pc, #580]	; (8053588 <tcp_receive+0xb08>)
 8053342:	881b      	ldrh	r3, [r3, #0]
 8053344:	461a      	mov	r2, r3
 8053346:	4b91      	ldr	r3, [pc, #580]	; (805358c <tcp_receive+0xb0c>)
 8053348:	681b      	ldr	r3, [r3, #0]
 805334a:	441a      	add	r2, r3
 805334c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805334e:	68db      	ldr	r3, [r3, #12]
 8053350:	685b      	ldr	r3, [r3, #4]
 8053352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8053354:	8909      	ldrh	r1, [r1, #8]
 8053356:	440b      	add	r3, r1
 8053358:	1ad3      	subs	r3, r2, r3
            while (next &&
 805335a:	2b00      	cmp	r3, #0
 805335c:	da9a      	bge.n	8053294 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 805335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053360:	2b00      	cmp	r3, #0
 8053362:	d059      	beq.n	8053418 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8053364:	4b88      	ldr	r3, [pc, #544]	; (8053588 <tcp_receive+0xb08>)
 8053366:	881b      	ldrh	r3, [r3, #0]
 8053368:	461a      	mov	r2, r3
 805336a:	4b88      	ldr	r3, [pc, #544]	; (805358c <tcp_receive+0xb0c>)
 805336c:	681b      	ldr	r3, [r3, #0]
 805336e:	441a      	add	r2, r3
 8053370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053372:	68db      	ldr	r3, [r3, #12]
 8053374:	685b      	ldr	r3, [r3, #4]
 8053376:	1ad3      	subs	r3, r2, r3
            if (next &&
 8053378:	2b00      	cmp	r3, #0
 805337a:	dd4d      	ble.n	8053418 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 805337c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 805337e:	68db      	ldr	r3, [r3, #12]
 8053380:	685b      	ldr	r3, [r3, #4]
 8053382:	b29a      	uxth	r2, r3
 8053384:	4b81      	ldr	r3, [pc, #516]	; (805358c <tcp_receive+0xb0c>)
 8053386:	681b      	ldr	r3, [r3, #0]
 8053388:	b29b      	uxth	r3, r3
 805338a:	1ad3      	subs	r3, r2, r3
 805338c:	b29a      	uxth	r2, r3
 805338e:	4b80      	ldr	r3, [pc, #512]	; (8053590 <tcp_receive+0xb10>)
 8053390:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8053392:	4b7f      	ldr	r3, [pc, #508]	; (8053590 <tcp_receive+0xb10>)
 8053394:	68db      	ldr	r3, [r3, #12]
 8053396:	899b      	ldrh	r3, [r3, #12]
 8053398:	b29b      	uxth	r3, r3
 805339a:	4618      	mov	r0, r3
 805339c:	f7fa fbc0 	bl	804db20 <lwip_htons>
 80533a0:	4603      	mov	r3, r0
 80533a2:	b2db      	uxtb	r3, r3
 80533a4:	f003 0302 	and.w	r3, r3, #2
 80533a8:	2b00      	cmp	r3, #0
 80533aa:	d005      	beq.n	80533b8 <tcp_receive+0x938>
                inseg.len -= 1;
 80533ac:	4b78      	ldr	r3, [pc, #480]	; (8053590 <tcp_receive+0xb10>)
 80533ae:	891b      	ldrh	r3, [r3, #8]
 80533b0:	3b01      	subs	r3, #1
 80533b2:	b29a      	uxth	r2, r3
 80533b4:	4b76      	ldr	r3, [pc, #472]	; (8053590 <tcp_receive+0xb10>)
 80533b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80533b8:	4b75      	ldr	r3, [pc, #468]	; (8053590 <tcp_receive+0xb10>)
 80533ba:	685b      	ldr	r3, [r3, #4]
 80533bc:	4a74      	ldr	r2, [pc, #464]	; (8053590 <tcp_receive+0xb10>)
 80533be:	8912      	ldrh	r2, [r2, #8]
 80533c0:	4611      	mov	r1, r2
 80533c2:	4618      	mov	r0, r3
 80533c4:	f7fb fe18 	bl	804eff8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80533c8:	4b71      	ldr	r3, [pc, #452]	; (8053590 <tcp_receive+0xb10>)
 80533ca:	891c      	ldrh	r4, [r3, #8]
 80533cc:	4b70      	ldr	r3, [pc, #448]	; (8053590 <tcp_receive+0xb10>)
 80533ce:	68db      	ldr	r3, [r3, #12]
 80533d0:	899b      	ldrh	r3, [r3, #12]
 80533d2:	b29b      	uxth	r3, r3
 80533d4:	4618      	mov	r0, r3
 80533d6:	f7fa fba3 	bl	804db20 <lwip_htons>
 80533da:	4603      	mov	r3, r0
 80533dc:	b2db      	uxtb	r3, r3
 80533de:	f003 0303 	and.w	r3, r3, #3
 80533e2:	2b00      	cmp	r3, #0
 80533e4:	d001      	beq.n	80533ea <tcp_receive+0x96a>
 80533e6:	2301      	movs	r3, #1
 80533e8:	e000      	b.n	80533ec <tcp_receive+0x96c>
 80533ea:	2300      	movs	r3, #0
 80533ec:	4423      	add	r3, r4
 80533ee:	b29a      	uxth	r2, r3
 80533f0:	4b65      	ldr	r3, [pc, #404]	; (8053588 <tcp_receive+0xb08>)
 80533f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80533f4:	4b64      	ldr	r3, [pc, #400]	; (8053588 <tcp_receive+0xb08>)
 80533f6:	881b      	ldrh	r3, [r3, #0]
 80533f8:	461a      	mov	r2, r3
 80533fa:	4b64      	ldr	r3, [pc, #400]	; (805358c <tcp_receive+0xb0c>)
 80533fc:	681b      	ldr	r3, [r3, #0]
 80533fe:	441a      	add	r2, r3
 8053400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8053402:	68db      	ldr	r3, [r3, #12]
 8053404:	685b      	ldr	r3, [r3, #4]
 8053406:	429a      	cmp	r2, r3
 8053408:	d006      	beq.n	8053418 <tcp_receive+0x998>
 805340a:	4b62      	ldr	r3, [pc, #392]	; (8053594 <tcp_receive+0xb14>)
 805340c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8053410:	4961      	ldr	r1, [pc, #388]	; (8053598 <tcp_receive+0xb18>)
 8053412:	4862      	ldr	r0, [pc, #392]	; (805359c <tcp_receive+0xb1c>)
 8053414:	f005 fe0e 	bl	8059034 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8053418:	687b      	ldr	r3, [r7, #4]
 805341a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 805341c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 805341e:	4b5a      	ldr	r3, [pc, #360]	; (8053588 <tcp_receive+0xb08>)
 8053420:	881b      	ldrh	r3, [r3, #0]
 8053422:	461a      	mov	r2, r3
 8053424:	4b59      	ldr	r3, [pc, #356]	; (805358c <tcp_receive+0xb0c>)
 8053426:	681b      	ldr	r3, [r3, #0]
 8053428:	441a      	add	r2, r3
 805342a:	687b      	ldr	r3, [r7, #4]
 805342c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 805342e:	687b      	ldr	r3, [r7, #4]
 8053430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8053432:	4b55      	ldr	r3, [pc, #340]	; (8053588 <tcp_receive+0xb08>)
 8053434:	881b      	ldrh	r3, [r3, #0]
 8053436:	429a      	cmp	r2, r3
 8053438:	d206      	bcs.n	8053448 <tcp_receive+0x9c8>
 805343a:	4b56      	ldr	r3, [pc, #344]	; (8053594 <tcp_receive+0xb14>)
 805343c:	f240 6207 	movw	r2, #1543	; 0x607
 8053440:	4957      	ldr	r1, [pc, #348]	; (80535a0 <tcp_receive+0xb20>)
 8053442:	4856      	ldr	r0, [pc, #344]	; (805359c <tcp_receive+0xb1c>)
 8053444:	f005 fdf6 	bl	8059034 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8053448:	687b      	ldr	r3, [r7, #4]
 805344a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 805344c:	4b4e      	ldr	r3, [pc, #312]	; (8053588 <tcp_receive+0xb08>)
 805344e:	881b      	ldrh	r3, [r3, #0]
 8053450:	1ad3      	subs	r3, r2, r3
 8053452:	b29a      	uxth	r2, r3
 8053454:	687b      	ldr	r3, [r7, #4]
 8053456:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8053458:	6878      	ldr	r0, [r7, #4]
 805345a:	f7fc feb1 	bl	80501c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 805345e:	4b4c      	ldr	r3, [pc, #304]	; (8053590 <tcp_receive+0xb10>)
 8053460:	685b      	ldr	r3, [r3, #4]
 8053462:	891b      	ldrh	r3, [r3, #8]
 8053464:	2b00      	cmp	r3, #0
 8053466:	d006      	beq.n	8053476 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8053468:	4b49      	ldr	r3, [pc, #292]	; (8053590 <tcp_receive+0xb10>)
 805346a:	685b      	ldr	r3, [r3, #4]
 805346c:	4a4d      	ldr	r2, [pc, #308]	; (80535a4 <tcp_receive+0xb24>)
 805346e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8053470:	4b47      	ldr	r3, [pc, #284]	; (8053590 <tcp_receive+0xb10>)
 8053472:	2200      	movs	r2, #0
 8053474:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8053476:	4b46      	ldr	r3, [pc, #280]	; (8053590 <tcp_receive+0xb10>)
 8053478:	68db      	ldr	r3, [r3, #12]
 805347a:	899b      	ldrh	r3, [r3, #12]
 805347c:	b29b      	uxth	r3, r3
 805347e:	4618      	mov	r0, r3
 8053480:	f7fa fb4e 	bl	804db20 <lwip_htons>
 8053484:	4603      	mov	r3, r0
 8053486:	b2db      	uxtb	r3, r3
 8053488:	f003 0301 	and.w	r3, r3, #1
 805348c:	2b00      	cmp	r3, #0
 805348e:	f000 80b8 	beq.w	8053602 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8053492:	4b45      	ldr	r3, [pc, #276]	; (80535a8 <tcp_receive+0xb28>)
 8053494:	781b      	ldrb	r3, [r3, #0]
 8053496:	f043 0320 	orr.w	r3, r3, #32
 805349a:	b2da      	uxtb	r2, r3
 805349c:	4b42      	ldr	r3, [pc, #264]	; (80535a8 <tcp_receive+0xb28>)
 805349e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80534a0:	e0af      	b.n	8053602 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80534a2:	687b      	ldr	r3, [r7, #4]
 80534a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80534a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80534a8:	687b      	ldr	r3, [r7, #4]
 80534aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80534ac:	68db      	ldr	r3, [r3, #12]
 80534ae:	685b      	ldr	r3, [r3, #4]
 80534b0:	4a36      	ldr	r2, [pc, #216]	; (805358c <tcp_receive+0xb0c>)
 80534b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80534b4:	68bb      	ldr	r3, [r7, #8]
 80534b6:	891b      	ldrh	r3, [r3, #8]
 80534b8:	461c      	mov	r4, r3
 80534ba:	68bb      	ldr	r3, [r7, #8]
 80534bc:	68db      	ldr	r3, [r3, #12]
 80534be:	899b      	ldrh	r3, [r3, #12]
 80534c0:	b29b      	uxth	r3, r3
 80534c2:	4618      	mov	r0, r3
 80534c4:	f7fa fb2c 	bl	804db20 <lwip_htons>
 80534c8:	4603      	mov	r3, r0
 80534ca:	b2db      	uxtb	r3, r3
 80534cc:	f003 0303 	and.w	r3, r3, #3
 80534d0:	2b00      	cmp	r3, #0
 80534d2:	d001      	beq.n	80534d8 <tcp_receive+0xa58>
 80534d4:	2301      	movs	r3, #1
 80534d6:	e000      	b.n	80534da <tcp_receive+0xa5a>
 80534d8:	2300      	movs	r3, #0
 80534da:	191a      	adds	r2, r3, r4
 80534dc:	687b      	ldr	r3, [r7, #4]
 80534de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80534e0:	441a      	add	r2, r3
 80534e2:	687b      	ldr	r3, [r7, #4]
 80534e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80534e6:	687b      	ldr	r3, [r7, #4]
 80534e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80534ea:	461c      	mov	r4, r3
 80534ec:	68bb      	ldr	r3, [r7, #8]
 80534ee:	891b      	ldrh	r3, [r3, #8]
 80534f0:	461d      	mov	r5, r3
 80534f2:	68bb      	ldr	r3, [r7, #8]
 80534f4:	68db      	ldr	r3, [r3, #12]
 80534f6:	899b      	ldrh	r3, [r3, #12]
 80534f8:	b29b      	uxth	r3, r3
 80534fa:	4618      	mov	r0, r3
 80534fc:	f7fa fb10 	bl	804db20 <lwip_htons>
 8053500:	4603      	mov	r3, r0
 8053502:	b2db      	uxtb	r3, r3
 8053504:	f003 0303 	and.w	r3, r3, #3
 8053508:	2b00      	cmp	r3, #0
 805350a:	d001      	beq.n	8053510 <tcp_receive+0xa90>
 805350c:	2301      	movs	r3, #1
 805350e:	e000      	b.n	8053512 <tcp_receive+0xa92>
 8053510:	2300      	movs	r3, #0
 8053512:	442b      	add	r3, r5
 8053514:	429c      	cmp	r4, r3
 8053516:	d206      	bcs.n	8053526 <tcp_receive+0xaa6>
 8053518:	4b1e      	ldr	r3, [pc, #120]	; (8053594 <tcp_receive+0xb14>)
 805351a:	f240 622b 	movw	r2, #1579	; 0x62b
 805351e:	4923      	ldr	r1, [pc, #140]	; (80535ac <tcp_receive+0xb2c>)
 8053520:	481e      	ldr	r0, [pc, #120]	; (805359c <tcp_receive+0xb1c>)
 8053522:	f005 fd87 	bl	8059034 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8053526:	68bb      	ldr	r3, [r7, #8]
 8053528:	891b      	ldrh	r3, [r3, #8]
 805352a:	461c      	mov	r4, r3
 805352c:	68bb      	ldr	r3, [r7, #8]
 805352e:	68db      	ldr	r3, [r3, #12]
 8053530:	899b      	ldrh	r3, [r3, #12]
 8053532:	b29b      	uxth	r3, r3
 8053534:	4618      	mov	r0, r3
 8053536:	f7fa faf3 	bl	804db20 <lwip_htons>
 805353a:	4603      	mov	r3, r0
 805353c:	b2db      	uxtb	r3, r3
 805353e:	f003 0303 	and.w	r3, r3, #3
 8053542:	2b00      	cmp	r3, #0
 8053544:	d001      	beq.n	805354a <tcp_receive+0xaca>
 8053546:	2301      	movs	r3, #1
 8053548:	e000      	b.n	805354c <tcp_receive+0xacc>
 805354a:	2300      	movs	r3, #0
 805354c:	1919      	adds	r1, r3, r4
 805354e:	687b      	ldr	r3, [r7, #4]
 8053550:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8053552:	b28b      	uxth	r3, r1
 8053554:	1ad3      	subs	r3, r2, r3
 8053556:	b29a      	uxth	r2, r3
 8053558:	687b      	ldr	r3, [r7, #4]
 805355a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 805355c:	6878      	ldr	r0, [r7, #4]
 805355e:	f7fc fe2f 	bl	80501c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8053562:	68bb      	ldr	r3, [r7, #8]
 8053564:	685b      	ldr	r3, [r3, #4]
 8053566:	891b      	ldrh	r3, [r3, #8]
 8053568:	2b00      	cmp	r3, #0
 805356a:	d028      	beq.n	80535be <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 805356c:	4b0d      	ldr	r3, [pc, #52]	; (80535a4 <tcp_receive+0xb24>)
 805356e:	681b      	ldr	r3, [r3, #0]
 8053570:	2b00      	cmp	r3, #0
 8053572:	d01d      	beq.n	80535b0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8053574:	4b0b      	ldr	r3, [pc, #44]	; (80535a4 <tcp_receive+0xb24>)
 8053576:	681a      	ldr	r2, [r3, #0]
 8053578:	68bb      	ldr	r3, [r7, #8]
 805357a:	685b      	ldr	r3, [r3, #4]
 805357c:	4619      	mov	r1, r3
 805357e:	4610      	mov	r0, r2
 8053580:	f7fb ff8e 	bl	804f4a0 <pbuf_cat>
 8053584:	e018      	b.n	80535b8 <tcp_receive+0xb38>
 8053586:	bf00      	nop
 8053588:	2000b60e 	.word	0x2000b60e
 805358c:	2000b604 	.word	0x2000b604
 8053590:	2000b5e4 	.word	0x2000b5e4
 8053594:	0805c044 	.word	0x0805c044
 8053598:	0805c424 	.word	0x0805c424
 805359c:	0805c090 	.word	0x0805c090
 80535a0:	0805c460 	.word	0x0805c460
 80535a4:	2000b614 	.word	0x2000b614
 80535a8:	2000b611 	.word	0x2000b611
 80535ac:	0805c480 	.word	0x0805c480
            } else {
              recv_data = cseg->p;
 80535b0:	68bb      	ldr	r3, [r7, #8]
 80535b2:	685b      	ldr	r3, [r3, #4]
 80535b4:	4a70      	ldr	r2, [pc, #448]	; (8053778 <tcp_receive+0xcf8>)
 80535b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80535b8:	68bb      	ldr	r3, [r7, #8]
 80535ba:	2200      	movs	r2, #0
 80535bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80535be:	68bb      	ldr	r3, [r7, #8]
 80535c0:	68db      	ldr	r3, [r3, #12]
 80535c2:	899b      	ldrh	r3, [r3, #12]
 80535c4:	b29b      	uxth	r3, r3
 80535c6:	4618      	mov	r0, r3
 80535c8:	f7fa faaa 	bl	804db20 <lwip_htons>
 80535cc:	4603      	mov	r3, r0
 80535ce:	b2db      	uxtb	r3, r3
 80535d0:	f003 0301 	and.w	r3, r3, #1
 80535d4:	2b00      	cmp	r3, #0
 80535d6:	d00d      	beq.n	80535f4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80535d8:	4b68      	ldr	r3, [pc, #416]	; (805377c <tcp_receive+0xcfc>)
 80535da:	781b      	ldrb	r3, [r3, #0]
 80535dc:	f043 0320 	orr.w	r3, r3, #32
 80535e0:	b2da      	uxtb	r2, r3
 80535e2:	4b66      	ldr	r3, [pc, #408]	; (805377c <tcp_receive+0xcfc>)
 80535e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80535e6:	687b      	ldr	r3, [r7, #4]
 80535e8:	7d1b      	ldrb	r3, [r3, #20]
 80535ea:	2b04      	cmp	r3, #4
 80535ec:	d102      	bne.n	80535f4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80535ee:	687b      	ldr	r3, [r7, #4]
 80535f0:	2207      	movs	r2, #7
 80535f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80535f4:	68bb      	ldr	r3, [r7, #8]
 80535f6:	681a      	ldr	r2, [r3, #0]
 80535f8:	687b      	ldr	r3, [r7, #4]
 80535fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80535fc:	68b8      	ldr	r0, [r7, #8]
 80535fe:	f7fd fb04 	bl	8050c0a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8053602:	687b      	ldr	r3, [r7, #4]
 8053604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053606:	2b00      	cmp	r3, #0
 8053608:	d008      	beq.n	805361c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 805360a:	687b      	ldr	r3, [r7, #4]
 805360c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 805360e:	68db      	ldr	r3, [r3, #12]
 8053610:	685a      	ldr	r2, [r3, #4]
 8053612:	687b      	ldr	r3, [r7, #4]
 8053614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8053616:	429a      	cmp	r2, r3
 8053618:	f43f af43 	beq.w	80534a2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 805361c:	687b      	ldr	r3, [r7, #4]
 805361e:	8b5b      	ldrh	r3, [r3, #26]
 8053620:	f003 0301 	and.w	r3, r3, #1
 8053624:	2b00      	cmp	r3, #0
 8053626:	d00e      	beq.n	8053646 <tcp_receive+0xbc6>
 8053628:	687b      	ldr	r3, [r7, #4]
 805362a:	8b5b      	ldrh	r3, [r3, #26]
 805362c:	f023 0301 	bic.w	r3, r3, #1
 8053630:	b29a      	uxth	r2, r3
 8053632:	687b      	ldr	r3, [r7, #4]
 8053634:	835a      	strh	r2, [r3, #26]
 8053636:	687b      	ldr	r3, [r7, #4]
 8053638:	8b5b      	ldrh	r3, [r3, #26]
 805363a:	f043 0302 	orr.w	r3, r3, #2
 805363e:	b29a      	uxth	r2, r3
 8053640:	687b      	ldr	r3, [r7, #4]
 8053642:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8053644:	e188      	b.n	8053958 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8053646:	687b      	ldr	r3, [r7, #4]
 8053648:	8b5b      	ldrh	r3, [r3, #26]
 805364a:	f043 0301 	orr.w	r3, r3, #1
 805364e:	b29a      	uxth	r2, r3
 8053650:	687b      	ldr	r3, [r7, #4]
 8053652:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8053654:	e180      	b.n	8053958 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8053656:	687b      	ldr	r3, [r7, #4]
 8053658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 805365a:	2b00      	cmp	r3, #0
 805365c:	d106      	bne.n	805366c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 805365e:	4848      	ldr	r0, [pc, #288]	; (8053780 <tcp_receive+0xd00>)
 8053660:	f7fd faec 	bl	8050c3c <tcp_seg_copy>
 8053664:	4602      	mov	r2, r0
 8053666:	687b      	ldr	r3, [r7, #4]
 8053668:	675a      	str	r2, [r3, #116]	; 0x74
 805366a:	e16d      	b.n	8053948 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 805366c:	2300      	movs	r3, #0
 805366e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8053670:	687b      	ldr	r3, [r7, #4]
 8053672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8053674:	63bb      	str	r3, [r7, #56]	; 0x38
 8053676:	e157      	b.n	8053928 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8053678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805367a:	68db      	ldr	r3, [r3, #12]
 805367c:	685a      	ldr	r2, [r3, #4]
 805367e:	4b41      	ldr	r3, [pc, #260]	; (8053784 <tcp_receive+0xd04>)
 8053680:	681b      	ldr	r3, [r3, #0]
 8053682:	429a      	cmp	r2, r3
 8053684:	d11d      	bne.n	80536c2 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8053686:	4b3e      	ldr	r3, [pc, #248]	; (8053780 <tcp_receive+0xd00>)
 8053688:	891a      	ldrh	r2, [r3, #8]
 805368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805368c:	891b      	ldrh	r3, [r3, #8]
 805368e:	429a      	cmp	r2, r3
 8053690:	f240 814f 	bls.w	8053932 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8053694:	483a      	ldr	r0, [pc, #232]	; (8053780 <tcp_receive+0xd00>)
 8053696:	f7fd fad1 	bl	8050c3c <tcp_seg_copy>
 805369a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 805369c:	697b      	ldr	r3, [r7, #20]
 805369e:	2b00      	cmp	r3, #0
 80536a0:	f000 8149 	beq.w	8053936 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80536a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80536a6:	2b00      	cmp	r3, #0
 80536a8:	d003      	beq.n	80536b2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80536aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80536ac:	697a      	ldr	r2, [r7, #20]
 80536ae:	601a      	str	r2, [r3, #0]
 80536b0:	e002      	b.n	80536b8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80536b2:	687b      	ldr	r3, [r7, #4]
 80536b4:	697a      	ldr	r2, [r7, #20]
 80536b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80536b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80536ba:	6978      	ldr	r0, [r7, #20]
 80536bc:	f7ff f8dc 	bl	8052878 <tcp_oos_insert_segment>
                }
                break;
 80536c0:	e139      	b.n	8053936 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80536c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80536c4:	2b00      	cmp	r3, #0
 80536c6:	d117      	bne.n	80536f8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80536c8:	4b2e      	ldr	r3, [pc, #184]	; (8053784 <tcp_receive+0xd04>)
 80536ca:	681a      	ldr	r2, [r3, #0]
 80536cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80536ce:	68db      	ldr	r3, [r3, #12]
 80536d0:	685b      	ldr	r3, [r3, #4]
 80536d2:	1ad3      	subs	r3, r2, r3
 80536d4:	2b00      	cmp	r3, #0
 80536d6:	da57      	bge.n	8053788 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80536d8:	4829      	ldr	r0, [pc, #164]	; (8053780 <tcp_receive+0xd00>)
 80536da:	f7fd faaf 	bl	8050c3c <tcp_seg_copy>
 80536de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80536e0:	69bb      	ldr	r3, [r7, #24]
 80536e2:	2b00      	cmp	r3, #0
 80536e4:	f000 8129 	beq.w	805393a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80536e8:	687b      	ldr	r3, [r7, #4]
 80536ea:	69ba      	ldr	r2, [r7, #24]
 80536ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80536ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80536f0:	69b8      	ldr	r0, [r7, #24]
 80536f2:	f7ff f8c1 	bl	8052878 <tcp_oos_insert_segment>
                  }
                  break;
 80536f6:	e120      	b.n	805393a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80536f8:	4b22      	ldr	r3, [pc, #136]	; (8053784 <tcp_receive+0xd04>)
 80536fa:	681a      	ldr	r2, [r3, #0]
 80536fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80536fe:	68db      	ldr	r3, [r3, #12]
 8053700:	685b      	ldr	r3, [r3, #4]
 8053702:	1ad3      	subs	r3, r2, r3
 8053704:	3b01      	subs	r3, #1
 8053706:	2b00      	cmp	r3, #0
 8053708:	db3e      	blt.n	8053788 <tcp_receive+0xd08>
 805370a:	4b1e      	ldr	r3, [pc, #120]	; (8053784 <tcp_receive+0xd04>)
 805370c:	681a      	ldr	r2, [r3, #0]
 805370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053710:	68db      	ldr	r3, [r3, #12]
 8053712:	685b      	ldr	r3, [r3, #4]
 8053714:	1ad3      	subs	r3, r2, r3
 8053716:	3301      	adds	r3, #1
 8053718:	2b00      	cmp	r3, #0
 805371a:	dc35      	bgt.n	8053788 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 805371c:	4818      	ldr	r0, [pc, #96]	; (8053780 <tcp_receive+0xd00>)
 805371e:	f7fd fa8d 	bl	8050c3c <tcp_seg_copy>
 8053722:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8053724:	69fb      	ldr	r3, [r7, #28]
 8053726:	2b00      	cmp	r3, #0
 8053728:	f000 8109 	beq.w	805393e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 805372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805372e:	68db      	ldr	r3, [r3, #12]
 8053730:	685b      	ldr	r3, [r3, #4]
 8053732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8053734:	8912      	ldrh	r2, [r2, #8]
 8053736:	441a      	add	r2, r3
 8053738:	4b12      	ldr	r3, [pc, #72]	; (8053784 <tcp_receive+0xd04>)
 805373a:	681b      	ldr	r3, [r3, #0]
 805373c:	1ad3      	subs	r3, r2, r3
 805373e:	2b00      	cmp	r3, #0
 8053740:	dd12      	ble.n	8053768 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8053742:	4b10      	ldr	r3, [pc, #64]	; (8053784 <tcp_receive+0xd04>)
 8053744:	681b      	ldr	r3, [r3, #0]
 8053746:	b29a      	uxth	r2, r3
 8053748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805374a:	68db      	ldr	r3, [r3, #12]
 805374c:	685b      	ldr	r3, [r3, #4]
 805374e:	b29b      	uxth	r3, r3
 8053750:	1ad3      	subs	r3, r2, r3
 8053752:	b29a      	uxth	r2, r3
 8053754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8053756:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8053758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805375a:	685a      	ldr	r2, [r3, #4]
 805375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805375e:	891b      	ldrh	r3, [r3, #8]
 8053760:	4619      	mov	r1, r3
 8053762:	4610      	mov	r0, r2
 8053764:	f7fb fc48 	bl	804eff8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8053768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 805376a:	69fa      	ldr	r2, [r7, #28]
 805376c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 805376e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8053770:	69f8      	ldr	r0, [r7, #28]
 8053772:	f7ff f881 	bl	8052878 <tcp_oos_insert_segment>
                  }
                  break;
 8053776:	e0e2      	b.n	805393e <tcp_receive+0xebe>
 8053778:	2000b614 	.word	0x2000b614
 805377c:	2000b611 	.word	0x2000b611
 8053780:	2000b5e4 	.word	0x2000b5e4
 8053784:	2000b604 	.word	0x2000b604
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8053788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805378a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 805378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805378e:	681b      	ldr	r3, [r3, #0]
 8053790:	2b00      	cmp	r3, #0
 8053792:	f040 80c6 	bne.w	8053922 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8053796:	4b80      	ldr	r3, [pc, #512]	; (8053998 <tcp_receive+0xf18>)
 8053798:	681a      	ldr	r2, [r3, #0]
 805379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805379c:	68db      	ldr	r3, [r3, #12]
 805379e:	685b      	ldr	r3, [r3, #4]
 80537a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80537a2:	2b00      	cmp	r3, #0
 80537a4:	f340 80bd 	ble.w	8053922 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80537a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80537aa:	68db      	ldr	r3, [r3, #12]
 80537ac:	899b      	ldrh	r3, [r3, #12]
 80537ae:	b29b      	uxth	r3, r3
 80537b0:	4618      	mov	r0, r3
 80537b2:	f7fa f9b5 	bl	804db20 <lwip_htons>
 80537b6:	4603      	mov	r3, r0
 80537b8:	b2db      	uxtb	r3, r3
 80537ba:	f003 0301 	and.w	r3, r3, #1
 80537be:	2b00      	cmp	r3, #0
 80537c0:	f040 80bf 	bne.w	8053942 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80537c4:	4875      	ldr	r0, [pc, #468]	; (805399c <tcp_receive+0xf1c>)
 80537c6:	f7fd fa39 	bl	8050c3c <tcp_seg_copy>
 80537ca:	4602      	mov	r2, r0
 80537cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80537ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80537d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80537d2:	681b      	ldr	r3, [r3, #0]
 80537d4:	2b00      	cmp	r3, #0
 80537d6:	f000 80b6 	beq.w	8053946 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80537da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80537dc:	68db      	ldr	r3, [r3, #12]
 80537de:	685b      	ldr	r3, [r3, #4]
 80537e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80537e2:	8912      	ldrh	r2, [r2, #8]
 80537e4:	441a      	add	r2, r3
 80537e6:	4b6c      	ldr	r3, [pc, #432]	; (8053998 <tcp_receive+0xf18>)
 80537e8:	681b      	ldr	r3, [r3, #0]
 80537ea:	1ad3      	subs	r3, r2, r3
 80537ec:	2b00      	cmp	r3, #0
 80537ee:	dd12      	ble.n	8053816 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80537f0:	4b69      	ldr	r3, [pc, #420]	; (8053998 <tcp_receive+0xf18>)
 80537f2:	681b      	ldr	r3, [r3, #0]
 80537f4:	b29a      	uxth	r2, r3
 80537f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80537f8:	68db      	ldr	r3, [r3, #12]
 80537fa:	685b      	ldr	r3, [r3, #4]
 80537fc:	b29b      	uxth	r3, r3
 80537fe:	1ad3      	subs	r3, r2, r3
 8053800:	b29a      	uxth	r2, r3
 8053802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053804:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8053806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053808:	685a      	ldr	r2, [r3, #4]
 805380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805380c:	891b      	ldrh	r3, [r3, #8]
 805380e:	4619      	mov	r1, r3
 8053810:	4610      	mov	r0, r2
 8053812:	f7fb fbf1 	bl	804eff8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8053816:	4b62      	ldr	r3, [pc, #392]	; (80539a0 <tcp_receive+0xf20>)
 8053818:	881b      	ldrh	r3, [r3, #0]
 805381a:	461a      	mov	r2, r3
 805381c:	4b5e      	ldr	r3, [pc, #376]	; (8053998 <tcp_receive+0xf18>)
 805381e:	681b      	ldr	r3, [r3, #0]
 8053820:	441a      	add	r2, r3
 8053822:	687b      	ldr	r3, [r7, #4]
 8053824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8053826:	6879      	ldr	r1, [r7, #4]
 8053828:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 805382a:	440b      	add	r3, r1
 805382c:	1ad3      	subs	r3, r2, r3
 805382e:	2b00      	cmp	r3, #0
 8053830:	f340 8089 	ble.w	8053946 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8053834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053836:	681b      	ldr	r3, [r3, #0]
 8053838:	68db      	ldr	r3, [r3, #12]
 805383a:	899b      	ldrh	r3, [r3, #12]
 805383c:	b29b      	uxth	r3, r3
 805383e:	4618      	mov	r0, r3
 8053840:	f7fa f96e 	bl	804db20 <lwip_htons>
 8053844:	4603      	mov	r3, r0
 8053846:	b2db      	uxtb	r3, r3
 8053848:	f003 0301 	and.w	r3, r3, #1
 805384c:	2b00      	cmp	r3, #0
 805384e:	d022      	beq.n	8053896 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8053850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053852:	681b      	ldr	r3, [r3, #0]
 8053854:	68db      	ldr	r3, [r3, #12]
 8053856:	899b      	ldrh	r3, [r3, #12]
 8053858:	b29b      	uxth	r3, r3
 805385a:	b21b      	sxth	r3, r3
 805385c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8053860:	b21c      	sxth	r4, r3
 8053862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053864:	681b      	ldr	r3, [r3, #0]
 8053866:	68db      	ldr	r3, [r3, #12]
 8053868:	899b      	ldrh	r3, [r3, #12]
 805386a:	b29b      	uxth	r3, r3
 805386c:	4618      	mov	r0, r3
 805386e:	f7fa f957 	bl	804db20 <lwip_htons>
 8053872:	4603      	mov	r3, r0
 8053874:	b2db      	uxtb	r3, r3
 8053876:	b29b      	uxth	r3, r3
 8053878:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 805387c:	b29b      	uxth	r3, r3
 805387e:	4618      	mov	r0, r3
 8053880:	f7fa f94e 	bl	804db20 <lwip_htons>
 8053884:	4603      	mov	r3, r0
 8053886:	b21b      	sxth	r3, r3
 8053888:	4323      	orrs	r3, r4
 805388a:	b21a      	sxth	r2, r3
 805388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805388e:	681b      	ldr	r3, [r3, #0]
 8053890:	68db      	ldr	r3, [r3, #12]
 8053892:	b292      	uxth	r2, r2
 8053894:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8053896:	687b      	ldr	r3, [r7, #4]
 8053898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805389a:	b29a      	uxth	r2, r3
 805389c:	687b      	ldr	r3, [r7, #4]
 805389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80538a0:	4413      	add	r3, r2
 80538a2:	b299      	uxth	r1, r3
 80538a4:	4b3c      	ldr	r3, [pc, #240]	; (8053998 <tcp_receive+0xf18>)
 80538a6:	681b      	ldr	r3, [r3, #0]
 80538a8:	b29a      	uxth	r2, r3
 80538aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80538ac:	681b      	ldr	r3, [r3, #0]
 80538ae:	1a8a      	subs	r2, r1, r2
 80538b0:	b292      	uxth	r2, r2
 80538b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80538b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80538b6:	681b      	ldr	r3, [r3, #0]
 80538b8:	685a      	ldr	r2, [r3, #4]
 80538ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80538bc:	681b      	ldr	r3, [r3, #0]
 80538be:	891b      	ldrh	r3, [r3, #8]
 80538c0:	4619      	mov	r1, r3
 80538c2:	4610      	mov	r0, r2
 80538c4:	f7fb fb98 	bl	804eff8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80538c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80538ca:	681b      	ldr	r3, [r3, #0]
 80538cc:	891c      	ldrh	r4, [r3, #8]
 80538ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80538d0:	681b      	ldr	r3, [r3, #0]
 80538d2:	68db      	ldr	r3, [r3, #12]
 80538d4:	899b      	ldrh	r3, [r3, #12]
 80538d6:	b29b      	uxth	r3, r3
 80538d8:	4618      	mov	r0, r3
 80538da:	f7fa f921 	bl	804db20 <lwip_htons>
 80538de:	4603      	mov	r3, r0
 80538e0:	b2db      	uxtb	r3, r3
 80538e2:	f003 0303 	and.w	r3, r3, #3
 80538e6:	2b00      	cmp	r3, #0
 80538e8:	d001      	beq.n	80538ee <tcp_receive+0xe6e>
 80538ea:	2301      	movs	r3, #1
 80538ec:	e000      	b.n	80538f0 <tcp_receive+0xe70>
 80538ee:	2300      	movs	r3, #0
 80538f0:	4423      	add	r3, r4
 80538f2:	b29a      	uxth	r2, r3
 80538f4:	4b2a      	ldr	r3, [pc, #168]	; (80539a0 <tcp_receive+0xf20>)
 80538f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80538f8:	4b29      	ldr	r3, [pc, #164]	; (80539a0 <tcp_receive+0xf20>)
 80538fa:	881b      	ldrh	r3, [r3, #0]
 80538fc:	461a      	mov	r2, r3
 80538fe:	4b26      	ldr	r3, [pc, #152]	; (8053998 <tcp_receive+0xf18>)
 8053900:	681b      	ldr	r3, [r3, #0]
 8053902:	441a      	add	r2, r3
 8053904:	687b      	ldr	r3, [r7, #4]
 8053906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8053908:	6879      	ldr	r1, [r7, #4]
 805390a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 805390c:	440b      	add	r3, r1
 805390e:	429a      	cmp	r2, r3
 8053910:	d019      	beq.n	8053946 <tcp_receive+0xec6>
 8053912:	4b24      	ldr	r3, [pc, #144]	; (80539a4 <tcp_receive+0xf24>)
 8053914:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8053918:	4923      	ldr	r1, [pc, #140]	; (80539a8 <tcp_receive+0xf28>)
 805391a:	4824      	ldr	r0, [pc, #144]	; (80539ac <tcp_receive+0xf2c>)
 805391c:	f005 fb8a 	bl	8059034 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8053920:	e011      	b.n	8053946 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8053922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8053924:	681b      	ldr	r3, [r3, #0]
 8053926:	63bb      	str	r3, [r7, #56]	; 0x38
 8053928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 805392a:	2b00      	cmp	r3, #0
 805392c:	f47f aea4 	bne.w	8053678 <tcp_receive+0xbf8>
 8053930:	e00a      	b.n	8053948 <tcp_receive+0xec8>
                break;
 8053932:	bf00      	nop
 8053934:	e008      	b.n	8053948 <tcp_receive+0xec8>
                break;
 8053936:	bf00      	nop
 8053938:	e006      	b.n	8053948 <tcp_receive+0xec8>
                  break;
 805393a:	bf00      	nop
 805393c:	e004      	b.n	8053948 <tcp_receive+0xec8>
                  break;
 805393e:	bf00      	nop
 8053940:	e002      	b.n	8053948 <tcp_receive+0xec8>
                  break;
 8053942:	bf00      	nop
 8053944:	e000      	b.n	8053948 <tcp_receive+0xec8>
                break;
 8053946:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8053948:	6878      	ldr	r0, [r7, #4]
 805394a:	f001 fe8b 	bl	8055664 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 805394e:	e003      	b.n	8053958 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8053950:	6878      	ldr	r0, [r7, #4]
 8053952:	f001 fe87 	bl	8055664 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8053956:	e01a      	b.n	805398e <tcp_receive+0xf0e>
 8053958:	e019      	b.n	805398e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 805395a:	4b0f      	ldr	r3, [pc, #60]	; (8053998 <tcp_receive+0xf18>)
 805395c:	681a      	ldr	r2, [r3, #0]
 805395e:	687b      	ldr	r3, [r7, #4]
 8053960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8053962:	1ad3      	subs	r3, r2, r3
 8053964:	2b00      	cmp	r3, #0
 8053966:	db0a      	blt.n	805397e <tcp_receive+0xefe>
 8053968:	4b0b      	ldr	r3, [pc, #44]	; (8053998 <tcp_receive+0xf18>)
 805396a:	681a      	ldr	r2, [r3, #0]
 805396c:	687b      	ldr	r3, [r7, #4]
 805396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8053970:	6879      	ldr	r1, [r7, #4]
 8053972:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8053974:	440b      	add	r3, r1
 8053976:	1ad3      	subs	r3, r2, r3
 8053978:	3301      	adds	r3, #1
 805397a:	2b00      	cmp	r3, #0
 805397c:	dd07      	ble.n	805398e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 805397e:	687b      	ldr	r3, [r7, #4]
 8053980:	8b5b      	ldrh	r3, [r3, #26]
 8053982:	f043 0302 	orr.w	r3, r3, #2
 8053986:	b29a      	uxth	r2, r3
 8053988:	687b      	ldr	r3, [r7, #4]
 805398a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 805398c:	e7ff      	b.n	805398e <tcp_receive+0xf0e>
 805398e:	bf00      	nop
 8053990:	3750      	adds	r7, #80	; 0x50
 8053992:	46bd      	mov	sp, r7
 8053994:	bdb0      	pop	{r4, r5, r7, pc}
 8053996:	bf00      	nop
 8053998:	2000b604 	.word	0x2000b604
 805399c:	2000b5e4 	.word	0x2000b5e4
 80539a0:	2000b60e 	.word	0x2000b60e
 80539a4:	0805c044 	.word	0x0805c044
 80539a8:	0805c3ec 	.word	0x0805c3ec
 80539ac:	0805c090 	.word	0x0805c090

080539b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80539b0:	b480      	push	{r7}
 80539b2:	b083      	sub	sp, #12
 80539b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80539b6:	4b15      	ldr	r3, [pc, #84]	; (8053a0c <tcp_get_next_optbyte+0x5c>)
 80539b8:	881b      	ldrh	r3, [r3, #0]
 80539ba:	1c5a      	adds	r2, r3, #1
 80539bc:	b291      	uxth	r1, r2
 80539be:	4a13      	ldr	r2, [pc, #76]	; (8053a0c <tcp_get_next_optbyte+0x5c>)
 80539c0:	8011      	strh	r1, [r2, #0]
 80539c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80539c4:	4b12      	ldr	r3, [pc, #72]	; (8053a10 <tcp_get_next_optbyte+0x60>)
 80539c6:	681b      	ldr	r3, [r3, #0]
 80539c8:	2b00      	cmp	r3, #0
 80539ca:	d004      	beq.n	80539d6 <tcp_get_next_optbyte+0x26>
 80539cc:	4b11      	ldr	r3, [pc, #68]	; (8053a14 <tcp_get_next_optbyte+0x64>)
 80539ce:	881b      	ldrh	r3, [r3, #0]
 80539d0:	88fa      	ldrh	r2, [r7, #6]
 80539d2:	429a      	cmp	r2, r3
 80539d4:	d208      	bcs.n	80539e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80539d6:	4b10      	ldr	r3, [pc, #64]	; (8053a18 <tcp_get_next_optbyte+0x68>)
 80539d8:	681b      	ldr	r3, [r3, #0]
 80539da:	3314      	adds	r3, #20
 80539dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80539de:	88fb      	ldrh	r3, [r7, #6]
 80539e0:	683a      	ldr	r2, [r7, #0]
 80539e2:	4413      	add	r3, r2
 80539e4:	781b      	ldrb	r3, [r3, #0]
 80539e6:	e00b      	b.n	8053a00 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80539e8:	88fb      	ldrh	r3, [r7, #6]
 80539ea:	b2da      	uxtb	r2, r3
 80539ec:	4b09      	ldr	r3, [pc, #36]	; (8053a14 <tcp_get_next_optbyte+0x64>)
 80539ee:	881b      	ldrh	r3, [r3, #0]
 80539f0:	b2db      	uxtb	r3, r3
 80539f2:	1ad3      	subs	r3, r2, r3
 80539f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80539f6:	4b06      	ldr	r3, [pc, #24]	; (8053a10 <tcp_get_next_optbyte+0x60>)
 80539f8:	681a      	ldr	r2, [r3, #0]
 80539fa:	797b      	ldrb	r3, [r7, #5]
 80539fc:	4413      	add	r3, r2
 80539fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8053a00:	4618      	mov	r0, r3
 8053a02:	370c      	adds	r7, #12
 8053a04:	46bd      	mov	sp, r7
 8053a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8053a0a:	4770      	bx	lr
 8053a0c:	2000b600 	.word	0x2000b600
 8053a10:	2000b5fc 	.word	0x2000b5fc
 8053a14:	2000b5fa 	.word	0x2000b5fa
 8053a18:	2000b5f4 	.word	0x2000b5f4

08053a1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8053a1c:	b580      	push	{r7, lr}
 8053a1e:	b084      	sub	sp, #16
 8053a20:	af00      	add	r7, sp, #0
 8053a22:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8053a24:	687b      	ldr	r3, [r7, #4]
 8053a26:	2b00      	cmp	r3, #0
 8053a28:	d106      	bne.n	8053a38 <tcp_parseopt+0x1c>
 8053a2a:	4b32      	ldr	r3, [pc, #200]	; (8053af4 <tcp_parseopt+0xd8>)
 8053a2c:	f240 727d 	movw	r2, #1917	; 0x77d
 8053a30:	4931      	ldr	r1, [pc, #196]	; (8053af8 <tcp_parseopt+0xdc>)
 8053a32:	4832      	ldr	r0, [pc, #200]	; (8053afc <tcp_parseopt+0xe0>)
 8053a34:	f005 fafe 	bl	8059034 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8053a38:	4b31      	ldr	r3, [pc, #196]	; (8053b00 <tcp_parseopt+0xe4>)
 8053a3a:	881b      	ldrh	r3, [r3, #0]
 8053a3c:	2b00      	cmp	r3, #0
 8053a3e:	d055      	beq.n	8053aec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8053a40:	4b30      	ldr	r3, [pc, #192]	; (8053b04 <tcp_parseopt+0xe8>)
 8053a42:	2200      	movs	r2, #0
 8053a44:	801a      	strh	r2, [r3, #0]
 8053a46:	e045      	b.n	8053ad4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8053a48:	f7ff ffb2 	bl	80539b0 <tcp_get_next_optbyte>
 8053a4c:	4603      	mov	r3, r0
 8053a4e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8053a50:	7bfb      	ldrb	r3, [r7, #15]
 8053a52:	2b02      	cmp	r3, #2
 8053a54:	d006      	beq.n	8053a64 <tcp_parseopt+0x48>
 8053a56:	2b02      	cmp	r3, #2
 8053a58:	dc2b      	bgt.n	8053ab2 <tcp_parseopt+0x96>
 8053a5a:	2b00      	cmp	r3, #0
 8053a5c:	d041      	beq.n	8053ae2 <tcp_parseopt+0xc6>
 8053a5e:	2b01      	cmp	r3, #1
 8053a60:	d127      	bne.n	8053ab2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8053a62:	e037      	b.n	8053ad4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8053a64:	f7ff ffa4 	bl	80539b0 <tcp_get_next_optbyte>
 8053a68:	4603      	mov	r3, r0
 8053a6a:	2b04      	cmp	r3, #4
 8053a6c:	d13b      	bne.n	8053ae6 <tcp_parseopt+0xca>
 8053a6e:	4b25      	ldr	r3, [pc, #148]	; (8053b04 <tcp_parseopt+0xe8>)
 8053a70:	881b      	ldrh	r3, [r3, #0]
 8053a72:	3301      	adds	r3, #1
 8053a74:	4a22      	ldr	r2, [pc, #136]	; (8053b00 <tcp_parseopt+0xe4>)
 8053a76:	8812      	ldrh	r2, [r2, #0]
 8053a78:	4293      	cmp	r3, r2
 8053a7a:	da34      	bge.n	8053ae6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8053a7c:	f7ff ff98 	bl	80539b0 <tcp_get_next_optbyte>
 8053a80:	4603      	mov	r3, r0
 8053a82:	b29b      	uxth	r3, r3
 8053a84:	021b      	lsls	r3, r3, #8
 8053a86:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8053a88:	f7ff ff92 	bl	80539b0 <tcp_get_next_optbyte>
 8053a8c:	4603      	mov	r3, r0
 8053a8e:	b29a      	uxth	r2, r3
 8053a90:	89bb      	ldrh	r3, [r7, #12]
 8053a92:	4313      	orrs	r3, r2
 8053a94:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8053a96:	89bb      	ldrh	r3, [r7, #12]
 8053a98:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8053a9c:	d804      	bhi.n	8053aa8 <tcp_parseopt+0x8c>
 8053a9e:	89bb      	ldrh	r3, [r7, #12]
 8053aa0:	2b00      	cmp	r3, #0
 8053aa2:	d001      	beq.n	8053aa8 <tcp_parseopt+0x8c>
 8053aa4:	89ba      	ldrh	r2, [r7, #12]
 8053aa6:	e001      	b.n	8053aac <tcp_parseopt+0x90>
 8053aa8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8053aac:	687b      	ldr	r3, [r7, #4]
 8053aae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8053ab0:	e010      	b.n	8053ad4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8053ab2:	f7ff ff7d 	bl	80539b0 <tcp_get_next_optbyte>
 8053ab6:	4603      	mov	r3, r0
 8053ab8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8053aba:	7afb      	ldrb	r3, [r7, #11]
 8053abc:	2b01      	cmp	r3, #1
 8053abe:	d914      	bls.n	8053aea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8053ac0:	7afb      	ldrb	r3, [r7, #11]
 8053ac2:	b29a      	uxth	r2, r3
 8053ac4:	4b0f      	ldr	r3, [pc, #60]	; (8053b04 <tcp_parseopt+0xe8>)
 8053ac6:	881b      	ldrh	r3, [r3, #0]
 8053ac8:	4413      	add	r3, r2
 8053aca:	b29b      	uxth	r3, r3
 8053acc:	3b02      	subs	r3, #2
 8053ace:	b29a      	uxth	r2, r3
 8053ad0:	4b0c      	ldr	r3, [pc, #48]	; (8053b04 <tcp_parseopt+0xe8>)
 8053ad2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8053ad4:	4b0b      	ldr	r3, [pc, #44]	; (8053b04 <tcp_parseopt+0xe8>)
 8053ad6:	881a      	ldrh	r2, [r3, #0]
 8053ad8:	4b09      	ldr	r3, [pc, #36]	; (8053b00 <tcp_parseopt+0xe4>)
 8053ada:	881b      	ldrh	r3, [r3, #0]
 8053adc:	429a      	cmp	r2, r3
 8053ade:	d3b3      	bcc.n	8053a48 <tcp_parseopt+0x2c>
 8053ae0:	e004      	b.n	8053aec <tcp_parseopt+0xd0>
          return;
 8053ae2:	bf00      	nop
 8053ae4:	e002      	b.n	8053aec <tcp_parseopt+0xd0>
            return;
 8053ae6:	bf00      	nop
 8053ae8:	e000      	b.n	8053aec <tcp_parseopt+0xd0>
            return;
 8053aea:	bf00      	nop
      }
    }
  }
}
 8053aec:	3710      	adds	r7, #16
 8053aee:	46bd      	mov	sp, r7
 8053af0:	bd80      	pop	{r7, pc}
 8053af2:	bf00      	nop
 8053af4:	0805c044 	.word	0x0805c044
 8053af8:	0805c4a8 	.word	0x0805c4a8
 8053afc:	0805c090 	.word	0x0805c090
 8053b00:	2000b5f8 	.word	0x2000b5f8
 8053b04:	2000b600 	.word	0x2000b600

08053b08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8053b08:	b480      	push	{r7}
 8053b0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8053b0c:	4b05      	ldr	r3, [pc, #20]	; (8053b24 <tcp_trigger_input_pcb_close+0x1c>)
 8053b0e:	781b      	ldrb	r3, [r3, #0]
 8053b10:	f043 0310 	orr.w	r3, r3, #16
 8053b14:	b2da      	uxtb	r2, r3
 8053b16:	4b03      	ldr	r3, [pc, #12]	; (8053b24 <tcp_trigger_input_pcb_close+0x1c>)
 8053b18:	701a      	strb	r2, [r3, #0]
}
 8053b1a:	bf00      	nop
 8053b1c:	46bd      	mov	sp, r7
 8053b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8053b22:	4770      	bx	lr
 8053b24:	2000b611 	.word	0x2000b611

08053b28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8053b28:	b580      	push	{r7, lr}
 8053b2a:	b084      	sub	sp, #16
 8053b2c:	af00      	add	r7, sp, #0
 8053b2e:	60f8      	str	r0, [r7, #12]
 8053b30:	60b9      	str	r1, [r7, #8]
 8053b32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8053b34:	68fb      	ldr	r3, [r7, #12]
 8053b36:	2b00      	cmp	r3, #0
 8053b38:	d00a      	beq.n	8053b50 <tcp_route+0x28>
 8053b3a:	68fb      	ldr	r3, [r7, #12]
 8053b3c:	7a1b      	ldrb	r3, [r3, #8]
 8053b3e:	2b00      	cmp	r3, #0
 8053b40:	d006      	beq.n	8053b50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8053b42:	68fb      	ldr	r3, [r7, #12]
 8053b44:	7a1b      	ldrb	r3, [r3, #8]
 8053b46:	4618      	mov	r0, r3
 8053b48:	f7fb f84e 	bl	804ebe8 <netif_get_by_index>
 8053b4c:	4603      	mov	r3, r0
 8053b4e:	e003      	b.n	8053b58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8053b50:	6878      	ldr	r0, [r7, #4]
 8053b52:	f003 fc4b 	bl	80573ec <ip4_route>
 8053b56:	4603      	mov	r3, r0
  }
}
 8053b58:	4618      	mov	r0, r3
 8053b5a:	3710      	adds	r7, #16
 8053b5c:	46bd      	mov	sp, r7
 8053b5e:	bd80      	pop	{r7, pc}

08053b60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8053b60:	b590      	push	{r4, r7, lr}
 8053b62:	b087      	sub	sp, #28
 8053b64:	af00      	add	r7, sp, #0
 8053b66:	60f8      	str	r0, [r7, #12]
 8053b68:	60b9      	str	r1, [r7, #8]
 8053b6a:	603b      	str	r3, [r7, #0]
 8053b6c:	4613      	mov	r3, r2
 8053b6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8053b70:	68fb      	ldr	r3, [r7, #12]
 8053b72:	2b00      	cmp	r3, #0
 8053b74:	d105      	bne.n	8053b82 <tcp_create_segment+0x22>
 8053b76:	4b44      	ldr	r3, [pc, #272]	; (8053c88 <tcp_create_segment+0x128>)
 8053b78:	22a3      	movs	r2, #163	; 0xa3
 8053b7a:	4944      	ldr	r1, [pc, #272]	; (8053c8c <tcp_create_segment+0x12c>)
 8053b7c:	4844      	ldr	r0, [pc, #272]	; (8053c90 <tcp_create_segment+0x130>)
 8053b7e:	f005 fa59 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8053b82:	68bb      	ldr	r3, [r7, #8]
 8053b84:	2b00      	cmp	r3, #0
 8053b86:	d105      	bne.n	8053b94 <tcp_create_segment+0x34>
 8053b88:	4b3f      	ldr	r3, [pc, #252]	; (8053c88 <tcp_create_segment+0x128>)
 8053b8a:	22a4      	movs	r2, #164	; 0xa4
 8053b8c:	4941      	ldr	r1, [pc, #260]	; (8053c94 <tcp_create_segment+0x134>)
 8053b8e:	4840      	ldr	r0, [pc, #256]	; (8053c90 <tcp_create_segment+0x130>)
 8053b90:	f005 fa50 	bl	8059034 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8053b94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8053b98:	009b      	lsls	r3, r3, #2
 8053b9a:	b2db      	uxtb	r3, r3
 8053b9c:	f003 0304 	and.w	r3, r3, #4
 8053ba0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8053ba2:	2003      	movs	r0, #3
 8053ba4:	f7fa fc94 	bl	804e4d0 <memp_malloc>
 8053ba8:	6138      	str	r0, [r7, #16]
 8053baa:	693b      	ldr	r3, [r7, #16]
 8053bac:	2b00      	cmp	r3, #0
 8053bae:	d104      	bne.n	8053bba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8053bb0:	68b8      	ldr	r0, [r7, #8]
 8053bb2:	f7fb fba7 	bl	804f304 <pbuf_free>
    return NULL;
 8053bb6:	2300      	movs	r3, #0
 8053bb8:	e061      	b.n	8053c7e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8053bba:	693b      	ldr	r3, [r7, #16]
 8053bbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8053bc0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8053bc2:	693b      	ldr	r3, [r7, #16]
 8053bc4:	2200      	movs	r2, #0
 8053bc6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8053bc8:	693b      	ldr	r3, [r7, #16]
 8053bca:	68ba      	ldr	r2, [r7, #8]
 8053bcc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8053bce:	68bb      	ldr	r3, [r7, #8]
 8053bd0:	891a      	ldrh	r2, [r3, #8]
 8053bd2:	7dfb      	ldrb	r3, [r7, #23]
 8053bd4:	b29b      	uxth	r3, r3
 8053bd6:	429a      	cmp	r2, r3
 8053bd8:	d205      	bcs.n	8053be6 <tcp_create_segment+0x86>
 8053bda:	4b2b      	ldr	r3, [pc, #172]	; (8053c88 <tcp_create_segment+0x128>)
 8053bdc:	22b0      	movs	r2, #176	; 0xb0
 8053bde:	492e      	ldr	r1, [pc, #184]	; (8053c98 <tcp_create_segment+0x138>)
 8053be0:	482b      	ldr	r0, [pc, #172]	; (8053c90 <tcp_create_segment+0x130>)
 8053be2:	f005 fa27 	bl	8059034 <iprintf>
  seg->len = p->tot_len - optlen;
 8053be6:	68bb      	ldr	r3, [r7, #8]
 8053be8:	891a      	ldrh	r2, [r3, #8]
 8053bea:	7dfb      	ldrb	r3, [r7, #23]
 8053bec:	b29b      	uxth	r3, r3
 8053bee:	1ad3      	subs	r3, r2, r3
 8053bf0:	b29a      	uxth	r2, r3
 8053bf2:	693b      	ldr	r3, [r7, #16]
 8053bf4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8053bf6:	2114      	movs	r1, #20
 8053bf8:	68b8      	ldr	r0, [r7, #8]
 8053bfa:	f7fb faed 	bl	804f1d8 <pbuf_add_header>
 8053bfe:	4603      	mov	r3, r0
 8053c00:	2b00      	cmp	r3, #0
 8053c02:	d004      	beq.n	8053c0e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8053c04:	6938      	ldr	r0, [r7, #16]
 8053c06:	f7fd f800 	bl	8050c0a <tcp_seg_free>
    return NULL;
 8053c0a:	2300      	movs	r3, #0
 8053c0c:	e037      	b.n	8053c7e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8053c0e:	693b      	ldr	r3, [r7, #16]
 8053c10:	685b      	ldr	r3, [r3, #4]
 8053c12:	685a      	ldr	r2, [r3, #4]
 8053c14:	693b      	ldr	r3, [r7, #16]
 8053c16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8053c18:	68fb      	ldr	r3, [r7, #12]
 8053c1a:	8ada      	ldrh	r2, [r3, #22]
 8053c1c:	693b      	ldr	r3, [r7, #16]
 8053c1e:	68dc      	ldr	r4, [r3, #12]
 8053c20:	4610      	mov	r0, r2
 8053c22:	f7f9 ff7d 	bl	804db20 <lwip_htons>
 8053c26:	4603      	mov	r3, r0
 8053c28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8053c2a:	68fb      	ldr	r3, [r7, #12]
 8053c2c:	8b1a      	ldrh	r2, [r3, #24]
 8053c2e:	693b      	ldr	r3, [r7, #16]
 8053c30:	68dc      	ldr	r4, [r3, #12]
 8053c32:	4610      	mov	r0, r2
 8053c34:	f7f9 ff74 	bl	804db20 <lwip_htons>
 8053c38:	4603      	mov	r3, r0
 8053c3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8053c3c:	693b      	ldr	r3, [r7, #16]
 8053c3e:	68dc      	ldr	r4, [r3, #12]
 8053c40:	6838      	ldr	r0, [r7, #0]
 8053c42:	f7f9 ff82 	bl	804db4a <lwip_htonl>
 8053c46:	4603      	mov	r3, r0
 8053c48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8053c4a:	7dfb      	ldrb	r3, [r7, #23]
 8053c4c:	089b      	lsrs	r3, r3, #2
 8053c4e:	b2db      	uxtb	r3, r3
 8053c50:	b29b      	uxth	r3, r3
 8053c52:	3305      	adds	r3, #5
 8053c54:	b29b      	uxth	r3, r3
 8053c56:	031b      	lsls	r3, r3, #12
 8053c58:	b29a      	uxth	r2, r3
 8053c5a:	79fb      	ldrb	r3, [r7, #7]
 8053c5c:	b29b      	uxth	r3, r3
 8053c5e:	4313      	orrs	r3, r2
 8053c60:	b29a      	uxth	r2, r3
 8053c62:	693b      	ldr	r3, [r7, #16]
 8053c64:	68dc      	ldr	r4, [r3, #12]
 8053c66:	4610      	mov	r0, r2
 8053c68:	f7f9 ff5a 	bl	804db20 <lwip_htons>
 8053c6c:	4603      	mov	r3, r0
 8053c6e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8053c70:	693b      	ldr	r3, [r7, #16]
 8053c72:	68db      	ldr	r3, [r3, #12]
 8053c74:	2200      	movs	r2, #0
 8053c76:	749a      	strb	r2, [r3, #18]
 8053c78:	2200      	movs	r2, #0
 8053c7a:	74da      	strb	r2, [r3, #19]
  return seg;
 8053c7c:	693b      	ldr	r3, [r7, #16]
}
 8053c7e:	4618      	mov	r0, r3
 8053c80:	371c      	adds	r7, #28
 8053c82:	46bd      	mov	sp, r7
 8053c84:	bd90      	pop	{r4, r7, pc}
 8053c86:	bf00      	nop
 8053c88:	0805c4c4 	.word	0x0805c4c4
 8053c8c:	0805c4f8 	.word	0x0805c4f8
 8053c90:	0805c518 	.word	0x0805c518
 8053c94:	0805c540 	.word	0x0805c540
 8053c98:	0805c564 	.word	0x0805c564

08053c9c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8053c9c:	b580      	push	{r7, lr}
 8053c9e:	b086      	sub	sp, #24
 8053ca0:	af00      	add	r7, sp, #0
 8053ca2:	607b      	str	r3, [r7, #4]
 8053ca4:	4603      	mov	r3, r0
 8053ca6:	73fb      	strb	r3, [r7, #15]
 8053ca8:	460b      	mov	r3, r1
 8053caa:	81bb      	strh	r3, [r7, #12]
 8053cac:	4613      	mov	r3, r2
 8053cae:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8053cb0:	89bb      	ldrh	r3, [r7, #12]
 8053cb2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8053cb4:	687b      	ldr	r3, [r7, #4]
 8053cb6:	2b00      	cmp	r3, #0
 8053cb8:	d105      	bne.n	8053cc6 <tcp_pbuf_prealloc+0x2a>
 8053cba:	4b30      	ldr	r3, [pc, #192]	; (8053d7c <tcp_pbuf_prealloc+0xe0>)
 8053cbc:	22e8      	movs	r2, #232	; 0xe8
 8053cbe:	4930      	ldr	r1, [pc, #192]	; (8053d80 <tcp_pbuf_prealloc+0xe4>)
 8053cc0:	4830      	ldr	r0, [pc, #192]	; (8053d84 <tcp_pbuf_prealloc+0xe8>)
 8053cc2:	f005 f9b7 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8053cc6:	6a3b      	ldr	r3, [r7, #32]
 8053cc8:	2b00      	cmp	r3, #0
 8053cca:	d105      	bne.n	8053cd8 <tcp_pbuf_prealloc+0x3c>
 8053ccc:	4b2b      	ldr	r3, [pc, #172]	; (8053d7c <tcp_pbuf_prealloc+0xe0>)
 8053cce:	22e9      	movs	r2, #233	; 0xe9
 8053cd0:	492d      	ldr	r1, [pc, #180]	; (8053d88 <tcp_pbuf_prealloc+0xec>)
 8053cd2:	482c      	ldr	r0, [pc, #176]	; (8053d84 <tcp_pbuf_prealloc+0xe8>)
 8053cd4:	f005 f9ae 	bl	8059034 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8053cd8:	89ba      	ldrh	r2, [r7, #12]
 8053cda:	897b      	ldrh	r3, [r7, #10]
 8053cdc:	429a      	cmp	r2, r3
 8053cde:	d221      	bcs.n	8053d24 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8053ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8053ce4:	f003 0302 	and.w	r3, r3, #2
 8053ce8:	2b00      	cmp	r3, #0
 8053cea:	d111      	bne.n	8053d10 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8053cec:	6a3b      	ldr	r3, [r7, #32]
 8053cee:	8b5b      	ldrh	r3, [r3, #26]
 8053cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8053cf4:	2b00      	cmp	r3, #0
 8053cf6:	d115      	bne.n	8053d24 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8053cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8053cfc:	2b00      	cmp	r3, #0
 8053cfe:	d007      	beq.n	8053d10 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8053d00:	6a3b      	ldr	r3, [r7, #32]
 8053d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8053d04:	2b00      	cmp	r3, #0
 8053d06:	d103      	bne.n	8053d10 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8053d08:	6a3b      	ldr	r3, [r7, #32]
 8053d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8053d0c:	2b00      	cmp	r3, #0
 8053d0e:	d009      	beq.n	8053d24 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8053d10:	89bb      	ldrh	r3, [r7, #12]
 8053d12:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8053d16:	f023 0203 	bic.w	r2, r3, #3
 8053d1a:	897b      	ldrh	r3, [r7, #10]
 8053d1c:	4293      	cmp	r3, r2
 8053d1e:	bf28      	it	cs
 8053d20:	4613      	movcs	r3, r2
 8053d22:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8053d24:	8af9      	ldrh	r1, [r7, #22]
 8053d26:	7bfb      	ldrb	r3, [r7, #15]
 8053d28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8053d2c:	4618      	mov	r0, r3
 8053d2e:	f7fb f805 	bl	804ed3c <pbuf_alloc>
 8053d32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8053d34:	693b      	ldr	r3, [r7, #16]
 8053d36:	2b00      	cmp	r3, #0
 8053d38:	d101      	bne.n	8053d3e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8053d3a:	2300      	movs	r3, #0
 8053d3c:	e019      	b.n	8053d72 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8053d3e:	693b      	ldr	r3, [r7, #16]
 8053d40:	681b      	ldr	r3, [r3, #0]
 8053d42:	2b00      	cmp	r3, #0
 8053d44:	d006      	beq.n	8053d54 <tcp_pbuf_prealloc+0xb8>
 8053d46:	4b0d      	ldr	r3, [pc, #52]	; (8053d7c <tcp_pbuf_prealloc+0xe0>)
 8053d48:	f240 120b 	movw	r2, #267	; 0x10b
 8053d4c:	490f      	ldr	r1, [pc, #60]	; (8053d8c <tcp_pbuf_prealloc+0xf0>)
 8053d4e:	480d      	ldr	r0, [pc, #52]	; (8053d84 <tcp_pbuf_prealloc+0xe8>)
 8053d50:	f005 f970 	bl	8059034 <iprintf>
  *oversize = p->len - length;
 8053d54:	693b      	ldr	r3, [r7, #16]
 8053d56:	895a      	ldrh	r2, [r3, #10]
 8053d58:	89bb      	ldrh	r3, [r7, #12]
 8053d5a:	1ad3      	subs	r3, r2, r3
 8053d5c:	b29a      	uxth	r2, r3
 8053d5e:	687b      	ldr	r3, [r7, #4]
 8053d60:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8053d62:	693b      	ldr	r3, [r7, #16]
 8053d64:	89ba      	ldrh	r2, [r7, #12]
 8053d66:	811a      	strh	r2, [r3, #8]
 8053d68:	693b      	ldr	r3, [r7, #16]
 8053d6a:	891a      	ldrh	r2, [r3, #8]
 8053d6c:	693b      	ldr	r3, [r7, #16]
 8053d6e:	815a      	strh	r2, [r3, #10]
  return p;
 8053d70:	693b      	ldr	r3, [r7, #16]
}
 8053d72:	4618      	mov	r0, r3
 8053d74:	3718      	adds	r7, #24
 8053d76:	46bd      	mov	sp, r7
 8053d78:	bd80      	pop	{r7, pc}
 8053d7a:	bf00      	nop
 8053d7c:	0805c4c4 	.word	0x0805c4c4
 8053d80:	0805c57c 	.word	0x0805c57c
 8053d84:	0805c518 	.word	0x0805c518
 8053d88:	0805c5a0 	.word	0x0805c5a0
 8053d8c:	0805c5c0 	.word	0x0805c5c0

08053d90 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8053d90:	b580      	push	{r7, lr}
 8053d92:	b082      	sub	sp, #8
 8053d94:	af00      	add	r7, sp, #0
 8053d96:	6078      	str	r0, [r7, #4]
 8053d98:	460b      	mov	r3, r1
 8053d9a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8053d9c:	687b      	ldr	r3, [r7, #4]
 8053d9e:	2b00      	cmp	r3, #0
 8053da0:	d106      	bne.n	8053db0 <tcp_write_checks+0x20>
 8053da2:	4b33      	ldr	r3, [pc, #204]	; (8053e70 <tcp_write_checks+0xe0>)
 8053da4:	f240 1233 	movw	r2, #307	; 0x133
 8053da8:	4932      	ldr	r1, [pc, #200]	; (8053e74 <tcp_write_checks+0xe4>)
 8053daa:	4833      	ldr	r0, [pc, #204]	; (8053e78 <tcp_write_checks+0xe8>)
 8053dac:	f005 f942 	bl	8059034 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8053db0:	687b      	ldr	r3, [r7, #4]
 8053db2:	7d1b      	ldrb	r3, [r3, #20]
 8053db4:	2b04      	cmp	r3, #4
 8053db6:	d00e      	beq.n	8053dd6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8053db8:	687b      	ldr	r3, [r7, #4]
 8053dba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8053dbc:	2b07      	cmp	r3, #7
 8053dbe:	d00a      	beq.n	8053dd6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8053dc0:	687b      	ldr	r3, [r7, #4]
 8053dc2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8053dc4:	2b02      	cmp	r3, #2
 8053dc6:	d006      	beq.n	8053dd6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8053dc8:	687b      	ldr	r3, [r7, #4]
 8053dca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8053dcc:	2b03      	cmp	r3, #3
 8053dce:	d002      	beq.n	8053dd6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8053dd0:	f06f 030a 	mvn.w	r3, #10
 8053dd4:	e048      	b.n	8053e68 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8053dd6:	887b      	ldrh	r3, [r7, #2]
 8053dd8:	2b00      	cmp	r3, #0
 8053dda:	d101      	bne.n	8053de0 <tcp_write_checks+0x50>
    return ERR_OK;
 8053ddc:	2300      	movs	r3, #0
 8053dde:	e043      	b.n	8053e68 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8053de0:	687b      	ldr	r3, [r7, #4]
 8053de2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8053de6:	887a      	ldrh	r2, [r7, #2]
 8053de8:	429a      	cmp	r2, r3
 8053dea:	d909      	bls.n	8053e00 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8053dec:	687b      	ldr	r3, [r7, #4]
 8053dee:	8b5b      	ldrh	r3, [r3, #26]
 8053df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8053df4:	b29a      	uxth	r2, r3
 8053df6:	687b      	ldr	r3, [r7, #4]
 8053df8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8053dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8053dfe:	e033      	b.n	8053e68 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8053e00:	687b      	ldr	r3, [r7, #4]
 8053e02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8053e06:	2b08      	cmp	r3, #8
 8053e08:	d909      	bls.n	8053e1e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8053e0a:	687b      	ldr	r3, [r7, #4]
 8053e0c:	8b5b      	ldrh	r3, [r3, #26]
 8053e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8053e12:	b29a      	uxth	r2, r3
 8053e14:	687b      	ldr	r3, [r7, #4]
 8053e16:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8053e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8053e1c:	e024      	b.n	8053e68 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8053e1e:	687b      	ldr	r3, [r7, #4]
 8053e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8053e24:	2b00      	cmp	r3, #0
 8053e26:	d00f      	beq.n	8053e48 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8053e28:	687b      	ldr	r3, [r7, #4]
 8053e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8053e2c:	2b00      	cmp	r3, #0
 8053e2e:	d11a      	bne.n	8053e66 <tcp_write_checks+0xd6>
 8053e30:	687b      	ldr	r3, [r7, #4]
 8053e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8053e34:	2b00      	cmp	r3, #0
 8053e36:	d116      	bne.n	8053e66 <tcp_write_checks+0xd6>
 8053e38:	4b0d      	ldr	r3, [pc, #52]	; (8053e70 <tcp_write_checks+0xe0>)
 8053e3a:	f240 1255 	movw	r2, #341	; 0x155
 8053e3e:	490f      	ldr	r1, [pc, #60]	; (8053e7c <tcp_write_checks+0xec>)
 8053e40:	480d      	ldr	r0, [pc, #52]	; (8053e78 <tcp_write_checks+0xe8>)
 8053e42:	f005 f8f7 	bl	8059034 <iprintf>
 8053e46:	e00e      	b.n	8053e66 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8053e48:	687b      	ldr	r3, [r7, #4]
 8053e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8053e4c:	2b00      	cmp	r3, #0
 8053e4e:	d103      	bne.n	8053e58 <tcp_write_checks+0xc8>
 8053e50:	687b      	ldr	r3, [r7, #4]
 8053e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8053e54:	2b00      	cmp	r3, #0
 8053e56:	d006      	beq.n	8053e66 <tcp_write_checks+0xd6>
 8053e58:	4b05      	ldr	r3, [pc, #20]	; (8053e70 <tcp_write_checks+0xe0>)
 8053e5a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8053e5e:	4908      	ldr	r1, [pc, #32]	; (8053e80 <tcp_write_checks+0xf0>)
 8053e60:	4805      	ldr	r0, [pc, #20]	; (8053e78 <tcp_write_checks+0xe8>)
 8053e62:	f005 f8e7 	bl	8059034 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8053e66:	2300      	movs	r3, #0
}
 8053e68:	4618      	mov	r0, r3
 8053e6a:	3708      	adds	r7, #8
 8053e6c:	46bd      	mov	sp, r7
 8053e6e:	bd80      	pop	{r7, pc}
 8053e70:	0805c4c4 	.word	0x0805c4c4
 8053e74:	0805c5d4 	.word	0x0805c5d4
 8053e78:	0805c518 	.word	0x0805c518
 8053e7c:	0805c5f4 	.word	0x0805c5f4
 8053e80:	0805c630 	.word	0x0805c630

08053e84 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8053e84:	b590      	push	{r4, r7, lr}
 8053e86:	b09b      	sub	sp, #108	; 0x6c
 8053e88:	af04      	add	r7, sp, #16
 8053e8a:	60f8      	str	r0, [r7, #12]
 8053e8c:	60b9      	str	r1, [r7, #8]
 8053e8e:	4611      	mov	r1, r2
 8053e90:	461a      	mov	r2, r3
 8053e92:	460b      	mov	r3, r1
 8053e94:	80fb      	strh	r3, [r7, #6]
 8053e96:	4613      	mov	r3, r2
 8053e98:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8053e9a:	2300      	movs	r3, #0
 8053e9c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8053e9e:	2300      	movs	r3, #0
 8053ea0:	653b      	str	r3, [r7, #80]	; 0x50
 8053ea2:	2300      	movs	r3, #0
 8053ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8053ea6:	2300      	movs	r3, #0
 8053ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8053eaa:	2300      	movs	r3, #0
 8053eac:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8053eae:	2300      	movs	r3, #0
 8053eb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8053eb4:	2300      	movs	r3, #0
 8053eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8053eba:	2300      	movs	r3, #0
 8053ebc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8053ebe:	2300      	movs	r3, #0
 8053ec0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8053ec2:	2300      	movs	r3, #0
 8053ec4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8053ec6:	68fb      	ldr	r3, [r7, #12]
 8053ec8:	2b00      	cmp	r3, #0
 8053eca:	d109      	bne.n	8053ee0 <tcp_write+0x5c>
 8053ecc:	4ba4      	ldr	r3, [pc, #656]	; (8054160 <tcp_write+0x2dc>)
 8053ece:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8053ed2:	49a4      	ldr	r1, [pc, #656]	; (8054164 <tcp_write+0x2e0>)
 8053ed4:	48a4      	ldr	r0, [pc, #656]	; (8054168 <tcp_write+0x2e4>)
 8053ed6:	f005 f8ad 	bl	8059034 <iprintf>
 8053eda:	f06f 030f 	mvn.w	r3, #15
 8053ede:	e32a      	b.n	8054536 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8053ee0:	68fb      	ldr	r3, [r7, #12]
 8053ee2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8053ee6:	085b      	lsrs	r3, r3, #1
 8053ee8:	b29a      	uxth	r2, r3
 8053eea:	68fb      	ldr	r3, [r7, #12]
 8053eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8053eee:	4293      	cmp	r3, r2
 8053ef0:	bf28      	it	cs
 8053ef2:	4613      	movcs	r3, r2
 8053ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8053ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053ef8:	2b00      	cmp	r3, #0
 8053efa:	d102      	bne.n	8053f02 <tcp_write+0x7e>
 8053efc:	68fb      	ldr	r3, [r7, #12]
 8053efe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8053f00:	e000      	b.n	8053f04 <tcp_write+0x80>
 8053f02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8053f04:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8053f06:	68bb      	ldr	r3, [r7, #8]
 8053f08:	2b00      	cmp	r3, #0
 8053f0a:	d109      	bne.n	8053f20 <tcp_write+0x9c>
 8053f0c:	4b94      	ldr	r3, [pc, #592]	; (8054160 <tcp_write+0x2dc>)
 8053f0e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8053f12:	4996      	ldr	r1, [pc, #600]	; (805416c <tcp_write+0x2e8>)
 8053f14:	4894      	ldr	r0, [pc, #592]	; (8054168 <tcp_write+0x2e4>)
 8053f16:	f005 f88d 	bl	8059034 <iprintf>
 8053f1a:	f06f 030f 	mvn.w	r3, #15
 8053f1e:	e30a      	b.n	8054536 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8053f20:	88fb      	ldrh	r3, [r7, #6]
 8053f22:	4619      	mov	r1, r3
 8053f24:	68f8      	ldr	r0, [r7, #12]
 8053f26:	f7ff ff33 	bl	8053d90 <tcp_write_checks>
 8053f2a:	4603      	mov	r3, r0
 8053f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8053f30:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8053f34:	2b00      	cmp	r3, #0
 8053f36:	d002      	beq.n	8053f3e <tcp_write+0xba>
    return err;
 8053f38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8053f3c:	e2fb      	b.n	8054536 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8053f3e:	68fb      	ldr	r3, [r7, #12]
 8053f40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8053f44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8053f48:	2300      	movs	r3, #0
 8053f4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8053f4e:	68fb      	ldr	r3, [r7, #12]
 8053f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8053f52:	2b00      	cmp	r3, #0
 8053f54:	f000 80f6 	beq.w	8054144 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8053f58:	68fb      	ldr	r3, [r7, #12]
 8053f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8053f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8053f5e:	e002      	b.n	8053f66 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8053f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053f62:	681b      	ldr	r3, [r3, #0]
 8053f64:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8053f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053f68:	681b      	ldr	r3, [r3, #0]
 8053f6a:	2b00      	cmp	r3, #0
 8053f6c:	d1f8      	bne.n	8053f60 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8053f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053f70:	7a9b      	ldrb	r3, [r3, #10]
 8053f72:	009b      	lsls	r3, r3, #2
 8053f74:	b29b      	uxth	r3, r3
 8053f76:	f003 0304 	and.w	r3, r3, #4
 8053f7a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8053f7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8053f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053f80:	891b      	ldrh	r3, [r3, #8]
 8053f82:	4619      	mov	r1, r3
 8053f84:	8c3b      	ldrh	r3, [r7, #32]
 8053f86:	440b      	add	r3, r1
 8053f88:	429a      	cmp	r2, r3
 8053f8a:	da06      	bge.n	8053f9a <tcp_write+0x116>
 8053f8c:	4b74      	ldr	r3, [pc, #464]	; (8054160 <tcp_write+0x2dc>)
 8053f8e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8053f92:	4977      	ldr	r1, [pc, #476]	; (8054170 <tcp_write+0x2ec>)
 8053f94:	4874      	ldr	r0, [pc, #464]	; (8054168 <tcp_write+0x2e4>)
 8053f96:	f005 f84d 	bl	8059034 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8053f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053f9c:	891a      	ldrh	r2, [r3, #8]
 8053f9e:	8c3b      	ldrh	r3, [r7, #32]
 8053fa0:	4413      	add	r3, r2
 8053fa2:	b29b      	uxth	r3, r3
 8053fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8053fa6:	1ad3      	subs	r3, r2, r3
 8053fa8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8053faa:	68fb      	ldr	r3, [r7, #12]
 8053fac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8053fb0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8053fb2:	8a7b      	ldrh	r3, [r7, #18]
 8053fb4:	2b00      	cmp	r3, #0
 8053fb6:	d026      	beq.n	8054006 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8053fb8:	8a7b      	ldrh	r3, [r7, #18]
 8053fba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8053fbc:	429a      	cmp	r2, r3
 8053fbe:	d206      	bcs.n	8053fce <tcp_write+0x14a>
 8053fc0:	4b67      	ldr	r3, [pc, #412]	; (8054160 <tcp_write+0x2dc>)
 8053fc2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8053fc6:	496b      	ldr	r1, [pc, #428]	; (8054174 <tcp_write+0x2f0>)
 8053fc8:	4867      	ldr	r0, [pc, #412]	; (8054168 <tcp_write+0x2e4>)
 8053fca:	f005 f833 	bl	8059034 <iprintf>
      seg = last_unsent;
 8053fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8053fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8053fd2:	8a7b      	ldrh	r3, [r7, #18]
 8053fd4:	88fa      	ldrh	r2, [r7, #6]
 8053fd6:	4293      	cmp	r3, r2
 8053fd8:	bf28      	it	cs
 8053fda:	4613      	movcs	r3, r2
 8053fdc:	b29b      	uxth	r3, r3
 8053fde:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8053fe0:	4293      	cmp	r3, r2
 8053fe2:	bf28      	it	cs
 8053fe4:	4613      	movcs	r3, r2
 8053fe6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8053fe8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8053fec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8053fee:	4413      	add	r3, r2
 8053ff0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8053ff4:	8a7a      	ldrh	r2, [r7, #18]
 8053ff6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8053ff8:	1ad3      	subs	r3, r2, r3
 8053ffa:	b29b      	uxth	r3, r3
 8053ffc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8053ffe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8054000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8054002:	1ad3      	subs	r3, r2, r3
 8054004:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8054006:	8a7b      	ldrh	r3, [r7, #18]
 8054008:	2b00      	cmp	r3, #0
 805400a:	d00b      	beq.n	8054024 <tcp_write+0x1a0>
 805400c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8054010:	88fb      	ldrh	r3, [r7, #6]
 8054012:	429a      	cmp	r2, r3
 8054014:	d006      	beq.n	8054024 <tcp_write+0x1a0>
 8054016:	4b52      	ldr	r3, [pc, #328]	; (8054160 <tcp_write+0x2dc>)
 8054018:	f44f 7200 	mov.w	r2, #512	; 0x200
 805401c:	4956      	ldr	r1, [pc, #344]	; (8054178 <tcp_write+0x2f4>)
 805401e:	4852      	ldr	r0, [pc, #328]	; (8054168 <tcp_write+0x2e4>)
 8054020:	f005 f808 	bl	8059034 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8054024:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8054028:	88fb      	ldrh	r3, [r7, #6]
 805402a:	429a      	cmp	r2, r3
 805402c:	f080 8167 	bcs.w	80542fe <tcp_write+0x47a>
 8054030:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8054032:	2b00      	cmp	r3, #0
 8054034:	f000 8163 	beq.w	80542fe <tcp_write+0x47a>
 8054038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805403a:	891b      	ldrh	r3, [r3, #8]
 805403c:	2b00      	cmp	r3, #0
 805403e:	f000 815e 	beq.w	80542fe <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8054042:	88fa      	ldrh	r2, [r7, #6]
 8054044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8054048:	1ad2      	subs	r2, r2, r3
 805404a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 805404c:	4293      	cmp	r3, r2
 805404e:	bfa8      	it	ge
 8054050:	4613      	movge	r3, r2
 8054052:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8054054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8054056:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8054058:	797b      	ldrb	r3, [r7, #5]
 805405a:	f003 0301 	and.w	r3, r3, #1
 805405e:	2b00      	cmp	r3, #0
 8054060:	d027      	beq.n	80540b2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8054062:	f107 0012 	add.w	r0, r7, #18
 8054066:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8054068:	8bf9      	ldrh	r1, [r7, #30]
 805406a:	2301      	movs	r3, #1
 805406c:	9302      	str	r3, [sp, #8]
 805406e:	797b      	ldrb	r3, [r7, #5]
 8054070:	9301      	str	r3, [sp, #4]
 8054072:	68fb      	ldr	r3, [r7, #12]
 8054074:	9300      	str	r3, [sp, #0]
 8054076:	4603      	mov	r3, r0
 8054078:	2000      	movs	r0, #0
 805407a:	f7ff fe0f 	bl	8053c9c <tcp_pbuf_prealloc>
 805407e:	6578      	str	r0, [r7, #84]	; 0x54
 8054080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8054082:	2b00      	cmp	r3, #0
 8054084:	f000 8225 	beq.w	80544d2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8054088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 805408a:	6858      	ldr	r0, [r3, #4]
 805408c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8054090:	68ba      	ldr	r2, [r7, #8]
 8054092:	4413      	add	r3, r2
 8054094:	8bfa      	ldrh	r2, [r7, #30]
 8054096:	4619      	mov	r1, r3
 8054098:	f004 febc 	bl	8058e14 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 805409c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 805409e:	f7fb f9bf 	bl	804f420 <pbuf_clen>
 80540a2:	4603      	mov	r3, r0
 80540a4:	461a      	mov	r2, r3
 80540a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80540aa:	4413      	add	r3, r2
 80540ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80540b0:	e041      	b.n	8054136 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80540b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80540b4:	685b      	ldr	r3, [r3, #4]
 80540b6:	637b      	str	r3, [r7, #52]	; 0x34
 80540b8:	e002      	b.n	80540c0 <tcp_write+0x23c>
 80540ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80540bc:	681b      	ldr	r3, [r3, #0]
 80540be:	637b      	str	r3, [r7, #52]	; 0x34
 80540c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80540c2:	681b      	ldr	r3, [r3, #0]
 80540c4:	2b00      	cmp	r3, #0
 80540c6:	d1f8      	bne.n	80540ba <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80540c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80540ca:	7b1b      	ldrb	r3, [r3, #12]
 80540cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80540d0:	2b00      	cmp	r3, #0
 80540d2:	d115      	bne.n	8054100 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80540d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80540d6:	685b      	ldr	r3, [r3, #4]
 80540d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80540da:	8952      	ldrh	r2, [r2, #10]
 80540dc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80540de:	68ba      	ldr	r2, [r7, #8]
 80540e0:	429a      	cmp	r2, r3
 80540e2:	d10d      	bne.n	8054100 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80540e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80540e8:	2b00      	cmp	r3, #0
 80540ea:	d006      	beq.n	80540fa <tcp_write+0x276>
 80540ec:	4b1c      	ldr	r3, [pc, #112]	; (8054160 <tcp_write+0x2dc>)
 80540ee:	f240 2231 	movw	r2, #561	; 0x231
 80540f2:	4922      	ldr	r1, [pc, #136]	; (805417c <tcp_write+0x2f8>)
 80540f4:	481c      	ldr	r0, [pc, #112]	; (8054168 <tcp_write+0x2e4>)
 80540f6:	f004 ff9d 	bl	8059034 <iprintf>
          extendlen = seglen;
 80540fa:	8bfb      	ldrh	r3, [r7, #30]
 80540fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80540fe:	e01a      	b.n	8054136 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8054100:	8bfb      	ldrh	r3, [r7, #30]
 8054102:	2201      	movs	r2, #1
 8054104:	4619      	mov	r1, r3
 8054106:	2000      	movs	r0, #0
 8054108:	f7fa fe18 	bl	804ed3c <pbuf_alloc>
 805410c:	6578      	str	r0, [r7, #84]	; 0x54
 805410e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8054110:	2b00      	cmp	r3, #0
 8054112:	f000 81e0 	beq.w	80544d6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8054116:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 805411a:	68ba      	ldr	r2, [r7, #8]
 805411c:	441a      	add	r2, r3
 805411e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8054120:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8054122:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8054124:	f7fb f97c 	bl	804f420 <pbuf_clen>
 8054128:	4603      	mov	r3, r0
 805412a:	461a      	mov	r2, r3
 805412c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8054130:	4413      	add	r3, r2
 8054132:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8054136:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 805413a:	8bfb      	ldrh	r3, [r7, #30]
 805413c:	4413      	add	r3, r2
 805413e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8054142:	e0dc      	b.n	80542fe <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8054144:	68fb      	ldr	r3, [r7, #12]
 8054146:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 805414a:	2b00      	cmp	r3, #0
 805414c:	f000 80d7 	beq.w	80542fe <tcp_write+0x47a>
 8054150:	4b03      	ldr	r3, [pc, #12]	; (8054160 <tcp_write+0x2dc>)
 8054152:	f240 224a 	movw	r2, #586	; 0x24a
 8054156:	490a      	ldr	r1, [pc, #40]	; (8054180 <tcp_write+0x2fc>)
 8054158:	4803      	ldr	r0, [pc, #12]	; (8054168 <tcp_write+0x2e4>)
 805415a:	f004 ff6b 	bl	8059034 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 805415e:	e0ce      	b.n	80542fe <tcp_write+0x47a>
 8054160:	0805c4c4 	.word	0x0805c4c4
 8054164:	0805c664 	.word	0x0805c664
 8054168:	0805c518 	.word	0x0805c518
 805416c:	0805c67c 	.word	0x0805c67c
 8054170:	0805c6b0 	.word	0x0805c6b0
 8054174:	0805c6c8 	.word	0x0805c6c8
 8054178:	0805c6e8 	.word	0x0805c6e8
 805417c:	0805c708 	.word	0x0805c708
 8054180:	0805c734 	.word	0x0805c734
    struct pbuf *p;
    u16_t left = len - pos;
 8054184:	88fa      	ldrh	r2, [r7, #6]
 8054186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 805418a:	1ad3      	subs	r3, r2, r3
 805418c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 805418e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8054192:	b29b      	uxth	r3, r3
 8054194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8054196:	1ad3      	subs	r3, r2, r3
 8054198:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 805419a:	8b7a      	ldrh	r2, [r7, #26]
 805419c:	8bbb      	ldrh	r3, [r7, #28]
 805419e:	4293      	cmp	r3, r2
 80541a0:	bf28      	it	cs
 80541a2:	4613      	movcs	r3, r2
 80541a4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80541a6:	797b      	ldrb	r3, [r7, #5]
 80541a8:	f003 0301 	and.w	r3, r3, #1
 80541ac:	2b00      	cmp	r3, #0
 80541ae:	d036      	beq.n	805421e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80541b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80541b4:	b29a      	uxth	r2, r3
 80541b6:	8b3b      	ldrh	r3, [r7, #24]
 80541b8:	4413      	add	r3, r2
 80541ba:	b299      	uxth	r1, r3
 80541bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80541be:	2b00      	cmp	r3, #0
 80541c0:	bf0c      	ite	eq
 80541c2:	2301      	moveq	r3, #1
 80541c4:	2300      	movne	r3, #0
 80541c6:	b2db      	uxtb	r3, r3
 80541c8:	f107 0012 	add.w	r0, r7, #18
 80541cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80541ce:	9302      	str	r3, [sp, #8]
 80541d0:	797b      	ldrb	r3, [r7, #5]
 80541d2:	9301      	str	r3, [sp, #4]
 80541d4:	68fb      	ldr	r3, [r7, #12]
 80541d6:	9300      	str	r3, [sp, #0]
 80541d8:	4603      	mov	r3, r0
 80541da:	2036      	movs	r0, #54	; 0x36
 80541dc:	f7ff fd5e 	bl	8053c9c <tcp_pbuf_prealloc>
 80541e0:	6338      	str	r0, [r7, #48]	; 0x30
 80541e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80541e4:	2b00      	cmp	r3, #0
 80541e6:	f000 8178 	beq.w	80544da <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80541ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80541ec:	895b      	ldrh	r3, [r3, #10]
 80541ee:	8b3a      	ldrh	r2, [r7, #24]
 80541f0:	429a      	cmp	r2, r3
 80541f2:	d906      	bls.n	8054202 <tcp_write+0x37e>
 80541f4:	4b8c      	ldr	r3, [pc, #560]	; (8054428 <tcp_write+0x5a4>)
 80541f6:	f240 2266 	movw	r2, #614	; 0x266
 80541fa:	498c      	ldr	r1, [pc, #560]	; (805442c <tcp_write+0x5a8>)
 80541fc:	488c      	ldr	r0, [pc, #560]	; (8054430 <tcp_write+0x5ac>)
 80541fe:	f004 ff19 	bl	8059034 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8054202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8054204:	685a      	ldr	r2, [r3, #4]
 8054206:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 805420a:	18d0      	adds	r0, r2, r3
 805420c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8054210:	68ba      	ldr	r2, [r7, #8]
 8054212:	4413      	add	r3, r2
 8054214:	8b3a      	ldrh	r2, [r7, #24]
 8054216:	4619      	mov	r1, r3
 8054218:	f004 fdfc 	bl	8058e14 <memcpy>
 805421c:	e02f      	b.n	805427e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 805421e:	8a7b      	ldrh	r3, [r7, #18]
 8054220:	2b00      	cmp	r3, #0
 8054222:	d006      	beq.n	8054232 <tcp_write+0x3ae>
 8054224:	4b80      	ldr	r3, [pc, #512]	; (8054428 <tcp_write+0x5a4>)
 8054226:	f240 2271 	movw	r2, #625	; 0x271
 805422a:	4982      	ldr	r1, [pc, #520]	; (8054434 <tcp_write+0x5b0>)
 805422c:	4880      	ldr	r0, [pc, #512]	; (8054430 <tcp_write+0x5ac>)
 805422e:	f004 ff01 	bl	8059034 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8054232:	8b3b      	ldrh	r3, [r7, #24]
 8054234:	2201      	movs	r2, #1
 8054236:	4619      	mov	r1, r3
 8054238:	2036      	movs	r0, #54	; 0x36
 805423a:	f7fa fd7f 	bl	804ed3c <pbuf_alloc>
 805423e:	6178      	str	r0, [r7, #20]
 8054240:	697b      	ldr	r3, [r7, #20]
 8054242:	2b00      	cmp	r3, #0
 8054244:	f000 814b 	beq.w	80544de <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8054248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 805424c:	68ba      	ldr	r2, [r7, #8]
 805424e:	441a      	add	r2, r3
 8054250:	697b      	ldr	r3, [r7, #20]
 8054252:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8054254:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8054258:	b29b      	uxth	r3, r3
 805425a:	f44f 7220 	mov.w	r2, #640	; 0x280
 805425e:	4619      	mov	r1, r3
 8054260:	2036      	movs	r0, #54	; 0x36
 8054262:	f7fa fd6b 	bl	804ed3c <pbuf_alloc>
 8054266:	6338      	str	r0, [r7, #48]	; 0x30
 8054268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805426a:	2b00      	cmp	r3, #0
 805426c:	d103      	bne.n	8054276 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 805426e:	6978      	ldr	r0, [r7, #20]
 8054270:	f7fb f848 	bl	804f304 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8054274:	e136      	b.n	80544e4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8054276:	6979      	ldr	r1, [r7, #20]
 8054278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 805427a:	f7fb f911 	bl	804f4a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 805427e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8054280:	f7fb f8ce 	bl	804f420 <pbuf_clen>
 8054284:	4603      	mov	r3, r0
 8054286:	461a      	mov	r2, r3
 8054288:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 805428c:	4413      	add	r3, r2
 805428e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8054292:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8054296:	2b09      	cmp	r3, #9
 8054298:	d903      	bls.n	80542a2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 805429a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 805429c:	f7fb f832 	bl	804f304 <pbuf_free>
      goto memerr;
 80542a0:	e120      	b.n	80544e4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80542a2:	68fb      	ldr	r3, [r7, #12]
 80542a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80542a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80542aa:	441a      	add	r2, r3
 80542ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80542b0:	9300      	str	r3, [sp, #0]
 80542b2:	4613      	mov	r3, r2
 80542b4:	2200      	movs	r2, #0
 80542b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80542b8:	68f8      	ldr	r0, [r7, #12]
 80542ba:	f7ff fc51 	bl	8053b60 <tcp_create_segment>
 80542be:	64f8      	str	r0, [r7, #76]	; 0x4c
 80542c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80542c2:	2b00      	cmp	r3, #0
 80542c4:	f000 810d 	beq.w	80544e2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80542c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80542ca:	2b00      	cmp	r3, #0
 80542cc:	d102      	bne.n	80542d4 <tcp_write+0x450>
      queue = seg;
 80542ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80542d0:	647b      	str	r3, [r7, #68]	; 0x44
 80542d2:	e00c      	b.n	80542ee <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80542d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80542d6:	2b00      	cmp	r3, #0
 80542d8:	d106      	bne.n	80542e8 <tcp_write+0x464>
 80542da:	4b53      	ldr	r3, [pc, #332]	; (8054428 <tcp_write+0x5a4>)
 80542dc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80542e0:	4955      	ldr	r1, [pc, #340]	; (8054438 <tcp_write+0x5b4>)
 80542e2:	4853      	ldr	r0, [pc, #332]	; (8054430 <tcp_write+0x5ac>)
 80542e4:	f004 fea6 	bl	8059034 <iprintf>
      prev_seg->next = seg;
 80542e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80542ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80542ec:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80542ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80542f0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80542f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80542f6:	8b3b      	ldrh	r3, [r7, #24]
 80542f8:	4413      	add	r3, r2
 80542fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80542fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8054302:	88fb      	ldrh	r3, [r7, #6]
 8054304:	429a      	cmp	r2, r3
 8054306:	f4ff af3d 	bcc.w	8054184 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 805430a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 805430c:	2b00      	cmp	r3, #0
 805430e:	d02c      	beq.n	805436a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8054310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8054312:	685b      	ldr	r3, [r3, #4]
 8054314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8054316:	e01e      	b.n	8054356 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8054318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805431a:	891a      	ldrh	r2, [r3, #8]
 805431c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 805431e:	4413      	add	r3, r2
 8054320:	b29a      	uxth	r2, r3
 8054322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054324:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8054326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054328:	681b      	ldr	r3, [r3, #0]
 805432a:	2b00      	cmp	r3, #0
 805432c:	d110      	bne.n	8054350 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 805432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054330:	685b      	ldr	r3, [r3, #4]
 8054332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8054334:	8952      	ldrh	r2, [r2, #10]
 8054336:	4413      	add	r3, r2
 8054338:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 805433a:	68b9      	ldr	r1, [r7, #8]
 805433c:	4618      	mov	r0, r3
 805433e:	f004 fd69 	bl	8058e14 <memcpy>
        p->len += oversize_used;
 8054342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054344:	895a      	ldrh	r2, [r3, #10]
 8054346:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8054348:	4413      	add	r3, r2
 805434a:	b29a      	uxth	r2, r3
 805434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805434e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8054350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054352:	681b      	ldr	r3, [r3, #0]
 8054354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8054356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8054358:	2b00      	cmp	r3, #0
 805435a:	d1dd      	bne.n	8054318 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 805435c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805435e:	891a      	ldrh	r2, [r3, #8]
 8054360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8054362:	4413      	add	r3, r2
 8054364:	b29a      	uxth	r2, r3
 8054366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8054368:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 805436a:	8a7a      	ldrh	r2, [r7, #18]
 805436c:	68fb      	ldr	r3, [r7, #12]
 805436e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8054372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8054374:	2b00      	cmp	r3, #0
 8054376:	d018      	beq.n	80543aa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8054378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805437a:	2b00      	cmp	r3, #0
 805437c:	d106      	bne.n	805438c <tcp_write+0x508>
 805437e:	4b2a      	ldr	r3, [pc, #168]	; (8054428 <tcp_write+0x5a4>)
 8054380:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8054384:	492d      	ldr	r1, [pc, #180]	; (805443c <tcp_write+0x5b8>)
 8054386:	482a      	ldr	r0, [pc, #168]	; (8054430 <tcp_write+0x5ac>)
 8054388:	f004 fe54 	bl	8059034 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 805438c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805438e:	685b      	ldr	r3, [r3, #4]
 8054390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8054392:	4618      	mov	r0, r3
 8054394:	f7fb f884 	bl	804f4a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8054398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805439a:	891a      	ldrh	r2, [r3, #8]
 805439c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 805439e:	891b      	ldrh	r3, [r3, #8]
 80543a0:	4413      	add	r3, r2
 80543a2:	b29a      	uxth	r2, r3
 80543a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80543a6:	811a      	strh	r2, [r3, #8]
 80543a8:	e037      	b.n	805441a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80543aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80543ac:	2b00      	cmp	r3, #0
 80543ae:	d034      	beq.n	805441a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80543b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80543b2:	2b00      	cmp	r3, #0
 80543b4:	d003      	beq.n	80543be <tcp_write+0x53a>
 80543b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80543b8:	685b      	ldr	r3, [r3, #4]
 80543ba:	2b00      	cmp	r3, #0
 80543bc:	d106      	bne.n	80543cc <tcp_write+0x548>
 80543be:	4b1a      	ldr	r3, [pc, #104]	; (8054428 <tcp_write+0x5a4>)
 80543c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80543c4:	491e      	ldr	r1, [pc, #120]	; (8054440 <tcp_write+0x5bc>)
 80543c6:	481a      	ldr	r0, [pc, #104]	; (8054430 <tcp_write+0x5ac>)
 80543c8:	f004 fe34 	bl	8059034 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80543cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80543ce:	685b      	ldr	r3, [r3, #4]
 80543d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80543d2:	e009      	b.n	80543e8 <tcp_write+0x564>
      p->tot_len += extendlen;
 80543d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80543d6:	891a      	ldrh	r2, [r3, #8]
 80543d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80543da:	4413      	add	r3, r2
 80543dc:	b29a      	uxth	r2, r3
 80543de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80543e0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80543e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80543e4:	681b      	ldr	r3, [r3, #0]
 80543e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80543e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80543ea:	681b      	ldr	r3, [r3, #0]
 80543ec:	2b00      	cmp	r3, #0
 80543ee:	d1f1      	bne.n	80543d4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80543f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80543f2:	891a      	ldrh	r2, [r3, #8]
 80543f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80543f6:	4413      	add	r3, r2
 80543f8:	b29a      	uxth	r2, r3
 80543fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80543fc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80543fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8054400:	895a      	ldrh	r2, [r3, #10]
 8054402:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8054404:	4413      	add	r3, r2
 8054406:	b29a      	uxth	r2, r3
 8054408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805440a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 805440c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805440e:	891a      	ldrh	r2, [r3, #8]
 8054410:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8054412:	4413      	add	r3, r2
 8054414:	b29a      	uxth	r2, r3
 8054416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8054418:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 805441a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 805441c:	2b00      	cmp	r3, #0
 805441e:	d111      	bne.n	8054444 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8054420:	68fb      	ldr	r3, [r7, #12]
 8054422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8054424:	66da      	str	r2, [r3, #108]	; 0x6c
 8054426:	e010      	b.n	805444a <tcp_write+0x5c6>
 8054428:	0805c4c4 	.word	0x0805c4c4
 805442c:	0805c764 	.word	0x0805c764
 8054430:	0805c518 	.word	0x0805c518
 8054434:	0805c7a4 	.word	0x0805c7a4
 8054438:	0805c7b4 	.word	0x0805c7b4
 805443c:	0805c7c8 	.word	0x0805c7c8
 8054440:	0805c800 	.word	0x0805c800
  } else {
    last_unsent->next = queue;
 8054444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8054446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8054448:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 805444a:	68fb      	ldr	r3, [r7, #12]
 805444c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 805444e:	88fb      	ldrh	r3, [r7, #6]
 8054450:	441a      	add	r2, r3
 8054452:	68fb      	ldr	r3, [r7, #12]
 8054454:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8054456:	68fb      	ldr	r3, [r7, #12]
 8054458:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 805445c:	88fb      	ldrh	r3, [r7, #6]
 805445e:	1ad3      	subs	r3, r2, r3
 8054460:	b29a      	uxth	r2, r3
 8054462:	68fb      	ldr	r3, [r7, #12]
 8054464:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8054468:	68fb      	ldr	r3, [r7, #12]
 805446a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 805446e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8054472:	68fb      	ldr	r3, [r7, #12]
 8054474:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8054478:	2b00      	cmp	r3, #0
 805447a:	d00e      	beq.n	805449a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 805447c:	68fb      	ldr	r3, [r7, #12]
 805447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054480:	2b00      	cmp	r3, #0
 8054482:	d10a      	bne.n	805449a <tcp_write+0x616>
 8054484:	68fb      	ldr	r3, [r7, #12]
 8054486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054488:	2b00      	cmp	r3, #0
 805448a:	d106      	bne.n	805449a <tcp_write+0x616>
 805448c:	4b2c      	ldr	r3, [pc, #176]	; (8054540 <tcp_write+0x6bc>)
 805448e:	f240 3212 	movw	r2, #786	; 0x312
 8054492:	492c      	ldr	r1, [pc, #176]	; (8054544 <tcp_write+0x6c0>)
 8054494:	482c      	ldr	r0, [pc, #176]	; (8054548 <tcp_write+0x6c4>)
 8054496:	f004 fdcd 	bl	8059034 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 805449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 805449c:	2b00      	cmp	r3, #0
 805449e:	d016      	beq.n	80544ce <tcp_write+0x64a>
 80544a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80544a2:	68db      	ldr	r3, [r3, #12]
 80544a4:	2b00      	cmp	r3, #0
 80544a6:	d012      	beq.n	80544ce <tcp_write+0x64a>
 80544a8:	797b      	ldrb	r3, [r7, #5]
 80544aa:	f003 0302 	and.w	r3, r3, #2
 80544ae:	2b00      	cmp	r3, #0
 80544b0:	d10d      	bne.n	80544ce <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80544b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80544b4:	68db      	ldr	r3, [r3, #12]
 80544b6:	899b      	ldrh	r3, [r3, #12]
 80544b8:	b29c      	uxth	r4, r3
 80544ba:	2008      	movs	r0, #8
 80544bc:	f7f9 fb30 	bl	804db20 <lwip_htons>
 80544c0:	4603      	mov	r3, r0
 80544c2:	461a      	mov	r2, r3
 80544c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80544c6:	68db      	ldr	r3, [r3, #12]
 80544c8:	4322      	orrs	r2, r4
 80544ca:	b292      	uxth	r2, r2
 80544cc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80544ce:	2300      	movs	r3, #0
 80544d0:	e031      	b.n	8054536 <tcp_write+0x6b2>
          goto memerr;
 80544d2:	bf00      	nop
 80544d4:	e006      	b.n	80544e4 <tcp_write+0x660>
            goto memerr;
 80544d6:	bf00      	nop
 80544d8:	e004      	b.n	80544e4 <tcp_write+0x660>
        goto memerr;
 80544da:	bf00      	nop
 80544dc:	e002      	b.n	80544e4 <tcp_write+0x660>
        goto memerr;
 80544de:	bf00      	nop
 80544e0:	e000      	b.n	80544e4 <tcp_write+0x660>
      goto memerr;
 80544e2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80544e4:	68fb      	ldr	r3, [r7, #12]
 80544e6:	8b5b      	ldrh	r3, [r3, #26]
 80544e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80544ec:	b29a      	uxth	r2, r3
 80544ee:	68fb      	ldr	r3, [r7, #12]
 80544f0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80544f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80544f4:	2b00      	cmp	r3, #0
 80544f6:	d002      	beq.n	80544fe <tcp_write+0x67a>
    pbuf_free(concat_p);
 80544f8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80544fa:	f7fa ff03 	bl	804f304 <pbuf_free>
  }
  if (queue != NULL) {
 80544fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8054500:	2b00      	cmp	r3, #0
 8054502:	d002      	beq.n	805450a <tcp_write+0x686>
    tcp_segs_free(queue);
 8054504:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8054506:	f7fc fb6b 	bl	8050be0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 805450a:	68fb      	ldr	r3, [r7, #12]
 805450c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8054510:	2b00      	cmp	r3, #0
 8054512:	d00e      	beq.n	8054532 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8054514:	68fb      	ldr	r3, [r7, #12]
 8054516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054518:	2b00      	cmp	r3, #0
 805451a:	d10a      	bne.n	8054532 <tcp_write+0x6ae>
 805451c:	68fb      	ldr	r3, [r7, #12]
 805451e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054520:	2b00      	cmp	r3, #0
 8054522:	d106      	bne.n	8054532 <tcp_write+0x6ae>
 8054524:	4b06      	ldr	r3, [pc, #24]	; (8054540 <tcp_write+0x6bc>)
 8054526:	f240 3227 	movw	r2, #807	; 0x327
 805452a:	4906      	ldr	r1, [pc, #24]	; (8054544 <tcp_write+0x6c0>)
 805452c:	4806      	ldr	r0, [pc, #24]	; (8054548 <tcp_write+0x6c4>)
 805452e:	f004 fd81 	bl	8059034 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8054532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8054536:	4618      	mov	r0, r3
 8054538:	375c      	adds	r7, #92	; 0x5c
 805453a:	46bd      	mov	sp, r7
 805453c:	bd90      	pop	{r4, r7, pc}
 805453e:	bf00      	nop
 8054540:	0805c4c4 	.word	0x0805c4c4
 8054544:	0805c838 	.word	0x0805c838
 8054548:	0805c518 	.word	0x0805c518

0805454c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 805454c:	b590      	push	{r4, r7, lr}
 805454e:	b08b      	sub	sp, #44	; 0x2c
 8054550:	af02      	add	r7, sp, #8
 8054552:	6078      	str	r0, [r7, #4]
 8054554:	460b      	mov	r3, r1
 8054556:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8054558:	2300      	movs	r3, #0
 805455a:	61fb      	str	r3, [r7, #28]
 805455c:	2300      	movs	r3, #0
 805455e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8054560:	2300      	movs	r3, #0
 8054562:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8054564:	687b      	ldr	r3, [r7, #4]
 8054566:	2b00      	cmp	r3, #0
 8054568:	d106      	bne.n	8054578 <tcp_split_unsent_seg+0x2c>
 805456a:	4b95      	ldr	r3, [pc, #596]	; (80547c0 <tcp_split_unsent_seg+0x274>)
 805456c:	f240 324b 	movw	r2, #843	; 0x34b
 8054570:	4994      	ldr	r1, [pc, #592]	; (80547c4 <tcp_split_unsent_seg+0x278>)
 8054572:	4895      	ldr	r0, [pc, #596]	; (80547c8 <tcp_split_unsent_seg+0x27c>)
 8054574:	f004 fd5e 	bl	8059034 <iprintf>

  useg = pcb->unsent;
 8054578:	687b      	ldr	r3, [r7, #4]
 805457a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 805457c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 805457e:	697b      	ldr	r3, [r7, #20]
 8054580:	2b00      	cmp	r3, #0
 8054582:	d102      	bne.n	805458a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8054584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8054588:	e116      	b.n	80547b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 805458a:	887b      	ldrh	r3, [r7, #2]
 805458c:	2b00      	cmp	r3, #0
 805458e:	d109      	bne.n	80545a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8054590:	4b8b      	ldr	r3, [pc, #556]	; (80547c0 <tcp_split_unsent_seg+0x274>)
 8054592:	f240 3253 	movw	r2, #851	; 0x353
 8054596:	498d      	ldr	r1, [pc, #564]	; (80547cc <tcp_split_unsent_seg+0x280>)
 8054598:	488b      	ldr	r0, [pc, #556]	; (80547c8 <tcp_split_unsent_seg+0x27c>)
 805459a:	f004 fd4b 	bl	8059034 <iprintf>
    return ERR_VAL;
 805459e:	f06f 0305 	mvn.w	r3, #5
 80545a2:	e109      	b.n	80547b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80545a4:	697b      	ldr	r3, [r7, #20]
 80545a6:	891b      	ldrh	r3, [r3, #8]
 80545a8:	887a      	ldrh	r2, [r7, #2]
 80545aa:	429a      	cmp	r2, r3
 80545ac:	d301      	bcc.n	80545b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80545ae:	2300      	movs	r3, #0
 80545b0:	e102      	b.n	80547b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80545b2:	687b      	ldr	r3, [r7, #4]
 80545b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80545b6:	887a      	ldrh	r2, [r7, #2]
 80545b8:	429a      	cmp	r2, r3
 80545ba:	d906      	bls.n	80545ca <tcp_split_unsent_seg+0x7e>
 80545bc:	4b80      	ldr	r3, [pc, #512]	; (80547c0 <tcp_split_unsent_seg+0x274>)
 80545be:	f240 325b 	movw	r2, #859	; 0x35b
 80545c2:	4983      	ldr	r1, [pc, #524]	; (80547d0 <tcp_split_unsent_seg+0x284>)
 80545c4:	4880      	ldr	r0, [pc, #512]	; (80547c8 <tcp_split_unsent_seg+0x27c>)
 80545c6:	f004 fd35 	bl	8059034 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80545ca:	697b      	ldr	r3, [r7, #20]
 80545cc:	891b      	ldrh	r3, [r3, #8]
 80545ce:	2b00      	cmp	r3, #0
 80545d0:	d106      	bne.n	80545e0 <tcp_split_unsent_seg+0x94>
 80545d2:	4b7b      	ldr	r3, [pc, #492]	; (80547c0 <tcp_split_unsent_seg+0x274>)
 80545d4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80545d8:	497e      	ldr	r1, [pc, #504]	; (80547d4 <tcp_split_unsent_seg+0x288>)
 80545da:	487b      	ldr	r0, [pc, #492]	; (80547c8 <tcp_split_unsent_seg+0x27c>)
 80545dc:	f004 fd2a 	bl	8059034 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80545e0:	697b      	ldr	r3, [r7, #20]
 80545e2:	7a9b      	ldrb	r3, [r3, #10]
 80545e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80545e6:	7bfb      	ldrb	r3, [r7, #15]
 80545e8:	009b      	lsls	r3, r3, #2
 80545ea:	b2db      	uxtb	r3, r3
 80545ec:	f003 0304 	and.w	r3, r3, #4
 80545f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80545f2:	697b      	ldr	r3, [r7, #20]
 80545f4:	891a      	ldrh	r2, [r3, #8]
 80545f6:	887b      	ldrh	r3, [r7, #2]
 80545f8:	1ad3      	subs	r3, r2, r3
 80545fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80545fc:	7bbb      	ldrb	r3, [r7, #14]
 80545fe:	b29a      	uxth	r2, r3
 8054600:	89bb      	ldrh	r3, [r7, #12]
 8054602:	4413      	add	r3, r2
 8054604:	b29b      	uxth	r3, r3
 8054606:	f44f 7220 	mov.w	r2, #640	; 0x280
 805460a:	4619      	mov	r1, r3
 805460c:	2036      	movs	r0, #54	; 0x36
 805460e:	f7fa fb95 	bl	804ed3c <pbuf_alloc>
 8054612:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8054614:	693b      	ldr	r3, [r7, #16]
 8054616:	2b00      	cmp	r3, #0
 8054618:	f000 80b7 	beq.w	805478a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 805461c:	697b      	ldr	r3, [r7, #20]
 805461e:	685b      	ldr	r3, [r3, #4]
 8054620:	891a      	ldrh	r2, [r3, #8]
 8054622:	697b      	ldr	r3, [r7, #20]
 8054624:	891b      	ldrh	r3, [r3, #8]
 8054626:	1ad3      	subs	r3, r2, r3
 8054628:	b29a      	uxth	r2, r3
 805462a:	887b      	ldrh	r3, [r7, #2]
 805462c:	4413      	add	r3, r2
 805462e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8054630:	697b      	ldr	r3, [r7, #20]
 8054632:	6858      	ldr	r0, [r3, #4]
 8054634:	693b      	ldr	r3, [r7, #16]
 8054636:	685a      	ldr	r2, [r3, #4]
 8054638:	7bbb      	ldrb	r3, [r7, #14]
 805463a:	18d1      	adds	r1, r2, r3
 805463c:	897b      	ldrh	r3, [r7, #10]
 805463e:	89ba      	ldrh	r2, [r7, #12]
 8054640:	f7fb f856 	bl	804f6f0 <pbuf_copy_partial>
 8054644:	4603      	mov	r3, r0
 8054646:	461a      	mov	r2, r3
 8054648:	89bb      	ldrh	r3, [r7, #12]
 805464a:	4293      	cmp	r3, r2
 805464c:	f040 809f 	bne.w	805478e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8054650:	697b      	ldr	r3, [r7, #20]
 8054652:	68db      	ldr	r3, [r3, #12]
 8054654:	899b      	ldrh	r3, [r3, #12]
 8054656:	b29b      	uxth	r3, r3
 8054658:	4618      	mov	r0, r3
 805465a:	f7f9 fa61 	bl	804db20 <lwip_htons>
 805465e:	4603      	mov	r3, r0
 8054660:	b2db      	uxtb	r3, r3
 8054662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8054666:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8054668:	2300      	movs	r3, #0
 805466a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 805466c:	7efb      	ldrb	r3, [r7, #27]
 805466e:	f003 0308 	and.w	r3, r3, #8
 8054672:	2b00      	cmp	r3, #0
 8054674:	d007      	beq.n	8054686 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8054676:	7efb      	ldrb	r3, [r7, #27]
 8054678:	f023 0308 	bic.w	r3, r3, #8
 805467c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 805467e:	7ebb      	ldrb	r3, [r7, #26]
 8054680:	f043 0308 	orr.w	r3, r3, #8
 8054684:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8054686:	7efb      	ldrb	r3, [r7, #27]
 8054688:	f003 0301 	and.w	r3, r3, #1
 805468c:	2b00      	cmp	r3, #0
 805468e:	d007      	beq.n	80546a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8054690:	7efb      	ldrb	r3, [r7, #27]
 8054692:	f023 0301 	bic.w	r3, r3, #1
 8054696:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8054698:	7ebb      	ldrb	r3, [r7, #26]
 805469a:	f043 0301 	orr.w	r3, r3, #1
 805469e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80546a0:	697b      	ldr	r3, [r7, #20]
 80546a2:	68db      	ldr	r3, [r3, #12]
 80546a4:	685b      	ldr	r3, [r3, #4]
 80546a6:	4618      	mov	r0, r3
 80546a8:	f7f9 fa4f 	bl	804db4a <lwip_htonl>
 80546ac:	4602      	mov	r2, r0
 80546ae:	887b      	ldrh	r3, [r7, #2]
 80546b0:	18d1      	adds	r1, r2, r3
 80546b2:	7eba      	ldrb	r2, [r7, #26]
 80546b4:	7bfb      	ldrb	r3, [r7, #15]
 80546b6:	9300      	str	r3, [sp, #0]
 80546b8:	460b      	mov	r3, r1
 80546ba:	6939      	ldr	r1, [r7, #16]
 80546bc:	6878      	ldr	r0, [r7, #4]
 80546be:	f7ff fa4f 	bl	8053b60 <tcp_create_segment>
 80546c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80546c4:	69fb      	ldr	r3, [r7, #28]
 80546c6:	2b00      	cmp	r3, #0
 80546c8:	d063      	beq.n	8054792 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80546ca:	697b      	ldr	r3, [r7, #20]
 80546cc:	685b      	ldr	r3, [r3, #4]
 80546ce:	4618      	mov	r0, r3
 80546d0:	f7fa fea6 	bl	804f420 <pbuf_clen>
 80546d4:	4603      	mov	r3, r0
 80546d6:	461a      	mov	r2, r3
 80546d8:	687b      	ldr	r3, [r7, #4]
 80546da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80546de:	1a9b      	subs	r3, r3, r2
 80546e0:	b29a      	uxth	r2, r3
 80546e2:	687b      	ldr	r3, [r7, #4]
 80546e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80546e8:	697b      	ldr	r3, [r7, #20]
 80546ea:	6858      	ldr	r0, [r3, #4]
 80546ec:	697b      	ldr	r3, [r7, #20]
 80546ee:	685b      	ldr	r3, [r3, #4]
 80546f0:	891a      	ldrh	r2, [r3, #8]
 80546f2:	89bb      	ldrh	r3, [r7, #12]
 80546f4:	1ad3      	subs	r3, r2, r3
 80546f6:	b29b      	uxth	r3, r3
 80546f8:	4619      	mov	r1, r3
 80546fa:	f7fa fc7d 	bl	804eff8 <pbuf_realloc>
  useg->len -= remainder;
 80546fe:	697b      	ldr	r3, [r7, #20]
 8054700:	891a      	ldrh	r2, [r3, #8]
 8054702:	89bb      	ldrh	r3, [r7, #12]
 8054704:	1ad3      	subs	r3, r2, r3
 8054706:	b29a      	uxth	r2, r3
 8054708:	697b      	ldr	r3, [r7, #20]
 805470a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 805470c:	697b      	ldr	r3, [r7, #20]
 805470e:	68db      	ldr	r3, [r3, #12]
 8054710:	899b      	ldrh	r3, [r3, #12]
 8054712:	b29c      	uxth	r4, r3
 8054714:	7efb      	ldrb	r3, [r7, #27]
 8054716:	b29b      	uxth	r3, r3
 8054718:	4618      	mov	r0, r3
 805471a:	f7f9 fa01 	bl	804db20 <lwip_htons>
 805471e:	4603      	mov	r3, r0
 8054720:	461a      	mov	r2, r3
 8054722:	697b      	ldr	r3, [r7, #20]
 8054724:	68db      	ldr	r3, [r3, #12]
 8054726:	4322      	orrs	r2, r4
 8054728:	b292      	uxth	r2, r2
 805472a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 805472c:	697b      	ldr	r3, [r7, #20]
 805472e:	685b      	ldr	r3, [r3, #4]
 8054730:	4618      	mov	r0, r3
 8054732:	f7fa fe75 	bl	804f420 <pbuf_clen>
 8054736:	4603      	mov	r3, r0
 8054738:	461a      	mov	r2, r3
 805473a:	687b      	ldr	r3, [r7, #4]
 805473c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8054740:	4413      	add	r3, r2
 8054742:	b29a      	uxth	r2, r3
 8054744:	687b      	ldr	r3, [r7, #4]
 8054746:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 805474a:	69fb      	ldr	r3, [r7, #28]
 805474c:	685b      	ldr	r3, [r3, #4]
 805474e:	4618      	mov	r0, r3
 8054750:	f7fa fe66 	bl	804f420 <pbuf_clen>
 8054754:	4603      	mov	r3, r0
 8054756:	461a      	mov	r2, r3
 8054758:	687b      	ldr	r3, [r7, #4]
 805475a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 805475e:	4413      	add	r3, r2
 8054760:	b29a      	uxth	r2, r3
 8054762:	687b      	ldr	r3, [r7, #4]
 8054764:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8054768:	697b      	ldr	r3, [r7, #20]
 805476a:	681a      	ldr	r2, [r3, #0]
 805476c:	69fb      	ldr	r3, [r7, #28]
 805476e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8054770:	697b      	ldr	r3, [r7, #20]
 8054772:	69fa      	ldr	r2, [r7, #28]
 8054774:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8054776:	69fb      	ldr	r3, [r7, #28]
 8054778:	681b      	ldr	r3, [r3, #0]
 805477a:	2b00      	cmp	r3, #0
 805477c:	d103      	bne.n	8054786 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 805477e:	687b      	ldr	r3, [r7, #4]
 8054780:	2200      	movs	r2, #0
 8054782:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8054786:	2300      	movs	r3, #0
 8054788:	e016      	b.n	80547b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 805478a:	bf00      	nop
 805478c:	e002      	b.n	8054794 <tcp_split_unsent_seg+0x248>
    goto memerr;
 805478e:	bf00      	nop
 8054790:	e000      	b.n	8054794 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8054792:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8054794:	69fb      	ldr	r3, [r7, #28]
 8054796:	2b00      	cmp	r3, #0
 8054798:	d006      	beq.n	80547a8 <tcp_split_unsent_seg+0x25c>
 805479a:	4b09      	ldr	r3, [pc, #36]	; (80547c0 <tcp_split_unsent_seg+0x274>)
 805479c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80547a0:	490d      	ldr	r1, [pc, #52]	; (80547d8 <tcp_split_unsent_seg+0x28c>)
 80547a2:	4809      	ldr	r0, [pc, #36]	; (80547c8 <tcp_split_unsent_seg+0x27c>)
 80547a4:	f004 fc46 	bl	8059034 <iprintf>
  if (p != NULL) {
 80547a8:	693b      	ldr	r3, [r7, #16]
 80547aa:	2b00      	cmp	r3, #0
 80547ac:	d002      	beq.n	80547b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80547ae:	6938      	ldr	r0, [r7, #16]
 80547b0:	f7fa fda8 	bl	804f304 <pbuf_free>
  }

  return ERR_MEM;
 80547b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80547b8:	4618      	mov	r0, r3
 80547ba:	3724      	adds	r7, #36	; 0x24
 80547bc:	46bd      	mov	sp, r7
 80547be:	bd90      	pop	{r4, r7, pc}
 80547c0:	0805c4c4 	.word	0x0805c4c4
 80547c4:	0805c858 	.word	0x0805c858
 80547c8:	0805c518 	.word	0x0805c518
 80547cc:	0805c87c 	.word	0x0805c87c
 80547d0:	0805c8a0 	.word	0x0805c8a0
 80547d4:	0805c8b0 	.word	0x0805c8b0
 80547d8:	0805c8c0 	.word	0x0805c8c0

080547dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80547dc:	b590      	push	{r4, r7, lr}
 80547de:	b085      	sub	sp, #20
 80547e0:	af00      	add	r7, sp, #0
 80547e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80547e4:	687b      	ldr	r3, [r7, #4]
 80547e6:	2b00      	cmp	r3, #0
 80547e8:	d106      	bne.n	80547f8 <tcp_send_fin+0x1c>
 80547ea:	4b21      	ldr	r3, [pc, #132]	; (8054870 <tcp_send_fin+0x94>)
 80547ec:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80547f0:	4920      	ldr	r1, [pc, #128]	; (8054874 <tcp_send_fin+0x98>)
 80547f2:	4821      	ldr	r0, [pc, #132]	; (8054878 <tcp_send_fin+0x9c>)
 80547f4:	f004 fc1e 	bl	8059034 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80547f8:	687b      	ldr	r3, [r7, #4]
 80547fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80547fc:	2b00      	cmp	r3, #0
 80547fe:	d02e      	beq.n	805485e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8054800:	687b      	ldr	r3, [r7, #4]
 8054802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054804:	60fb      	str	r3, [r7, #12]
 8054806:	e002      	b.n	805480e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8054808:	68fb      	ldr	r3, [r7, #12]
 805480a:	681b      	ldr	r3, [r3, #0]
 805480c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 805480e:	68fb      	ldr	r3, [r7, #12]
 8054810:	681b      	ldr	r3, [r3, #0]
 8054812:	2b00      	cmp	r3, #0
 8054814:	d1f8      	bne.n	8054808 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8054816:	68fb      	ldr	r3, [r7, #12]
 8054818:	68db      	ldr	r3, [r3, #12]
 805481a:	899b      	ldrh	r3, [r3, #12]
 805481c:	b29b      	uxth	r3, r3
 805481e:	4618      	mov	r0, r3
 8054820:	f7f9 f97e 	bl	804db20 <lwip_htons>
 8054824:	4603      	mov	r3, r0
 8054826:	b2db      	uxtb	r3, r3
 8054828:	f003 0307 	and.w	r3, r3, #7
 805482c:	2b00      	cmp	r3, #0
 805482e:	d116      	bne.n	805485e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8054830:	68fb      	ldr	r3, [r7, #12]
 8054832:	68db      	ldr	r3, [r3, #12]
 8054834:	899b      	ldrh	r3, [r3, #12]
 8054836:	b29c      	uxth	r4, r3
 8054838:	2001      	movs	r0, #1
 805483a:	f7f9 f971 	bl	804db20 <lwip_htons>
 805483e:	4603      	mov	r3, r0
 8054840:	461a      	mov	r2, r3
 8054842:	68fb      	ldr	r3, [r7, #12]
 8054844:	68db      	ldr	r3, [r3, #12]
 8054846:	4322      	orrs	r2, r4
 8054848:	b292      	uxth	r2, r2
 805484a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 805484c:	687b      	ldr	r3, [r7, #4]
 805484e:	8b5b      	ldrh	r3, [r3, #26]
 8054850:	f043 0320 	orr.w	r3, r3, #32
 8054854:	b29a      	uxth	r2, r3
 8054856:	687b      	ldr	r3, [r7, #4]
 8054858:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 805485a:	2300      	movs	r3, #0
 805485c:	e004      	b.n	8054868 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 805485e:	2101      	movs	r1, #1
 8054860:	6878      	ldr	r0, [r7, #4]
 8054862:	f000 f80b 	bl	805487c <tcp_enqueue_flags>
 8054866:	4603      	mov	r3, r0
}
 8054868:	4618      	mov	r0, r3
 805486a:	3714      	adds	r7, #20
 805486c:	46bd      	mov	sp, r7
 805486e:	bd90      	pop	{r4, r7, pc}
 8054870:	0805c4c4 	.word	0x0805c4c4
 8054874:	0805c8cc 	.word	0x0805c8cc
 8054878:	0805c518 	.word	0x0805c518

0805487c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 805487c:	b580      	push	{r7, lr}
 805487e:	b08a      	sub	sp, #40	; 0x28
 8054880:	af02      	add	r7, sp, #8
 8054882:	6078      	str	r0, [r7, #4]
 8054884:	460b      	mov	r3, r1
 8054886:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8054888:	2300      	movs	r3, #0
 805488a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 805488c:	2300      	movs	r3, #0
 805488e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8054890:	78fb      	ldrb	r3, [r7, #3]
 8054892:	f003 0303 	and.w	r3, r3, #3
 8054896:	2b00      	cmp	r3, #0
 8054898:	d106      	bne.n	80548a8 <tcp_enqueue_flags+0x2c>
 805489a:	4b67      	ldr	r3, [pc, #412]	; (8054a38 <tcp_enqueue_flags+0x1bc>)
 805489c:	f240 4211 	movw	r2, #1041	; 0x411
 80548a0:	4966      	ldr	r1, [pc, #408]	; (8054a3c <tcp_enqueue_flags+0x1c0>)
 80548a2:	4867      	ldr	r0, [pc, #412]	; (8054a40 <tcp_enqueue_flags+0x1c4>)
 80548a4:	f004 fbc6 	bl	8059034 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80548a8:	687b      	ldr	r3, [r7, #4]
 80548aa:	2b00      	cmp	r3, #0
 80548ac:	d106      	bne.n	80548bc <tcp_enqueue_flags+0x40>
 80548ae:	4b62      	ldr	r3, [pc, #392]	; (8054a38 <tcp_enqueue_flags+0x1bc>)
 80548b0:	f240 4213 	movw	r2, #1043	; 0x413
 80548b4:	4963      	ldr	r1, [pc, #396]	; (8054a44 <tcp_enqueue_flags+0x1c8>)
 80548b6:	4862      	ldr	r0, [pc, #392]	; (8054a40 <tcp_enqueue_flags+0x1c4>)
 80548b8:	f004 fbbc 	bl	8059034 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80548bc:	78fb      	ldrb	r3, [r7, #3]
 80548be:	f003 0302 	and.w	r3, r3, #2
 80548c2:	2b00      	cmp	r3, #0
 80548c4:	d001      	beq.n	80548ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80548c6:	2301      	movs	r3, #1
 80548c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80548ca:	7ffb      	ldrb	r3, [r7, #31]
 80548cc:	009b      	lsls	r3, r3, #2
 80548ce:	b2db      	uxtb	r3, r3
 80548d0:	f003 0304 	and.w	r3, r3, #4
 80548d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80548d6:	7dfb      	ldrb	r3, [r7, #23]
 80548d8:	b29b      	uxth	r3, r3
 80548da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80548de:	4619      	mov	r1, r3
 80548e0:	2036      	movs	r0, #54	; 0x36
 80548e2:	f7fa fa2b 	bl	804ed3c <pbuf_alloc>
 80548e6:	6138      	str	r0, [r7, #16]
 80548e8:	693b      	ldr	r3, [r7, #16]
 80548ea:	2b00      	cmp	r3, #0
 80548ec:	d109      	bne.n	8054902 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80548ee:	687b      	ldr	r3, [r7, #4]
 80548f0:	8b5b      	ldrh	r3, [r3, #26]
 80548f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80548f6:	b29a      	uxth	r2, r3
 80548f8:	687b      	ldr	r3, [r7, #4]
 80548fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80548fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8054900:	e095      	b.n	8054a2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8054902:	693b      	ldr	r3, [r7, #16]
 8054904:	895a      	ldrh	r2, [r3, #10]
 8054906:	7dfb      	ldrb	r3, [r7, #23]
 8054908:	b29b      	uxth	r3, r3
 805490a:	429a      	cmp	r2, r3
 805490c:	d206      	bcs.n	805491c <tcp_enqueue_flags+0xa0>
 805490e:	4b4a      	ldr	r3, [pc, #296]	; (8054a38 <tcp_enqueue_flags+0x1bc>)
 8054910:	f240 4239 	movw	r2, #1081	; 0x439
 8054914:	494c      	ldr	r1, [pc, #304]	; (8054a48 <tcp_enqueue_flags+0x1cc>)
 8054916:	484a      	ldr	r0, [pc, #296]	; (8054a40 <tcp_enqueue_flags+0x1c4>)
 8054918:	f004 fb8c 	bl	8059034 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 805491c:	687b      	ldr	r3, [r7, #4]
 805491e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8054920:	78fa      	ldrb	r2, [r7, #3]
 8054922:	7ffb      	ldrb	r3, [r7, #31]
 8054924:	9300      	str	r3, [sp, #0]
 8054926:	460b      	mov	r3, r1
 8054928:	6939      	ldr	r1, [r7, #16]
 805492a:	6878      	ldr	r0, [r7, #4]
 805492c:	f7ff f918 	bl	8053b60 <tcp_create_segment>
 8054930:	60f8      	str	r0, [r7, #12]
 8054932:	68fb      	ldr	r3, [r7, #12]
 8054934:	2b00      	cmp	r3, #0
 8054936:	d109      	bne.n	805494c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8054938:	687b      	ldr	r3, [r7, #4]
 805493a:	8b5b      	ldrh	r3, [r3, #26]
 805493c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8054940:	b29a      	uxth	r2, r3
 8054942:	687b      	ldr	r3, [r7, #4]
 8054944:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8054946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805494a:	e070      	b.n	8054a2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 805494c:	68fb      	ldr	r3, [r7, #12]
 805494e:	68db      	ldr	r3, [r3, #12]
 8054950:	f003 0303 	and.w	r3, r3, #3
 8054954:	2b00      	cmp	r3, #0
 8054956:	d006      	beq.n	8054966 <tcp_enqueue_flags+0xea>
 8054958:	4b37      	ldr	r3, [pc, #220]	; (8054a38 <tcp_enqueue_flags+0x1bc>)
 805495a:	f240 4242 	movw	r2, #1090	; 0x442
 805495e:	493b      	ldr	r1, [pc, #236]	; (8054a4c <tcp_enqueue_flags+0x1d0>)
 8054960:	4837      	ldr	r0, [pc, #220]	; (8054a40 <tcp_enqueue_flags+0x1c4>)
 8054962:	f004 fb67 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8054966:	68fb      	ldr	r3, [r7, #12]
 8054968:	891b      	ldrh	r3, [r3, #8]
 805496a:	2b00      	cmp	r3, #0
 805496c:	d006      	beq.n	805497c <tcp_enqueue_flags+0x100>
 805496e:	4b32      	ldr	r3, [pc, #200]	; (8054a38 <tcp_enqueue_flags+0x1bc>)
 8054970:	f240 4243 	movw	r2, #1091	; 0x443
 8054974:	4936      	ldr	r1, [pc, #216]	; (8054a50 <tcp_enqueue_flags+0x1d4>)
 8054976:	4832      	ldr	r0, [pc, #200]	; (8054a40 <tcp_enqueue_flags+0x1c4>)
 8054978:	f004 fb5c 	bl	8059034 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 805497c:	687b      	ldr	r3, [r7, #4]
 805497e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054980:	2b00      	cmp	r3, #0
 8054982:	d103      	bne.n	805498c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8054984:	687b      	ldr	r3, [r7, #4]
 8054986:	68fa      	ldr	r2, [r7, #12]
 8054988:	66da      	str	r2, [r3, #108]	; 0x6c
 805498a:	e00d      	b.n	80549a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 805498c:	687b      	ldr	r3, [r7, #4]
 805498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054990:	61bb      	str	r3, [r7, #24]
 8054992:	e002      	b.n	805499a <tcp_enqueue_flags+0x11e>
 8054994:	69bb      	ldr	r3, [r7, #24]
 8054996:	681b      	ldr	r3, [r3, #0]
 8054998:	61bb      	str	r3, [r7, #24]
 805499a:	69bb      	ldr	r3, [r7, #24]
 805499c:	681b      	ldr	r3, [r3, #0]
 805499e:	2b00      	cmp	r3, #0
 80549a0:	d1f8      	bne.n	8054994 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80549a2:	69bb      	ldr	r3, [r7, #24]
 80549a4:	68fa      	ldr	r2, [r7, #12]
 80549a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80549a8:	687b      	ldr	r3, [r7, #4]
 80549aa:	2200      	movs	r2, #0
 80549ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80549b0:	78fb      	ldrb	r3, [r7, #3]
 80549b2:	f003 0302 	and.w	r3, r3, #2
 80549b6:	2b00      	cmp	r3, #0
 80549b8:	d104      	bne.n	80549c4 <tcp_enqueue_flags+0x148>
 80549ba:	78fb      	ldrb	r3, [r7, #3]
 80549bc:	f003 0301 	and.w	r3, r3, #1
 80549c0:	2b00      	cmp	r3, #0
 80549c2:	d004      	beq.n	80549ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80549c4:	687b      	ldr	r3, [r7, #4]
 80549c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80549c8:	1c5a      	adds	r2, r3, #1
 80549ca:	687b      	ldr	r3, [r7, #4]
 80549cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80549ce:	78fb      	ldrb	r3, [r7, #3]
 80549d0:	f003 0301 	and.w	r3, r3, #1
 80549d4:	2b00      	cmp	r3, #0
 80549d6:	d006      	beq.n	80549e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80549d8:	687b      	ldr	r3, [r7, #4]
 80549da:	8b5b      	ldrh	r3, [r3, #26]
 80549dc:	f043 0320 	orr.w	r3, r3, #32
 80549e0:	b29a      	uxth	r2, r3
 80549e2:	687b      	ldr	r3, [r7, #4]
 80549e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80549e6:	68fb      	ldr	r3, [r7, #12]
 80549e8:	685b      	ldr	r3, [r3, #4]
 80549ea:	4618      	mov	r0, r3
 80549ec:	f7fa fd18 	bl	804f420 <pbuf_clen>
 80549f0:	4603      	mov	r3, r0
 80549f2:	461a      	mov	r2, r3
 80549f4:	687b      	ldr	r3, [r7, #4]
 80549f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80549fa:	4413      	add	r3, r2
 80549fc:	b29a      	uxth	r2, r3
 80549fe:	687b      	ldr	r3, [r7, #4]
 8054a00:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8054a04:	687b      	ldr	r3, [r7, #4]
 8054a06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8054a0a:	2b00      	cmp	r3, #0
 8054a0c:	d00e      	beq.n	8054a2c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8054a0e:	687b      	ldr	r3, [r7, #4]
 8054a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054a12:	2b00      	cmp	r3, #0
 8054a14:	d10a      	bne.n	8054a2c <tcp_enqueue_flags+0x1b0>
 8054a16:	687b      	ldr	r3, [r7, #4]
 8054a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054a1a:	2b00      	cmp	r3, #0
 8054a1c:	d106      	bne.n	8054a2c <tcp_enqueue_flags+0x1b0>
 8054a1e:	4b06      	ldr	r3, [pc, #24]	; (8054a38 <tcp_enqueue_flags+0x1bc>)
 8054a20:	f240 4265 	movw	r2, #1125	; 0x465
 8054a24:	490b      	ldr	r1, [pc, #44]	; (8054a54 <tcp_enqueue_flags+0x1d8>)
 8054a26:	4806      	ldr	r0, [pc, #24]	; (8054a40 <tcp_enqueue_flags+0x1c4>)
 8054a28:	f004 fb04 	bl	8059034 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8054a2c:	2300      	movs	r3, #0
}
 8054a2e:	4618      	mov	r0, r3
 8054a30:	3720      	adds	r7, #32
 8054a32:	46bd      	mov	sp, r7
 8054a34:	bd80      	pop	{r7, pc}
 8054a36:	bf00      	nop
 8054a38:	0805c4c4 	.word	0x0805c4c4
 8054a3c:	0805c8e8 	.word	0x0805c8e8
 8054a40:	0805c518 	.word	0x0805c518
 8054a44:	0805c940 	.word	0x0805c940
 8054a48:	0805c960 	.word	0x0805c960
 8054a4c:	0805c99c 	.word	0x0805c99c
 8054a50:	0805c9b4 	.word	0x0805c9b4
 8054a54:	0805c9e0 	.word	0x0805c9e0

08054a58 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8054a58:	b5b0      	push	{r4, r5, r7, lr}
 8054a5a:	b08a      	sub	sp, #40	; 0x28
 8054a5c:	af00      	add	r7, sp, #0
 8054a5e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8054a60:	687b      	ldr	r3, [r7, #4]
 8054a62:	2b00      	cmp	r3, #0
 8054a64:	d106      	bne.n	8054a74 <tcp_output+0x1c>
 8054a66:	4b8a      	ldr	r3, [pc, #552]	; (8054c90 <tcp_output+0x238>)
 8054a68:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8054a6c:	4989      	ldr	r1, [pc, #548]	; (8054c94 <tcp_output+0x23c>)
 8054a6e:	488a      	ldr	r0, [pc, #552]	; (8054c98 <tcp_output+0x240>)
 8054a70:	f004 fae0 	bl	8059034 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8054a74:	687b      	ldr	r3, [r7, #4]
 8054a76:	7d1b      	ldrb	r3, [r3, #20]
 8054a78:	2b01      	cmp	r3, #1
 8054a7a:	d106      	bne.n	8054a8a <tcp_output+0x32>
 8054a7c:	4b84      	ldr	r3, [pc, #528]	; (8054c90 <tcp_output+0x238>)
 8054a7e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8054a82:	4986      	ldr	r1, [pc, #536]	; (8054c9c <tcp_output+0x244>)
 8054a84:	4884      	ldr	r0, [pc, #528]	; (8054c98 <tcp_output+0x240>)
 8054a86:	f004 fad5 	bl	8059034 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8054a8a:	4b85      	ldr	r3, [pc, #532]	; (8054ca0 <tcp_output+0x248>)
 8054a8c:	681b      	ldr	r3, [r3, #0]
 8054a8e:	687a      	ldr	r2, [r7, #4]
 8054a90:	429a      	cmp	r2, r3
 8054a92:	d101      	bne.n	8054a98 <tcp_output+0x40>
    return ERR_OK;
 8054a94:	2300      	movs	r3, #0
 8054a96:	e1ce      	b.n	8054e36 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8054a98:	687b      	ldr	r3, [r7, #4]
 8054a9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8054a9e:	687b      	ldr	r3, [r7, #4]
 8054aa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8054aa4:	4293      	cmp	r3, r2
 8054aa6:	bf28      	it	cs
 8054aa8:	4613      	movcs	r3, r2
 8054aaa:	b29b      	uxth	r3, r3
 8054aac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8054aae:	687b      	ldr	r3, [r7, #4]
 8054ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054ab2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8054ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054ab6:	2b00      	cmp	r3, #0
 8054ab8:	d10b      	bne.n	8054ad2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8054aba:	687b      	ldr	r3, [r7, #4]
 8054abc:	8b5b      	ldrh	r3, [r3, #26]
 8054abe:	f003 0302 	and.w	r3, r3, #2
 8054ac2:	2b00      	cmp	r3, #0
 8054ac4:	f000 81aa 	beq.w	8054e1c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8054ac8:	6878      	ldr	r0, [r7, #4]
 8054aca:	f000 fdcb 	bl	8055664 <tcp_send_empty_ack>
 8054ace:	4603      	mov	r3, r0
 8054ad0:	e1b1      	b.n	8054e36 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8054ad2:	6879      	ldr	r1, [r7, #4]
 8054ad4:	687b      	ldr	r3, [r7, #4]
 8054ad6:	3304      	adds	r3, #4
 8054ad8:	461a      	mov	r2, r3
 8054ada:	6878      	ldr	r0, [r7, #4]
 8054adc:	f7ff f824 	bl	8053b28 <tcp_route>
 8054ae0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8054ae2:	697b      	ldr	r3, [r7, #20]
 8054ae4:	2b00      	cmp	r3, #0
 8054ae6:	d102      	bne.n	8054aee <tcp_output+0x96>
    return ERR_RTE;
 8054ae8:	f06f 0303 	mvn.w	r3, #3
 8054aec:	e1a3      	b.n	8054e36 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8054aee:	687b      	ldr	r3, [r7, #4]
 8054af0:	2b00      	cmp	r3, #0
 8054af2:	d003      	beq.n	8054afc <tcp_output+0xa4>
 8054af4:	687b      	ldr	r3, [r7, #4]
 8054af6:	681b      	ldr	r3, [r3, #0]
 8054af8:	2b00      	cmp	r3, #0
 8054afa:	d111      	bne.n	8054b20 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8054afc:	697b      	ldr	r3, [r7, #20]
 8054afe:	2b00      	cmp	r3, #0
 8054b00:	d002      	beq.n	8054b08 <tcp_output+0xb0>
 8054b02:	697b      	ldr	r3, [r7, #20]
 8054b04:	3304      	adds	r3, #4
 8054b06:	e000      	b.n	8054b0a <tcp_output+0xb2>
 8054b08:	2300      	movs	r3, #0
 8054b0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8054b0c:	693b      	ldr	r3, [r7, #16]
 8054b0e:	2b00      	cmp	r3, #0
 8054b10:	d102      	bne.n	8054b18 <tcp_output+0xc0>
      return ERR_RTE;
 8054b12:	f06f 0303 	mvn.w	r3, #3
 8054b16:	e18e      	b.n	8054e36 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8054b18:	693b      	ldr	r3, [r7, #16]
 8054b1a:	681a      	ldr	r2, [r3, #0]
 8054b1c:	687b      	ldr	r3, [r7, #4]
 8054b1e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8054b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054b22:	68db      	ldr	r3, [r3, #12]
 8054b24:	685b      	ldr	r3, [r3, #4]
 8054b26:	4618      	mov	r0, r3
 8054b28:	f7f9 f80f 	bl	804db4a <lwip_htonl>
 8054b2c:	4602      	mov	r2, r0
 8054b2e:	687b      	ldr	r3, [r7, #4]
 8054b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8054b32:	1ad3      	subs	r3, r2, r3
 8054b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054b36:	8912      	ldrh	r2, [r2, #8]
 8054b38:	4413      	add	r3, r2
 8054b3a:	69ba      	ldr	r2, [r7, #24]
 8054b3c:	429a      	cmp	r2, r3
 8054b3e:	d227      	bcs.n	8054b90 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8054b40:	687b      	ldr	r3, [r7, #4]
 8054b42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8054b46:	461a      	mov	r2, r3
 8054b48:	69bb      	ldr	r3, [r7, #24]
 8054b4a:	4293      	cmp	r3, r2
 8054b4c:	d114      	bne.n	8054b78 <tcp_output+0x120>
 8054b4e:	687b      	ldr	r3, [r7, #4]
 8054b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054b52:	2b00      	cmp	r3, #0
 8054b54:	d110      	bne.n	8054b78 <tcp_output+0x120>
 8054b56:	687b      	ldr	r3, [r7, #4]
 8054b58:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8054b5c:	2b00      	cmp	r3, #0
 8054b5e:	d10b      	bne.n	8054b78 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8054b60:	687b      	ldr	r3, [r7, #4]
 8054b62:	2200      	movs	r2, #0
 8054b64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8054b68:	687b      	ldr	r3, [r7, #4]
 8054b6a:	2201      	movs	r2, #1
 8054b6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8054b70:	687b      	ldr	r3, [r7, #4]
 8054b72:	2200      	movs	r2, #0
 8054b74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8054b78:	687b      	ldr	r3, [r7, #4]
 8054b7a:	8b5b      	ldrh	r3, [r3, #26]
 8054b7c:	f003 0302 	and.w	r3, r3, #2
 8054b80:	2b00      	cmp	r3, #0
 8054b82:	f000 814d 	beq.w	8054e20 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8054b86:	6878      	ldr	r0, [r7, #4]
 8054b88:	f000 fd6c 	bl	8055664 <tcp_send_empty_ack>
 8054b8c:	4603      	mov	r3, r0
 8054b8e:	e152      	b.n	8054e36 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8054b90:	687b      	ldr	r3, [r7, #4]
 8054b92:	2200      	movs	r2, #0
 8054b94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8054b98:	687b      	ldr	r3, [r7, #4]
 8054b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054b9c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8054b9e:	6a3b      	ldr	r3, [r7, #32]
 8054ba0:	2b00      	cmp	r3, #0
 8054ba2:	f000 811c 	beq.w	8054dde <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8054ba6:	e002      	b.n	8054bae <tcp_output+0x156>
 8054ba8:	6a3b      	ldr	r3, [r7, #32]
 8054baa:	681b      	ldr	r3, [r3, #0]
 8054bac:	623b      	str	r3, [r7, #32]
 8054bae:	6a3b      	ldr	r3, [r7, #32]
 8054bb0:	681b      	ldr	r3, [r3, #0]
 8054bb2:	2b00      	cmp	r3, #0
 8054bb4:	d1f8      	bne.n	8054ba8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8054bb6:	e112      	b.n	8054dde <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8054bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054bba:	68db      	ldr	r3, [r3, #12]
 8054bbc:	899b      	ldrh	r3, [r3, #12]
 8054bbe:	b29b      	uxth	r3, r3
 8054bc0:	4618      	mov	r0, r3
 8054bc2:	f7f8 ffad 	bl	804db20 <lwip_htons>
 8054bc6:	4603      	mov	r3, r0
 8054bc8:	b2db      	uxtb	r3, r3
 8054bca:	f003 0304 	and.w	r3, r3, #4
 8054bce:	2b00      	cmp	r3, #0
 8054bd0:	d006      	beq.n	8054be0 <tcp_output+0x188>
 8054bd2:	4b2f      	ldr	r3, [pc, #188]	; (8054c90 <tcp_output+0x238>)
 8054bd4:	f240 5236 	movw	r2, #1334	; 0x536
 8054bd8:	4932      	ldr	r1, [pc, #200]	; (8054ca4 <tcp_output+0x24c>)
 8054bda:	482f      	ldr	r0, [pc, #188]	; (8054c98 <tcp_output+0x240>)
 8054bdc:	f004 fa2a 	bl	8059034 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8054be0:	687b      	ldr	r3, [r7, #4]
 8054be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054be4:	2b00      	cmp	r3, #0
 8054be6:	d01f      	beq.n	8054c28 <tcp_output+0x1d0>
 8054be8:	687b      	ldr	r3, [r7, #4]
 8054bea:	8b5b      	ldrh	r3, [r3, #26]
 8054bec:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8054bf0:	2b00      	cmp	r3, #0
 8054bf2:	d119      	bne.n	8054c28 <tcp_output+0x1d0>
 8054bf4:	687b      	ldr	r3, [r7, #4]
 8054bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054bf8:	2b00      	cmp	r3, #0
 8054bfa:	d00b      	beq.n	8054c14 <tcp_output+0x1bc>
 8054bfc:	687b      	ldr	r3, [r7, #4]
 8054bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054c00:	681b      	ldr	r3, [r3, #0]
 8054c02:	2b00      	cmp	r3, #0
 8054c04:	d110      	bne.n	8054c28 <tcp_output+0x1d0>
 8054c06:	687b      	ldr	r3, [r7, #4]
 8054c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054c0a:	891a      	ldrh	r2, [r3, #8]
 8054c0c:	687b      	ldr	r3, [r7, #4]
 8054c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8054c10:	429a      	cmp	r2, r3
 8054c12:	d209      	bcs.n	8054c28 <tcp_output+0x1d0>
 8054c14:	687b      	ldr	r3, [r7, #4]
 8054c16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8054c1a:	2b00      	cmp	r3, #0
 8054c1c:	d004      	beq.n	8054c28 <tcp_output+0x1d0>
 8054c1e:	687b      	ldr	r3, [r7, #4]
 8054c20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8054c24:	2b08      	cmp	r3, #8
 8054c26:	d901      	bls.n	8054c2c <tcp_output+0x1d4>
 8054c28:	2301      	movs	r3, #1
 8054c2a:	e000      	b.n	8054c2e <tcp_output+0x1d6>
 8054c2c:	2300      	movs	r3, #0
 8054c2e:	2b00      	cmp	r3, #0
 8054c30:	d106      	bne.n	8054c40 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8054c32:	687b      	ldr	r3, [r7, #4]
 8054c34:	8b5b      	ldrh	r3, [r3, #26]
 8054c36:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8054c3a:	2b00      	cmp	r3, #0
 8054c3c:	f000 80e4 	beq.w	8054e08 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8054c40:	687b      	ldr	r3, [r7, #4]
 8054c42:	7d1b      	ldrb	r3, [r3, #20]
 8054c44:	2b02      	cmp	r3, #2
 8054c46:	d00d      	beq.n	8054c64 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8054c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054c4a:	68db      	ldr	r3, [r3, #12]
 8054c4c:	899b      	ldrh	r3, [r3, #12]
 8054c4e:	b29c      	uxth	r4, r3
 8054c50:	2010      	movs	r0, #16
 8054c52:	f7f8 ff65 	bl	804db20 <lwip_htons>
 8054c56:	4603      	mov	r3, r0
 8054c58:	461a      	mov	r2, r3
 8054c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054c5c:	68db      	ldr	r3, [r3, #12]
 8054c5e:	4322      	orrs	r2, r4
 8054c60:	b292      	uxth	r2, r2
 8054c62:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8054c64:	697a      	ldr	r2, [r7, #20]
 8054c66:	6879      	ldr	r1, [r7, #4]
 8054c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8054c6a:	f000 f909 	bl	8054e80 <tcp_output_segment>
 8054c6e:	4603      	mov	r3, r0
 8054c70:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8054c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8054c76:	2b00      	cmp	r3, #0
 8054c78:	d016      	beq.n	8054ca8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8054c7a:	687b      	ldr	r3, [r7, #4]
 8054c7c:	8b5b      	ldrh	r3, [r3, #26]
 8054c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8054c82:	b29a      	uxth	r2, r3
 8054c84:	687b      	ldr	r3, [r7, #4]
 8054c86:	835a      	strh	r2, [r3, #26]
      return err;
 8054c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8054c8c:	e0d3      	b.n	8054e36 <tcp_output+0x3de>
 8054c8e:	bf00      	nop
 8054c90:	0805c4c4 	.word	0x0805c4c4
 8054c94:	0805ca08 	.word	0x0805ca08
 8054c98:	0805c518 	.word	0x0805c518
 8054c9c:	0805ca20 	.word	0x0805ca20
 8054ca0:	2000b618 	.word	0x2000b618
 8054ca4:	0805ca48 	.word	0x0805ca48
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8054ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054caa:	681a      	ldr	r2, [r3, #0]
 8054cac:	687b      	ldr	r3, [r7, #4]
 8054cae:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8054cb0:	687b      	ldr	r3, [r7, #4]
 8054cb2:	7d1b      	ldrb	r3, [r3, #20]
 8054cb4:	2b02      	cmp	r3, #2
 8054cb6:	d006      	beq.n	8054cc6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8054cb8:	687b      	ldr	r3, [r7, #4]
 8054cba:	8b5b      	ldrh	r3, [r3, #26]
 8054cbc:	f023 0303 	bic.w	r3, r3, #3
 8054cc0:	b29a      	uxth	r2, r3
 8054cc2:	687b      	ldr	r3, [r7, #4]
 8054cc4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8054cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054cc8:	68db      	ldr	r3, [r3, #12]
 8054cca:	685b      	ldr	r3, [r3, #4]
 8054ccc:	4618      	mov	r0, r3
 8054cce:	f7f8 ff3c 	bl	804db4a <lwip_htonl>
 8054cd2:	4604      	mov	r4, r0
 8054cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054cd6:	891b      	ldrh	r3, [r3, #8]
 8054cd8:	461d      	mov	r5, r3
 8054cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054cdc:	68db      	ldr	r3, [r3, #12]
 8054cde:	899b      	ldrh	r3, [r3, #12]
 8054ce0:	b29b      	uxth	r3, r3
 8054ce2:	4618      	mov	r0, r3
 8054ce4:	f7f8 ff1c 	bl	804db20 <lwip_htons>
 8054ce8:	4603      	mov	r3, r0
 8054cea:	b2db      	uxtb	r3, r3
 8054cec:	f003 0303 	and.w	r3, r3, #3
 8054cf0:	2b00      	cmp	r3, #0
 8054cf2:	d001      	beq.n	8054cf8 <tcp_output+0x2a0>
 8054cf4:	2301      	movs	r3, #1
 8054cf6:	e000      	b.n	8054cfa <tcp_output+0x2a2>
 8054cf8:	2300      	movs	r3, #0
 8054cfa:	442b      	add	r3, r5
 8054cfc:	4423      	add	r3, r4
 8054cfe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8054d00:	687b      	ldr	r3, [r7, #4]
 8054d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8054d04:	68bb      	ldr	r3, [r7, #8]
 8054d06:	1ad3      	subs	r3, r2, r3
 8054d08:	2b00      	cmp	r3, #0
 8054d0a:	da02      	bge.n	8054d12 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8054d0c:	687b      	ldr	r3, [r7, #4]
 8054d0e:	68ba      	ldr	r2, [r7, #8]
 8054d10:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8054d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054d14:	891b      	ldrh	r3, [r3, #8]
 8054d16:	461c      	mov	r4, r3
 8054d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054d1a:	68db      	ldr	r3, [r3, #12]
 8054d1c:	899b      	ldrh	r3, [r3, #12]
 8054d1e:	b29b      	uxth	r3, r3
 8054d20:	4618      	mov	r0, r3
 8054d22:	f7f8 fefd 	bl	804db20 <lwip_htons>
 8054d26:	4603      	mov	r3, r0
 8054d28:	b2db      	uxtb	r3, r3
 8054d2a:	f003 0303 	and.w	r3, r3, #3
 8054d2e:	2b00      	cmp	r3, #0
 8054d30:	d001      	beq.n	8054d36 <tcp_output+0x2de>
 8054d32:	2301      	movs	r3, #1
 8054d34:	e000      	b.n	8054d38 <tcp_output+0x2e0>
 8054d36:	2300      	movs	r3, #0
 8054d38:	4423      	add	r3, r4
 8054d3a:	2b00      	cmp	r3, #0
 8054d3c:	d049      	beq.n	8054dd2 <tcp_output+0x37a>
      seg->next = NULL;
 8054d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054d40:	2200      	movs	r2, #0
 8054d42:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8054d44:	687b      	ldr	r3, [r7, #4]
 8054d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8054d48:	2b00      	cmp	r3, #0
 8054d4a:	d105      	bne.n	8054d58 <tcp_output+0x300>
        pcb->unacked = seg;
 8054d4c:	687b      	ldr	r3, [r7, #4]
 8054d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054d50:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8054d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054d54:	623b      	str	r3, [r7, #32]
 8054d56:	e03f      	b.n	8054dd8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8054d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054d5a:	68db      	ldr	r3, [r3, #12]
 8054d5c:	685b      	ldr	r3, [r3, #4]
 8054d5e:	4618      	mov	r0, r3
 8054d60:	f7f8 fef3 	bl	804db4a <lwip_htonl>
 8054d64:	4604      	mov	r4, r0
 8054d66:	6a3b      	ldr	r3, [r7, #32]
 8054d68:	68db      	ldr	r3, [r3, #12]
 8054d6a:	685b      	ldr	r3, [r3, #4]
 8054d6c:	4618      	mov	r0, r3
 8054d6e:	f7f8 feec 	bl	804db4a <lwip_htonl>
 8054d72:	4603      	mov	r3, r0
 8054d74:	1ae3      	subs	r3, r4, r3
 8054d76:	2b00      	cmp	r3, #0
 8054d78:	da24      	bge.n	8054dc4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8054d7a:	687b      	ldr	r3, [r7, #4]
 8054d7c:	3370      	adds	r3, #112	; 0x70
 8054d7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8054d80:	e002      	b.n	8054d88 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8054d82:	69fb      	ldr	r3, [r7, #28]
 8054d84:	681b      	ldr	r3, [r3, #0]
 8054d86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8054d88:	69fb      	ldr	r3, [r7, #28]
 8054d8a:	681b      	ldr	r3, [r3, #0]
 8054d8c:	2b00      	cmp	r3, #0
 8054d8e:	d011      	beq.n	8054db4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8054d90:	69fb      	ldr	r3, [r7, #28]
 8054d92:	681b      	ldr	r3, [r3, #0]
 8054d94:	68db      	ldr	r3, [r3, #12]
 8054d96:	685b      	ldr	r3, [r3, #4]
 8054d98:	4618      	mov	r0, r3
 8054d9a:	f7f8 fed6 	bl	804db4a <lwip_htonl>
 8054d9e:	4604      	mov	r4, r0
 8054da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054da2:	68db      	ldr	r3, [r3, #12]
 8054da4:	685b      	ldr	r3, [r3, #4]
 8054da6:	4618      	mov	r0, r3
 8054da8:	f7f8 fecf 	bl	804db4a <lwip_htonl>
 8054dac:	4603      	mov	r3, r0
 8054dae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8054db0:	2b00      	cmp	r3, #0
 8054db2:	dbe6      	blt.n	8054d82 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8054db4:	69fb      	ldr	r3, [r7, #28]
 8054db6:	681a      	ldr	r2, [r3, #0]
 8054db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054dba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8054dbc:	69fb      	ldr	r3, [r7, #28]
 8054dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054dc0:	601a      	str	r2, [r3, #0]
 8054dc2:	e009      	b.n	8054dd8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8054dc4:	6a3b      	ldr	r3, [r7, #32]
 8054dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054dc8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8054dca:	6a3b      	ldr	r3, [r7, #32]
 8054dcc:	681b      	ldr	r3, [r3, #0]
 8054dce:	623b      	str	r3, [r7, #32]
 8054dd0:	e002      	b.n	8054dd8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8054dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8054dd4:	f7fb ff19 	bl	8050c0a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8054dd8:	687b      	ldr	r3, [r7, #4]
 8054dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054ddc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8054dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054de0:	2b00      	cmp	r3, #0
 8054de2:	d012      	beq.n	8054e0a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8054de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8054de6:	68db      	ldr	r3, [r3, #12]
 8054de8:	685b      	ldr	r3, [r3, #4]
 8054dea:	4618      	mov	r0, r3
 8054dec:	f7f8 fead 	bl	804db4a <lwip_htonl>
 8054df0:	4602      	mov	r2, r0
 8054df2:	687b      	ldr	r3, [r7, #4]
 8054df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8054df6:	1ad3      	subs	r3, r2, r3
 8054df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8054dfa:	8912      	ldrh	r2, [r2, #8]
 8054dfc:	4413      	add	r3, r2
  while (seg != NULL &&
 8054dfe:	69ba      	ldr	r2, [r7, #24]
 8054e00:	429a      	cmp	r2, r3
 8054e02:	f4bf aed9 	bcs.w	8054bb8 <tcp_output+0x160>
 8054e06:	e000      	b.n	8054e0a <tcp_output+0x3b2>
      break;
 8054e08:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8054e0a:	687b      	ldr	r3, [r7, #4]
 8054e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8054e0e:	2b00      	cmp	r3, #0
 8054e10:	d108      	bne.n	8054e24 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8054e12:	687b      	ldr	r3, [r7, #4]
 8054e14:	2200      	movs	r2, #0
 8054e16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8054e1a:	e004      	b.n	8054e26 <tcp_output+0x3ce>
    goto output_done;
 8054e1c:	bf00      	nop
 8054e1e:	e002      	b.n	8054e26 <tcp_output+0x3ce>
    goto output_done;
 8054e20:	bf00      	nop
 8054e22:	e000      	b.n	8054e26 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8054e24:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8054e26:	687b      	ldr	r3, [r7, #4]
 8054e28:	8b5b      	ldrh	r3, [r3, #26]
 8054e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8054e2e:	b29a      	uxth	r2, r3
 8054e30:	687b      	ldr	r3, [r7, #4]
 8054e32:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8054e34:	2300      	movs	r3, #0
}
 8054e36:	4618      	mov	r0, r3
 8054e38:	3728      	adds	r7, #40	; 0x28
 8054e3a:	46bd      	mov	sp, r7
 8054e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8054e3e:	bf00      	nop

08054e40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8054e40:	b580      	push	{r7, lr}
 8054e42:	b082      	sub	sp, #8
 8054e44:	af00      	add	r7, sp, #0
 8054e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8054e48:	687b      	ldr	r3, [r7, #4]
 8054e4a:	2b00      	cmp	r3, #0
 8054e4c:	d106      	bne.n	8054e5c <tcp_output_segment_busy+0x1c>
 8054e4e:	4b09      	ldr	r3, [pc, #36]	; (8054e74 <tcp_output_segment_busy+0x34>)
 8054e50:	f240 529a 	movw	r2, #1434	; 0x59a
 8054e54:	4908      	ldr	r1, [pc, #32]	; (8054e78 <tcp_output_segment_busy+0x38>)
 8054e56:	4809      	ldr	r0, [pc, #36]	; (8054e7c <tcp_output_segment_busy+0x3c>)
 8054e58:	f004 f8ec 	bl	8059034 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8054e5c:	687b      	ldr	r3, [r7, #4]
 8054e5e:	685b      	ldr	r3, [r3, #4]
 8054e60:	7b9b      	ldrb	r3, [r3, #14]
 8054e62:	2b01      	cmp	r3, #1
 8054e64:	d001      	beq.n	8054e6a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8054e66:	2301      	movs	r3, #1
 8054e68:	e000      	b.n	8054e6c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8054e6a:	2300      	movs	r3, #0
}
 8054e6c:	4618      	mov	r0, r3
 8054e6e:	3708      	adds	r7, #8
 8054e70:	46bd      	mov	sp, r7
 8054e72:	bd80      	pop	{r7, pc}
 8054e74:	0805c4c4 	.word	0x0805c4c4
 8054e78:	0805ca60 	.word	0x0805ca60
 8054e7c:	0805c518 	.word	0x0805c518

08054e80 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8054e80:	b5b0      	push	{r4, r5, r7, lr}
 8054e82:	b08c      	sub	sp, #48	; 0x30
 8054e84:	af04      	add	r7, sp, #16
 8054e86:	60f8      	str	r0, [r7, #12]
 8054e88:	60b9      	str	r1, [r7, #8]
 8054e8a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8054e8c:	68fb      	ldr	r3, [r7, #12]
 8054e8e:	2b00      	cmp	r3, #0
 8054e90:	d106      	bne.n	8054ea0 <tcp_output_segment+0x20>
 8054e92:	4b63      	ldr	r3, [pc, #396]	; (8055020 <tcp_output_segment+0x1a0>)
 8054e94:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8054e98:	4962      	ldr	r1, [pc, #392]	; (8055024 <tcp_output_segment+0x1a4>)
 8054e9a:	4863      	ldr	r0, [pc, #396]	; (8055028 <tcp_output_segment+0x1a8>)
 8054e9c:	f004 f8ca 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8054ea0:	68bb      	ldr	r3, [r7, #8]
 8054ea2:	2b00      	cmp	r3, #0
 8054ea4:	d106      	bne.n	8054eb4 <tcp_output_segment+0x34>
 8054ea6:	4b5e      	ldr	r3, [pc, #376]	; (8055020 <tcp_output_segment+0x1a0>)
 8054ea8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8054eac:	495f      	ldr	r1, [pc, #380]	; (805502c <tcp_output_segment+0x1ac>)
 8054eae:	485e      	ldr	r0, [pc, #376]	; (8055028 <tcp_output_segment+0x1a8>)
 8054eb0:	f004 f8c0 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8054eb4:	687b      	ldr	r3, [r7, #4]
 8054eb6:	2b00      	cmp	r3, #0
 8054eb8:	d106      	bne.n	8054ec8 <tcp_output_segment+0x48>
 8054eba:	4b59      	ldr	r3, [pc, #356]	; (8055020 <tcp_output_segment+0x1a0>)
 8054ebc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8054ec0:	495b      	ldr	r1, [pc, #364]	; (8055030 <tcp_output_segment+0x1b0>)
 8054ec2:	4859      	ldr	r0, [pc, #356]	; (8055028 <tcp_output_segment+0x1a8>)
 8054ec4:	f004 f8b6 	bl	8059034 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8054ec8:	68f8      	ldr	r0, [r7, #12]
 8054eca:	f7ff ffb9 	bl	8054e40 <tcp_output_segment_busy>
 8054ece:	4603      	mov	r3, r0
 8054ed0:	2b00      	cmp	r3, #0
 8054ed2:	d001      	beq.n	8054ed8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8054ed4:	2300      	movs	r3, #0
 8054ed6:	e09f      	b.n	8055018 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8054ed8:	68bb      	ldr	r3, [r7, #8]
 8054eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8054edc:	68fb      	ldr	r3, [r7, #12]
 8054ede:	68dc      	ldr	r4, [r3, #12]
 8054ee0:	4610      	mov	r0, r2
 8054ee2:	f7f8 fe32 	bl	804db4a <lwip_htonl>
 8054ee6:	4603      	mov	r3, r0
 8054ee8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8054eea:	68bb      	ldr	r3, [r7, #8]
 8054eec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8054eee:	68fb      	ldr	r3, [r7, #12]
 8054ef0:	68dc      	ldr	r4, [r3, #12]
 8054ef2:	4610      	mov	r0, r2
 8054ef4:	f7f8 fe14 	bl	804db20 <lwip_htons>
 8054ef8:	4603      	mov	r3, r0
 8054efa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8054efc:	68bb      	ldr	r3, [r7, #8]
 8054efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8054f00:	68ba      	ldr	r2, [r7, #8]
 8054f02:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8054f04:	441a      	add	r2, r3
 8054f06:	68bb      	ldr	r3, [r7, #8]
 8054f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8054f0a:	68fb      	ldr	r3, [r7, #12]
 8054f0c:	68db      	ldr	r3, [r3, #12]
 8054f0e:	3314      	adds	r3, #20
 8054f10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8054f12:	68fb      	ldr	r3, [r7, #12]
 8054f14:	7a9b      	ldrb	r3, [r3, #10]
 8054f16:	f003 0301 	and.w	r3, r3, #1
 8054f1a:	2b00      	cmp	r3, #0
 8054f1c:	d015      	beq.n	8054f4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8054f1e:	68bb      	ldr	r3, [r7, #8]
 8054f20:	3304      	adds	r3, #4
 8054f22:	461a      	mov	r2, r3
 8054f24:	6879      	ldr	r1, [r7, #4]
 8054f26:	f44f 7006 	mov.w	r0, #536	; 0x218
 8054f2a:	f7fc fa33 	bl	8051394 <tcp_eff_send_mss_netif>
 8054f2e:	4603      	mov	r3, r0
 8054f30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8054f32:	8b7b      	ldrh	r3, [r7, #26]
 8054f34:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8054f38:	4618      	mov	r0, r3
 8054f3a:	f7f8 fe06 	bl	804db4a <lwip_htonl>
 8054f3e:	4602      	mov	r2, r0
 8054f40:	69fb      	ldr	r3, [r7, #28]
 8054f42:	601a      	str	r2, [r3, #0]
    opts += 1;
 8054f44:	69fb      	ldr	r3, [r7, #28]
 8054f46:	3304      	adds	r3, #4
 8054f48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8054f4a:	68bb      	ldr	r3, [r7, #8]
 8054f4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8054f50:	2b00      	cmp	r3, #0
 8054f52:	da02      	bge.n	8054f5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8054f54:	68bb      	ldr	r3, [r7, #8]
 8054f56:	2200      	movs	r2, #0
 8054f58:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8054f5a:	68bb      	ldr	r3, [r7, #8]
 8054f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8054f5e:	2b00      	cmp	r3, #0
 8054f60:	d10c      	bne.n	8054f7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8054f62:	4b34      	ldr	r3, [pc, #208]	; (8055034 <tcp_output_segment+0x1b4>)
 8054f64:	681a      	ldr	r2, [r3, #0]
 8054f66:	68bb      	ldr	r3, [r7, #8]
 8054f68:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8054f6a:	68fb      	ldr	r3, [r7, #12]
 8054f6c:	68db      	ldr	r3, [r3, #12]
 8054f6e:	685b      	ldr	r3, [r3, #4]
 8054f70:	4618      	mov	r0, r3
 8054f72:	f7f8 fdea 	bl	804db4a <lwip_htonl>
 8054f76:	4602      	mov	r2, r0
 8054f78:	68bb      	ldr	r3, [r7, #8]
 8054f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8054f7c:	68fb      	ldr	r3, [r7, #12]
 8054f7e:	68da      	ldr	r2, [r3, #12]
 8054f80:	68fb      	ldr	r3, [r7, #12]
 8054f82:	685b      	ldr	r3, [r3, #4]
 8054f84:	685b      	ldr	r3, [r3, #4]
 8054f86:	1ad3      	subs	r3, r2, r3
 8054f88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8054f8a:	68fb      	ldr	r3, [r7, #12]
 8054f8c:	685b      	ldr	r3, [r3, #4]
 8054f8e:	8959      	ldrh	r1, [r3, #10]
 8054f90:	68fb      	ldr	r3, [r7, #12]
 8054f92:	685b      	ldr	r3, [r3, #4]
 8054f94:	8b3a      	ldrh	r2, [r7, #24]
 8054f96:	1a8a      	subs	r2, r1, r2
 8054f98:	b292      	uxth	r2, r2
 8054f9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8054f9c:	68fb      	ldr	r3, [r7, #12]
 8054f9e:	685b      	ldr	r3, [r3, #4]
 8054fa0:	8919      	ldrh	r1, [r3, #8]
 8054fa2:	68fb      	ldr	r3, [r7, #12]
 8054fa4:	685b      	ldr	r3, [r3, #4]
 8054fa6:	8b3a      	ldrh	r2, [r7, #24]
 8054fa8:	1a8a      	subs	r2, r1, r2
 8054faa:	b292      	uxth	r2, r2
 8054fac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8054fae:	68fb      	ldr	r3, [r7, #12]
 8054fb0:	685b      	ldr	r3, [r3, #4]
 8054fb2:	68fa      	ldr	r2, [r7, #12]
 8054fb4:	68d2      	ldr	r2, [r2, #12]
 8054fb6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8054fb8:	68fb      	ldr	r3, [r7, #12]
 8054fba:	68db      	ldr	r3, [r3, #12]
 8054fbc:	2200      	movs	r2, #0
 8054fbe:	741a      	strb	r2, [r3, #16]
 8054fc0:	2200      	movs	r2, #0
 8054fc2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8054fc4:	68fb      	ldr	r3, [r7, #12]
 8054fc6:	68db      	ldr	r3, [r3, #12]
 8054fc8:	f103 0214 	add.w	r2, r3, #20
 8054fcc:	68fb      	ldr	r3, [r7, #12]
 8054fce:	7a9b      	ldrb	r3, [r3, #10]
 8054fd0:	009b      	lsls	r3, r3, #2
 8054fd2:	f003 0304 	and.w	r3, r3, #4
 8054fd6:	4413      	add	r3, r2
 8054fd8:	69fa      	ldr	r2, [r7, #28]
 8054fda:	429a      	cmp	r2, r3
 8054fdc:	d006      	beq.n	8054fec <tcp_output_segment+0x16c>
 8054fde:	4b10      	ldr	r3, [pc, #64]	; (8055020 <tcp_output_segment+0x1a0>)
 8054fe0:	f240 621c 	movw	r2, #1564	; 0x61c
 8054fe4:	4914      	ldr	r1, [pc, #80]	; (8055038 <tcp_output_segment+0x1b8>)
 8054fe6:	4810      	ldr	r0, [pc, #64]	; (8055028 <tcp_output_segment+0x1a8>)
 8054fe8:	f004 f824 	bl	8059034 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8054fec:	68fb      	ldr	r3, [r7, #12]
 8054fee:	6858      	ldr	r0, [r3, #4]
 8054ff0:	68b9      	ldr	r1, [r7, #8]
 8054ff2:	68bb      	ldr	r3, [r7, #8]
 8054ff4:	1d1c      	adds	r4, r3, #4
 8054ff6:	68bb      	ldr	r3, [r7, #8]
 8054ff8:	7add      	ldrb	r5, [r3, #11]
 8054ffa:	68bb      	ldr	r3, [r7, #8]
 8054ffc:	7a9b      	ldrb	r3, [r3, #10]
 8054ffe:	687a      	ldr	r2, [r7, #4]
 8055000:	9202      	str	r2, [sp, #8]
 8055002:	2206      	movs	r2, #6
 8055004:	9201      	str	r2, [sp, #4]
 8055006:	9300      	str	r3, [sp, #0]
 8055008:	462b      	mov	r3, r5
 805500a:	4622      	mov	r2, r4
 805500c:	f002 fbac 	bl	8057768 <ip4_output_if>
 8055010:	4603      	mov	r3, r0
 8055012:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8055014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8055018:	4618      	mov	r0, r3
 805501a:	3720      	adds	r7, #32
 805501c:	46bd      	mov	sp, r7
 805501e:	bdb0      	pop	{r4, r5, r7, pc}
 8055020:	0805c4c4 	.word	0x0805c4c4
 8055024:	0805ca88 	.word	0x0805ca88
 8055028:	0805c518 	.word	0x0805c518
 805502c:	0805caa8 	.word	0x0805caa8
 8055030:	0805cac8 	.word	0x0805cac8
 8055034:	2000b5cc 	.word	0x2000b5cc
 8055038:	0805caec 	.word	0x0805caec

0805503c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 805503c:	b5b0      	push	{r4, r5, r7, lr}
 805503e:	b084      	sub	sp, #16
 8055040:	af00      	add	r7, sp, #0
 8055042:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8055044:	687b      	ldr	r3, [r7, #4]
 8055046:	2b00      	cmp	r3, #0
 8055048:	d106      	bne.n	8055058 <tcp_rexmit_rto_prepare+0x1c>
 805504a:	4b31      	ldr	r3, [pc, #196]	; (8055110 <tcp_rexmit_rto_prepare+0xd4>)
 805504c:	f240 6263 	movw	r2, #1635	; 0x663
 8055050:	4930      	ldr	r1, [pc, #192]	; (8055114 <tcp_rexmit_rto_prepare+0xd8>)
 8055052:	4831      	ldr	r0, [pc, #196]	; (8055118 <tcp_rexmit_rto_prepare+0xdc>)
 8055054:	f003 ffee 	bl	8059034 <iprintf>

  if (pcb->unacked == NULL) {
 8055058:	687b      	ldr	r3, [r7, #4]
 805505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805505c:	2b00      	cmp	r3, #0
 805505e:	d102      	bne.n	8055066 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8055060:	f06f 0305 	mvn.w	r3, #5
 8055064:	e050      	b.n	8055108 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8055066:	687b      	ldr	r3, [r7, #4]
 8055068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 805506a:	60fb      	str	r3, [r7, #12]
 805506c:	e00b      	b.n	8055086 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 805506e:	68f8      	ldr	r0, [r7, #12]
 8055070:	f7ff fee6 	bl	8054e40 <tcp_output_segment_busy>
 8055074:	4603      	mov	r3, r0
 8055076:	2b00      	cmp	r3, #0
 8055078:	d002      	beq.n	8055080 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 805507a:	f06f 0305 	mvn.w	r3, #5
 805507e:	e043      	b.n	8055108 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8055080:	68fb      	ldr	r3, [r7, #12]
 8055082:	681b      	ldr	r3, [r3, #0]
 8055084:	60fb      	str	r3, [r7, #12]
 8055086:	68fb      	ldr	r3, [r7, #12]
 8055088:	681b      	ldr	r3, [r3, #0]
 805508a:	2b00      	cmp	r3, #0
 805508c:	d1ef      	bne.n	805506e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 805508e:	68f8      	ldr	r0, [r7, #12]
 8055090:	f7ff fed6 	bl	8054e40 <tcp_output_segment_busy>
 8055094:	4603      	mov	r3, r0
 8055096:	2b00      	cmp	r3, #0
 8055098:	d002      	beq.n	80550a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 805509a:	f06f 0305 	mvn.w	r3, #5
 805509e:	e033      	b.n	8055108 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80550a0:	687b      	ldr	r3, [r7, #4]
 80550a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80550a4:	68fb      	ldr	r3, [r7, #12]
 80550a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80550a8:	687b      	ldr	r3, [r7, #4]
 80550aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80550ac:	687b      	ldr	r3, [r7, #4]
 80550ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80550b0:	687b      	ldr	r3, [r7, #4]
 80550b2:	2200      	movs	r2, #0
 80550b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80550b6:	687b      	ldr	r3, [r7, #4]
 80550b8:	8b5b      	ldrh	r3, [r3, #26]
 80550ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80550be:	b29a      	uxth	r2, r3
 80550c0:	687b      	ldr	r3, [r7, #4]
 80550c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80550c4:	68fb      	ldr	r3, [r7, #12]
 80550c6:	68db      	ldr	r3, [r3, #12]
 80550c8:	685b      	ldr	r3, [r3, #4]
 80550ca:	4618      	mov	r0, r3
 80550cc:	f7f8 fd3d 	bl	804db4a <lwip_htonl>
 80550d0:	4604      	mov	r4, r0
 80550d2:	68fb      	ldr	r3, [r7, #12]
 80550d4:	891b      	ldrh	r3, [r3, #8]
 80550d6:	461d      	mov	r5, r3
 80550d8:	68fb      	ldr	r3, [r7, #12]
 80550da:	68db      	ldr	r3, [r3, #12]
 80550dc:	899b      	ldrh	r3, [r3, #12]
 80550de:	b29b      	uxth	r3, r3
 80550e0:	4618      	mov	r0, r3
 80550e2:	f7f8 fd1d 	bl	804db20 <lwip_htons>
 80550e6:	4603      	mov	r3, r0
 80550e8:	b2db      	uxtb	r3, r3
 80550ea:	f003 0303 	and.w	r3, r3, #3
 80550ee:	2b00      	cmp	r3, #0
 80550f0:	d001      	beq.n	80550f6 <tcp_rexmit_rto_prepare+0xba>
 80550f2:	2301      	movs	r3, #1
 80550f4:	e000      	b.n	80550f8 <tcp_rexmit_rto_prepare+0xbc>
 80550f6:	2300      	movs	r3, #0
 80550f8:	442b      	add	r3, r5
 80550fa:	18e2      	adds	r2, r4, r3
 80550fc:	687b      	ldr	r3, [r7, #4]
 80550fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8055100:	687b      	ldr	r3, [r7, #4]
 8055102:	2200      	movs	r2, #0
 8055104:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8055106:	2300      	movs	r3, #0
}
 8055108:	4618      	mov	r0, r3
 805510a:	3710      	adds	r7, #16
 805510c:	46bd      	mov	sp, r7
 805510e:	bdb0      	pop	{r4, r5, r7, pc}
 8055110:	0805c4c4 	.word	0x0805c4c4
 8055114:	0805cb00 	.word	0x0805cb00
 8055118:	0805c518 	.word	0x0805c518

0805511c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 805511c:	b580      	push	{r7, lr}
 805511e:	b082      	sub	sp, #8
 8055120:	af00      	add	r7, sp, #0
 8055122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8055124:	687b      	ldr	r3, [r7, #4]
 8055126:	2b00      	cmp	r3, #0
 8055128:	d106      	bne.n	8055138 <tcp_rexmit_rto_commit+0x1c>
 805512a:	4b0d      	ldr	r3, [pc, #52]	; (8055160 <tcp_rexmit_rto_commit+0x44>)
 805512c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8055130:	490c      	ldr	r1, [pc, #48]	; (8055164 <tcp_rexmit_rto_commit+0x48>)
 8055132:	480d      	ldr	r0, [pc, #52]	; (8055168 <tcp_rexmit_rto_commit+0x4c>)
 8055134:	f003 ff7e 	bl	8059034 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8055138:	687b      	ldr	r3, [r7, #4]
 805513a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 805513e:	2bff      	cmp	r3, #255	; 0xff
 8055140:	d007      	beq.n	8055152 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8055142:	687b      	ldr	r3, [r7, #4]
 8055144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8055148:	3301      	adds	r3, #1
 805514a:	b2da      	uxtb	r2, r3
 805514c:	687b      	ldr	r3, [r7, #4]
 805514e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8055152:	6878      	ldr	r0, [r7, #4]
 8055154:	f7ff fc80 	bl	8054a58 <tcp_output>
}
 8055158:	bf00      	nop
 805515a:	3708      	adds	r7, #8
 805515c:	46bd      	mov	sp, r7
 805515e:	bd80      	pop	{r7, pc}
 8055160:	0805c4c4 	.word	0x0805c4c4
 8055164:	0805cb24 	.word	0x0805cb24
 8055168:	0805c518 	.word	0x0805c518

0805516c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 805516c:	b580      	push	{r7, lr}
 805516e:	b082      	sub	sp, #8
 8055170:	af00      	add	r7, sp, #0
 8055172:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8055174:	687b      	ldr	r3, [r7, #4]
 8055176:	2b00      	cmp	r3, #0
 8055178:	d106      	bne.n	8055188 <tcp_rexmit_rto+0x1c>
 805517a:	4b0a      	ldr	r3, [pc, #40]	; (80551a4 <tcp_rexmit_rto+0x38>)
 805517c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8055180:	4909      	ldr	r1, [pc, #36]	; (80551a8 <tcp_rexmit_rto+0x3c>)
 8055182:	480a      	ldr	r0, [pc, #40]	; (80551ac <tcp_rexmit_rto+0x40>)
 8055184:	f003 ff56 	bl	8059034 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8055188:	6878      	ldr	r0, [r7, #4]
 805518a:	f7ff ff57 	bl	805503c <tcp_rexmit_rto_prepare>
 805518e:	4603      	mov	r3, r0
 8055190:	2b00      	cmp	r3, #0
 8055192:	d102      	bne.n	805519a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8055194:	6878      	ldr	r0, [r7, #4]
 8055196:	f7ff ffc1 	bl	805511c <tcp_rexmit_rto_commit>
  }
}
 805519a:	bf00      	nop
 805519c:	3708      	adds	r7, #8
 805519e:	46bd      	mov	sp, r7
 80551a0:	bd80      	pop	{r7, pc}
 80551a2:	bf00      	nop
 80551a4:	0805c4c4 	.word	0x0805c4c4
 80551a8:	0805cb48 	.word	0x0805cb48
 80551ac:	0805c518 	.word	0x0805c518

080551b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80551b0:	b590      	push	{r4, r7, lr}
 80551b2:	b085      	sub	sp, #20
 80551b4:	af00      	add	r7, sp, #0
 80551b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80551b8:	687b      	ldr	r3, [r7, #4]
 80551ba:	2b00      	cmp	r3, #0
 80551bc:	d106      	bne.n	80551cc <tcp_rexmit+0x1c>
 80551be:	4b2f      	ldr	r3, [pc, #188]	; (805527c <tcp_rexmit+0xcc>)
 80551c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80551c4:	492e      	ldr	r1, [pc, #184]	; (8055280 <tcp_rexmit+0xd0>)
 80551c6:	482f      	ldr	r0, [pc, #188]	; (8055284 <tcp_rexmit+0xd4>)
 80551c8:	f003 ff34 	bl	8059034 <iprintf>

  if (pcb->unacked == NULL) {
 80551cc:	687b      	ldr	r3, [r7, #4]
 80551ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80551d0:	2b00      	cmp	r3, #0
 80551d2:	d102      	bne.n	80551da <tcp_rexmit+0x2a>
    return ERR_VAL;
 80551d4:	f06f 0305 	mvn.w	r3, #5
 80551d8:	e04c      	b.n	8055274 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80551da:	687b      	ldr	r3, [r7, #4]
 80551dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80551de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80551e0:	68b8      	ldr	r0, [r7, #8]
 80551e2:	f7ff fe2d 	bl	8054e40 <tcp_output_segment_busy>
 80551e6:	4603      	mov	r3, r0
 80551e8:	2b00      	cmp	r3, #0
 80551ea:	d002      	beq.n	80551f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80551ec:	f06f 0305 	mvn.w	r3, #5
 80551f0:	e040      	b.n	8055274 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80551f2:	68bb      	ldr	r3, [r7, #8]
 80551f4:	681a      	ldr	r2, [r3, #0]
 80551f6:	687b      	ldr	r3, [r7, #4]
 80551f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80551fa:	687b      	ldr	r3, [r7, #4]
 80551fc:	336c      	adds	r3, #108	; 0x6c
 80551fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8055200:	e002      	b.n	8055208 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8055202:	68fb      	ldr	r3, [r7, #12]
 8055204:	681b      	ldr	r3, [r3, #0]
 8055206:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8055208:	68fb      	ldr	r3, [r7, #12]
 805520a:	681b      	ldr	r3, [r3, #0]
 805520c:	2b00      	cmp	r3, #0
 805520e:	d011      	beq.n	8055234 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8055210:	68fb      	ldr	r3, [r7, #12]
 8055212:	681b      	ldr	r3, [r3, #0]
 8055214:	68db      	ldr	r3, [r3, #12]
 8055216:	685b      	ldr	r3, [r3, #4]
 8055218:	4618      	mov	r0, r3
 805521a:	f7f8 fc96 	bl	804db4a <lwip_htonl>
 805521e:	4604      	mov	r4, r0
 8055220:	68bb      	ldr	r3, [r7, #8]
 8055222:	68db      	ldr	r3, [r3, #12]
 8055224:	685b      	ldr	r3, [r3, #4]
 8055226:	4618      	mov	r0, r3
 8055228:	f7f8 fc8f 	bl	804db4a <lwip_htonl>
 805522c:	4603      	mov	r3, r0
 805522e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8055230:	2b00      	cmp	r3, #0
 8055232:	dbe6      	blt.n	8055202 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8055234:	68fb      	ldr	r3, [r7, #12]
 8055236:	681a      	ldr	r2, [r3, #0]
 8055238:	68bb      	ldr	r3, [r7, #8]
 805523a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 805523c:	68fb      	ldr	r3, [r7, #12]
 805523e:	68ba      	ldr	r2, [r7, #8]
 8055240:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8055242:	68bb      	ldr	r3, [r7, #8]
 8055244:	681b      	ldr	r3, [r3, #0]
 8055246:	2b00      	cmp	r3, #0
 8055248:	d103      	bne.n	8055252 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 805524a:	687b      	ldr	r3, [r7, #4]
 805524c:	2200      	movs	r2, #0
 805524e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8055252:	687b      	ldr	r3, [r7, #4]
 8055254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8055258:	2bff      	cmp	r3, #255	; 0xff
 805525a:	d007      	beq.n	805526c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 805525c:	687b      	ldr	r3, [r7, #4]
 805525e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8055262:	3301      	adds	r3, #1
 8055264:	b2da      	uxtb	r2, r3
 8055266:	687b      	ldr	r3, [r7, #4]
 8055268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 805526c:	687b      	ldr	r3, [r7, #4]
 805526e:	2200      	movs	r2, #0
 8055270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8055272:	2300      	movs	r3, #0
}
 8055274:	4618      	mov	r0, r3
 8055276:	3714      	adds	r7, #20
 8055278:	46bd      	mov	sp, r7
 805527a:	bd90      	pop	{r4, r7, pc}
 805527c:	0805c4c4 	.word	0x0805c4c4
 8055280:	0805cb64 	.word	0x0805cb64
 8055284:	0805c518 	.word	0x0805c518

08055288 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8055288:	b580      	push	{r7, lr}
 805528a:	b082      	sub	sp, #8
 805528c:	af00      	add	r7, sp, #0
 805528e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8055290:	687b      	ldr	r3, [r7, #4]
 8055292:	2b00      	cmp	r3, #0
 8055294:	d106      	bne.n	80552a4 <tcp_rexmit_fast+0x1c>
 8055296:	4b2a      	ldr	r3, [pc, #168]	; (8055340 <tcp_rexmit_fast+0xb8>)
 8055298:	f240 62f9 	movw	r2, #1785	; 0x6f9
 805529c:	4929      	ldr	r1, [pc, #164]	; (8055344 <tcp_rexmit_fast+0xbc>)
 805529e:	482a      	ldr	r0, [pc, #168]	; (8055348 <tcp_rexmit_fast+0xc0>)
 80552a0:	f003 fec8 	bl	8059034 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80552a4:	687b      	ldr	r3, [r7, #4]
 80552a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80552a8:	2b00      	cmp	r3, #0
 80552aa:	d045      	beq.n	8055338 <tcp_rexmit_fast+0xb0>
 80552ac:	687b      	ldr	r3, [r7, #4]
 80552ae:	8b5b      	ldrh	r3, [r3, #26]
 80552b0:	f003 0304 	and.w	r3, r3, #4
 80552b4:	2b00      	cmp	r3, #0
 80552b6:	d13f      	bne.n	8055338 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80552b8:	6878      	ldr	r0, [r7, #4]
 80552ba:	f7ff ff79 	bl	80551b0 <tcp_rexmit>
 80552be:	4603      	mov	r3, r0
 80552c0:	2b00      	cmp	r3, #0
 80552c2:	d139      	bne.n	8055338 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80552c4:	687b      	ldr	r3, [r7, #4]
 80552c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80552ca:	687b      	ldr	r3, [r7, #4]
 80552cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80552d0:	4293      	cmp	r3, r2
 80552d2:	bf28      	it	cs
 80552d4:	4613      	movcs	r3, r2
 80552d6:	b29b      	uxth	r3, r3
 80552d8:	2b00      	cmp	r3, #0
 80552da:	da00      	bge.n	80552de <tcp_rexmit_fast+0x56>
 80552dc:	3301      	adds	r3, #1
 80552de:	105b      	asrs	r3, r3, #1
 80552e0:	b29a      	uxth	r2, r3
 80552e2:	687b      	ldr	r3, [r7, #4]
 80552e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80552e8:	687b      	ldr	r3, [r7, #4]
 80552ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80552ee:	461a      	mov	r2, r3
 80552f0:	687b      	ldr	r3, [r7, #4]
 80552f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80552f4:	005b      	lsls	r3, r3, #1
 80552f6:	429a      	cmp	r2, r3
 80552f8:	d206      	bcs.n	8055308 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80552fa:	687b      	ldr	r3, [r7, #4]
 80552fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80552fe:	005b      	lsls	r3, r3, #1
 8055300:	b29a      	uxth	r2, r3
 8055302:	687b      	ldr	r3, [r7, #4]
 8055304:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8055308:	687b      	ldr	r3, [r7, #4]
 805530a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 805530e:	687b      	ldr	r3, [r7, #4]
 8055310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8055312:	4619      	mov	r1, r3
 8055314:	0049      	lsls	r1, r1, #1
 8055316:	440b      	add	r3, r1
 8055318:	b29b      	uxth	r3, r3
 805531a:	4413      	add	r3, r2
 805531c:	b29a      	uxth	r2, r3
 805531e:	687b      	ldr	r3, [r7, #4]
 8055320:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8055324:	687b      	ldr	r3, [r7, #4]
 8055326:	8b5b      	ldrh	r3, [r3, #26]
 8055328:	f043 0304 	orr.w	r3, r3, #4
 805532c:	b29a      	uxth	r2, r3
 805532e:	687b      	ldr	r3, [r7, #4]
 8055330:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8055332:	687b      	ldr	r3, [r7, #4]
 8055334:	2200      	movs	r2, #0
 8055336:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8055338:	bf00      	nop
 805533a:	3708      	adds	r7, #8
 805533c:	46bd      	mov	sp, r7
 805533e:	bd80      	pop	{r7, pc}
 8055340:	0805c4c4 	.word	0x0805c4c4
 8055344:	0805cb7c 	.word	0x0805cb7c
 8055348:	0805c518 	.word	0x0805c518

0805534c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 805534c:	b580      	push	{r7, lr}
 805534e:	b086      	sub	sp, #24
 8055350:	af00      	add	r7, sp, #0
 8055352:	60f8      	str	r0, [r7, #12]
 8055354:	607b      	str	r3, [r7, #4]
 8055356:	460b      	mov	r3, r1
 8055358:	817b      	strh	r3, [r7, #10]
 805535a:	4613      	mov	r3, r2
 805535c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 805535e:	897a      	ldrh	r2, [r7, #10]
 8055360:	893b      	ldrh	r3, [r7, #8]
 8055362:	4413      	add	r3, r2
 8055364:	b29b      	uxth	r3, r3
 8055366:	3314      	adds	r3, #20
 8055368:	b29b      	uxth	r3, r3
 805536a:	f44f 7220 	mov.w	r2, #640	; 0x280
 805536e:	4619      	mov	r1, r3
 8055370:	2022      	movs	r0, #34	; 0x22
 8055372:	f7f9 fce3 	bl	804ed3c <pbuf_alloc>
 8055376:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8055378:	697b      	ldr	r3, [r7, #20]
 805537a:	2b00      	cmp	r3, #0
 805537c:	d04d      	beq.n	805541a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 805537e:	897b      	ldrh	r3, [r7, #10]
 8055380:	3313      	adds	r3, #19
 8055382:	697a      	ldr	r2, [r7, #20]
 8055384:	8952      	ldrh	r2, [r2, #10]
 8055386:	4293      	cmp	r3, r2
 8055388:	db06      	blt.n	8055398 <tcp_output_alloc_header_common+0x4c>
 805538a:	4b26      	ldr	r3, [pc, #152]	; (8055424 <tcp_output_alloc_header_common+0xd8>)
 805538c:	f240 7223 	movw	r2, #1827	; 0x723
 8055390:	4925      	ldr	r1, [pc, #148]	; (8055428 <tcp_output_alloc_header_common+0xdc>)
 8055392:	4826      	ldr	r0, [pc, #152]	; (805542c <tcp_output_alloc_header_common+0xe0>)
 8055394:	f003 fe4e 	bl	8059034 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8055398:	697b      	ldr	r3, [r7, #20]
 805539a:	685b      	ldr	r3, [r3, #4]
 805539c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 805539e:	8c3b      	ldrh	r3, [r7, #32]
 80553a0:	4618      	mov	r0, r3
 80553a2:	f7f8 fbbd 	bl	804db20 <lwip_htons>
 80553a6:	4603      	mov	r3, r0
 80553a8:	461a      	mov	r2, r3
 80553aa:	693b      	ldr	r3, [r7, #16]
 80553ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80553ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80553b0:	4618      	mov	r0, r3
 80553b2:	f7f8 fbb5 	bl	804db20 <lwip_htons>
 80553b6:	4603      	mov	r3, r0
 80553b8:	461a      	mov	r2, r3
 80553ba:	693b      	ldr	r3, [r7, #16]
 80553bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80553be:	693b      	ldr	r3, [r7, #16]
 80553c0:	687a      	ldr	r2, [r7, #4]
 80553c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80553c4:	68f8      	ldr	r0, [r7, #12]
 80553c6:	f7f8 fbc0 	bl	804db4a <lwip_htonl>
 80553ca:	4602      	mov	r2, r0
 80553cc:	693b      	ldr	r3, [r7, #16]
 80553ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80553d0:	897b      	ldrh	r3, [r7, #10]
 80553d2:	089b      	lsrs	r3, r3, #2
 80553d4:	b29b      	uxth	r3, r3
 80553d6:	3305      	adds	r3, #5
 80553d8:	b29b      	uxth	r3, r3
 80553da:	031b      	lsls	r3, r3, #12
 80553dc:	b29a      	uxth	r2, r3
 80553de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80553e2:	b29b      	uxth	r3, r3
 80553e4:	4313      	orrs	r3, r2
 80553e6:	b29b      	uxth	r3, r3
 80553e8:	4618      	mov	r0, r3
 80553ea:	f7f8 fb99 	bl	804db20 <lwip_htons>
 80553ee:	4603      	mov	r3, r0
 80553f0:	461a      	mov	r2, r3
 80553f2:	693b      	ldr	r3, [r7, #16]
 80553f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80553f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80553f8:	4618      	mov	r0, r3
 80553fa:	f7f8 fb91 	bl	804db20 <lwip_htons>
 80553fe:	4603      	mov	r3, r0
 8055400:	461a      	mov	r2, r3
 8055402:	693b      	ldr	r3, [r7, #16]
 8055404:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8055406:	693b      	ldr	r3, [r7, #16]
 8055408:	2200      	movs	r2, #0
 805540a:	741a      	strb	r2, [r3, #16]
 805540c:	2200      	movs	r2, #0
 805540e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8055410:	693b      	ldr	r3, [r7, #16]
 8055412:	2200      	movs	r2, #0
 8055414:	749a      	strb	r2, [r3, #18]
 8055416:	2200      	movs	r2, #0
 8055418:	74da      	strb	r2, [r3, #19]
  }
  return p;
 805541a:	697b      	ldr	r3, [r7, #20]
}
 805541c:	4618      	mov	r0, r3
 805541e:	3718      	adds	r7, #24
 8055420:	46bd      	mov	sp, r7
 8055422:	bd80      	pop	{r7, pc}
 8055424:	0805c4c4 	.word	0x0805c4c4
 8055428:	0805cb9c 	.word	0x0805cb9c
 805542c:	0805c518 	.word	0x0805c518

08055430 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8055430:	b5b0      	push	{r4, r5, r7, lr}
 8055432:	b08a      	sub	sp, #40	; 0x28
 8055434:	af04      	add	r7, sp, #16
 8055436:	60f8      	str	r0, [r7, #12]
 8055438:	607b      	str	r3, [r7, #4]
 805543a:	460b      	mov	r3, r1
 805543c:	817b      	strh	r3, [r7, #10]
 805543e:	4613      	mov	r3, r2
 8055440:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8055442:	68fb      	ldr	r3, [r7, #12]
 8055444:	2b00      	cmp	r3, #0
 8055446:	d106      	bne.n	8055456 <tcp_output_alloc_header+0x26>
 8055448:	4b15      	ldr	r3, [pc, #84]	; (80554a0 <tcp_output_alloc_header+0x70>)
 805544a:	f240 7242 	movw	r2, #1858	; 0x742
 805544e:	4915      	ldr	r1, [pc, #84]	; (80554a4 <tcp_output_alloc_header+0x74>)
 8055450:	4815      	ldr	r0, [pc, #84]	; (80554a8 <tcp_output_alloc_header+0x78>)
 8055452:	f003 fdef 	bl	8059034 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8055456:	68fb      	ldr	r3, [r7, #12]
 8055458:	6a58      	ldr	r0, [r3, #36]	; 0x24
 805545a:	68fb      	ldr	r3, [r7, #12]
 805545c:	8adb      	ldrh	r3, [r3, #22]
 805545e:	68fa      	ldr	r2, [r7, #12]
 8055460:	8b12      	ldrh	r2, [r2, #24]
 8055462:	68f9      	ldr	r1, [r7, #12]
 8055464:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8055466:	893d      	ldrh	r5, [r7, #8]
 8055468:	897c      	ldrh	r4, [r7, #10]
 805546a:	9103      	str	r1, [sp, #12]
 805546c:	2110      	movs	r1, #16
 805546e:	9102      	str	r1, [sp, #8]
 8055470:	9201      	str	r2, [sp, #4]
 8055472:	9300      	str	r3, [sp, #0]
 8055474:	687b      	ldr	r3, [r7, #4]
 8055476:	462a      	mov	r2, r5
 8055478:	4621      	mov	r1, r4
 805547a:	f7ff ff67 	bl	805534c <tcp_output_alloc_header_common>
 805547e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8055480:	697b      	ldr	r3, [r7, #20]
 8055482:	2b00      	cmp	r3, #0
 8055484:	d006      	beq.n	8055494 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8055486:	68fb      	ldr	r3, [r7, #12]
 8055488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 805548a:	68fa      	ldr	r2, [r7, #12]
 805548c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 805548e:	441a      	add	r2, r3
 8055490:	68fb      	ldr	r3, [r7, #12]
 8055492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8055494:	697b      	ldr	r3, [r7, #20]
}
 8055496:	4618      	mov	r0, r3
 8055498:	3718      	adds	r7, #24
 805549a:	46bd      	mov	sp, r7
 805549c:	bdb0      	pop	{r4, r5, r7, pc}
 805549e:	bf00      	nop
 80554a0:	0805c4c4 	.word	0x0805c4c4
 80554a4:	0805cbcc 	.word	0x0805cbcc
 80554a8:	0805c518 	.word	0x0805c518

080554ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80554ac:	b580      	push	{r7, lr}
 80554ae:	b088      	sub	sp, #32
 80554b0:	af00      	add	r7, sp, #0
 80554b2:	60f8      	str	r0, [r7, #12]
 80554b4:	60b9      	str	r1, [r7, #8]
 80554b6:	4611      	mov	r1, r2
 80554b8:	461a      	mov	r2, r3
 80554ba:	460b      	mov	r3, r1
 80554bc:	71fb      	strb	r3, [r7, #7]
 80554be:	4613      	mov	r3, r2
 80554c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80554c2:	2300      	movs	r3, #0
 80554c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80554c6:	68bb      	ldr	r3, [r7, #8]
 80554c8:	2b00      	cmp	r3, #0
 80554ca:	d106      	bne.n	80554da <tcp_output_fill_options+0x2e>
 80554cc:	4b13      	ldr	r3, [pc, #76]	; (805551c <tcp_output_fill_options+0x70>)
 80554ce:	f240 7256 	movw	r2, #1878	; 0x756
 80554d2:	4913      	ldr	r1, [pc, #76]	; (8055520 <tcp_output_fill_options+0x74>)
 80554d4:	4813      	ldr	r0, [pc, #76]	; (8055524 <tcp_output_fill_options+0x78>)
 80554d6:	f003 fdad 	bl	8059034 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80554da:	68bb      	ldr	r3, [r7, #8]
 80554dc:	685b      	ldr	r3, [r3, #4]
 80554de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80554e0:	69bb      	ldr	r3, [r7, #24]
 80554e2:	3314      	adds	r3, #20
 80554e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80554e6:	69bb      	ldr	r3, [r7, #24]
 80554e8:	f103 0214 	add.w	r2, r3, #20
 80554ec:	8bfb      	ldrh	r3, [r7, #30]
 80554ee:	009b      	lsls	r3, r3, #2
 80554f0:	4619      	mov	r1, r3
 80554f2:	79fb      	ldrb	r3, [r7, #7]
 80554f4:	009b      	lsls	r3, r3, #2
 80554f6:	f003 0304 	and.w	r3, r3, #4
 80554fa:	440b      	add	r3, r1
 80554fc:	4413      	add	r3, r2
 80554fe:	697a      	ldr	r2, [r7, #20]
 8055500:	429a      	cmp	r2, r3
 8055502:	d006      	beq.n	8055512 <tcp_output_fill_options+0x66>
 8055504:	4b05      	ldr	r3, [pc, #20]	; (805551c <tcp_output_fill_options+0x70>)
 8055506:	f240 7275 	movw	r2, #1909	; 0x775
 805550a:	4907      	ldr	r1, [pc, #28]	; (8055528 <tcp_output_fill_options+0x7c>)
 805550c:	4805      	ldr	r0, [pc, #20]	; (8055524 <tcp_output_fill_options+0x78>)
 805550e:	f003 fd91 	bl	8059034 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8055512:	bf00      	nop
 8055514:	3720      	adds	r7, #32
 8055516:	46bd      	mov	sp, r7
 8055518:	bd80      	pop	{r7, pc}
 805551a:	bf00      	nop
 805551c:	0805c4c4 	.word	0x0805c4c4
 8055520:	0805cbf4 	.word	0x0805cbf4
 8055524:	0805c518 	.word	0x0805c518
 8055528:	0805caec 	.word	0x0805caec

0805552c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 805552c:	b580      	push	{r7, lr}
 805552e:	b08a      	sub	sp, #40	; 0x28
 8055530:	af04      	add	r7, sp, #16
 8055532:	60f8      	str	r0, [r7, #12]
 8055534:	60b9      	str	r1, [r7, #8]
 8055536:	607a      	str	r2, [r7, #4]
 8055538:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 805553a:	68bb      	ldr	r3, [r7, #8]
 805553c:	2b00      	cmp	r3, #0
 805553e:	d106      	bne.n	805554e <tcp_output_control_segment+0x22>
 8055540:	4b1c      	ldr	r3, [pc, #112]	; (80555b4 <tcp_output_control_segment+0x88>)
 8055542:	f240 7287 	movw	r2, #1927	; 0x787
 8055546:	491c      	ldr	r1, [pc, #112]	; (80555b8 <tcp_output_control_segment+0x8c>)
 8055548:	481c      	ldr	r0, [pc, #112]	; (80555bc <tcp_output_control_segment+0x90>)
 805554a:	f003 fd73 	bl	8059034 <iprintf>

  netif = tcp_route(pcb, src, dst);
 805554e:	683a      	ldr	r2, [r7, #0]
 8055550:	6879      	ldr	r1, [r7, #4]
 8055552:	68f8      	ldr	r0, [r7, #12]
 8055554:	f7fe fae8 	bl	8053b28 <tcp_route>
 8055558:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 805555a:	693b      	ldr	r3, [r7, #16]
 805555c:	2b00      	cmp	r3, #0
 805555e:	d102      	bne.n	8055566 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8055560:	23fc      	movs	r3, #252	; 0xfc
 8055562:	75fb      	strb	r3, [r7, #23]
 8055564:	e01c      	b.n	80555a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8055566:	68fb      	ldr	r3, [r7, #12]
 8055568:	2b00      	cmp	r3, #0
 805556a:	d006      	beq.n	805557a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 805556c:	68fb      	ldr	r3, [r7, #12]
 805556e:	7adb      	ldrb	r3, [r3, #11]
 8055570:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8055572:	68fb      	ldr	r3, [r7, #12]
 8055574:	7a9b      	ldrb	r3, [r3, #10]
 8055576:	757b      	strb	r3, [r7, #21]
 8055578:	e003      	b.n	8055582 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 805557a:	23ff      	movs	r3, #255	; 0xff
 805557c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 805557e:	2300      	movs	r3, #0
 8055580:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8055582:	7dba      	ldrb	r2, [r7, #22]
 8055584:	693b      	ldr	r3, [r7, #16]
 8055586:	9302      	str	r3, [sp, #8]
 8055588:	2306      	movs	r3, #6
 805558a:	9301      	str	r3, [sp, #4]
 805558c:	7d7b      	ldrb	r3, [r7, #21]
 805558e:	9300      	str	r3, [sp, #0]
 8055590:	4613      	mov	r3, r2
 8055592:	683a      	ldr	r2, [r7, #0]
 8055594:	6879      	ldr	r1, [r7, #4]
 8055596:	68b8      	ldr	r0, [r7, #8]
 8055598:	f002 f8e6 	bl	8057768 <ip4_output_if>
 805559c:	4603      	mov	r3, r0
 805559e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80555a0:	68b8      	ldr	r0, [r7, #8]
 80555a2:	f7f9 feaf 	bl	804f304 <pbuf_free>
  return err;
 80555a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80555aa:	4618      	mov	r0, r3
 80555ac:	3718      	adds	r7, #24
 80555ae:	46bd      	mov	sp, r7
 80555b0:	bd80      	pop	{r7, pc}
 80555b2:	bf00      	nop
 80555b4:	0805c4c4 	.word	0x0805c4c4
 80555b8:	0805cc1c 	.word	0x0805cc1c
 80555bc:	0805c518 	.word	0x0805c518

080555c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80555c0:	b590      	push	{r4, r7, lr}
 80555c2:	b08b      	sub	sp, #44	; 0x2c
 80555c4:	af04      	add	r7, sp, #16
 80555c6:	60f8      	str	r0, [r7, #12]
 80555c8:	60b9      	str	r1, [r7, #8]
 80555ca:	607a      	str	r2, [r7, #4]
 80555cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80555ce:	683b      	ldr	r3, [r7, #0]
 80555d0:	2b00      	cmp	r3, #0
 80555d2:	d106      	bne.n	80555e2 <tcp_rst+0x22>
 80555d4:	4b1f      	ldr	r3, [pc, #124]	; (8055654 <tcp_rst+0x94>)
 80555d6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80555da:	491f      	ldr	r1, [pc, #124]	; (8055658 <tcp_rst+0x98>)
 80555dc:	481f      	ldr	r0, [pc, #124]	; (805565c <tcp_rst+0x9c>)
 80555de:	f003 fd29 	bl	8059034 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80555e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80555e4:	2b00      	cmp	r3, #0
 80555e6:	d106      	bne.n	80555f6 <tcp_rst+0x36>
 80555e8:	4b1a      	ldr	r3, [pc, #104]	; (8055654 <tcp_rst+0x94>)
 80555ea:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80555ee:	491c      	ldr	r1, [pc, #112]	; (8055660 <tcp_rst+0xa0>)
 80555f0:	481a      	ldr	r0, [pc, #104]	; (805565c <tcp_rst+0x9c>)
 80555f2:	f003 fd1f 	bl	8059034 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80555f6:	2300      	movs	r3, #0
 80555f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80555fa:	f246 0308 	movw	r3, #24584	; 0x6008
 80555fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8055600:	7dfb      	ldrb	r3, [r7, #23]
 8055602:	b29c      	uxth	r4, r3
 8055604:	68b8      	ldr	r0, [r7, #8]
 8055606:	f7f8 faa0 	bl	804db4a <lwip_htonl>
 805560a:	4602      	mov	r2, r0
 805560c:	8abb      	ldrh	r3, [r7, #20]
 805560e:	9303      	str	r3, [sp, #12]
 8055610:	2314      	movs	r3, #20
 8055612:	9302      	str	r3, [sp, #8]
 8055614:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8055616:	9301      	str	r3, [sp, #4]
 8055618:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 805561a:	9300      	str	r3, [sp, #0]
 805561c:	4613      	mov	r3, r2
 805561e:	2200      	movs	r2, #0
 8055620:	4621      	mov	r1, r4
 8055622:	6878      	ldr	r0, [r7, #4]
 8055624:	f7ff fe92 	bl	805534c <tcp_output_alloc_header_common>
 8055628:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 805562a:	693b      	ldr	r3, [r7, #16]
 805562c:	2b00      	cmp	r3, #0
 805562e:	d00c      	beq.n	805564a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8055630:	7dfb      	ldrb	r3, [r7, #23]
 8055632:	2200      	movs	r2, #0
 8055634:	6939      	ldr	r1, [r7, #16]
 8055636:	68f8      	ldr	r0, [r7, #12]
 8055638:	f7ff ff38 	bl	80554ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 805563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805563e:	683a      	ldr	r2, [r7, #0]
 8055640:	6939      	ldr	r1, [r7, #16]
 8055642:	68f8      	ldr	r0, [r7, #12]
 8055644:	f7ff ff72 	bl	805552c <tcp_output_control_segment>
 8055648:	e000      	b.n	805564c <tcp_rst+0x8c>
    return;
 805564a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 805564c:	371c      	adds	r7, #28
 805564e:	46bd      	mov	sp, r7
 8055650:	bd90      	pop	{r4, r7, pc}
 8055652:	bf00      	nop
 8055654:	0805c4c4 	.word	0x0805c4c4
 8055658:	0805cc48 	.word	0x0805cc48
 805565c:	0805c518 	.word	0x0805c518
 8055660:	0805cc64 	.word	0x0805cc64

08055664 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8055664:	b590      	push	{r4, r7, lr}
 8055666:	b087      	sub	sp, #28
 8055668:	af00      	add	r7, sp, #0
 805566a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 805566c:	2300      	movs	r3, #0
 805566e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8055670:	2300      	movs	r3, #0
 8055672:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8055674:	687b      	ldr	r3, [r7, #4]
 8055676:	2b00      	cmp	r3, #0
 8055678:	d106      	bne.n	8055688 <tcp_send_empty_ack+0x24>
 805567a:	4b28      	ldr	r3, [pc, #160]	; (805571c <tcp_send_empty_ack+0xb8>)
 805567c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8055680:	4927      	ldr	r1, [pc, #156]	; (8055720 <tcp_send_empty_ack+0xbc>)
 8055682:	4828      	ldr	r0, [pc, #160]	; (8055724 <tcp_send_empty_ack+0xc0>)
 8055684:	f003 fcd6 	bl	8059034 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8055688:	7dfb      	ldrb	r3, [r7, #23]
 805568a:	009b      	lsls	r3, r3, #2
 805568c:	b2db      	uxtb	r3, r3
 805568e:	f003 0304 	and.w	r3, r3, #4
 8055692:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8055694:	7d7b      	ldrb	r3, [r7, #21]
 8055696:	b29c      	uxth	r4, r3
 8055698:	687b      	ldr	r3, [r7, #4]
 805569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 805569c:	4618      	mov	r0, r3
 805569e:	f7f8 fa54 	bl	804db4a <lwip_htonl>
 80556a2:	4603      	mov	r3, r0
 80556a4:	2200      	movs	r2, #0
 80556a6:	4621      	mov	r1, r4
 80556a8:	6878      	ldr	r0, [r7, #4]
 80556aa:	f7ff fec1 	bl	8055430 <tcp_output_alloc_header>
 80556ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80556b0:	693b      	ldr	r3, [r7, #16]
 80556b2:	2b00      	cmp	r3, #0
 80556b4:	d109      	bne.n	80556ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80556b6:	687b      	ldr	r3, [r7, #4]
 80556b8:	8b5b      	ldrh	r3, [r3, #26]
 80556ba:	f043 0303 	orr.w	r3, r3, #3
 80556be:	b29a      	uxth	r2, r3
 80556c0:	687b      	ldr	r3, [r7, #4]
 80556c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80556c4:	f06f 0301 	mvn.w	r3, #1
 80556c8:	e023      	b.n	8055712 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80556ca:	7dbb      	ldrb	r3, [r7, #22]
 80556cc:	7dfa      	ldrb	r2, [r7, #23]
 80556ce:	6939      	ldr	r1, [r7, #16]
 80556d0:	6878      	ldr	r0, [r7, #4]
 80556d2:	f7ff feeb 	bl	80554ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80556d6:	687a      	ldr	r2, [r7, #4]
 80556d8:	687b      	ldr	r3, [r7, #4]
 80556da:	3304      	adds	r3, #4
 80556dc:	6939      	ldr	r1, [r7, #16]
 80556de:	6878      	ldr	r0, [r7, #4]
 80556e0:	f7ff ff24 	bl	805552c <tcp_output_control_segment>
 80556e4:	4603      	mov	r3, r0
 80556e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80556e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80556ec:	2b00      	cmp	r3, #0
 80556ee:	d007      	beq.n	8055700 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80556f0:	687b      	ldr	r3, [r7, #4]
 80556f2:	8b5b      	ldrh	r3, [r3, #26]
 80556f4:	f043 0303 	orr.w	r3, r3, #3
 80556f8:	b29a      	uxth	r2, r3
 80556fa:	687b      	ldr	r3, [r7, #4]
 80556fc:	835a      	strh	r2, [r3, #26]
 80556fe:	e006      	b.n	805570e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8055700:	687b      	ldr	r3, [r7, #4]
 8055702:	8b5b      	ldrh	r3, [r3, #26]
 8055704:	f023 0303 	bic.w	r3, r3, #3
 8055708:	b29a      	uxth	r2, r3
 805570a:	687b      	ldr	r3, [r7, #4]
 805570c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 805570e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8055712:	4618      	mov	r0, r3
 8055714:	371c      	adds	r7, #28
 8055716:	46bd      	mov	sp, r7
 8055718:	bd90      	pop	{r4, r7, pc}
 805571a:	bf00      	nop
 805571c:	0805c4c4 	.word	0x0805c4c4
 8055720:	0805cc80 	.word	0x0805cc80
 8055724:	0805c518 	.word	0x0805c518

08055728 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8055728:	b590      	push	{r4, r7, lr}
 805572a:	b087      	sub	sp, #28
 805572c:	af00      	add	r7, sp, #0
 805572e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8055730:	2300      	movs	r3, #0
 8055732:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8055734:	687b      	ldr	r3, [r7, #4]
 8055736:	2b00      	cmp	r3, #0
 8055738:	d106      	bne.n	8055748 <tcp_keepalive+0x20>
 805573a:	4b18      	ldr	r3, [pc, #96]	; (805579c <tcp_keepalive+0x74>)
 805573c:	f640 0224 	movw	r2, #2084	; 0x824
 8055740:	4917      	ldr	r1, [pc, #92]	; (80557a0 <tcp_keepalive+0x78>)
 8055742:	4818      	ldr	r0, [pc, #96]	; (80557a4 <tcp_keepalive+0x7c>)
 8055744:	f003 fc76 	bl	8059034 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8055748:	7dfb      	ldrb	r3, [r7, #23]
 805574a:	b29c      	uxth	r4, r3
 805574c:	687b      	ldr	r3, [r7, #4]
 805574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8055750:	3b01      	subs	r3, #1
 8055752:	4618      	mov	r0, r3
 8055754:	f7f8 f9f9 	bl	804db4a <lwip_htonl>
 8055758:	4603      	mov	r3, r0
 805575a:	2200      	movs	r2, #0
 805575c:	4621      	mov	r1, r4
 805575e:	6878      	ldr	r0, [r7, #4]
 8055760:	f7ff fe66 	bl	8055430 <tcp_output_alloc_header>
 8055764:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8055766:	693b      	ldr	r3, [r7, #16]
 8055768:	2b00      	cmp	r3, #0
 805576a:	d102      	bne.n	8055772 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 805576c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8055770:	e010      	b.n	8055794 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8055772:	7dfb      	ldrb	r3, [r7, #23]
 8055774:	2200      	movs	r2, #0
 8055776:	6939      	ldr	r1, [r7, #16]
 8055778:	6878      	ldr	r0, [r7, #4]
 805577a:	f7ff fe97 	bl	80554ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 805577e:	687a      	ldr	r2, [r7, #4]
 8055780:	687b      	ldr	r3, [r7, #4]
 8055782:	3304      	adds	r3, #4
 8055784:	6939      	ldr	r1, [r7, #16]
 8055786:	6878      	ldr	r0, [r7, #4]
 8055788:	f7ff fed0 	bl	805552c <tcp_output_control_segment>
 805578c:	4603      	mov	r3, r0
 805578e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8055790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8055794:	4618      	mov	r0, r3
 8055796:	371c      	adds	r7, #28
 8055798:	46bd      	mov	sp, r7
 805579a:	bd90      	pop	{r4, r7, pc}
 805579c:	0805c4c4 	.word	0x0805c4c4
 80557a0:	0805cca0 	.word	0x0805cca0
 80557a4:	0805c518 	.word	0x0805c518

080557a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80557a8:	b590      	push	{r4, r7, lr}
 80557aa:	b08b      	sub	sp, #44	; 0x2c
 80557ac:	af00      	add	r7, sp, #0
 80557ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80557b0:	2300      	movs	r3, #0
 80557b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80557b6:	687b      	ldr	r3, [r7, #4]
 80557b8:	2b00      	cmp	r3, #0
 80557ba:	d106      	bne.n	80557ca <tcp_zero_window_probe+0x22>
 80557bc:	4b4c      	ldr	r3, [pc, #304]	; (80558f0 <tcp_zero_window_probe+0x148>)
 80557be:	f640 024f 	movw	r2, #2127	; 0x84f
 80557c2:	494c      	ldr	r1, [pc, #304]	; (80558f4 <tcp_zero_window_probe+0x14c>)
 80557c4:	484c      	ldr	r0, [pc, #304]	; (80558f8 <tcp_zero_window_probe+0x150>)
 80557c6:	f003 fc35 	bl	8059034 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80557ca:	687b      	ldr	r3, [r7, #4]
 80557cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80557ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80557d0:	6a3b      	ldr	r3, [r7, #32]
 80557d2:	2b00      	cmp	r3, #0
 80557d4:	d101      	bne.n	80557da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80557d6:	2300      	movs	r3, #0
 80557d8:	e086      	b.n	80558e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80557da:	687b      	ldr	r3, [r7, #4]
 80557dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80557e0:	2bff      	cmp	r3, #255	; 0xff
 80557e2:	d007      	beq.n	80557f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80557e4:	687b      	ldr	r3, [r7, #4]
 80557e6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80557ea:	3301      	adds	r3, #1
 80557ec:	b2da      	uxtb	r2, r3
 80557ee:	687b      	ldr	r3, [r7, #4]
 80557f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80557f4:	6a3b      	ldr	r3, [r7, #32]
 80557f6:	68db      	ldr	r3, [r3, #12]
 80557f8:	899b      	ldrh	r3, [r3, #12]
 80557fa:	b29b      	uxth	r3, r3
 80557fc:	4618      	mov	r0, r3
 80557fe:	f7f8 f98f 	bl	804db20 <lwip_htons>
 8055802:	4603      	mov	r3, r0
 8055804:	b2db      	uxtb	r3, r3
 8055806:	f003 0301 	and.w	r3, r3, #1
 805580a:	2b00      	cmp	r3, #0
 805580c:	d005      	beq.n	805581a <tcp_zero_window_probe+0x72>
 805580e:	6a3b      	ldr	r3, [r7, #32]
 8055810:	891b      	ldrh	r3, [r3, #8]
 8055812:	2b00      	cmp	r3, #0
 8055814:	d101      	bne.n	805581a <tcp_zero_window_probe+0x72>
 8055816:	2301      	movs	r3, #1
 8055818:	e000      	b.n	805581c <tcp_zero_window_probe+0x74>
 805581a:	2300      	movs	r3, #0
 805581c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 805581e:	7ffb      	ldrb	r3, [r7, #31]
 8055820:	2b00      	cmp	r3, #0
 8055822:	bf0c      	ite	eq
 8055824:	2301      	moveq	r3, #1
 8055826:	2300      	movne	r3, #0
 8055828:	b2db      	uxtb	r3, r3
 805582a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 805582c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8055830:	b299      	uxth	r1, r3
 8055832:	6a3b      	ldr	r3, [r7, #32]
 8055834:	68db      	ldr	r3, [r3, #12]
 8055836:	685b      	ldr	r3, [r3, #4]
 8055838:	8bba      	ldrh	r2, [r7, #28]
 805583a:	6878      	ldr	r0, [r7, #4]
 805583c:	f7ff fdf8 	bl	8055430 <tcp_output_alloc_header>
 8055840:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8055842:	69bb      	ldr	r3, [r7, #24]
 8055844:	2b00      	cmp	r3, #0
 8055846:	d102      	bne.n	805584e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8055848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805584c:	e04c      	b.n	80558e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 805584e:	69bb      	ldr	r3, [r7, #24]
 8055850:	685b      	ldr	r3, [r3, #4]
 8055852:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8055854:	7ffb      	ldrb	r3, [r7, #31]
 8055856:	2b00      	cmp	r3, #0
 8055858:	d011      	beq.n	805587e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 805585a:	697b      	ldr	r3, [r7, #20]
 805585c:	899b      	ldrh	r3, [r3, #12]
 805585e:	b29b      	uxth	r3, r3
 8055860:	b21b      	sxth	r3, r3
 8055862:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8055866:	b21c      	sxth	r4, r3
 8055868:	2011      	movs	r0, #17
 805586a:	f7f8 f959 	bl	804db20 <lwip_htons>
 805586e:	4603      	mov	r3, r0
 8055870:	b21b      	sxth	r3, r3
 8055872:	4323      	orrs	r3, r4
 8055874:	b21b      	sxth	r3, r3
 8055876:	b29a      	uxth	r2, r3
 8055878:	697b      	ldr	r3, [r7, #20]
 805587a:	819a      	strh	r2, [r3, #12]
 805587c:	e010      	b.n	80558a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 805587e:	69bb      	ldr	r3, [r7, #24]
 8055880:	685b      	ldr	r3, [r3, #4]
 8055882:	3314      	adds	r3, #20
 8055884:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8055886:	6a3b      	ldr	r3, [r7, #32]
 8055888:	6858      	ldr	r0, [r3, #4]
 805588a:	6a3b      	ldr	r3, [r7, #32]
 805588c:	685b      	ldr	r3, [r3, #4]
 805588e:	891a      	ldrh	r2, [r3, #8]
 8055890:	6a3b      	ldr	r3, [r7, #32]
 8055892:	891b      	ldrh	r3, [r3, #8]
 8055894:	1ad3      	subs	r3, r2, r3
 8055896:	b29b      	uxth	r3, r3
 8055898:	2201      	movs	r2, #1
 805589a:	6939      	ldr	r1, [r7, #16]
 805589c:	f7f9 ff28 	bl	804f6f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80558a0:	6a3b      	ldr	r3, [r7, #32]
 80558a2:	68db      	ldr	r3, [r3, #12]
 80558a4:	685b      	ldr	r3, [r3, #4]
 80558a6:	4618      	mov	r0, r3
 80558a8:	f7f8 f94f 	bl	804db4a <lwip_htonl>
 80558ac:	4603      	mov	r3, r0
 80558ae:	3301      	adds	r3, #1
 80558b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80558b2:	687b      	ldr	r3, [r7, #4]
 80558b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80558b6:	68fb      	ldr	r3, [r7, #12]
 80558b8:	1ad3      	subs	r3, r2, r3
 80558ba:	2b00      	cmp	r3, #0
 80558bc:	da02      	bge.n	80558c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80558be:	687b      	ldr	r3, [r7, #4]
 80558c0:	68fa      	ldr	r2, [r7, #12]
 80558c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80558c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80558c8:	2200      	movs	r2, #0
 80558ca:	69b9      	ldr	r1, [r7, #24]
 80558cc:	6878      	ldr	r0, [r7, #4]
 80558ce:	f7ff fded 	bl	80554ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80558d2:	687a      	ldr	r2, [r7, #4]
 80558d4:	687b      	ldr	r3, [r7, #4]
 80558d6:	3304      	adds	r3, #4
 80558d8:	69b9      	ldr	r1, [r7, #24]
 80558da:	6878      	ldr	r0, [r7, #4]
 80558dc:	f7ff fe26 	bl	805552c <tcp_output_control_segment>
 80558e0:	4603      	mov	r3, r0
 80558e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80558e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80558e8:	4618      	mov	r0, r3
 80558ea:	372c      	adds	r7, #44	; 0x2c
 80558ec:	46bd      	mov	sp, r7
 80558ee:	bd90      	pop	{r4, r7, pc}
 80558f0:	0805c4c4 	.word	0x0805c4c4
 80558f4:	0805ccbc 	.word	0x0805ccbc
 80558f8:	0805c518 	.word	0x0805c518

080558fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80558fc:	b580      	push	{r7, lr}
 80558fe:	b082      	sub	sp, #8
 8055900:	af00      	add	r7, sp, #0
 8055902:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8055904:	f7f9 ffe2 	bl	804f8cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8055908:	4b0a      	ldr	r3, [pc, #40]	; (8055934 <tcpip_tcp_timer+0x38>)
 805590a:	681b      	ldr	r3, [r3, #0]
 805590c:	2b00      	cmp	r3, #0
 805590e:	d103      	bne.n	8055918 <tcpip_tcp_timer+0x1c>
 8055910:	4b09      	ldr	r3, [pc, #36]	; (8055938 <tcpip_tcp_timer+0x3c>)
 8055912:	681b      	ldr	r3, [r3, #0]
 8055914:	2b00      	cmp	r3, #0
 8055916:	d005      	beq.n	8055924 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8055918:	2200      	movs	r2, #0
 805591a:	4908      	ldr	r1, [pc, #32]	; (805593c <tcpip_tcp_timer+0x40>)
 805591c:	20fa      	movs	r0, #250	; 0xfa
 805591e:	f000 f8f3 	bl	8055b08 <sys_timeout>
 8055922:	e003      	b.n	805592c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8055924:	4b06      	ldr	r3, [pc, #24]	; (8055940 <tcpip_tcp_timer+0x44>)
 8055926:	2200      	movs	r2, #0
 8055928:	601a      	str	r2, [r3, #0]
  }
}
 805592a:	bf00      	nop
 805592c:	bf00      	nop
 805592e:	3708      	adds	r7, #8
 8055930:	46bd      	mov	sp, r7
 8055932:	bd80      	pop	{r7, pc}
 8055934:	2000b5d8 	.word	0x2000b5d8
 8055938:	2000b5dc 	.word	0x2000b5dc
 805593c:	080558fd 	.word	0x080558fd
 8055940:	2000b624 	.word	0x2000b624

08055944 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8055944:	b580      	push	{r7, lr}
 8055946:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8055948:	4b0a      	ldr	r3, [pc, #40]	; (8055974 <tcp_timer_needed+0x30>)
 805594a:	681b      	ldr	r3, [r3, #0]
 805594c:	2b00      	cmp	r3, #0
 805594e:	d10f      	bne.n	8055970 <tcp_timer_needed+0x2c>
 8055950:	4b09      	ldr	r3, [pc, #36]	; (8055978 <tcp_timer_needed+0x34>)
 8055952:	681b      	ldr	r3, [r3, #0]
 8055954:	2b00      	cmp	r3, #0
 8055956:	d103      	bne.n	8055960 <tcp_timer_needed+0x1c>
 8055958:	4b08      	ldr	r3, [pc, #32]	; (805597c <tcp_timer_needed+0x38>)
 805595a:	681b      	ldr	r3, [r3, #0]
 805595c:	2b00      	cmp	r3, #0
 805595e:	d007      	beq.n	8055970 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8055960:	4b04      	ldr	r3, [pc, #16]	; (8055974 <tcp_timer_needed+0x30>)
 8055962:	2201      	movs	r2, #1
 8055964:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8055966:	2200      	movs	r2, #0
 8055968:	4905      	ldr	r1, [pc, #20]	; (8055980 <tcp_timer_needed+0x3c>)
 805596a:	20fa      	movs	r0, #250	; 0xfa
 805596c:	f000 f8cc 	bl	8055b08 <sys_timeout>
  }
}
 8055970:	bf00      	nop
 8055972:	bd80      	pop	{r7, pc}
 8055974:	2000b624 	.word	0x2000b624
 8055978:	2000b5d8 	.word	0x2000b5d8
 805597c:	2000b5dc 	.word	0x2000b5dc
 8055980:	080558fd 	.word	0x080558fd

08055984 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8055984:	b580      	push	{r7, lr}
 8055986:	b086      	sub	sp, #24
 8055988:	af00      	add	r7, sp, #0
 805598a:	60f8      	str	r0, [r7, #12]
 805598c:	60b9      	str	r1, [r7, #8]
 805598e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8055990:	200a      	movs	r0, #10
 8055992:	f7f8 fd9d 	bl	804e4d0 <memp_malloc>
 8055996:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8055998:	693b      	ldr	r3, [r7, #16]
 805599a:	2b00      	cmp	r3, #0
 805599c:	d109      	bne.n	80559b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 805599e:	693b      	ldr	r3, [r7, #16]
 80559a0:	2b00      	cmp	r3, #0
 80559a2:	d151      	bne.n	8055a48 <sys_timeout_abs+0xc4>
 80559a4:	4b2a      	ldr	r3, [pc, #168]	; (8055a50 <sys_timeout_abs+0xcc>)
 80559a6:	22be      	movs	r2, #190	; 0xbe
 80559a8:	492a      	ldr	r1, [pc, #168]	; (8055a54 <sys_timeout_abs+0xd0>)
 80559aa:	482b      	ldr	r0, [pc, #172]	; (8055a58 <sys_timeout_abs+0xd4>)
 80559ac:	f003 fb42 	bl	8059034 <iprintf>
    return;
 80559b0:	e04a      	b.n	8055a48 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80559b2:	693b      	ldr	r3, [r7, #16]
 80559b4:	2200      	movs	r2, #0
 80559b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80559b8:	693b      	ldr	r3, [r7, #16]
 80559ba:	68ba      	ldr	r2, [r7, #8]
 80559bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80559be:	693b      	ldr	r3, [r7, #16]
 80559c0:	687a      	ldr	r2, [r7, #4]
 80559c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80559c4:	693b      	ldr	r3, [r7, #16]
 80559c6:	68fa      	ldr	r2, [r7, #12]
 80559c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80559ca:	4b24      	ldr	r3, [pc, #144]	; (8055a5c <sys_timeout_abs+0xd8>)
 80559cc:	681b      	ldr	r3, [r3, #0]
 80559ce:	2b00      	cmp	r3, #0
 80559d0:	d103      	bne.n	80559da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80559d2:	4a22      	ldr	r2, [pc, #136]	; (8055a5c <sys_timeout_abs+0xd8>)
 80559d4:	693b      	ldr	r3, [r7, #16]
 80559d6:	6013      	str	r3, [r2, #0]
    return;
 80559d8:	e037      	b.n	8055a4a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80559da:	693b      	ldr	r3, [r7, #16]
 80559dc:	685a      	ldr	r2, [r3, #4]
 80559de:	4b1f      	ldr	r3, [pc, #124]	; (8055a5c <sys_timeout_abs+0xd8>)
 80559e0:	681b      	ldr	r3, [r3, #0]
 80559e2:	685b      	ldr	r3, [r3, #4]
 80559e4:	1ad3      	subs	r3, r2, r3
 80559e6:	0fdb      	lsrs	r3, r3, #31
 80559e8:	f003 0301 	and.w	r3, r3, #1
 80559ec:	b2db      	uxtb	r3, r3
 80559ee:	2b00      	cmp	r3, #0
 80559f0:	d007      	beq.n	8055a02 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80559f2:	4b1a      	ldr	r3, [pc, #104]	; (8055a5c <sys_timeout_abs+0xd8>)
 80559f4:	681a      	ldr	r2, [r3, #0]
 80559f6:	693b      	ldr	r3, [r7, #16]
 80559f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80559fa:	4a18      	ldr	r2, [pc, #96]	; (8055a5c <sys_timeout_abs+0xd8>)
 80559fc:	693b      	ldr	r3, [r7, #16]
 80559fe:	6013      	str	r3, [r2, #0]
 8055a00:	e023      	b.n	8055a4a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8055a02:	4b16      	ldr	r3, [pc, #88]	; (8055a5c <sys_timeout_abs+0xd8>)
 8055a04:	681b      	ldr	r3, [r3, #0]
 8055a06:	617b      	str	r3, [r7, #20]
 8055a08:	e01a      	b.n	8055a40 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8055a0a:	697b      	ldr	r3, [r7, #20]
 8055a0c:	681b      	ldr	r3, [r3, #0]
 8055a0e:	2b00      	cmp	r3, #0
 8055a10:	d00b      	beq.n	8055a2a <sys_timeout_abs+0xa6>
 8055a12:	693b      	ldr	r3, [r7, #16]
 8055a14:	685a      	ldr	r2, [r3, #4]
 8055a16:	697b      	ldr	r3, [r7, #20]
 8055a18:	681b      	ldr	r3, [r3, #0]
 8055a1a:	685b      	ldr	r3, [r3, #4]
 8055a1c:	1ad3      	subs	r3, r2, r3
 8055a1e:	0fdb      	lsrs	r3, r3, #31
 8055a20:	f003 0301 	and.w	r3, r3, #1
 8055a24:	b2db      	uxtb	r3, r3
 8055a26:	2b00      	cmp	r3, #0
 8055a28:	d007      	beq.n	8055a3a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8055a2a:	697b      	ldr	r3, [r7, #20]
 8055a2c:	681a      	ldr	r2, [r3, #0]
 8055a2e:	693b      	ldr	r3, [r7, #16]
 8055a30:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8055a32:	697b      	ldr	r3, [r7, #20]
 8055a34:	693a      	ldr	r2, [r7, #16]
 8055a36:	601a      	str	r2, [r3, #0]
        break;
 8055a38:	e007      	b.n	8055a4a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8055a3a:	697b      	ldr	r3, [r7, #20]
 8055a3c:	681b      	ldr	r3, [r3, #0]
 8055a3e:	617b      	str	r3, [r7, #20]
 8055a40:	697b      	ldr	r3, [r7, #20]
 8055a42:	2b00      	cmp	r3, #0
 8055a44:	d1e1      	bne.n	8055a0a <sys_timeout_abs+0x86>
 8055a46:	e000      	b.n	8055a4a <sys_timeout_abs+0xc6>
    return;
 8055a48:	bf00      	nop
      }
    }
  }
}
 8055a4a:	3718      	adds	r7, #24
 8055a4c:	46bd      	mov	sp, r7
 8055a4e:	bd80      	pop	{r7, pc}
 8055a50:	0805cce0 	.word	0x0805cce0
 8055a54:	0805cd14 	.word	0x0805cd14
 8055a58:	0805cd54 	.word	0x0805cd54
 8055a5c:	2000b61c 	.word	0x2000b61c

08055a60 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8055a60:	b580      	push	{r7, lr}
 8055a62:	b086      	sub	sp, #24
 8055a64:	af00      	add	r7, sp, #0
 8055a66:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8055a68:	687b      	ldr	r3, [r7, #4]
 8055a6a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8055a6c:	697b      	ldr	r3, [r7, #20]
 8055a6e:	685b      	ldr	r3, [r3, #4]
 8055a70:	4798      	blx	r3

  now = sys_now();
 8055a72:	f7f2 fc6f 	bl	8048354 <sys_now>
 8055a76:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8055a78:	697b      	ldr	r3, [r7, #20]
 8055a7a:	681a      	ldr	r2, [r3, #0]
 8055a7c:	4b0f      	ldr	r3, [pc, #60]	; (8055abc <lwip_cyclic_timer+0x5c>)
 8055a7e:	681b      	ldr	r3, [r3, #0]
 8055a80:	4413      	add	r3, r2
 8055a82:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8055a84:	68fa      	ldr	r2, [r7, #12]
 8055a86:	693b      	ldr	r3, [r7, #16]
 8055a88:	1ad3      	subs	r3, r2, r3
 8055a8a:	0fdb      	lsrs	r3, r3, #31
 8055a8c:	f003 0301 	and.w	r3, r3, #1
 8055a90:	b2db      	uxtb	r3, r3
 8055a92:	2b00      	cmp	r3, #0
 8055a94:	d009      	beq.n	8055aaa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8055a96:	697b      	ldr	r3, [r7, #20]
 8055a98:	681a      	ldr	r2, [r3, #0]
 8055a9a:	693b      	ldr	r3, [r7, #16]
 8055a9c:	4413      	add	r3, r2
 8055a9e:	687a      	ldr	r2, [r7, #4]
 8055aa0:	4907      	ldr	r1, [pc, #28]	; (8055ac0 <lwip_cyclic_timer+0x60>)
 8055aa2:	4618      	mov	r0, r3
 8055aa4:	f7ff ff6e 	bl	8055984 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8055aa8:	e004      	b.n	8055ab4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8055aaa:	687a      	ldr	r2, [r7, #4]
 8055aac:	4904      	ldr	r1, [pc, #16]	; (8055ac0 <lwip_cyclic_timer+0x60>)
 8055aae:	68f8      	ldr	r0, [r7, #12]
 8055ab0:	f7ff ff68 	bl	8055984 <sys_timeout_abs>
}
 8055ab4:	bf00      	nop
 8055ab6:	3718      	adds	r7, #24
 8055ab8:	46bd      	mov	sp, r7
 8055aba:	bd80      	pop	{r7, pc}
 8055abc:	2000b620 	.word	0x2000b620
 8055ac0:	08055a61 	.word	0x08055a61

08055ac4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8055ac4:	b580      	push	{r7, lr}
 8055ac6:	b082      	sub	sp, #8
 8055ac8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8055aca:	2301      	movs	r3, #1
 8055acc:	607b      	str	r3, [r7, #4]
 8055ace:	e00e      	b.n	8055aee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8055ad0:	4a0b      	ldr	r2, [pc, #44]	; (8055b00 <sys_timeouts_init+0x3c>)
 8055ad2:	687b      	ldr	r3, [r7, #4]
 8055ad4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8055ad8:	687b      	ldr	r3, [r7, #4]
 8055ada:	00db      	lsls	r3, r3, #3
 8055adc:	4a08      	ldr	r2, [pc, #32]	; (8055b00 <sys_timeouts_init+0x3c>)
 8055ade:	4413      	add	r3, r2
 8055ae0:	461a      	mov	r2, r3
 8055ae2:	4908      	ldr	r1, [pc, #32]	; (8055b04 <sys_timeouts_init+0x40>)
 8055ae4:	f000 f810 	bl	8055b08 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8055ae8:	687b      	ldr	r3, [r7, #4]
 8055aea:	3301      	adds	r3, #1
 8055aec:	607b      	str	r3, [r7, #4]
 8055aee:	687b      	ldr	r3, [r7, #4]
 8055af0:	2b02      	cmp	r3, #2
 8055af2:	d9ed      	bls.n	8055ad0 <sys_timeouts_init+0xc>
  }
}
 8055af4:	bf00      	nop
 8055af6:	bf00      	nop
 8055af8:	3708      	adds	r7, #8
 8055afa:	46bd      	mov	sp, r7
 8055afc:	bd80      	pop	{r7, pc}
 8055afe:	bf00      	nop
 8055b00:	0805d910 	.word	0x0805d910
 8055b04:	08055a61 	.word	0x08055a61

08055b08 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8055b08:	b580      	push	{r7, lr}
 8055b0a:	b086      	sub	sp, #24
 8055b0c:	af00      	add	r7, sp, #0
 8055b0e:	60f8      	str	r0, [r7, #12]
 8055b10:	60b9      	str	r1, [r7, #8]
 8055b12:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8055b14:	68fb      	ldr	r3, [r7, #12]
 8055b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8055b1a:	d306      	bcc.n	8055b2a <sys_timeout+0x22>
 8055b1c:	4b0a      	ldr	r3, [pc, #40]	; (8055b48 <sys_timeout+0x40>)
 8055b1e:	f240 1229 	movw	r2, #297	; 0x129
 8055b22:	490a      	ldr	r1, [pc, #40]	; (8055b4c <sys_timeout+0x44>)
 8055b24:	480a      	ldr	r0, [pc, #40]	; (8055b50 <sys_timeout+0x48>)
 8055b26:	f003 fa85 	bl	8059034 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8055b2a:	f7f2 fc13 	bl	8048354 <sys_now>
 8055b2e:	4602      	mov	r2, r0
 8055b30:	68fb      	ldr	r3, [r7, #12]
 8055b32:	4413      	add	r3, r2
 8055b34:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8055b36:	687a      	ldr	r2, [r7, #4]
 8055b38:	68b9      	ldr	r1, [r7, #8]
 8055b3a:	6978      	ldr	r0, [r7, #20]
 8055b3c:	f7ff ff22 	bl	8055984 <sys_timeout_abs>
#endif
}
 8055b40:	bf00      	nop
 8055b42:	3718      	adds	r7, #24
 8055b44:	46bd      	mov	sp, r7
 8055b46:	bd80      	pop	{r7, pc}
 8055b48:	0805cce0 	.word	0x0805cce0
 8055b4c:	0805cd7c 	.word	0x0805cd7c
 8055b50:	0805cd54 	.word	0x0805cd54

08055b54 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8055b54:	b580      	push	{r7, lr}
 8055b56:	b084      	sub	sp, #16
 8055b58:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8055b5a:	f7f2 fbfb 	bl	8048354 <sys_now>
 8055b5e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8055b60:	4b17      	ldr	r3, [pc, #92]	; (8055bc0 <sys_check_timeouts+0x6c>)
 8055b62:	681b      	ldr	r3, [r3, #0]
 8055b64:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8055b66:	68bb      	ldr	r3, [r7, #8]
 8055b68:	2b00      	cmp	r3, #0
 8055b6a:	d022      	beq.n	8055bb2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8055b6c:	68bb      	ldr	r3, [r7, #8]
 8055b6e:	685b      	ldr	r3, [r3, #4]
 8055b70:	68fa      	ldr	r2, [r7, #12]
 8055b72:	1ad3      	subs	r3, r2, r3
 8055b74:	0fdb      	lsrs	r3, r3, #31
 8055b76:	f003 0301 	and.w	r3, r3, #1
 8055b7a:	b2db      	uxtb	r3, r3
 8055b7c:	2b00      	cmp	r3, #0
 8055b7e:	d11a      	bne.n	8055bb6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8055b80:	68bb      	ldr	r3, [r7, #8]
 8055b82:	681b      	ldr	r3, [r3, #0]
 8055b84:	4a0e      	ldr	r2, [pc, #56]	; (8055bc0 <sys_check_timeouts+0x6c>)
 8055b86:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8055b88:	68bb      	ldr	r3, [r7, #8]
 8055b8a:	689b      	ldr	r3, [r3, #8]
 8055b8c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8055b8e:	68bb      	ldr	r3, [r7, #8]
 8055b90:	68db      	ldr	r3, [r3, #12]
 8055b92:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8055b94:	68bb      	ldr	r3, [r7, #8]
 8055b96:	685b      	ldr	r3, [r3, #4]
 8055b98:	4a0a      	ldr	r2, [pc, #40]	; (8055bc4 <sys_check_timeouts+0x70>)
 8055b9a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8055b9c:	68b9      	ldr	r1, [r7, #8]
 8055b9e:	200a      	movs	r0, #10
 8055ba0:	f7f8 fd0c 	bl	804e5bc <memp_free>
    if (handler != NULL) {
 8055ba4:	687b      	ldr	r3, [r7, #4]
 8055ba6:	2b00      	cmp	r3, #0
 8055ba8:	d0da      	beq.n	8055b60 <sys_check_timeouts+0xc>
      handler(arg);
 8055baa:	687b      	ldr	r3, [r7, #4]
 8055bac:	6838      	ldr	r0, [r7, #0]
 8055bae:	4798      	blx	r3
  do {
 8055bb0:	e7d6      	b.n	8055b60 <sys_check_timeouts+0xc>
      return;
 8055bb2:	bf00      	nop
 8055bb4:	e000      	b.n	8055bb8 <sys_check_timeouts+0x64>
      return;
 8055bb6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8055bb8:	3710      	adds	r7, #16
 8055bba:	46bd      	mov	sp, r7
 8055bbc:	bd80      	pop	{r7, pc}
 8055bbe:	bf00      	nop
 8055bc0:	2000b61c 	.word	0x2000b61c
 8055bc4:	2000b620 	.word	0x2000b620

08055bc8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8055bc8:	b580      	push	{r7, lr}
 8055bca:	b082      	sub	sp, #8
 8055bcc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8055bce:	4b16      	ldr	r3, [pc, #88]	; (8055c28 <sys_timeouts_sleeptime+0x60>)
 8055bd0:	681b      	ldr	r3, [r3, #0]
 8055bd2:	2b00      	cmp	r3, #0
 8055bd4:	d102      	bne.n	8055bdc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8055bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8055bda:	e020      	b.n	8055c1e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8055bdc:	f7f2 fbba 	bl	8048354 <sys_now>
 8055be0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8055be2:	4b11      	ldr	r3, [pc, #68]	; (8055c28 <sys_timeouts_sleeptime+0x60>)
 8055be4:	681b      	ldr	r3, [r3, #0]
 8055be6:	685a      	ldr	r2, [r3, #4]
 8055be8:	687b      	ldr	r3, [r7, #4]
 8055bea:	1ad3      	subs	r3, r2, r3
 8055bec:	0fdb      	lsrs	r3, r3, #31
 8055bee:	f003 0301 	and.w	r3, r3, #1
 8055bf2:	b2db      	uxtb	r3, r3
 8055bf4:	2b00      	cmp	r3, #0
 8055bf6:	d001      	beq.n	8055bfc <sys_timeouts_sleeptime+0x34>
    return 0;
 8055bf8:	2300      	movs	r3, #0
 8055bfa:	e010      	b.n	8055c1e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8055bfc:	4b0a      	ldr	r3, [pc, #40]	; (8055c28 <sys_timeouts_sleeptime+0x60>)
 8055bfe:	681b      	ldr	r3, [r3, #0]
 8055c00:	685a      	ldr	r2, [r3, #4]
 8055c02:	687b      	ldr	r3, [r7, #4]
 8055c04:	1ad3      	subs	r3, r2, r3
 8055c06:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8055c08:	683b      	ldr	r3, [r7, #0]
 8055c0a:	2b00      	cmp	r3, #0
 8055c0c:	da06      	bge.n	8055c1c <sys_timeouts_sleeptime+0x54>
 8055c0e:	4b07      	ldr	r3, [pc, #28]	; (8055c2c <sys_timeouts_sleeptime+0x64>)
 8055c10:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8055c14:	4906      	ldr	r1, [pc, #24]	; (8055c30 <sys_timeouts_sleeptime+0x68>)
 8055c16:	4807      	ldr	r0, [pc, #28]	; (8055c34 <sys_timeouts_sleeptime+0x6c>)
 8055c18:	f003 fa0c 	bl	8059034 <iprintf>
    return ret;
 8055c1c:	683b      	ldr	r3, [r7, #0]
  }
}
 8055c1e:	4618      	mov	r0, r3
 8055c20:	3708      	adds	r7, #8
 8055c22:	46bd      	mov	sp, r7
 8055c24:	bd80      	pop	{r7, pc}
 8055c26:	bf00      	nop
 8055c28:	2000b61c 	.word	0x2000b61c
 8055c2c:	0805cce0 	.word	0x0805cce0
 8055c30:	0805cdb4 	.word	0x0805cdb4
 8055c34:	0805cd54 	.word	0x0805cd54

08055c38 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8055c38:	b580      	push	{r7, lr}
 8055c3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8055c3c:	f003 fa12 	bl	8059064 <rand>
 8055c40:	4603      	mov	r3, r0
 8055c42:	b29b      	uxth	r3, r3
 8055c44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8055c48:	b29b      	uxth	r3, r3
 8055c4a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8055c4e:	b29a      	uxth	r2, r3
 8055c50:	4b01      	ldr	r3, [pc, #4]	; (8055c58 <udp_init+0x20>)
 8055c52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8055c54:	bf00      	nop
 8055c56:	bd80      	pop	{r7, pc}
 8055c58:	20000030 	.word	0x20000030

08055c5c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8055c5c:	b480      	push	{r7}
 8055c5e:	b083      	sub	sp, #12
 8055c60:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8055c62:	2300      	movs	r3, #0
 8055c64:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8055c66:	4b17      	ldr	r3, [pc, #92]	; (8055cc4 <udp_new_port+0x68>)
 8055c68:	881b      	ldrh	r3, [r3, #0]
 8055c6a:	1c5a      	adds	r2, r3, #1
 8055c6c:	b291      	uxth	r1, r2
 8055c6e:	4a15      	ldr	r2, [pc, #84]	; (8055cc4 <udp_new_port+0x68>)
 8055c70:	8011      	strh	r1, [r2, #0]
 8055c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8055c76:	4293      	cmp	r3, r2
 8055c78:	d103      	bne.n	8055c82 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8055c7a:	4b12      	ldr	r3, [pc, #72]	; (8055cc4 <udp_new_port+0x68>)
 8055c7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8055c80:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8055c82:	4b11      	ldr	r3, [pc, #68]	; (8055cc8 <udp_new_port+0x6c>)
 8055c84:	681b      	ldr	r3, [r3, #0]
 8055c86:	603b      	str	r3, [r7, #0]
 8055c88:	e011      	b.n	8055cae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8055c8a:	683b      	ldr	r3, [r7, #0]
 8055c8c:	8a5a      	ldrh	r2, [r3, #18]
 8055c8e:	4b0d      	ldr	r3, [pc, #52]	; (8055cc4 <udp_new_port+0x68>)
 8055c90:	881b      	ldrh	r3, [r3, #0]
 8055c92:	429a      	cmp	r2, r3
 8055c94:	d108      	bne.n	8055ca8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8055c96:	88fb      	ldrh	r3, [r7, #6]
 8055c98:	3301      	adds	r3, #1
 8055c9a:	80fb      	strh	r3, [r7, #6]
 8055c9c:	88fb      	ldrh	r3, [r7, #6]
 8055c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8055ca2:	d3e0      	bcc.n	8055c66 <udp_new_port+0xa>
        return 0;
 8055ca4:	2300      	movs	r3, #0
 8055ca6:	e007      	b.n	8055cb8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8055ca8:	683b      	ldr	r3, [r7, #0]
 8055caa:	68db      	ldr	r3, [r3, #12]
 8055cac:	603b      	str	r3, [r7, #0]
 8055cae:	683b      	ldr	r3, [r7, #0]
 8055cb0:	2b00      	cmp	r3, #0
 8055cb2:	d1ea      	bne.n	8055c8a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8055cb4:	4b03      	ldr	r3, [pc, #12]	; (8055cc4 <udp_new_port+0x68>)
 8055cb6:	881b      	ldrh	r3, [r3, #0]
}
 8055cb8:	4618      	mov	r0, r3
 8055cba:	370c      	adds	r7, #12
 8055cbc:	46bd      	mov	sp, r7
 8055cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8055cc2:	4770      	bx	lr
 8055cc4:	20000030 	.word	0x20000030
 8055cc8:	2000b628 	.word	0x2000b628

08055ccc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8055ccc:	b580      	push	{r7, lr}
 8055cce:	b084      	sub	sp, #16
 8055cd0:	af00      	add	r7, sp, #0
 8055cd2:	60f8      	str	r0, [r7, #12]
 8055cd4:	60b9      	str	r1, [r7, #8]
 8055cd6:	4613      	mov	r3, r2
 8055cd8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8055cda:	68fb      	ldr	r3, [r7, #12]
 8055cdc:	2b00      	cmp	r3, #0
 8055cde:	d105      	bne.n	8055cec <udp_input_local_match+0x20>
 8055ce0:	4b27      	ldr	r3, [pc, #156]	; (8055d80 <udp_input_local_match+0xb4>)
 8055ce2:	2287      	movs	r2, #135	; 0x87
 8055ce4:	4927      	ldr	r1, [pc, #156]	; (8055d84 <udp_input_local_match+0xb8>)
 8055ce6:	4828      	ldr	r0, [pc, #160]	; (8055d88 <udp_input_local_match+0xbc>)
 8055ce8:	f003 f9a4 	bl	8059034 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8055cec:	68bb      	ldr	r3, [r7, #8]
 8055cee:	2b00      	cmp	r3, #0
 8055cf0:	d105      	bne.n	8055cfe <udp_input_local_match+0x32>
 8055cf2:	4b23      	ldr	r3, [pc, #140]	; (8055d80 <udp_input_local_match+0xb4>)
 8055cf4:	2288      	movs	r2, #136	; 0x88
 8055cf6:	4925      	ldr	r1, [pc, #148]	; (8055d8c <udp_input_local_match+0xc0>)
 8055cf8:	4823      	ldr	r0, [pc, #140]	; (8055d88 <udp_input_local_match+0xbc>)
 8055cfa:	f003 f99b 	bl	8059034 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8055cfe:	68fb      	ldr	r3, [r7, #12]
 8055d00:	7a1b      	ldrb	r3, [r3, #8]
 8055d02:	2b00      	cmp	r3, #0
 8055d04:	d00b      	beq.n	8055d1e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8055d06:	68fb      	ldr	r3, [r7, #12]
 8055d08:	7a1a      	ldrb	r2, [r3, #8]
 8055d0a:	4b21      	ldr	r3, [pc, #132]	; (8055d90 <udp_input_local_match+0xc4>)
 8055d0c:	685b      	ldr	r3, [r3, #4]
 8055d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8055d12:	3301      	adds	r3, #1
 8055d14:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8055d16:	429a      	cmp	r2, r3
 8055d18:	d001      	beq.n	8055d1e <udp_input_local_match+0x52>
    return 0;
 8055d1a:	2300      	movs	r3, #0
 8055d1c:	e02b      	b.n	8055d76 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8055d1e:	79fb      	ldrb	r3, [r7, #7]
 8055d20:	2b00      	cmp	r3, #0
 8055d22:	d018      	beq.n	8055d56 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8055d24:	68fb      	ldr	r3, [r7, #12]
 8055d26:	2b00      	cmp	r3, #0
 8055d28:	d013      	beq.n	8055d52 <udp_input_local_match+0x86>
 8055d2a:	68fb      	ldr	r3, [r7, #12]
 8055d2c:	681b      	ldr	r3, [r3, #0]
 8055d2e:	2b00      	cmp	r3, #0
 8055d30:	d00f      	beq.n	8055d52 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8055d32:	4b17      	ldr	r3, [pc, #92]	; (8055d90 <udp_input_local_match+0xc4>)
 8055d34:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8055d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8055d3a:	d00a      	beq.n	8055d52 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8055d3c:	68fb      	ldr	r3, [r7, #12]
 8055d3e:	681a      	ldr	r2, [r3, #0]
 8055d40:	4b13      	ldr	r3, [pc, #76]	; (8055d90 <udp_input_local_match+0xc4>)
 8055d42:	695b      	ldr	r3, [r3, #20]
 8055d44:	405a      	eors	r2, r3
 8055d46:	68bb      	ldr	r3, [r7, #8]
 8055d48:	3308      	adds	r3, #8
 8055d4a:	681b      	ldr	r3, [r3, #0]
 8055d4c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8055d4e:	2b00      	cmp	r3, #0
 8055d50:	d110      	bne.n	8055d74 <udp_input_local_match+0xa8>
          return 1;
 8055d52:	2301      	movs	r3, #1
 8055d54:	e00f      	b.n	8055d76 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8055d56:	68fb      	ldr	r3, [r7, #12]
 8055d58:	2b00      	cmp	r3, #0
 8055d5a:	d009      	beq.n	8055d70 <udp_input_local_match+0xa4>
 8055d5c:	68fb      	ldr	r3, [r7, #12]
 8055d5e:	681b      	ldr	r3, [r3, #0]
 8055d60:	2b00      	cmp	r3, #0
 8055d62:	d005      	beq.n	8055d70 <udp_input_local_match+0xa4>
 8055d64:	68fb      	ldr	r3, [r7, #12]
 8055d66:	681a      	ldr	r2, [r3, #0]
 8055d68:	4b09      	ldr	r3, [pc, #36]	; (8055d90 <udp_input_local_match+0xc4>)
 8055d6a:	695b      	ldr	r3, [r3, #20]
 8055d6c:	429a      	cmp	r2, r3
 8055d6e:	d101      	bne.n	8055d74 <udp_input_local_match+0xa8>
        return 1;
 8055d70:	2301      	movs	r3, #1
 8055d72:	e000      	b.n	8055d76 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8055d74:	2300      	movs	r3, #0
}
 8055d76:	4618      	mov	r0, r3
 8055d78:	3710      	adds	r7, #16
 8055d7a:	46bd      	mov	sp, r7
 8055d7c:	bd80      	pop	{r7, pc}
 8055d7e:	bf00      	nop
 8055d80:	0805cdc8 	.word	0x0805cdc8
 8055d84:	0805cdf8 	.word	0x0805cdf8
 8055d88:	0805ce1c 	.word	0x0805ce1c
 8055d8c:	0805ce44 	.word	0x0805ce44
 8055d90:	20005cb8 	.word	0x20005cb8

08055d94 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8055d94:	b590      	push	{r4, r7, lr}
 8055d96:	b08d      	sub	sp, #52	; 0x34
 8055d98:	af02      	add	r7, sp, #8
 8055d9a:	6078      	str	r0, [r7, #4]
 8055d9c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8055d9e:	2300      	movs	r3, #0
 8055da0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8055da2:	687b      	ldr	r3, [r7, #4]
 8055da4:	2b00      	cmp	r3, #0
 8055da6:	d105      	bne.n	8055db4 <udp_input+0x20>
 8055da8:	4b7c      	ldr	r3, [pc, #496]	; (8055f9c <udp_input+0x208>)
 8055daa:	22cf      	movs	r2, #207	; 0xcf
 8055dac:	497c      	ldr	r1, [pc, #496]	; (8055fa0 <udp_input+0x20c>)
 8055dae:	487d      	ldr	r0, [pc, #500]	; (8055fa4 <udp_input+0x210>)
 8055db0:	f003 f940 	bl	8059034 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8055db4:	683b      	ldr	r3, [r7, #0]
 8055db6:	2b00      	cmp	r3, #0
 8055db8:	d105      	bne.n	8055dc6 <udp_input+0x32>
 8055dba:	4b78      	ldr	r3, [pc, #480]	; (8055f9c <udp_input+0x208>)
 8055dbc:	22d0      	movs	r2, #208	; 0xd0
 8055dbe:	497a      	ldr	r1, [pc, #488]	; (8055fa8 <udp_input+0x214>)
 8055dc0:	4878      	ldr	r0, [pc, #480]	; (8055fa4 <udp_input+0x210>)
 8055dc2:	f003 f937 	bl	8059034 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8055dc6:	687b      	ldr	r3, [r7, #4]
 8055dc8:	895b      	ldrh	r3, [r3, #10]
 8055dca:	2b07      	cmp	r3, #7
 8055dcc:	d803      	bhi.n	8055dd6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8055dce:	6878      	ldr	r0, [r7, #4]
 8055dd0:	f7f9 fa98 	bl	804f304 <pbuf_free>
    goto end;
 8055dd4:	e0de      	b.n	8055f94 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8055dd6:	687b      	ldr	r3, [r7, #4]
 8055dd8:	685b      	ldr	r3, [r3, #4]
 8055dda:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8055ddc:	4b73      	ldr	r3, [pc, #460]	; (8055fac <udp_input+0x218>)
 8055dde:	695b      	ldr	r3, [r3, #20]
 8055de0:	4a72      	ldr	r2, [pc, #456]	; (8055fac <udp_input+0x218>)
 8055de2:	6812      	ldr	r2, [r2, #0]
 8055de4:	4611      	mov	r1, r2
 8055de6:	4618      	mov	r0, r3
 8055de8:	f001 fd96 	bl	8057918 <ip4_addr_isbroadcast_u32>
 8055dec:	4603      	mov	r3, r0
 8055dee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8055df0:	697b      	ldr	r3, [r7, #20]
 8055df2:	881b      	ldrh	r3, [r3, #0]
 8055df4:	b29b      	uxth	r3, r3
 8055df6:	4618      	mov	r0, r3
 8055df8:	f7f7 fe92 	bl	804db20 <lwip_htons>
 8055dfc:	4603      	mov	r3, r0
 8055dfe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8055e00:	697b      	ldr	r3, [r7, #20]
 8055e02:	885b      	ldrh	r3, [r3, #2]
 8055e04:	b29b      	uxth	r3, r3
 8055e06:	4618      	mov	r0, r3
 8055e08:	f7f7 fe8a 	bl	804db20 <lwip_htons>
 8055e0c:	4603      	mov	r3, r0
 8055e0e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8055e10:	2300      	movs	r3, #0
 8055e12:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8055e14:	2300      	movs	r3, #0
 8055e16:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8055e18:	2300      	movs	r3, #0
 8055e1a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8055e1c:	4b64      	ldr	r3, [pc, #400]	; (8055fb0 <udp_input+0x21c>)
 8055e1e:	681b      	ldr	r3, [r3, #0]
 8055e20:	627b      	str	r3, [r7, #36]	; 0x24
 8055e22:	e054      	b.n	8055ece <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8055e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e26:	8a5b      	ldrh	r3, [r3, #18]
 8055e28:	89fa      	ldrh	r2, [r7, #14]
 8055e2a:	429a      	cmp	r2, r3
 8055e2c:	d14a      	bne.n	8055ec4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8055e2e:	7cfb      	ldrb	r3, [r7, #19]
 8055e30:	461a      	mov	r2, r3
 8055e32:	6839      	ldr	r1, [r7, #0]
 8055e34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8055e36:	f7ff ff49 	bl	8055ccc <udp_input_local_match>
 8055e3a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8055e3c:	2b00      	cmp	r3, #0
 8055e3e:	d041      	beq.n	8055ec4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8055e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e42:	7c1b      	ldrb	r3, [r3, #16]
 8055e44:	f003 0304 	and.w	r3, r3, #4
 8055e48:	2b00      	cmp	r3, #0
 8055e4a:	d11d      	bne.n	8055e88 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8055e4c:	69fb      	ldr	r3, [r7, #28]
 8055e4e:	2b00      	cmp	r3, #0
 8055e50:	d102      	bne.n	8055e58 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8055e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e54:	61fb      	str	r3, [r7, #28]
 8055e56:	e017      	b.n	8055e88 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8055e58:	7cfb      	ldrb	r3, [r7, #19]
 8055e5a:	2b00      	cmp	r3, #0
 8055e5c:	d014      	beq.n	8055e88 <udp_input+0xf4>
 8055e5e:	4b53      	ldr	r3, [pc, #332]	; (8055fac <udp_input+0x218>)
 8055e60:	695b      	ldr	r3, [r3, #20]
 8055e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8055e66:	d10f      	bne.n	8055e88 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8055e68:	69fb      	ldr	r3, [r7, #28]
 8055e6a:	681a      	ldr	r2, [r3, #0]
 8055e6c:	683b      	ldr	r3, [r7, #0]
 8055e6e:	3304      	adds	r3, #4
 8055e70:	681b      	ldr	r3, [r3, #0]
 8055e72:	429a      	cmp	r2, r3
 8055e74:	d008      	beq.n	8055e88 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8055e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e78:	681a      	ldr	r2, [r3, #0]
 8055e7a:	683b      	ldr	r3, [r7, #0]
 8055e7c:	3304      	adds	r3, #4
 8055e7e:	681b      	ldr	r3, [r3, #0]
 8055e80:	429a      	cmp	r2, r3
 8055e82:	d101      	bne.n	8055e88 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8055e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e86:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8055e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e8a:	8a9b      	ldrh	r3, [r3, #20]
 8055e8c:	8a3a      	ldrh	r2, [r7, #16]
 8055e8e:	429a      	cmp	r2, r3
 8055e90:	d118      	bne.n	8055ec4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8055e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e94:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8055e96:	2b00      	cmp	r3, #0
 8055e98:	d005      	beq.n	8055ea6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8055e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055e9c:	685a      	ldr	r2, [r3, #4]
 8055e9e:	4b43      	ldr	r3, [pc, #268]	; (8055fac <udp_input+0x218>)
 8055ea0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8055ea2:	429a      	cmp	r2, r3
 8055ea4:	d10e      	bne.n	8055ec4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8055ea6:	6a3b      	ldr	r3, [r7, #32]
 8055ea8:	2b00      	cmp	r3, #0
 8055eaa:	d014      	beq.n	8055ed6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8055eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055eae:	68da      	ldr	r2, [r3, #12]
 8055eb0:	6a3b      	ldr	r3, [r7, #32]
 8055eb2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8055eb4:	4b3e      	ldr	r3, [pc, #248]	; (8055fb0 <udp_input+0x21c>)
 8055eb6:	681a      	ldr	r2, [r3, #0]
 8055eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055eba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8055ebc:	4a3c      	ldr	r2, [pc, #240]	; (8055fb0 <udp_input+0x21c>)
 8055ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055ec0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8055ec2:	e008      	b.n	8055ed6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8055ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055ec6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8055ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055eca:	68db      	ldr	r3, [r3, #12]
 8055ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8055ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055ed0:	2b00      	cmp	r3, #0
 8055ed2:	d1a7      	bne.n	8055e24 <udp_input+0x90>
 8055ed4:	e000      	b.n	8055ed8 <udp_input+0x144>
        break;
 8055ed6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8055ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055eda:	2b00      	cmp	r3, #0
 8055edc:	d101      	bne.n	8055ee2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8055ede:	69fb      	ldr	r3, [r7, #28]
 8055ee0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8055ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055ee4:	2b00      	cmp	r3, #0
 8055ee6:	d002      	beq.n	8055eee <udp_input+0x15a>
    for_us = 1;
 8055ee8:	2301      	movs	r3, #1
 8055eea:	76fb      	strb	r3, [r7, #27]
 8055eec:	e00a      	b.n	8055f04 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8055eee:	683b      	ldr	r3, [r7, #0]
 8055ef0:	3304      	adds	r3, #4
 8055ef2:	681a      	ldr	r2, [r3, #0]
 8055ef4:	4b2d      	ldr	r3, [pc, #180]	; (8055fac <udp_input+0x218>)
 8055ef6:	695b      	ldr	r3, [r3, #20]
 8055ef8:	429a      	cmp	r2, r3
 8055efa:	bf0c      	ite	eq
 8055efc:	2301      	moveq	r3, #1
 8055efe:	2300      	movne	r3, #0
 8055f00:	b2db      	uxtb	r3, r3
 8055f02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8055f04:	7efb      	ldrb	r3, [r7, #27]
 8055f06:	2b00      	cmp	r3, #0
 8055f08:	d041      	beq.n	8055f8e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8055f0a:	2108      	movs	r1, #8
 8055f0c:	6878      	ldr	r0, [r7, #4]
 8055f0e:	f7f9 f973 	bl	804f1f8 <pbuf_remove_header>
 8055f12:	4603      	mov	r3, r0
 8055f14:	2b00      	cmp	r3, #0
 8055f16:	d00a      	beq.n	8055f2e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8055f18:	4b20      	ldr	r3, [pc, #128]	; (8055f9c <udp_input+0x208>)
 8055f1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8055f1e:	4925      	ldr	r1, [pc, #148]	; (8055fb4 <udp_input+0x220>)
 8055f20:	4820      	ldr	r0, [pc, #128]	; (8055fa4 <udp_input+0x210>)
 8055f22:	f003 f887 	bl	8059034 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8055f26:	6878      	ldr	r0, [r7, #4]
 8055f28:	f7f9 f9ec 	bl	804f304 <pbuf_free>
      goto end;
 8055f2c:	e032      	b.n	8055f94 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8055f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055f30:	2b00      	cmp	r3, #0
 8055f32:	d012      	beq.n	8055f5a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8055f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055f36:	699b      	ldr	r3, [r3, #24]
 8055f38:	2b00      	cmp	r3, #0
 8055f3a:	d00a      	beq.n	8055f52 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8055f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055f3e:	699c      	ldr	r4, [r3, #24]
 8055f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8055f42:	69d8      	ldr	r0, [r3, #28]
 8055f44:	8a3b      	ldrh	r3, [r7, #16]
 8055f46:	9300      	str	r3, [sp, #0]
 8055f48:	4b1b      	ldr	r3, [pc, #108]	; (8055fb8 <udp_input+0x224>)
 8055f4a:	687a      	ldr	r2, [r7, #4]
 8055f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8055f4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8055f50:	e021      	b.n	8055f96 <udp_input+0x202>
        pbuf_free(p);
 8055f52:	6878      	ldr	r0, [r7, #4]
 8055f54:	f7f9 f9d6 	bl	804f304 <pbuf_free>
        goto end;
 8055f58:	e01c      	b.n	8055f94 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8055f5a:	7cfb      	ldrb	r3, [r7, #19]
 8055f5c:	2b00      	cmp	r3, #0
 8055f5e:	d112      	bne.n	8055f86 <udp_input+0x1f2>
 8055f60:	4b12      	ldr	r3, [pc, #72]	; (8055fac <udp_input+0x218>)
 8055f62:	695b      	ldr	r3, [r3, #20]
 8055f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8055f68:	2be0      	cmp	r3, #224	; 0xe0
 8055f6a:	d00c      	beq.n	8055f86 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8055f6c:	4b0f      	ldr	r3, [pc, #60]	; (8055fac <udp_input+0x218>)
 8055f6e:	899b      	ldrh	r3, [r3, #12]
 8055f70:	3308      	adds	r3, #8
 8055f72:	b29b      	uxth	r3, r3
 8055f74:	b21b      	sxth	r3, r3
 8055f76:	4619      	mov	r1, r3
 8055f78:	6878      	ldr	r0, [r7, #4]
 8055f7a:	f7f9 f9b0 	bl	804f2de <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8055f7e:	2103      	movs	r1, #3
 8055f80:	6878      	ldr	r0, [r7, #4]
 8055f82:	f001 f9a9 	bl	80572d8 <icmp_dest_unreach>
      pbuf_free(p);
 8055f86:	6878      	ldr	r0, [r7, #4]
 8055f88:	f7f9 f9bc 	bl	804f304 <pbuf_free>
  return;
 8055f8c:	e003      	b.n	8055f96 <udp_input+0x202>
    pbuf_free(p);
 8055f8e:	6878      	ldr	r0, [r7, #4]
 8055f90:	f7f9 f9b8 	bl	804f304 <pbuf_free>
  return;
 8055f94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8055f96:	372c      	adds	r7, #44	; 0x2c
 8055f98:	46bd      	mov	sp, r7
 8055f9a:	bd90      	pop	{r4, r7, pc}
 8055f9c:	0805cdc8 	.word	0x0805cdc8
 8055fa0:	0805ce6c 	.word	0x0805ce6c
 8055fa4:	0805ce1c 	.word	0x0805ce1c
 8055fa8:	0805ce84 	.word	0x0805ce84
 8055fac:	20005cb8 	.word	0x20005cb8
 8055fb0:	2000b628 	.word	0x2000b628
 8055fb4:	0805cea0 	.word	0x0805cea0
 8055fb8:	20005cc8 	.word	0x20005cc8

08055fbc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8055fbc:	b580      	push	{r7, lr}
 8055fbe:	b086      	sub	sp, #24
 8055fc0:	af00      	add	r7, sp, #0
 8055fc2:	60f8      	str	r0, [r7, #12]
 8055fc4:	60b9      	str	r1, [r7, #8]
 8055fc6:	4613      	mov	r3, r2
 8055fc8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8055fca:	68bb      	ldr	r3, [r7, #8]
 8055fcc:	2b00      	cmp	r3, #0
 8055fce:	d101      	bne.n	8055fd4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8055fd0:	4b39      	ldr	r3, [pc, #228]	; (80560b8 <udp_bind+0xfc>)
 8055fd2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8055fd4:	68fb      	ldr	r3, [r7, #12]
 8055fd6:	2b00      	cmp	r3, #0
 8055fd8:	d109      	bne.n	8055fee <udp_bind+0x32>
 8055fda:	4b38      	ldr	r3, [pc, #224]	; (80560bc <udp_bind+0x100>)
 8055fdc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8055fe0:	4937      	ldr	r1, [pc, #220]	; (80560c0 <udp_bind+0x104>)
 8055fe2:	4838      	ldr	r0, [pc, #224]	; (80560c4 <udp_bind+0x108>)
 8055fe4:	f003 f826 	bl	8059034 <iprintf>
 8055fe8:	f06f 030f 	mvn.w	r3, #15
 8055fec:	e060      	b.n	80560b0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8055fee:	2300      	movs	r3, #0
 8055ff0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8055ff2:	4b35      	ldr	r3, [pc, #212]	; (80560c8 <udp_bind+0x10c>)
 8055ff4:	681b      	ldr	r3, [r3, #0]
 8055ff6:	617b      	str	r3, [r7, #20]
 8055ff8:	e009      	b.n	805600e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8055ffa:	68fa      	ldr	r2, [r7, #12]
 8055ffc:	697b      	ldr	r3, [r7, #20]
 8055ffe:	429a      	cmp	r2, r3
 8056000:	d102      	bne.n	8056008 <udp_bind+0x4c>
      rebind = 1;
 8056002:	2301      	movs	r3, #1
 8056004:	74fb      	strb	r3, [r7, #19]
      break;
 8056006:	e005      	b.n	8056014 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8056008:	697b      	ldr	r3, [r7, #20]
 805600a:	68db      	ldr	r3, [r3, #12]
 805600c:	617b      	str	r3, [r7, #20]
 805600e:	697b      	ldr	r3, [r7, #20]
 8056010:	2b00      	cmp	r3, #0
 8056012:	d1f2      	bne.n	8055ffa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8056014:	88fb      	ldrh	r3, [r7, #6]
 8056016:	2b00      	cmp	r3, #0
 8056018:	d109      	bne.n	805602e <udp_bind+0x72>
    port = udp_new_port();
 805601a:	f7ff fe1f 	bl	8055c5c <udp_new_port>
 805601e:	4603      	mov	r3, r0
 8056020:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8056022:	88fb      	ldrh	r3, [r7, #6]
 8056024:	2b00      	cmp	r3, #0
 8056026:	d12c      	bne.n	8056082 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8056028:	f06f 0307 	mvn.w	r3, #7
 805602c:	e040      	b.n	80560b0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 805602e:	4b26      	ldr	r3, [pc, #152]	; (80560c8 <udp_bind+0x10c>)
 8056030:	681b      	ldr	r3, [r3, #0]
 8056032:	617b      	str	r3, [r7, #20]
 8056034:	e022      	b.n	805607c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8056036:	68fa      	ldr	r2, [r7, #12]
 8056038:	697b      	ldr	r3, [r7, #20]
 805603a:	429a      	cmp	r2, r3
 805603c:	d01b      	beq.n	8056076 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 805603e:	697b      	ldr	r3, [r7, #20]
 8056040:	8a5b      	ldrh	r3, [r3, #18]
 8056042:	88fa      	ldrh	r2, [r7, #6]
 8056044:	429a      	cmp	r2, r3
 8056046:	d116      	bne.n	8056076 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8056048:	697b      	ldr	r3, [r7, #20]
 805604a:	681a      	ldr	r2, [r3, #0]
 805604c:	68bb      	ldr	r3, [r7, #8]
 805604e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8056050:	429a      	cmp	r2, r3
 8056052:	d00d      	beq.n	8056070 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8056054:	68bb      	ldr	r3, [r7, #8]
 8056056:	2b00      	cmp	r3, #0
 8056058:	d00a      	beq.n	8056070 <udp_bind+0xb4>
 805605a:	68bb      	ldr	r3, [r7, #8]
 805605c:	681b      	ldr	r3, [r3, #0]
 805605e:	2b00      	cmp	r3, #0
 8056060:	d006      	beq.n	8056070 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8056062:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8056064:	2b00      	cmp	r3, #0
 8056066:	d003      	beq.n	8056070 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8056068:	697b      	ldr	r3, [r7, #20]
 805606a:	681b      	ldr	r3, [r3, #0]
 805606c:	2b00      	cmp	r3, #0
 805606e:	d102      	bne.n	8056076 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8056070:	f06f 0307 	mvn.w	r3, #7
 8056074:	e01c      	b.n	80560b0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8056076:	697b      	ldr	r3, [r7, #20]
 8056078:	68db      	ldr	r3, [r3, #12]
 805607a:	617b      	str	r3, [r7, #20]
 805607c:	697b      	ldr	r3, [r7, #20]
 805607e:	2b00      	cmp	r3, #0
 8056080:	d1d9      	bne.n	8056036 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8056082:	68bb      	ldr	r3, [r7, #8]
 8056084:	2b00      	cmp	r3, #0
 8056086:	d002      	beq.n	805608e <udp_bind+0xd2>
 8056088:	68bb      	ldr	r3, [r7, #8]
 805608a:	681b      	ldr	r3, [r3, #0]
 805608c:	e000      	b.n	8056090 <udp_bind+0xd4>
 805608e:	2300      	movs	r3, #0
 8056090:	68fa      	ldr	r2, [r7, #12]
 8056092:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8056094:	68fb      	ldr	r3, [r7, #12]
 8056096:	88fa      	ldrh	r2, [r7, #6]
 8056098:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 805609a:	7cfb      	ldrb	r3, [r7, #19]
 805609c:	2b00      	cmp	r3, #0
 805609e:	d106      	bne.n	80560ae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80560a0:	4b09      	ldr	r3, [pc, #36]	; (80560c8 <udp_bind+0x10c>)
 80560a2:	681a      	ldr	r2, [r3, #0]
 80560a4:	68fb      	ldr	r3, [r7, #12]
 80560a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80560a8:	4a07      	ldr	r2, [pc, #28]	; (80560c8 <udp_bind+0x10c>)
 80560aa:	68fb      	ldr	r3, [r7, #12]
 80560ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80560ae:	2300      	movs	r3, #0
}
 80560b0:	4618      	mov	r0, r3
 80560b2:	3718      	adds	r7, #24
 80560b4:	46bd      	mov	sp, r7
 80560b6:	bd80      	pop	{r7, pc}
 80560b8:	0805d928 	.word	0x0805d928
 80560bc:	0805cdc8 	.word	0x0805cdc8
 80560c0:	0805d090 	.word	0x0805d090
 80560c4:	0805ce1c 	.word	0x0805ce1c
 80560c8:	2000b628 	.word	0x2000b628

080560cc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80560cc:	b580      	push	{r7, lr}
 80560ce:	b084      	sub	sp, #16
 80560d0:	af00      	add	r7, sp, #0
 80560d2:	60f8      	str	r0, [r7, #12]
 80560d4:	60b9      	str	r1, [r7, #8]
 80560d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80560d8:	68fb      	ldr	r3, [r7, #12]
 80560da:	2b00      	cmp	r3, #0
 80560dc:	d107      	bne.n	80560ee <udp_recv+0x22>
 80560de:	4b08      	ldr	r3, [pc, #32]	; (8056100 <udp_recv+0x34>)
 80560e0:	f240 428a 	movw	r2, #1162	; 0x48a
 80560e4:	4907      	ldr	r1, [pc, #28]	; (8056104 <udp_recv+0x38>)
 80560e6:	4808      	ldr	r0, [pc, #32]	; (8056108 <udp_recv+0x3c>)
 80560e8:	f002 ffa4 	bl	8059034 <iprintf>
 80560ec:	e005      	b.n	80560fa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80560ee:	68fb      	ldr	r3, [r7, #12]
 80560f0:	68ba      	ldr	r2, [r7, #8]
 80560f2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80560f4:	68fb      	ldr	r3, [r7, #12]
 80560f6:	687a      	ldr	r2, [r7, #4]
 80560f8:	61da      	str	r2, [r3, #28]
}
 80560fa:	3710      	adds	r7, #16
 80560fc:	46bd      	mov	sp, r7
 80560fe:	bd80      	pop	{r7, pc}
 8056100:	0805cdc8 	.word	0x0805cdc8
 8056104:	0805d0fc 	.word	0x0805d0fc
 8056108:	0805ce1c 	.word	0x0805ce1c

0805610c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 805610c:	b580      	push	{r7, lr}
 805610e:	b084      	sub	sp, #16
 8056110:	af00      	add	r7, sp, #0
 8056112:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8056114:	687b      	ldr	r3, [r7, #4]
 8056116:	2b00      	cmp	r3, #0
 8056118:	d107      	bne.n	805612a <udp_remove+0x1e>
 805611a:	4b19      	ldr	r3, [pc, #100]	; (8056180 <udp_remove+0x74>)
 805611c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8056120:	4918      	ldr	r1, [pc, #96]	; (8056184 <udp_remove+0x78>)
 8056122:	4819      	ldr	r0, [pc, #100]	; (8056188 <udp_remove+0x7c>)
 8056124:	f002 ff86 	bl	8059034 <iprintf>
 8056128:	e026      	b.n	8056178 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 805612a:	4b18      	ldr	r3, [pc, #96]	; (805618c <udp_remove+0x80>)
 805612c:	681b      	ldr	r3, [r3, #0]
 805612e:	687a      	ldr	r2, [r7, #4]
 8056130:	429a      	cmp	r2, r3
 8056132:	d105      	bne.n	8056140 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8056134:	4b15      	ldr	r3, [pc, #84]	; (805618c <udp_remove+0x80>)
 8056136:	681b      	ldr	r3, [r3, #0]
 8056138:	68db      	ldr	r3, [r3, #12]
 805613a:	4a14      	ldr	r2, [pc, #80]	; (805618c <udp_remove+0x80>)
 805613c:	6013      	str	r3, [r2, #0]
 805613e:	e017      	b.n	8056170 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8056140:	4b12      	ldr	r3, [pc, #72]	; (805618c <udp_remove+0x80>)
 8056142:	681b      	ldr	r3, [r3, #0]
 8056144:	60fb      	str	r3, [r7, #12]
 8056146:	e010      	b.n	805616a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8056148:	68fb      	ldr	r3, [r7, #12]
 805614a:	68db      	ldr	r3, [r3, #12]
 805614c:	2b00      	cmp	r3, #0
 805614e:	d009      	beq.n	8056164 <udp_remove+0x58>
 8056150:	68fb      	ldr	r3, [r7, #12]
 8056152:	68db      	ldr	r3, [r3, #12]
 8056154:	687a      	ldr	r2, [r7, #4]
 8056156:	429a      	cmp	r2, r3
 8056158:	d104      	bne.n	8056164 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 805615a:	687b      	ldr	r3, [r7, #4]
 805615c:	68da      	ldr	r2, [r3, #12]
 805615e:	68fb      	ldr	r3, [r7, #12]
 8056160:	60da      	str	r2, [r3, #12]
        break;
 8056162:	e005      	b.n	8056170 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8056164:	68fb      	ldr	r3, [r7, #12]
 8056166:	68db      	ldr	r3, [r3, #12]
 8056168:	60fb      	str	r3, [r7, #12]
 805616a:	68fb      	ldr	r3, [r7, #12]
 805616c:	2b00      	cmp	r3, #0
 805616e:	d1eb      	bne.n	8056148 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8056170:	6879      	ldr	r1, [r7, #4]
 8056172:	2000      	movs	r0, #0
 8056174:	f7f8 fa22 	bl	804e5bc <memp_free>
}
 8056178:	3710      	adds	r7, #16
 805617a:	46bd      	mov	sp, r7
 805617c:	bd80      	pop	{r7, pc}
 805617e:	bf00      	nop
 8056180:	0805cdc8 	.word	0x0805cdc8
 8056184:	0805d114 	.word	0x0805d114
 8056188:	0805ce1c 	.word	0x0805ce1c
 805618c:	2000b628 	.word	0x2000b628

08056190 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8056190:	b580      	push	{r7, lr}
 8056192:	b082      	sub	sp, #8
 8056194:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8056196:	2000      	movs	r0, #0
 8056198:	f7f8 f99a 	bl	804e4d0 <memp_malloc>
 805619c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 805619e:	687b      	ldr	r3, [r7, #4]
 80561a0:	2b00      	cmp	r3, #0
 80561a2:	d007      	beq.n	80561b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80561a4:	2220      	movs	r2, #32
 80561a6:	2100      	movs	r1, #0
 80561a8:	6878      	ldr	r0, [r7, #4]
 80561aa:	f002 fe5b 	bl	8058e64 <memset>
    pcb->ttl = UDP_TTL;
 80561ae:	687b      	ldr	r3, [r7, #4]
 80561b0:	22ff      	movs	r2, #255	; 0xff
 80561b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80561b4:	687b      	ldr	r3, [r7, #4]
}
 80561b6:	4618      	mov	r0, r3
 80561b8:	3708      	adds	r7, #8
 80561ba:	46bd      	mov	sp, r7
 80561bc:	bd80      	pop	{r7, pc}

080561be <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80561be:	b580      	push	{r7, lr}
 80561c0:	b084      	sub	sp, #16
 80561c2:	af00      	add	r7, sp, #0
 80561c4:	4603      	mov	r3, r0
 80561c6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80561c8:	f7ff ffe2 	bl	8056190 <udp_new>
 80561cc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80561ce:	68fb      	ldr	r3, [r7, #12]
}
 80561d0:	4618      	mov	r0, r3
 80561d2:	3710      	adds	r7, #16
 80561d4:	46bd      	mov	sp, r7
 80561d6:	bd80      	pop	{r7, pc}

080561d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80561d8:	b480      	push	{r7}
 80561da:	b085      	sub	sp, #20
 80561dc:	af00      	add	r7, sp, #0
 80561de:	6078      	str	r0, [r7, #4]
 80561e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80561e2:	687b      	ldr	r3, [r7, #4]
 80561e4:	2b00      	cmp	r3, #0
 80561e6:	d01e      	beq.n	8056226 <udp_netif_ip_addr_changed+0x4e>
 80561e8:	687b      	ldr	r3, [r7, #4]
 80561ea:	681b      	ldr	r3, [r3, #0]
 80561ec:	2b00      	cmp	r3, #0
 80561ee:	d01a      	beq.n	8056226 <udp_netif_ip_addr_changed+0x4e>
 80561f0:	683b      	ldr	r3, [r7, #0]
 80561f2:	2b00      	cmp	r3, #0
 80561f4:	d017      	beq.n	8056226 <udp_netif_ip_addr_changed+0x4e>
 80561f6:	683b      	ldr	r3, [r7, #0]
 80561f8:	681b      	ldr	r3, [r3, #0]
 80561fa:	2b00      	cmp	r3, #0
 80561fc:	d013      	beq.n	8056226 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80561fe:	4b0d      	ldr	r3, [pc, #52]	; (8056234 <udp_netif_ip_addr_changed+0x5c>)
 8056200:	681b      	ldr	r3, [r3, #0]
 8056202:	60fb      	str	r3, [r7, #12]
 8056204:	e00c      	b.n	8056220 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8056206:	68fb      	ldr	r3, [r7, #12]
 8056208:	681a      	ldr	r2, [r3, #0]
 805620a:	687b      	ldr	r3, [r7, #4]
 805620c:	681b      	ldr	r3, [r3, #0]
 805620e:	429a      	cmp	r2, r3
 8056210:	d103      	bne.n	805621a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8056212:	683b      	ldr	r3, [r7, #0]
 8056214:	681a      	ldr	r2, [r3, #0]
 8056216:	68fb      	ldr	r3, [r7, #12]
 8056218:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 805621a:	68fb      	ldr	r3, [r7, #12]
 805621c:	68db      	ldr	r3, [r3, #12]
 805621e:	60fb      	str	r3, [r7, #12]
 8056220:	68fb      	ldr	r3, [r7, #12]
 8056222:	2b00      	cmp	r3, #0
 8056224:	d1ef      	bne.n	8056206 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8056226:	bf00      	nop
 8056228:	3714      	adds	r7, #20
 805622a:	46bd      	mov	sp, r7
 805622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8056230:	4770      	bx	lr
 8056232:	bf00      	nop
 8056234:	2000b628 	.word	0x2000b628

08056238 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8056238:	b580      	push	{r7, lr}
 805623a:	b082      	sub	sp, #8
 805623c:	af00      	add	r7, sp, #0
 805623e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8056240:	4915      	ldr	r1, [pc, #84]	; (8056298 <etharp_free_entry+0x60>)
 8056242:	687a      	ldr	r2, [r7, #4]
 8056244:	4613      	mov	r3, r2
 8056246:	005b      	lsls	r3, r3, #1
 8056248:	4413      	add	r3, r2
 805624a:	00db      	lsls	r3, r3, #3
 805624c:	440b      	add	r3, r1
 805624e:	681b      	ldr	r3, [r3, #0]
 8056250:	2b00      	cmp	r3, #0
 8056252:	d013      	beq.n	805627c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8056254:	4910      	ldr	r1, [pc, #64]	; (8056298 <etharp_free_entry+0x60>)
 8056256:	687a      	ldr	r2, [r7, #4]
 8056258:	4613      	mov	r3, r2
 805625a:	005b      	lsls	r3, r3, #1
 805625c:	4413      	add	r3, r2
 805625e:	00db      	lsls	r3, r3, #3
 8056260:	440b      	add	r3, r1
 8056262:	681b      	ldr	r3, [r3, #0]
 8056264:	4618      	mov	r0, r3
 8056266:	f7f9 f84d 	bl	804f304 <pbuf_free>
    arp_table[i].q = NULL;
 805626a:	490b      	ldr	r1, [pc, #44]	; (8056298 <etharp_free_entry+0x60>)
 805626c:	687a      	ldr	r2, [r7, #4]
 805626e:	4613      	mov	r3, r2
 8056270:	005b      	lsls	r3, r3, #1
 8056272:	4413      	add	r3, r2
 8056274:	00db      	lsls	r3, r3, #3
 8056276:	440b      	add	r3, r1
 8056278:	2200      	movs	r2, #0
 805627a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 805627c:	4906      	ldr	r1, [pc, #24]	; (8056298 <etharp_free_entry+0x60>)
 805627e:	687a      	ldr	r2, [r7, #4]
 8056280:	4613      	mov	r3, r2
 8056282:	005b      	lsls	r3, r3, #1
 8056284:	4413      	add	r3, r2
 8056286:	00db      	lsls	r3, r3, #3
 8056288:	440b      	add	r3, r1
 805628a:	3314      	adds	r3, #20
 805628c:	2200      	movs	r2, #0
 805628e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8056290:	bf00      	nop
 8056292:	3708      	adds	r7, #8
 8056294:	46bd      	mov	sp, r7
 8056296:	bd80      	pop	{r7, pc}
 8056298:	2000b62c 	.word	0x2000b62c

0805629c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 805629c:	b580      	push	{r7, lr}
 805629e:	b082      	sub	sp, #8
 80562a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80562a2:	2300      	movs	r3, #0
 80562a4:	607b      	str	r3, [r7, #4]
 80562a6:	e096      	b.n	80563d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80562a8:	494f      	ldr	r1, [pc, #316]	; (80563e8 <etharp_tmr+0x14c>)
 80562aa:	687a      	ldr	r2, [r7, #4]
 80562ac:	4613      	mov	r3, r2
 80562ae:	005b      	lsls	r3, r3, #1
 80562b0:	4413      	add	r3, r2
 80562b2:	00db      	lsls	r3, r3, #3
 80562b4:	440b      	add	r3, r1
 80562b6:	3314      	adds	r3, #20
 80562b8:	781b      	ldrb	r3, [r3, #0]
 80562ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80562bc:	78fb      	ldrb	r3, [r7, #3]
 80562be:	2b00      	cmp	r3, #0
 80562c0:	f000 8086 	beq.w	80563d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80562c4:	4948      	ldr	r1, [pc, #288]	; (80563e8 <etharp_tmr+0x14c>)
 80562c6:	687a      	ldr	r2, [r7, #4]
 80562c8:	4613      	mov	r3, r2
 80562ca:	005b      	lsls	r3, r3, #1
 80562cc:	4413      	add	r3, r2
 80562ce:	00db      	lsls	r3, r3, #3
 80562d0:	440b      	add	r3, r1
 80562d2:	3312      	adds	r3, #18
 80562d4:	881b      	ldrh	r3, [r3, #0]
 80562d6:	3301      	adds	r3, #1
 80562d8:	b298      	uxth	r0, r3
 80562da:	4943      	ldr	r1, [pc, #268]	; (80563e8 <etharp_tmr+0x14c>)
 80562dc:	687a      	ldr	r2, [r7, #4]
 80562de:	4613      	mov	r3, r2
 80562e0:	005b      	lsls	r3, r3, #1
 80562e2:	4413      	add	r3, r2
 80562e4:	00db      	lsls	r3, r3, #3
 80562e6:	440b      	add	r3, r1
 80562e8:	3312      	adds	r3, #18
 80562ea:	4602      	mov	r2, r0
 80562ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80562ee:	493e      	ldr	r1, [pc, #248]	; (80563e8 <etharp_tmr+0x14c>)
 80562f0:	687a      	ldr	r2, [r7, #4]
 80562f2:	4613      	mov	r3, r2
 80562f4:	005b      	lsls	r3, r3, #1
 80562f6:	4413      	add	r3, r2
 80562f8:	00db      	lsls	r3, r3, #3
 80562fa:	440b      	add	r3, r1
 80562fc:	3312      	adds	r3, #18
 80562fe:	881b      	ldrh	r3, [r3, #0]
 8056300:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8056304:	d215      	bcs.n	8056332 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8056306:	4938      	ldr	r1, [pc, #224]	; (80563e8 <etharp_tmr+0x14c>)
 8056308:	687a      	ldr	r2, [r7, #4]
 805630a:	4613      	mov	r3, r2
 805630c:	005b      	lsls	r3, r3, #1
 805630e:	4413      	add	r3, r2
 8056310:	00db      	lsls	r3, r3, #3
 8056312:	440b      	add	r3, r1
 8056314:	3314      	adds	r3, #20
 8056316:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8056318:	2b01      	cmp	r3, #1
 805631a:	d10e      	bne.n	805633a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 805631c:	4932      	ldr	r1, [pc, #200]	; (80563e8 <etharp_tmr+0x14c>)
 805631e:	687a      	ldr	r2, [r7, #4]
 8056320:	4613      	mov	r3, r2
 8056322:	005b      	lsls	r3, r3, #1
 8056324:	4413      	add	r3, r2
 8056326:	00db      	lsls	r3, r3, #3
 8056328:	440b      	add	r3, r1
 805632a:	3312      	adds	r3, #18
 805632c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 805632e:	2b04      	cmp	r3, #4
 8056330:	d903      	bls.n	805633a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8056332:	6878      	ldr	r0, [r7, #4]
 8056334:	f7ff ff80 	bl	8056238 <etharp_free_entry>
 8056338:	e04a      	b.n	80563d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 805633a:	492b      	ldr	r1, [pc, #172]	; (80563e8 <etharp_tmr+0x14c>)
 805633c:	687a      	ldr	r2, [r7, #4]
 805633e:	4613      	mov	r3, r2
 8056340:	005b      	lsls	r3, r3, #1
 8056342:	4413      	add	r3, r2
 8056344:	00db      	lsls	r3, r3, #3
 8056346:	440b      	add	r3, r1
 8056348:	3314      	adds	r3, #20
 805634a:	781b      	ldrb	r3, [r3, #0]
 805634c:	2b03      	cmp	r3, #3
 805634e:	d10a      	bne.n	8056366 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8056350:	4925      	ldr	r1, [pc, #148]	; (80563e8 <etharp_tmr+0x14c>)
 8056352:	687a      	ldr	r2, [r7, #4]
 8056354:	4613      	mov	r3, r2
 8056356:	005b      	lsls	r3, r3, #1
 8056358:	4413      	add	r3, r2
 805635a:	00db      	lsls	r3, r3, #3
 805635c:	440b      	add	r3, r1
 805635e:	3314      	adds	r3, #20
 8056360:	2204      	movs	r2, #4
 8056362:	701a      	strb	r2, [r3, #0]
 8056364:	e034      	b.n	80563d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8056366:	4920      	ldr	r1, [pc, #128]	; (80563e8 <etharp_tmr+0x14c>)
 8056368:	687a      	ldr	r2, [r7, #4]
 805636a:	4613      	mov	r3, r2
 805636c:	005b      	lsls	r3, r3, #1
 805636e:	4413      	add	r3, r2
 8056370:	00db      	lsls	r3, r3, #3
 8056372:	440b      	add	r3, r1
 8056374:	3314      	adds	r3, #20
 8056376:	781b      	ldrb	r3, [r3, #0]
 8056378:	2b04      	cmp	r3, #4
 805637a:	d10a      	bne.n	8056392 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 805637c:	491a      	ldr	r1, [pc, #104]	; (80563e8 <etharp_tmr+0x14c>)
 805637e:	687a      	ldr	r2, [r7, #4]
 8056380:	4613      	mov	r3, r2
 8056382:	005b      	lsls	r3, r3, #1
 8056384:	4413      	add	r3, r2
 8056386:	00db      	lsls	r3, r3, #3
 8056388:	440b      	add	r3, r1
 805638a:	3314      	adds	r3, #20
 805638c:	2202      	movs	r2, #2
 805638e:	701a      	strb	r2, [r3, #0]
 8056390:	e01e      	b.n	80563d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8056392:	4915      	ldr	r1, [pc, #84]	; (80563e8 <etharp_tmr+0x14c>)
 8056394:	687a      	ldr	r2, [r7, #4]
 8056396:	4613      	mov	r3, r2
 8056398:	005b      	lsls	r3, r3, #1
 805639a:	4413      	add	r3, r2
 805639c:	00db      	lsls	r3, r3, #3
 805639e:	440b      	add	r3, r1
 80563a0:	3314      	adds	r3, #20
 80563a2:	781b      	ldrb	r3, [r3, #0]
 80563a4:	2b01      	cmp	r3, #1
 80563a6:	d113      	bne.n	80563d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80563a8:	490f      	ldr	r1, [pc, #60]	; (80563e8 <etharp_tmr+0x14c>)
 80563aa:	687a      	ldr	r2, [r7, #4]
 80563ac:	4613      	mov	r3, r2
 80563ae:	005b      	lsls	r3, r3, #1
 80563b0:	4413      	add	r3, r2
 80563b2:	00db      	lsls	r3, r3, #3
 80563b4:	440b      	add	r3, r1
 80563b6:	3308      	adds	r3, #8
 80563b8:	6818      	ldr	r0, [r3, #0]
 80563ba:	687a      	ldr	r2, [r7, #4]
 80563bc:	4613      	mov	r3, r2
 80563be:	005b      	lsls	r3, r3, #1
 80563c0:	4413      	add	r3, r2
 80563c2:	00db      	lsls	r3, r3, #3
 80563c4:	4a08      	ldr	r2, [pc, #32]	; (80563e8 <etharp_tmr+0x14c>)
 80563c6:	4413      	add	r3, r2
 80563c8:	3304      	adds	r3, #4
 80563ca:	4619      	mov	r1, r3
 80563cc:	f000 fe6e 	bl	80570ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80563d0:	687b      	ldr	r3, [r7, #4]
 80563d2:	3301      	adds	r3, #1
 80563d4:	607b      	str	r3, [r7, #4]
 80563d6:	687b      	ldr	r3, [r7, #4]
 80563d8:	2b09      	cmp	r3, #9
 80563da:	f77f af65 	ble.w	80562a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80563de:	bf00      	nop
 80563e0:	bf00      	nop
 80563e2:	3708      	adds	r7, #8
 80563e4:	46bd      	mov	sp, r7
 80563e6:	bd80      	pop	{r7, pc}
 80563e8:	2000b62c 	.word	0x2000b62c

080563ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80563ec:	b580      	push	{r7, lr}
 80563ee:	b08a      	sub	sp, #40	; 0x28
 80563f0:	af00      	add	r7, sp, #0
 80563f2:	60f8      	str	r0, [r7, #12]
 80563f4:	460b      	mov	r3, r1
 80563f6:	607a      	str	r2, [r7, #4]
 80563f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80563fa:	230a      	movs	r3, #10
 80563fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80563fe:	230a      	movs	r3, #10
 8056400:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8056402:	230a      	movs	r3, #10
 8056404:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8056406:	2300      	movs	r3, #0
 8056408:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 805640a:	230a      	movs	r3, #10
 805640c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 805640e:	2300      	movs	r3, #0
 8056410:	83bb      	strh	r3, [r7, #28]
 8056412:	2300      	movs	r3, #0
 8056414:	837b      	strh	r3, [r7, #26]
 8056416:	2300      	movs	r3, #0
 8056418:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 805641a:	2300      	movs	r3, #0
 805641c:	843b      	strh	r3, [r7, #32]
 805641e:	e0ae      	b.n	805657e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8056420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056424:	49a6      	ldr	r1, [pc, #664]	; (80566c0 <etharp_find_entry+0x2d4>)
 8056426:	4613      	mov	r3, r2
 8056428:	005b      	lsls	r3, r3, #1
 805642a:	4413      	add	r3, r2
 805642c:	00db      	lsls	r3, r3, #3
 805642e:	440b      	add	r3, r1
 8056430:	3314      	adds	r3, #20
 8056432:	781b      	ldrb	r3, [r3, #0]
 8056434:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8056436:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 805643a:	2b0a      	cmp	r3, #10
 805643c:	d105      	bne.n	805644a <etharp_find_entry+0x5e>
 805643e:	7dfb      	ldrb	r3, [r7, #23]
 8056440:	2b00      	cmp	r3, #0
 8056442:	d102      	bne.n	805644a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8056444:	8c3b      	ldrh	r3, [r7, #32]
 8056446:	847b      	strh	r3, [r7, #34]	; 0x22
 8056448:	e095      	b.n	8056576 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 805644a:	7dfb      	ldrb	r3, [r7, #23]
 805644c:	2b00      	cmp	r3, #0
 805644e:	f000 8092 	beq.w	8056576 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8056452:	7dfb      	ldrb	r3, [r7, #23]
 8056454:	2b01      	cmp	r3, #1
 8056456:	d009      	beq.n	805646c <etharp_find_entry+0x80>
 8056458:	7dfb      	ldrb	r3, [r7, #23]
 805645a:	2b01      	cmp	r3, #1
 805645c:	d806      	bhi.n	805646c <etharp_find_entry+0x80>
 805645e:	4b99      	ldr	r3, [pc, #612]	; (80566c4 <etharp_find_entry+0x2d8>)
 8056460:	f240 1223 	movw	r2, #291	; 0x123
 8056464:	4998      	ldr	r1, [pc, #608]	; (80566c8 <etharp_find_entry+0x2dc>)
 8056466:	4899      	ldr	r0, [pc, #612]	; (80566cc <etharp_find_entry+0x2e0>)
 8056468:	f002 fde4 	bl	8059034 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 805646c:	68fb      	ldr	r3, [r7, #12]
 805646e:	2b00      	cmp	r3, #0
 8056470:	d020      	beq.n	80564b4 <etharp_find_entry+0xc8>
 8056472:	68fb      	ldr	r3, [r7, #12]
 8056474:	6819      	ldr	r1, [r3, #0]
 8056476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 805647a:	4891      	ldr	r0, [pc, #580]	; (80566c0 <etharp_find_entry+0x2d4>)
 805647c:	4613      	mov	r3, r2
 805647e:	005b      	lsls	r3, r3, #1
 8056480:	4413      	add	r3, r2
 8056482:	00db      	lsls	r3, r3, #3
 8056484:	4403      	add	r3, r0
 8056486:	3304      	adds	r3, #4
 8056488:	681b      	ldr	r3, [r3, #0]
 805648a:	4299      	cmp	r1, r3
 805648c:	d112      	bne.n	80564b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 805648e:	687b      	ldr	r3, [r7, #4]
 8056490:	2b00      	cmp	r3, #0
 8056492:	d00c      	beq.n	80564ae <etharp_find_entry+0xc2>
 8056494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056498:	4989      	ldr	r1, [pc, #548]	; (80566c0 <etharp_find_entry+0x2d4>)
 805649a:	4613      	mov	r3, r2
 805649c:	005b      	lsls	r3, r3, #1
 805649e:	4413      	add	r3, r2
 80564a0:	00db      	lsls	r3, r3, #3
 80564a2:	440b      	add	r3, r1
 80564a4:	3308      	adds	r3, #8
 80564a6:	681b      	ldr	r3, [r3, #0]
 80564a8:	687a      	ldr	r2, [r7, #4]
 80564aa:	429a      	cmp	r2, r3
 80564ac:	d102      	bne.n	80564b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80564ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80564b2:	e100      	b.n	80566b6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80564b4:	7dfb      	ldrb	r3, [r7, #23]
 80564b6:	2b01      	cmp	r3, #1
 80564b8:	d140      	bne.n	805653c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80564ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80564be:	4980      	ldr	r1, [pc, #512]	; (80566c0 <etharp_find_entry+0x2d4>)
 80564c0:	4613      	mov	r3, r2
 80564c2:	005b      	lsls	r3, r3, #1
 80564c4:	4413      	add	r3, r2
 80564c6:	00db      	lsls	r3, r3, #3
 80564c8:	440b      	add	r3, r1
 80564ca:	681b      	ldr	r3, [r3, #0]
 80564cc:	2b00      	cmp	r3, #0
 80564ce:	d01a      	beq.n	8056506 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80564d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80564d4:	497a      	ldr	r1, [pc, #488]	; (80566c0 <etharp_find_entry+0x2d4>)
 80564d6:	4613      	mov	r3, r2
 80564d8:	005b      	lsls	r3, r3, #1
 80564da:	4413      	add	r3, r2
 80564dc:	00db      	lsls	r3, r3, #3
 80564de:	440b      	add	r3, r1
 80564e0:	3312      	adds	r3, #18
 80564e2:	881b      	ldrh	r3, [r3, #0]
 80564e4:	8bba      	ldrh	r2, [r7, #28]
 80564e6:	429a      	cmp	r2, r3
 80564e8:	d845      	bhi.n	8056576 <etharp_find_entry+0x18a>
            old_queue = i;
 80564ea:	8c3b      	ldrh	r3, [r7, #32]
 80564ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80564ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80564f2:	4973      	ldr	r1, [pc, #460]	; (80566c0 <etharp_find_entry+0x2d4>)
 80564f4:	4613      	mov	r3, r2
 80564f6:	005b      	lsls	r3, r3, #1
 80564f8:	4413      	add	r3, r2
 80564fa:	00db      	lsls	r3, r3, #3
 80564fc:	440b      	add	r3, r1
 80564fe:	3312      	adds	r3, #18
 8056500:	881b      	ldrh	r3, [r3, #0]
 8056502:	83bb      	strh	r3, [r7, #28]
 8056504:	e037      	b.n	8056576 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8056506:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 805650a:	496d      	ldr	r1, [pc, #436]	; (80566c0 <etharp_find_entry+0x2d4>)
 805650c:	4613      	mov	r3, r2
 805650e:	005b      	lsls	r3, r3, #1
 8056510:	4413      	add	r3, r2
 8056512:	00db      	lsls	r3, r3, #3
 8056514:	440b      	add	r3, r1
 8056516:	3312      	adds	r3, #18
 8056518:	881b      	ldrh	r3, [r3, #0]
 805651a:	8b7a      	ldrh	r2, [r7, #26]
 805651c:	429a      	cmp	r2, r3
 805651e:	d82a      	bhi.n	8056576 <etharp_find_entry+0x18a>
            old_pending = i;
 8056520:	8c3b      	ldrh	r3, [r7, #32]
 8056522:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8056524:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056528:	4965      	ldr	r1, [pc, #404]	; (80566c0 <etharp_find_entry+0x2d4>)
 805652a:	4613      	mov	r3, r2
 805652c:	005b      	lsls	r3, r3, #1
 805652e:	4413      	add	r3, r2
 8056530:	00db      	lsls	r3, r3, #3
 8056532:	440b      	add	r3, r1
 8056534:	3312      	adds	r3, #18
 8056536:	881b      	ldrh	r3, [r3, #0]
 8056538:	837b      	strh	r3, [r7, #26]
 805653a:	e01c      	b.n	8056576 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 805653c:	7dfb      	ldrb	r3, [r7, #23]
 805653e:	2b01      	cmp	r3, #1
 8056540:	d919      	bls.n	8056576 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8056542:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056546:	495e      	ldr	r1, [pc, #376]	; (80566c0 <etharp_find_entry+0x2d4>)
 8056548:	4613      	mov	r3, r2
 805654a:	005b      	lsls	r3, r3, #1
 805654c:	4413      	add	r3, r2
 805654e:	00db      	lsls	r3, r3, #3
 8056550:	440b      	add	r3, r1
 8056552:	3312      	adds	r3, #18
 8056554:	881b      	ldrh	r3, [r3, #0]
 8056556:	8b3a      	ldrh	r2, [r7, #24]
 8056558:	429a      	cmp	r2, r3
 805655a:	d80c      	bhi.n	8056576 <etharp_find_entry+0x18a>
            old_stable = i;
 805655c:	8c3b      	ldrh	r3, [r7, #32]
 805655e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8056560:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056564:	4956      	ldr	r1, [pc, #344]	; (80566c0 <etharp_find_entry+0x2d4>)
 8056566:	4613      	mov	r3, r2
 8056568:	005b      	lsls	r3, r3, #1
 805656a:	4413      	add	r3, r2
 805656c:	00db      	lsls	r3, r3, #3
 805656e:	440b      	add	r3, r1
 8056570:	3312      	adds	r3, #18
 8056572:	881b      	ldrh	r3, [r3, #0]
 8056574:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8056576:	8c3b      	ldrh	r3, [r7, #32]
 8056578:	3301      	adds	r3, #1
 805657a:	b29b      	uxth	r3, r3
 805657c:	843b      	strh	r3, [r7, #32]
 805657e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8056582:	2b09      	cmp	r3, #9
 8056584:	f77f af4c 	ble.w	8056420 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8056588:	7afb      	ldrb	r3, [r7, #11]
 805658a:	f003 0302 	and.w	r3, r3, #2
 805658e:	2b00      	cmp	r3, #0
 8056590:	d108      	bne.n	80565a4 <etharp_find_entry+0x1b8>
 8056592:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8056596:	2b0a      	cmp	r3, #10
 8056598:	d107      	bne.n	80565aa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 805659a:	7afb      	ldrb	r3, [r7, #11]
 805659c:	f003 0301 	and.w	r3, r3, #1
 80565a0:	2b00      	cmp	r3, #0
 80565a2:	d102      	bne.n	80565aa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80565a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80565a8:	e085      	b.n	80566b6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80565aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80565ae:	2b09      	cmp	r3, #9
 80565b0:	dc02      	bgt.n	80565b8 <etharp_find_entry+0x1cc>
    i = empty;
 80565b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80565b4:	843b      	strh	r3, [r7, #32]
 80565b6:	e039      	b.n	805662c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80565b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80565bc:	2b09      	cmp	r3, #9
 80565be:	dc14      	bgt.n	80565ea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80565c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80565c2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80565c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80565c8:	493d      	ldr	r1, [pc, #244]	; (80566c0 <etharp_find_entry+0x2d4>)
 80565ca:	4613      	mov	r3, r2
 80565cc:	005b      	lsls	r3, r3, #1
 80565ce:	4413      	add	r3, r2
 80565d0:	00db      	lsls	r3, r3, #3
 80565d2:	440b      	add	r3, r1
 80565d4:	681b      	ldr	r3, [r3, #0]
 80565d6:	2b00      	cmp	r3, #0
 80565d8:	d018      	beq.n	805660c <etharp_find_entry+0x220>
 80565da:	4b3a      	ldr	r3, [pc, #232]	; (80566c4 <etharp_find_entry+0x2d8>)
 80565dc:	f240 126d 	movw	r2, #365	; 0x16d
 80565e0:	493b      	ldr	r1, [pc, #236]	; (80566d0 <etharp_find_entry+0x2e4>)
 80565e2:	483a      	ldr	r0, [pc, #232]	; (80566cc <etharp_find_entry+0x2e0>)
 80565e4:	f002 fd26 	bl	8059034 <iprintf>
 80565e8:	e010      	b.n	805660c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80565ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80565ee:	2b09      	cmp	r3, #9
 80565f0:	dc02      	bgt.n	80565f8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80565f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80565f4:	843b      	strh	r3, [r7, #32]
 80565f6:	e009      	b.n	805660c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80565f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80565fc:	2b09      	cmp	r3, #9
 80565fe:	dc02      	bgt.n	8056606 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8056600:	8bfb      	ldrh	r3, [r7, #30]
 8056602:	843b      	strh	r3, [r7, #32]
 8056604:	e002      	b.n	805660c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8056606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 805660a:	e054      	b.n	80566b6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 805660c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8056610:	2b09      	cmp	r3, #9
 8056612:	dd06      	ble.n	8056622 <etharp_find_entry+0x236>
 8056614:	4b2b      	ldr	r3, [pc, #172]	; (80566c4 <etharp_find_entry+0x2d8>)
 8056616:	f240 127f 	movw	r2, #383	; 0x17f
 805661a:	492e      	ldr	r1, [pc, #184]	; (80566d4 <etharp_find_entry+0x2e8>)
 805661c:	482b      	ldr	r0, [pc, #172]	; (80566cc <etharp_find_entry+0x2e0>)
 805661e:	f002 fd09 	bl	8059034 <iprintf>
    etharp_free_entry(i);
 8056622:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8056626:	4618      	mov	r0, r3
 8056628:	f7ff fe06 	bl	8056238 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 805662c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8056630:	2b09      	cmp	r3, #9
 8056632:	dd06      	ble.n	8056642 <etharp_find_entry+0x256>
 8056634:	4b23      	ldr	r3, [pc, #140]	; (80566c4 <etharp_find_entry+0x2d8>)
 8056636:	f240 1283 	movw	r2, #387	; 0x183
 805663a:	4926      	ldr	r1, [pc, #152]	; (80566d4 <etharp_find_entry+0x2e8>)
 805663c:	4823      	ldr	r0, [pc, #140]	; (80566cc <etharp_find_entry+0x2e0>)
 805663e:	f002 fcf9 	bl	8059034 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8056642:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056646:	491e      	ldr	r1, [pc, #120]	; (80566c0 <etharp_find_entry+0x2d4>)
 8056648:	4613      	mov	r3, r2
 805664a:	005b      	lsls	r3, r3, #1
 805664c:	4413      	add	r3, r2
 805664e:	00db      	lsls	r3, r3, #3
 8056650:	440b      	add	r3, r1
 8056652:	3314      	adds	r3, #20
 8056654:	781b      	ldrb	r3, [r3, #0]
 8056656:	2b00      	cmp	r3, #0
 8056658:	d006      	beq.n	8056668 <etharp_find_entry+0x27c>
 805665a:	4b1a      	ldr	r3, [pc, #104]	; (80566c4 <etharp_find_entry+0x2d8>)
 805665c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8056660:	491d      	ldr	r1, [pc, #116]	; (80566d8 <etharp_find_entry+0x2ec>)
 8056662:	481a      	ldr	r0, [pc, #104]	; (80566cc <etharp_find_entry+0x2e0>)
 8056664:	f002 fce6 	bl	8059034 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8056668:	68fb      	ldr	r3, [r7, #12]
 805666a:	2b00      	cmp	r3, #0
 805666c:	d00b      	beq.n	8056686 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 805666e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8056672:	68fb      	ldr	r3, [r7, #12]
 8056674:	6819      	ldr	r1, [r3, #0]
 8056676:	4812      	ldr	r0, [pc, #72]	; (80566c0 <etharp_find_entry+0x2d4>)
 8056678:	4613      	mov	r3, r2
 805667a:	005b      	lsls	r3, r3, #1
 805667c:	4413      	add	r3, r2
 805667e:	00db      	lsls	r3, r3, #3
 8056680:	4403      	add	r3, r0
 8056682:	3304      	adds	r3, #4
 8056684:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8056686:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 805668a:	490d      	ldr	r1, [pc, #52]	; (80566c0 <etharp_find_entry+0x2d4>)
 805668c:	4613      	mov	r3, r2
 805668e:	005b      	lsls	r3, r3, #1
 8056690:	4413      	add	r3, r2
 8056692:	00db      	lsls	r3, r3, #3
 8056694:	440b      	add	r3, r1
 8056696:	3312      	adds	r3, #18
 8056698:	2200      	movs	r2, #0
 805669a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 805669c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80566a0:	4907      	ldr	r1, [pc, #28]	; (80566c0 <etharp_find_entry+0x2d4>)
 80566a2:	4613      	mov	r3, r2
 80566a4:	005b      	lsls	r3, r3, #1
 80566a6:	4413      	add	r3, r2
 80566a8:	00db      	lsls	r3, r3, #3
 80566aa:	440b      	add	r3, r1
 80566ac:	3308      	adds	r3, #8
 80566ae:	687a      	ldr	r2, [r7, #4]
 80566b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80566b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80566b6:	4618      	mov	r0, r3
 80566b8:	3728      	adds	r7, #40	; 0x28
 80566ba:	46bd      	mov	sp, r7
 80566bc:	bd80      	pop	{r7, pc}
 80566be:	bf00      	nop
 80566c0:	2000b62c 	.word	0x2000b62c
 80566c4:	0805d12c 	.word	0x0805d12c
 80566c8:	0805d164 	.word	0x0805d164
 80566cc:	0805d1a4 	.word	0x0805d1a4
 80566d0:	0805d1cc 	.word	0x0805d1cc
 80566d4:	0805d1e4 	.word	0x0805d1e4
 80566d8:	0805d1f8 	.word	0x0805d1f8

080566dc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80566dc:	b580      	push	{r7, lr}
 80566de:	b088      	sub	sp, #32
 80566e0:	af02      	add	r7, sp, #8
 80566e2:	60f8      	str	r0, [r7, #12]
 80566e4:	60b9      	str	r1, [r7, #8]
 80566e6:	607a      	str	r2, [r7, #4]
 80566e8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80566ea:	68fb      	ldr	r3, [r7, #12]
 80566ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80566f0:	2b06      	cmp	r3, #6
 80566f2:	d006      	beq.n	8056702 <etharp_update_arp_entry+0x26>
 80566f4:	4b48      	ldr	r3, [pc, #288]	; (8056818 <etharp_update_arp_entry+0x13c>)
 80566f6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80566fa:	4948      	ldr	r1, [pc, #288]	; (805681c <etharp_update_arp_entry+0x140>)
 80566fc:	4848      	ldr	r0, [pc, #288]	; (8056820 <etharp_update_arp_entry+0x144>)
 80566fe:	f002 fc99 	bl	8059034 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8056702:	68bb      	ldr	r3, [r7, #8]
 8056704:	2b00      	cmp	r3, #0
 8056706:	d012      	beq.n	805672e <etharp_update_arp_entry+0x52>
 8056708:	68bb      	ldr	r3, [r7, #8]
 805670a:	681b      	ldr	r3, [r3, #0]
 805670c:	2b00      	cmp	r3, #0
 805670e:	d00e      	beq.n	805672e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8056710:	68bb      	ldr	r3, [r7, #8]
 8056712:	681b      	ldr	r3, [r3, #0]
 8056714:	68f9      	ldr	r1, [r7, #12]
 8056716:	4618      	mov	r0, r3
 8056718:	f001 f8fe 	bl	8057918 <ip4_addr_isbroadcast_u32>
 805671c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 805671e:	2b00      	cmp	r3, #0
 8056720:	d105      	bne.n	805672e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8056722:	68bb      	ldr	r3, [r7, #8]
 8056724:	681b      	ldr	r3, [r3, #0]
 8056726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 805672a:	2be0      	cmp	r3, #224	; 0xe0
 805672c:	d102      	bne.n	8056734 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 805672e:	f06f 030f 	mvn.w	r3, #15
 8056732:	e06c      	b.n	805680e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8056734:	78fb      	ldrb	r3, [r7, #3]
 8056736:	68fa      	ldr	r2, [r7, #12]
 8056738:	4619      	mov	r1, r3
 805673a:	68b8      	ldr	r0, [r7, #8]
 805673c:	f7ff fe56 	bl	80563ec <etharp_find_entry>
 8056740:	4603      	mov	r3, r0
 8056742:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8056744:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8056748:	2b00      	cmp	r3, #0
 805674a:	da02      	bge.n	8056752 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 805674c:	8afb      	ldrh	r3, [r7, #22]
 805674e:	b25b      	sxtb	r3, r3
 8056750:	e05d      	b.n	805680e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8056752:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8056756:	4933      	ldr	r1, [pc, #204]	; (8056824 <etharp_update_arp_entry+0x148>)
 8056758:	4613      	mov	r3, r2
 805675a:	005b      	lsls	r3, r3, #1
 805675c:	4413      	add	r3, r2
 805675e:	00db      	lsls	r3, r3, #3
 8056760:	440b      	add	r3, r1
 8056762:	3314      	adds	r3, #20
 8056764:	2202      	movs	r2, #2
 8056766:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8056768:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 805676c:	492d      	ldr	r1, [pc, #180]	; (8056824 <etharp_update_arp_entry+0x148>)
 805676e:	4613      	mov	r3, r2
 8056770:	005b      	lsls	r3, r3, #1
 8056772:	4413      	add	r3, r2
 8056774:	00db      	lsls	r3, r3, #3
 8056776:	440b      	add	r3, r1
 8056778:	3308      	adds	r3, #8
 805677a:	68fa      	ldr	r2, [r7, #12]
 805677c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 805677e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8056782:	4613      	mov	r3, r2
 8056784:	005b      	lsls	r3, r3, #1
 8056786:	4413      	add	r3, r2
 8056788:	00db      	lsls	r3, r3, #3
 805678a:	3308      	adds	r3, #8
 805678c:	4a25      	ldr	r2, [pc, #148]	; (8056824 <etharp_update_arp_entry+0x148>)
 805678e:	4413      	add	r3, r2
 8056790:	3304      	adds	r3, #4
 8056792:	2206      	movs	r2, #6
 8056794:	6879      	ldr	r1, [r7, #4]
 8056796:	4618      	mov	r0, r3
 8056798:	f002 fb3c 	bl	8058e14 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 805679c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80567a0:	4920      	ldr	r1, [pc, #128]	; (8056824 <etharp_update_arp_entry+0x148>)
 80567a2:	4613      	mov	r3, r2
 80567a4:	005b      	lsls	r3, r3, #1
 80567a6:	4413      	add	r3, r2
 80567a8:	00db      	lsls	r3, r3, #3
 80567aa:	440b      	add	r3, r1
 80567ac:	3312      	adds	r3, #18
 80567ae:	2200      	movs	r2, #0
 80567b0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80567b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80567b6:	491b      	ldr	r1, [pc, #108]	; (8056824 <etharp_update_arp_entry+0x148>)
 80567b8:	4613      	mov	r3, r2
 80567ba:	005b      	lsls	r3, r3, #1
 80567bc:	4413      	add	r3, r2
 80567be:	00db      	lsls	r3, r3, #3
 80567c0:	440b      	add	r3, r1
 80567c2:	681b      	ldr	r3, [r3, #0]
 80567c4:	2b00      	cmp	r3, #0
 80567c6:	d021      	beq.n	805680c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80567c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80567cc:	4915      	ldr	r1, [pc, #84]	; (8056824 <etharp_update_arp_entry+0x148>)
 80567ce:	4613      	mov	r3, r2
 80567d0:	005b      	lsls	r3, r3, #1
 80567d2:	4413      	add	r3, r2
 80567d4:	00db      	lsls	r3, r3, #3
 80567d6:	440b      	add	r3, r1
 80567d8:	681b      	ldr	r3, [r3, #0]
 80567da:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80567dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80567e0:	4910      	ldr	r1, [pc, #64]	; (8056824 <etharp_update_arp_entry+0x148>)
 80567e2:	4613      	mov	r3, r2
 80567e4:	005b      	lsls	r3, r3, #1
 80567e6:	4413      	add	r3, r2
 80567e8:	00db      	lsls	r3, r3, #3
 80567ea:	440b      	add	r3, r1
 80567ec:	2200      	movs	r2, #0
 80567ee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80567f0:	68fb      	ldr	r3, [r7, #12]
 80567f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80567f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80567fa:	9300      	str	r3, [sp, #0]
 80567fc:	687b      	ldr	r3, [r7, #4]
 80567fe:	6939      	ldr	r1, [r7, #16]
 8056800:	68f8      	ldr	r0, [r7, #12]
 8056802:	f001 ff97 	bl	8058734 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8056806:	6938      	ldr	r0, [r7, #16]
 8056808:	f7f8 fd7c 	bl	804f304 <pbuf_free>
  }
  return ERR_OK;
 805680c:	2300      	movs	r3, #0
}
 805680e:	4618      	mov	r0, r3
 8056810:	3718      	adds	r7, #24
 8056812:	46bd      	mov	sp, r7
 8056814:	bd80      	pop	{r7, pc}
 8056816:	bf00      	nop
 8056818:	0805d12c 	.word	0x0805d12c
 805681c:	0805d224 	.word	0x0805d224
 8056820:	0805d1a4 	.word	0x0805d1a4
 8056824:	2000b62c 	.word	0x2000b62c

08056828 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8056828:	b580      	push	{r7, lr}
 805682a:	b084      	sub	sp, #16
 805682c:	af00      	add	r7, sp, #0
 805682e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8056830:	2300      	movs	r3, #0
 8056832:	60fb      	str	r3, [r7, #12]
 8056834:	e01e      	b.n	8056874 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8056836:	4913      	ldr	r1, [pc, #76]	; (8056884 <etharp_cleanup_netif+0x5c>)
 8056838:	68fa      	ldr	r2, [r7, #12]
 805683a:	4613      	mov	r3, r2
 805683c:	005b      	lsls	r3, r3, #1
 805683e:	4413      	add	r3, r2
 8056840:	00db      	lsls	r3, r3, #3
 8056842:	440b      	add	r3, r1
 8056844:	3314      	adds	r3, #20
 8056846:	781b      	ldrb	r3, [r3, #0]
 8056848:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 805684a:	7afb      	ldrb	r3, [r7, #11]
 805684c:	2b00      	cmp	r3, #0
 805684e:	d00e      	beq.n	805686e <etharp_cleanup_netif+0x46>
 8056850:	490c      	ldr	r1, [pc, #48]	; (8056884 <etharp_cleanup_netif+0x5c>)
 8056852:	68fa      	ldr	r2, [r7, #12]
 8056854:	4613      	mov	r3, r2
 8056856:	005b      	lsls	r3, r3, #1
 8056858:	4413      	add	r3, r2
 805685a:	00db      	lsls	r3, r3, #3
 805685c:	440b      	add	r3, r1
 805685e:	3308      	adds	r3, #8
 8056860:	681b      	ldr	r3, [r3, #0]
 8056862:	687a      	ldr	r2, [r7, #4]
 8056864:	429a      	cmp	r2, r3
 8056866:	d102      	bne.n	805686e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8056868:	68f8      	ldr	r0, [r7, #12]
 805686a:	f7ff fce5 	bl	8056238 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 805686e:	68fb      	ldr	r3, [r7, #12]
 8056870:	3301      	adds	r3, #1
 8056872:	60fb      	str	r3, [r7, #12]
 8056874:	68fb      	ldr	r3, [r7, #12]
 8056876:	2b09      	cmp	r3, #9
 8056878:	dddd      	ble.n	8056836 <etharp_cleanup_netif+0xe>
    }
  }
}
 805687a:	bf00      	nop
 805687c:	bf00      	nop
 805687e:	3710      	adds	r7, #16
 8056880:	46bd      	mov	sp, r7
 8056882:	bd80      	pop	{r7, pc}
 8056884:	2000b62c 	.word	0x2000b62c

08056888 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8056888:	b5b0      	push	{r4, r5, r7, lr}
 805688a:	b08a      	sub	sp, #40	; 0x28
 805688c:	af04      	add	r7, sp, #16
 805688e:	6078      	str	r0, [r7, #4]
 8056890:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8056892:	683b      	ldr	r3, [r7, #0]
 8056894:	2b00      	cmp	r3, #0
 8056896:	d107      	bne.n	80568a8 <etharp_input+0x20>
 8056898:	4b3d      	ldr	r3, [pc, #244]	; (8056990 <etharp_input+0x108>)
 805689a:	f240 228a 	movw	r2, #650	; 0x28a
 805689e:	493d      	ldr	r1, [pc, #244]	; (8056994 <etharp_input+0x10c>)
 80568a0:	483d      	ldr	r0, [pc, #244]	; (8056998 <etharp_input+0x110>)
 80568a2:	f002 fbc7 	bl	8059034 <iprintf>
 80568a6:	e06f      	b.n	8056988 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80568a8:	687b      	ldr	r3, [r7, #4]
 80568aa:	685b      	ldr	r3, [r3, #4]
 80568ac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80568ae:	693b      	ldr	r3, [r7, #16]
 80568b0:	881b      	ldrh	r3, [r3, #0]
 80568b2:	b29b      	uxth	r3, r3
 80568b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80568b8:	d10c      	bne.n	80568d4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80568ba:	693b      	ldr	r3, [r7, #16]
 80568bc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80568be:	2b06      	cmp	r3, #6
 80568c0:	d108      	bne.n	80568d4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80568c2:	693b      	ldr	r3, [r7, #16]
 80568c4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80568c6:	2b04      	cmp	r3, #4
 80568c8:	d104      	bne.n	80568d4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80568ca:	693b      	ldr	r3, [r7, #16]
 80568cc:	885b      	ldrh	r3, [r3, #2]
 80568ce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80568d0:	2b08      	cmp	r3, #8
 80568d2:	d003      	beq.n	80568dc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80568d4:	6878      	ldr	r0, [r7, #4]
 80568d6:	f7f8 fd15 	bl	804f304 <pbuf_free>
    return;
 80568da:	e055      	b.n	8056988 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80568dc:	693b      	ldr	r3, [r7, #16]
 80568de:	330e      	adds	r3, #14
 80568e0:	681b      	ldr	r3, [r3, #0]
 80568e2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80568e4:	693b      	ldr	r3, [r7, #16]
 80568e6:	3318      	adds	r3, #24
 80568e8:	681b      	ldr	r3, [r3, #0]
 80568ea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80568ec:	683b      	ldr	r3, [r7, #0]
 80568ee:	3304      	adds	r3, #4
 80568f0:	681b      	ldr	r3, [r3, #0]
 80568f2:	2b00      	cmp	r3, #0
 80568f4:	d102      	bne.n	80568fc <etharp_input+0x74>
    for_us = 0;
 80568f6:	2300      	movs	r3, #0
 80568f8:	75fb      	strb	r3, [r7, #23]
 80568fa:	e009      	b.n	8056910 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80568fc:	68ba      	ldr	r2, [r7, #8]
 80568fe:	683b      	ldr	r3, [r7, #0]
 8056900:	3304      	adds	r3, #4
 8056902:	681b      	ldr	r3, [r3, #0]
 8056904:	429a      	cmp	r2, r3
 8056906:	bf0c      	ite	eq
 8056908:	2301      	moveq	r3, #1
 805690a:	2300      	movne	r3, #0
 805690c:	b2db      	uxtb	r3, r3
 805690e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8056910:	693b      	ldr	r3, [r7, #16]
 8056912:	f103 0208 	add.w	r2, r3, #8
 8056916:	7dfb      	ldrb	r3, [r7, #23]
 8056918:	2b00      	cmp	r3, #0
 805691a:	d001      	beq.n	8056920 <etharp_input+0x98>
 805691c:	2301      	movs	r3, #1
 805691e:	e000      	b.n	8056922 <etharp_input+0x9a>
 8056920:	2302      	movs	r3, #2
 8056922:	f107 010c 	add.w	r1, r7, #12
 8056926:	6838      	ldr	r0, [r7, #0]
 8056928:	f7ff fed8 	bl	80566dc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 805692c:	693b      	ldr	r3, [r7, #16]
 805692e:	88db      	ldrh	r3, [r3, #6]
 8056930:	b29b      	uxth	r3, r3
 8056932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8056936:	d003      	beq.n	8056940 <etharp_input+0xb8>
 8056938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 805693c:	d01e      	beq.n	805697c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 805693e:	e020      	b.n	8056982 <etharp_input+0xfa>
      if (for_us) {
 8056940:	7dfb      	ldrb	r3, [r7, #23]
 8056942:	2b00      	cmp	r3, #0
 8056944:	d01c      	beq.n	8056980 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8056946:	683b      	ldr	r3, [r7, #0]
 8056948:	f103 0026 	add.w	r0, r3, #38	; 0x26
 805694c:	693b      	ldr	r3, [r7, #16]
 805694e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8056952:	683b      	ldr	r3, [r7, #0]
 8056954:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8056958:	683b      	ldr	r3, [r7, #0]
 805695a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 805695c:	693a      	ldr	r2, [r7, #16]
 805695e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8056960:	2102      	movs	r1, #2
 8056962:	9103      	str	r1, [sp, #12]
 8056964:	f107 010c 	add.w	r1, r7, #12
 8056968:	9102      	str	r1, [sp, #8]
 805696a:	9201      	str	r2, [sp, #4]
 805696c:	9300      	str	r3, [sp, #0]
 805696e:	462b      	mov	r3, r5
 8056970:	4622      	mov	r2, r4
 8056972:	4601      	mov	r1, r0
 8056974:	6838      	ldr	r0, [r7, #0]
 8056976:	f000 faeb 	bl	8056f50 <etharp_raw>
      break;
 805697a:	e001      	b.n	8056980 <etharp_input+0xf8>
      break;
 805697c:	bf00      	nop
 805697e:	e000      	b.n	8056982 <etharp_input+0xfa>
      break;
 8056980:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8056982:	6878      	ldr	r0, [r7, #4]
 8056984:	f7f8 fcbe 	bl	804f304 <pbuf_free>
}
 8056988:	3718      	adds	r7, #24
 805698a:	46bd      	mov	sp, r7
 805698c:	bdb0      	pop	{r4, r5, r7, pc}
 805698e:	bf00      	nop
 8056990:	0805d12c 	.word	0x0805d12c
 8056994:	0805d27c 	.word	0x0805d27c
 8056998:	0805d1a4 	.word	0x0805d1a4

0805699c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 805699c:	b580      	push	{r7, lr}
 805699e:	b086      	sub	sp, #24
 80569a0:	af02      	add	r7, sp, #8
 80569a2:	60f8      	str	r0, [r7, #12]
 80569a4:	60b9      	str	r1, [r7, #8]
 80569a6:	4613      	mov	r3, r2
 80569a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80569aa:	79fa      	ldrb	r2, [r7, #7]
 80569ac:	4944      	ldr	r1, [pc, #272]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 80569ae:	4613      	mov	r3, r2
 80569b0:	005b      	lsls	r3, r3, #1
 80569b2:	4413      	add	r3, r2
 80569b4:	00db      	lsls	r3, r3, #3
 80569b6:	440b      	add	r3, r1
 80569b8:	3314      	adds	r3, #20
 80569ba:	781b      	ldrb	r3, [r3, #0]
 80569bc:	2b01      	cmp	r3, #1
 80569be:	d806      	bhi.n	80569ce <etharp_output_to_arp_index+0x32>
 80569c0:	4b40      	ldr	r3, [pc, #256]	; (8056ac4 <etharp_output_to_arp_index+0x128>)
 80569c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80569c6:	4940      	ldr	r1, [pc, #256]	; (8056ac8 <etharp_output_to_arp_index+0x12c>)
 80569c8:	4840      	ldr	r0, [pc, #256]	; (8056acc <etharp_output_to_arp_index+0x130>)
 80569ca:	f002 fb33 	bl	8059034 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80569ce:	79fa      	ldrb	r2, [r7, #7]
 80569d0:	493b      	ldr	r1, [pc, #236]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 80569d2:	4613      	mov	r3, r2
 80569d4:	005b      	lsls	r3, r3, #1
 80569d6:	4413      	add	r3, r2
 80569d8:	00db      	lsls	r3, r3, #3
 80569da:	440b      	add	r3, r1
 80569dc:	3314      	adds	r3, #20
 80569de:	781b      	ldrb	r3, [r3, #0]
 80569e0:	2b02      	cmp	r3, #2
 80569e2:	d153      	bne.n	8056a8c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80569e4:	79fa      	ldrb	r2, [r7, #7]
 80569e6:	4936      	ldr	r1, [pc, #216]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 80569e8:	4613      	mov	r3, r2
 80569ea:	005b      	lsls	r3, r3, #1
 80569ec:	4413      	add	r3, r2
 80569ee:	00db      	lsls	r3, r3, #3
 80569f0:	440b      	add	r3, r1
 80569f2:	3312      	adds	r3, #18
 80569f4:	881b      	ldrh	r3, [r3, #0]
 80569f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80569fa:	d919      	bls.n	8056a30 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80569fc:	79fa      	ldrb	r2, [r7, #7]
 80569fe:	4613      	mov	r3, r2
 8056a00:	005b      	lsls	r3, r3, #1
 8056a02:	4413      	add	r3, r2
 8056a04:	00db      	lsls	r3, r3, #3
 8056a06:	4a2e      	ldr	r2, [pc, #184]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056a08:	4413      	add	r3, r2
 8056a0a:	3304      	adds	r3, #4
 8056a0c:	4619      	mov	r1, r3
 8056a0e:	68f8      	ldr	r0, [r7, #12]
 8056a10:	f000 fb4c 	bl	80570ac <etharp_request>
 8056a14:	4603      	mov	r3, r0
 8056a16:	2b00      	cmp	r3, #0
 8056a18:	d138      	bne.n	8056a8c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8056a1a:	79fa      	ldrb	r2, [r7, #7]
 8056a1c:	4928      	ldr	r1, [pc, #160]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056a1e:	4613      	mov	r3, r2
 8056a20:	005b      	lsls	r3, r3, #1
 8056a22:	4413      	add	r3, r2
 8056a24:	00db      	lsls	r3, r3, #3
 8056a26:	440b      	add	r3, r1
 8056a28:	3314      	adds	r3, #20
 8056a2a:	2203      	movs	r2, #3
 8056a2c:	701a      	strb	r2, [r3, #0]
 8056a2e:	e02d      	b.n	8056a8c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8056a30:	79fa      	ldrb	r2, [r7, #7]
 8056a32:	4923      	ldr	r1, [pc, #140]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056a34:	4613      	mov	r3, r2
 8056a36:	005b      	lsls	r3, r3, #1
 8056a38:	4413      	add	r3, r2
 8056a3a:	00db      	lsls	r3, r3, #3
 8056a3c:	440b      	add	r3, r1
 8056a3e:	3312      	adds	r3, #18
 8056a40:	881b      	ldrh	r3, [r3, #0]
 8056a42:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8056a46:	d321      	bcc.n	8056a8c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8056a48:	79fa      	ldrb	r2, [r7, #7]
 8056a4a:	4613      	mov	r3, r2
 8056a4c:	005b      	lsls	r3, r3, #1
 8056a4e:	4413      	add	r3, r2
 8056a50:	00db      	lsls	r3, r3, #3
 8056a52:	4a1b      	ldr	r2, [pc, #108]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056a54:	4413      	add	r3, r2
 8056a56:	1d19      	adds	r1, r3, #4
 8056a58:	79fa      	ldrb	r2, [r7, #7]
 8056a5a:	4613      	mov	r3, r2
 8056a5c:	005b      	lsls	r3, r3, #1
 8056a5e:	4413      	add	r3, r2
 8056a60:	00db      	lsls	r3, r3, #3
 8056a62:	3308      	adds	r3, #8
 8056a64:	4a16      	ldr	r2, [pc, #88]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056a66:	4413      	add	r3, r2
 8056a68:	3304      	adds	r3, #4
 8056a6a:	461a      	mov	r2, r3
 8056a6c:	68f8      	ldr	r0, [r7, #12]
 8056a6e:	f000 fafb 	bl	8057068 <etharp_request_dst>
 8056a72:	4603      	mov	r3, r0
 8056a74:	2b00      	cmp	r3, #0
 8056a76:	d109      	bne.n	8056a8c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8056a78:	79fa      	ldrb	r2, [r7, #7]
 8056a7a:	4911      	ldr	r1, [pc, #68]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056a7c:	4613      	mov	r3, r2
 8056a7e:	005b      	lsls	r3, r3, #1
 8056a80:	4413      	add	r3, r2
 8056a82:	00db      	lsls	r3, r3, #3
 8056a84:	440b      	add	r3, r1
 8056a86:	3314      	adds	r3, #20
 8056a88:	2203      	movs	r2, #3
 8056a8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8056a8c:	68fb      	ldr	r3, [r7, #12]
 8056a8e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8056a92:	79fa      	ldrb	r2, [r7, #7]
 8056a94:	4613      	mov	r3, r2
 8056a96:	005b      	lsls	r3, r3, #1
 8056a98:	4413      	add	r3, r2
 8056a9a:	00db      	lsls	r3, r3, #3
 8056a9c:	3308      	adds	r3, #8
 8056a9e:	4a08      	ldr	r2, [pc, #32]	; (8056ac0 <etharp_output_to_arp_index+0x124>)
 8056aa0:	4413      	add	r3, r2
 8056aa2:	3304      	adds	r3, #4
 8056aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8056aa8:	9200      	str	r2, [sp, #0]
 8056aaa:	460a      	mov	r2, r1
 8056aac:	68b9      	ldr	r1, [r7, #8]
 8056aae:	68f8      	ldr	r0, [r7, #12]
 8056ab0:	f001 fe40 	bl	8058734 <ethernet_output>
 8056ab4:	4603      	mov	r3, r0
}
 8056ab6:	4618      	mov	r0, r3
 8056ab8:	3710      	adds	r7, #16
 8056aba:	46bd      	mov	sp, r7
 8056abc:	bd80      	pop	{r7, pc}
 8056abe:	bf00      	nop
 8056ac0:	2000b62c 	.word	0x2000b62c
 8056ac4:	0805d12c 	.word	0x0805d12c
 8056ac8:	0805d29c 	.word	0x0805d29c
 8056acc:	0805d1a4 	.word	0x0805d1a4

08056ad0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8056ad0:	b580      	push	{r7, lr}
 8056ad2:	b08a      	sub	sp, #40	; 0x28
 8056ad4:	af02      	add	r7, sp, #8
 8056ad6:	60f8      	str	r0, [r7, #12]
 8056ad8:	60b9      	str	r1, [r7, #8]
 8056ada:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8056adc:	687b      	ldr	r3, [r7, #4]
 8056ade:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8056ae0:	68fb      	ldr	r3, [r7, #12]
 8056ae2:	2b00      	cmp	r3, #0
 8056ae4:	d106      	bne.n	8056af4 <etharp_output+0x24>
 8056ae6:	4b73      	ldr	r3, [pc, #460]	; (8056cb4 <etharp_output+0x1e4>)
 8056ae8:	f240 321e 	movw	r2, #798	; 0x31e
 8056aec:	4972      	ldr	r1, [pc, #456]	; (8056cb8 <etharp_output+0x1e8>)
 8056aee:	4873      	ldr	r0, [pc, #460]	; (8056cbc <etharp_output+0x1ec>)
 8056af0:	f002 faa0 	bl	8059034 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8056af4:	68bb      	ldr	r3, [r7, #8]
 8056af6:	2b00      	cmp	r3, #0
 8056af8:	d106      	bne.n	8056b08 <etharp_output+0x38>
 8056afa:	4b6e      	ldr	r3, [pc, #440]	; (8056cb4 <etharp_output+0x1e4>)
 8056afc:	f240 321f 	movw	r2, #799	; 0x31f
 8056b00:	496f      	ldr	r1, [pc, #444]	; (8056cc0 <etharp_output+0x1f0>)
 8056b02:	486e      	ldr	r0, [pc, #440]	; (8056cbc <etharp_output+0x1ec>)
 8056b04:	f002 fa96 	bl	8059034 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8056b08:	687b      	ldr	r3, [r7, #4]
 8056b0a:	2b00      	cmp	r3, #0
 8056b0c:	d106      	bne.n	8056b1c <etharp_output+0x4c>
 8056b0e:	4b69      	ldr	r3, [pc, #420]	; (8056cb4 <etharp_output+0x1e4>)
 8056b10:	f44f 7248 	mov.w	r2, #800	; 0x320
 8056b14:	496b      	ldr	r1, [pc, #428]	; (8056cc4 <etharp_output+0x1f4>)
 8056b16:	4869      	ldr	r0, [pc, #420]	; (8056cbc <etharp_output+0x1ec>)
 8056b18:	f002 fa8c 	bl	8059034 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8056b1c:	687b      	ldr	r3, [r7, #4]
 8056b1e:	681b      	ldr	r3, [r3, #0]
 8056b20:	68f9      	ldr	r1, [r7, #12]
 8056b22:	4618      	mov	r0, r3
 8056b24:	f000 fef8 	bl	8057918 <ip4_addr_isbroadcast_u32>
 8056b28:	4603      	mov	r3, r0
 8056b2a:	2b00      	cmp	r3, #0
 8056b2c:	d002      	beq.n	8056b34 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8056b2e:	4b66      	ldr	r3, [pc, #408]	; (8056cc8 <etharp_output+0x1f8>)
 8056b30:	61fb      	str	r3, [r7, #28]
 8056b32:	e0af      	b.n	8056c94 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8056b34:	687b      	ldr	r3, [r7, #4]
 8056b36:	681b      	ldr	r3, [r3, #0]
 8056b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8056b3c:	2be0      	cmp	r3, #224	; 0xe0
 8056b3e:	d118      	bne.n	8056b72 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8056b40:	2301      	movs	r3, #1
 8056b42:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8056b44:	2300      	movs	r3, #0
 8056b46:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8056b48:	235e      	movs	r3, #94	; 0x5e
 8056b4a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8056b4c:	687b      	ldr	r3, [r7, #4]
 8056b4e:	3301      	adds	r3, #1
 8056b50:	781b      	ldrb	r3, [r3, #0]
 8056b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8056b56:	b2db      	uxtb	r3, r3
 8056b58:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8056b5a:	687b      	ldr	r3, [r7, #4]
 8056b5c:	3302      	adds	r3, #2
 8056b5e:	781b      	ldrb	r3, [r3, #0]
 8056b60:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8056b62:	687b      	ldr	r3, [r7, #4]
 8056b64:	3303      	adds	r3, #3
 8056b66:	781b      	ldrb	r3, [r3, #0]
 8056b68:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8056b6a:	f107 0310 	add.w	r3, r7, #16
 8056b6e:	61fb      	str	r3, [r7, #28]
 8056b70:	e090      	b.n	8056c94 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8056b72:	687b      	ldr	r3, [r7, #4]
 8056b74:	681a      	ldr	r2, [r3, #0]
 8056b76:	68fb      	ldr	r3, [r7, #12]
 8056b78:	3304      	adds	r3, #4
 8056b7a:	681b      	ldr	r3, [r3, #0]
 8056b7c:	405a      	eors	r2, r3
 8056b7e:	68fb      	ldr	r3, [r7, #12]
 8056b80:	3308      	adds	r3, #8
 8056b82:	681b      	ldr	r3, [r3, #0]
 8056b84:	4013      	ands	r3, r2
 8056b86:	2b00      	cmp	r3, #0
 8056b88:	d012      	beq.n	8056bb0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8056b8a:	687b      	ldr	r3, [r7, #4]
 8056b8c:	681b      	ldr	r3, [r3, #0]
 8056b8e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8056b90:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8056b94:	4293      	cmp	r3, r2
 8056b96:	d00b      	beq.n	8056bb0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8056b98:	68fb      	ldr	r3, [r7, #12]
 8056b9a:	330c      	adds	r3, #12
 8056b9c:	681b      	ldr	r3, [r3, #0]
 8056b9e:	2b00      	cmp	r3, #0
 8056ba0:	d003      	beq.n	8056baa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8056ba2:	68fb      	ldr	r3, [r7, #12]
 8056ba4:	330c      	adds	r3, #12
 8056ba6:	61bb      	str	r3, [r7, #24]
 8056ba8:	e002      	b.n	8056bb0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8056baa:	f06f 0303 	mvn.w	r3, #3
 8056bae:	e07d      	b.n	8056cac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8056bb0:	4b46      	ldr	r3, [pc, #280]	; (8056ccc <etharp_output+0x1fc>)
 8056bb2:	781b      	ldrb	r3, [r3, #0]
 8056bb4:	4619      	mov	r1, r3
 8056bb6:	4a46      	ldr	r2, [pc, #280]	; (8056cd0 <etharp_output+0x200>)
 8056bb8:	460b      	mov	r3, r1
 8056bba:	005b      	lsls	r3, r3, #1
 8056bbc:	440b      	add	r3, r1
 8056bbe:	00db      	lsls	r3, r3, #3
 8056bc0:	4413      	add	r3, r2
 8056bc2:	3314      	adds	r3, #20
 8056bc4:	781b      	ldrb	r3, [r3, #0]
 8056bc6:	2b01      	cmp	r3, #1
 8056bc8:	d925      	bls.n	8056c16 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8056bca:	4b40      	ldr	r3, [pc, #256]	; (8056ccc <etharp_output+0x1fc>)
 8056bcc:	781b      	ldrb	r3, [r3, #0]
 8056bce:	4619      	mov	r1, r3
 8056bd0:	4a3f      	ldr	r2, [pc, #252]	; (8056cd0 <etharp_output+0x200>)
 8056bd2:	460b      	mov	r3, r1
 8056bd4:	005b      	lsls	r3, r3, #1
 8056bd6:	440b      	add	r3, r1
 8056bd8:	00db      	lsls	r3, r3, #3
 8056bda:	4413      	add	r3, r2
 8056bdc:	3308      	adds	r3, #8
 8056bde:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8056be0:	68fa      	ldr	r2, [r7, #12]
 8056be2:	429a      	cmp	r2, r3
 8056be4:	d117      	bne.n	8056c16 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8056be6:	69bb      	ldr	r3, [r7, #24]
 8056be8:	681a      	ldr	r2, [r3, #0]
 8056bea:	4b38      	ldr	r3, [pc, #224]	; (8056ccc <etharp_output+0x1fc>)
 8056bec:	781b      	ldrb	r3, [r3, #0]
 8056bee:	4618      	mov	r0, r3
 8056bf0:	4937      	ldr	r1, [pc, #220]	; (8056cd0 <etharp_output+0x200>)
 8056bf2:	4603      	mov	r3, r0
 8056bf4:	005b      	lsls	r3, r3, #1
 8056bf6:	4403      	add	r3, r0
 8056bf8:	00db      	lsls	r3, r3, #3
 8056bfa:	440b      	add	r3, r1
 8056bfc:	3304      	adds	r3, #4
 8056bfe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8056c00:	429a      	cmp	r2, r3
 8056c02:	d108      	bne.n	8056c16 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8056c04:	4b31      	ldr	r3, [pc, #196]	; (8056ccc <etharp_output+0x1fc>)
 8056c06:	781b      	ldrb	r3, [r3, #0]
 8056c08:	461a      	mov	r2, r3
 8056c0a:	68b9      	ldr	r1, [r7, #8]
 8056c0c:	68f8      	ldr	r0, [r7, #12]
 8056c0e:	f7ff fec5 	bl	805699c <etharp_output_to_arp_index>
 8056c12:	4603      	mov	r3, r0
 8056c14:	e04a      	b.n	8056cac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8056c16:	2300      	movs	r3, #0
 8056c18:	75fb      	strb	r3, [r7, #23]
 8056c1a:	e031      	b.n	8056c80 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8056c1c:	7dfa      	ldrb	r2, [r7, #23]
 8056c1e:	492c      	ldr	r1, [pc, #176]	; (8056cd0 <etharp_output+0x200>)
 8056c20:	4613      	mov	r3, r2
 8056c22:	005b      	lsls	r3, r3, #1
 8056c24:	4413      	add	r3, r2
 8056c26:	00db      	lsls	r3, r3, #3
 8056c28:	440b      	add	r3, r1
 8056c2a:	3314      	adds	r3, #20
 8056c2c:	781b      	ldrb	r3, [r3, #0]
 8056c2e:	2b01      	cmp	r3, #1
 8056c30:	d923      	bls.n	8056c7a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8056c32:	7dfa      	ldrb	r2, [r7, #23]
 8056c34:	4926      	ldr	r1, [pc, #152]	; (8056cd0 <etharp_output+0x200>)
 8056c36:	4613      	mov	r3, r2
 8056c38:	005b      	lsls	r3, r3, #1
 8056c3a:	4413      	add	r3, r2
 8056c3c:	00db      	lsls	r3, r3, #3
 8056c3e:	440b      	add	r3, r1
 8056c40:	3308      	adds	r3, #8
 8056c42:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8056c44:	68fa      	ldr	r2, [r7, #12]
 8056c46:	429a      	cmp	r2, r3
 8056c48:	d117      	bne.n	8056c7a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8056c4a:	69bb      	ldr	r3, [r7, #24]
 8056c4c:	6819      	ldr	r1, [r3, #0]
 8056c4e:	7dfa      	ldrb	r2, [r7, #23]
 8056c50:	481f      	ldr	r0, [pc, #124]	; (8056cd0 <etharp_output+0x200>)
 8056c52:	4613      	mov	r3, r2
 8056c54:	005b      	lsls	r3, r3, #1
 8056c56:	4413      	add	r3, r2
 8056c58:	00db      	lsls	r3, r3, #3
 8056c5a:	4403      	add	r3, r0
 8056c5c:	3304      	adds	r3, #4
 8056c5e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8056c60:	4299      	cmp	r1, r3
 8056c62:	d10a      	bne.n	8056c7a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8056c64:	4a19      	ldr	r2, [pc, #100]	; (8056ccc <etharp_output+0x1fc>)
 8056c66:	7dfb      	ldrb	r3, [r7, #23]
 8056c68:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8056c6a:	7dfb      	ldrb	r3, [r7, #23]
 8056c6c:	461a      	mov	r2, r3
 8056c6e:	68b9      	ldr	r1, [r7, #8]
 8056c70:	68f8      	ldr	r0, [r7, #12]
 8056c72:	f7ff fe93 	bl	805699c <etharp_output_to_arp_index>
 8056c76:	4603      	mov	r3, r0
 8056c78:	e018      	b.n	8056cac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8056c7a:	7dfb      	ldrb	r3, [r7, #23]
 8056c7c:	3301      	adds	r3, #1
 8056c7e:	75fb      	strb	r3, [r7, #23]
 8056c80:	7dfb      	ldrb	r3, [r7, #23]
 8056c82:	2b09      	cmp	r3, #9
 8056c84:	d9ca      	bls.n	8056c1c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8056c86:	68ba      	ldr	r2, [r7, #8]
 8056c88:	69b9      	ldr	r1, [r7, #24]
 8056c8a:	68f8      	ldr	r0, [r7, #12]
 8056c8c:	f000 f822 	bl	8056cd4 <etharp_query>
 8056c90:	4603      	mov	r3, r0
 8056c92:	e00b      	b.n	8056cac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8056c94:	68fb      	ldr	r3, [r7, #12]
 8056c96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8056c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8056c9e:	9300      	str	r3, [sp, #0]
 8056ca0:	69fb      	ldr	r3, [r7, #28]
 8056ca2:	68b9      	ldr	r1, [r7, #8]
 8056ca4:	68f8      	ldr	r0, [r7, #12]
 8056ca6:	f001 fd45 	bl	8058734 <ethernet_output>
 8056caa:	4603      	mov	r3, r0
}
 8056cac:	4618      	mov	r0, r3
 8056cae:	3720      	adds	r7, #32
 8056cb0:	46bd      	mov	sp, r7
 8056cb2:	bd80      	pop	{r7, pc}
 8056cb4:	0805d12c 	.word	0x0805d12c
 8056cb8:	0805d27c 	.word	0x0805d27c
 8056cbc:	0805d1a4 	.word	0x0805d1a4
 8056cc0:	0805d2cc 	.word	0x0805d2cc
 8056cc4:	0805d26c 	.word	0x0805d26c
 8056cc8:	0805d92c 	.word	0x0805d92c
 8056ccc:	2000b71c 	.word	0x2000b71c
 8056cd0:	2000b62c 	.word	0x2000b62c

08056cd4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8056cd4:	b580      	push	{r7, lr}
 8056cd6:	b08c      	sub	sp, #48	; 0x30
 8056cd8:	af02      	add	r7, sp, #8
 8056cda:	60f8      	str	r0, [r7, #12]
 8056cdc:	60b9      	str	r1, [r7, #8]
 8056cde:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8056ce0:	68fb      	ldr	r3, [r7, #12]
 8056ce2:	3326      	adds	r3, #38	; 0x26
 8056ce4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8056ce6:	23ff      	movs	r3, #255	; 0xff
 8056ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8056cec:	2300      	movs	r3, #0
 8056cee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8056cf0:	68bb      	ldr	r3, [r7, #8]
 8056cf2:	681b      	ldr	r3, [r3, #0]
 8056cf4:	68f9      	ldr	r1, [r7, #12]
 8056cf6:	4618      	mov	r0, r3
 8056cf8:	f000 fe0e 	bl	8057918 <ip4_addr_isbroadcast_u32>
 8056cfc:	4603      	mov	r3, r0
 8056cfe:	2b00      	cmp	r3, #0
 8056d00:	d10c      	bne.n	8056d1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8056d02:	68bb      	ldr	r3, [r7, #8]
 8056d04:	681b      	ldr	r3, [r3, #0]
 8056d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8056d0a:	2be0      	cmp	r3, #224	; 0xe0
 8056d0c:	d006      	beq.n	8056d1c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8056d0e:	68bb      	ldr	r3, [r7, #8]
 8056d10:	2b00      	cmp	r3, #0
 8056d12:	d003      	beq.n	8056d1c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8056d14:	68bb      	ldr	r3, [r7, #8]
 8056d16:	681b      	ldr	r3, [r3, #0]
 8056d18:	2b00      	cmp	r3, #0
 8056d1a:	d102      	bne.n	8056d22 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8056d1c:	f06f 030f 	mvn.w	r3, #15
 8056d20:	e101      	b.n	8056f26 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8056d22:	68fa      	ldr	r2, [r7, #12]
 8056d24:	2101      	movs	r1, #1
 8056d26:	68b8      	ldr	r0, [r7, #8]
 8056d28:	f7ff fb60 	bl	80563ec <etharp_find_entry>
 8056d2c:	4603      	mov	r3, r0
 8056d2e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8056d30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8056d34:	2b00      	cmp	r3, #0
 8056d36:	da02      	bge.n	8056d3e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8056d38:	8a7b      	ldrh	r3, [r7, #18]
 8056d3a:	b25b      	sxtb	r3, r3
 8056d3c:	e0f3      	b.n	8056f26 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8056d3e:	8a7b      	ldrh	r3, [r7, #18]
 8056d40:	2b7e      	cmp	r3, #126	; 0x7e
 8056d42:	d906      	bls.n	8056d52 <etharp_query+0x7e>
 8056d44:	4b7a      	ldr	r3, [pc, #488]	; (8056f30 <etharp_query+0x25c>)
 8056d46:	f240 32c1 	movw	r2, #961	; 0x3c1
 8056d4a:	497a      	ldr	r1, [pc, #488]	; (8056f34 <etharp_query+0x260>)
 8056d4c:	487a      	ldr	r0, [pc, #488]	; (8056f38 <etharp_query+0x264>)
 8056d4e:	f002 f971 	bl	8059034 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8056d52:	8a7b      	ldrh	r3, [r7, #18]
 8056d54:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8056d56:	7c7a      	ldrb	r2, [r7, #17]
 8056d58:	4978      	ldr	r1, [pc, #480]	; (8056f3c <etharp_query+0x268>)
 8056d5a:	4613      	mov	r3, r2
 8056d5c:	005b      	lsls	r3, r3, #1
 8056d5e:	4413      	add	r3, r2
 8056d60:	00db      	lsls	r3, r3, #3
 8056d62:	440b      	add	r3, r1
 8056d64:	3314      	adds	r3, #20
 8056d66:	781b      	ldrb	r3, [r3, #0]
 8056d68:	2b00      	cmp	r3, #0
 8056d6a:	d115      	bne.n	8056d98 <etharp_query+0xc4>
    is_new_entry = 1;
 8056d6c:	2301      	movs	r3, #1
 8056d6e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8056d70:	7c7a      	ldrb	r2, [r7, #17]
 8056d72:	4972      	ldr	r1, [pc, #456]	; (8056f3c <etharp_query+0x268>)
 8056d74:	4613      	mov	r3, r2
 8056d76:	005b      	lsls	r3, r3, #1
 8056d78:	4413      	add	r3, r2
 8056d7a:	00db      	lsls	r3, r3, #3
 8056d7c:	440b      	add	r3, r1
 8056d7e:	3314      	adds	r3, #20
 8056d80:	2201      	movs	r2, #1
 8056d82:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8056d84:	7c7a      	ldrb	r2, [r7, #17]
 8056d86:	496d      	ldr	r1, [pc, #436]	; (8056f3c <etharp_query+0x268>)
 8056d88:	4613      	mov	r3, r2
 8056d8a:	005b      	lsls	r3, r3, #1
 8056d8c:	4413      	add	r3, r2
 8056d8e:	00db      	lsls	r3, r3, #3
 8056d90:	440b      	add	r3, r1
 8056d92:	3308      	adds	r3, #8
 8056d94:	68fa      	ldr	r2, [r7, #12]
 8056d96:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8056d98:	7c7a      	ldrb	r2, [r7, #17]
 8056d9a:	4968      	ldr	r1, [pc, #416]	; (8056f3c <etharp_query+0x268>)
 8056d9c:	4613      	mov	r3, r2
 8056d9e:	005b      	lsls	r3, r3, #1
 8056da0:	4413      	add	r3, r2
 8056da2:	00db      	lsls	r3, r3, #3
 8056da4:	440b      	add	r3, r1
 8056da6:	3314      	adds	r3, #20
 8056da8:	781b      	ldrb	r3, [r3, #0]
 8056daa:	2b01      	cmp	r3, #1
 8056dac:	d011      	beq.n	8056dd2 <etharp_query+0xfe>
 8056dae:	7c7a      	ldrb	r2, [r7, #17]
 8056db0:	4962      	ldr	r1, [pc, #392]	; (8056f3c <etharp_query+0x268>)
 8056db2:	4613      	mov	r3, r2
 8056db4:	005b      	lsls	r3, r3, #1
 8056db6:	4413      	add	r3, r2
 8056db8:	00db      	lsls	r3, r3, #3
 8056dba:	440b      	add	r3, r1
 8056dbc:	3314      	adds	r3, #20
 8056dbe:	781b      	ldrb	r3, [r3, #0]
 8056dc0:	2b01      	cmp	r3, #1
 8056dc2:	d806      	bhi.n	8056dd2 <etharp_query+0xfe>
 8056dc4:	4b5a      	ldr	r3, [pc, #360]	; (8056f30 <etharp_query+0x25c>)
 8056dc6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8056dca:	495d      	ldr	r1, [pc, #372]	; (8056f40 <etharp_query+0x26c>)
 8056dcc:	485a      	ldr	r0, [pc, #360]	; (8056f38 <etharp_query+0x264>)
 8056dce:	f002 f931 	bl	8059034 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8056dd2:	6a3b      	ldr	r3, [r7, #32]
 8056dd4:	2b00      	cmp	r3, #0
 8056dd6:	d102      	bne.n	8056dde <etharp_query+0x10a>
 8056dd8:	687b      	ldr	r3, [r7, #4]
 8056dda:	2b00      	cmp	r3, #0
 8056ddc:	d10c      	bne.n	8056df8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8056dde:	68b9      	ldr	r1, [r7, #8]
 8056de0:	68f8      	ldr	r0, [r7, #12]
 8056de2:	f000 f963 	bl	80570ac <etharp_request>
 8056de6:	4603      	mov	r3, r0
 8056de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8056dec:	687b      	ldr	r3, [r7, #4]
 8056dee:	2b00      	cmp	r3, #0
 8056df0:	d102      	bne.n	8056df8 <etharp_query+0x124>
      return result;
 8056df2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8056df6:	e096      	b.n	8056f26 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8056df8:	687b      	ldr	r3, [r7, #4]
 8056dfa:	2b00      	cmp	r3, #0
 8056dfc:	d106      	bne.n	8056e0c <etharp_query+0x138>
 8056dfe:	4b4c      	ldr	r3, [pc, #304]	; (8056f30 <etharp_query+0x25c>)
 8056e00:	f240 32e1 	movw	r2, #993	; 0x3e1
 8056e04:	494f      	ldr	r1, [pc, #316]	; (8056f44 <etharp_query+0x270>)
 8056e06:	484c      	ldr	r0, [pc, #304]	; (8056f38 <etharp_query+0x264>)
 8056e08:	f002 f914 	bl	8059034 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8056e0c:	7c7a      	ldrb	r2, [r7, #17]
 8056e0e:	494b      	ldr	r1, [pc, #300]	; (8056f3c <etharp_query+0x268>)
 8056e10:	4613      	mov	r3, r2
 8056e12:	005b      	lsls	r3, r3, #1
 8056e14:	4413      	add	r3, r2
 8056e16:	00db      	lsls	r3, r3, #3
 8056e18:	440b      	add	r3, r1
 8056e1a:	3314      	adds	r3, #20
 8056e1c:	781b      	ldrb	r3, [r3, #0]
 8056e1e:	2b01      	cmp	r3, #1
 8056e20:	d917      	bls.n	8056e52 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8056e22:	4a49      	ldr	r2, [pc, #292]	; (8056f48 <etharp_query+0x274>)
 8056e24:	7c7b      	ldrb	r3, [r7, #17]
 8056e26:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8056e28:	7c7a      	ldrb	r2, [r7, #17]
 8056e2a:	4613      	mov	r3, r2
 8056e2c:	005b      	lsls	r3, r3, #1
 8056e2e:	4413      	add	r3, r2
 8056e30:	00db      	lsls	r3, r3, #3
 8056e32:	3308      	adds	r3, #8
 8056e34:	4a41      	ldr	r2, [pc, #260]	; (8056f3c <etharp_query+0x268>)
 8056e36:	4413      	add	r3, r2
 8056e38:	3304      	adds	r3, #4
 8056e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8056e3e:	9200      	str	r2, [sp, #0]
 8056e40:	697a      	ldr	r2, [r7, #20]
 8056e42:	6879      	ldr	r1, [r7, #4]
 8056e44:	68f8      	ldr	r0, [r7, #12]
 8056e46:	f001 fc75 	bl	8058734 <ethernet_output>
 8056e4a:	4603      	mov	r3, r0
 8056e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8056e50:	e067      	b.n	8056f22 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8056e52:	7c7a      	ldrb	r2, [r7, #17]
 8056e54:	4939      	ldr	r1, [pc, #228]	; (8056f3c <etharp_query+0x268>)
 8056e56:	4613      	mov	r3, r2
 8056e58:	005b      	lsls	r3, r3, #1
 8056e5a:	4413      	add	r3, r2
 8056e5c:	00db      	lsls	r3, r3, #3
 8056e5e:	440b      	add	r3, r1
 8056e60:	3314      	adds	r3, #20
 8056e62:	781b      	ldrb	r3, [r3, #0]
 8056e64:	2b01      	cmp	r3, #1
 8056e66:	d15c      	bne.n	8056f22 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8056e68:	2300      	movs	r3, #0
 8056e6a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8056e6c:	687b      	ldr	r3, [r7, #4]
 8056e6e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8056e70:	e01c      	b.n	8056eac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8056e72:	69fb      	ldr	r3, [r7, #28]
 8056e74:	895a      	ldrh	r2, [r3, #10]
 8056e76:	69fb      	ldr	r3, [r7, #28]
 8056e78:	891b      	ldrh	r3, [r3, #8]
 8056e7a:	429a      	cmp	r2, r3
 8056e7c:	d10a      	bne.n	8056e94 <etharp_query+0x1c0>
 8056e7e:	69fb      	ldr	r3, [r7, #28]
 8056e80:	681b      	ldr	r3, [r3, #0]
 8056e82:	2b00      	cmp	r3, #0
 8056e84:	d006      	beq.n	8056e94 <etharp_query+0x1c0>
 8056e86:	4b2a      	ldr	r3, [pc, #168]	; (8056f30 <etharp_query+0x25c>)
 8056e88:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8056e8c:	492f      	ldr	r1, [pc, #188]	; (8056f4c <etharp_query+0x278>)
 8056e8e:	482a      	ldr	r0, [pc, #168]	; (8056f38 <etharp_query+0x264>)
 8056e90:	f002 f8d0 	bl	8059034 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8056e94:	69fb      	ldr	r3, [r7, #28]
 8056e96:	7b1b      	ldrb	r3, [r3, #12]
 8056e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8056e9c:	2b00      	cmp	r3, #0
 8056e9e:	d002      	beq.n	8056ea6 <etharp_query+0x1d2>
        copy_needed = 1;
 8056ea0:	2301      	movs	r3, #1
 8056ea2:	61bb      	str	r3, [r7, #24]
        break;
 8056ea4:	e005      	b.n	8056eb2 <etharp_query+0x1de>
      }
      p = p->next;
 8056ea6:	69fb      	ldr	r3, [r7, #28]
 8056ea8:	681b      	ldr	r3, [r3, #0]
 8056eaa:	61fb      	str	r3, [r7, #28]
    while (p) {
 8056eac:	69fb      	ldr	r3, [r7, #28]
 8056eae:	2b00      	cmp	r3, #0
 8056eb0:	d1df      	bne.n	8056e72 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8056eb2:	69bb      	ldr	r3, [r7, #24]
 8056eb4:	2b00      	cmp	r3, #0
 8056eb6:	d007      	beq.n	8056ec8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8056eb8:	687a      	ldr	r2, [r7, #4]
 8056eba:	f44f 7120 	mov.w	r1, #640	; 0x280
 8056ebe:	200e      	movs	r0, #14
 8056ec0:	f7f8 fc88 	bl	804f7d4 <pbuf_clone>
 8056ec4:	61f8      	str	r0, [r7, #28]
 8056ec6:	e004      	b.n	8056ed2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8056ec8:	687b      	ldr	r3, [r7, #4]
 8056eca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8056ecc:	69f8      	ldr	r0, [r7, #28]
 8056ece:	f7f8 fabf 	bl	804f450 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8056ed2:	69fb      	ldr	r3, [r7, #28]
 8056ed4:	2b00      	cmp	r3, #0
 8056ed6:	d021      	beq.n	8056f1c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8056ed8:	7c7a      	ldrb	r2, [r7, #17]
 8056eda:	4918      	ldr	r1, [pc, #96]	; (8056f3c <etharp_query+0x268>)
 8056edc:	4613      	mov	r3, r2
 8056ede:	005b      	lsls	r3, r3, #1
 8056ee0:	4413      	add	r3, r2
 8056ee2:	00db      	lsls	r3, r3, #3
 8056ee4:	440b      	add	r3, r1
 8056ee6:	681b      	ldr	r3, [r3, #0]
 8056ee8:	2b00      	cmp	r3, #0
 8056eea:	d00a      	beq.n	8056f02 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8056eec:	7c7a      	ldrb	r2, [r7, #17]
 8056eee:	4913      	ldr	r1, [pc, #76]	; (8056f3c <etharp_query+0x268>)
 8056ef0:	4613      	mov	r3, r2
 8056ef2:	005b      	lsls	r3, r3, #1
 8056ef4:	4413      	add	r3, r2
 8056ef6:	00db      	lsls	r3, r3, #3
 8056ef8:	440b      	add	r3, r1
 8056efa:	681b      	ldr	r3, [r3, #0]
 8056efc:	4618      	mov	r0, r3
 8056efe:	f7f8 fa01 	bl	804f304 <pbuf_free>
      }
      arp_table[i].q = p;
 8056f02:	7c7a      	ldrb	r2, [r7, #17]
 8056f04:	490d      	ldr	r1, [pc, #52]	; (8056f3c <etharp_query+0x268>)
 8056f06:	4613      	mov	r3, r2
 8056f08:	005b      	lsls	r3, r3, #1
 8056f0a:	4413      	add	r3, r2
 8056f0c:	00db      	lsls	r3, r3, #3
 8056f0e:	440b      	add	r3, r1
 8056f10:	69fa      	ldr	r2, [r7, #28]
 8056f12:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8056f14:	2300      	movs	r3, #0
 8056f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8056f1a:	e002      	b.n	8056f22 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8056f1c:	23ff      	movs	r3, #255	; 0xff
 8056f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8056f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8056f26:	4618      	mov	r0, r3
 8056f28:	3728      	adds	r7, #40	; 0x28
 8056f2a:	46bd      	mov	sp, r7
 8056f2c:	bd80      	pop	{r7, pc}
 8056f2e:	bf00      	nop
 8056f30:	0805d12c 	.word	0x0805d12c
 8056f34:	0805d2d8 	.word	0x0805d2d8
 8056f38:	0805d1a4 	.word	0x0805d1a4
 8056f3c:	2000b62c 	.word	0x2000b62c
 8056f40:	0805d2e8 	.word	0x0805d2e8
 8056f44:	0805d2cc 	.word	0x0805d2cc
 8056f48:	2000b71c 	.word	0x2000b71c
 8056f4c:	0805d310 	.word	0x0805d310

08056f50 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8056f50:	b580      	push	{r7, lr}
 8056f52:	b08a      	sub	sp, #40	; 0x28
 8056f54:	af02      	add	r7, sp, #8
 8056f56:	60f8      	str	r0, [r7, #12]
 8056f58:	60b9      	str	r1, [r7, #8]
 8056f5a:	607a      	str	r2, [r7, #4]
 8056f5c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8056f5e:	2300      	movs	r3, #0
 8056f60:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8056f62:	68fb      	ldr	r3, [r7, #12]
 8056f64:	2b00      	cmp	r3, #0
 8056f66:	d106      	bne.n	8056f76 <etharp_raw+0x26>
 8056f68:	4b3a      	ldr	r3, [pc, #232]	; (8057054 <etharp_raw+0x104>)
 8056f6a:	f240 4257 	movw	r2, #1111	; 0x457
 8056f6e:	493a      	ldr	r1, [pc, #232]	; (8057058 <etharp_raw+0x108>)
 8056f70:	483a      	ldr	r0, [pc, #232]	; (805705c <etharp_raw+0x10c>)
 8056f72:	f002 f85f 	bl	8059034 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8056f76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8056f7a:	211c      	movs	r1, #28
 8056f7c:	200e      	movs	r0, #14
 8056f7e:	f7f7 fedd 	bl	804ed3c <pbuf_alloc>
 8056f82:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8056f84:	69bb      	ldr	r3, [r7, #24]
 8056f86:	2b00      	cmp	r3, #0
 8056f88:	d102      	bne.n	8056f90 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8056f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8056f8e:	e05d      	b.n	805704c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8056f90:	69bb      	ldr	r3, [r7, #24]
 8056f92:	895b      	ldrh	r3, [r3, #10]
 8056f94:	2b1b      	cmp	r3, #27
 8056f96:	d806      	bhi.n	8056fa6 <etharp_raw+0x56>
 8056f98:	4b2e      	ldr	r3, [pc, #184]	; (8057054 <etharp_raw+0x104>)
 8056f9a:	f240 4262 	movw	r2, #1122	; 0x462
 8056f9e:	4930      	ldr	r1, [pc, #192]	; (8057060 <etharp_raw+0x110>)
 8056fa0:	482e      	ldr	r0, [pc, #184]	; (805705c <etharp_raw+0x10c>)
 8056fa2:	f002 f847 	bl	8059034 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8056fa6:	69bb      	ldr	r3, [r7, #24]
 8056fa8:	685b      	ldr	r3, [r3, #4]
 8056faa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8056fac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8056fae:	4618      	mov	r0, r3
 8056fb0:	f7f6 fdb6 	bl	804db20 <lwip_htons>
 8056fb4:	4603      	mov	r3, r0
 8056fb6:	461a      	mov	r2, r3
 8056fb8:	697b      	ldr	r3, [r7, #20]
 8056fba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8056fbc:	68fb      	ldr	r3, [r7, #12]
 8056fbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8056fc2:	2b06      	cmp	r3, #6
 8056fc4:	d006      	beq.n	8056fd4 <etharp_raw+0x84>
 8056fc6:	4b23      	ldr	r3, [pc, #140]	; (8057054 <etharp_raw+0x104>)
 8056fc8:	f240 4269 	movw	r2, #1129	; 0x469
 8056fcc:	4925      	ldr	r1, [pc, #148]	; (8057064 <etharp_raw+0x114>)
 8056fce:	4823      	ldr	r0, [pc, #140]	; (805705c <etharp_raw+0x10c>)
 8056fd0:	f002 f830 	bl	8059034 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8056fd4:	697b      	ldr	r3, [r7, #20]
 8056fd6:	3308      	adds	r3, #8
 8056fd8:	2206      	movs	r2, #6
 8056fda:	6839      	ldr	r1, [r7, #0]
 8056fdc:	4618      	mov	r0, r3
 8056fde:	f001 ff19 	bl	8058e14 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8056fe2:	697b      	ldr	r3, [r7, #20]
 8056fe4:	3312      	adds	r3, #18
 8056fe6:	2206      	movs	r2, #6
 8056fe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8056fea:	4618      	mov	r0, r3
 8056fec:	f001 ff12 	bl	8058e14 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8056ff0:	697b      	ldr	r3, [r7, #20]
 8056ff2:	330e      	adds	r3, #14
 8056ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8056ff6:	6812      	ldr	r2, [r2, #0]
 8056ff8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8056ffa:	697b      	ldr	r3, [r7, #20]
 8056ffc:	3318      	adds	r3, #24
 8056ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8057000:	6812      	ldr	r2, [r2, #0]
 8057002:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8057004:	697b      	ldr	r3, [r7, #20]
 8057006:	2200      	movs	r2, #0
 8057008:	701a      	strb	r2, [r3, #0]
 805700a:	2200      	movs	r2, #0
 805700c:	f042 0201 	orr.w	r2, r2, #1
 8057010:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8057012:	697b      	ldr	r3, [r7, #20]
 8057014:	2200      	movs	r2, #0
 8057016:	f042 0208 	orr.w	r2, r2, #8
 805701a:	709a      	strb	r2, [r3, #2]
 805701c:	2200      	movs	r2, #0
 805701e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8057020:	697b      	ldr	r3, [r7, #20]
 8057022:	2206      	movs	r2, #6
 8057024:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8057026:	697b      	ldr	r3, [r7, #20]
 8057028:	2204      	movs	r2, #4
 805702a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 805702c:	f640 0306 	movw	r3, #2054	; 0x806
 8057030:	9300      	str	r3, [sp, #0]
 8057032:	687b      	ldr	r3, [r7, #4]
 8057034:	68ba      	ldr	r2, [r7, #8]
 8057036:	69b9      	ldr	r1, [r7, #24]
 8057038:	68f8      	ldr	r0, [r7, #12]
 805703a:	f001 fb7b 	bl	8058734 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 805703e:	69b8      	ldr	r0, [r7, #24]
 8057040:	f7f8 f960 	bl	804f304 <pbuf_free>
  p = NULL;
 8057044:	2300      	movs	r3, #0
 8057046:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8057048:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 805704c:	4618      	mov	r0, r3
 805704e:	3720      	adds	r7, #32
 8057050:	46bd      	mov	sp, r7
 8057052:	bd80      	pop	{r7, pc}
 8057054:	0805d12c 	.word	0x0805d12c
 8057058:	0805d27c 	.word	0x0805d27c
 805705c:	0805d1a4 	.word	0x0805d1a4
 8057060:	0805d32c 	.word	0x0805d32c
 8057064:	0805d360 	.word	0x0805d360

08057068 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8057068:	b580      	push	{r7, lr}
 805706a:	b088      	sub	sp, #32
 805706c:	af04      	add	r7, sp, #16
 805706e:	60f8      	str	r0, [r7, #12]
 8057070:	60b9      	str	r1, [r7, #8]
 8057072:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8057074:	68fb      	ldr	r3, [r7, #12]
 8057076:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 805707a:	68fb      	ldr	r3, [r7, #12]
 805707c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8057080:	68fb      	ldr	r3, [r7, #12]
 8057082:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8057084:	2201      	movs	r2, #1
 8057086:	9203      	str	r2, [sp, #12]
 8057088:	68ba      	ldr	r2, [r7, #8]
 805708a:	9202      	str	r2, [sp, #8]
 805708c:	4a06      	ldr	r2, [pc, #24]	; (80570a8 <etharp_request_dst+0x40>)
 805708e:	9201      	str	r2, [sp, #4]
 8057090:	9300      	str	r3, [sp, #0]
 8057092:	4603      	mov	r3, r0
 8057094:	687a      	ldr	r2, [r7, #4]
 8057096:	68f8      	ldr	r0, [r7, #12]
 8057098:	f7ff ff5a 	bl	8056f50 <etharp_raw>
 805709c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 805709e:	4618      	mov	r0, r3
 80570a0:	3710      	adds	r7, #16
 80570a2:	46bd      	mov	sp, r7
 80570a4:	bd80      	pop	{r7, pc}
 80570a6:	bf00      	nop
 80570a8:	0805d934 	.word	0x0805d934

080570ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80570ac:	b580      	push	{r7, lr}
 80570ae:	b082      	sub	sp, #8
 80570b0:	af00      	add	r7, sp, #0
 80570b2:	6078      	str	r0, [r7, #4]
 80570b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80570b6:	4a05      	ldr	r2, [pc, #20]	; (80570cc <etharp_request+0x20>)
 80570b8:	6839      	ldr	r1, [r7, #0]
 80570ba:	6878      	ldr	r0, [r7, #4]
 80570bc:	f7ff ffd4 	bl	8057068 <etharp_request_dst>
 80570c0:	4603      	mov	r3, r0
}
 80570c2:	4618      	mov	r0, r3
 80570c4:	3708      	adds	r7, #8
 80570c6:	46bd      	mov	sp, r7
 80570c8:	bd80      	pop	{r7, pc}
 80570ca:	bf00      	nop
 80570cc:	0805d92c 	.word	0x0805d92c

080570d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80570d0:	b580      	push	{r7, lr}
 80570d2:	b08e      	sub	sp, #56	; 0x38
 80570d4:	af04      	add	r7, sp, #16
 80570d6:	6078      	str	r0, [r7, #4]
 80570d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80570da:	4b79      	ldr	r3, [pc, #484]	; (80572c0 <icmp_input+0x1f0>)
 80570dc:	689b      	ldr	r3, [r3, #8]
 80570de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80570e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80570e2:	781b      	ldrb	r3, [r3, #0]
 80570e4:	f003 030f 	and.w	r3, r3, #15
 80570e8:	b2db      	uxtb	r3, r3
 80570ea:	009b      	lsls	r3, r3, #2
 80570ec:	b2db      	uxtb	r3, r3
 80570ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80570f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80570f2:	2b13      	cmp	r3, #19
 80570f4:	f240 80cd 	bls.w	8057292 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80570f8:	687b      	ldr	r3, [r7, #4]
 80570fa:	895b      	ldrh	r3, [r3, #10]
 80570fc:	2b03      	cmp	r3, #3
 80570fe:	f240 80ca 	bls.w	8057296 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8057102:	687b      	ldr	r3, [r7, #4]
 8057104:	685b      	ldr	r3, [r3, #4]
 8057106:	781b      	ldrb	r3, [r3, #0]
 8057108:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 805710c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8057110:	2b00      	cmp	r3, #0
 8057112:	f000 80b7 	beq.w	8057284 <icmp_input+0x1b4>
 8057116:	2b08      	cmp	r3, #8
 8057118:	f040 80b7 	bne.w	805728a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 805711c:	4b69      	ldr	r3, [pc, #420]	; (80572c4 <icmp_input+0x1f4>)
 805711e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8057120:	4b67      	ldr	r3, [pc, #412]	; (80572c0 <icmp_input+0x1f0>)
 8057122:	695b      	ldr	r3, [r3, #20]
 8057124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8057128:	2be0      	cmp	r3, #224	; 0xe0
 805712a:	f000 80bb 	beq.w	80572a4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 805712e:	4b64      	ldr	r3, [pc, #400]	; (80572c0 <icmp_input+0x1f0>)
 8057130:	695b      	ldr	r3, [r3, #20]
 8057132:	4a63      	ldr	r2, [pc, #396]	; (80572c0 <icmp_input+0x1f0>)
 8057134:	6812      	ldr	r2, [r2, #0]
 8057136:	4611      	mov	r1, r2
 8057138:	4618      	mov	r0, r3
 805713a:	f000 fbed 	bl	8057918 <ip4_addr_isbroadcast_u32>
 805713e:	4603      	mov	r3, r0
 8057140:	2b00      	cmp	r3, #0
 8057142:	f040 80b1 	bne.w	80572a8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8057146:	687b      	ldr	r3, [r7, #4]
 8057148:	891b      	ldrh	r3, [r3, #8]
 805714a:	2b07      	cmp	r3, #7
 805714c:	f240 80a5 	bls.w	805729a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8057150:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8057152:	330e      	adds	r3, #14
 8057154:	4619      	mov	r1, r3
 8057156:	6878      	ldr	r0, [r7, #4]
 8057158:	f7f8 f83e 	bl	804f1d8 <pbuf_add_header>
 805715c:	4603      	mov	r3, r0
 805715e:	2b00      	cmp	r3, #0
 8057160:	d04b      	beq.n	80571fa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8057162:	687b      	ldr	r3, [r7, #4]
 8057164:	891a      	ldrh	r2, [r3, #8]
 8057166:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8057168:	4413      	add	r3, r2
 805716a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 805716c:	687b      	ldr	r3, [r7, #4]
 805716e:	891b      	ldrh	r3, [r3, #8]
 8057170:	8b7a      	ldrh	r2, [r7, #26]
 8057172:	429a      	cmp	r2, r3
 8057174:	f0c0 809a 	bcc.w	80572ac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8057178:	8b7b      	ldrh	r3, [r7, #26]
 805717a:	f44f 7220 	mov.w	r2, #640	; 0x280
 805717e:	4619      	mov	r1, r3
 8057180:	200e      	movs	r0, #14
 8057182:	f7f7 fddb 	bl	804ed3c <pbuf_alloc>
 8057186:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8057188:	697b      	ldr	r3, [r7, #20]
 805718a:	2b00      	cmp	r3, #0
 805718c:	f000 8090 	beq.w	80572b0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8057190:	697b      	ldr	r3, [r7, #20]
 8057192:	895b      	ldrh	r3, [r3, #10]
 8057194:	461a      	mov	r2, r3
 8057196:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8057198:	3308      	adds	r3, #8
 805719a:	429a      	cmp	r2, r3
 805719c:	d203      	bcs.n	80571a6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 805719e:	6978      	ldr	r0, [r7, #20]
 80571a0:	f7f8 f8b0 	bl	804f304 <pbuf_free>
          goto icmperr;
 80571a4:	e085      	b.n	80572b2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80571a6:	697b      	ldr	r3, [r7, #20]
 80571a8:	685b      	ldr	r3, [r3, #4]
 80571aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80571ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80571ae:	4618      	mov	r0, r3
 80571b0:	f001 fe30 	bl	8058e14 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80571b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80571b6:	4619      	mov	r1, r3
 80571b8:	6978      	ldr	r0, [r7, #20]
 80571ba:	f7f8 f81d 	bl	804f1f8 <pbuf_remove_header>
 80571be:	4603      	mov	r3, r0
 80571c0:	2b00      	cmp	r3, #0
 80571c2:	d009      	beq.n	80571d8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80571c4:	4b40      	ldr	r3, [pc, #256]	; (80572c8 <icmp_input+0x1f8>)
 80571c6:	22b6      	movs	r2, #182	; 0xb6
 80571c8:	4940      	ldr	r1, [pc, #256]	; (80572cc <icmp_input+0x1fc>)
 80571ca:	4841      	ldr	r0, [pc, #260]	; (80572d0 <icmp_input+0x200>)
 80571cc:	f001 ff32 	bl	8059034 <iprintf>
          pbuf_free(r);
 80571d0:	6978      	ldr	r0, [r7, #20]
 80571d2:	f7f8 f897 	bl	804f304 <pbuf_free>
          goto icmperr;
 80571d6:	e06c      	b.n	80572b2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80571d8:	6879      	ldr	r1, [r7, #4]
 80571da:	6978      	ldr	r0, [r7, #20]
 80571dc:	f7f8 f9b6 	bl	804f54c <pbuf_copy>
 80571e0:	4603      	mov	r3, r0
 80571e2:	2b00      	cmp	r3, #0
 80571e4:	d003      	beq.n	80571ee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80571e6:	6978      	ldr	r0, [r7, #20]
 80571e8:	f7f8 f88c 	bl	804f304 <pbuf_free>
          goto icmperr;
 80571ec:	e061      	b.n	80572b2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80571ee:	6878      	ldr	r0, [r7, #4]
 80571f0:	f7f8 f888 	bl	804f304 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80571f4:	697b      	ldr	r3, [r7, #20]
 80571f6:	607b      	str	r3, [r7, #4]
 80571f8:	e00f      	b.n	805721a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80571fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80571fc:	330e      	adds	r3, #14
 80571fe:	4619      	mov	r1, r3
 8057200:	6878      	ldr	r0, [r7, #4]
 8057202:	f7f7 fff9 	bl	804f1f8 <pbuf_remove_header>
 8057206:	4603      	mov	r3, r0
 8057208:	2b00      	cmp	r3, #0
 805720a:	d006      	beq.n	805721a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 805720c:	4b2e      	ldr	r3, [pc, #184]	; (80572c8 <icmp_input+0x1f8>)
 805720e:	22c7      	movs	r2, #199	; 0xc7
 8057210:	4930      	ldr	r1, [pc, #192]	; (80572d4 <icmp_input+0x204>)
 8057212:	482f      	ldr	r0, [pc, #188]	; (80572d0 <icmp_input+0x200>)
 8057214:	f001 ff0e 	bl	8059034 <iprintf>
          goto icmperr;
 8057218:	e04b      	b.n	80572b2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 805721a:	687b      	ldr	r3, [r7, #4]
 805721c:	685b      	ldr	r3, [r3, #4]
 805721e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8057220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8057222:	4619      	mov	r1, r3
 8057224:	6878      	ldr	r0, [r7, #4]
 8057226:	f7f7 ffd7 	bl	804f1d8 <pbuf_add_header>
 805722a:	4603      	mov	r3, r0
 805722c:	2b00      	cmp	r3, #0
 805722e:	d12b      	bne.n	8057288 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8057230:	687b      	ldr	r3, [r7, #4]
 8057232:	685b      	ldr	r3, [r3, #4]
 8057234:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8057236:	69fb      	ldr	r3, [r7, #28]
 8057238:	681a      	ldr	r2, [r3, #0]
 805723a:	68fb      	ldr	r3, [r7, #12]
 805723c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 805723e:	4b20      	ldr	r3, [pc, #128]	; (80572c0 <icmp_input+0x1f0>)
 8057240:	691a      	ldr	r2, [r3, #16]
 8057242:	68fb      	ldr	r3, [r7, #12]
 8057244:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8057246:	693b      	ldr	r3, [r7, #16]
 8057248:	2200      	movs	r2, #0
 805724a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 805724c:	693b      	ldr	r3, [r7, #16]
 805724e:	2200      	movs	r2, #0
 8057250:	709a      	strb	r2, [r3, #2]
 8057252:	2200      	movs	r2, #0
 8057254:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8057256:	68fb      	ldr	r3, [r7, #12]
 8057258:	22ff      	movs	r2, #255	; 0xff
 805725a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 805725c:	68fb      	ldr	r3, [r7, #12]
 805725e:	2200      	movs	r2, #0
 8057260:	729a      	strb	r2, [r3, #10]
 8057262:	2200      	movs	r2, #0
 8057264:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8057266:	683b      	ldr	r3, [r7, #0]
 8057268:	9302      	str	r3, [sp, #8]
 805726a:	2301      	movs	r3, #1
 805726c:	9301      	str	r3, [sp, #4]
 805726e:	2300      	movs	r3, #0
 8057270:	9300      	str	r3, [sp, #0]
 8057272:	23ff      	movs	r3, #255	; 0xff
 8057274:	2200      	movs	r2, #0
 8057276:	69f9      	ldr	r1, [r7, #28]
 8057278:	6878      	ldr	r0, [r7, #4]
 805727a:	f000 fa75 	bl	8057768 <ip4_output_if>
 805727e:	4603      	mov	r3, r0
 8057280:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8057282:	e001      	b.n	8057288 <icmp_input+0x1b8>
      break;
 8057284:	bf00      	nop
 8057286:	e000      	b.n	805728a <icmp_input+0x1ba>
      break;
 8057288:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 805728a:	6878      	ldr	r0, [r7, #4]
 805728c:	f7f8 f83a 	bl	804f304 <pbuf_free>
  return;
 8057290:	e013      	b.n	80572ba <icmp_input+0x1ea>
    goto lenerr;
 8057292:	bf00      	nop
 8057294:	e002      	b.n	805729c <icmp_input+0x1cc>
    goto lenerr;
 8057296:	bf00      	nop
 8057298:	e000      	b.n	805729c <icmp_input+0x1cc>
        goto lenerr;
 805729a:	bf00      	nop
lenerr:
  pbuf_free(p);
 805729c:	6878      	ldr	r0, [r7, #4]
 805729e:	f7f8 f831 	bl	804f304 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80572a2:	e00a      	b.n	80572ba <icmp_input+0x1ea>
        goto icmperr;
 80572a4:	bf00      	nop
 80572a6:	e004      	b.n	80572b2 <icmp_input+0x1e2>
        goto icmperr;
 80572a8:	bf00      	nop
 80572aa:	e002      	b.n	80572b2 <icmp_input+0x1e2>
          goto icmperr;
 80572ac:	bf00      	nop
 80572ae:	e000      	b.n	80572b2 <icmp_input+0x1e2>
          goto icmperr;
 80572b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80572b2:	6878      	ldr	r0, [r7, #4]
 80572b4:	f7f8 f826 	bl	804f304 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80572b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80572ba:	3728      	adds	r7, #40	; 0x28
 80572bc:	46bd      	mov	sp, r7
 80572be:	bd80      	pop	{r7, pc}
 80572c0:	20005cb8 	.word	0x20005cb8
 80572c4:	20005ccc 	.word	0x20005ccc
 80572c8:	0805d3a4 	.word	0x0805d3a4
 80572cc:	0805d3dc 	.word	0x0805d3dc
 80572d0:	0805d414 	.word	0x0805d414
 80572d4:	0805d43c 	.word	0x0805d43c

080572d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80572d8:	b580      	push	{r7, lr}
 80572da:	b082      	sub	sp, #8
 80572dc:	af00      	add	r7, sp, #0
 80572de:	6078      	str	r0, [r7, #4]
 80572e0:	460b      	mov	r3, r1
 80572e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80572e4:	78fb      	ldrb	r3, [r7, #3]
 80572e6:	461a      	mov	r2, r3
 80572e8:	2103      	movs	r1, #3
 80572ea:	6878      	ldr	r0, [r7, #4]
 80572ec:	f000 f814 	bl	8057318 <icmp_send_response>
}
 80572f0:	bf00      	nop
 80572f2:	3708      	adds	r7, #8
 80572f4:	46bd      	mov	sp, r7
 80572f6:	bd80      	pop	{r7, pc}

080572f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80572f8:	b580      	push	{r7, lr}
 80572fa:	b082      	sub	sp, #8
 80572fc:	af00      	add	r7, sp, #0
 80572fe:	6078      	str	r0, [r7, #4]
 8057300:	460b      	mov	r3, r1
 8057302:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8057304:	78fb      	ldrb	r3, [r7, #3]
 8057306:	461a      	mov	r2, r3
 8057308:	210b      	movs	r1, #11
 805730a:	6878      	ldr	r0, [r7, #4]
 805730c:	f000 f804 	bl	8057318 <icmp_send_response>
}
 8057310:	bf00      	nop
 8057312:	3708      	adds	r7, #8
 8057314:	46bd      	mov	sp, r7
 8057316:	bd80      	pop	{r7, pc}

08057318 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8057318:	b580      	push	{r7, lr}
 805731a:	b08c      	sub	sp, #48	; 0x30
 805731c:	af04      	add	r7, sp, #16
 805731e:	6078      	str	r0, [r7, #4]
 8057320:	460b      	mov	r3, r1
 8057322:	70fb      	strb	r3, [r7, #3]
 8057324:	4613      	mov	r3, r2
 8057326:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8057328:	f44f 7220 	mov.w	r2, #640	; 0x280
 805732c:	2124      	movs	r1, #36	; 0x24
 805732e:	2022      	movs	r0, #34	; 0x22
 8057330:	f7f7 fd04 	bl	804ed3c <pbuf_alloc>
 8057334:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8057336:	69fb      	ldr	r3, [r7, #28]
 8057338:	2b00      	cmp	r3, #0
 805733a:	d04c      	beq.n	80573d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 805733c:	69fb      	ldr	r3, [r7, #28]
 805733e:	895b      	ldrh	r3, [r3, #10]
 8057340:	2b23      	cmp	r3, #35	; 0x23
 8057342:	d806      	bhi.n	8057352 <icmp_send_response+0x3a>
 8057344:	4b26      	ldr	r3, [pc, #152]	; (80573e0 <icmp_send_response+0xc8>)
 8057346:	f44f 72b4 	mov.w	r2, #360	; 0x168
 805734a:	4926      	ldr	r1, [pc, #152]	; (80573e4 <icmp_send_response+0xcc>)
 805734c:	4826      	ldr	r0, [pc, #152]	; (80573e8 <icmp_send_response+0xd0>)
 805734e:	f001 fe71 	bl	8059034 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8057352:	687b      	ldr	r3, [r7, #4]
 8057354:	685b      	ldr	r3, [r3, #4]
 8057356:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8057358:	69fb      	ldr	r3, [r7, #28]
 805735a:	685b      	ldr	r3, [r3, #4]
 805735c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 805735e:	697b      	ldr	r3, [r7, #20]
 8057360:	78fa      	ldrb	r2, [r7, #3]
 8057362:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8057364:	697b      	ldr	r3, [r7, #20]
 8057366:	78ba      	ldrb	r2, [r7, #2]
 8057368:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 805736a:	697b      	ldr	r3, [r7, #20]
 805736c:	2200      	movs	r2, #0
 805736e:	711a      	strb	r2, [r3, #4]
 8057370:	2200      	movs	r2, #0
 8057372:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8057374:	697b      	ldr	r3, [r7, #20]
 8057376:	2200      	movs	r2, #0
 8057378:	719a      	strb	r2, [r3, #6]
 805737a:	2200      	movs	r2, #0
 805737c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 805737e:	69fb      	ldr	r3, [r7, #28]
 8057380:	685b      	ldr	r3, [r3, #4]
 8057382:	f103 0008 	add.w	r0, r3, #8
 8057386:	687b      	ldr	r3, [r7, #4]
 8057388:	685b      	ldr	r3, [r3, #4]
 805738a:	221c      	movs	r2, #28
 805738c:	4619      	mov	r1, r3
 805738e:	f001 fd41 	bl	8058e14 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8057392:	69bb      	ldr	r3, [r7, #24]
 8057394:	68db      	ldr	r3, [r3, #12]
 8057396:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8057398:	f107 030c 	add.w	r3, r7, #12
 805739c:	4618      	mov	r0, r3
 805739e:	f000 f825 	bl	80573ec <ip4_route>
 80573a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80573a4:	693b      	ldr	r3, [r7, #16]
 80573a6:	2b00      	cmp	r3, #0
 80573a8:	d011      	beq.n	80573ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80573aa:	697b      	ldr	r3, [r7, #20]
 80573ac:	2200      	movs	r2, #0
 80573ae:	709a      	strb	r2, [r3, #2]
 80573b0:	2200      	movs	r2, #0
 80573b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80573b4:	f107 020c 	add.w	r2, r7, #12
 80573b8:	693b      	ldr	r3, [r7, #16]
 80573ba:	9302      	str	r3, [sp, #8]
 80573bc:	2301      	movs	r3, #1
 80573be:	9301      	str	r3, [sp, #4]
 80573c0:	2300      	movs	r3, #0
 80573c2:	9300      	str	r3, [sp, #0]
 80573c4:	23ff      	movs	r3, #255	; 0xff
 80573c6:	2100      	movs	r1, #0
 80573c8:	69f8      	ldr	r0, [r7, #28]
 80573ca:	f000 f9cd 	bl	8057768 <ip4_output_if>
  }
  pbuf_free(q);
 80573ce:	69f8      	ldr	r0, [r7, #28]
 80573d0:	f7f7 ff98 	bl	804f304 <pbuf_free>
 80573d4:	e000      	b.n	80573d8 <icmp_send_response+0xc0>
    return;
 80573d6:	bf00      	nop
}
 80573d8:	3720      	adds	r7, #32
 80573da:	46bd      	mov	sp, r7
 80573dc:	bd80      	pop	{r7, pc}
 80573de:	bf00      	nop
 80573e0:	0805d3a4 	.word	0x0805d3a4
 80573e4:	0805d470 	.word	0x0805d470
 80573e8:	0805d414 	.word	0x0805d414

080573ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80573ec:	b480      	push	{r7}
 80573ee:	b085      	sub	sp, #20
 80573f0:	af00      	add	r7, sp, #0
 80573f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80573f4:	4b33      	ldr	r3, [pc, #204]	; (80574c4 <ip4_route+0xd8>)
 80573f6:	681b      	ldr	r3, [r3, #0]
 80573f8:	60fb      	str	r3, [r7, #12]
 80573fa:	e036      	b.n	805746a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80573fc:	68fb      	ldr	r3, [r7, #12]
 80573fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8057402:	f003 0301 	and.w	r3, r3, #1
 8057406:	b2db      	uxtb	r3, r3
 8057408:	2b00      	cmp	r3, #0
 805740a:	d02b      	beq.n	8057464 <ip4_route+0x78>
 805740c:	68fb      	ldr	r3, [r7, #12]
 805740e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8057412:	089b      	lsrs	r3, r3, #2
 8057414:	f003 0301 	and.w	r3, r3, #1
 8057418:	b2db      	uxtb	r3, r3
 805741a:	2b00      	cmp	r3, #0
 805741c:	d022      	beq.n	8057464 <ip4_route+0x78>
 805741e:	68fb      	ldr	r3, [r7, #12]
 8057420:	3304      	adds	r3, #4
 8057422:	681b      	ldr	r3, [r3, #0]
 8057424:	2b00      	cmp	r3, #0
 8057426:	d01d      	beq.n	8057464 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8057428:	687b      	ldr	r3, [r7, #4]
 805742a:	681a      	ldr	r2, [r3, #0]
 805742c:	68fb      	ldr	r3, [r7, #12]
 805742e:	3304      	adds	r3, #4
 8057430:	681b      	ldr	r3, [r3, #0]
 8057432:	405a      	eors	r2, r3
 8057434:	68fb      	ldr	r3, [r7, #12]
 8057436:	3308      	adds	r3, #8
 8057438:	681b      	ldr	r3, [r3, #0]
 805743a:	4013      	ands	r3, r2
 805743c:	2b00      	cmp	r3, #0
 805743e:	d101      	bne.n	8057444 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8057440:	68fb      	ldr	r3, [r7, #12]
 8057442:	e038      	b.n	80574b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8057444:	68fb      	ldr	r3, [r7, #12]
 8057446:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 805744a:	f003 0302 	and.w	r3, r3, #2
 805744e:	2b00      	cmp	r3, #0
 8057450:	d108      	bne.n	8057464 <ip4_route+0x78>
 8057452:	687b      	ldr	r3, [r7, #4]
 8057454:	681a      	ldr	r2, [r3, #0]
 8057456:	68fb      	ldr	r3, [r7, #12]
 8057458:	330c      	adds	r3, #12
 805745a:	681b      	ldr	r3, [r3, #0]
 805745c:	429a      	cmp	r2, r3
 805745e:	d101      	bne.n	8057464 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8057460:	68fb      	ldr	r3, [r7, #12]
 8057462:	e028      	b.n	80574b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8057464:	68fb      	ldr	r3, [r7, #12]
 8057466:	681b      	ldr	r3, [r3, #0]
 8057468:	60fb      	str	r3, [r7, #12]
 805746a:	68fb      	ldr	r3, [r7, #12]
 805746c:	2b00      	cmp	r3, #0
 805746e:	d1c5      	bne.n	80573fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8057470:	4b15      	ldr	r3, [pc, #84]	; (80574c8 <ip4_route+0xdc>)
 8057472:	681b      	ldr	r3, [r3, #0]
 8057474:	2b00      	cmp	r3, #0
 8057476:	d01a      	beq.n	80574ae <ip4_route+0xc2>
 8057478:	4b13      	ldr	r3, [pc, #76]	; (80574c8 <ip4_route+0xdc>)
 805747a:	681b      	ldr	r3, [r3, #0]
 805747c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8057480:	f003 0301 	and.w	r3, r3, #1
 8057484:	2b00      	cmp	r3, #0
 8057486:	d012      	beq.n	80574ae <ip4_route+0xc2>
 8057488:	4b0f      	ldr	r3, [pc, #60]	; (80574c8 <ip4_route+0xdc>)
 805748a:	681b      	ldr	r3, [r3, #0]
 805748c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8057490:	f003 0304 	and.w	r3, r3, #4
 8057494:	2b00      	cmp	r3, #0
 8057496:	d00a      	beq.n	80574ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8057498:	4b0b      	ldr	r3, [pc, #44]	; (80574c8 <ip4_route+0xdc>)
 805749a:	681b      	ldr	r3, [r3, #0]
 805749c:	3304      	adds	r3, #4
 805749e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80574a0:	2b00      	cmp	r3, #0
 80574a2:	d004      	beq.n	80574ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80574a4:	687b      	ldr	r3, [r7, #4]
 80574a6:	681b      	ldr	r3, [r3, #0]
 80574a8:	b2db      	uxtb	r3, r3
 80574aa:	2b7f      	cmp	r3, #127	; 0x7f
 80574ac:	d101      	bne.n	80574b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80574ae:	2300      	movs	r3, #0
 80574b0:	e001      	b.n	80574b6 <ip4_route+0xca>
  }

  return netif_default;
 80574b2:	4b05      	ldr	r3, [pc, #20]	; (80574c8 <ip4_route+0xdc>)
 80574b4:	681b      	ldr	r3, [r3, #0]
}
 80574b6:	4618      	mov	r0, r3
 80574b8:	3714      	adds	r7, #20
 80574ba:	46bd      	mov	sp, r7
 80574bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80574c0:	4770      	bx	lr
 80574c2:	bf00      	nop
 80574c4:	2000b5c0 	.word	0x2000b5c0
 80574c8:	2000b5c4 	.word	0x2000b5c4

080574cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80574cc:	b580      	push	{r7, lr}
 80574ce:	b082      	sub	sp, #8
 80574d0:	af00      	add	r7, sp, #0
 80574d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80574d4:	687b      	ldr	r3, [r7, #4]
 80574d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80574da:	f003 0301 	and.w	r3, r3, #1
 80574de:	b2db      	uxtb	r3, r3
 80574e0:	2b00      	cmp	r3, #0
 80574e2:	d016      	beq.n	8057512 <ip4_input_accept+0x46>
 80574e4:	687b      	ldr	r3, [r7, #4]
 80574e6:	3304      	adds	r3, #4
 80574e8:	681b      	ldr	r3, [r3, #0]
 80574ea:	2b00      	cmp	r3, #0
 80574ec:	d011      	beq.n	8057512 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80574ee:	4b0b      	ldr	r3, [pc, #44]	; (805751c <ip4_input_accept+0x50>)
 80574f0:	695a      	ldr	r2, [r3, #20]
 80574f2:	687b      	ldr	r3, [r7, #4]
 80574f4:	3304      	adds	r3, #4
 80574f6:	681b      	ldr	r3, [r3, #0]
 80574f8:	429a      	cmp	r2, r3
 80574fa:	d008      	beq.n	805750e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80574fc:	4b07      	ldr	r3, [pc, #28]	; (805751c <ip4_input_accept+0x50>)
 80574fe:	695b      	ldr	r3, [r3, #20]
 8057500:	6879      	ldr	r1, [r7, #4]
 8057502:	4618      	mov	r0, r3
 8057504:	f000 fa08 	bl	8057918 <ip4_addr_isbroadcast_u32>
 8057508:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 805750a:	2b00      	cmp	r3, #0
 805750c:	d001      	beq.n	8057512 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 805750e:	2301      	movs	r3, #1
 8057510:	e000      	b.n	8057514 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8057512:	2300      	movs	r3, #0
}
 8057514:	4618      	mov	r0, r3
 8057516:	3708      	adds	r7, #8
 8057518:	46bd      	mov	sp, r7
 805751a:	bd80      	pop	{r7, pc}
 805751c:	20005cb8 	.word	0x20005cb8

08057520 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8057520:	b580      	push	{r7, lr}
 8057522:	b086      	sub	sp, #24
 8057524:	af00      	add	r7, sp, #0
 8057526:	6078      	str	r0, [r7, #4]
 8057528:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 805752a:	687b      	ldr	r3, [r7, #4]
 805752c:	685b      	ldr	r3, [r3, #4]
 805752e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8057530:	697b      	ldr	r3, [r7, #20]
 8057532:	781b      	ldrb	r3, [r3, #0]
 8057534:	091b      	lsrs	r3, r3, #4
 8057536:	b2db      	uxtb	r3, r3
 8057538:	2b04      	cmp	r3, #4
 805753a:	d004      	beq.n	8057546 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 805753c:	6878      	ldr	r0, [r7, #4]
 805753e:	f7f7 fee1 	bl	804f304 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8057542:	2300      	movs	r3, #0
 8057544:	e107      	b.n	8057756 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8057546:	697b      	ldr	r3, [r7, #20]
 8057548:	781b      	ldrb	r3, [r3, #0]
 805754a:	f003 030f 	and.w	r3, r3, #15
 805754e:	b2db      	uxtb	r3, r3
 8057550:	009b      	lsls	r3, r3, #2
 8057552:	b2db      	uxtb	r3, r3
 8057554:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8057556:	697b      	ldr	r3, [r7, #20]
 8057558:	885b      	ldrh	r3, [r3, #2]
 805755a:	b29b      	uxth	r3, r3
 805755c:	4618      	mov	r0, r3
 805755e:	f7f6 fadf 	bl	804db20 <lwip_htons>
 8057562:	4603      	mov	r3, r0
 8057564:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8057566:	687b      	ldr	r3, [r7, #4]
 8057568:	891b      	ldrh	r3, [r3, #8]
 805756a:	89ba      	ldrh	r2, [r7, #12]
 805756c:	429a      	cmp	r2, r3
 805756e:	d204      	bcs.n	805757a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8057570:	89bb      	ldrh	r3, [r7, #12]
 8057572:	4619      	mov	r1, r3
 8057574:	6878      	ldr	r0, [r7, #4]
 8057576:	f7f7 fd3f 	bl	804eff8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 805757a:	687b      	ldr	r3, [r7, #4]
 805757c:	895b      	ldrh	r3, [r3, #10]
 805757e:	89fa      	ldrh	r2, [r7, #14]
 8057580:	429a      	cmp	r2, r3
 8057582:	d807      	bhi.n	8057594 <ip4_input+0x74>
 8057584:	687b      	ldr	r3, [r7, #4]
 8057586:	891b      	ldrh	r3, [r3, #8]
 8057588:	89ba      	ldrh	r2, [r7, #12]
 805758a:	429a      	cmp	r2, r3
 805758c:	d802      	bhi.n	8057594 <ip4_input+0x74>
 805758e:	89fb      	ldrh	r3, [r7, #14]
 8057590:	2b13      	cmp	r3, #19
 8057592:	d804      	bhi.n	805759e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8057594:	6878      	ldr	r0, [r7, #4]
 8057596:	f7f7 feb5 	bl	804f304 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 805759a:	2300      	movs	r3, #0
 805759c:	e0db      	b.n	8057756 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 805759e:	697b      	ldr	r3, [r7, #20]
 80575a0:	691b      	ldr	r3, [r3, #16]
 80575a2:	4a6f      	ldr	r2, [pc, #444]	; (8057760 <ip4_input+0x240>)
 80575a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80575a6:	697b      	ldr	r3, [r7, #20]
 80575a8:	68db      	ldr	r3, [r3, #12]
 80575aa:	4a6d      	ldr	r2, [pc, #436]	; (8057760 <ip4_input+0x240>)
 80575ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80575ae:	4b6c      	ldr	r3, [pc, #432]	; (8057760 <ip4_input+0x240>)
 80575b0:	695b      	ldr	r3, [r3, #20]
 80575b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80575b6:	2be0      	cmp	r3, #224	; 0xe0
 80575b8:	d112      	bne.n	80575e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80575ba:	683b      	ldr	r3, [r7, #0]
 80575bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80575c0:	f003 0301 	and.w	r3, r3, #1
 80575c4:	b2db      	uxtb	r3, r3
 80575c6:	2b00      	cmp	r3, #0
 80575c8:	d007      	beq.n	80575da <ip4_input+0xba>
 80575ca:	683b      	ldr	r3, [r7, #0]
 80575cc:	3304      	adds	r3, #4
 80575ce:	681b      	ldr	r3, [r3, #0]
 80575d0:	2b00      	cmp	r3, #0
 80575d2:	d002      	beq.n	80575da <ip4_input+0xba>
      netif = inp;
 80575d4:	683b      	ldr	r3, [r7, #0]
 80575d6:	613b      	str	r3, [r7, #16]
 80575d8:	e02a      	b.n	8057630 <ip4_input+0x110>
    } else {
      netif = NULL;
 80575da:	2300      	movs	r3, #0
 80575dc:	613b      	str	r3, [r7, #16]
 80575de:	e027      	b.n	8057630 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80575e0:	6838      	ldr	r0, [r7, #0]
 80575e2:	f7ff ff73 	bl	80574cc <ip4_input_accept>
 80575e6:	4603      	mov	r3, r0
 80575e8:	2b00      	cmp	r3, #0
 80575ea:	d002      	beq.n	80575f2 <ip4_input+0xd2>
      netif = inp;
 80575ec:	683b      	ldr	r3, [r7, #0]
 80575ee:	613b      	str	r3, [r7, #16]
 80575f0:	e01e      	b.n	8057630 <ip4_input+0x110>
    } else {
      netif = NULL;
 80575f2:	2300      	movs	r3, #0
 80575f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80575f6:	4b5a      	ldr	r3, [pc, #360]	; (8057760 <ip4_input+0x240>)
 80575f8:	695b      	ldr	r3, [r3, #20]
 80575fa:	b2db      	uxtb	r3, r3
 80575fc:	2b7f      	cmp	r3, #127	; 0x7f
 80575fe:	d017      	beq.n	8057630 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8057600:	4b58      	ldr	r3, [pc, #352]	; (8057764 <ip4_input+0x244>)
 8057602:	681b      	ldr	r3, [r3, #0]
 8057604:	613b      	str	r3, [r7, #16]
 8057606:	e00e      	b.n	8057626 <ip4_input+0x106>
          if (netif == inp) {
 8057608:	693a      	ldr	r2, [r7, #16]
 805760a:	683b      	ldr	r3, [r7, #0]
 805760c:	429a      	cmp	r2, r3
 805760e:	d006      	beq.n	805761e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8057610:	6938      	ldr	r0, [r7, #16]
 8057612:	f7ff ff5b 	bl	80574cc <ip4_input_accept>
 8057616:	4603      	mov	r3, r0
 8057618:	2b00      	cmp	r3, #0
 805761a:	d108      	bne.n	805762e <ip4_input+0x10e>
 805761c:	e000      	b.n	8057620 <ip4_input+0x100>
            continue;
 805761e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8057620:	693b      	ldr	r3, [r7, #16]
 8057622:	681b      	ldr	r3, [r3, #0]
 8057624:	613b      	str	r3, [r7, #16]
 8057626:	693b      	ldr	r3, [r7, #16]
 8057628:	2b00      	cmp	r3, #0
 805762a:	d1ed      	bne.n	8057608 <ip4_input+0xe8>
 805762c:	e000      	b.n	8057630 <ip4_input+0x110>
            break;
 805762e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8057630:	4b4b      	ldr	r3, [pc, #300]	; (8057760 <ip4_input+0x240>)
 8057632:	691b      	ldr	r3, [r3, #16]
 8057634:	6839      	ldr	r1, [r7, #0]
 8057636:	4618      	mov	r0, r3
 8057638:	f000 f96e 	bl	8057918 <ip4_addr_isbroadcast_u32>
 805763c:	4603      	mov	r3, r0
 805763e:	2b00      	cmp	r3, #0
 8057640:	d105      	bne.n	805764e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8057642:	4b47      	ldr	r3, [pc, #284]	; (8057760 <ip4_input+0x240>)
 8057644:	691b      	ldr	r3, [r3, #16]
 8057646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 805764a:	2be0      	cmp	r3, #224	; 0xe0
 805764c:	d104      	bne.n	8057658 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 805764e:	6878      	ldr	r0, [r7, #4]
 8057650:	f7f7 fe58 	bl	804f304 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8057654:	2300      	movs	r3, #0
 8057656:	e07e      	b.n	8057756 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8057658:	693b      	ldr	r3, [r7, #16]
 805765a:	2b00      	cmp	r3, #0
 805765c:	d104      	bne.n	8057668 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 805765e:	6878      	ldr	r0, [r7, #4]
 8057660:	f7f7 fe50 	bl	804f304 <pbuf_free>
    return ERR_OK;
 8057664:	2300      	movs	r3, #0
 8057666:	e076      	b.n	8057756 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8057668:	697b      	ldr	r3, [r7, #20]
 805766a:	88db      	ldrh	r3, [r3, #6]
 805766c:	b29b      	uxth	r3, r3
 805766e:	461a      	mov	r2, r3
 8057670:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8057674:	4013      	ands	r3, r2
 8057676:	2b00      	cmp	r3, #0
 8057678:	d00b      	beq.n	8057692 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 805767a:	6878      	ldr	r0, [r7, #4]
 805767c:	f000 fc92 	bl	8057fa4 <ip4_reass>
 8057680:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8057682:	687b      	ldr	r3, [r7, #4]
 8057684:	2b00      	cmp	r3, #0
 8057686:	d101      	bne.n	805768c <ip4_input+0x16c>
      return ERR_OK;
 8057688:	2300      	movs	r3, #0
 805768a:	e064      	b.n	8057756 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 805768c:	687b      	ldr	r3, [r7, #4]
 805768e:	685b      	ldr	r3, [r3, #4]
 8057690:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8057692:	4a33      	ldr	r2, [pc, #204]	; (8057760 <ip4_input+0x240>)
 8057694:	693b      	ldr	r3, [r7, #16]
 8057696:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8057698:	4a31      	ldr	r2, [pc, #196]	; (8057760 <ip4_input+0x240>)
 805769a:	683b      	ldr	r3, [r7, #0]
 805769c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 805769e:	4a30      	ldr	r2, [pc, #192]	; (8057760 <ip4_input+0x240>)
 80576a0:	697b      	ldr	r3, [r7, #20]
 80576a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80576a4:	697b      	ldr	r3, [r7, #20]
 80576a6:	781b      	ldrb	r3, [r3, #0]
 80576a8:	f003 030f 	and.w	r3, r3, #15
 80576ac:	b2db      	uxtb	r3, r3
 80576ae:	009b      	lsls	r3, r3, #2
 80576b0:	b2db      	uxtb	r3, r3
 80576b2:	b29a      	uxth	r2, r3
 80576b4:	4b2a      	ldr	r3, [pc, #168]	; (8057760 <ip4_input+0x240>)
 80576b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80576b8:	89fb      	ldrh	r3, [r7, #14]
 80576ba:	4619      	mov	r1, r3
 80576bc:	6878      	ldr	r0, [r7, #4]
 80576be:	f7f7 fd9b 	bl	804f1f8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80576c2:	697b      	ldr	r3, [r7, #20]
 80576c4:	7a5b      	ldrb	r3, [r3, #9]
 80576c6:	2b11      	cmp	r3, #17
 80576c8:	d006      	beq.n	80576d8 <ip4_input+0x1b8>
 80576ca:	2b11      	cmp	r3, #17
 80576cc:	dc13      	bgt.n	80576f6 <ip4_input+0x1d6>
 80576ce:	2b01      	cmp	r3, #1
 80576d0:	d00c      	beq.n	80576ec <ip4_input+0x1cc>
 80576d2:	2b06      	cmp	r3, #6
 80576d4:	d005      	beq.n	80576e2 <ip4_input+0x1c2>
 80576d6:	e00e      	b.n	80576f6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80576d8:	6839      	ldr	r1, [r7, #0]
 80576da:	6878      	ldr	r0, [r7, #4]
 80576dc:	f7fe fb5a 	bl	8055d94 <udp_input>
        break;
 80576e0:	e026      	b.n	8057730 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80576e2:	6839      	ldr	r1, [r7, #0]
 80576e4:	6878      	ldr	r0, [r7, #4]
 80576e6:	f7f9 ff13 	bl	8051510 <tcp_input>
        break;
 80576ea:	e021      	b.n	8057730 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80576ec:	6839      	ldr	r1, [r7, #0]
 80576ee:	6878      	ldr	r0, [r7, #4]
 80576f0:	f7ff fcee 	bl	80570d0 <icmp_input>
        break;
 80576f4:	e01c      	b.n	8057730 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80576f6:	4b1a      	ldr	r3, [pc, #104]	; (8057760 <ip4_input+0x240>)
 80576f8:	695b      	ldr	r3, [r3, #20]
 80576fa:	6939      	ldr	r1, [r7, #16]
 80576fc:	4618      	mov	r0, r3
 80576fe:	f000 f90b 	bl	8057918 <ip4_addr_isbroadcast_u32>
 8057702:	4603      	mov	r3, r0
 8057704:	2b00      	cmp	r3, #0
 8057706:	d10f      	bne.n	8057728 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8057708:	4b15      	ldr	r3, [pc, #84]	; (8057760 <ip4_input+0x240>)
 805770a:	695b      	ldr	r3, [r3, #20]
 805770c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8057710:	2be0      	cmp	r3, #224	; 0xe0
 8057712:	d009      	beq.n	8057728 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8057714:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8057718:	4619      	mov	r1, r3
 805771a:	6878      	ldr	r0, [r7, #4]
 805771c:	f7f7 fddf 	bl	804f2de <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8057720:	2102      	movs	r1, #2
 8057722:	6878      	ldr	r0, [r7, #4]
 8057724:	f7ff fdd8 	bl	80572d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8057728:	6878      	ldr	r0, [r7, #4]
 805772a:	f7f7 fdeb 	bl	804f304 <pbuf_free>
        break;
 805772e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8057730:	4b0b      	ldr	r3, [pc, #44]	; (8057760 <ip4_input+0x240>)
 8057732:	2200      	movs	r2, #0
 8057734:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8057736:	4b0a      	ldr	r3, [pc, #40]	; (8057760 <ip4_input+0x240>)
 8057738:	2200      	movs	r2, #0
 805773a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 805773c:	4b08      	ldr	r3, [pc, #32]	; (8057760 <ip4_input+0x240>)
 805773e:	2200      	movs	r2, #0
 8057740:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8057742:	4b07      	ldr	r3, [pc, #28]	; (8057760 <ip4_input+0x240>)
 8057744:	2200      	movs	r2, #0
 8057746:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8057748:	4b05      	ldr	r3, [pc, #20]	; (8057760 <ip4_input+0x240>)
 805774a:	2200      	movs	r2, #0
 805774c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 805774e:	4b04      	ldr	r3, [pc, #16]	; (8057760 <ip4_input+0x240>)
 8057750:	2200      	movs	r2, #0
 8057752:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8057754:	2300      	movs	r3, #0
}
 8057756:	4618      	mov	r0, r3
 8057758:	3718      	adds	r7, #24
 805775a:	46bd      	mov	sp, r7
 805775c:	bd80      	pop	{r7, pc}
 805775e:	bf00      	nop
 8057760:	20005cb8 	.word	0x20005cb8
 8057764:	2000b5c0 	.word	0x2000b5c0

08057768 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8057768:	b580      	push	{r7, lr}
 805776a:	b08a      	sub	sp, #40	; 0x28
 805776c:	af04      	add	r7, sp, #16
 805776e:	60f8      	str	r0, [r7, #12]
 8057770:	60b9      	str	r1, [r7, #8]
 8057772:	607a      	str	r2, [r7, #4]
 8057774:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8057776:	68bb      	ldr	r3, [r7, #8]
 8057778:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 805777a:	687b      	ldr	r3, [r7, #4]
 805777c:	2b00      	cmp	r3, #0
 805777e:	d009      	beq.n	8057794 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8057780:	68bb      	ldr	r3, [r7, #8]
 8057782:	2b00      	cmp	r3, #0
 8057784:	d003      	beq.n	805778e <ip4_output_if+0x26>
 8057786:	68bb      	ldr	r3, [r7, #8]
 8057788:	681b      	ldr	r3, [r3, #0]
 805778a:	2b00      	cmp	r3, #0
 805778c:	d102      	bne.n	8057794 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 805778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057790:	3304      	adds	r3, #4
 8057792:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8057794:	78fa      	ldrb	r2, [r7, #3]
 8057796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057798:	9302      	str	r3, [sp, #8]
 805779a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 805779e:	9301      	str	r3, [sp, #4]
 80577a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80577a4:	9300      	str	r3, [sp, #0]
 80577a6:	4613      	mov	r3, r2
 80577a8:	687a      	ldr	r2, [r7, #4]
 80577aa:	6979      	ldr	r1, [r7, #20]
 80577ac:	68f8      	ldr	r0, [r7, #12]
 80577ae:	f000 f805 	bl	80577bc <ip4_output_if_src>
 80577b2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80577b4:	4618      	mov	r0, r3
 80577b6:	3718      	adds	r7, #24
 80577b8:	46bd      	mov	sp, r7
 80577ba:	bd80      	pop	{r7, pc}

080577bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80577bc:	b580      	push	{r7, lr}
 80577be:	b088      	sub	sp, #32
 80577c0:	af00      	add	r7, sp, #0
 80577c2:	60f8      	str	r0, [r7, #12]
 80577c4:	60b9      	str	r1, [r7, #8]
 80577c6:	607a      	str	r2, [r7, #4]
 80577c8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80577ca:	68fb      	ldr	r3, [r7, #12]
 80577cc:	7b9b      	ldrb	r3, [r3, #14]
 80577ce:	2b01      	cmp	r3, #1
 80577d0:	d006      	beq.n	80577e0 <ip4_output_if_src+0x24>
 80577d2:	4b4b      	ldr	r3, [pc, #300]	; (8057900 <ip4_output_if_src+0x144>)
 80577d4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80577d8:	494a      	ldr	r1, [pc, #296]	; (8057904 <ip4_output_if_src+0x148>)
 80577da:	484b      	ldr	r0, [pc, #300]	; (8057908 <ip4_output_if_src+0x14c>)
 80577dc:	f001 fc2a 	bl	8059034 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80577e0:	687b      	ldr	r3, [r7, #4]
 80577e2:	2b00      	cmp	r3, #0
 80577e4:	d060      	beq.n	80578a8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80577e6:	2314      	movs	r3, #20
 80577e8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80577ea:	2114      	movs	r1, #20
 80577ec:	68f8      	ldr	r0, [r7, #12]
 80577ee:	f7f7 fcf3 	bl	804f1d8 <pbuf_add_header>
 80577f2:	4603      	mov	r3, r0
 80577f4:	2b00      	cmp	r3, #0
 80577f6:	d002      	beq.n	80577fe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80577f8:	f06f 0301 	mvn.w	r3, #1
 80577fc:	e07c      	b.n	80578f8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80577fe:	68fb      	ldr	r3, [r7, #12]
 8057800:	685b      	ldr	r3, [r3, #4]
 8057802:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8057804:	68fb      	ldr	r3, [r7, #12]
 8057806:	895b      	ldrh	r3, [r3, #10]
 8057808:	2b13      	cmp	r3, #19
 805780a:	d806      	bhi.n	805781a <ip4_output_if_src+0x5e>
 805780c:	4b3c      	ldr	r3, [pc, #240]	; (8057900 <ip4_output_if_src+0x144>)
 805780e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8057812:	493e      	ldr	r1, [pc, #248]	; (805790c <ip4_output_if_src+0x150>)
 8057814:	483c      	ldr	r0, [pc, #240]	; (8057908 <ip4_output_if_src+0x14c>)
 8057816:	f001 fc0d 	bl	8059034 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 805781a:	69fb      	ldr	r3, [r7, #28]
 805781c:	78fa      	ldrb	r2, [r7, #3]
 805781e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8057820:	69fb      	ldr	r3, [r7, #28]
 8057822:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8057826:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8057828:	687b      	ldr	r3, [r7, #4]
 805782a:	681a      	ldr	r2, [r3, #0]
 805782c:	69fb      	ldr	r3, [r7, #28]
 805782e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8057830:	8b7b      	ldrh	r3, [r7, #26]
 8057832:	089b      	lsrs	r3, r3, #2
 8057834:	b29b      	uxth	r3, r3
 8057836:	b2db      	uxtb	r3, r3
 8057838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 805783c:	b2da      	uxtb	r2, r3
 805783e:	69fb      	ldr	r3, [r7, #28]
 8057840:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8057842:	69fb      	ldr	r3, [r7, #28]
 8057844:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8057848:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 805784a:	68fb      	ldr	r3, [r7, #12]
 805784c:	891b      	ldrh	r3, [r3, #8]
 805784e:	4618      	mov	r0, r3
 8057850:	f7f6 f966 	bl	804db20 <lwip_htons>
 8057854:	4603      	mov	r3, r0
 8057856:	461a      	mov	r2, r3
 8057858:	69fb      	ldr	r3, [r7, #28]
 805785a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 805785c:	69fb      	ldr	r3, [r7, #28]
 805785e:	2200      	movs	r2, #0
 8057860:	719a      	strb	r2, [r3, #6]
 8057862:	2200      	movs	r2, #0
 8057864:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8057866:	4b2a      	ldr	r3, [pc, #168]	; (8057910 <ip4_output_if_src+0x154>)
 8057868:	881b      	ldrh	r3, [r3, #0]
 805786a:	4618      	mov	r0, r3
 805786c:	f7f6 f958 	bl	804db20 <lwip_htons>
 8057870:	4603      	mov	r3, r0
 8057872:	461a      	mov	r2, r3
 8057874:	69fb      	ldr	r3, [r7, #28]
 8057876:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8057878:	4b25      	ldr	r3, [pc, #148]	; (8057910 <ip4_output_if_src+0x154>)
 805787a:	881b      	ldrh	r3, [r3, #0]
 805787c:	3301      	adds	r3, #1
 805787e:	b29a      	uxth	r2, r3
 8057880:	4b23      	ldr	r3, [pc, #140]	; (8057910 <ip4_output_if_src+0x154>)
 8057882:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8057884:	68bb      	ldr	r3, [r7, #8]
 8057886:	2b00      	cmp	r3, #0
 8057888:	d104      	bne.n	8057894 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 805788a:	4b22      	ldr	r3, [pc, #136]	; (8057914 <ip4_output_if_src+0x158>)
 805788c:	681a      	ldr	r2, [r3, #0]
 805788e:	69fb      	ldr	r3, [r7, #28]
 8057890:	60da      	str	r2, [r3, #12]
 8057892:	e003      	b.n	805789c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8057894:	68bb      	ldr	r3, [r7, #8]
 8057896:	681a      	ldr	r2, [r3, #0]
 8057898:	69fb      	ldr	r3, [r7, #28]
 805789a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 805789c:	69fb      	ldr	r3, [r7, #28]
 805789e:	2200      	movs	r2, #0
 80578a0:	729a      	strb	r2, [r3, #10]
 80578a2:	2200      	movs	r2, #0
 80578a4:	72da      	strb	r2, [r3, #11]
 80578a6:	e00f      	b.n	80578c8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80578a8:	68fb      	ldr	r3, [r7, #12]
 80578aa:	895b      	ldrh	r3, [r3, #10]
 80578ac:	2b13      	cmp	r3, #19
 80578ae:	d802      	bhi.n	80578b6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80578b0:	f06f 0301 	mvn.w	r3, #1
 80578b4:	e020      	b.n	80578f8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80578b6:	68fb      	ldr	r3, [r7, #12]
 80578b8:	685b      	ldr	r3, [r3, #4]
 80578ba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80578bc:	69fb      	ldr	r3, [r7, #28]
 80578be:	691b      	ldr	r3, [r3, #16]
 80578c0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80578c2:	f107 0314 	add.w	r3, r7, #20
 80578c6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80578c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80578ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80578cc:	2b00      	cmp	r3, #0
 80578ce:	d00c      	beq.n	80578ea <ip4_output_if_src+0x12e>
 80578d0:	68fb      	ldr	r3, [r7, #12]
 80578d2:	891a      	ldrh	r2, [r3, #8]
 80578d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80578d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80578d8:	429a      	cmp	r2, r3
 80578da:	d906      	bls.n	80578ea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80578dc:	687a      	ldr	r2, [r7, #4]
 80578de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80578e0:	68f8      	ldr	r0, [r7, #12]
 80578e2:	f000 fd53 	bl	805838c <ip4_frag>
 80578e6:	4603      	mov	r3, r0
 80578e8:	e006      	b.n	80578f8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80578ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80578ec:	695b      	ldr	r3, [r3, #20]
 80578ee:	687a      	ldr	r2, [r7, #4]
 80578f0:	68f9      	ldr	r1, [r7, #12]
 80578f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80578f4:	4798      	blx	r3
 80578f6:	4603      	mov	r3, r0
}
 80578f8:	4618      	mov	r0, r3
 80578fa:	3720      	adds	r7, #32
 80578fc:	46bd      	mov	sp, r7
 80578fe:	bd80      	pop	{r7, pc}
 8057900:	0805d49c 	.word	0x0805d49c
 8057904:	0805d4d0 	.word	0x0805d4d0
 8057908:	0805d4dc 	.word	0x0805d4dc
 805790c:	0805d504 	.word	0x0805d504
 8057910:	2000b71e 	.word	0x2000b71e
 8057914:	0805d928 	.word	0x0805d928

08057918 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8057918:	b480      	push	{r7}
 805791a:	b085      	sub	sp, #20
 805791c:	af00      	add	r7, sp, #0
 805791e:	6078      	str	r0, [r7, #4]
 8057920:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8057922:	687b      	ldr	r3, [r7, #4]
 8057924:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8057926:	687b      	ldr	r3, [r7, #4]
 8057928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805792c:	d002      	beq.n	8057934 <ip4_addr_isbroadcast_u32+0x1c>
 805792e:	687b      	ldr	r3, [r7, #4]
 8057930:	2b00      	cmp	r3, #0
 8057932:	d101      	bne.n	8057938 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8057934:	2301      	movs	r3, #1
 8057936:	e02a      	b.n	805798e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8057938:	683b      	ldr	r3, [r7, #0]
 805793a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 805793e:	f003 0302 	and.w	r3, r3, #2
 8057942:	2b00      	cmp	r3, #0
 8057944:	d101      	bne.n	805794a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8057946:	2300      	movs	r3, #0
 8057948:	e021      	b.n	805798e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 805794a:	683b      	ldr	r3, [r7, #0]
 805794c:	3304      	adds	r3, #4
 805794e:	681b      	ldr	r3, [r3, #0]
 8057950:	687a      	ldr	r2, [r7, #4]
 8057952:	429a      	cmp	r2, r3
 8057954:	d101      	bne.n	805795a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8057956:	2300      	movs	r3, #0
 8057958:	e019      	b.n	805798e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 805795a:	68fa      	ldr	r2, [r7, #12]
 805795c:	683b      	ldr	r3, [r7, #0]
 805795e:	3304      	adds	r3, #4
 8057960:	681b      	ldr	r3, [r3, #0]
 8057962:	405a      	eors	r2, r3
 8057964:	683b      	ldr	r3, [r7, #0]
 8057966:	3308      	adds	r3, #8
 8057968:	681b      	ldr	r3, [r3, #0]
 805796a:	4013      	ands	r3, r2
 805796c:	2b00      	cmp	r3, #0
 805796e:	d10d      	bne.n	805798c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8057970:	683b      	ldr	r3, [r7, #0]
 8057972:	3308      	adds	r3, #8
 8057974:	681b      	ldr	r3, [r3, #0]
 8057976:	43da      	mvns	r2, r3
 8057978:	687b      	ldr	r3, [r7, #4]
 805797a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 805797c:	683b      	ldr	r3, [r7, #0]
 805797e:	3308      	adds	r3, #8
 8057980:	681b      	ldr	r3, [r3, #0]
 8057982:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8057984:	429a      	cmp	r2, r3
 8057986:	d101      	bne.n	805798c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8057988:	2301      	movs	r3, #1
 805798a:	e000      	b.n	805798e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 805798c:	2300      	movs	r3, #0
  }
}
 805798e:	4618      	mov	r0, r3
 8057990:	3714      	adds	r7, #20
 8057992:	46bd      	mov	sp, r7
 8057994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8057998:	4770      	bx	lr
	...

0805799c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 805799c:	b580      	push	{r7, lr}
 805799e:	b084      	sub	sp, #16
 80579a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80579a2:	2300      	movs	r3, #0
 80579a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80579a6:	4b12      	ldr	r3, [pc, #72]	; (80579f0 <ip_reass_tmr+0x54>)
 80579a8:	681b      	ldr	r3, [r3, #0]
 80579aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80579ac:	e018      	b.n	80579e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80579ae:	68fb      	ldr	r3, [r7, #12]
 80579b0:	7fdb      	ldrb	r3, [r3, #31]
 80579b2:	2b00      	cmp	r3, #0
 80579b4:	d00b      	beq.n	80579ce <ip_reass_tmr+0x32>
      r->timer--;
 80579b6:	68fb      	ldr	r3, [r7, #12]
 80579b8:	7fdb      	ldrb	r3, [r3, #31]
 80579ba:	3b01      	subs	r3, #1
 80579bc:	b2da      	uxtb	r2, r3
 80579be:	68fb      	ldr	r3, [r7, #12]
 80579c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80579c2:	68fb      	ldr	r3, [r7, #12]
 80579c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80579c6:	68fb      	ldr	r3, [r7, #12]
 80579c8:	681b      	ldr	r3, [r3, #0]
 80579ca:	60fb      	str	r3, [r7, #12]
 80579cc:	e008      	b.n	80579e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80579ce:	68fb      	ldr	r3, [r7, #12]
 80579d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80579d2:	68fb      	ldr	r3, [r7, #12]
 80579d4:	681b      	ldr	r3, [r3, #0]
 80579d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80579d8:	68b9      	ldr	r1, [r7, #8]
 80579da:	6878      	ldr	r0, [r7, #4]
 80579dc:	f000 f80a 	bl	80579f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80579e0:	68fb      	ldr	r3, [r7, #12]
 80579e2:	2b00      	cmp	r3, #0
 80579e4:	d1e3      	bne.n	80579ae <ip_reass_tmr+0x12>
    }
  }
}
 80579e6:	bf00      	nop
 80579e8:	bf00      	nop
 80579ea:	3710      	adds	r7, #16
 80579ec:	46bd      	mov	sp, r7
 80579ee:	bd80      	pop	{r7, pc}
 80579f0:	2000b720 	.word	0x2000b720

080579f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80579f4:	b580      	push	{r7, lr}
 80579f6:	b088      	sub	sp, #32
 80579f8:	af00      	add	r7, sp, #0
 80579fa:	6078      	str	r0, [r7, #4]
 80579fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80579fe:	2300      	movs	r3, #0
 8057a00:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8057a02:	683a      	ldr	r2, [r7, #0]
 8057a04:	687b      	ldr	r3, [r7, #4]
 8057a06:	429a      	cmp	r2, r3
 8057a08:	d105      	bne.n	8057a16 <ip_reass_free_complete_datagram+0x22>
 8057a0a:	4b45      	ldr	r3, [pc, #276]	; (8057b20 <ip_reass_free_complete_datagram+0x12c>)
 8057a0c:	22ab      	movs	r2, #171	; 0xab
 8057a0e:	4945      	ldr	r1, [pc, #276]	; (8057b24 <ip_reass_free_complete_datagram+0x130>)
 8057a10:	4845      	ldr	r0, [pc, #276]	; (8057b28 <ip_reass_free_complete_datagram+0x134>)
 8057a12:	f001 fb0f 	bl	8059034 <iprintf>
  if (prev != NULL) {
 8057a16:	683b      	ldr	r3, [r7, #0]
 8057a18:	2b00      	cmp	r3, #0
 8057a1a:	d00a      	beq.n	8057a32 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8057a1c:	683b      	ldr	r3, [r7, #0]
 8057a1e:	681b      	ldr	r3, [r3, #0]
 8057a20:	687a      	ldr	r2, [r7, #4]
 8057a22:	429a      	cmp	r2, r3
 8057a24:	d005      	beq.n	8057a32 <ip_reass_free_complete_datagram+0x3e>
 8057a26:	4b3e      	ldr	r3, [pc, #248]	; (8057b20 <ip_reass_free_complete_datagram+0x12c>)
 8057a28:	22ad      	movs	r2, #173	; 0xad
 8057a2a:	4940      	ldr	r1, [pc, #256]	; (8057b2c <ip_reass_free_complete_datagram+0x138>)
 8057a2c:	483e      	ldr	r0, [pc, #248]	; (8057b28 <ip_reass_free_complete_datagram+0x134>)
 8057a2e:	f001 fb01 	bl	8059034 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8057a32:	687b      	ldr	r3, [r7, #4]
 8057a34:	685b      	ldr	r3, [r3, #4]
 8057a36:	685b      	ldr	r3, [r3, #4]
 8057a38:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8057a3a:	697b      	ldr	r3, [r7, #20]
 8057a3c:	889b      	ldrh	r3, [r3, #4]
 8057a3e:	b29b      	uxth	r3, r3
 8057a40:	2b00      	cmp	r3, #0
 8057a42:	d12a      	bne.n	8057a9a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8057a44:	687b      	ldr	r3, [r7, #4]
 8057a46:	685b      	ldr	r3, [r3, #4]
 8057a48:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8057a4a:	697b      	ldr	r3, [r7, #20]
 8057a4c:	681a      	ldr	r2, [r3, #0]
 8057a4e:	687b      	ldr	r3, [r7, #4]
 8057a50:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8057a52:	69bb      	ldr	r3, [r7, #24]
 8057a54:	6858      	ldr	r0, [r3, #4]
 8057a56:	687b      	ldr	r3, [r7, #4]
 8057a58:	3308      	adds	r3, #8
 8057a5a:	2214      	movs	r2, #20
 8057a5c:	4619      	mov	r1, r3
 8057a5e:	f001 f9d9 	bl	8058e14 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8057a62:	2101      	movs	r1, #1
 8057a64:	69b8      	ldr	r0, [r7, #24]
 8057a66:	f7ff fc47 	bl	80572f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8057a6a:	69b8      	ldr	r0, [r7, #24]
 8057a6c:	f7f7 fcd8 	bl	804f420 <pbuf_clen>
 8057a70:	4603      	mov	r3, r0
 8057a72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8057a74:	8bfa      	ldrh	r2, [r7, #30]
 8057a76:	8a7b      	ldrh	r3, [r7, #18]
 8057a78:	4413      	add	r3, r2
 8057a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8057a7e:	db05      	blt.n	8057a8c <ip_reass_free_complete_datagram+0x98>
 8057a80:	4b27      	ldr	r3, [pc, #156]	; (8057b20 <ip_reass_free_complete_datagram+0x12c>)
 8057a82:	22bc      	movs	r2, #188	; 0xbc
 8057a84:	492a      	ldr	r1, [pc, #168]	; (8057b30 <ip_reass_free_complete_datagram+0x13c>)
 8057a86:	4828      	ldr	r0, [pc, #160]	; (8057b28 <ip_reass_free_complete_datagram+0x134>)
 8057a88:	f001 fad4 	bl	8059034 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8057a8c:	8bfa      	ldrh	r2, [r7, #30]
 8057a8e:	8a7b      	ldrh	r3, [r7, #18]
 8057a90:	4413      	add	r3, r2
 8057a92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8057a94:	69b8      	ldr	r0, [r7, #24]
 8057a96:	f7f7 fc35 	bl	804f304 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8057a9a:	687b      	ldr	r3, [r7, #4]
 8057a9c:	685b      	ldr	r3, [r3, #4]
 8057a9e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8057aa0:	e01f      	b.n	8057ae2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8057aa2:	69bb      	ldr	r3, [r7, #24]
 8057aa4:	685b      	ldr	r3, [r3, #4]
 8057aa6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8057aa8:	69bb      	ldr	r3, [r7, #24]
 8057aaa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8057aac:	697b      	ldr	r3, [r7, #20]
 8057aae:	681b      	ldr	r3, [r3, #0]
 8057ab0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8057ab2:	68f8      	ldr	r0, [r7, #12]
 8057ab4:	f7f7 fcb4 	bl	804f420 <pbuf_clen>
 8057ab8:	4603      	mov	r3, r0
 8057aba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8057abc:	8bfa      	ldrh	r2, [r7, #30]
 8057abe:	8a7b      	ldrh	r3, [r7, #18]
 8057ac0:	4413      	add	r3, r2
 8057ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8057ac6:	db05      	blt.n	8057ad4 <ip_reass_free_complete_datagram+0xe0>
 8057ac8:	4b15      	ldr	r3, [pc, #84]	; (8057b20 <ip_reass_free_complete_datagram+0x12c>)
 8057aca:	22cc      	movs	r2, #204	; 0xcc
 8057acc:	4918      	ldr	r1, [pc, #96]	; (8057b30 <ip_reass_free_complete_datagram+0x13c>)
 8057ace:	4816      	ldr	r0, [pc, #88]	; (8057b28 <ip_reass_free_complete_datagram+0x134>)
 8057ad0:	f001 fab0 	bl	8059034 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8057ad4:	8bfa      	ldrh	r2, [r7, #30]
 8057ad6:	8a7b      	ldrh	r3, [r7, #18]
 8057ad8:	4413      	add	r3, r2
 8057ada:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8057adc:	68f8      	ldr	r0, [r7, #12]
 8057ade:	f7f7 fc11 	bl	804f304 <pbuf_free>
  while (p != NULL) {
 8057ae2:	69bb      	ldr	r3, [r7, #24]
 8057ae4:	2b00      	cmp	r3, #0
 8057ae6:	d1dc      	bne.n	8057aa2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8057ae8:	6839      	ldr	r1, [r7, #0]
 8057aea:	6878      	ldr	r0, [r7, #4]
 8057aec:	f000 f8c2 	bl	8057c74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8057af0:	4b10      	ldr	r3, [pc, #64]	; (8057b34 <ip_reass_free_complete_datagram+0x140>)
 8057af2:	881b      	ldrh	r3, [r3, #0]
 8057af4:	8bfa      	ldrh	r2, [r7, #30]
 8057af6:	429a      	cmp	r2, r3
 8057af8:	d905      	bls.n	8057b06 <ip_reass_free_complete_datagram+0x112>
 8057afa:	4b09      	ldr	r3, [pc, #36]	; (8057b20 <ip_reass_free_complete_datagram+0x12c>)
 8057afc:	22d2      	movs	r2, #210	; 0xd2
 8057afe:	490e      	ldr	r1, [pc, #56]	; (8057b38 <ip_reass_free_complete_datagram+0x144>)
 8057b00:	4809      	ldr	r0, [pc, #36]	; (8057b28 <ip_reass_free_complete_datagram+0x134>)
 8057b02:	f001 fa97 	bl	8059034 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8057b06:	4b0b      	ldr	r3, [pc, #44]	; (8057b34 <ip_reass_free_complete_datagram+0x140>)
 8057b08:	881a      	ldrh	r2, [r3, #0]
 8057b0a:	8bfb      	ldrh	r3, [r7, #30]
 8057b0c:	1ad3      	subs	r3, r2, r3
 8057b0e:	b29a      	uxth	r2, r3
 8057b10:	4b08      	ldr	r3, [pc, #32]	; (8057b34 <ip_reass_free_complete_datagram+0x140>)
 8057b12:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8057b14:	8bfb      	ldrh	r3, [r7, #30]
}
 8057b16:	4618      	mov	r0, r3
 8057b18:	3720      	adds	r7, #32
 8057b1a:	46bd      	mov	sp, r7
 8057b1c:	bd80      	pop	{r7, pc}
 8057b1e:	bf00      	nop
 8057b20:	0805d534 	.word	0x0805d534
 8057b24:	0805d570 	.word	0x0805d570
 8057b28:	0805d57c 	.word	0x0805d57c
 8057b2c:	0805d5a4 	.word	0x0805d5a4
 8057b30:	0805d5b8 	.word	0x0805d5b8
 8057b34:	2000b724 	.word	0x2000b724
 8057b38:	0805d5d8 	.word	0x0805d5d8

08057b3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8057b3c:	b580      	push	{r7, lr}
 8057b3e:	b08a      	sub	sp, #40	; 0x28
 8057b40:	af00      	add	r7, sp, #0
 8057b42:	6078      	str	r0, [r7, #4]
 8057b44:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8057b46:	2300      	movs	r3, #0
 8057b48:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8057b4a:	2300      	movs	r3, #0
 8057b4c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8057b4e:	2300      	movs	r3, #0
 8057b50:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8057b52:	2300      	movs	r3, #0
 8057b54:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8057b56:	2300      	movs	r3, #0
 8057b58:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8057b5a:	4b28      	ldr	r3, [pc, #160]	; (8057bfc <ip_reass_remove_oldest_datagram+0xc0>)
 8057b5c:	681b      	ldr	r3, [r3, #0]
 8057b5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8057b60:	e030      	b.n	8057bc4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8057b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057b64:	695a      	ldr	r2, [r3, #20]
 8057b66:	687b      	ldr	r3, [r7, #4]
 8057b68:	68db      	ldr	r3, [r3, #12]
 8057b6a:	429a      	cmp	r2, r3
 8057b6c:	d10c      	bne.n	8057b88 <ip_reass_remove_oldest_datagram+0x4c>
 8057b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057b70:	699a      	ldr	r2, [r3, #24]
 8057b72:	687b      	ldr	r3, [r7, #4]
 8057b74:	691b      	ldr	r3, [r3, #16]
 8057b76:	429a      	cmp	r2, r3
 8057b78:	d106      	bne.n	8057b88 <ip_reass_remove_oldest_datagram+0x4c>
 8057b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057b7c:	899a      	ldrh	r2, [r3, #12]
 8057b7e:	687b      	ldr	r3, [r7, #4]
 8057b80:	889b      	ldrh	r3, [r3, #4]
 8057b82:	b29b      	uxth	r3, r3
 8057b84:	429a      	cmp	r2, r3
 8057b86:	d014      	beq.n	8057bb2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8057b88:	693b      	ldr	r3, [r7, #16]
 8057b8a:	3301      	adds	r3, #1
 8057b8c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8057b8e:	6a3b      	ldr	r3, [r7, #32]
 8057b90:	2b00      	cmp	r3, #0
 8057b92:	d104      	bne.n	8057b9e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8057b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057b96:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8057b98:	69fb      	ldr	r3, [r7, #28]
 8057b9a:	61bb      	str	r3, [r7, #24]
 8057b9c:	e009      	b.n	8057bb2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8057b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057ba0:	7fda      	ldrb	r2, [r3, #31]
 8057ba2:	6a3b      	ldr	r3, [r7, #32]
 8057ba4:	7fdb      	ldrb	r3, [r3, #31]
 8057ba6:	429a      	cmp	r2, r3
 8057ba8:	d803      	bhi.n	8057bb2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8057baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057bac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8057bae:	69fb      	ldr	r3, [r7, #28]
 8057bb0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8057bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057bb4:	681b      	ldr	r3, [r3, #0]
 8057bb6:	2b00      	cmp	r3, #0
 8057bb8:	d001      	beq.n	8057bbe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8057bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057bbc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8057bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057bc0:	681b      	ldr	r3, [r3, #0]
 8057bc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8057bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057bc6:	2b00      	cmp	r3, #0
 8057bc8:	d1cb      	bne.n	8057b62 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8057bca:	6a3b      	ldr	r3, [r7, #32]
 8057bcc:	2b00      	cmp	r3, #0
 8057bce:	d008      	beq.n	8057be2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8057bd0:	69b9      	ldr	r1, [r7, #24]
 8057bd2:	6a38      	ldr	r0, [r7, #32]
 8057bd4:	f7ff ff0e 	bl	80579f4 <ip_reass_free_complete_datagram>
 8057bd8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8057bda:	697a      	ldr	r2, [r7, #20]
 8057bdc:	68fb      	ldr	r3, [r7, #12]
 8057bde:	4413      	add	r3, r2
 8057be0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8057be2:	697a      	ldr	r2, [r7, #20]
 8057be4:	683b      	ldr	r3, [r7, #0]
 8057be6:	429a      	cmp	r2, r3
 8057be8:	da02      	bge.n	8057bf0 <ip_reass_remove_oldest_datagram+0xb4>
 8057bea:	693b      	ldr	r3, [r7, #16]
 8057bec:	2b01      	cmp	r3, #1
 8057bee:	dcac      	bgt.n	8057b4a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8057bf0:	697b      	ldr	r3, [r7, #20]
}
 8057bf2:	4618      	mov	r0, r3
 8057bf4:	3728      	adds	r7, #40	; 0x28
 8057bf6:	46bd      	mov	sp, r7
 8057bf8:	bd80      	pop	{r7, pc}
 8057bfa:	bf00      	nop
 8057bfc:	2000b720 	.word	0x2000b720

08057c00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8057c00:	b580      	push	{r7, lr}
 8057c02:	b084      	sub	sp, #16
 8057c04:	af00      	add	r7, sp, #0
 8057c06:	6078      	str	r0, [r7, #4]
 8057c08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8057c0a:	2004      	movs	r0, #4
 8057c0c:	f7f6 fc60 	bl	804e4d0 <memp_malloc>
 8057c10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8057c12:	68fb      	ldr	r3, [r7, #12]
 8057c14:	2b00      	cmp	r3, #0
 8057c16:	d110      	bne.n	8057c3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8057c18:	6839      	ldr	r1, [r7, #0]
 8057c1a:	6878      	ldr	r0, [r7, #4]
 8057c1c:	f7ff ff8e 	bl	8057b3c <ip_reass_remove_oldest_datagram>
 8057c20:	4602      	mov	r2, r0
 8057c22:	683b      	ldr	r3, [r7, #0]
 8057c24:	4293      	cmp	r3, r2
 8057c26:	dc03      	bgt.n	8057c30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8057c28:	2004      	movs	r0, #4
 8057c2a:	f7f6 fc51 	bl	804e4d0 <memp_malloc>
 8057c2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8057c30:	68fb      	ldr	r3, [r7, #12]
 8057c32:	2b00      	cmp	r3, #0
 8057c34:	d101      	bne.n	8057c3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8057c36:	2300      	movs	r3, #0
 8057c38:	e016      	b.n	8057c68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8057c3a:	2220      	movs	r2, #32
 8057c3c:	2100      	movs	r1, #0
 8057c3e:	68f8      	ldr	r0, [r7, #12]
 8057c40:	f001 f910 	bl	8058e64 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8057c44:	68fb      	ldr	r3, [r7, #12]
 8057c46:	220f      	movs	r2, #15
 8057c48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8057c4a:	4b09      	ldr	r3, [pc, #36]	; (8057c70 <ip_reass_enqueue_new_datagram+0x70>)
 8057c4c:	681a      	ldr	r2, [r3, #0]
 8057c4e:	68fb      	ldr	r3, [r7, #12]
 8057c50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8057c52:	4a07      	ldr	r2, [pc, #28]	; (8057c70 <ip_reass_enqueue_new_datagram+0x70>)
 8057c54:	68fb      	ldr	r3, [r7, #12]
 8057c56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8057c58:	68fb      	ldr	r3, [r7, #12]
 8057c5a:	3308      	adds	r3, #8
 8057c5c:	2214      	movs	r2, #20
 8057c5e:	6879      	ldr	r1, [r7, #4]
 8057c60:	4618      	mov	r0, r3
 8057c62:	f001 f8d7 	bl	8058e14 <memcpy>
  return ipr;
 8057c66:	68fb      	ldr	r3, [r7, #12]
}
 8057c68:	4618      	mov	r0, r3
 8057c6a:	3710      	adds	r7, #16
 8057c6c:	46bd      	mov	sp, r7
 8057c6e:	bd80      	pop	{r7, pc}
 8057c70:	2000b720 	.word	0x2000b720

08057c74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8057c74:	b580      	push	{r7, lr}
 8057c76:	b082      	sub	sp, #8
 8057c78:	af00      	add	r7, sp, #0
 8057c7a:	6078      	str	r0, [r7, #4]
 8057c7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8057c7e:	4b10      	ldr	r3, [pc, #64]	; (8057cc0 <ip_reass_dequeue_datagram+0x4c>)
 8057c80:	681b      	ldr	r3, [r3, #0]
 8057c82:	687a      	ldr	r2, [r7, #4]
 8057c84:	429a      	cmp	r2, r3
 8057c86:	d104      	bne.n	8057c92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8057c88:	687b      	ldr	r3, [r7, #4]
 8057c8a:	681b      	ldr	r3, [r3, #0]
 8057c8c:	4a0c      	ldr	r2, [pc, #48]	; (8057cc0 <ip_reass_dequeue_datagram+0x4c>)
 8057c8e:	6013      	str	r3, [r2, #0]
 8057c90:	e00d      	b.n	8057cae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8057c92:	683b      	ldr	r3, [r7, #0]
 8057c94:	2b00      	cmp	r3, #0
 8057c96:	d106      	bne.n	8057ca6 <ip_reass_dequeue_datagram+0x32>
 8057c98:	4b0a      	ldr	r3, [pc, #40]	; (8057cc4 <ip_reass_dequeue_datagram+0x50>)
 8057c9a:	f240 1245 	movw	r2, #325	; 0x145
 8057c9e:	490a      	ldr	r1, [pc, #40]	; (8057cc8 <ip_reass_dequeue_datagram+0x54>)
 8057ca0:	480a      	ldr	r0, [pc, #40]	; (8057ccc <ip_reass_dequeue_datagram+0x58>)
 8057ca2:	f001 f9c7 	bl	8059034 <iprintf>
    prev->next = ipr->next;
 8057ca6:	687b      	ldr	r3, [r7, #4]
 8057ca8:	681a      	ldr	r2, [r3, #0]
 8057caa:	683b      	ldr	r3, [r7, #0]
 8057cac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8057cae:	6879      	ldr	r1, [r7, #4]
 8057cb0:	2004      	movs	r0, #4
 8057cb2:	f7f6 fc83 	bl	804e5bc <memp_free>
}
 8057cb6:	bf00      	nop
 8057cb8:	3708      	adds	r7, #8
 8057cba:	46bd      	mov	sp, r7
 8057cbc:	bd80      	pop	{r7, pc}
 8057cbe:	bf00      	nop
 8057cc0:	2000b720 	.word	0x2000b720
 8057cc4:	0805d534 	.word	0x0805d534
 8057cc8:	0805d5fc 	.word	0x0805d5fc
 8057ccc:	0805d57c 	.word	0x0805d57c

08057cd0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8057cd0:	b580      	push	{r7, lr}
 8057cd2:	b08c      	sub	sp, #48	; 0x30
 8057cd4:	af00      	add	r7, sp, #0
 8057cd6:	60f8      	str	r0, [r7, #12]
 8057cd8:	60b9      	str	r1, [r7, #8]
 8057cda:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8057cdc:	2300      	movs	r3, #0
 8057cde:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8057ce0:	2301      	movs	r3, #1
 8057ce2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8057ce4:	68bb      	ldr	r3, [r7, #8]
 8057ce6:	685b      	ldr	r3, [r3, #4]
 8057ce8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8057cea:	69fb      	ldr	r3, [r7, #28]
 8057cec:	885b      	ldrh	r3, [r3, #2]
 8057cee:	b29b      	uxth	r3, r3
 8057cf0:	4618      	mov	r0, r3
 8057cf2:	f7f5 ff15 	bl	804db20 <lwip_htons>
 8057cf6:	4603      	mov	r3, r0
 8057cf8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8057cfa:	69fb      	ldr	r3, [r7, #28]
 8057cfc:	781b      	ldrb	r3, [r3, #0]
 8057cfe:	f003 030f 	and.w	r3, r3, #15
 8057d02:	b2db      	uxtb	r3, r3
 8057d04:	009b      	lsls	r3, r3, #2
 8057d06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8057d08:	7e7b      	ldrb	r3, [r7, #25]
 8057d0a:	b29b      	uxth	r3, r3
 8057d0c:	8b7a      	ldrh	r2, [r7, #26]
 8057d0e:	429a      	cmp	r2, r3
 8057d10:	d202      	bcs.n	8057d18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8057d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057d16:	e135      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8057d18:	7e7b      	ldrb	r3, [r7, #25]
 8057d1a:	b29b      	uxth	r3, r3
 8057d1c:	8b7a      	ldrh	r2, [r7, #26]
 8057d1e:	1ad3      	subs	r3, r2, r3
 8057d20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8057d22:	69fb      	ldr	r3, [r7, #28]
 8057d24:	88db      	ldrh	r3, [r3, #6]
 8057d26:	b29b      	uxth	r3, r3
 8057d28:	4618      	mov	r0, r3
 8057d2a:	f7f5 fef9 	bl	804db20 <lwip_htons>
 8057d2e:	4603      	mov	r3, r0
 8057d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8057d34:	b29b      	uxth	r3, r3
 8057d36:	00db      	lsls	r3, r3, #3
 8057d38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8057d3a:	68bb      	ldr	r3, [r7, #8]
 8057d3c:	685b      	ldr	r3, [r3, #4]
 8057d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8057d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057d42:	2200      	movs	r2, #0
 8057d44:	701a      	strb	r2, [r3, #0]
 8057d46:	2200      	movs	r2, #0
 8057d48:	705a      	strb	r2, [r3, #1]
 8057d4a:	2200      	movs	r2, #0
 8057d4c:	709a      	strb	r2, [r3, #2]
 8057d4e:	2200      	movs	r2, #0
 8057d50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8057d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057d54:	8afa      	ldrh	r2, [r7, #22]
 8057d56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8057d58:	8afa      	ldrh	r2, [r7, #22]
 8057d5a:	8b7b      	ldrh	r3, [r7, #26]
 8057d5c:	4413      	add	r3, r2
 8057d5e:	b29a      	uxth	r2, r3
 8057d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057d62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8057d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057d66:	88db      	ldrh	r3, [r3, #6]
 8057d68:	b29b      	uxth	r3, r3
 8057d6a:	8afa      	ldrh	r2, [r7, #22]
 8057d6c:	429a      	cmp	r2, r3
 8057d6e:	d902      	bls.n	8057d76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8057d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057d74:	e106      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8057d76:	68fb      	ldr	r3, [r7, #12]
 8057d78:	685b      	ldr	r3, [r3, #4]
 8057d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8057d7c:	e068      	b.n	8057e50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8057d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057d80:	685b      	ldr	r3, [r3, #4]
 8057d82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8057d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057d86:	889b      	ldrh	r3, [r3, #4]
 8057d88:	b29a      	uxth	r2, r3
 8057d8a:	693b      	ldr	r3, [r7, #16]
 8057d8c:	889b      	ldrh	r3, [r3, #4]
 8057d8e:	b29b      	uxth	r3, r3
 8057d90:	429a      	cmp	r2, r3
 8057d92:	d235      	bcs.n	8057e00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8057d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8057d98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8057d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057d9c:	2b00      	cmp	r3, #0
 8057d9e:	d020      	beq.n	8057de2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8057da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057da2:	889b      	ldrh	r3, [r3, #4]
 8057da4:	b29a      	uxth	r2, r3
 8057da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057da8:	88db      	ldrh	r3, [r3, #6]
 8057daa:	b29b      	uxth	r3, r3
 8057dac:	429a      	cmp	r2, r3
 8057dae:	d307      	bcc.n	8057dc0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8057db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057db2:	88db      	ldrh	r3, [r3, #6]
 8057db4:	b29a      	uxth	r2, r3
 8057db6:	693b      	ldr	r3, [r7, #16]
 8057db8:	889b      	ldrh	r3, [r3, #4]
 8057dba:	b29b      	uxth	r3, r3
 8057dbc:	429a      	cmp	r2, r3
 8057dbe:	d902      	bls.n	8057dc6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8057dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057dc4:	e0de      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8057dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057dc8:	68ba      	ldr	r2, [r7, #8]
 8057dca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8057dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057dce:	88db      	ldrh	r3, [r3, #6]
 8057dd0:	b29a      	uxth	r2, r3
 8057dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057dd4:	889b      	ldrh	r3, [r3, #4]
 8057dd6:	b29b      	uxth	r3, r3
 8057dd8:	429a      	cmp	r2, r3
 8057dda:	d03d      	beq.n	8057e58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8057ddc:	2300      	movs	r3, #0
 8057dde:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8057de0:	e03a      	b.n	8057e58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8057de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057de4:	88db      	ldrh	r3, [r3, #6]
 8057de6:	b29a      	uxth	r2, r3
 8057de8:	693b      	ldr	r3, [r7, #16]
 8057dea:	889b      	ldrh	r3, [r3, #4]
 8057dec:	b29b      	uxth	r3, r3
 8057dee:	429a      	cmp	r2, r3
 8057df0:	d902      	bls.n	8057df8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8057df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057df6:	e0c5      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8057df8:	68fb      	ldr	r3, [r7, #12]
 8057dfa:	68ba      	ldr	r2, [r7, #8]
 8057dfc:	605a      	str	r2, [r3, #4]
      break;
 8057dfe:	e02b      	b.n	8057e58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8057e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057e02:	889b      	ldrh	r3, [r3, #4]
 8057e04:	b29a      	uxth	r2, r3
 8057e06:	693b      	ldr	r3, [r7, #16]
 8057e08:	889b      	ldrh	r3, [r3, #4]
 8057e0a:	b29b      	uxth	r3, r3
 8057e0c:	429a      	cmp	r2, r3
 8057e0e:	d102      	bne.n	8057e16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8057e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057e14:	e0b6      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8057e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057e18:	889b      	ldrh	r3, [r3, #4]
 8057e1a:	b29a      	uxth	r2, r3
 8057e1c:	693b      	ldr	r3, [r7, #16]
 8057e1e:	88db      	ldrh	r3, [r3, #6]
 8057e20:	b29b      	uxth	r3, r3
 8057e22:	429a      	cmp	r2, r3
 8057e24:	d202      	bcs.n	8057e2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8057e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8057e2a:	e0ab      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8057e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057e2e:	2b00      	cmp	r3, #0
 8057e30:	d009      	beq.n	8057e46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8057e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057e34:	88db      	ldrh	r3, [r3, #6]
 8057e36:	b29a      	uxth	r2, r3
 8057e38:	693b      	ldr	r3, [r7, #16]
 8057e3a:	889b      	ldrh	r3, [r3, #4]
 8057e3c:	b29b      	uxth	r3, r3
 8057e3e:	429a      	cmp	r2, r3
 8057e40:	d001      	beq.n	8057e46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8057e42:	2300      	movs	r3, #0
 8057e44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8057e46:	693b      	ldr	r3, [r7, #16]
 8057e48:	681b      	ldr	r3, [r3, #0]
 8057e4a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8057e4c:	693b      	ldr	r3, [r7, #16]
 8057e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8057e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057e52:	2b00      	cmp	r3, #0
 8057e54:	d193      	bne.n	8057d7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8057e56:	e000      	b.n	8057e5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8057e58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8057e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057e5c:	2b00      	cmp	r3, #0
 8057e5e:	d12d      	bne.n	8057ebc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8057e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057e62:	2b00      	cmp	r3, #0
 8057e64:	d01c      	beq.n	8057ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8057e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057e68:	88db      	ldrh	r3, [r3, #6]
 8057e6a:	b29a      	uxth	r2, r3
 8057e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057e6e:	889b      	ldrh	r3, [r3, #4]
 8057e70:	b29b      	uxth	r3, r3
 8057e72:	429a      	cmp	r2, r3
 8057e74:	d906      	bls.n	8057e84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8057e76:	4b45      	ldr	r3, [pc, #276]	; (8057f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8057e78:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8057e7c:	4944      	ldr	r1, [pc, #272]	; (8057f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8057e7e:	4845      	ldr	r0, [pc, #276]	; (8057f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8057e80:	f001 f8d8 	bl	8059034 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8057e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057e86:	68ba      	ldr	r2, [r7, #8]
 8057e88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8057e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057e8c:	88db      	ldrh	r3, [r3, #6]
 8057e8e:	b29a      	uxth	r2, r3
 8057e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057e92:	889b      	ldrh	r3, [r3, #4]
 8057e94:	b29b      	uxth	r3, r3
 8057e96:	429a      	cmp	r2, r3
 8057e98:	d010      	beq.n	8057ebc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8057e9a:	2300      	movs	r3, #0
 8057e9c:	623b      	str	r3, [r7, #32]
 8057e9e:	e00d      	b.n	8057ebc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8057ea0:	68fb      	ldr	r3, [r7, #12]
 8057ea2:	685b      	ldr	r3, [r3, #4]
 8057ea4:	2b00      	cmp	r3, #0
 8057ea6:	d006      	beq.n	8057eb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8057ea8:	4b38      	ldr	r3, [pc, #224]	; (8057f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8057eaa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8057eae:	493a      	ldr	r1, [pc, #232]	; (8057f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8057eb0:	4838      	ldr	r0, [pc, #224]	; (8057f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8057eb2:	f001 f8bf 	bl	8059034 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8057eb6:	68fb      	ldr	r3, [r7, #12]
 8057eb8:	68ba      	ldr	r2, [r7, #8]
 8057eba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8057ebc:	687b      	ldr	r3, [r7, #4]
 8057ebe:	2b00      	cmp	r3, #0
 8057ec0:	d105      	bne.n	8057ece <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8057ec2:	68fb      	ldr	r3, [r7, #12]
 8057ec4:	7f9b      	ldrb	r3, [r3, #30]
 8057ec6:	f003 0301 	and.w	r3, r3, #1
 8057eca:	2b00      	cmp	r3, #0
 8057ecc:	d059      	beq.n	8057f82 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8057ece:	6a3b      	ldr	r3, [r7, #32]
 8057ed0:	2b00      	cmp	r3, #0
 8057ed2:	d04f      	beq.n	8057f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8057ed4:	68fb      	ldr	r3, [r7, #12]
 8057ed6:	685b      	ldr	r3, [r3, #4]
 8057ed8:	2b00      	cmp	r3, #0
 8057eda:	d006      	beq.n	8057eea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8057edc:	68fb      	ldr	r3, [r7, #12]
 8057ede:	685b      	ldr	r3, [r3, #4]
 8057ee0:	685b      	ldr	r3, [r3, #4]
 8057ee2:	889b      	ldrh	r3, [r3, #4]
 8057ee4:	b29b      	uxth	r3, r3
 8057ee6:	2b00      	cmp	r3, #0
 8057ee8:	d002      	beq.n	8057ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8057eea:	2300      	movs	r3, #0
 8057eec:	623b      	str	r3, [r7, #32]
 8057eee:	e041      	b.n	8057f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8057ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057ef2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8057ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057ef6:	681b      	ldr	r3, [r3, #0]
 8057ef8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8057efa:	e012      	b.n	8057f22 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8057efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057efe:	685b      	ldr	r3, [r3, #4]
 8057f00:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8057f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057f04:	88db      	ldrh	r3, [r3, #6]
 8057f06:	b29a      	uxth	r2, r3
 8057f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057f0a:	889b      	ldrh	r3, [r3, #4]
 8057f0c:	b29b      	uxth	r3, r3
 8057f0e:	429a      	cmp	r2, r3
 8057f10:	d002      	beq.n	8057f18 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8057f12:	2300      	movs	r3, #0
 8057f14:	623b      	str	r3, [r7, #32]
            break;
 8057f16:	e007      	b.n	8057f28 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8057f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057f1a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8057f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057f1e:	681b      	ldr	r3, [r3, #0]
 8057f20:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8057f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8057f24:	2b00      	cmp	r3, #0
 8057f26:	d1e9      	bne.n	8057efc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8057f28:	6a3b      	ldr	r3, [r7, #32]
 8057f2a:	2b00      	cmp	r3, #0
 8057f2c:	d022      	beq.n	8057f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8057f2e:	68fb      	ldr	r3, [r7, #12]
 8057f30:	685b      	ldr	r3, [r3, #4]
 8057f32:	2b00      	cmp	r3, #0
 8057f34:	d106      	bne.n	8057f44 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8057f36:	4b15      	ldr	r3, [pc, #84]	; (8057f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8057f38:	f240 12df 	movw	r2, #479	; 0x1df
 8057f3c:	4917      	ldr	r1, [pc, #92]	; (8057f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8057f3e:	4815      	ldr	r0, [pc, #84]	; (8057f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8057f40:	f001 f878 	bl	8059034 <iprintf>
          LWIP_ASSERT("sanity check",
 8057f44:	68fb      	ldr	r3, [r7, #12]
 8057f46:	685b      	ldr	r3, [r3, #4]
 8057f48:	685b      	ldr	r3, [r3, #4]
 8057f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8057f4c:	429a      	cmp	r2, r3
 8057f4e:	d106      	bne.n	8057f5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8057f50:	4b0e      	ldr	r3, [pc, #56]	; (8057f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8057f52:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8057f56:	4911      	ldr	r1, [pc, #68]	; (8057f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8057f58:	480e      	ldr	r0, [pc, #56]	; (8057f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8057f5a:	f001 f86b 	bl	8059034 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8057f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8057f60:	681b      	ldr	r3, [r3, #0]
 8057f62:	2b00      	cmp	r3, #0
 8057f64:	d006      	beq.n	8057f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8057f66:	4b09      	ldr	r3, [pc, #36]	; (8057f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8057f68:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8057f6c:	490c      	ldr	r1, [pc, #48]	; (8057fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8057f6e:	4809      	ldr	r0, [pc, #36]	; (8057f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8057f70:	f001 f860 	bl	8059034 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8057f74:	6a3b      	ldr	r3, [r7, #32]
 8057f76:	2b00      	cmp	r3, #0
 8057f78:	bf14      	ite	ne
 8057f7a:	2301      	movne	r3, #1
 8057f7c:	2300      	moveq	r3, #0
 8057f7e:	b2db      	uxtb	r3, r3
 8057f80:	e000      	b.n	8057f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8057f82:	2300      	movs	r3, #0
}
 8057f84:	4618      	mov	r0, r3
 8057f86:	3730      	adds	r7, #48	; 0x30
 8057f88:	46bd      	mov	sp, r7
 8057f8a:	bd80      	pop	{r7, pc}
 8057f8c:	0805d534 	.word	0x0805d534
 8057f90:	0805d618 	.word	0x0805d618
 8057f94:	0805d57c 	.word	0x0805d57c
 8057f98:	0805d638 	.word	0x0805d638
 8057f9c:	0805d670 	.word	0x0805d670
 8057fa0:	0805d680 	.word	0x0805d680

08057fa4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8057fa4:	b580      	push	{r7, lr}
 8057fa6:	b08e      	sub	sp, #56	; 0x38
 8057fa8:	af00      	add	r7, sp, #0
 8057faa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8057fac:	687b      	ldr	r3, [r7, #4]
 8057fae:	685b      	ldr	r3, [r3, #4]
 8057fb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8057fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057fb4:	781b      	ldrb	r3, [r3, #0]
 8057fb6:	f003 030f 	and.w	r3, r3, #15
 8057fba:	b2db      	uxtb	r3, r3
 8057fbc:	009b      	lsls	r3, r3, #2
 8057fbe:	b2db      	uxtb	r3, r3
 8057fc0:	2b14      	cmp	r3, #20
 8057fc2:	f040 8171 	bne.w	80582a8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8057fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057fc8:	88db      	ldrh	r3, [r3, #6]
 8057fca:	b29b      	uxth	r3, r3
 8057fcc:	4618      	mov	r0, r3
 8057fce:	f7f5 fda7 	bl	804db20 <lwip_htons>
 8057fd2:	4603      	mov	r3, r0
 8057fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8057fd8:	b29b      	uxth	r3, r3
 8057fda:	00db      	lsls	r3, r3, #3
 8057fdc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8057fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057fe0:	885b      	ldrh	r3, [r3, #2]
 8057fe2:	b29b      	uxth	r3, r3
 8057fe4:	4618      	mov	r0, r3
 8057fe6:	f7f5 fd9b 	bl	804db20 <lwip_htons>
 8057fea:	4603      	mov	r3, r0
 8057fec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8057fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8057ff0:	781b      	ldrb	r3, [r3, #0]
 8057ff2:	f003 030f 	and.w	r3, r3, #15
 8057ff6:	b2db      	uxtb	r3, r3
 8057ff8:	009b      	lsls	r3, r3, #2
 8057ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8057ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8058002:	b29b      	uxth	r3, r3
 8058004:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8058006:	429a      	cmp	r2, r3
 8058008:	f0c0 8150 	bcc.w	80582ac <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 805800c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8058010:	b29b      	uxth	r3, r3
 8058012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8058014:	1ad3      	subs	r3, r2, r3
 8058016:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8058018:	6878      	ldr	r0, [r7, #4]
 805801a:	f7f7 fa01 	bl	804f420 <pbuf_clen>
 805801e:	4603      	mov	r3, r0
 8058020:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8058022:	4b8c      	ldr	r3, [pc, #560]	; (8058254 <ip4_reass+0x2b0>)
 8058024:	881b      	ldrh	r3, [r3, #0]
 8058026:	461a      	mov	r2, r3
 8058028:	8c3b      	ldrh	r3, [r7, #32]
 805802a:	4413      	add	r3, r2
 805802c:	2b0a      	cmp	r3, #10
 805802e:	dd10      	ble.n	8058052 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8058030:	8c3b      	ldrh	r3, [r7, #32]
 8058032:	4619      	mov	r1, r3
 8058034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8058036:	f7ff fd81 	bl	8057b3c <ip_reass_remove_oldest_datagram>
 805803a:	4603      	mov	r3, r0
 805803c:	2b00      	cmp	r3, #0
 805803e:	f000 8137 	beq.w	80582b0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8058042:	4b84      	ldr	r3, [pc, #528]	; (8058254 <ip4_reass+0x2b0>)
 8058044:	881b      	ldrh	r3, [r3, #0]
 8058046:	461a      	mov	r2, r3
 8058048:	8c3b      	ldrh	r3, [r7, #32]
 805804a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 805804c:	2b0a      	cmp	r3, #10
 805804e:	f300 812f 	bgt.w	80582b0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8058052:	4b81      	ldr	r3, [pc, #516]	; (8058258 <ip4_reass+0x2b4>)
 8058054:	681b      	ldr	r3, [r3, #0]
 8058056:	633b      	str	r3, [r7, #48]	; 0x30
 8058058:	e015      	b.n	8058086 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 805805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805805c:	695a      	ldr	r2, [r3, #20]
 805805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058060:	68db      	ldr	r3, [r3, #12]
 8058062:	429a      	cmp	r2, r3
 8058064:	d10c      	bne.n	8058080 <ip4_reass+0xdc>
 8058066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058068:	699a      	ldr	r2, [r3, #24]
 805806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805806c:	691b      	ldr	r3, [r3, #16]
 805806e:	429a      	cmp	r2, r3
 8058070:	d106      	bne.n	8058080 <ip4_reass+0xdc>
 8058072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058074:	899a      	ldrh	r2, [r3, #12]
 8058076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8058078:	889b      	ldrh	r3, [r3, #4]
 805807a:	b29b      	uxth	r3, r3
 805807c:	429a      	cmp	r2, r3
 805807e:	d006      	beq.n	805808e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8058080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058082:	681b      	ldr	r3, [r3, #0]
 8058084:	633b      	str	r3, [r7, #48]	; 0x30
 8058086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058088:	2b00      	cmp	r3, #0
 805808a:	d1e6      	bne.n	805805a <ip4_reass+0xb6>
 805808c:	e000      	b.n	8058090 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 805808e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8058090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058092:	2b00      	cmp	r3, #0
 8058094:	d109      	bne.n	80580aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8058096:	8c3b      	ldrh	r3, [r7, #32]
 8058098:	4619      	mov	r1, r3
 805809a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 805809c:	f7ff fdb0 	bl	8057c00 <ip_reass_enqueue_new_datagram>
 80580a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80580a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80580a4:	2b00      	cmp	r3, #0
 80580a6:	d11c      	bne.n	80580e2 <ip4_reass+0x13e>
      goto nullreturn;
 80580a8:	e105      	b.n	80582b6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80580aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80580ac:	88db      	ldrh	r3, [r3, #6]
 80580ae:	b29b      	uxth	r3, r3
 80580b0:	4618      	mov	r0, r3
 80580b2:	f7f5 fd35 	bl	804db20 <lwip_htons>
 80580b6:	4603      	mov	r3, r0
 80580b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80580bc:	2b00      	cmp	r3, #0
 80580be:	d110      	bne.n	80580e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80580c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80580c2:	89db      	ldrh	r3, [r3, #14]
 80580c4:	4618      	mov	r0, r3
 80580c6:	f7f5 fd2b 	bl	804db20 <lwip_htons>
 80580ca:	4603      	mov	r3, r0
 80580cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80580d0:	2b00      	cmp	r3, #0
 80580d2:	d006      	beq.n	80580e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80580d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80580d6:	3308      	adds	r3, #8
 80580d8:	2214      	movs	r2, #20
 80580da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80580dc:	4618      	mov	r0, r3
 80580de:	f000 fe99 	bl	8058e14 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80580e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80580e4:	88db      	ldrh	r3, [r3, #6]
 80580e6:	b29b      	uxth	r3, r3
 80580e8:	f003 0320 	and.w	r3, r3, #32
 80580ec:	2b00      	cmp	r3, #0
 80580ee:	bf0c      	ite	eq
 80580f0:	2301      	moveq	r3, #1
 80580f2:	2300      	movne	r3, #0
 80580f4:	b2db      	uxtb	r3, r3
 80580f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80580f8:	69fb      	ldr	r3, [r7, #28]
 80580fa:	2b00      	cmp	r3, #0
 80580fc:	d00e      	beq.n	805811c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80580fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8058100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8058102:	4413      	add	r3, r2
 8058104:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8058106:	8b7a      	ldrh	r2, [r7, #26]
 8058108:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 805810a:	429a      	cmp	r2, r3
 805810c:	f0c0 80a0 	bcc.w	8058250 <ip4_reass+0x2ac>
 8058110:	8b7b      	ldrh	r3, [r7, #26]
 8058112:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8058116:	4293      	cmp	r3, r2
 8058118:	f200 809a 	bhi.w	8058250 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 805811c:	69fa      	ldr	r2, [r7, #28]
 805811e:	6879      	ldr	r1, [r7, #4]
 8058120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8058122:	f7ff fdd5 	bl	8057cd0 <ip_reass_chain_frag_into_datagram_and_validate>
 8058126:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8058128:	697b      	ldr	r3, [r7, #20]
 805812a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 805812e:	f000 809b 	beq.w	8058268 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8058132:	4b48      	ldr	r3, [pc, #288]	; (8058254 <ip4_reass+0x2b0>)
 8058134:	881a      	ldrh	r2, [r3, #0]
 8058136:	8c3b      	ldrh	r3, [r7, #32]
 8058138:	4413      	add	r3, r2
 805813a:	b29a      	uxth	r2, r3
 805813c:	4b45      	ldr	r3, [pc, #276]	; (8058254 <ip4_reass+0x2b0>)
 805813e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8058140:	69fb      	ldr	r3, [r7, #28]
 8058142:	2b00      	cmp	r3, #0
 8058144:	d00d      	beq.n	8058162 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8058146:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8058148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 805814a:	4413      	add	r3, r2
 805814c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 805814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058150:	8a7a      	ldrh	r2, [r7, #18]
 8058152:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8058154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058156:	7f9b      	ldrb	r3, [r3, #30]
 8058158:	f043 0301 	orr.w	r3, r3, #1
 805815c:	b2da      	uxtb	r2, r3
 805815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058160:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8058162:	697b      	ldr	r3, [r7, #20]
 8058164:	2b01      	cmp	r3, #1
 8058166:	d171      	bne.n	805824c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8058168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805816a:	8b9b      	ldrh	r3, [r3, #28]
 805816c:	3314      	adds	r3, #20
 805816e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8058170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058172:	685b      	ldr	r3, [r3, #4]
 8058174:	685b      	ldr	r3, [r3, #4]
 8058176:	681b      	ldr	r3, [r3, #0]
 8058178:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 805817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805817c:	685b      	ldr	r3, [r3, #4]
 805817e:	685b      	ldr	r3, [r3, #4]
 8058180:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8058182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058184:	3308      	adds	r3, #8
 8058186:	2214      	movs	r2, #20
 8058188:	4619      	mov	r1, r3
 805818a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 805818c:	f000 fe42 	bl	8058e14 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8058190:	8a3b      	ldrh	r3, [r7, #16]
 8058192:	4618      	mov	r0, r3
 8058194:	f7f5 fcc4 	bl	804db20 <lwip_htons>
 8058198:	4603      	mov	r3, r0
 805819a:	461a      	mov	r2, r3
 805819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 805819e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80581a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80581a2:	2200      	movs	r2, #0
 80581a4:	719a      	strb	r2, [r3, #6]
 80581a6:	2200      	movs	r2, #0
 80581a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80581aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80581ac:	2200      	movs	r2, #0
 80581ae:	729a      	strb	r2, [r3, #10]
 80581b0:	2200      	movs	r2, #0
 80581b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80581b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80581b6:	685b      	ldr	r3, [r3, #4]
 80581b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80581ba:	e00d      	b.n	80581d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80581bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80581be:	685b      	ldr	r3, [r3, #4]
 80581c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80581c2:	2114      	movs	r1, #20
 80581c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80581c6:	f7f7 f817 	bl	804f1f8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80581ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80581cc:	6878      	ldr	r0, [r7, #4]
 80581ce:	f7f7 f967 	bl	804f4a0 <pbuf_cat>
      r = iprh->next_pbuf;
 80581d2:	68fb      	ldr	r3, [r7, #12]
 80581d4:	681b      	ldr	r3, [r3, #0]
 80581d6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80581d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80581da:	2b00      	cmp	r3, #0
 80581dc:	d1ee      	bne.n	80581bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80581de:	4b1e      	ldr	r3, [pc, #120]	; (8058258 <ip4_reass+0x2b4>)
 80581e0:	681b      	ldr	r3, [r3, #0]
 80581e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80581e4:	429a      	cmp	r2, r3
 80581e6:	d102      	bne.n	80581ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80581e8:	2300      	movs	r3, #0
 80581ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80581ec:	e010      	b.n	8058210 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80581ee:	4b1a      	ldr	r3, [pc, #104]	; (8058258 <ip4_reass+0x2b4>)
 80581f0:	681b      	ldr	r3, [r3, #0]
 80581f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80581f4:	e007      	b.n	8058206 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80581f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80581f8:	681b      	ldr	r3, [r3, #0]
 80581fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80581fc:	429a      	cmp	r2, r3
 80581fe:	d006      	beq.n	805820e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8058200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8058202:	681b      	ldr	r3, [r3, #0]
 8058204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8058206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8058208:	2b00      	cmp	r3, #0
 805820a:	d1f4      	bne.n	80581f6 <ip4_reass+0x252>
 805820c:	e000      	b.n	8058210 <ip4_reass+0x26c>
          break;
 805820e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8058210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8058212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8058214:	f7ff fd2e 	bl	8057c74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8058218:	6878      	ldr	r0, [r7, #4]
 805821a:	f7f7 f901 	bl	804f420 <pbuf_clen>
 805821e:	4603      	mov	r3, r0
 8058220:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8058222:	4b0c      	ldr	r3, [pc, #48]	; (8058254 <ip4_reass+0x2b0>)
 8058224:	881b      	ldrh	r3, [r3, #0]
 8058226:	8c3a      	ldrh	r2, [r7, #32]
 8058228:	429a      	cmp	r2, r3
 805822a:	d906      	bls.n	805823a <ip4_reass+0x296>
 805822c:	4b0b      	ldr	r3, [pc, #44]	; (805825c <ip4_reass+0x2b8>)
 805822e:	f240 229b 	movw	r2, #667	; 0x29b
 8058232:	490b      	ldr	r1, [pc, #44]	; (8058260 <ip4_reass+0x2bc>)
 8058234:	480b      	ldr	r0, [pc, #44]	; (8058264 <ip4_reass+0x2c0>)
 8058236:	f000 fefd 	bl	8059034 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 805823a:	4b06      	ldr	r3, [pc, #24]	; (8058254 <ip4_reass+0x2b0>)
 805823c:	881a      	ldrh	r2, [r3, #0]
 805823e:	8c3b      	ldrh	r3, [r7, #32]
 8058240:	1ad3      	subs	r3, r2, r3
 8058242:	b29a      	uxth	r2, r3
 8058244:	4b03      	ldr	r3, [pc, #12]	; (8058254 <ip4_reass+0x2b0>)
 8058246:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8058248:	687b      	ldr	r3, [r7, #4]
 805824a:	e038      	b.n	80582be <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 805824c:	2300      	movs	r3, #0
 805824e:	e036      	b.n	80582be <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8058250:	bf00      	nop
 8058252:	e00a      	b.n	805826a <ip4_reass+0x2c6>
 8058254:	2000b724 	.word	0x2000b724
 8058258:	2000b720 	.word	0x2000b720
 805825c:	0805d534 	.word	0x0805d534
 8058260:	0805d6a4 	.word	0x0805d6a4
 8058264:	0805d57c 	.word	0x0805d57c
    goto nullreturn_ipr;
 8058268:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 805826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 805826c:	2b00      	cmp	r3, #0
 805826e:	d106      	bne.n	805827e <ip4_reass+0x2da>
 8058270:	4b15      	ldr	r3, [pc, #84]	; (80582c8 <ip4_reass+0x324>)
 8058272:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8058276:	4915      	ldr	r1, [pc, #84]	; (80582cc <ip4_reass+0x328>)
 8058278:	4815      	ldr	r0, [pc, #84]	; (80582d0 <ip4_reass+0x32c>)
 805827a:	f000 fedb 	bl	8059034 <iprintf>
  if (ipr->p == NULL) {
 805827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058280:	685b      	ldr	r3, [r3, #4]
 8058282:	2b00      	cmp	r3, #0
 8058284:	d116      	bne.n	80582b4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8058286:	4b13      	ldr	r3, [pc, #76]	; (80582d4 <ip4_reass+0x330>)
 8058288:	681b      	ldr	r3, [r3, #0]
 805828a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 805828c:	429a      	cmp	r2, r3
 805828e:	d006      	beq.n	805829e <ip4_reass+0x2fa>
 8058290:	4b0d      	ldr	r3, [pc, #52]	; (80582c8 <ip4_reass+0x324>)
 8058292:	f240 22ab 	movw	r2, #683	; 0x2ab
 8058296:	4910      	ldr	r1, [pc, #64]	; (80582d8 <ip4_reass+0x334>)
 8058298:	480d      	ldr	r0, [pc, #52]	; (80582d0 <ip4_reass+0x32c>)
 805829a:	f000 fecb 	bl	8059034 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 805829e:	2100      	movs	r1, #0
 80582a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80582a2:	f7ff fce7 	bl	8057c74 <ip_reass_dequeue_datagram>
 80582a6:	e006      	b.n	80582b6 <ip4_reass+0x312>
    goto nullreturn;
 80582a8:	bf00      	nop
 80582aa:	e004      	b.n	80582b6 <ip4_reass+0x312>
    goto nullreturn;
 80582ac:	bf00      	nop
 80582ae:	e002      	b.n	80582b6 <ip4_reass+0x312>
      goto nullreturn;
 80582b0:	bf00      	nop
 80582b2:	e000      	b.n	80582b6 <ip4_reass+0x312>
  }

nullreturn:
 80582b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80582b6:	6878      	ldr	r0, [r7, #4]
 80582b8:	f7f7 f824 	bl	804f304 <pbuf_free>
  return NULL;
 80582bc:	2300      	movs	r3, #0
}
 80582be:	4618      	mov	r0, r3
 80582c0:	3738      	adds	r7, #56	; 0x38
 80582c2:	46bd      	mov	sp, r7
 80582c4:	bd80      	pop	{r7, pc}
 80582c6:	bf00      	nop
 80582c8:	0805d534 	.word	0x0805d534
 80582cc:	0805d6c0 	.word	0x0805d6c0
 80582d0:	0805d57c 	.word	0x0805d57c
 80582d4:	2000b720 	.word	0x2000b720
 80582d8:	0805d6cc 	.word	0x0805d6cc

080582dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80582dc:	b580      	push	{r7, lr}
 80582de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80582e0:	2005      	movs	r0, #5
 80582e2:	f7f6 f8f5 	bl	804e4d0 <memp_malloc>
 80582e6:	4603      	mov	r3, r0
}
 80582e8:	4618      	mov	r0, r3
 80582ea:	bd80      	pop	{r7, pc}

080582ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80582ec:	b580      	push	{r7, lr}
 80582ee:	b082      	sub	sp, #8
 80582f0:	af00      	add	r7, sp, #0
 80582f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80582f4:	687b      	ldr	r3, [r7, #4]
 80582f6:	2b00      	cmp	r3, #0
 80582f8:	d106      	bne.n	8058308 <ip_frag_free_pbuf_custom_ref+0x1c>
 80582fa:	4b07      	ldr	r3, [pc, #28]	; (8058318 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80582fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8058300:	4906      	ldr	r1, [pc, #24]	; (805831c <ip_frag_free_pbuf_custom_ref+0x30>)
 8058302:	4807      	ldr	r0, [pc, #28]	; (8058320 <ip_frag_free_pbuf_custom_ref+0x34>)
 8058304:	f000 fe96 	bl	8059034 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8058308:	6879      	ldr	r1, [r7, #4]
 805830a:	2005      	movs	r0, #5
 805830c:	f7f6 f956 	bl	804e5bc <memp_free>
}
 8058310:	bf00      	nop
 8058312:	3708      	adds	r7, #8
 8058314:	46bd      	mov	sp, r7
 8058316:	bd80      	pop	{r7, pc}
 8058318:	0805d534 	.word	0x0805d534
 805831c:	0805d6ec 	.word	0x0805d6ec
 8058320:	0805d57c 	.word	0x0805d57c

08058324 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8058324:	b580      	push	{r7, lr}
 8058326:	b084      	sub	sp, #16
 8058328:	af00      	add	r7, sp, #0
 805832a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 805832c:	687b      	ldr	r3, [r7, #4]
 805832e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8058330:	68fb      	ldr	r3, [r7, #12]
 8058332:	2b00      	cmp	r3, #0
 8058334:	d106      	bne.n	8058344 <ipfrag_free_pbuf_custom+0x20>
 8058336:	4b11      	ldr	r3, [pc, #68]	; (805837c <ipfrag_free_pbuf_custom+0x58>)
 8058338:	f240 22ce 	movw	r2, #718	; 0x2ce
 805833c:	4910      	ldr	r1, [pc, #64]	; (8058380 <ipfrag_free_pbuf_custom+0x5c>)
 805833e:	4811      	ldr	r0, [pc, #68]	; (8058384 <ipfrag_free_pbuf_custom+0x60>)
 8058340:	f000 fe78 	bl	8059034 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8058344:	68fa      	ldr	r2, [r7, #12]
 8058346:	687b      	ldr	r3, [r7, #4]
 8058348:	429a      	cmp	r2, r3
 805834a:	d006      	beq.n	805835a <ipfrag_free_pbuf_custom+0x36>
 805834c:	4b0b      	ldr	r3, [pc, #44]	; (805837c <ipfrag_free_pbuf_custom+0x58>)
 805834e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8058352:	490d      	ldr	r1, [pc, #52]	; (8058388 <ipfrag_free_pbuf_custom+0x64>)
 8058354:	480b      	ldr	r0, [pc, #44]	; (8058384 <ipfrag_free_pbuf_custom+0x60>)
 8058356:	f000 fe6d 	bl	8059034 <iprintf>
  if (pcr->original != NULL) {
 805835a:	68fb      	ldr	r3, [r7, #12]
 805835c:	695b      	ldr	r3, [r3, #20]
 805835e:	2b00      	cmp	r3, #0
 8058360:	d004      	beq.n	805836c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8058362:	68fb      	ldr	r3, [r7, #12]
 8058364:	695b      	ldr	r3, [r3, #20]
 8058366:	4618      	mov	r0, r3
 8058368:	f7f6 ffcc 	bl	804f304 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 805836c:	68f8      	ldr	r0, [r7, #12]
 805836e:	f7ff ffbd 	bl	80582ec <ip_frag_free_pbuf_custom_ref>
}
 8058372:	bf00      	nop
 8058374:	3710      	adds	r7, #16
 8058376:	46bd      	mov	sp, r7
 8058378:	bd80      	pop	{r7, pc}
 805837a:	bf00      	nop
 805837c:	0805d534 	.word	0x0805d534
 8058380:	0805d6f8 	.word	0x0805d6f8
 8058384:	0805d57c 	.word	0x0805d57c
 8058388:	0805d704 	.word	0x0805d704

0805838c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 805838c:	b580      	push	{r7, lr}
 805838e:	b094      	sub	sp, #80	; 0x50
 8058390:	af02      	add	r7, sp, #8
 8058392:	60f8      	str	r0, [r7, #12]
 8058394:	60b9      	str	r1, [r7, #8]
 8058396:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8058398:	2300      	movs	r3, #0
 805839a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 805839e:	68bb      	ldr	r3, [r7, #8]
 80583a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80583a2:	3b14      	subs	r3, #20
 80583a4:	2b00      	cmp	r3, #0
 80583a6:	da00      	bge.n	80583aa <ip4_frag+0x1e>
 80583a8:	3307      	adds	r3, #7
 80583aa:	10db      	asrs	r3, r3, #3
 80583ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80583ae:	2314      	movs	r3, #20
 80583b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80583b2:	68fb      	ldr	r3, [r7, #12]
 80583b4:	685b      	ldr	r3, [r3, #4]
 80583b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80583b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80583ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80583bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80583be:	781b      	ldrb	r3, [r3, #0]
 80583c0:	f003 030f 	and.w	r3, r3, #15
 80583c4:	b2db      	uxtb	r3, r3
 80583c6:	009b      	lsls	r3, r3, #2
 80583c8:	b2db      	uxtb	r3, r3
 80583ca:	2b14      	cmp	r3, #20
 80583cc:	d002      	beq.n	80583d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80583ce:	f06f 0305 	mvn.w	r3, #5
 80583d2:	e110      	b.n	80585f6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80583d4:	68fb      	ldr	r3, [r7, #12]
 80583d6:	895b      	ldrh	r3, [r3, #10]
 80583d8:	2b13      	cmp	r3, #19
 80583da:	d809      	bhi.n	80583f0 <ip4_frag+0x64>
 80583dc:	4b88      	ldr	r3, [pc, #544]	; (8058600 <ip4_frag+0x274>)
 80583de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80583e2:	4988      	ldr	r1, [pc, #544]	; (8058604 <ip4_frag+0x278>)
 80583e4:	4888      	ldr	r0, [pc, #544]	; (8058608 <ip4_frag+0x27c>)
 80583e6:	f000 fe25 	bl	8059034 <iprintf>
 80583ea:	f06f 0305 	mvn.w	r3, #5
 80583ee:	e102      	b.n	80585f6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80583f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80583f2:	88db      	ldrh	r3, [r3, #6]
 80583f4:	b29b      	uxth	r3, r3
 80583f6:	4618      	mov	r0, r3
 80583f8:	f7f5 fb92 	bl	804db20 <lwip_htons>
 80583fc:	4603      	mov	r3, r0
 80583fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8058400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8058402:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8058406:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 805840a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 805840c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8058410:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8058412:	68fb      	ldr	r3, [r7, #12]
 8058414:	891b      	ldrh	r3, [r3, #8]
 8058416:	3b14      	subs	r3, #20
 8058418:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 805841c:	e0e1      	b.n	80585e2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 805841e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8058420:	00db      	lsls	r3, r3, #3
 8058422:	b29b      	uxth	r3, r3
 8058424:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8058428:	4293      	cmp	r3, r2
 805842a:	bf28      	it	cs
 805842c:	4613      	movcs	r3, r2
 805842e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8058430:	f44f 7220 	mov.w	r2, #640	; 0x280
 8058434:	2114      	movs	r1, #20
 8058436:	200e      	movs	r0, #14
 8058438:	f7f6 fc80 	bl	804ed3c <pbuf_alloc>
 805843c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 805843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058440:	2b00      	cmp	r3, #0
 8058442:	f000 80d5 	beq.w	80585f0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8058446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058448:	895b      	ldrh	r3, [r3, #10]
 805844a:	2b13      	cmp	r3, #19
 805844c:	d806      	bhi.n	805845c <ip4_frag+0xd0>
 805844e:	4b6c      	ldr	r3, [pc, #432]	; (8058600 <ip4_frag+0x274>)
 8058450:	f44f 7249 	mov.w	r2, #804	; 0x324
 8058454:	496d      	ldr	r1, [pc, #436]	; (805860c <ip4_frag+0x280>)
 8058456:	486c      	ldr	r0, [pc, #432]	; (8058608 <ip4_frag+0x27c>)
 8058458:	f000 fdec 	bl	8059034 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 805845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805845e:	685b      	ldr	r3, [r3, #4]
 8058460:	2214      	movs	r2, #20
 8058462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8058464:	4618      	mov	r0, r3
 8058466:	f000 fcd5 	bl	8058e14 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 805846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 805846c:	685b      	ldr	r3, [r3, #4]
 805846e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8058470:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8058472:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8058476:	e064      	b.n	8058542 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8058478:	68fb      	ldr	r3, [r7, #12]
 805847a:	895a      	ldrh	r2, [r3, #10]
 805847c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 805847e:	1ad3      	subs	r3, r2, r3
 8058480:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8058482:	68fb      	ldr	r3, [r7, #12]
 8058484:	895b      	ldrh	r3, [r3, #10]
 8058486:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8058488:	429a      	cmp	r2, r3
 805848a:	d906      	bls.n	805849a <ip4_frag+0x10e>
 805848c:	4b5c      	ldr	r3, [pc, #368]	; (8058600 <ip4_frag+0x274>)
 805848e:	f240 322d 	movw	r2, #813	; 0x32d
 8058492:	495f      	ldr	r1, [pc, #380]	; (8058610 <ip4_frag+0x284>)
 8058494:	485c      	ldr	r0, [pc, #368]	; (8058608 <ip4_frag+0x27c>)
 8058496:	f000 fdcd 	bl	8059034 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 805849a:	8bfa      	ldrh	r2, [r7, #30]
 805849c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80584a0:	4293      	cmp	r3, r2
 80584a2:	bf28      	it	cs
 80584a4:	4613      	movcs	r3, r2
 80584a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80584aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80584ae:	2b00      	cmp	r3, #0
 80584b0:	d105      	bne.n	80584be <ip4_frag+0x132>
        poff = 0;
 80584b2:	2300      	movs	r3, #0
 80584b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80584b6:	68fb      	ldr	r3, [r7, #12]
 80584b8:	681b      	ldr	r3, [r3, #0]
 80584ba:	60fb      	str	r3, [r7, #12]
        continue;
 80584bc:	e041      	b.n	8058542 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80584be:	f7ff ff0d 	bl	80582dc <ip_frag_alloc_pbuf_custom_ref>
 80584c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80584c4:	69bb      	ldr	r3, [r7, #24]
 80584c6:	2b00      	cmp	r3, #0
 80584c8:	d103      	bne.n	80584d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80584ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80584cc:	f7f6 ff1a 	bl	804f304 <pbuf_free>
        goto memerr;
 80584d0:	e08f      	b.n	80585f2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80584d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80584d4:	68fb      	ldr	r3, [r7, #12]
 80584d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80584d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80584da:	4413      	add	r3, r2
 80584dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80584e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80584e4:	9201      	str	r2, [sp, #4]
 80584e6:	9300      	str	r3, [sp, #0]
 80584e8:	4603      	mov	r3, r0
 80584ea:	2241      	movs	r2, #65	; 0x41
 80584ec:	2000      	movs	r0, #0
 80584ee:	f7f6 fd4f 	bl	804ef90 <pbuf_alloced_custom>
 80584f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80584f4:	697b      	ldr	r3, [r7, #20]
 80584f6:	2b00      	cmp	r3, #0
 80584f8:	d106      	bne.n	8058508 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80584fa:	69b8      	ldr	r0, [r7, #24]
 80584fc:	f7ff fef6 	bl	80582ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8058500:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8058502:	f7f6 feff 	bl	804f304 <pbuf_free>
        goto memerr;
 8058506:	e074      	b.n	80585f2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8058508:	68f8      	ldr	r0, [r7, #12]
 805850a:	f7f6 ffa1 	bl	804f450 <pbuf_ref>
      pcr->original = p;
 805850e:	69bb      	ldr	r3, [r7, #24]
 8058510:	68fa      	ldr	r2, [r7, #12]
 8058512:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8058514:	69bb      	ldr	r3, [r7, #24]
 8058516:	4a3f      	ldr	r2, [pc, #252]	; (8058614 <ip4_frag+0x288>)
 8058518:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 805851a:	6979      	ldr	r1, [r7, #20]
 805851c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 805851e:	f7f6 ffbf 	bl	804f4a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8058522:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8058526:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 805852a:	1ad3      	subs	r3, r2, r3
 805852c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8058530:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8058534:	2b00      	cmp	r3, #0
 8058536:	d004      	beq.n	8058542 <ip4_frag+0x1b6>
        poff = 0;
 8058538:	2300      	movs	r3, #0
 805853a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 805853c:	68fb      	ldr	r3, [r7, #12]
 805853e:	681b      	ldr	r3, [r3, #0]
 8058540:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8058542:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8058546:	2b00      	cmp	r3, #0
 8058548:	d196      	bne.n	8058478 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 805854a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 805854c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8058550:	4413      	add	r3, r2
 8058552:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8058554:	68bb      	ldr	r3, [r7, #8]
 8058556:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8058558:	f1a3 0213 	sub.w	r2, r3, #19
 805855c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8058560:	429a      	cmp	r2, r3
 8058562:	bfcc      	ite	gt
 8058564:	2301      	movgt	r3, #1
 8058566:	2300      	movle	r3, #0
 8058568:	b2db      	uxtb	r3, r3
 805856a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 805856c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8058570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8058574:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8058576:	6a3b      	ldr	r3, [r7, #32]
 8058578:	2b00      	cmp	r3, #0
 805857a:	d002      	beq.n	8058582 <ip4_frag+0x1f6>
 805857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805857e:	2b00      	cmp	r3, #0
 8058580:	d003      	beq.n	805858a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8058582:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8058584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8058588:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 805858a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 805858c:	4618      	mov	r0, r3
 805858e:	f7f5 fac7 	bl	804db20 <lwip_htons>
 8058592:	4603      	mov	r3, r0
 8058594:	461a      	mov	r2, r3
 8058596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8058598:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 805859a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 805859c:	3314      	adds	r3, #20
 805859e:	b29b      	uxth	r3, r3
 80585a0:	4618      	mov	r0, r3
 80585a2:	f7f5 fabd 	bl	804db20 <lwip_htons>
 80585a6:	4603      	mov	r3, r0
 80585a8:	461a      	mov	r2, r3
 80585aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80585ac:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80585ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80585b0:	2200      	movs	r2, #0
 80585b2:	729a      	strb	r2, [r3, #10]
 80585b4:	2200      	movs	r2, #0
 80585b6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80585b8:	68bb      	ldr	r3, [r7, #8]
 80585ba:	695b      	ldr	r3, [r3, #20]
 80585bc:	687a      	ldr	r2, [r7, #4]
 80585be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80585c0:	68b8      	ldr	r0, [r7, #8]
 80585c2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80585c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80585c6:	f7f6 fe9d 	bl	804f304 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80585ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80585ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80585d0:	1ad3      	subs	r3, r2, r3
 80585d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80585d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80585da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80585dc:	4413      	add	r3, r2
 80585de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80585e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80585e6:	2b00      	cmp	r3, #0
 80585e8:	f47f af19 	bne.w	805841e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80585ec:	2300      	movs	r3, #0
 80585ee:	e002      	b.n	80585f6 <ip4_frag+0x26a>
      goto memerr;
 80585f0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80585f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80585f6:	4618      	mov	r0, r3
 80585f8:	3748      	adds	r7, #72	; 0x48
 80585fa:	46bd      	mov	sp, r7
 80585fc:	bd80      	pop	{r7, pc}
 80585fe:	bf00      	nop
 8058600:	0805d534 	.word	0x0805d534
 8058604:	0805d710 	.word	0x0805d710
 8058608:	0805d57c 	.word	0x0805d57c
 805860c:	0805d72c 	.word	0x0805d72c
 8058610:	0805d74c 	.word	0x0805d74c
 8058614:	08058325 	.word	0x08058325

08058618 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8058618:	b580      	push	{r7, lr}
 805861a:	b086      	sub	sp, #24
 805861c:	af00      	add	r7, sp, #0
 805861e:	6078      	str	r0, [r7, #4]
 8058620:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8058622:	230e      	movs	r3, #14
 8058624:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8058626:	687b      	ldr	r3, [r7, #4]
 8058628:	895b      	ldrh	r3, [r3, #10]
 805862a:	2b0e      	cmp	r3, #14
 805862c:	d96e      	bls.n	805870c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 805862e:	687b      	ldr	r3, [r7, #4]
 8058630:	7bdb      	ldrb	r3, [r3, #15]
 8058632:	2b00      	cmp	r3, #0
 8058634:	d106      	bne.n	8058644 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8058636:	683b      	ldr	r3, [r7, #0]
 8058638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 805863c:	3301      	adds	r3, #1
 805863e:	b2da      	uxtb	r2, r3
 8058640:	687b      	ldr	r3, [r7, #4]
 8058642:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8058644:	687b      	ldr	r3, [r7, #4]
 8058646:	685b      	ldr	r3, [r3, #4]
 8058648:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 805864a:	693b      	ldr	r3, [r7, #16]
 805864c:	7b1a      	ldrb	r2, [r3, #12]
 805864e:	7b5b      	ldrb	r3, [r3, #13]
 8058650:	021b      	lsls	r3, r3, #8
 8058652:	4313      	orrs	r3, r2
 8058654:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8058656:	693b      	ldr	r3, [r7, #16]
 8058658:	781b      	ldrb	r3, [r3, #0]
 805865a:	f003 0301 	and.w	r3, r3, #1
 805865e:	2b00      	cmp	r3, #0
 8058660:	d023      	beq.n	80586aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8058662:	693b      	ldr	r3, [r7, #16]
 8058664:	781b      	ldrb	r3, [r3, #0]
 8058666:	2b01      	cmp	r3, #1
 8058668:	d10f      	bne.n	805868a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 805866a:	693b      	ldr	r3, [r7, #16]
 805866c:	785b      	ldrb	r3, [r3, #1]
 805866e:	2b00      	cmp	r3, #0
 8058670:	d11b      	bne.n	80586aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8058672:	693b      	ldr	r3, [r7, #16]
 8058674:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8058676:	2b5e      	cmp	r3, #94	; 0x5e
 8058678:	d117      	bne.n	80586aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 805867a:	687b      	ldr	r3, [r7, #4]
 805867c:	7b5b      	ldrb	r3, [r3, #13]
 805867e:	f043 0310 	orr.w	r3, r3, #16
 8058682:	b2da      	uxtb	r2, r3
 8058684:	687b      	ldr	r3, [r7, #4]
 8058686:	735a      	strb	r2, [r3, #13]
 8058688:	e00f      	b.n	80586aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 805868a:	693b      	ldr	r3, [r7, #16]
 805868c:	2206      	movs	r2, #6
 805868e:	4928      	ldr	r1, [pc, #160]	; (8058730 <ethernet_input+0x118>)
 8058690:	4618      	mov	r0, r3
 8058692:	f000 fbaf 	bl	8058df4 <memcmp>
 8058696:	4603      	mov	r3, r0
 8058698:	2b00      	cmp	r3, #0
 805869a:	d106      	bne.n	80586aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 805869c:	687b      	ldr	r3, [r7, #4]
 805869e:	7b5b      	ldrb	r3, [r3, #13]
 80586a0:	f043 0308 	orr.w	r3, r3, #8
 80586a4:	b2da      	uxtb	r2, r3
 80586a6:	687b      	ldr	r3, [r7, #4]
 80586a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80586aa:	89fb      	ldrh	r3, [r7, #14]
 80586ac:	2b08      	cmp	r3, #8
 80586ae:	d003      	beq.n	80586b8 <ethernet_input+0xa0>
 80586b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80586b4:	d014      	beq.n	80586e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80586b6:	e032      	b.n	805871e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80586b8:	683b      	ldr	r3, [r7, #0]
 80586ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80586be:	f003 0308 	and.w	r3, r3, #8
 80586c2:	2b00      	cmp	r3, #0
 80586c4:	d024      	beq.n	8058710 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80586c6:	8afb      	ldrh	r3, [r7, #22]
 80586c8:	4619      	mov	r1, r3
 80586ca:	6878      	ldr	r0, [r7, #4]
 80586cc:	f7f6 fd94 	bl	804f1f8 <pbuf_remove_header>
 80586d0:	4603      	mov	r3, r0
 80586d2:	2b00      	cmp	r3, #0
 80586d4:	d11e      	bne.n	8058714 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80586d6:	6839      	ldr	r1, [r7, #0]
 80586d8:	6878      	ldr	r0, [r7, #4]
 80586da:	f7fe ff21 	bl	8057520 <ip4_input>
      break;
 80586de:	e013      	b.n	8058708 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80586e0:	683b      	ldr	r3, [r7, #0]
 80586e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80586e6:	f003 0308 	and.w	r3, r3, #8
 80586ea:	2b00      	cmp	r3, #0
 80586ec:	d014      	beq.n	8058718 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80586ee:	8afb      	ldrh	r3, [r7, #22]
 80586f0:	4619      	mov	r1, r3
 80586f2:	6878      	ldr	r0, [r7, #4]
 80586f4:	f7f6 fd80 	bl	804f1f8 <pbuf_remove_header>
 80586f8:	4603      	mov	r3, r0
 80586fa:	2b00      	cmp	r3, #0
 80586fc:	d10e      	bne.n	805871c <ethernet_input+0x104>
        etharp_input(p, netif);
 80586fe:	6839      	ldr	r1, [r7, #0]
 8058700:	6878      	ldr	r0, [r7, #4]
 8058702:	f7fe f8c1 	bl	8056888 <etharp_input>
      break;
 8058706:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8058708:	2300      	movs	r3, #0
 805870a:	e00c      	b.n	8058726 <ethernet_input+0x10e>
    goto free_and_return;
 805870c:	bf00      	nop
 805870e:	e006      	b.n	805871e <ethernet_input+0x106>
        goto free_and_return;
 8058710:	bf00      	nop
 8058712:	e004      	b.n	805871e <ethernet_input+0x106>
        goto free_and_return;
 8058714:	bf00      	nop
 8058716:	e002      	b.n	805871e <ethernet_input+0x106>
        goto free_and_return;
 8058718:	bf00      	nop
 805871a:	e000      	b.n	805871e <ethernet_input+0x106>
        goto free_and_return;
 805871c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 805871e:	6878      	ldr	r0, [r7, #4]
 8058720:	f7f6 fdf0 	bl	804f304 <pbuf_free>
  return ERR_OK;
 8058724:	2300      	movs	r3, #0
}
 8058726:	4618      	mov	r0, r3
 8058728:	3718      	adds	r7, #24
 805872a:	46bd      	mov	sp, r7
 805872c:	bd80      	pop	{r7, pc}
 805872e:	bf00      	nop
 8058730:	0805d92c 	.word	0x0805d92c

08058734 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8058734:	b580      	push	{r7, lr}
 8058736:	b086      	sub	sp, #24
 8058738:	af00      	add	r7, sp, #0
 805873a:	60f8      	str	r0, [r7, #12]
 805873c:	60b9      	str	r1, [r7, #8]
 805873e:	607a      	str	r2, [r7, #4]
 8058740:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8058742:	8c3b      	ldrh	r3, [r7, #32]
 8058744:	4618      	mov	r0, r3
 8058746:	f7f5 f9eb 	bl	804db20 <lwip_htons>
 805874a:	4603      	mov	r3, r0
 805874c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 805874e:	210e      	movs	r1, #14
 8058750:	68b8      	ldr	r0, [r7, #8]
 8058752:	f7f6 fd41 	bl	804f1d8 <pbuf_add_header>
 8058756:	4603      	mov	r3, r0
 8058758:	2b00      	cmp	r3, #0
 805875a:	d125      	bne.n	80587a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 805875c:	68bb      	ldr	r3, [r7, #8]
 805875e:	685b      	ldr	r3, [r3, #4]
 8058760:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8058762:	693b      	ldr	r3, [r7, #16]
 8058764:	8afa      	ldrh	r2, [r7, #22]
 8058766:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8058768:	693b      	ldr	r3, [r7, #16]
 805876a:	2206      	movs	r2, #6
 805876c:	6839      	ldr	r1, [r7, #0]
 805876e:	4618      	mov	r0, r3
 8058770:	f000 fb50 	bl	8058e14 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8058774:	693b      	ldr	r3, [r7, #16]
 8058776:	3306      	adds	r3, #6
 8058778:	2206      	movs	r2, #6
 805877a:	6879      	ldr	r1, [r7, #4]
 805877c:	4618      	mov	r0, r3
 805877e:	f000 fb49 	bl	8058e14 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8058782:	68fb      	ldr	r3, [r7, #12]
 8058784:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8058788:	2b06      	cmp	r3, #6
 805878a:	d006      	beq.n	805879a <ethernet_output+0x66>
 805878c:	4b0a      	ldr	r3, [pc, #40]	; (80587b8 <ethernet_output+0x84>)
 805878e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8058792:	490a      	ldr	r1, [pc, #40]	; (80587bc <ethernet_output+0x88>)
 8058794:	480a      	ldr	r0, [pc, #40]	; (80587c0 <ethernet_output+0x8c>)
 8058796:	f000 fc4d 	bl	8059034 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 805879a:	68fb      	ldr	r3, [r7, #12]
 805879c:	699b      	ldr	r3, [r3, #24]
 805879e:	68b9      	ldr	r1, [r7, #8]
 80587a0:	68f8      	ldr	r0, [r7, #12]
 80587a2:	4798      	blx	r3
 80587a4:	4603      	mov	r3, r0
 80587a6:	e002      	b.n	80587ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80587a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80587aa:	f06f 0301 	mvn.w	r3, #1
}
 80587ae:	4618      	mov	r0, r3
 80587b0:	3718      	adds	r7, #24
 80587b2:	46bd      	mov	sp, r7
 80587b4:	bd80      	pop	{r7, pc}
 80587b6:	bf00      	nop
 80587b8:	0805d75c 	.word	0x0805d75c
 80587bc:	0805d794 	.word	0x0805d794
 80587c0:	0805d7c8 	.word	0x0805d7c8

080587c4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80587c4:	b580      	push	{r7, lr}
 80587c6:	b086      	sub	sp, #24
 80587c8:	af00      	add	r7, sp, #0
 80587ca:	6078      	str	r0, [r7, #4]
 80587cc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80587ce:	683b      	ldr	r3, [r7, #0]
 80587d0:	60bb      	str	r3, [r7, #8]
 80587d2:	2304      	movs	r3, #4
 80587d4:	60fb      	str	r3, [r7, #12]
 80587d6:	2300      	movs	r3, #0
 80587d8:	613b      	str	r3, [r7, #16]
 80587da:	2300      	movs	r3, #0
 80587dc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80587de:	f107 0308 	add.w	r3, r7, #8
 80587e2:	2100      	movs	r1, #0
 80587e4:	4618      	mov	r0, r3
 80587e6:	f7f0 f94e 	bl	8048a86 <osMessageCreate>
 80587ea:	4602      	mov	r2, r0
 80587ec:	687b      	ldr	r3, [r7, #4]
 80587ee:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80587f0:	687b      	ldr	r3, [r7, #4]
 80587f2:	681b      	ldr	r3, [r3, #0]
 80587f4:	2b00      	cmp	r3, #0
 80587f6:	d102      	bne.n	80587fe <sys_mbox_new+0x3a>
    return ERR_MEM;
 80587f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80587fc:	e000      	b.n	8058800 <sys_mbox_new+0x3c>

  return ERR_OK;
 80587fe:	2300      	movs	r3, #0
}
 8058800:	4618      	mov	r0, r3
 8058802:	3718      	adds	r7, #24
 8058804:	46bd      	mov	sp, r7
 8058806:	bd80      	pop	{r7, pc}

08058808 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8058808:	b580      	push	{r7, lr}
 805880a:	b082      	sub	sp, #8
 805880c:	af00      	add	r7, sp, #0
 805880e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8058810:	687b      	ldr	r3, [r7, #4]
 8058812:	681b      	ldr	r3, [r3, #0]
 8058814:	4618      	mov	r0, r3
 8058816:	f7f0 fa13 	bl	8048c40 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 805881a:	687b      	ldr	r3, [r7, #4]
 805881c:	681b      	ldr	r3, [r3, #0]
 805881e:	4618      	mov	r0, r3
 8058820:	f7f0 fa24 	bl	8048c6c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8058824:	bf00      	nop
 8058826:	3708      	adds	r7, #8
 8058828:	46bd      	mov	sp, r7
 805882a:	bd80      	pop	{r7, pc}

0805882c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 805882c:	b580      	push	{r7, lr}
 805882e:	b084      	sub	sp, #16
 8058830:	af00      	add	r7, sp, #0
 8058832:	6078      	str	r0, [r7, #4]
 8058834:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8058836:	687b      	ldr	r3, [r7, #4]
 8058838:	681b      	ldr	r3, [r3, #0]
 805883a:	6839      	ldr	r1, [r7, #0]
 805883c:	2200      	movs	r2, #0
 805883e:	4618      	mov	r0, r3
 8058840:	f7f0 f94a 	bl	8048ad8 <osMessagePut>
 8058844:	4603      	mov	r3, r0
 8058846:	2b00      	cmp	r3, #0
 8058848:	d102      	bne.n	8058850 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 805884a:	2300      	movs	r3, #0
 805884c:	73fb      	strb	r3, [r7, #15]
 805884e:	e001      	b.n	8058854 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8058850:	23ff      	movs	r3, #255	; 0xff
 8058852:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8058854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8058858:	4618      	mov	r0, r3
 805885a:	3710      	adds	r7, #16
 805885c:	46bd      	mov	sp, r7
 805885e:	bd80      	pop	{r7, pc}

08058860 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8058860:	b580      	push	{r7, lr}
 8058862:	b08c      	sub	sp, #48	; 0x30
 8058864:	af00      	add	r7, sp, #0
 8058866:	61f8      	str	r0, [r7, #28]
 8058868:	61b9      	str	r1, [r7, #24]
 805886a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 805886c:	f7ef ff36 	bl	80486dc <osKernelSysTick>
 8058870:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8058872:	697b      	ldr	r3, [r7, #20]
 8058874:	2b00      	cmp	r3, #0
 8058876:	d017      	beq.n	80588a8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8058878:	69fb      	ldr	r3, [r7, #28]
 805887a:	6819      	ldr	r1, [r3, #0]
 805887c:	f107 0320 	add.w	r3, r7, #32
 8058880:	697a      	ldr	r2, [r7, #20]
 8058882:	4618      	mov	r0, r3
 8058884:	f7f0 f968 	bl	8048b58 <osMessageGet>

    if(event.status == osEventMessage)
 8058888:	6a3b      	ldr	r3, [r7, #32]
 805888a:	2b10      	cmp	r3, #16
 805888c:	d109      	bne.n	80588a2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 805888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8058890:	461a      	mov	r2, r3
 8058892:	69bb      	ldr	r3, [r7, #24]
 8058894:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8058896:	f7ef ff21 	bl	80486dc <osKernelSysTick>
 805889a:	4602      	mov	r2, r0
 805889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 805889e:	1ad3      	subs	r3, r2, r3
 80588a0:	e019      	b.n	80588d6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80588a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80588a6:	e016      	b.n	80588d6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80588a8:	69fb      	ldr	r3, [r7, #28]
 80588aa:	6819      	ldr	r1, [r3, #0]
 80588ac:	463b      	mov	r3, r7
 80588ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80588b2:	4618      	mov	r0, r3
 80588b4:	f7f0 f950 	bl	8048b58 <osMessageGet>
 80588b8:	f107 0320 	add.w	r3, r7, #32
 80588bc:	463a      	mov	r2, r7
 80588be:	ca07      	ldmia	r2, {r0, r1, r2}
 80588c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80588c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80588c6:	461a      	mov	r2, r3
 80588c8:	69bb      	ldr	r3, [r7, #24]
 80588ca:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80588cc:	f7ef ff06 	bl	80486dc <osKernelSysTick>
 80588d0:	4602      	mov	r2, r0
 80588d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80588d4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80588d6:	4618      	mov	r0, r3
 80588d8:	3730      	adds	r7, #48	; 0x30
 80588da:	46bd      	mov	sp, r7
 80588dc:	bd80      	pop	{r7, pc}

080588de <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80588de:	b580      	push	{r7, lr}
 80588e0:	b086      	sub	sp, #24
 80588e2:	af00      	add	r7, sp, #0
 80588e4:	6078      	str	r0, [r7, #4]
 80588e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80588e8:	687b      	ldr	r3, [r7, #4]
 80588ea:	6819      	ldr	r1, [r3, #0]
 80588ec:	f107 030c 	add.w	r3, r7, #12
 80588f0:	2200      	movs	r2, #0
 80588f2:	4618      	mov	r0, r3
 80588f4:	f7f0 f930 	bl	8048b58 <osMessageGet>

  if(event.status == osEventMessage)
 80588f8:	68fb      	ldr	r3, [r7, #12]
 80588fa:	2b10      	cmp	r3, #16
 80588fc:	d105      	bne.n	805890a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80588fe:	693b      	ldr	r3, [r7, #16]
 8058900:	461a      	mov	r2, r3
 8058902:	683b      	ldr	r3, [r7, #0]
 8058904:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8058906:	2300      	movs	r3, #0
 8058908:	e001      	b.n	805890e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 805890a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 805890e:	4618      	mov	r0, r3
 8058910:	3718      	adds	r7, #24
 8058912:	46bd      	mov	sp, r7
 8058914:	bd80      	pop	{r7, pc}

08058916 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8058916:	b480      	push	{r7}
 8058918:	b083      	sub	sp, #12
 805891a:	af00      	add	r7, sp, #0
 805891c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 805891e:	687b      	ldr	r3, [r7, #4]
 8058920:	681b      	ldr	r3, [r3, #0]
 8058922:	2b00      	cmp	r3, #0
 8058924:	d101      	bne.n	805892a <sys_mbox_valid+0x14>
    return 0;
 8058926:	2300      	movs	r3, #0
 8058928:	e000      	b.n	805892c <sys_mbox_valid+0x16>
  else
    return 1;
 805892a:	2301      	movs	r3, #1
}
 805892c:	4618      	mov	r0, r3
 805892e:	370c      	adds	r7, #12
 8058930:	46bd      	mov	sp, r7
 8058932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058936:	4770      	bx	lr

08058938 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8058938:	b480      	push	{r7}
 805893a:	b083      	sub	sp, #12
 805893c:	af00      	add	r7, sp, #0
 805893e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8058940:	687b      	ldr	r3, [r7, #4]
 8058942:	2200      	movs	r2, #0
 8058944:	601a      	str	r2, [r3, #0]
}
 8058946:	bf00      	nop
 8058948:	370c      	adds	r7, #12
 805894a:	46bd      	mov	sp, r7
 805894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058950:	4770      	bx	lr

08058952 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8058952:	b580      	push	{r7, lr}
 8058954:	b084      	sub	sp, #16
 8058956:	af00      	add	r7, sp, #0
 8058958:	6078      	str	r0, [r7, #4]
 805895a:	460b      	mov	r3, r1
 805895c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 805895e:	2300      	movs	r3, #0
 8058960:	60bb      	str	r3, [r7, #8]
 8058962:	2300      	movs	r3, #0
 8058964:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8058966:	f107 0308 	add.w	r3, r7, #8
 805896a:	2101      	movs	r1, #1
 805896c:	4618      	mov	r0, r3
 805896e:	f7ef ffc1 	bl	80488f4 <osSemaphoreCreate>
 8058972:	4602      	mov	r2, r0
 8058974:	687b      	ldr	r3, [r7, #4]
 8058976:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8058978:	687b      	ldr	r3, [r7, #4]
 805897a:	681b      	ldr	r3, [r3, #0]
 805897c:	2b00      	cmp	r3, #0
 805897e:	d102      	bne.n	8058986 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8058980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8058984:	e009      	b.n	805899a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8058986:	78fb      	ldrb	r3, [r7, #3]
 8058988:	2b00      	cmp	r3, #0
 805898a:	d105      	bne.n	8058998 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 805898c:	687b      	ldr	r3, [r7, #4]
 805898e:	681b      	ldr	r3, [r3, #0]
 8058990:	2100      	movs	r1, #0
 8058992:	4618      	mov	r0, r3
 8058994:	f7ef ffe0 	bl	8048958 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8058998:	2300      	movs	r3, #0
}
 805899a:	4618      	mov	r0, r3
 805899c:	3710      	adds	r7, #16
 805899e:	46bd      	mov	sp, r7
 80589a0:	bd80      	pop	{r7, pc}

080589a2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80589a2:	b580      	push	{r7, lr}
 80589a4:	b084      	sub	sp, #16
 80589a6:	af00      	add	r7, sp, #0
 80589a8:	6078      	str	r0, [r7, #4]
 80589aa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80589ac:	f7ef fe96 	bl	80486dc <osKernelSysTick>
 80589b0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80589b2:	683b      	ldr	r3, [r7, #0]
 80589b4:	2b00      	cmp	r3, #0
 80589b6:	d011      	beq.n	80589dc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80589b8:	687b      	ldr	r3, [r7, #4]
 80589ba:	681b      	ldr	r3, [r3, #0]
 80589bc:	6839      	ldr	r1, [r7, #0]
 80589be:	4618      	mov	r0, r3
 80589c0:	f7ef ffca 	bl	8048958 <osSemaphoreWait>
 80589c4:	4603      	mov	r3, r0
 80589c6:	2b00      	cmp	r3, #0
 80589c8:	d105      	bne.n	80589d6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80589ca:	f7ef fe87 	bl	80486dc <osKernelSysTick>
 80589ce:	4602      	mov	r2, r0
 80589d0:	68fb      	ldr	r3, [r7, #12]
 80589d2:	1ad3      	subs	r3, r2, r3
 80589d4:	e012      	b.n	80589fc <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80589d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80589da:	e00f      	b.n	80589fc <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80589dc:	bf00      	nop
 80589de:	687b      	ldr	r3, [r7, #4]
 80589e0:	681b      	ldr	r3, [r3, #0]
 80589e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80589e6:	4618      	mov	r0, r3
 80589e8:	f7ef ffb6 	bl	8048958 <osSemaphoreWait>
 80589ec:	4603      	mov	r3, r0
 80589ee:	2b00      	cmp	r3, #0
 80589f0:	d1f5      	bne.n	80589de <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80589f2:	f7ef fe73 	bl	80486dc <osKernelSysTick>
 80589f6:	4602      	mov	r2, r0
 80589f8:	68fb      	ldr	r3, [r7, #12]
 80589fa:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80589fc:	4618      	mov	r0, r3
 80589fe:	3710      	adds	r7, #16
 8058a00:	46bd      	mov	sp, r7
 8058a02:	bd80      	pop	{r7, pc}

08058a04 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8058a04:	b580      	push	{r7, lr}
 8058a06:	b082      	sub	sp, #8
 8058a08:	af00      	add	r7, sp, #0
 8058a0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8058a0c:	687b      	ldr	r3, [r7, #4]
 8058a0e:	681b      	ldr	r3, [r3, #0]
 8058a10:	4618      	mov	r0, r3
 8058a12:	f7ef ffef 	bl	80489f4 <osSemaphoreRelease>
}
 8058a16:	bf00      	nop
 8058a18:	3708      	adds	r7, #8
 8058a1a:	46bd      	mov	sp, r7
 8058a1c:	bd80      	pop	{r7, pc}

08058a1e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8058a1e:	b580      	push	{r7, lr}
 8058a20:	b082      	sub	sp, #8
 8058a22:	af00      	add	r7, sp, #0
 8058a24:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8058a26:	687b      	ldr	r3, [r7, #4]
 8058a28:	681b      	ldr	r3, [r3, #0]
 8058a2a:	4618      	mov	r0, r3
 8058a2c:	f7f0 f818 	bl	8048a60 <osSemaphoreDelete>
}
 8058a30:	bf00      	nop
 8058a32:	3708      	adds	r7, #8
 8058a34:	46bd      	mov	sp, r7
 8058a36:	bd80      	pop	{r7, pc}

08058a38 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8058a38:	b480      	push	{r7}
 8058a3a:	b083      	sub	sp, #12
 8058a3c:	af00      	add	r7, sp, #0
 8058a3e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8058a40:	687b      	ldr	r3, [r7, #4]
 8058a42:	681b      	ldr	r3, [r3, #0]
 8058a44:	2b00      	cmp	r3, #0
 8058a46:	d101      	bne.n	8058a4c <sys_sem_valid+0x14>
    return 0;
 8058a48:	2300      	movs	r3, #0
 8058a4a:	e000      	b.n	8058a4e <sys_sem_valid+0x16>
  else
    return 1;
 8058a4c:	2301      	movs	r3, #1
}
 8058a4e:	4618      	mov	r0, r3
 8058a50:	370c      	adds	r7, #12
 8058a52:	46bd      	mov	sp, r7
 8058a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058a58:	4770      	bx	lr

08058a5a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8058a5a:	b480      	push	{r7}
 8058a5c:	b083      	sub	sp, #12
 8058a5e:	af00      	add	r7, sp, #0
 8058a60:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8058a62:	687b      	ldr	r3, [r7, #4]
 8058a64:	2200      	movs	r2, #0
 8058a66:	601a      	str	r2, [r3, #0]
}
 8058a68:	bf00      	nop
 8058a6a:	370c      	adds	r7, #12
 8058a6c:	46bd      	mov	sp, r7
 8058a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8058a72:	4770      	bx	lr

08058a74 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8058a74:	b580      	push	{r7, lr}
 8058a76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8058a78:	4803      	ldr	r0, [pc, #12]	; (8058a88 <sys_init+0x14>)
 8058a7a:	f7ef fe9f 	bl	80487bc <osMutexCreate>
 8058a7e:	4603      	mov	r3, r0
 8058a80:	4a02      	ldr	r2, [pc, #8]	; (8058a8c <sys_init+0x18>)
 8058a82:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8058a84:	bf00      	nop
 8058a86:	bd80      	pop	{r7, pc}
 8058a88:	0805d93c 	.word	0x0805d93c
 8058a8c:	2000b728 	.word	0x2000b728

08058a90 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8058a90:	b580      	push	{r7, lr}
 8058a92:	b084      	sub	sp, #16
 8058a94:	af00      	add	r7, sp, #0
 8058a96:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8058a98:	2300      	movs	r3, #0
 8058a9a:	60bb      	str	r3, [r7, #8]
 8058a9c:	2300      	movs	r3, #0
 8058a9e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8058aa0:	f107 0308 	add.w	r3, r7, #8
 8058aa4:	4618      	mov	r0, r3
 8058aa6:	f7ef fe89 	bl	80487bc <osMutexCreate>
 8058aaa:	4602      	mov	r2, r0
 8058aac:	687b      	ldr	r3, [r7, #4]
 8058aae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8058ab0:	687b      	ldr	r3, [r7, #4]
 8058ab2:	681b      	ldr	r3, [r3, #0]
 8058ab4:	2b00      	cmp	r3, #0
 8058ab6:	d102      	bne.n	8058abe <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8058ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8058abc:	e000      	b.n	8058ac0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8058abe:	2300      	movs	r3, #0
}
 8058ac0:	4618      	mov	r0, r3
 8058ac2:	3710      	adds	r7, #16
 8058ac4:	46bd      	mov	sp, r7
 8058ac6:	bd80      	pop	{r7, pc}

08058ac8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8058ac8:	b580      	push	{r7, lr}
 8058aca:	b082      	sub	sp, #8
 8058acc:	af00      	add	r7, sp, #0
 8058ace:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8058ad0:	687b      	ldr	r3, [r7, #4]
 8058ad2:	681b      	ldr	r3, [r3, #0]
 8058ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8058ad8:	4618      	mov	r0, r3
 8058ada:	f7ef fe87 	bl	80487ec <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8058ade:	bf00      	nop
 8058ae0:	3708      	adds	r7, #8
 8058ae2:	46bd      	mov	sp, r7
 8058ae4:	bd80      	pop	{r7, pc}

08058ae6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8058ae6:	b580      	push	{r7, lr}
 8058ae8:	b082      	sub	sp, #8
 8058aea:	af00      	add	r7, sp, #0
 8058aec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8058aee:	687b      	ldr	r3, [r7, #4]
 8058af0:	681b      	ldr	r3, [r3, #0]
 8058af2:	4618      	mov	r0, r3
 8058af4:	f7ef fec8 	bl	8048888 <osMutexRelease>
}
 8058af8:	bf00      	nop
 8058afa:	3708      	adds	r7, #8
 8058afc:	46bd      	mov	sp, r7
 8058afe:	bd80      	pop	{r7, pc}

08058b00 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8058b00:	b580      	push	{r7, lr}
 8058b02:	b08c      	sub	sp, #48	; 0x30
 8058b04:	af00      	add	r7, sp, #0
 8058b06:	60f8      	str	r0, [r7, #12]
 8058b08:	60b9      	str	r1, [r7, #8]
 8058b0a:	607a      	str	r2, [r7, #4]
 8058b0c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8058b0e:	f107 0314 	add.w	r3, r7, #20
 8058b12:	2200      	movs	r2, #0
 8058b14:	601a      	str	r2, [r3, #0]
 8058b16:	605a      	str	r2, [r3, #4]
 8058b18:	609a      	str	r2, [r3, #8]
 8058b1a:	60da      	str	r2, [r3, #12]
 8058b1c:	611a      	str	r2, [r3, #16]
 8058b1e:	615a      	str	r2, [r3, #20]
 8058b20:	619a      	str	r2, [r3, #24]
 8058b22:	68fb      	ldr	r3, [r7, #12]
 8058b24:	617b      	str	r3, [r7, #20]
 8058b26:	68bb      	ldr	r3, [r7, #8]
 8058b28:	61bb      	str	r3, [r7, #24]
 8058b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8058b2c:	b21b      	sxth	r3, r3
 8058b2e:	83bb      	strh	r3, [r7, #28]
 8058b30:	683b      	ldr	r3, [r7, #0]
 8058b32:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8058b34:	f107 0314 	add.w	r3, r7, #20
 8058b38:	6879      	ldr	r1, [r7, #4]
 8058b3a:	4618      	mov	r0, r3
 8058b3c:	f7ef fdde 	bl	80486fc <osThreadCreate>
 8058b40:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8058b42:	4618      	mov	r0, r3
 8058b44:	3730      	adds	r7, #48	; 0x30
 8058b46:	46bd      	mov	sp, r7
 8058b48:	bd80      	pop	{r7, pc}
	...

08058b4c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8058b4c:	b580      	push	{r7, lr}
 8058b4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8058b50:	4b04      	ldr	r3, [pc, #16]	; (8058b64 <sys_arch_protect+0x18>)
 8058b52:	681b      	ldr	r3, [r3, #0]
 8058b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8058b58:	4618      	mov	r0, r3
 8058b5a:	f7ef fe47 	bl	80487ec <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8058b5e:	2301      	movs	r3, #1
}
 8058b60:	4618      	mov	r0, r3
 8058b62:	bd80      	pop	{r7, pc}
 8058b64:	2000b728 	.word	0x2000b728

08058b68 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8058b68:	b580      	push	{r7, lr}
 8058b6a:	b082      	sub	sp, #8
 8058b6c:	af00      	add	r7, sp, #0
 8058b6e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8058b70:	4b04      	ldr	r3, [pc, #16]	; (8058b84 <sys_arch_unprotect+0x1c>)
 8058b72:	681b      	ldr	r3, [r3, #0]
 8058b74:	4618      	mov	r0, r3
 8058b76:	f7ef fe87 	bl	8048888 <osMutexRelease>
}
 8058b7a:	bf00      	nop
 8058b7c:	3708      	adds	r7, #8
 8058b7e:	46bd      	mov	sp, r7
 8058b80:	bd80      	pop	{r7, pc}
 8058b82:	bf00      	nop
 8058b84:	2000b728 	.word	0x2000b728

08058b88 <abort>:
 8058b88:	b508      	push	{r3, lr}
 8058b8a:	2006      	movs	r0, #6
 8058b8c:	f000 fb3a 	bl	8059204 <raise>
 8058b90:	2001      	movs	r0, #1
 8058b92:	f7e9 f833 	bl	8041bfc <_exit>
	...

08058b98 <std>:
 8058b98:	2300      	movs	r3, #0
 8058b9a:	b510      	push	{r4, lr}
 8058b9c:	4604      	mov	r4, r0
 8058b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8058ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8058ba6:	6083      	str	r3, [r0, #8]
 8058ba8:	8181      	strh	r1, [r0, #12]
 8058baa:	6643      	str	r3, [r0, #100]	; 0x64
 8058bac:	81c2      	strh	r2, [r0, #14]
 8058bae:	6183      	str	r3, [r0, #24]
 8058bb0:	4619      	mov	r1, r3
 8058bb2:	2208      	movs	r2, #8
 8058bb4:	305c      	adds	r0, #92	; 0x5c
 8058bb6:	f000 f955 	bl	8058e64 <memset>
 8058bba:	4b05      	ldr	r3, [pc, #20]	; (8058bd0 <std+0x38>)
 8058bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8058bbe:	4b05      	ldr	r3, [pc, #20]	; (8058bd4 <std+0x3c>)
 8058bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8058bc2:	4b05      	ldr	r3, [pc, #20]	; (8058bd8 <std+0x40>)
 8058bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8058bc6:	4b05      	ldr	r3, [pc, #20]	; (8058bdc <std+0x44>)
 8058bc8:	6224      	str	r4, [r4, #32]
 8058bca:	6323      	str	r3, [r4, #48]	; 0x30
 8058bcc:	bd10      	pop	{r4, pc}
 8058bce:	bf00      	nop
 8058bd0:	0805927d 	.word	0x0805927d
 8058bd4:	0805929f 	.word	0x0805929f
 8058bd8:	080592d7 	.word	0x080592d7
 8058bdc:	080592fb 	.word	0x080592fb

08058be0 <_cleanup_r>:
 8058be0:	4901      	ldr	r1, [pc, #4]	; (8058be8 <_cleanup_r+0x8>)
 8058be2:	f000 b8af 	b.w	8058d44 <_fwalk_reent>
 8058be6:	bf00      	nop
 8058be8:	080594f5 	.word	0x080594f5

08058bec <__sfmoreglue>:
 8058bec:	b570      	push	{r4, r5, r6, lr}
 8058bee:	2268      	movs	r2, #104	; 0x68
 8058bf0:	1e4d      	subs	r5, r1, #1
 8058bf2:	4355      	muls	r5, r2
 8058bf4:	460e      	mov	r6, r1
 8058bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8058bfa:	f000 f9a7 	bl	8058f4c <_malloc_r>
 8058bfe:	4604      	mov	r4, r0
 8058c00:	b140      	cbz	r0, 8058c14 <__sfmoreglue+0x28>
 8058c02:	2100      	movs	r1, #0
 8058c04:	e9c0 1600 	strd	r1, r6, [r0]
 8058c08:	300c      	adds	r0, #12
 8058c0a:	60a0      	str	r0, [r4, #8]
 8058c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8058c10:	f000 f928 	bl	8058e64 <memset>
 8058c14:	4620      	mov	r0, r4
 8058c16:	bd70      	pop	{r4, r5, r6, pc}

08058c18 <__sfp_lock_acquire>:
 8058c18:	4801      	ldr	r0, [pc, #4]	; (8058c20 <__sfp_lock_acquire+0x8>)
 8058c1a:	f000 b8d8 	b.w	8058dce <__retarget_lock_acquire_recursive>
 8058c1e:	bf00      	nop
 8058c20:	2000b72c 	.word	0x2000b72c

08058c24 <__sfp_lock_release>:
 8058c24:	4801      	ldr	r0, [pc, #4]	; (8058c2c <__sfp_lock_release+0x8>)
 8058c26:	f000 b8d3 	b.w	8058dd0 <__retarget_lock_release_recursive>
 8058c2a:	bf00      	nop
 8058c2c:	2000b72c 	.word	0x2000b72c

08058c30 <__sinit_lock_acquire>:
 8058c30:	4801      	ldr	r0, [pc, #4]	; (8058c38 <__sinit_lock_acquire+0x8>)
 8058c32:	f000 b8cc 	b.w	8058dce <__retarget_lock_acquire_recursive>
 8058c36:	bf00      	nop
 8058c38:	2000b72d 	.word	0x2000b72d

08058c3c <__sinit_lock_release>:
 8058c3c:	4801      	ldr	r0, [pc, #4]	; (8058c44 <__sinit_lock_release+0x8>)
 8058c3e:	f000 b8c7 	b.w	8058dd0 <__retarget_lock_release_recursive>
 8058c42:	bf00      	nop
 8058c44:	2000b72d 	.word	0x2000b72d

08058c48 <__sinit>:
 8058c48:	b510      	push	{r4, lr}
 8058c4a:	4604      	mov	r4, r0
 8058c4c:	f7ff fff0 	bl	8058c30 <__sinit_lock_acquire>
 8058c50:	69a3      	ldr	r3, [r4, #24]
 8058c52:	b11b      	cbz	r3, 8058c5c <__sinit+0x14>
 8058c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8058c58:	f7ff bff0 	b.w	8058c3c <__sinit_lock_release>
 8058c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8058c60:	6523      	str	r3, [r4, #80]	; 0x50
 8058c62:	4b13      	ldr	r3, [pc, #76]	; (8058cb0 <__sinit+0x68>)
 8058c64:	4a13      	ldr	r2, [pc, #76]	; (8058cb4 <__sinit+0x6c>)
 8058c66:	681b      	ldr	r3, [r3, #0]
 8058c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8058c6a:	42a3      	cmp	r3, r4
 8058c6c:	bf04      	itt	eq
 8058c6e:	2301      	moveq	r3, #1
 8058c70:	61a3      	streq	r3, [r4, #24]
 8058c72:	4620      	mov	r0, r4
 8058c74:	f000 f820 	bl	8058cb8 <__sfp>
 8058c78:	6060      	str	r0, [r4, #4]
 8058c7a:	4620      	mov	r0, r4
 8058c7c:	f000 f81c 	bl	8058cb8 <__sfp>
 8058c80:	60a0      	str	r0, [r4, #8]
 8058c82:	4620      	mov	r0, r4
 8058c84:	f000 f818 	bl	8058cb8 <__sfp>
 8058c88:	2200      	movs	r2, #0
 8058c8a:	60e0      	str	r0, [r4, #12]
 8058c8c:	2104      	movs	r1, #4
 8058c8e:	6860      	ldr	r0, [r4, #4]
 8058c90:	f7ff ff82 	bl	8058b98 <std>
 8058c94:	68a0      	ldr	r0, [r4, #8]
 8058c96:	2201      	movs	r2, #1
 8058c98:	2109      	movs	r1, #9
 8058c9a:	f7ff ff7d 	bl	8058b98 <std>
 8058c9e:	68e0      	ldr	r0, [r4, #12]
 8058ca0:	2202      	movs	r2, #2
 8058ca2:	2112      	movs	r1, #18
 8058ca4:	f7ff ff78 	bl	8058b98 <std>
 8058ca8:	2301      	movs	r3, #1
 8058caa:	61a3      	str	r3, [r4, #24]
 8058cac:	e7d2      	b.n	8058c54 <__sinit+0xc>
 8058cae:	bf00      	nop
 8058cb0:	0805d9a4 	.word	0x0805d9a4
 8058cb4:	08058be1 	.word	0x08058be1

08058cb8 <__sfp>:
 8058cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8058cba:	4607      	mov	r7, r0
 8058cbc:	f7ff ffac 	bl	8058c18 <__sfp_lock_acquire>
 8058cc0:	4b1e      	ldr	r3, [pc, #120]	; (8058d3c <__sfp+0x84>)
 8058cc2:	681e      	ldr	r6, [r3, #0]
 8058cc4:	69b3      	ldr	r3, [r6, #24]
 8058cc6:	b913      	cbnz	r3, 8058cce <__sfp+0x16>
 8058cc8:	4630      	mov	r0, r6
 8058cca:	f7ff ffbd 	bl	8058c48 <__sinit>
 8058cce:	3648      	adds	r6, #72	; 0x48
 8058cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8058cd4:	3b01      	subs	r3, #1
 8058cd6:	d503      	bpl.n	8058ce0 <__sfp+0x28>
 8058cd8:	6833      	ldr	r3, [r6, #0]
 8058cda:	b30b      	cbz	r3, 8058d20 <__sfp+0x68>
 8058cdc:	6836      	ldr	r6, [r6, #0]
 8058cde:	e7f7      	b.n	8058cd0 <__sfp+0x18>
 8058ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8058ce4:	b9d5      	cbnz	r5, 8058d1c <__sfp+0x64>
 8058ce6:	4b16      	ldr	r3, [pc, #88]	; (8058d40 <__sfp+0x88>)
 8058ce8:	60e3      	str	r3, [r4, #12]
 8058cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8058cee:	6665      	str	r5, [r4, #100]	; 0x64
 8058cf0:	f000 f86c 	bl	8058dcc <__retarget_lock_init_recursive>
 8058cf4:	f7ff ff96 	bl	8058c24 <__sfp_lock_release>
 8058cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8058cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8058d00:	6025      	str	r5, [r4, #0]
 8058d02:	61a5      	str	r5, [r4, #24]
 8058d04:	2208      	movs	r2, #8
 8058d06:	4629      	mov	r1, r5
 8058d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8058d0c:	f000 f8aa 	bl	8058e64 <memset>
 8058d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8058d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8058d18:	4620      	mov	r0, r4
 8058d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8058d1c:	3468      	adds	r4, #104	; 0x68
 8058d1e:	e7d9      	b.n	8058cd4 <__sfp+0x1c>
 8058d20:	2104      	movs	r1, #4
 8058d22:	4638      	mov	r0, r7
 8058d24:	f7ff ff62 	bl	8058bec <__sfmoreglue>
 8058d28:	4604      	mov	r4, r0
 8058d2a:	6030      	str	r0, [r6, #0]
 8058d2c:	2800      	cmp	r0, #0
 8058d2e:	d1d5      	bne.n	8058cdc <__sfp+0x24>
 8058d30:	f7ff ff78 	bl	8058c24 <__sfp_lock_release>
 8058d34:	230c      	movs	r3, #12
 8058d36:	603b      	str	r3, [r7, #0]
 8058d38:	e7ee      	b.n	8058d18 <__sfp+0x60>
 8058d3a:	bf00      	nop
 8058d3c:	0805d9a4 	.word	0x0805d9a4
 8058d40:	ffff0001 	.word	0xffff0001

08058d44 <_fwalk_reent>:
 8058d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8058d48:	4606      	mov	r6, r0
 8058d4a:	4688      	mov	r8, r1
 8058d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8058d50:	2700      	movs	r7, #0
 8058d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8058d56:	f1b9 0901 	subs.w	r9, r9, #1
 8058d5a:	d505      	bpl.n	8058d68 <_fwalk_reent+0x24>
 8058d5c:	6824      	ldr	r4, [r4, #0]
 8058d5e:	2c00      	cmp	r4, #0
 8058d60:	d1f7      	bne.n	8058d52 <_fwalk_reent+0xe>
 8058d62:	4638      	mov	r0, r7
 8058d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8058d68:	89ab      	ldrh	r3, [r5, #12]
 8058d6a:	2b01      	cmp	r3, #1
 8058d6c:	d907      	bls.n	8058d7e <_fwalk_reent+0x3a>
 8058d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8058d72:	3301      	adds	r3, #1
 8058d74:	d003      	beq.n	8058d7e <_fwalk_reent+0x3a>
 8058d76:	4629      	mov	r1, r5
 8058d78:	4630      	mov	r0, r6
 8058d7a:	47c0      	blx	r8
 8058d7c:	4307      	orrs	r7, r0
 8058d7e:	3568      	adds	r5, #104	; 0x68
 8058d80:	e7e9      	b.n	8058d56 <_fwalk_reent+0x12>
	...

08058d84 <__libc_init_array>:
 8058d84:	b570      	push	{r4, r5, r6, lr}
 8058d86:	4d0d      	ldr	r5, [pc, #52]	; (8058dbc <__libc_init_array+0x38>)
 8058d88:	4c0d      	ldr	r4, [pc, #52]	; (8058dc0 <__libc_init_array+0x3c>)
 8058d8a:	1b64      	subs	r4, r4, r5
 8058d8c:	10a4      	asrs	r4, r4, #2
 8058d8e:	2600      	movs	r6, #0
 8058d90:	42a6      	cmp	r6, r4
 8058d92:	d109      	bne.n	8058da8 <__libc_init_array+0x24>
 8058d94:	4d0b      	ldr	r5, [pc, #44]	; (8058dc4 <__libc_init_array+0x40>)
 8058d96:	4c0c      	ldr	r4, [pc, #48]	; (8058dc8 <__libc_init_array+0x44>)
 8058d98:	f001 f9e8 	bl	805a16c <_init>
 8058d9c:	1b64      	subs	r4, r4, r5
 8058d9e:	10a4      	asrs	r4, r4, #2
 8058da0:	2600      	movs	r6, #0
 8058da2:	42a6      	cmp	r6, r4
 8058da4:	d105      	bne.n	8058db2 <__libc_init_array+0x2e>
 8058da6:	bd70      	pop	{r4, r5, r6, pc}
 8058da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8058dac:	4798      	blx	r3
 8058dae:	3601      	adds	r6, #1
 8058db0:	e7ee      	b.n	8058d90 <__libc_init_array+0xc>
 8058db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8058db6:	4798      	blx	r3
 8058db8:	3601      	adds	r6, #1
 8058dba:	e7f2      	b.n	8058da2 <__libc_init_array+0x1e>
 8058dbc:	0805da94 	.word	0x0805da94
 8058dc0:	0805da94 	.word	0x0805da94
 8058dc4:	0805da94 	.word	0x0805da94
 8058dc8:	0805da98 	.word	0x0805da98

08058dcc <__retarget_lock_init_recursive>:
 8058dcc:	4770      	bx	lr

08058dce <__retarget_lock_acquire_recursive>:
 8058dce:	4770      	bx	lr

08058dd0 <__retarget_lock_release_recursive>:
 8058dd0:	4770      	bx	lr
	...

08058dd4 <malloc>:
 8058dd4:	4b02      	ldr	r3, [pc, #8]	; (8058de0 <malloc+0xc>)
 8058dd6:	4601      	mov	r1, r0
 8058dd8:	6818      	ldr	r0, [r3, #0]
 8058dda:	f000 b8b7 	b.w	8058f4c <_malloc_r>
 8058dde:	bf00      	nop
 8058de0:	20000034 	.word	0x20000034

08058de4 <free>:
 8058de4:	4b02      	ldr	r3, [pc, #8]	; (8058df0 <free+0xc>)
 8058de6:	4601      	mov	r1, r0
 8058de8:	6818      	ldr	r0, [r3, #0]
 8058dea:	f000 b843 	b.w	8058e74 <_free_r>
 8058dee:	bf00      	nop
 8058df0:	20000034 	.word	0x20000034

08058df4 <memcmp>:
 8058df4:	b510      	push	{r4, lr}
 8058df6:	3901      	subs	r1, #1
 8058df8:	4402      	add	r2, r0
 8058dfa:	4290      	cmp	r0, r2
 8058dfc:	d101      	bne.n	8058e02 <memcmp+0xe>
 8058dfe:	2000      	movs	r0, #0
 8058e00:	e005      	b.n	8058e0e <memcmp+0x1a>
 8058e02:	7803      	ldrb	r3, [r0, #0]
 8058e04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8058e08:	42a3      	cmp	r3, r4
 8058e0a:	d001      	beq.n	8058e10 <memcmp+0x1c>
 8058e0c:	1b18      	subs	r0, r3, r4
 8058e0e:	bd10      	pop	{r4, pc}
 8058e10:	3001      	adds	r0, #1
 8058e12:	e7f2      	b.n	8058dfa <memcmp+0x6>

08058e14 <memcpy>:
 8058e14:	440a      	add	r2, r1
 8058e16:	4291      	cmp	r1, r2
 8058e18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8058e1c:	d100      	bne.n	8058e20 <memcpy+0xc>
 8058e1e:	4770      	bx	lr
 8058e20:	b510      	push	{r4, lr}
 8058e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8058e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8058e2a:	4291      	cmp	r1, r2
 8058e2c:	d1f9      	bne.n	8058e22 <memcpy+0xe>
 8058e2e:	bd10      	pop	{r4, pc}

08058e30 <memmove>:
 8058e30:	4288      	cmp	r0, r1
 8058e32:	b510      	push	{r4, lr}
 8058e34:	eb01 0402 	add.w	r4, r1, r2
 8058e38:	d902      	bls.n	8058e40 <memmove+0x10>
 8058e3a:	4284      	cmp	r4, r0
 8058e3c:	4623      	mov	r3, r4
 8058e3e:	d807      	bhi.n	8058e50 <memmove+0x20>
 8058e40:	1e43      	subs	r3, r0, #1
 8058e42:	42a1      	cmp	r1, r4
 8058e44:	d008      	beq.n	8058e58 <memmove+0x28>
 8058e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8058e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8058e4e:	e7f8      	b.n	8058e42 <memmove+0x12>
 8058e50:	4402      	add	r2, r0
 8058e52:	4601      	mov	r1, r0
 8058e54:	428a      	cmp	r2, r1
 8058e56:	d100      	bne.n	8058e5a <memmove+0x2a>
 8058e58:	bd10      	pop	{r4, pc}
 8058e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8058e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8058e62:	e7f7      	b.n	8058e54 <memmove+0x24>

08058e64 <memset>:
 8058e64:	4402      	add	r2, r0
 8058e66:	4603      	mov	r3, r0
 8058e68:	4293      	cmp	r3, r2
 8058e6a:	d100      	bne.n	8058e6e <memset+0xa>
 8058e6c:	4770      	bx	lr
 8058e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8058e72:	e7f9      	b.n	8058e68 <memset+0x4>

08058e74 <_free_r>:
 8058e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8058e76:	2900      	cmp	r1, #0
 8058e78:	d044      	beq.n	8058f04 <_free_r+0x90>
 8058e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8058e7e:	9001      	str	r0, [sp, #4]
 8058e80:	2b00      	cmp	r3, #0
 8058e82:	f1a1 0404 	sub.w	r4, r1, #4
 8058e86:	bfb8      	it	lt
 8058e88:	18e4      	addlt	r4, r4, r3
 8058e8a:	f7e7 fcd5 	bl	8040838 <__malloc_lock>
 8058e8e:	4a1e      	ldr	r2, [pc, #120]	; (8058f08 <_free_r+0x94>)
 8058e90:	9801      	ldr	r0, [sp, #4]
 8058e92:	6813      	ldr	r3, [r2, #0]
 8058e94:	b933      	cbnz	r3, 8058ea4 <_free_r+0x30>
 8058e96:	6063      	str	r3, [r4, #4]
 8058e98:	6014      	str	r4, [r2, #0]
 8058e9a:	b003      	add	sp, #12
 8058e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8058ea0:	f7e7 bcf5 	b.w	804088e <__malloc_unlock>
 8058ea4:	42a3      	cmp	r3, r4
 8058ea6:	d908      	bls.n	8058eba <_free_r+0x46>
 8058ea8:	6825      	ldr	r5, [r4, #0]
 8058eaa:	1961      	adds	r1, r4, r5
 8058eac:	428b      	cmp	r3, r1
 8058eae:	bf01      	itttt	eq
 8058eb0:	6819      	ldreq	r1, [r3, #0]
 8058eb2:	685b      	ldreq	r3, [r3, #4]
 8058eb4:	1949      	addeq	r1, r1, r5
 8058eb6:	6021      	streq	r1, [r4, #0]
 8058eb8:	e7ed      	b.n	8058e96 <_free_r+0x22>
 8058eba:	461a      	mov	r2, r3
 8058ebc:	685b      	ldr	r3, [r3, #4]
 8058ebe:	b10b      	cbz	r3, 8058ec4 <_free_r+0x50>
 8058ec0:	42a3      	cmp	r3, r4
 8058ec2:	d9fa      	bls.n	8058eba <_free_r+0x46>
 8058ec4:	6811      	ldr	r1, [r2, #0]
 8058ec6:	1855      	adds	r5, r2, r1
 8058ec8:	42a5      	cmp	r5, r4
 8058eca:	d10b      	bne.n	8058ee4 <_free_r+0x70>
 8058ecc:	6824      	ldr	r4, [r4, #0]
 8058ece:	4421      	add	r1, r4
 8058ed0:	1854      	adds	r4, r2, r1
 8058ed2:	42a3      	cmp	r3, r4
 8058ed4:	6011      	str	r1, [r2, #0]
 8058ed6:	d1e0      	bne.n	8058e9a <_free_r+0x26>
 8058ed8:	681c      	ldr	r4, [r3, #0]
 8058eda:	685b      	ldr	r3, [r3, #4]
 8058edc:	6053      	str	r3, [r2, #4]
 8058ede:	4421      	add	r1, r4
 8058ee0:	6011      	str	r1, [r2, #0]
 8058ee2:	e7da      	b.n	8058e9a <_free_r+0x26>
 8058ee4:	d902      	bls.n	8058eec <_free_r+0x78>
 8058ee6:	230c      	movs	r3, #12
 8058ee8:	6003      	str	r3, [r0, #0]
 8058eea:	e7d6      	b.n	8058e9a <_free_r+0x26>
 8058eec:	6825      	ldr	r5, [r4, #0]
 8058eee:	1961      	adds	r1, r4, r5
 8058ef0:	428b      	cmp	r3, r1
 8058ef2:	bf04      	itt	eq
 8058ef4:	6819      	ldreq	r1, [r3, #0]
 8058ef6:	685b      	ldreq	r3, [r3, #4]
 8058ef8:	6063      	str	r3, [r4, #4]
 8058efa:	bf04      	itt	eq
 8058efc:	1949      	addeq	r1, r1, r5
 8058efe:	6021      	streq	r1, [r4, #0]
 8058f00:	6054      	str	r4, [r2, #4]
 8058f02:	e7ca      	b.n	8058e9a <_free_r+0x26>
 8058f04:	b003      	add	sp, #12
 8058f06:	bd30      	pop	{r4, r5, pc}
 8058f08:	2000b730 	.word	0x2000b730

08058f0c <sbrk_aligned>:
 8058f0c:	b570      	push	{r4, r5, r6, lr}
 8058f0e:	4e0e      	ldr	r6, [pc, #56]	; (8058f48 <sbrk_aligned+0x3c>)
 8058f10:	460c      	mov	r4, r1
 8058f12:	6831      	ldr	r1, [r6, #0]
 8058f14:	4605      	mov	r5, r0
 8058f16:	b911      	cbnz	r1, 8058f1e <sbrk_aligned+0x12>
 8058f18:	f7e7 fc32 	bl	8040780 <_sbrk_r>
 8058f1c:	6030      	str	r0, [r6, #0]
 8058f1e:	4621      	mov	r1, r4
 8058f20:	4628      	mov	r0, r5
 8058f22:	f7e7 fc2d 	bl	8040780 <_sbrk_r>
 8058f26:	1c43      	adds	r3, r0, #1
 8058f28:	d00a      	beq.n	8058f40 <sbrk_aligned+0x34>
 8058f2a:	1cc4      	adds	r4, r0, #3
 8058f2c:	f024 0403 	bic.w	r4, r4, #3
 8058f30:	42a0      	cmp	r0, r4
 8058f32:	d007      	beq.n	8058f44 <sbrk_aligned+0x38>
 8058f34:	1a21      	subs	r1, r4, r0
 8058f36:	4628      	mov	r0, r5
 8058f38:	f7e7 fc22 	bl	8040780 <_sbrk_r>
 8058f3c:	3001      	adds	r0, #1
 8058f3e:	d101      	bne.n	8058f44 <sbrk_aligned+0x38>
 8058f40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8058f44:	4620      	mov	r0, r4
 8058f46:	bd70      	pop	{r4, r5, r6, pc}
 8058f48:	2000b734 	.word	0x2000b734

08058f4c <_malloc_r>:
 8058f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8058f50:	1ccd      	adds	r5, r1, #3
 8058f52:	f025 0503 	bic.w	r5, r5, #3
 8058f56:	3508      	adds	r5, #8
 8058f58:	2d0c      	cmp	r5, #12
 8058f5a:	bf38      	it	cc
 8058f5c:	250c      	movcc	r5, #12
 8058f5e:	2d00      	cmp	r5, #0
 8058f60:	4607      	mov	r7, r0
 8058f62:	db01      	blt.n	8058f68 <_malloc_r+0x1c>
 8058f64:	42a9      	cmp	r1, r5
 8058f66:	d905      	bls.n	8058f74 <_malloc_r+0x28>
 8058f68:	230c      	movs	r3, #12
 8058f6a:	603b      	str	r3, [r7, #0]
 8058f6c:	2600      	movs	r6, #0
 8058f6e:	4630      	mov	r0, r6
 8058f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8058f74:	4e2e      	ldr	r6, [pc, #184]	; (8059030 <_malloc_r+0xe4>)
 8058f76:	f7e7 fc5f 	bl	8040838 <__malloc_lock>
 8058f7a:	6833      	ldr	r3, [r6, #0]
 8058f7c:	461c      	mov	r4, r3
 8058f7e:	bb34      	cbnz	r4, 8058fce <_malloc_r+0x82>
 8058f80:	4629      	mov	r1, r5
 8058f82:	4638      	mov	r0, r7
 8058f84:	f7ff ffc2 	bl	8058f0c <sbrk_aligned>
 8058f88:	1c43      	adds	r3, r0, #1
 8058f8a:	4604      	mov	r4, r0
 8058f8c:	d14d      	bne.n	805902a <_malloc_r+0xde>
 8058f8e:	6834      	ldr	r4, [r6, #0]
 8058f90:	4626      	mov	r6, r4
 8058f92:	2e00      	cmp	r6, #0
 8058f94:	d140      	bne.n	8059018 <_malloc_r+0xcc>
 8058f96:	6823      	ldr	r3, [r4, #0]
 8058f98:	4631      	mov	r1, r6
 8058f9a:	4638      	mov	r0, r7
 8058f9c:	eb04 0803 	add.w	r8, r4, r3
 8058fa0:	f7e7 fbee 	bl	8040780 <_sbrk_r>
 8058fa4:	4580      	cmp	r8, r0
 8058fa6:	d13a      	bne.n	805901e <_malloc_r+0xd2>
 8058fa8:	6821      	ldr	r1, [r4, #0]
 8058faa:	3503      	adds	r5, #3
 8058fac:	1a6d      	subs	r5, r5, r1
 8058fae:	f025 0503 	bic.w	r5, r5, #3
 8058fb2:	3508      	adds	r5, #8
 8058fb4:	2d0c      	cmp	r5, #12
 8058fb6:	bf38      	it	cc
 8058fb8:	250c      	movcc	r5, #12
 8058fba:	4629      	mov	r1, r5
 8058fbc:	4638      	mov	r0, r7
 8058fbe:	f7ff ffa5 	bl	8058f0c <sbrk_aligned>
 8058fc2:	3001      	adds	r0, #1
 8058fc4:	d02b      	beq.n	805901e <_malloc_r+0xd2>
 8058fc6:	6823      	ldr	r3, [r4, #0]
 8058fc8:	442b      	add	r3, r5
 8058fca:	6023      	str	r3, [r4, #0]
 8058fcc:	e00e      	b.n	8058fec <_malloc_r+0xa0>
 8058fce:	6822      	ldr	r2, [r4, #0]
 8058fd0:	1b52      	subs	r2, r2, r5
 8058fd2:	d41e      	bmi.n	8059012 <_malloc_r+0xc6>
 8058fd4:	2a0b      	cmp	r2, #11
 8058fd6:	d916      	bls.n	8059006 <_malloc_r+0xba>
 8058fd8:	1961      	adds	r1, r4, r5
 8058fda:	42a3      	cmp	r3, r4
 8058fdc:	6025      	str	r5, [r4, #0]
 8058fde:	bf18      	it	ne
 8058fe0:	6059      	strne	r1, [r3, #4]
 8058fe2:	6863      	ldr	r3, [r4, #4]
 8058fe4:	bf08      	it	eq
 8058fe6:	6031      	streq	r1, [r6, #0]
 8058fe8:	5162      	str	r2, [r4, r5]
 8058fea:	604b      	str	r3, [r1, #4]
 8058fec:	4638      	mov	r0, r7
 8058fee:	f104 060b 	add.w	r6, r4, #11
 8058ff2:	f7e7 fc4c 	bl	804088e <__malloc_unlock>
 8058ff6:	f026 0607 	bic.w	r6, r6, #7
 8058ffa:	1d23      	adds	r3, r4, #4
 8058ffc:	1af2      	subs	r2, r6, r3
 8058ffe:	d0b6      	beq.n	8058f6e <_malloc_r+0x22>
 8059000:	1b9b      	subs	r3, r3, r6
 8059002:	50a3      	str	r3, [r4, r2]
 8059004:	e7b3      	b.n	8058f6e <_malloc_r+0x22>
 8059006:	6862      	ldr	r2, [r4, #4]
 8059008:	42a3      	cmp	r3, r4
 805900a:	bf0c      	ite	eq
 805900c:	6032      	streq	r2, [r6, #0]
 805900e:	605a      	strne	r2, [r3, #4]
 8059010:	e7ec      	b.n	8058fec <_malloc_r+0xa0>
 8059012:	4623      	mov	r3, r4
 8059014:	6864      	ldr	r4, [r4, #4]
 8059016:	e7b2      	b.n	8058f7e <_malloc_r+0x32>
 8059018:	4634      	mov	r4, r6
 805901a:	6876      	ldr	r6, [r6, #4]
 805901c:	e7b9      	b.n	8058f92 <_malloc_r+0x46>
 805901e:	230c      	movs	r3, #12
 8059020:	603b      	str	r3, [r7, #0]
 8059022:	4638      	mov	r0, r7
 8059024:	f7e7 fc33 	bl	804088e <__malloc_unlock>
 8059028:	e7a1      	b.n	8058f6e <_malloc_r+0x22>
 805902a:	6025      	str	r5, [r4, #0]
 805902c:	e7de      	b.n	8058fec <_malloc_r+0xa0>
 805902e:	bf00      	nop
 8059030:	2000b730 	.word	0x2000b730

08059034 <iprintf>:
 8059034:	b40f      	push	{r0, r1, r2, r3}
 8059036:	4b0a      	ldr	r3, [pc, #40]	; (8059060 <iprintf+0x2c>)
 8059038:	b513      	push	{r0, r1, r4, lr}
 805903a:	681c      	ldr	r4, [r3, #0]
 805903c:	b124      	cbz	r4, 8059048 <iprintf+0x14>
 805903e:	69a3      	ldr	r3, [r4, #24]
 8059040:	b913      	cbnz	r3, 8059048 <iprintf+0x14>
 8059042:	4620      	mov	r0, r4
 8059044:	f7ff fe00 	bl	8058c48 <__sinit>
 8059048:	ab05      	add	r3, sp, #20
 805904a:	9a04      	ldr	r2, [sp, #16]
 805904c:	68a1      	ldr	r1, [r4, #8]
 805904e:	9301      	str	r3, [sp, #4]
 8059050:	4620      	mov	r0, r4
 8059052:	f000 fc35 	bl	80598c0 <_vfiprintf_r>
 8059056:	b002      	add	sp, #8
 8059058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 805905c:	b004      	add	sp, #16
 805905e:	4770      	bx	lr
 8059060:	20000034 	.word	0x20000034

08059064 <rand>:
 8059064:	4b16      	ldr	r3, [pc, #88]	; (80590c0 <rand+0x5c>)
 8059066:	b510      	push	{r4, lr}
 8059068:	681c      	ldr	r4, [r3, #0]
 805906a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 805906c:	b9b3      	cbnz	r3, 805909c <rand+0x38>
 805906e:	2018      	movs	r0, #24
 8059070:	f7ff feb0 	bl	8058dd4 <malloc>
 8059074:	63a0      	str	r0, [r4, #56]	; 0x38
 8059076:	b928      	cbnz	r0, 8059084 <rand+0x20>
 8059078:	4602      	mov	r2, r0
 805907a:	4b12      	ldr	r3, [pc, #72]	; (80590c4 <rand+0x60>)
 805907c:	4812      	ldr	r0, [pc, #72]	; (80590c8 <rand+0x64>)
 805907e:	214e      	movs	r1, #78	; 0x4e
 8059080:	f000 f984 	bl	805938c <__assert_func>
 8059084:	4a11      	ldr	r2, [pc, #68]	; (80590cc <rand+0x68>)
 8059086:	4b12      	ldr	r3, [pc, #72]	; (80590d0 <rand+0x6c>)
 8059088:	e9c0 2300 	strd	r2, r3, [r0]
 805908c:	4b11      	ldr	r3, [pc, #68]	; (80590d4 <rand+0x70>)
 805908e:	6083      	str	r3, [r0, #8]
 8059090:	230b      	movs	r3, #11
 8059092:	8183      	strh	r3, [r0, #12]
 8059094:	2201      	movs	r2, #1
 8059096:	2300      	movs	r3, #0
 8059098:	e9c0 2304 	strd	r2, r3, [r0, #16]
 805909c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 805909e:	4a0e      	ldr	r2, [pc, #56]	; (80590d8 <rand+0x74>)
 80590a0:	6920      	ldr	r0, [r4, #16]
 80590a2:	6963      	ldr	r3, [r4, #20]
 80590a4:	490d      	ldr	r1, [pc, #52]	; (80590dc <rand+0x78>)
 80590a6:	4342      	muls	r2, r0
 80590a8:	fb01 2203 	mla	r2, r1, r3, r2
 80590ac:	fba0 0101 	umull	r0, r1, r0, r1
 80590b0:	1c43      	adds	r3, r0, #1
 80590b2:	eb42 0001 	adc.w	r0, r2, r1
 80590b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80590ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80590be:	bd10      	pop	{r4, pc}
 80590c0:	20000034 	.word	0x20000034
 80590c4:	0805d9a8 	.word	0x0805d9a8
 80590c8:	0805d9bf 	.word	0x0805d9bf
 80590cc:	abcd330e 	.word	0xabcd330e
 80590d0:	e66d1234 	.word	0xe66d1234
 80590d4:	0005deec 	.word	0x0005deec
 80590d8:	5851f42d 	.word	0x5851f42d
 80590dc:	4c957f2d 	.word	0x4c957f2d

080590e0 <cleanup_glue>:
 80590e0:	b538      	push	{r3, r4, r5, lr}
 80590e2:	460c      	mov	r4, r1
 80590e4:	6809      	ldr	r1, [r1, #0]
 80590e6:	4605      	mov	r5, r0
 80590e8:	b109      	cbz	r1, 80590ee <cleanup_glue+0xe>
 80590ea:	f7ff fff9 	bl	80590e0 <cleanup_glue>
 80590ee:	4621      	mov	r1, r4
 80590f0:	4628      	mov	r0, r5
 80590f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80590f6:	f7ff bebd 	b.w	8058e74 <_free_r>
	...

080590fc <_reclaim_reent>:
 80590fc:	4b2c      	ldr	r3, [pc, #176]	; (80591b0 <_reclaim_reent+0xb4>)
 80590fe:	681b      	ldr	r3, [r3, #0]
 8059100:	4283      	cmp	r3, r0
 8059102:	b570      	push	{r4, r5, r6, lr}
 8059104:	4604      	mov	r4, r0
 8059106:	d051      	beq.n	80591ac <_reclaim_reent+0xb0>
 8059108:	6a43      	ldr	r3, [r0, #36]	; 0x24
 805910a:	b143      	cbz	r3, 805911e <_reclaim_reent+0x22>
 805910c:	68db      	ldr	r3, [r3, #12]
 805910e:	2b00      	cmp	r3, #0
 8059110:	d14a      	bne.n	80591a8 <_reclaim_reent+0xac>
 8059112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8059114:	6819      	ldr	r1, [r3, #0]
 8059116:	b111      	cbz	r1, 805911e <_reclaim_reent+0x22>
 8059118:	4620      	mov	r0, r4
 805911a:	f7ff feab 	bl	8058e74 <_free_r>
 805911e:	6961      	ldr	r1, [r4, #20]
 8059120:	b111      	cbz	r1, 8059128 <_reclaim_reent+0x2c>
 8059122:	4620      	mov	r0, r4
 8059124:	f7ff fea6 	bl	8058e74 <_free_r>
 8059128:	6a61      	ldr	r1, [r4, #36]	; 0x24
 805912a:	b111      	cbz	r1, 8059132 <_reclaim_reent+0x36>
 805912c:	4620      	mov	r0, r4
 805912e:	f7ff fea1 	bl	8058e74 <_free_r>
 8059132:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8059134:	b111      	cbz	r1, 805913c <_reclaim_reent+0x40>
 8059136:	4620      	mov	r0, r4
 8059138:	f7ff fe9c 	bl	8058e74 <_free_r>
 805913c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 805913e:	b111      	cbz	r1, 8059146 <_reclaim_reent+0x4a>
 8059140:	4620      	mov	r0, r4
 8059142:	f7ff fe97 	bl	8058e74 <_free_r>
 8059146:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8059148:	b111      	cbz	r1, 8059150 <_reclaim_reent+0x54>
 805914a:	4620      	mov	r0, r4
 805914c:	f7ff fe92 	bl	8058e74 <_free_r>
 8059150:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8059152:	b111      	cbz	r1, 805915a <_reclaim_reent+0x5e>
 8059154:	4620      	mov	r0, r4
 8059156:	f7ff fe8d 	bl	8058e74 <_free_r>
 805915a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 805915c:	b111      	cbz	r1, 8059164 <_reclaim_reent+0x68>
 805915e:	4620      	mov	r0, r4
 8059160:	f7ff fe88 	bl	8058e74 <_free_r>
 8059164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8059166:	b111      	cbz	r1, 805916e <_reclaim_reent+0x72>
 8059168:	4620      	mov	r0, r4
 805916a:	f7ff fe83 	bl	8058e74 <_free_r>
 805916e:	69a3      	ldr	r3, [r4, #24]
 8059170:	b1e3      	cbz	r3, 80591ac <_reclaim_reent+0xb0>
 8059172:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8059174:	4620      	mov	r0, r4
 8059176:	4798      	blx	r3
 8059178:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 805917a:	b1b9      	cbz	r1, 80591ac <_reclaim_reent+0xb0>
 805917c:	4620      	mov	r0, r4
 805917e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8059182:	f7ff bfad 	b.w	80590e0 <cleanup_glue>
 8059186:	5949      	ldr	r1, [r1, r5]
 8059188:	b941      	cbnz	r1, 805919c <_reclaim_reent+0xa0>
 805918a:	3504      	adds	r5, #4
 805918c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 805918e:	2d80      	cmp	r5, #128	; 0x80
 8059190:	68d9      	ldr	r1, [r3, #12]
 8059192:	d1f8      	bne.n	8059186 <_reclaim_reent+0x8a>
 8059194:	4620      	mov	r0, r4
 8059196:	f7ff fe6d 	bl	8058e74 <_free_r>
 805919a:	e7ba      	b.n	8059112 <_reclaim_reent+0x16>
 805919c:	680e      	ldr	r6, [r1, #0]
 805919e:	4620      	mov	r0, r4
 80591a0:	f7ff fe68 	bl	8058e74 <_free_r>
 80591a4:	4631      	mov	r1, r6
 80591a6:	e7ef      	b.n	8059188 <_reclaim_reent+0x8c>
 80591a8:	2500      	movs	r5, #0
 80591aa:	e7ef      	b.n	805918c <_reclaim_reent+0x90>
 80591ac:	bd70      	pop	{r4, r5, r6, pc}
 80591ae:	bf00      	nop
 80591b0:	20000034 	.word	0x20000034

080591b4 <_raise_r>:
 80591b4:	291f      	cmp	r1, #31
 80591b6:	b538      	push	{r3, r4, r5, lr}
 80591b8:	4604      	mov	r4, r0
 80591ba:	460d      	mov	r5, r1
 80591bc:	d904      	bls.n	80591c8 <_raise_r+0x14>
 80591be:	2316      	movs	r3, #22
 80591c0:	6003      	str	r3, [r0, #0]
 80591c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80591c6:	bd38      	pop	{r3, r4, r5, pc}
 80591c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80591ca:	b112      	cbz	r2, 80591d2 <_raise_r+0x1e>
 80591cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80591d0:	b94b      	cbnz	r3, 80591e6 <_raise_r+0x32>
 80591d2:	4620      	mov	r0, r4
 80591d4:	f000 f830 	bl	8059238 <_getpid_r>
 80591d8:	462a      	mov	r2, r5
 80591da:	4601      	mov	r1, r0
 80591dc:	4620      	mov	r0, r4
 80591de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80591e2:	f000 b817 	b.w	8059214 <_kill_r>
 80591e6:	2b01      	cmp	r3, #1
 80591e8:	d00a      	beq.n	8059200 <_raise_r+0x4c>
 80591ea:	1c59      	adds	r1, r3, #1
 80591ec:	d103      	bne.n	80591f6 <_raise_r+0x42>
 80591ee:	2316      	movs	r3, #22
 80591f0:	6003      	str	r3, [r0, #0]
 80591f2:	2001      	movs	r0, #1
 80591f4:	e7e7      	b.n	80591c6 <_raise_r+0x12>
 80591f6:	2400      	movs	r4, #0
 80591f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80591fc:	4628      	mov	r0, r5
 80591fe:	4798      	blx	r3
 8059200:	2000      	movs	r0, #0
 8059202:	e7e0      	b.n	80591c6 <_raise_r+0x12>

08059204 <raise>:
 8059204:	4b02      	ldr	r3, [pc, #8]	; (8059210 <raise+0xc>)
 8059206:	4601      	mov	r1, r0
 8059208:	6818      	ldr	r0, [r3, #0]
 805920a:	f7ff bfd3 	b.w	80591b4 <_raise_r>
 805920e:	bf00      	nop
 8059210:	20000034 	.word	0x20000034

08059214 <_kill_r>:
 8059214:	b538      	push	{r3, r4, r5, lr}
 8059216:	4d07      	ldr	r5, [pc, #28]	; (8059234 <_kill_r+0x20>)
 8059218:	2300      	movs	r3, #0
 805921a:	4604      	mov	r4, r0
 805921c:	4608      	mov	r0, r1
 805921e:	4611      	mov	r1, r2
 8059220:	602b      	str	r3, [r5, #0]
 8059222:	f7e8 fcd9 	bl	8041bd8 <_kill>
 8059226:	1c43      	adds	r3, r0, #1
 8059228:	d102      	bne.n	8059230 <_kill_r+0x1c>
 805922a:	682b      	ldr	r3, [r5, #0]
 805922c:	b103      	cbz	r3, 8059230 <_kill_r+0x1c>
 805922e:	6023      	str	r3, [r4, #0]
 8059230:	bd38      	pop	{r3, r4, r5, pc}
 8059232:	bf00      	nop
 8059234:	2000b738 	.word	0x2000b738

08059238 <_getpid_r>:
 8059238:	f7e8 bcc6 	b.w	8041bc8 <_getpid>

0805923c <siprintf>:
 805923c:	b40e      	push	{r1, r2, r3}
 805923e:	b500      	push	{lr}
 8059240:	b09c      	sub	sp, #112	; 0x70
 8059242:	ab1d      	add	r3, sp, #116	; 0x74
 8059244:	9002      	str	r0, [sp, #8]
 8059246:	9006      	str	r0, [sp, #24]
 8059248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 805924c:	4809      	ldr	r0, [pc, #36]	; (8059274 <siprintf+0x38>)
 805924e:	9107      	str	r1, [sp, #28]
 8059250:	9104      	str	r1, [sp, #16]
 8059252:	4909      	ldr	r1, [pc, #36]	; (8059278 <siprintf+0x3c>)
 8059254:	f853 2b04 	ldr.w	r2, [r3], #4
 8059258:	9105      	str	r1, [sp, #20]
 805925a:	6800      	ldr	r0, [r0, #0]
 805925c:	9301      	str	r3, [sp, #4]
 805925e:	a902      	add	r1, sp, #8
 8059260:	f000 fa04 	bl	805966c <_svfiprintf_r>
 8059264:	9b02      	ldr	r3, [sp, #8]
 8059266:	2200      	movs	r2, #0
 8059268:	701a      	strb	r2, [r3, #0]
 805926a:	b01c      	add	sp, #112	; 0x70
 805926c:	f85d eb04 	ldr.w	lr, [sp], #4
 8059270:	b003      	add	sp, #12
 8059272:	4770      	bx	lr
 8059274:	20000034 	.word	0x20000034
 8059278:	ffff0208 	.word	0xffff0208

0805927c <__sread>:
 805927c:	b510      	push	{r4, lr}
 805927e:	460c      	mov	r4, r1
 8059280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8059284:	f000 fde0 	bl	8059e48 <_read_r>
 8059288:	2800      	cmp	r0, #0
 805928a:	bfab      	itete	ge
 805928c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 805928e:	89a3      	ldrhlt	r3, [r4, #12]
 8059290:	181b      	addge	r3, r3, r0
 8059292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8059296:	bfac      	ite	ge
 8059298:	6563      	strge	r3, [r4, #84]	; 0x54
 805929a:	81a3      	strhlt	r3, [r4, #12]
 805929c:	bd10      	pop	{r4, pc}

0805929e <__swrite>:
 805929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80592a2:	461f      	mov	r7, r3
 80592a4:	898b      	ldrh	r3, [r1, #12]
 80592a6:	05db      	lsls	r3, r3, #23
 80592a8:	4605      	mov	r5, r0
 80592aa:	460c      	mov	r4, r1
 80592ac:	4616      	mov	r6, r2
 80592ae:	d505      	bpl.n	80592bc <__swrite+0x1e>
 80592b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80592b4:	2302      	movs	r3, #2
 80592b6:	2200      	movs	r2, #0
 80592b8:	f000 f96a 	bl	8059590 <_lseek_r>
 80592bc:	89a3      	ldrh	r3, [r4, #12]
 80592be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80592c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80592c6:	81a3      	strh	r3, [r4, #12]
 80592c8:	4632      	mov	r2, r6
 80592ca:	463b      	mov	r3, r7
 80592cc:	4628      	mov	r0, r5
 80592ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80592d2:	f000 b849 	b.w	8059368 <_write_r>

080592d6 <__sseek>:
 80592d6:	b510      	push	{r4, lr}
 80592d8:	460c      	mov	r4, r1
 80592da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80592de:	f000 f957 	bl	8059590 <_lseek_r>
 80592e2:	1c43      	adds	r3, r0, #1
 80592e4:	89a3      	ldrh	r3, [r4, #12]
 80592e6:	bf15      	itete	ne
 80592e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80592ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80592ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80592f2:	81a3      	strheq	r3, [r4, #12]
 80592f4:	bf18      	it	ne
 80592f6:	81a3      	strhne	r3, [r4, #12]
 80592f8:	bd10      	pop	{r4, pc}

080592fa <__sclose>:
 80592fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80592fe:	f000 b863 	b.w	80593c8 <_close_r>

08059302 <strncpy>:
 8059302:	b510      	push	{r4, lr}
 8059304:	3901      	subs	r1, #1
 8059306:	4603      	mov	r3, r0
 8059308:	b132      	cbz	r2, 8059318 <strncpy+0x16>
 805930a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 805930e:	f803 4b01 	strb.w	r4, [r3], #1
 8059312:	3a01      	subs	r2, #1
 8059314:	2c00      	cmp	r4, #0
 8059316:	d1f7      	bne.n	8059308 <strncpy+0x6>
 8059318:	441a      	add	r2, r3
 805931a:	2100      	movs	r1, #0
 805931c:	4293      	cmp	r3, r2
 805931e:	d100      	bne.n	8059322 <strncpy+0x20>
 8059320:	bd10      	pop	{r4, pc}
 8059322:	f803 1b01 	strb.w	r1, [r3], #1
 8059326:	e7f9      	b.n	805931c <strncpy+0x1a>

08059328 <_vsiprintf_r>:
 8059328:	b500      	push	{lr}
 805932a:	b09b      	sub	sp, #108	; 0x6c
 805932c:	9100      	str	r1, [sp, #0]
 805932e:	9104      	str	r1, [sp, #16]
 8059330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8059334:	9105      	str	r1, [sp, #20]
 8059336:	9102      	str	r1, [sp, #8]
 8059338:	4905      	ldr	r1, [pc, #20]	; (8059350 <_vsiprintf_r+0x28>)
 805933a:	9103      	str	r1, [sp, #12]
 805933c:	4669      	mov	r1, sp
 805933e:	f000 f995 	bl	805966c <_svfiprintf_r>
 8059342:	9b00      	ldr	r3, [sp, #0]
 8059344:	2200      	movs	r2, #0
 8059346:	701a      	strb	r2, [r3, #0]
 8059348:	b01b      	add	sp, #108	; 0x6c
 805934a:	f85d fb04 	ldr.w	pc, [sp], #4
 805934e:	bf00      	nop
 8059350:	ffff0208 	.word	0xffff0208

08059354 <vsiprintf>:
 8059354:	4613      	mov	r3, r2
 8059356:	460a      	mov	r2, r1
 8059358:	4601      	mov	r1, r0
 805935a:	4802      	ldr	r0, [pc, #8]	; (8059364 <vsiprintf+0x10>)
 805935c:	6800      	ldr	r0, [r0, #0]
 805935e:	f7ff bfe3 	b.w	8059328 <_vsiprintf_r>
 8059362:	bf00      	nop
 8059364:	20000034 	.word	0x20000034

08059368 <_write_r>:
 8059368:	b538      	push	{r3, r4, r5, lr}
 805936a:	4d07      	ldr	r5, [pc, #28]	; (8059388 <_write_r+0x20>)
 805936c:	4604      	mov	r4, r0
 805936e:	4608      	mov	r0, r1
 8059370:	4611      	mov	r1, r2
 8059372:	2200      	movs	r2, #0
 8059374:	602a      	str	r2, [r5, #0]
 8059376:	461a      	mov	r2, r3
 8059378:	f7e8 fc67 	bl	8041c4a <_write>
 805937c:	1c43      	adds	r3, r0, #1
 805937e:	d102      	bne.n	8059386 <_write_r+0x1e>
 8059380:	682b      	ldr	r3, [r5, #0]
 8059382:	b103      	cbz	r3, 8059386 <_write_r+0x1e>
 8059384:	6023      	str	r3, [r4, #0]
 8059386:	bd38      	pop	{r3, r4, r5, pc}
 8059388:	2000b738 	.word	0x2000b738

0805938c <__assert_func>:
 805938c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 805938e:	4614      	mov	r4, r2
 8059390:	461a      	mov	r2, r3
 8059392:	4b09      	ldr	r3, [pc, #36]	; (80593b8 <__assert_func+0x2c>)
 8059394:	681b      	ldr	r3, [r3, #0]
 8059396:	4605      	mov	r5, r0
 8059398:	68d8      	ldr	r0, [r3, #12]
 805939a:	b14c      	cbz	r4, 80593b0 <__assert_func+0x24>
 805939c:	4b07      	ldr	r3, [pc, #28]	; (80593bc <__assert_func+0x30>)
 805939e:	9100      	str	r1, [sp, #0]
 80593a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80593a4:	4906      	ldr	r1, [pc, #24]	; (80593c0 <__assert_func+0x34>)
 80593a6:	462b      	mov	r3, r5
 80593a8:	f000 f8e0 	bl	805956c <fiprintf>
 80593ac:	f7ff fbec 	bl	8058b88 <abort>
 80593b0:	4b04      	ldr	r3, [pc, #16]	; (80593c4 <__assert_func+0x38>)
 80593b2:	461c      	mov	r4, r3
 80593b4:	e7f3      	b.n	805939e <__assert_func+0x12>
 80593b6:	bf00      	nop
 80593b8:	20000034 	.word	0x20000034
 80593bc:	0805da1a 	.word	0x0805da1a
 80593c0:	0805da27 	.word	0x0805da27
 80593c4:	0805da55 	.word	0x0805da55

080593c8 <_close_r>:
 80593c8:	b538      	push	{r3, r4, r5, lr}
 80593ca:	4d06      	ldr	r5, [pc, #24]	; (80593e4 <_close_r+0x1c>)
 80593cc:	2300      	movs	r3, #0
 80593ce:	4604      	mov	r4, r0
 80593d0:	4608      	mov	r0, r1
 80593d2:	602b      	str	r3, [r5, #0]
 80593d4:	f7e8 fc55 	bl	8041c82 <_close>
 80593d8:	1c43      	adds	r3, r0, #1
 80593da:	d102      	bne.n	80593e2 <_close_r+0x1a>
 80593dc:	682b      	ldr	r3, [r5, #0]
 80593de:	b103      	cbz	r3, 80593e2 <_close_r+0x1a>
 80593e0:	6023      	str	r3, [r4, #0]
 80593e2:	bd38      	pop	{r3, r4, r5, pc}
 80593e4:	2000b738 	.word	0x2000b738

080593e8 <__sflush_r>:
 80593e8:	898a      	ldrh	r2, [r1, #12]
 80593ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80593ee:	4605      	mov	r5, r0
 80593f0:	0710      	lsls	r0, r2, #28
 80593f2:	460c      	mov	r4, r1
 80593f4:	d458      	bmi.n	80594a8 <__sflush_r+0xc0>
 80593f6:	684b      	ldr	r3, [r1, #4]
 80593f8:	2b00      	cmp	r3, #0
 80593fa:	dc05      	bgt.n	8059408 <__sflush_r+0x20>
 80593fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80593fe:	2b00      	cmp	r3, #0
 8059400:	dc02      	bgt.n	8059408 <__sflush_r+0x20>
 8059402:	2000      	movs	r0, #0
 8059404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8059408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 805940a:	2e00      	cmp	r6, #0
 805940c:	d0f9      	beq.n	8059402 <__sflush_r+0x1a>
 805940e:	2300      	movs	r3, #0
 8059410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8059414:	682f      	ldr	r7, [r5, #0]
 8059416:	602b      	str	r3, [r5, #0]
 8059418:	d032      	beq.n	8059480 <__sflush_r+0x98>
 805941a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 805941c:	89a3      	ldrh	r3, [r4, #12]
 805941e:	075a      	lsls	r2, r3, #29
 8059420:	d505      	bpl.n	805942e <__sflush_r+0x46>
 8059422:	6863      	ldr	r3, [r4, #4]
 8059424:	1ac0      	subs	r0, r0, r3
 8059426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8059428:	b10b      	cbz	r3, 805942e <__sflush_r+0x46>
 805942a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 805942c:	1ac0      	subs	r0, r0, r3
 805942e:	2300      	movs	r3, #0
 8059430:	4602      	mov	r2, r0
 8059432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8059434:	6a21      	ldr	r1, [r4, #32]
 8059436:	4628      	mov	r0, r5
 8059438:	47b0      	blx	r6
 805943a:	1c43      	adds	r3, r0, #1
 805943c:	89a3      	ldrh	r3, [r4, #12]
 805943e:	d106      	bne.n	805944e <__sflush_r+0x66>
 8059440:	6829      	ldr	r1, [r5, #0]
 8059442:	291d      	cmp	r1, #29
 8059444:	d82c      	bhi.n	80594a0 <__sflush_r+0xb8>
 8059446:	4a2a      	ldr	r2, [pc, #168]	; (80594f0 <__sflush_r+0x108>)
 8059448:	40ca      	lsrs	r2, r1
 805944a:	07d6      	lsls	r6, r2, #31
 805944c:	d528      	bpl.n	80594a0 <__sflush_r+0xb8>
 805944e:	2200      	movs	r2, #0
 8059450:	6062      	str	r2, [r4, #4]
 8059452:	04d9      	lsls	r1, r3, #19
 8059454:	6922      	ldr	r2, [r4, #16]
 8059456:	6022      	str	r2, [r4, #0]
 8059458:	d504      	bpl.n	8059464 <__sflush_r+0x7c>
 805945a:	1c42      	adds	r2, r0, #1
 805945c:	d101      	bne.n	8059462 <__sflush_r+0x7a>
 805945e:	682b      	ldr	r3, [r5, #0]
 8059460:	b903      	cbnz	r3, 8059464 <__sflush_r+0x7c>
 8059462:	6560      	str	r0, [r4, #84]	; 0x54
 8059464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8059466:	602f      	str	r7, [r5, #0]
 8059468:	2900      	cmp	r1, #0
 805946a:	d0ca      	beq.n	8059402 <__sflush_r+0x1a>
 805946c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8059470:	4299      	cmp	r1, r3
 8059472:	d002      	beq.n	805947a <__sflush_r+0x92>
 8059474:	4628      	mov	r0, r5
 8059476:	f7ff fcfd 	bl	8058e74 <_free_r>
 805947a:	2000      	movs	r0, #0
 805947c:	6360      	str	r0, [r4, #52]	; 0x34
 805947e:	e7c1      	b.n	8059404 <__sflush_r+0x1c>
 8059480:	6a21      	ldr	r1, [r4, #32]
 8059482:	2301      	movs	r3, #1
 8059484:	4628      	mov	r0, r5
 8059486:	47b0      	blx	r6
 8059488:	1c41      	adds	r1, r0, #1
 805948a:	d1c7      	bne.n	805941c <__sflush_r+0x34>
 805948c:	682b      	ldr	r3, [r5, #0]
 805948e:	2b00      	cmp	r3, #0
 8059490:	d0c4      	beq.n	805941c <__sflush_r+0x34>
 8059492:	2b1d      	cmp	r3, #29
 8059494:	d001      	beq.n	805949a <__sflush_r+0xb2>
 8059496:	2b16      	cmp	r3, #22
 8059498:	d101      	bne.n	805949e <__sflush_r+0xb6>
 805949a:	602f      	str	r7, [r5, #0]
 805949c:	e7b1      	b.n	8059402 <__sflush_r+0x1a>
 805949e:	89a3      	ldrh	r3, [r4, #12]
 80594a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80594a4:	81a3      	strh	r3, [r4, #12]
 80594a6:	e7ad      	b.n	8059404 <__sflush_r+0x1c>
 80594a8:	690f      	ldr	r7, [r1, #16]
 80594aa:	2f00      	cmp	r7, #0
 80594ac:	d0a9      	beq.n	8059402 <__sflush_r+0x1a>
 80594ae:	0793      	lsls	r3, r2, #30
 80594b0:	680e      	ldr	r6, [r1, #0]
 80594b2:	bf08      	it	eq
 80594b4:	694b      	ldreq	r3, [r1, #20]
 80594b6:	600f      	str	r7, [r1, #0]
 80594b8:	bf18      	it	ne
 80594ba:	2300      	movne	r3, #0
 80594bc:	eba6 0807 	sub.w	r8, r6, r7
 80594c0:	608b      	str	r3, [r1, #8]
 80594c2:	f1b8 0f00 	cmp.w	r8, #0
 80594c6:	dd9c      	ble.n	8059402 <__sflush_r+0x1a>
 80594c8:	6a21      	ldr	r1, [r4, #32]
 80594ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80594cc:	4643      	mov	r3, r8
 80594ce:	463a      	mov	r2, r7
 80594d0:	4628      	mov	r0, r5
 80594d2:	47b0      	blx	r6
 80594d4:	2800      	cmp	r0, #0
 80594d6:	dc06      	bgt.n	80594e6 <__sflush_r+0xfe>
 80594d8:	89a3      	ldrh	r3, [r4, #12]
 80594da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80594de:	81a3      	strh	r3, [r4, #12]
 80594e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80594e4:	e78e      	b.n	8059404 <__sflush_r+0x1c>
 80594e6:	4407      	add	r7, r0
 80594e8:	eba8 0800 	sub.w	r8, r8, r0
 80594ec:	e7e9      	b.n	80594c2 <__sflush_r+0xda>
 80594ee:	bf00      	nop
 80594f0:	20400001 	.word	0x20400001

080594f4 <_fflush_r>:
 80594f4:	b538      	push	{r3, r4, r5, lr}
 80594f6:	690b      	ldr	r3, [r1, #16]
 80594f8:	4605      	mov	r5, r0
 80594fa:	460c      	mov	r4, r1
 80594fc:	b913      	cbnz	r3, 8059504 <_fflush_r+0x10>
 80594fe:	2500      	movs	r5, #0
 8059500:	4628      	mov	r0, r5
 8059502:	bd38      	pop	{r3, r4, r5, pc}
 8059504:	b118      	cbz	r0, 805950e <_fflush_r+0x1a>
 8059506:	6983      	ldr	r3, [r0, #24]
 8059508:	b90b      	cbnz	r3, 805950e <_fflush_r+0x1a>
 805950a:	f7ff fb9d 	bl	8058c48 <__sinit>
 805950e:	4b14      	ldr	r3, [pc, #80]	; (8059560 <_fflush_r+0x6c>)
 8059510:	429c      	cmp	r4, r3
 8059512:	d11b      	bne.n	805954c <_fflush_r+0x58>
 8059514:	686c      	ldr	r4, [r5, #4]
 8059516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 805951a:	2b00      	cmp	r3, #0
 805951c:	d0ef      	beq.n	80594fe <_fflush_r+0xa>
 805951e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8059520:	07d0      	lsls	r0, r2, #31
 8059522:	d404      	bmi.n	805952e <_fflush_r+0x3a>
 8059524:	0599      	lsls	r1, r3, #22
 8059526:	d402      	bmi.n	805952e <_fflush_r+0x3a>
 8059528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805952a:	f7ff fc50 	bl	8058dce <__retarget_lock_acquire_recursive>
 805952e:	4628      	mov	r0, r5
 8059530:	4621      	mov	r1, r4
 8059532:	f7ff ff59 	bl	80593e8 <__sflush_r>
 8059536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8059538:	07da      	lsls	r2, r3, #31
 805953a:	4605      	mov	r5, r0
 805953c:	d4e0      	bmi.n	8059500 <_fflush_r+0xc>
 805953e:	89a3      	ldrh	r3, [r4, #12]
 8059540:	059b      	lsls	r3, r3, #22
 8059542:	d4dd      	bmi.n	8059500 <_fflush_r+0xc>
 8059544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8059546:	f7ff fc43 	bl	8058dd0 <__retarget_lock_release_recursive>
 805954a:	e7d9      	b.n	8059500 <_fflush_r+0xc>
 805954c:	4b05      	ldr	r3, [pc, #20]	; (8059564 <_fflush_r+0x70>)
 805954e:	429c      	cmp	r4, r3
 8059550:	d101      	bne.n	8059556 <_fflush_r+0x62>
 8059552:	68ac      	ldr	r4, [r5, #8]
 8059554:	e7df      	b.n	8059516 <_fflush_r+0x22>
 8059556:	4b04      	ldr	r3, [pc, #16]	; (8059568 <_fflush_r+0x74>)
 8059558:	429c      	cmp	r4, r3
 805955a:	bf08      	it	eq
 805955c:	68ec      	ldreq	r4, [r5, #12]
 805955e:	e7da      	b.n	8059516 <_fflush_r+0x22>
 8059560:	0805d964 	.word	0x0805d964
 8059564:	0805d984 	.word	0x0805d984
 8059568:	0805d944 	.word	0x0805d944

0805956c <fiprintf>:
 805956c:	b40e      	push	{r1, r2, r3}
 805956e:	b503      	push	{r0, r1, lr}
 8059570:	4601      	mov	r1, r0
 8059572:	ab03      	add	r3, sp, #12
 8059574:	4805      	ldr	r0, [pc, #20]	; (805958c <fiprintf+0x20>)
 8059576:	f853 2b04 	ldr.w	r2, [r3], #4
 805957a:	6800      	ldr	r0, [r0, #0]
 805957c:	9301      	str	r3, [sp, #4]
 805957e:	f000 f99f 	bl	80598c0 <_vfiprintf_r>
 8059582:	b002      	add	sp, #8
 8059584:	f85d eb04 	ldr.w	lr, [sp], #4
 8059588:	b003      	add	sp, #12
 805958a:	4770      	bx	lr
 805958c:	20000034 	.word	0x20000034

08059590 <_lseek_r>:
 8059590:	b538      	push	{r3, r4, r5, lr}
 8059592:	4d07      	ldr	r5, [pc, #28]	; (80595b0 <_lseek_r+0x20>)
 8059594:	4604      	mov	r4, r0
 8059596:	4608      	mov	r0, r1
 8059598:	4611      	mov	r1, r2
 805959a:	2200      	movs	r2, #0
 805959c:	602a      	str	r2, [r5, #0]
 805959e:	461a      	mov	r2, r3
 80595a0:	f7e8 fb96 	bl	8041cd0 <_lseek>
 80595a4:	1c43      	adds	r3, r0, #1
 80595a6:	d102      	bne.n	80595ae <_lseek_r+0x1e>
 80595a8:	682b      	ldr	r3, [r5, #0]
 80595aa:	b103      	cbz	r3, 80595ae <_lseek_r+0x1e>
 80595ac:	6023      	str	r3, [r4, #0]
 80595ae:	bd38      	pop	{r3, r4, r5, pc}
 80595b0:	2000b738 	.word	0x2000b738

080595b4 <__ssputs_r>:
 80595b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80595b8:	688e      	ldr	r6, [r1, #8]
 80595ba:	429e      	cmp	r6, r3
 80595bc:	4682      	mov	sl, r0
 80595be:	460c      	mov	r4, r1
 80595c0:	4690      	mov	r8, r2
 80595c2:	461f      	mov	r7, r3
 80595c4:	d838      	bhi.n	8059638 <__ssputs_r+0x84>
 80595c6:	898a      	ldrh	r2, [r1, #12]
 80595c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80595cc:	d032      	beq.n	8059634 <__ssputs_r+0x80>
 80595ce:	6825      	ldr	r5, [r4, #0]
 80595d0:	6909      	ldr	r1, [r1, #16]
 80595d2:	eba5 0901 	sub.w	r9, r5, r1
 80595d6:	6965      	ldr	r5, [r4, #20]
 80595d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80595dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80595e0:	3301      	adds	r3, #1
 80595e2:	444b      	add	r3, r9
 80595e4:	106d      	asrs	r5, r5, #1
 80595e6:	429d      	cmp	r5, r3
 80595e8:	bf38      	it	cc
 80595ea:	461d      	movcc	r5, r3
 80595ec:	0553      	lsls	r3, r2, #21
 80595ee:	d531      	bpl.n	8059654 <__ssputs_r+0xa0>
 80595f0:	4629      	mov	r1, r5
 80595f2:	f7ff fcab 	bl	8058f4c <_malloc_r>
 80595f6:	4606      	mov	r6, r0
 80595f8:	b950      	cbnz	r0, 8059610 <__ssputs_r+0x5c>
 80595fa:	230c      	movs	r3, #12
 80595fc:	f8ca 3000 	str.w	r3, [sl]
 8059600:	89a3      	ldrh	r3, [r4, #12]
 8059602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8059606:	81a3      	strh	r3, [r4, #12]
 8059608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 805960c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8059610:	6921      	ldr	r1, [r4, #16]
 8059612:	464a      	mov	r2, r9
 8059614:	f7ff fbfe 	bl	8058e14 <memcpy>
 8059618:	89a3      	ldrh	r3, [r4, #12]
 805961a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 805961e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8059622:	81a3      	strh	r3, [r4, #12]
 8059624:	6126      	str	r6, [r4, #16]
 8059626:	6165      	str	r5, [r4, #20]
 8059628:	444e      	add	r6, r9
 805962a:	eba5 0509 	sub.w	r5, r5, r9
 805962e:	6026      	str	r6, [r4, #0]
 8059630:	60a5      	str	r5, [r4, #8]
 8059632:	463e      	mov	r6, r7
 8059634:	42be      	cmp	r6, r7
 8059636:	d900      	bls.n	805963a <__ssputs_r+0x86>
 8059638:	463e      	mov	r6, r7
 805963a:	6820      	ldr	r0, [r4, #0]
 805963c:	4632      	mov	r2, r6
 805963e:	4641      	mov	r1, r8
 8059640:	f7ff fbf6 	bl	8058e30 <memmove>
 8059644:	68a3      	ldr	r3, [r4, #8]
 8059646:	1b9b      	subs	r3, r3, r6
 8059648:	60a3      	str	r3, [r4, #8]
 805964a:	6823      	ldr	r3, [r4, #0]
 805964c:	4433      	add	r3, r6
 805964e:	6023      	str	r3, [r4, #0]
 8059650:	2000      	movs	r0, #0
 8059652:	e7db      	b.n	805960c <__ssputs_r+0x58>
 8059654:	462a      	mov	r2, r5
 8059656:	f000 fd2f 	bl	805a0b8 <_realloc_r>
 805965a:	4606      	mov	r6, r0
 805965c:	2800      	cmp	r0, #0
 805965e:	d1e1      	bne.n	8059624 <__ssputs_r+0x70>
 8059660:	6921      	ldr	r1, [r4, #16]
 8059662:	4650      	mov	r0, sl
 8059664:	f7ff fc06 	bl	8058e74 <_free_r>
 8059668:	e7c7      	b.n	80595fa <__ssputs_r+0x46>
	...

0805966c <_svfiprintf_r>:
 805966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8059670:	4698      	mov	r8, r3
 8059672:	898b      	ldrh	r3, [r1, #12]
 8059674:	061b      	lsls	r3, r3, #24
 8059676:	b09d      	sub	sp, #116	; 0x74
 8059678:	4607      	mov	r7, r0
 805967a:	460d      	mov	r5, r1
 805967c:	4614      	mov	r4, r2
 805967e:	d50e      	bpl.n	805969e <_svfiprintf_r+0x32>
 8059680:	690b      	ldr	r3, [r1, #16]
 8059682:	b963      	cbnz	r3, 805969e <_svfiprintf_r+0x32>
 8059684:	2140      	movs	r1, #64	; 0x40
 8059686:	f7ff fc61 	bl	8058f4c <_malloc_r>
 805968a:	6028      	str	r0, [r5, #0]
 805968c:	6128      	str	r0, [r5, #16]
 805968e:	b920      	cbnz	r0, 805969a <_svfiprintf_r+0x2e>
 8059690:	230c      	movs	r3, #12
 8059692:	603b      	str	r3, [r7, #0]
 8059694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8059698:	e0d1      	b.n	805983e <_svfiprintf_r+0x1d2>
 805969a:	2340      	movs	r3, #64	; 0x40
 805969c:	616b      	str	r3, [r5, #20]
 805969e:	2300      	movs	r3, #0
 80596a0:	9309      	str	r3, [sp, #36]	; 0x24
 80596a2:	2320      	movs	r3, #32
 80596a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80596a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80596ac:	2330      	movs	r3, #48	; 0x30
 80596ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8059858 <_svfiprintf_r+0x1ec>
 80596b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80596b6:	f04f 0901 	mov.w	r9, #1
 80596ba:	4623      	mov	r3, r4
 80596bc:	469a      	mov	sl, r3
 80596be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80596c2:	b10a      	cbz	r2, 80596c8 <_svfiprintf_r+0x5c>
 80596c4:	2a25      	cmp	r2, #37	; 0x25
 80596c6:	d1f9      	bne.n	80596bc <_svfiprintf_r+0x50>
 80596c8:	ebba 0b04 	subs.w	fp, sl, r4
 80596cc:	d00b      	beq.n	80596e6 <_svfiprintf_r+0x7a>
 80596ce:	465b      	mov	r3, fp
 80596d0:	4622      	mov	r2, r4
 80596d2:	4629      	mov	r1, r5
 80596d4:	4638      	mov	r0, r7
 80596d6:	f7ff ff6d 	bl	80595b4 <__ssputs_r>
 80596da:	3001      	adds	r0, #1
 80596dc:	f000 80aa 	beq.w	8059834 <_svfiprintf_r+0x1c8>
 80596e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80596e2:	445a      	add	r2, fp
 80596e4:	9209      	str	r2, [sp, #36]	; 0x24
 80596e6:	f89a 3000 	ldrb.w	r3, [sl]
 80596ea:	2b00      	cmp	r3, #0
 80596ec:	f000 80a2 	beq.w	8059834 <_svfiprintf_r+0x1c8>
 80596f0:	2300      	movs	r3, #0
 80596f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80596f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80596fa:	f10a 0a01 	add.w	sl, sl, #1
 80596fe:	9304      	str	r3, [sp, #16]
 8059700:	9307      	str	r3, [sp, #28]
 8059702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8059706:	931a      	str	r3, [sp, #104]	; 0x68
 8059708:	4654      	mov	r4, sl
 805970a:	2205      	movs	r2, #5
 805970c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8059710:	4851      	ldr	r0, [pc, #324]	; (8059858 <_svfiprintf_r+0x1ec>)
 8059712:	f7e6 fd85 	bl	8040220 <memchr>
 8059716:	9a04      	ldr	r2, [sp, #16]
 8059718:	b9d8      	cbnz	r0, 8059752 <_svfiprintf_r+0xe6>
 805971a:	06d0      	lsls	r0, r2, #27
 805971c:	bf44      	itt	mi
 805971e:	2320      	movmi	r3, #32
 8059720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8059724:	0711      	lsls	r1, r2, #28
 8059726:	bf44      	itt	mi
 8059728:	232b      	movmi	r3, #43	; 0x2b
 805972a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805972e:	f89a 3000 	ldrb.w	r3, [sl]
 8059732:	2b2a      	cmp	r3, #42	; 0x2a
 8059734:	d015      	beq.n	8059762 <_svfiprintf_r+0xf6>
 8059736:	9a07      	ldr	r2, [sp, #28]
 8059738:	4654      	mov	r4, sl
 805973a:	2000      	movs	r0, #0
 805973c:	f04f 0c0a 	mov.w	ip, #10
 8059740:	4621      	mov	r1, r4
 8059742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8059746:	3b30      	subs	r3, #48	; 0x30
 8059748:	2b09      	cmp	r3, #9
 805974a:	d94e      	bls.n	80597ea <_svfiprintf_r+0x17e>
 805974c:	b1b0      	cbz	r0, 805977c <_svfiprintf_r+0x110>
 805974e:	9207      	str	r2, [sp, #28]
 8059750:	e014      	b.n	805977c <_svfiprintf_r+0x110>
 8059752:	eba0 0308 	sub.w	r3, r0, r8
 8059756:	fa09 f303 	lsl.w	r3, r9, r3
 805975a:	4313      	orrs	r3, r2
 805975c:	9304      	str	r3, [sp, #16]
 805975e:	46a2      	mov	sl, r4
 8059760:	e7d2      	b.n	8059708 <_svfiprintf_r+0x9c>
 8059762:	9b03      	ldr	r3, [sp, #12]
 8059764:	1d19      	adds	r1, r3, #4
 8059766:	681b      	ldr	r3, [r3, #0]
 8059768:	9103      	str	r1, [sp, #12]
 805976a:	2b00      	cmp	r3, #0
 805976c:	bfbb      	ittet	lt
 805976e:	425b      	neglt	r3, r3
 8059770:	f042 0202 	orrlt.w	r2, r2, #2
 8059774:	9307      	strge	r3, [sp, #28]
 8059776:	9307      	strlt	r3, [sp, #28]
 8059778:	bfb8      	it	lt
 805977a:	9204      	strlt	r2, [sp, #16]
 805977c:	7823      	ldrb	r3, [r4, #0]
 805977e:	2b2e      	cmp	r3, #46	; 0x2e
 8059780:	d10c      	bne.n	805979c <_svfiprintf_r+0x130>
 8059782:	7863      	ldrb	r3, [r4, #1]
 8059784:	2b2a      	cmp	r3, #42	; 0x2a
 8059786:	d135      	bne.n	80597f4 <_svfiprintf_r+0x188>
 8059788:	9b03      	ldr	r3, [sp, #12]
 805978a:	1d1a      	adds	r2, r3, #4
 805978c:	681b      	ldr	r3, [r3, #0]
 805978e:	9203      	str	r2, [sp, #12]
 8059790:	2b00      	cmp	r3, #0
 8059792:	bfb8      	it	lt
 8059794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8059798:	3402      	adds	r4, #2
 805979a:	9305      	str	r3, [sp, #20]
 805979c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8059868 <_svfiprintf_r+0x1fc>
 80597a0:	7821      	ldrb	r1, [r4, #0]
 80597a2:	2203      	movs	r2, #3
 80597a4:	4650      	mov	r0, sl
 80597a6:	f7e6 fd3b 	bl	8040220 <memchr>
 80597aa:	b140      	cbz	r0, 80597be <_svfiprintf_r+0x152>
 80597ac:	2340      	movs	r3, #64	; 0x40
 80597ae:	eba0 000a 	sub.w	r0, r0, sl
 80597b2:	fa03 f000 	lsl.w	r0, r3, r0
 80597b6:	9b04      	ldr	r3, [sp, #16]
 80597b8:	4303      	orrs	r3, r0
 80597ba:	3401      	adds	r4, #1
 80597bc:	9304      	str	r3, [sp, #16]
 80597be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80597c2:	4826      	ldr	r0, [pc, #152]	; (805985c <_svfiprintf_r+0x1f0>)
 80597c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80597c8:	2206      	movs	r2, #6
 80597ca:	f7e6 fd29 	bl	8040220 <memchr>
 80597ce:	2800      	cmp	r0, #0
 80597d0:	d038      	beq.n	8059844 <_svfiprintf_r+0x1d8>
 80597d2:	4b23      	ldr	r3, [pc, #140]	; (8059860 <_svfiprintf_r+0x1f4>)
 80597d4:	bb1b      	cbnz	r3, 805981e <_svfiprintf_r+0x1b2>
 80597d6:	9b03      	ldr	r3, [sp, #12]
 80597d8:	3307      	adds	r3, #7
 80597da:	f023 0307 	bic.w	r3, r3, #7
 80597de:	3308      	adds	r3, #8
 80597e0:	9303      	str	r3, [sp, #12]
 80597e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80597e4:	4433      	add	r3, r6
 80597e6:	9309      	str	r3, [sp, #36]	; 0x24
 80597e8:	e767      	b.n	80596ba <_svfiprintf_r+0x4e>
 80597ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80597ee:	460c      	mov	r4, r1
 80597f0:	2001      	movs	r0, #1
 80597f2:	e7a5      	b.n	8059740 <_svfiprintf_r+0xd4>
 80597f4:	2300      	movs	r3, #0
 80597f6:	3401      	adds	r4, #1
 80597f8:	9305      	str	r3, [sp, #20]
 80597fa:	4619      	mov	r1, r3
 80597fc:	f04f 0c0a 	mov.w	ip, #10
 8059800:	4620      	mov	r0, r4
 8059802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8059806:	3a30      	subs	r2, #48	; 0x30
 8059808:	2a09      	cmp	r2, #9
 805980a:	d903      	bls.n	8059814 <_svfiprintf_r+0x1a8>
 805980c:	2b00      	cmp	r3, #0
 805980e:	d0c5      	beq.n	805979c <_svfiprintf_r+0x130>
 8059810:	9105      	str	r1, [sp, #20]
 8059812:	e7c3      	b.n	805979c <_svfiprintf_r+0x130>
 8059814:	fb0c 2101 	mla	r1, ip, r1, r2
 8059818:	4604      	mov	r4, r0
 805981a:	2301      	movs	r3, #1
 805981c:	e7f0      	b.n	8059800 <_svfiprintf_r+0x194>
 805981e:	ab03      	add	r3, sp, #12
 8059820:	9300      	str	r3, [sp, #0]
 8059822:	462a      	mov	r2, r5
 8059824:	4b0f      	ldr	r3, [pc, #60]	; (8059864 <_svfiprintf_r+0x1f8>)
 8059826:	a904      	add	r1, sp, #16
 8059828:	4638      	mov	r0, r7
 805982a:	f3af 8000 	nop.w
 805982e:	1c42      	adds	r2, r0, #1
 8059830:	4606      	mov	r6, r0
 8059832:	d1d6      	bne.n	80597e2 <_svfiprintf_r+0x176>
 8059834:	89ab      	ldrh	r3, [r5, #12]
 8059836:	065b      	lsls	r3, r3, #25
 8059838:	f53f af2c 	bmi.w	8059694 <_svfiprintf_r+0x28>
 805983c:	9809      	ldr	r0, [sp, #36]	; 0x24
 805983e:	b01d      	add	sp, #116	; 0x74
 8059840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8059844:	ab03      	add	r3, sp, #12
 8059846:	9300      	str	r3, [sp, #0]
 8059848:	462a      	mov	r2, r5
 805984a:	4b06      	ldr	r3, [pc, #24]	; (8059864 <_svfiprintf_r+0x1f8>)
 805984c:	a904      	add	r1, sp, #16
 805984e:	4638      	mov	r0, r7
 8059850:	f000 f9d4 	bl	8059bfc <_printf_i>
 8059854:	e7eb      	b.n	805982e <_svfiprintf_r+0x1c2>
 8059856:	bf00      	nop
 8059858:	0805da56 	.word	0x0805da56
 805985c:	0805da60 	.word	0x0805da60
 8059860:	00000000 	.word	0x00000000
 8059864:	080595b5 	.word	0x080595b5
 8059868:	0805da5c 	.word	0x0805da5c

0805986c <__sfputc_r>:
 805986c:	6893      	ldr	r3, [r2, #8]
 805986e:	3b01      	subs	r3, #1
 8059870:	2b00      	cmp	r3, #0
 8059872:	b410      	push	{r4}
 8059874:	6093      	str	r3, [r2, #8]
 8059876:	da08      	bge.n	805988a <__sfputc_r+0x1e>
 8059878:	6994      	ldr	r4, [r2, #24]
 805987a:	42a3      	cmp	r3, r4
 805987c:	db01      	blt.n	8059882 <__sfputc_r+0x16>
 805987e:	290a      	cmp	r1, #10
 8059880:	d103      	bne.n	805988a <__sfputc_r+0x1e>
 8059882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8059886:	f000 baf1 	b.w	8059e6c <__swbuf_r>
 805988a:	6813      	ldr	r3, [r2, #0]
 805988c:	1c58      	adds	r0, r3, #1
 805988e:	6010      	str	r0, [r2, #0]
 8059890:	7019      	strb	r1, [r3, #0]
 8059892:	4608      	mov	r0, r1
 8059894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8059898:	4770      	bx	lr

0805989a <__sfputs_r>:
 805989a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805989c:	4606      	mov	r6, r0
 805989e:	460f      	mov	r7, r1
 80598a0:	4614      	mov	r4, r2
 80598a2:	18d5      	adds	r5, r2, r3
 80598a4:	42ac      	cmp	r4, r5
 80598a6:	d101      	bne.n	80598ac <__sfputs_r+0x12>
 80598a8:	2000      	movs	r0, #0
 80598aa:	e007      	b.n	80598bc <__sfputs_r+0x22>
 80598ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80598b0:	463a      	mov	r2, r7
 80598b2:	4630      	mov	r0, r6
 80598b4:	f7ff ffda 	bl	805986c <__sfputc_r>
 80598b8:	1c43      	adds	r3, r0, #1
 80598ba:	d1f3      	bne.n	80598a4 <__sfputs_r+0xa>
 80598bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080598c0 <_vfiprintf_r>:
 80598c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80598c4:	460d      	mov	r5, r1
 80598c6:	b09d      	sub	sp, #116	; 0x74
 80598c8:	4614      	mov	r4, r2
 80598ca:	4698      	mov	r8, r3
 80598cc:	4606      	mov	r6, r0
 80598ce:	b118      	cbz	r0, 80598d8 <_vfiprintf_r+0x18>
 80598d0:	6983      	ldr	r3, [r0, #24]
 80598d2:	b90b      	cbnz	r3, 80598d8 <_vfiprintf_r+0x18>
 80598d4:	f7ff f9b8 	bl	8058c48 <__sinit>
 80598d8:	4b89      	ldr	r3, [pc, #548]	; (8059b00 <_vfiprintf_r+0x240>)
 80598da:	429d      	cmp	r5, r3
 80598dc:	d11b      	bne.n	8059916 <_vfiprintf_r+0x56>
 80598de:	6875      	ldr	r5, [r6, #4]
 80598e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80598e2:	07d9      	lsls	r1, r3, #31
 80598e4:	d405      	bmi.n	80598f2 <_vfiprintf_r+0x32>
 80598e6:	89ab      	ldrh	r3, [r5, #12]
 80598e8:	059a      	lsls	r2, r3, #22
 80598ea:	d402      	bmi.n	80598f2 <_vfiprintf_r+0x32>
 80598ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80598ee:	f7ff fa6e 	bl	8058dce <__retarget_lock_acquire_recursive>
 80598f2:	89ab      	ldrh	r3, [r5, #12]
 80598f4:	071b      	lsls	r3, r3, #28
 80598f6:	d501      	bpl.n	80598fc <_vfiprintf_r+0x3c>
 80598f8:	692b      	ldr	r3, [r5, #16]
 80598fa:	b9eb      	cbnz	r3, 8059938 <_vfiprintf_r+0x78>
 80598fc:	4629      	mov	r1, r5
 80598fe:	4630      	mov	r0, r6
 8059900:	f000 fb06 	bl	8059f10 <__swsetup_r>
 8059904:	b1c0      	cbz	r0, 8059938 <_vfiprintf_r+0x78>
 8059906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8059908:	07dc      	lsls	r4, r3, #31
 805990a:	d50e      	bpl.n	805992a <_vfiprintf_r+0x6a>
 805990c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8059910:	b01d      	add	sp, #116	; 0x74
 8059912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8059916:	4b7b      	ldr	r3, [pc, #492]	; (8059b04 <_vfiprintf_r+0x244>)
 8059918:	429d      	cmp	r5, r3
 805991a:	d101      	bne.n	8059920 <_vfiprintf_r+0x60>
 805991c:	68b5      	ldr	r5, [r6, #8]
 805991e:	e7df      	b.n	80598e0 <_vfiprintf_r+0x20>
 8059920:	4b79      	ldr	r3, [pc, #484]	; (8059b08 <_vfiprintf_r+0x248>)
 8059922:	429d      	cmp	r5, r3
 8059924:	bf08      	it	eq
 8059926:	68f5      	ldreq	r5, [r6, #12]
 8059928:	e7da      	b.n	80598e0 <_vfiprintf_r+0x20>
 805992a:	89ab      	ldrh	r3, [r5, #12]
 805992c:	0598      	lsls	r0, r3, #22
 805992e:	d4ed      	bmi.n	805990c <_vfiprintf_r+0x4c>
 8059930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8059932:	f7ff fa4d 	bl	8058dd0 <__retarget_lock_release_recursive>
 8059936:	e7e9      	b.n	805990c <_vfiprintf_r+0x4c>
 8059938:	2300      	movs	r3, #0
 805993a:	9309      	str	r3, [sp, #36]	; 0x24
 805993c:	2320      	movs	r3, #32
 805993e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8059942:	f8cd 800c 	str.w	r8, [sp, #12]
 8059946:	2330      	movs	r3, #48	; 0x30
 8059948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8059b0c <_vfiprintf_r+0x24c>
 805994c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8059950:	f04f 0901 	mov.w	r9, #1
 8059954:	4623      	mov	r3, r4
 8059956:	469a      	mov	sl, r3
 8059958:	f813 2b01 	ldrb.w	r2, [r3], #1
 805995c:	b10a      	cbz	r2, 8059962 <_vfiprintf_r+0xa2>
 805995e:	2a25      	cmp	r2, #37	; 0x25
 8059960:	d1f9      	bne.n	8059956 <_vfiprintf_r+0x96>
 8059962:	ebba 0b04 	subs.w	fp, sl, r4
 8059966:	d00b      	beq.n	8059980 <_vfiprintf_r+0xc0>
 8059968:	465b      	mov	r3, fp
 805996a:	4622      	mov	r2, r4
 805996c:	4629      	mov	r1, r5
 805996e:	4630      	mov	r0, r6
 8059970:	f7ff ff93 	bl	805989a <__sfputs_r>
 8059974:	3001      	adds	r0, #1
 8059976:	f000 80aa 	beq.w	8059ace <_vfiprintf_r+0x20e>
 805997a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 805997c:	445a      	add	r2, fp
 805997e:	9209      	str	r2, [sp, #36]	; 0x24
 8059980:	f89a 3000 	ldrb.w	r3, [sl]
 8059984:	2b00      	cmp	r3, #0
 8059986:	f000 80a2 	beq.w	8059ace <_vfiprintf_r+0x20e>
 805998a:	2300      	movs	r3, #0
 805998c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8059990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8059994:	f10a 0a01 	add.w	sl, sl, #1
 8059998:	9304      	str	r3, [sp, #16]
 805999a:	9307      	str	r3, [sp, #28]
 805999c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80599a0:	931a      	str	r3, [sp, #104]	; 0x68
 80599a2:	4654      	mov	r4, sl
 80599a4:	2205      	movs	r2, #5
 80599a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80599aa:	4858      	ldr	r0, [pc, #352]	; (8059b0c <_vfiprintf_r+0x24c>)
 80599ac:	f7e6 fc38 	bl	8040220 <memchr>
 80599b0:	9a04      	ldr	r2, [sp, #16]
 80599b2:	b9d8      	cbnz	r0, 80599ec <_vfiprintf_r+0x12c>
 80599b4:	06d1      	lsls	r1, r2, #27
 80599b6:	bf44      	itt	mi
 80599b8:	2320      	movmi	r3, #32
 80599ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80599be:	0713      	lsls	r3, r2, #28
 80599c0:	bf44      	itt	mi
 80599c2:	232b      	movmi	r3, #43	; 0x2b
 80599c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80599c8:	f89a 3000 	ldrb.w	r3, [sl]
 80599cc:	2b2a      	cmp	r3, #42	; 0x2a
 80599ce:	d015      	beq.n	80599fc <_vfiprintf_r+0x13c>
 80599d0:	9a07      	ldr	r2, [sp, #28]
 80599d2:	4654      	mov	r4, sl
 80599d4:	2000      	movs	r0, #0
 80599d6:	f04f 0c0a 	mov.w	ip, #10
 80599da:	4621      	mov	r1, r4
 80599dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80599e0:	3b30      	subs	r3, #48	; 0x30
 80599e2:	2b09      	cmp	r3, #9
 80599e4:	d94e      	bls.n	8059a84 <_vfiprintf_r+0x1c4>
 80599e6:	b1b0      	cbz	r0, 8059a16 <_vfiprintf_r+0x156>
 80599e8:	9207      	str	r2, [sp, #28]
 80599ea:	e014      	b.n	8059a16 <_vfiprintf_r+0x156>
 80599ec:	eba0 0308 	sub.w	r3, r0, r8
 80599f0:	fa09 f303 	lsl.w	r3, r9, r3
 80599f4:	4313      	orrs	r3, r2
 80599f6:	9304      	str	r3, [sp, #16]
 80599f8:	46a2      	mov	sl, r4
 80599fa:	e7d2      	b.n	80599a2 <_vfiprintf_r+0xe2>
 80599fc:	9b03      	ldr	r3, [sp, #12]
 80599fe:	1d19      	adds	r1, r3, #4
 8059a00:	681b      	ldr	r3, [r3, #0]
 8059a02:	9103      	str	r1, [sp, #12]
 8059a04:	2b00      	cmp	r3, #0
 8059a06:	bfbb      	ittet	lt
 8059a08:	425b      	neglt	r3, r3
 8059a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8059a0e:	9307      	strge	r3, [sp, #28]
 8059a10:	9307      	strlt	r3, [sp, #28]
 8059a12:	bfb8      	it	lt
 8059a14:	9204      	strlt	r2, [sp, #16]
 8059a16:	7823      	ldrb	r3, [r4, #0]
 8059a18:	2b2e      	cmp	r3, #46	; 0x2e
 8059a1a:	d10c      	bne.n	8059a36 <_vfiprintf_r+0x176>
 8059a1c:	7863      	ldrb	r3, [r4, #1]
 8059a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8059a20:	d135      	bne.n	8059a8e <_vfiprintf_r+0x1ce>
 8059a22:	9b03      	ldr	r3, [sp, #12]
 8059a24:	1d1a      	adds	r2, r3, #4
 8059a26:	681b      	ldr	r3, [r3, #0]
 8059a28:	9203      	str	r2, [sp, #12]
 8059a2a:	2b00      	cmp	r3, #0
 8059a2c:	bfb8      	it	lt
 8059a2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8059a32:	3402      	adds	r4, #2
 8059a34:	9305      	str	r3, [sp, #20]
 8059a36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8059b1c <_vfiprintf_r+0x25c>
 8059a3a:	7821      	ldrb	r1, [r4, #0]
 8059a3c:	2203      	movs	r2, #3
 8059a3e:	4650      	mov	r0, sl
 8059a40:	f7e6 fbee 	bl	8040220 <memchr>
 8059a44:	b140      	cbz	r0, 8059a58 <_vfiprintf_r+0x198>
 8059a46:	2340      	movs	r3, #64	; 0x40
 8059a48:	eba0 000a 	sub.w	r0, r0, sl
 8059a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8059a50:	9b04      	ldr	r3, [sp, #16]
 8059a52:	4303      	orrs	r3, r0
 8059a54:	3401      	adds	r4, #1
 8059a56:	9304      	str	r3, [sp, #16]
 8059a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8059a5c:	482c      	ldr	r0, [pc, #176]	; (8059b10 <_vfiprintf_r+0x250>)
 8059a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8059a62:	2206      	movs	r2, #6
 8059a64:	f7e6 fbdc 	bl	8040220 <memchr>
 8059a68:	2800      	cmp	r0, #0
 8059a6a:	d03f      	beq.n	8059aec <_vfiprintf_r+0x22c>
 8059a6c:	4b29      	ldr	r3, [pc, #164]	; (8059b14 <_vfiprintf_r+0x254>)
 8059a6e:	bb1b      	cbnz	r3, 8059ab8 <_vfiprintf_r+0x1f8>
 8059a70:	9b03      	ldr	r3, [sp, #12]
 8059a72:	3307      	adds	r3, #7
 8059a74:	f023 0307 	bic.w	r3, r3, #7
 8059a78:	3308      	adds	r3, #8
 8059a7a:	9303      	str	r3, [sp, #12]
 8059a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8059a7e:	443b      	add	r3, r7
 8059a80:	9309      	str	r3, [sp, #36]	; 0x24
 8059a82:	e767      	b.n	8059954 <_vfiprintf_r+0x94>
 8059a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8059a88:	460c      	mov	r4, r1
 8059a8a:	2001      	movs	r0, #1
 8059a8c:	e7a5      	b.n	80599da <_vfiprintf_r+0x11a>
 8059a8e:	2300      	movs	r3, #0
 8059a90:	3401      	adds	r4, #1
 8059a92:	9305      	str	r3, [sp, #20]
 8059a94:	4619      	mov	r1, r3
 8059a96:	f04f 0c0a 	mov.w	ip, #10
 8059a9a:	4620      	mov	r0, r4
 8059a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8059aa0:	3a30      	subs	r2, #48	; 0x30
 8059aa2:	2a09      	cmp	r2, #9
 8059aa4:	d903      	bls.n	8059aae <_vfiprintf_r+0x1ee>
 8059aa6:	2b00      	cmp	r3, #0
 8059aa8:	d0c5      	beq.n	8059a36 <_vfiprintf_r+0x176>
 8059aaa:	9105      	str	r1, [sp, #20]
 8059aac:	e7c3      	b.n	8059a36 <_vfiprintf_r+0x176>
 8059aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8059ab2:	4604      	mov	r4, r0
 8059ab4:	2301      	movs	r3, #1
 8059ab6:	e7f0      	b.n	8059a9a <_vfiprintf_r+0x1da>
 8059ab8:	ab03      	add	r3, sp, #12
 8059aba:	9300      	str	r3, [sp, #0]
 8059abc:	462a      	mov	r2, r5
 8059abe:	4b16      	ldr	r3, [pc, #88]	; (8059b18 <_vfiprintf_r+0x258>)
 8059ac0:	a904      	add	r1, sp, #16
 8059ac2:	4630      	mov	r0, r6
 8059ac4:	f3af 8000 	nop.w
 8059ac8:	4607      	mov	r7, r0
 8059aca:	1c78      	adds	r0, r7, #1
 8059acc:	d1d6      	bne.n	8059a7c <_vfiprintf_r+0x1bc>
 8059ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8059ad0:	07d9      	lsls	r1, r3, #31
 8059ad2:	d405      	bmi.n	8059ae0 <_vfiprintf_r+0x220>
 8059ad4:	89ab      	ldrh	r3, [r5, #12]
 8059ad6:	059a      	lsls	r2, r3, #22
 8059ad8:	d402      	bmi.n	8059ae0 <_vfiprintf_r+0x220>
 8059ada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8059adc:	f7ff f978 	bl	8058dd0 <__retarget_lock_release_recursive>
 8059ae0:	89ab      	ldrh	r3, [r5, #12]
 8059ae2:	065b      	lsls	r3, r3, #25
 8059ae4:	f53f af12 	bmi.w	805990c <_vfiprintf_r+0x4c>
 8059ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8059aea:	e711      	b.n	8059910 <_vfiprintf_r+0x50>
 8059aec:	ab03      	add	r3, sp, #12
 8059aee:	9300      	str	r3, [sp, #0]
 8059af0:	462a      	mov	r2, r5
 8059af2:	4b09      	ldr	r3, [pc, #36]	; (8059b18 <_vfiprintf_r+0x258>)
 8059af4:	a904      	add	r1, sp, #16
 8059af6:	4630      	mov	r0, r6
 8059af8:	f000 f880 	bl	8059bfc <_printf_i>
 8059afc:	e7e4      	b.n	8059ac8 <_vfiprintf_r+0x208>
 8059afe:	bf00      	nop
 8059b00:	0805d964 	.word	0x0805d964
 8059b04:	0805d984 	.word	0x0805d984
 8059b08:	0805d944 	.word	0x0805d944
 8059b0c:	0805da56 	.word	0x0805da56
 8059b10:	0805da60 	.word	0x0805da60
 8059b14:	00000000 	.word	0x00000000
 8059b18:	0805989b 	.word	0x0805989b
 8059b1c:	0805da5c 	.word	0x0805da5c

08059b20 <_printf_common>:
 8059b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8059b24:	4616      	mov	r6, r2
 8059b26:	4699      	mov	r9, r3
 8059b28:	688a      	ldr	r2, [r1, #8]
 8059b2a:	690b      	ldr	r3, [r1, #16]
 8059b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8059b30:	4293      	cmp	r3, r2
 8059b32:	bfb8      	it	lt
 8059b34:	4613      	movlt	r3, r2
 8059b36:	6033      	str	r3, [r6, #0]
 8059b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8059b3c:	4607      	mov	r7, r0
 8059b3e:	460c      	mov	r4, r1
 8059b40:	b10a      	cbz	r2, 8059b46 <_printf_common+0x26>
 8059b42:	3301      	adds	r3, #1
 8059b44:	6033      	str	r3, [r6, #0]
 8059b46:	6823      	ldr	r3, [r4, #0]
 8059b48:	0699      	lsls	r1, r3, #26
 8059b4a:	bf42      	ittt	mi
 8059b4c:	6833      	ldrmi	r3, [r6, #0]
 8059b4e:	3302      	addmi	r3, #2
 8059b50:	6033      	strmi	r3, [r6, #0]
 8059b52:	6825      	ldr	r5, [r4, #0]
 8059b54:	f015 0506 	ands.w	r5, r5, #6
 8059b58:	d106      	bne.n	8059b68 <_printf_common+0x48>
 8059b5a:	f104 0a19 	add.w	sl, r4, #25
 8059b5e:	68e3      	ldr	r3, [r4, #12]
 8059b60:	6832      	ldr	r2, [r6, #0]
 8059b62:	1a9b      	subs	r3, r3, r2
 8059b64:	42ab      	cmp	r3, r5
 8059b66:	dc26      	bgt.n	8059bb6 <_printf_common+0x96>
 8059b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8059b6c:	1e13      	subs	r3, r2, #0
 8059b6e:	6822      	ldr	r2, [r4, #0]
 8059b70:	bf18      	it	ne
 8059b72:	2301      	movne	r3, #1
 8059b74:	0692      	lsls	r2, r2, #26
 8059b76:	d42b      	bmi.n	8059bd0 <_printf_common+0xb0>
 8059b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8059b7c:	4649      	mov	r1, r9
 8059b7e:	4638      	mov	r0, r7
 8059b80:	47c0      	blx	r8
 8059b82:	3001      	adds	r0, #1
 8059b84:	d01e      	beq.n	8059bc4 <_printf_common+0xa4>
 8059b86:	6823      	ldr	r3, [r4, #0]
 8059b88:	68e5      	ldr	r5, [r4, #12]
 8059b8a:	6832      	ldr	r2, [r6, #0]
 8059b8c:	f003 0306 	and.w	r3, r3, #6
 8059b90:	2b04      	cmp	r3, #4
 8059b92:	bf08      	it	eq
 8059b94:	1aad      	subeq	r5, r5, r2
 8059b96:	68a3      	ldr	r3, [r4, #8]
 8059b98:	6922      	ldr	r2, [r4, #16]
 8059b9a:	bf0c      	ite	eq
 8059b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8059ba0:	2500      	movne	r5, #0
 8059ba2:	4293      	cmp	r3, r2
 8059ba4:	bfc4      	itt	gt
 8059ba6:	1a9b      	subgt	r3, r3, r2
 8059ba8:	18ed      	addgt	r5, r5, r3
 8059baa:	2600      	movs	r6, #0
 8059bac:	341a      	adds	r4, #26
 8059bae:	42b5      	cmp	r5, r6
 8059bb0:	d11a      	bne.n	8059be8 <_printf_common+0xc8>
 8059bb2:	2000      	movs	r0, #0
 8059bb4:	e008      	b.n	8059bc8 <_printf_common+0xa8>
 8059bb6:	2301      	movs	r3, #1
 8059bb8:	4652      	mov	r2, sl
 8059bba:	4649      	mov	r1, r9
 8059bbc:	4638      	mov	r0, r7
 8059bbe:	47c0      	blx	r8
 8059bc0:	3001      	adds	r0, #1
 8059bc2:	d103      	bne.n	8059bcc <_printf_common+0xac>
 8059bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8059bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8059bcc:	3501      	adds	r5, #1
 8059bce:	e7c6      	b.n	8059b5e <_printf_common+0x3e>
 8059bd0:	18e1      	adds	r1, r4, r3
 8059bd2:	1c5a      	adds	r2, r3, #1
 8059bd4:	2030      	movs	r0, #48	; 0x30
 8059bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8059bda:	4422      	add	r2, r4
 8059bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8059be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8059be4:	3302      	adds	r3, #2
 8059be6:	e7c7      	b.n	8059b78 <_printf_common+0x58>
 8059be8:	2301      	movs	r3, #1
 8059bea:	4622      	mov	r2, r4
 8059bec:	4649      	mov	r1, r9
 8059bee:	4638      	mov	r0, r7
 8059bf0:	47c0      	blx	r8
 8059bf2:	3001      	adds	r0, #1
 8059bf4:	d0e6      	beq.n	8059bc4 <_printf_common+0xa4>
 8059bf6:	3601      	adds	r6, #1
 8059bf8:	e7d9      	b.n	8059bae <_printf_common+0x8e>
	...

08059bfc <_printf_i>:
 8059bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8059c00:	7e0f      	ldrb	r7, [r1, #24]
 8059c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8059c04:	2f78      	cmp	r7, #120	; 0x78
 8059c06:	4691      	mov	r9, r2
 8059c08:	4680      	mov	r8, r0
 8059c0a:	460c      	mov	r4, r1
 8059c0c:	469a      	mov	sl, r3
 8059c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8059c12:	d807      	bhi.n	8059c24 <_printf_i+0x28>
 8059c14:	2f62      	cmp	r7, #98	; 0x62
 8059c16:	d80a      	bhi.n	8059c2e <_printf_i+0x32>
 8059c18:	2f00      	cmp	r7, #0
 8059c1a:	f000 80d8 	beq.w	8059dce <_printf_i+0x1d2>
 8059c1e:	2f58      	cmp	r7, #88	; 0x58
 8059c20:	f000 80a3 	beq.w	8059d6a <_printf_i+0x16e>
 8059c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8059c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8059c2c:	e03a      	b.n	8059ca4 <_printf_i+0xa8>
 8059c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8059c32:	2b15      	cmp	r3, #21
 8059c34:	d8f6      	bhi.n	8059c24 <_printf_i+0x28>
 8059c36:	a101      	add	r1, pc, #4	; (adr r1, 8059c3c <_printf_i+0x40>)
 8059c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8059c3c:	08059c95 	.word	0x08059c95
 8059c40:	08059ca9 	.word	0x08059ca9
 8059c44:	08059c25 	.word	0x08059c25
 8059c48:	08059c25 	.word	0x08059c25
 8059c4c:	08059c25 	.word	0x08059c25
 8059c50:	08059c25 	.word	0x08059c25
 8059c54:	08059ca9 	.word	0x08059ca9
 8059c58:	08059c25 	.word	0x08059c25
 8059c5c:	08059c25 	.word	0x08059c25
 8059c60:	08059c25 	.word	0x08059c25
 8059c64:	08059c25 	.word	0x08059c25
 8059c68:	08059db5 	.word	0x08059db5
 8059c6c:	08059cd9 	.word	0x08059cd9
 8059c70:	08059d97 	.word	0x08059d97
 8059c74:	08059c25 	.word	0x08059c25
 8059c78:	08059c25 	.word	0x08059c25
 8059c7c:	08059dd7 	.word	0x08059dd7
 8059c80:	08059c25 	.word	0x08059c25
 8059c84:	08059cd9 	.word	0x08059cd9
 8059c88:	08059c25 	.word	0x08059c25
 8059c8c:	08059c25 	.word	0x08059c25
 8059c90:	08059d9f 	.word	0x08059d9f
 8059c94:	682b      	ldr	r3, [r5, #0]
 8059c96:	1d1a      	adds	r2, r3, #4
 8059c98:	681b      	ldr	r3, [r3, #0]
 8059c9a:	602a      	str	r2, [r5, #0]
 8059c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8059ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8059ca4:	2301      	movs	r3, #1
 8059ca6:	e0a3      	b.n	8059df0 <_printf_i+0x1f4>
 8059ca8:	6820      	ldr	r0, [r4, #0]
 8059caa:	6829      	ldr	r1, [r5, #0]
 8059cac:	0606      	lsls	r6, r0, #24
 8059cae:	f101 0304 	add.w	r3, r1, #4
 8059cb2:	d50a      	bpl.n	8059cca <_printf_i+0xce>
 8059cb4:	680e      	ldr	r6, [r1, #0]
 8059cb6:	602b      	str	r3, [r5, #0]
 8059cb8:	2e00      	cmp	r6, #0
 8059cba:	da03      	bge.n	8059cc4 <_printf_i+0xc8>
 8059cbc:	232d      	movs	r3, #45	; 0x2d
 8059cbe:	4276      	negs	r6, r6
 8059cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8059cc4:	485e      	ldr	r0, [pc, #376]	; (8059e40 <_printf_i+0x244>)
 8059cc6:	230a      	movs	r3, #10
 8059cc8:	e019      	b.n	8059cfe <_printf_i+0x102>
 8059cca:	680e      	ldr	r6, [r1, #0]
 8059ccc:	602b      	str	r3, [r5, #0]
 8059cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8059cd2:	bf18      	it	ne
 8059cd4:	b236      	sxthne	r6, r6
 8059cd6:	e7ef      	b.n	8059cb8 <_printf_i+0xbc>
 8059cd8:	682b      	ldr	r3, [r5, #0]
 8059cda:	6820      	ldr	r0, [r4, #0]
 8059cdc:	1d19      	adds	r1, r3, #4
 8059cde:	6029      	str	r1, [r5, #0]
 8059ce0:	0601      	lsls	r1, r0, #24
 8059ce2:	d501      	bpl.n	8059ce8 <_printf_i+0xec>
 8059ce4:	681e      	ldr	r6, [r3, #0]
 8059ce6:	e002      	b.n	8059cee <_printf_i+0xf2>
 8059ce8:	0646      	lsls	r6, r0, #25
 8059cea:	d5fb      	bpl.n	8059ce4 <_printf_i+0xe8>
 8059cec:	881e      	ldrh	r6, [r3, #0]
 8059cee:	4854      	ldr	r0, [pc, #336]	; (8059e40 <_printf_i+0x244>)
 8059cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8059cf2:	bf0c      	ite	eq
 8059cf4:	2308      	moveq	r3, #8
 8059cf6:	230a      	movne	r3, #10
 8059cf8:	2100      	movs	r1, #0
 8059cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8059cfe:	6865      	ldr	r5, [r4, #4]
 8059d00:	60a5      	str	r5, [r4, #8]
 8059d02:	2d00      	cmp	r5, #0
 8059d04:	bfa2      	ittt	ge
 8059d06:	6821      	ldrge	r1, [r4, #0]
 8059d08:	f021 0104 	bicge.w	r1, r1, #4
 8059d0c:	6021      	strge	r1, [r4, #0]
 8059d0e:	b90e      	cbnz	r6, 8059d14 <_printf_i+0x118>
 8059d10:	2d00      	cmp	r5, #0
 8059d12:	d04d      	beq.n	8059db0 <_printf_i+0x1b4>
 8059d14:	4615      	mov	r5, r2
 8059d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8059d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8059d1e:	5dc7      	ldrb	r7, [r0, r7]
 8059d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8059d24:	4637      	mov	r7, r6
 8059d26:	42bb      	cmp	r3, r7
 8059d28:	460e      	mov	r6, r1
 8059d2a:	d9f4      	bls.n	8059d16 <_printf_i+0x11a>
 8059d2c:	2b08      	cmp	r3, #8
 8059d2e:	d10b      	bne.n	8059d48 <_printf_i+0x14c>
 8059d30:	6823      	ldr	r3, [r4, #0]
 8059d32:	07de      	lsls	r6, r3, #31
 8059d34:	d508      	bpl.n	8059d48 <_printf_i+0x14c>
 8059d36:	6923      	ldr	r3, [r4, #16]
 8059d38:	6861      	ldr	r1, [r4, #4]
 8059d3a:	4299      	cmp	r1, r3
 8059d3c:	bfde      	ittt	le
 8059d3e:	2330      	movle	r3, #48	; 0x30
 8059d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8059d44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8059d48:	1b52      	subs	r2, r2, r5
 8059d4a:	6122      	str	r2, [r4, #16]
 8059d4c:	f8cd a000 	str.w	sl, [sp]
 8059d50:	464b      	mov	r3, r9
 8059d52:	aa03      	add	r2, sp, #12
 8059d54:	4621      	mov	r1, r4
 8059d56:	4640      	mov	r0, r8
 8059d58:	f7ff fee2 	bl	8059b20 <_printf_common>
 8059d5c:	3001      	adds	r0, #1
 8059d5e:	d14c      	bne.n	8059dfa <_printf_i+0x1fe>
 8059d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8059d64:	b004      	add	sp, #16
 8059d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8059d6a:	4835      	ldr	r0, [pc, #212]	; (8059e40 <_printf_i+0x244>)
 8059d6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8059d70:	6829      	ldr	r1, [r5, #0]
 8059d72:	6823      	ldr	r3, [r4, #0]
 8059d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8059d78:	6029      	str	r1, [r5, #0]
 8059d7a:	061d      	lsls	r5, r3, #24
 8059d7c:	d514      	bpl.n	8059da8 <_printf_i+0x1ac>
 8059d7e:	07df      	lsls	r7, r3, #31
 8059d80:	bf44      	itt	mi
 8059d82:	f043 0320 	orrmi.w	r3, r3, #32
 8059d86:	6023      	strmi	r3, [r4, #0]
 8059d88:	b91e      	cbnz	r6, 8059d92 <_printf_i+0x196>
 8059d8a:	6823      	ldr	r3, [r4, #0]
 8059d8c:	f023 0320 	bic.w	r3, r3, #32
 8059d90:	6023      	str	r3, [r4, #0]
 8059d92:	2310      	movs	r3, #16
 8059d94:	e7b0      	b.n	8059cf8 <_printf_i+0xfc>
 8059d96:	6823      	ldr	r3, [r4, #0]
 8059d98:	f043 0320 	orr.w	r3, r3, #32
 8059d9c:	6023      	str	r3, [r4, #0]
 8059d9e:	2378      	movs	r3, #120	; 0x78
 8059da0:	4828      	ldr	r0, [pc, #160]	; (8059e44 <_printf_i+0x248>)
 8059da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8059da6:	e7e3      	b.n	8059d70 <_printf_i+0x174>
 8059da8:	0659      	lsls	r1, r3, #25
 8059daa:	bf48      	it	mi
 8059dac:	b2b6      	uxthmi	r6, r6
 8059dae:	e7e6      	b.n	8059d7e <_printf_i+0x182>
 8059db0:	4615      	mov	r5, r2
 8059db2:	e7bb      	b.n	8059d2c <_printf_i+0x130>
 8059db4:	682b      	ldr	r3, [r5, #0]
 8059db6:	6826      	ldr	r6, [r4, #0]
 8059db8:	6961      	ldr	r1, [r4, #20]
 8059dba:	1d18      	adds	r0, r3, #4
 8059dbc:	6028      	str	r0, [r5, #0]
 8059dbe:	0635      	lsls	r5, r6, #24
 8059dc0:	681b      	ldr	r3, [r3, #0]
 8059dc2:	d501      	bpl.n	8059dc8 <_printf_i+0x1cc>
 8059dc4:	6019      	str	r1, [r3, #0]
 8059dc6:	e002      	b.n	8059dce <_printf_i+0x1d2>
 8059dc8:	0670      	lsls	r0, r6, #25
 8059dca:	d5fb      	bpl.n	8059dc4 <_printf_i+0x1c8>
 8059dcc:	8019      	strh	r1, [r3, #0]
 8059dce:	2300      	movs	r3, #0
 8059dd0:	6123      	str	r3, [r4, #16]
 8059dd2:	4615      	mov	r5, r2
 8059dd4:	e7ba      	b.n	8059d4c <_printf_i+0x150>
 8059dd6:	682b      	ldr	r3, [r5, #0]
 8059dd8:	1d1a      	adds	r2, r3, #4
 8059dda:	602a      	str	r2, [r5, #0]
 8059ddc:	681d      	ldr	r5, [r3, #0]
 8059dde:	6862      	ldr	r2, [r4, #4]
 8059de0:	2100      	movs	r1, #0
 8059de2:	4628      	mov	r0, r5
 8059de4:	f7e6 fa1c 	bl	8040220 <memchr>
 8059de8:	b108      	cbz	r0, 8059dee <_printf_i+0x1f2>
 8059dea:	1b40      	subs	r0, r0, r5
 8059dec:	6060      	str	r0, [r4, #4]
 8059dee:	6863      	ldr	r3, [r4, #4]
 8059df0:	6123      	str	r3, [r4, #16]
 8059df2:	2300      	movs	r3, #0
 8059df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8059df8:	e7a8      	b.n	8059d4c <_printf_i+0x150>
 8059dfa:	6923      	ldr	r3, [r4, #16]
 8059dfc:	462a      	mov	r2, r5
 8059dfe:	4649      	mov	r1, r9
 8059e00:	4640      	mov	r0, r8
 8059e02:	47d0      	blx	sl
 8059e04:	3001      	adds	r0, #1
 8059e06:	d0ab      	beq.n	8059d60 <_printf_i+0x164>
 8059e08:	6823      	ldr	r3, [r4, #0]
 8059e0a:	079b      	lsls	r3, r3, #30
 8059e0c:	d413      	bmi.n	8059e36 <_printf_i+0x23a>
 8059e0e:	68e0      	ldr	r0, [r4, #12]
 8059e10:	9b03      	ldr	r3, [sp, #12]
 8059e12:	4298      	cmp	r0, r3
 8059e14:	bfb8      	it	lt
 8059e16:	4618      	movlt	r0, r3
 8059e18:	e7a4      	b.n	8059d64 <_printf_i+0x168>
 8059e1a:	2301      	movs	r3, #1
 8059e1c:	4632      	mov	r2, r6
 8059e1e:	4649      	mov	r1, r9
 8059e20:	4640      	mov	r0, r8
 8059e22:	47d0      	blx	sl
 8059e24:	3001      	adds	r0, #1
 8059e26:	d09b      	beq.n	8059d60 <_printf_i+0x164>
 8059e28:	3501      	adds	r5, #1
 8059e2a:	68e3      	ldr	r3, [r4, #12]
 8059e2c:	9903      	ldr	r1, [sp, #12]
 8059e2e:	1a5b      	subs	r3, r3, r1
 8059e30:	42ab      	cmp	r3, r5
 8059e32:	dcf2      	bgt.n	8059e1a <_printf_i+0x21e>
 8059e34:	e7eb      	b.n	8059e0e <_printf_i+0x212>
 8059e36:	2500      	movs	r5, #0
 8059e38:	f104 0619 	add.w	r6, r4, #25
 8059e3c:	e7f5      	b.n	8059e2a <_printf_i+0x22e>
 8059e3e:	bf00      	nop
 8059e40:	0805da67 	.word	0x0805da67
 8059e44:	0805da78 	.word	0x0805da78

08059e48 <_read_r>:
 8059e48:	b538      	push	{r3, r4, r5, lr}
 8059e4a:	4d07      	ldr	r5, [pc, #28]	; (8059e68 <_read_r+0x20>)
 8059e4c:	4604      	mov	r4, r0
 8059e4e:	4608      	mov	r0, r1
 8059e50:	4611      	mov	r1, r2
 8059e52:	2200      	movs	r2, #0
 8059e54:	602a      	str	r2, [r5, #0]
 8059e56:	461a      	mov	r2, r3
 8059e58:	f7e7 feda 	bl	8041c10 <_read>
 8059e5c:	1c43      	adds	r3, r0, #1
 8059e5e:	d102      	bne.n	8059e66 <_read_r+0x1e>
 8059e60:	682b      	ldr	r3, [r5, #0]
 8059e62:	b103      	cbz	r3, 8059e66 <_read_r+0x1e>
 8059e64:	6023      	str	r3, [r4, #0]
 8059e66:	bd38      	pop	{r3, r4, r5, pc}
 8059e68:	2000b738 	.word	0x2000b738

08059e6c <__swbuf_r>:
 8059e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8059e6e:	460e      	mov	r6, r1
 8059e70:	4614      	mov	r4, r2
 8059e72:	4605      	mov	r5, r0
 8059e74:	b118      	cbz	r0, 8059e7e <__swbuf_r+0x12>
 8059e76:	6983      	ldr	r3, [r0, #24]
 8059e78:	b90b      	cbnz	r3, 8059e7e <__swbuf_r+0x12>
 8059e7a:	f7fe fee5 	bl	8058c48 <__sinit>
 8059e7e:	4b21      	ldr	r3, [pc, #132]	; (8059f04 <__swbuf_r+0x98>)
 8059e80:	429c      	cmp	r4, r3
 8059e82:	d12b      	bne.n	8059edc <__swbuf_r+0x70>
 8059e84:	686c      	ldr	r4, [r5, #4]
 8059e86:	69a3      	ldr	r3, [r4, #24]
 8059e88:	60a3      	str	r3, [r4, #8]
 8059e8a:	89a3      	ldrh	r3, [r4, #12]
 8059e8c:	071a      	lsls	r2, r3, #28
 8059e8e:	d52f      	bpl.n	8059ef0 <__swbuf_r+0x84>
 8059e90:	6923      	ldr	r3, [r4, #16]
 8059e92:	b36b      	cbz	r3, 8059ef0 <__swbuf_r+0x84>
 8059e94:	6923      	ldr	r3, [r4, #16]
 8059e96:	6820      	ldr	r0, [r4, #0]
 8059e98:	1ac0      	subs	r0, r0, r3
 8059e9a:	6963      	ldr	r3, [r4, #20]
 8059e9c:	b2f6      	uxtb	r6, r6
 8059e9e:	4283      	cmp	r3, r0
 8059ea0:	4637      	mov	r7, r6
 8059ea2:	dc04      	bgt.n	8059eae <__swbuf_r+0x42>
 8059ea4:	4621      	mov	r1, r4
 8059ea6:	4628      	mov	r0, r5
 8059ea8:	f7ff fb24 	bl	80594f4 <_fflush_r>
 8059eac:	bb30      	cbnz	r0, 8059efc <__swbuf_r+0x90>
 8059eae:	68a3      	ldr	r3, [r4, #8]
 8059eb0:	3b01      	subs	r3, #1
 8059eb2:	60a3      	str	r3, [r4, #8]
 8059eb4:	6823      	ldr	r3, [r4, #0]
 8059eb6:	1c5a      	adds	r2, r3, #1
 8059eb8:	6022      	str	r2, [r4, #0]
 8059eba:	701e      	strb	r6, [r3, #0]
 8059ebc:	6963      	ldr	r3, [r4, #20]
 8059ebe:	3001      	adds	r0, #1
 8059ec0:	4283      	cmp	r3, r0
 8059ec2:	d004      	beq.n	8059ece <__swbuf_r+0x62>
 8059ec4:	89a3      	ldrh	r3, [r4, #12]
 8059ec6:	07db      	lsls	r3, r3, #31
 8059ec8:	d506      	bpl.n	8059ed8 <__swbuf_r+0x6c>
 8059eca:	2e0a      	cmp	r6, #10
 8059ecc:	d104      	bne.n	8059ed8 <__swbuf_r+0x6c>
 8059ece:	4621      	mov	r1, r4
 8059ed0:	4628      	mov	r0, r5
 8059ed2:	f7ff fb0f 	bl	80594f4 <_fflush_r>
 8059ed6:	b988      	cbnz	r0, 8059efc <__swbuf_r+0x90>
 8059ed8:	4638      	mov	r0, r7
 8059eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8059edc:	4b0a      	ldr	r3, [pc, #40]	; (8059f08 <__swbuf_r+0x9c>)
 8059ede:	429c      	cmp	r4, r3
 8059ee0:	d101      	bne.n	8059ee6 <__swbuf_r+0x7a>
 8059ee2:	68ac      	ldr	r4, [r5, #8]
 8059ee4:	e7cf      	b.n	8059e86 <__swbuf_r+0x1a>
 8059ee6:	4b09      	ldr	r3, [pc, #36]	; (8059f0c <__swbuf_r+0xa0>)
 8059ee8:	429c      	cmp	r4, r3
 8059eea:	bf08      	it	eq
 8059eec:	68ec      	ldreq	r4, [r5, #12]
 8059eee:	e7ca      	b.n	8059e86 <__swbuf_r+0x1a>
 8059ef0:	4621      	mov	r1, r4
 8059ef2:	4628      	mov	r0, r5
 8059ef4:	f000 f80c 	bl	8059f10 <__swsetup_r>
 8059ef8:	2800      	cmp	r0, #0
 8059efa:	d0cb      	beq.n	8059e94 <__swbuf_r+0x28>
 8059efc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8059f00:	e7ea      	b.n	8059ed8 <__swbuf_r+0x6c>
 8059f02:	bf00      	nop
 8059f04:	0805d964 	.word	0x0805d964
 8059f08:	0805d984 	.word	0x0805d984
 8059f0c:	0805d944 	.word	0x0805d944

08059f10 <__swsetup_r>:
 8059f10:	4b32      	ldr	r3, [pc, #200]	; (8059fdc <__swsetup_r+0xcc>)
 8059f12:	b570      	push	{r4, r5, r6, lr}
 8059f14:	681d      	ldr	r5, [r3, #0]
 8059f16:	4606      	mov	r6, r0
 8059f18:	460c      	mov	r4, r1
 8059f1a:	b125      	cbz	r5, 8059f26 <__swsetup_r+0x16>
 8059f1c:	69ab      	ldr	r3, [r5, #24]
 8059f1e:	b913      	cbnz	r3, 8059f26 <__swsetup_r+0x16>
 8059f20:	4628      	mov	r0, r5
 8059f22:	f7fe fe91 	bl	8058c48 <__sinit>
 8059f26:	4b2e      	ldr	r3, [pc, #184]	; (8059fe0 <__swsetup_r+0xd0>)
 8059f28:	429c      	cmp	r4, r3
 8059f2a:	d10f      	bne.n	8059f4c <__swsetup_r+0x3c>
 8059f2c:	686c      	ldr	r4, [r5, #4]
 8059f2e:	89a3      	ldrh	r3, [r4, #12]
 8059f30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8059f34:	0719      	lsls	r1, r3, #28
 8059f36:	d42c      	bmi.n	8059f92 <__swsetup_r+0x82>
 8059f38:	06dd      	lsls	r5, r3, #27
 8059f3a:	d411      	bmi.n	8059f60 <__swsetup_r+0x50>
 8059f3c:	2309      	movs	r3, #9
 8059f3e:	6033      	str	r3, [r6, #0]
 8059f40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8059f44:	81a3      	strh	r3, [r4, #12]
 8059f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8059f4a:	e03e      	b.n	8059fca <__swsetup_r+0xba>
 8059f4c:	4b25      	ldr	r3, [pc, #148]	; (8059fe4 <__swsetup_r+0xd4>)
 8059f4e:	429c      	cmp	r4, r3
 8059f50:	d101      	bne.n	8059f56 <__swsetup_r+0x46>
 8059f52:	68ac      	ldr	r4, [r5, #8]
 8059f54:	e7eb      	b.n	8059f2e <__swsetup_r+0x1e>
 8059f56:	4b24      	ldr	r3, [pc, #144]	; (8059fe8 <__swsetup_r+0xd8>)
 8059f58:	429c      	cmp	r4, r3
 8059f5a:	bf08      	it	eq
 8059f5c:	68ec      	ldreq	r4, [r5, #12]
 8059f5e:	e7e6      	b.n	8059f2e <__swsetup_r+0x1e>
 8059f60:	0758      	lsls	r0, r3, #29
 8059f62:	d512      	bpl.n	8059f8a <__swsetup_r+0x7a>
 8059f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8059f66:	b141      	cbz	r1, 8059f7a <__swsetup_r+0x6a>
 8059f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8059f6c:	4299      	cmp	r1, r3
 8059f6e:	d002      	beq.n	8059f76 <__swsetup_r+0x66>
 8059f70:	4630      	mov	r0, r6
 8059f72:	f7fe ff7f 	bl	8058e74 <_free_r>
 8059f76:	2300      	movs	r3, #0
 8059f78:	6363      	str	r3, [r4, #52]	; 0x34
 8059f7a:	89a3      	ldrh	r3, [r4, #12]
 8059f7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8059f80:	81a3      	strh	r3, [r4, #12]
 8059f82:	2300      	movs	r3, #0
 8059f84:	6063      	str	r3, [r4, #4]
 8059f86:	6923      	ldr	r3, [r4, #16]
 8059f88:	6023      	str	r3, [r4, #0]
 8059f8a:	89a3      	ldrh	r3, [r4, #12]
 8059f8c:	f043 0308 	orr.w	r3, r3, #8
 8059f90:	81a3      	strh	r3, [r4, #12]
 8059f92:	6923      	ldr	r3, [r4, #16]
 8059f94:	b94b      	cbnz	r3, 8059faa <__swsetup_r+0x9a>
 8059f96:	89a3      	ldrh	r3, [r4, #12]
 8059f98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8059f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8059fa0:	d003      	beq.n	8059faa <__swsetup_r+0x9a>
 8059fa2:	4621      	mov	r1, r4
 8059fa4:	4630      	mov	r0, r6
 8059fa6:	f000 f847 	bl	805a038 <__smakebuf_r>
 8059faa:	89a0      	ldrh	r0, [r4, #12]
 8059fac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8059fb0:	f010 0301 	ands.w	r3, r0, #1
 8059fb4:	d00a      	beq.n	8059fcc <__swsetup_r+0xbc>
 8059fb6:	2300      	movs	r3, #0
 8059fb8:	60a3      	str	r3, [r4, #8]
 8059fba:	6963      	ldr	r3, [r4, #20]
 8059fbc:	425b      	negs	r3, r3
 8059fbe:	61a3      	str	r3, [r4, #24]
 8059fc0:	6923      	ldr	r3, [r4, #16]
 8059fc2:	b943      	cbnz	r3, 8059fd6 <__swsetup_r+0xc6>
 8059fc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8059fc8:	d1ba      	bne.n	8059f40 <__swsetup_r+0x30>
 8059fca:	bd70      	pop	{r4, r5, r6, pc}
 8059fcc:	0781      	lsls	r1, r0, #30
 8059fce:	bf58      	it	pl
 8059fd0:	6963      	ldrpl	r3, [r4, #20]
 8059fd2:	60a3      	str	r3, [r4, #8]
 8059fd4:	e7f4      	b.n	8059fc0 <__swsetup_r+0xb0>
 8059fd6:	2000      	movs	r0, #0
 8059fd8:	e7f7      	b.n	8059fca <__swsetup_r+0xba>
 8059fda:	bf00      	nop
 8059fdc:	20000034 	.word	0x20000034
 8059fe0:	0805d964 	.word	0x0805d964
 8059fe4:	0805d984 	.word	0x0805d984
 8059fe8:	0805d944 	.word	0x0805d944

08059fec <__swhatbuf_r>:
 8059fec:	b570      	push	{r4, r5, r6, lr}
 8059fee:	460e      	mov	r6, r1
 8059ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8059ff4:	2900      	cmp	r1, #0
 8059ff6:	b096      	sub	sp, #88	; 0x58
 8059ff8:	4614      	mov	r4, r2
 8059ffa:	461d      	mov	r5, r3
 8059ffc:	da08      	bge.n	805a010 <__swhatbuf_r+0x24>
 8059ffe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 805a002:	2200      	movs	r2, #0
 805a004:	602a      	str	r2, [r5, #0]
 805a006:	061a      	lsls	r2, r3, #24
 805a008:	d410      	bmi.n	805a02c <__swhatbuf_r+0x40>
 805a00a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805a00e:	e00e      	b.n	805a02e <__swhatbuf_r+0x42>
 805a010:	466a      	mov	r2, sp
 805a012:	f000 f881 	bl	805a118 <_fstat_r>
 805a016:	2800      	cmp	r0, #0
 805a018:	dbf1      	blt.n	8059ffe <__swhatbuf_r+0x12>
 805a01a:	9a01      	ldr	r2, [sp, #4]
 805a01c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 805a020:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 805a024:	425a      	negs	r2, r3
 805a026:	415a      	adcs	r2, r3
 805a028:	602a      	str	r2, [r5, #0]
 805a02a:	e7ee      	b.n	805a00a <__swhatbuf_r+0x1e>
 805a02c:	2340      	movs	r3, #64	; 0x40
 805a02e:	2000      	movs	r0, #0
 805a030:	6023      	str	r3, [r4, #0]
 805a032:	b016      	add	sp, #88	; 0x58
 805a034:	bd70      	pop	{r4, r5, r6, pc}
	...

0805a038 <__smakebuf_r>:
 805a038:	898b      	ldrh	r3, [r1, #12]
 805a03a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 805a03c:	079d      	lsls	r5, r3, #30
 805a03e:	4606      	mov	r6, r0
 805a040:	460c      	mov	r4, r1
 805a042:	d507      	bpl.n	805a054 <__smakebuf_r+0x1c>
 805a044:	f104 0347 	add.w	r3, r4, #71	; 0x47
 805a048:	6023      	str	r3, [r4, #0]
 805a04a:	6123      	str	r3, [r4, #16]
 805a04c:	2301      	movs	r3, #1
 805a04e:	6163      	str	r3, [r4, #20]
 805a050:	b002      	add	sp, #8
 805a052:	bd70      	pop	{r4, r5, r6, pc}
 805a054:	ab01      	add	r3, sp, #4
 805a056:	466a      	mov	r2, sp
 805a058:	f7ff ffc8 	bl	8059fec <__swhatbuf_r>
 805a05c:	9900      	ldr	r1, [sp, #0]
 805a05e:	4605      	mov	r5, r0
 805a060:	4630      	mov	r0, r6
 805a062:	f7fe ff73 	bl	8058f4c <_malloc_r>
 805a066:	b948      	cbnz	r0, 805a07c <__smakebuf_r+0x44>
 805a068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 805a06c:	059a      	lsls	r2, r3, #22
 805a06e:	d4ef      	bmi.n	805a050 <__smakebuf_r+0x18>
 805a070:	f023 0303 	bic.w	r3, r3, #3
 805a074:	f043 0302 	orr.w	r3, r3, #2
 805a078:	81a3      	strh	r3, [r4, #12]
 805a07a:	e7e3      	b.n	805a044 <__smakebuf_r+0xc>
 805a07c:	4b0d      	ldr	r3, [pc, #52]	; (805a0b4 <__smakebuf_r+0x7c>)
 805a07e:	62b3      	str	r3, [r6, #40]	; 0x28
 805a080:	89a3      	ldrh	r3, [r4, #12]
 805a082:	6020      	str	r0, [r4, #0]
 805a084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 805a088:	81a3      	strh	r3, [r4, #12]
 805a08a:	9b00      	ldr	r3, [sp, #0]
 805a08c:	6163      	str	r3, [r4, #20]
 805a08e:	9b01      	ldr	r3, [sp, #4]
 805a090:	6120      	str	r0, [r4, #16]
 805a092:	b15b      	cbz	r3, 805a0ac <__smakebuf_r+0x74>
 805a094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 805a098:	4630      	mov	r0, r6
 805a09a:	f000 f84f 	bl	805a13c <_isatty_r>
 805a09e:	b128      	cbz	r0, 805a0ac <__smakebuf_r+0x74>
 805a0a0:	89a3      	ldrh	r3, [r4, #12]
 805a0a2:	f023 0303 	bic.w	r3, r3, #3
 805a0a6:	f043 0301 	orr.w	r3, r3, #1
 805a0aa:	81a3      	strh	r3, [r4, #12]
 805a0ac:	89a0      	ldrh	r0, [r4, #12]
 805a0ae:	4305      	orrs	r5, r0
 805a0b0:	81a5      	strh	r5, [r4, #12]
 805a0b2:	e7cd      	b.n	805a050 <__smakebuf_r+0x18>
 805a0b4:	08058be1 	.word	0x08058be1

0805a0b8 <_realloc_r>:
 805a0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805a0bc:	4680      	mov	r8, r0
 805a0be:	4614      	mov	r4, r2
 805a0c0:	460e      	mov	r6, r1
 805a0c2:	b921      	cbnz	r1, 805a0ce <_realloc_r+0x16>
 805a0c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 805a0c8:	4611      	mov	r1, r2
 805a0ca:	f7fe bf3f 	b.w	8058f4c <_malloc_r>
 805a0ce:	b92a      	cbnz	r2, 805a0dc <_realloc_r+0x24>
 805a0d0:	f7fe fed0 	bl	8058e74 <_free_r>
 805a0d4:	4625      	mov	r5, r4
 805a0d6:	4628      	mov	r0, r5
 805a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 805a0dc:	f000 f83e 	bl	805a15c <_malloc_usable_size_r>
 805a0e0:	4284      	cmp	r4, r0
 805a0e2:	4607      	mov	r7, r0
 805a0e4:	d802      	bhi.n	805a0ec <_realloc_r+0x34>
 805a0e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 805a0ea:	d812      	bhi.n	805a112 <_realloc_r+0x5a>
 805a0ec:	4621      	mov	r1, r4
 805a0ee:	4640      	mov	r0, r8
 805a0f0:	f7fe ff2c 	bl	8058f4c <_malloc_r>
 805a0f4:	4605      	mov	r5, r0
 805a0f6:	2800      	cmp	r0, #0
 805a0f8:	d0ed      	beq.n	805a0d6 <_realloc_r+0x1e>
 805a0fa:	42bc      	cmp	r4, r7
 805a0fc:	4622      	mov	r2, r4
 805a0fe:	4631      	mov	r1, r6
 805a100:	bf28      	it	cs
 805a102:	463a      	movcs	r2, r7
 805a104:	f7fe fe86 	bl	8058e14 <memcpy>
 805a108:	4631      	mov	r1, r6
 805a10a:	4640      	mov	r0, r8
 805a10c:	f7fe feb2 	bl	8058e74 <_free_r>
 805a110:	e7e1      	b.n	805a0d6 <_realloc_r+0x1e>
 805a112:	4635      	mov	r5, r6
 805a114:	e7df      	b.n	805a0d6 <_realloc_r+0x1e>
	...

0805a118 <_fstat_r>:
 805a118:	b538      	push	{r3, r4, r5, lr}
 805a11a:	4d07      	ldr	r5, [pc, #28]	; (805a138 <_fstat_r+0x20>)
 805a11c:	2300      	movs	r3, #0
 805a11e:	4604      	mov	r4, r0
 805a120:	4608      	mov	r0, r1
 805a122:	4611      	mov	r1, r2
 805a124:	602b      	str	r3, [r5, #0]
 805a126:	f7e7 fdb8 	bl	8041c9a <_fstat>
 805a12a:	1c43      	adds	r3, r0, #1
 805a12c:	d102      	bne.n	805a134 <_fstat_r+0x1c>
 805a12e:	682b      	ldr	r3, [r5, #0]
 805a130:	b103      	cbz	r3, 805a134 <_fstat_r+0x1c>
 805a132:	6023      	str	r3, [r4, #0]
 805a134:	bd38      	pop	{r3, r4, r5, pc}
 805a136:	bf00      	nop
 805a138:	2000b738 	.word	0x2000b738

0805a13c <_isatty_r>:
 805a13c:	b538      	push	{r3, r4, r5, lr}
 805a13e:	4d06      	ldr	r5, [pc, #24]	; (805a158 <_isatty_r+0x1c>)
 805a140:	2300      	movs	r3, #0
 805a142:	4604      	mov	r4, r0
 805a144:	4608      	mov	r0, r1
 805a146:	602b      	str	r3, [r5, #0]
 805a148:	f7e7 fdb7 	bl	8041cba <_isatty>
 805a14c:	1c43      	adds	r3, r0, #1
 805a14e:	d102      	bne.n	805a156 <_isatty_r+0x1a>
 805a150:	682b      	ldr	r3, [r5, #0]
 805a152:	b103      	cbz	r3, 805a156 <_isatty_r+0x1a>
 805a154:	6023      	str	r3, [r4, #0]
 805a156:	bd38      	pop	{r3, r4, r5, pc}
 805a158:	2000b738 	.word	0x2000b738

0805a15c <_malloc_usable_size_r>:
 805a15c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 805a160:	1f18      	subs	r0, r3, #4
 805a162:	2b00      	cmp	r3, #0
 805a164:	bfbc      	itt	lt
 805a166:	580b      	ldrlt	r3, [r1, r0]
 805a168:	18c0      	addlt	r0, r0, r3
 805a16a:	4770      	bx	lr

0805a16c <_init>:
 805a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a16e:	bf00      	nop
 805a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 805a172:	bc08      	pop	{r3}
 805a174:	469e      	mov	lr, r3
 805a176:	4770      	bx	lr

0805a178 <_fini>:
 805a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 805a17a:	bf00      	nop
 805a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 805a17e:	bc08      	pop	{r3}
 805a180:	469e      	mov	lr, r3
 805a182:	4770      	bx	lr
