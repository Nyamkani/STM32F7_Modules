/*
 * mcx514_define.cpp
 *
 *  Created on: Feb 9, 2023
 *      Author: studio3s
 */
#include "stm32f7xx_hal.h"

#include <mcx514/include/mcx514/mcx514_extlib.h>
#include "main.h"


//////////////////////////////////////////////////////////////////////////////////
// Common functions
//////////////////////////////////////////////////////////////////////////////////
// Common function of writing WR register (I/O port access. The following is the example of SH microcomputer.)
int WriteReg(SRAM_HandleTypeDef *hsram, volatile unsigned short *Adr, unsigned short Data) {

	//reg_write(Adr, Data);
	int status = HAL_OK;
	unsigned short data_ = Data;

	status = HAL_SRAM_Write_16b(hsram, (uint32_t*)Adr, &data_, sizeof(data_));

	return 0;
}
// Common function of reading RR register (I/O port access. The following is the example of SH microcomputer.)
int ReadReg(SRAM_HandleTypeDef *hsram, volatile unsigned short *Adr, unsigned short *Data) {

	//*Data = reg_read(Adr);

	int status;

	status = HAL_SRAM_Read_16b(hsram, (uint32_t*)Adr, Data, sizeof(Data));

	return 0;
}


// Common function of commands for writing data
// Data can be written by writing data into WR6, WR7, and then writing a command into WR0.
int SetData(SRAM_HandleTypeDef *hsram, unsigned short Cmd, int Axis, unsigned long Data, const uint32_t address) {

	unsigned long mask_data = 0x0000ffff;
	unsigned short write_data;

	// Writes the lower 16-bit of data into WR6
	write_data = (unsigned short )(Data & mask_data);
	WriteReg(hsram, (volatile unsigned short*)(address + MCX514_WR6), write_data);

	// Writes the upper 16-bit of data into WR7
	write_data = (unsigned short )(Data >> 16);
	WriteReg(hsram, (volatile unsigned short*)(address + MCX514_WR7), write_data);

	// Writes a command (into WR0)
	write_data = (((unsigned short) (Axis << 8) | Cmd));
	WriteReg(hsram, (volatile unsigned short*)(address + MCX514_WR0), write_data);


	return 0;
}
// Common function of commands for writing mode
// Data can be written by writing data into WR6, and then writing a command into WR0.
int SetModeData(SRAM_HandleTypeDef *hsram, unsigned short Cmd, int Axis, unsigned short Data, uint32_t address) {

	unsigned short write_data;

	// Writes the lower 16-bit of data into WR6
	WriteReg(hsram, (volatile unsigned short*)(address + MCX514_WR6), Data);

	// Writes a command (into WR0)
	write_data = (((unsigned short) (Axis << 8) | Cmd));
	WriteReg(hsram, (volatile unsigned short*)(address + MCX514_WR0), write_data);

	return 0;
}
// Common function of commands for reading data
// Data can be read by writing a command into WR0, and then read  RR6, RR7.
int GetData(SRAM_HandleTypeDef *hsram, unsigned short Cmd, int Axis, unsigned long *Data , uint32_t address) {

	unsigned short rdata1,rdata2;
	unsigned long retdata = 0x00000000;

	if (Data == NULL) return 0;

	// Writes a command (into WR0)
	WriteReg0(((unsigned short) (Axis << 8) | Cmd));

	// Reads RR7
	ReadReg7(&rdata1);

	// Reads RR6
	ReadReg6(&rdata2);

	// Create data for reading
	retdata = (unsigned long )rdata1;	// Sets RR7 value to the upper 16-bit
	*Data = (retdata << 16);
	retdata = (unsigned long )rdata2;	// Sets RR6 value to the lower 16-bit
	*Data = *Data | retdata;

	return 0;
}
// Common function of command execution
int ExeCmd(unsigned short Cmd, int Axis) {

	// Writes a command (into WR0)
	WriteReg0(((unsigned short) (Axis << 8) | Cmd));

	return 0;
}

// Waiting for termination of driving
void waitdrive(int Axis) {

	unsigned short rrData;

	ReadReg0(&rrData);			// Reads RR0
	while ((rrData & Axis)) {		// If during the driving
		ReadReg0(&rrData);		// Reads RR0
	}
}

// Waiting for termination of split pulse
void waitsplit(int Axis) {

	unsigned short rrData;

	ReadReg3(1, Axis, &rrData);		// Reads RR3 Page1
	while ((rrData & 0x0800)) {		// If split pulse is in operation
		ReadReg3(1, Axis, &rrData);	// Reads RR3 Page1
	}
}


///////////////////////////////////////////////////////////////////////////////////////
// Write functions for WR register
//////////////////////////////////////////////////////////////////////////////////////
int WriteReg0(unsigned short Data){ 				// Writes into WR0 register
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR0), Data));
}
int WriteReg1(int Axis, unsigned short Data){ 			// Writes into WR1 register
	WriteReg0(((Axis << 8) + MCX514_CMD1F_NOP));		// Axis assignment
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR1), Data));
}

int WriteReg2(int Axis, unsigned short Data){ 			// Writes into WR2 register
	WriteReg0(((Axis << 8) + MCX514_CMD1F_NOP));		// Axis assignment
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR2), Data));
}
int WriteReg3(int Axis, unsigned short Data){ 			// Writes into WR3 register
	WriteReg0(((Axis << 8) + MCX514_CMD1F_NOP));		// Axis assignment
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR3), Data));
}
int WriteReg4(unsigned short Data){ 				// Writes into WR4 register
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR4), Data));
}
int WriteReg5(unsigned short Data){ 				// Writes into WR5 register
return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR5), Data));
}
int WriteReg6(unsigned short Data){ 				// Writes into WR6 register
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR6), Data));
}
int WriteReg7(unsigned short Data){ 				// Writes into WR7 register
	return(WriteReg((volatile unsigned short*)(REG_ADDR + MCX514_WR7), Data));
}

///////////////////////////////////////////////////////////////////////////////////////
// Read functions for RR register
///////////////////////////////////////////////////////////////////////////////////////
int ReadReg0(unsigned short *Data){ 				// Reads out RR0 register
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR0), Data));
}
int ReadReg1(int Axis, unsigned short *Data){ 			// Reads out RR1 register
	WriteReg0(((Axis << 8) + MCX514_CMD1F_NOP));		// Axis assignment
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR1), Data));
}
int ReadReg2(int Axis, unsigned short *Data){ 			// Reads out RR2 register
	WriteReg0(((Axis << 8) + MCX514_CMD1F_NOP));		// Axis assignment
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR2), Data));
}
int ReadReg3(int Page, int Axis, unsigned short *Data){ 		// Reads out RR3 register
	if (Page == 0) {					// Specifies Page0
		WriteReg0(((unsigned short)(Axis << 8) | MCX514_CMD7A_RR3P0));
	}
	else {						// Specifies Page1
		WriteReg0(((unsigned short)(Axis << 8) | MCX514_CMD7B_RR3P1));
	}
	WriteReg0(((unsigned short)(Axis << 8) | MCX514_CMD1F_NOP));	// Axis assignment
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR3), Data));
}
int ReadReg4(unsigned short *Data){ 				// Reads out RR4 register
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR4), Data));
}
int ReadReg5(unsigned short *Data){ 				// Reads out RR5 register
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR5), Data));
}
int ReadReg6(unsigned short *Data){ 				// Reads out RR6 register
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR6), Data));
}
int ReadReg7(unsigned short *Data){ 				// Reads out RR7 register
	return(ReadReg((volatile unsigned short*)(REG_ADDR + MCX514_RR7), Data));
}


///////////////////////////////////////////////////////////////////////////////////////
// Functions of commands for writing data
///////////////////////////////////////////////////////////////////////////////////////
int SetStartSpd(int Axis, long Data){ 				// Initial speed setting
	return(SetData(MCX514_CMD04_SV, Axis, Data));
}
int SetSpeed(int Axis, long Data){ 				// Drive speed setting
	return(SetData(MCX514_CMD05_DV, Axis, Data));
}
int SetJerk(int Axis, long Data){ 				// Jerk setting
	return(SetData(MCX514_CMD00_JK, Axis, Data));
}


int SetDJerk(int Axis, long Data){ 				// Deceleration increasing rate setting
	return(SetData(MCX514_CMD01_DJ, Axis, Data));
}
int SetAcc(int Axis, long Data){ 				// Acceleration setting
	return(SetData(MCX514_CMD02_AC, Axis, Data));
}
int SetDec(int Axis, long Data){ 				// Deceleration setting
	return(SetData(MCX514_CMD03_DC, Axis, Data));
}
int SetPulse(int Axis, long Data){ 				// Drive pulse number / Finish point setting
	return(SetData(MCX514_CMD06_TP, Axis, Data));
}

int SetDecP(int Axis, long Data){ 				// Manual deceleration point setting
	return(SetData(MCX514_CMD07_DP, Axis, Data));
}
int SetLp(int Axis, long Data){ 				// Logical position counter setting
	return(SetData(MCX514_CMD09_LP, Axis, (unsigned long)Data));
}
int SetRp(int Axis, long Data){ 				// Real position counter setting
	return(SetData(MCX514_CMD0A_RP, Axis, (unsigned long)Data));
}
int SetCompP(int Axis, long Data){ 				// Software limit + setting
	return(SetData(MCX514_CMD0B_SP, Axis, (unsigned long)Data));
}
int SetCompM(int Axis, long Data){ 				// Software limit âˆ’ setting
	return(SetData(MCX514_CMD0C_SM, Axis, (unsigned long)Data));
}
int SetAccOfst(int Axis, long Data){ 				// Acceleration counter offsetting
	return(SetData(MCX514_CMD0D_AO, Axis, Data));
}
int SetHomeSpd(int Axis, long Data){ 				// Home search speed setting
	return(SetData(MCX514_CMD14_HV, Axis, Data));
}
int SetLpMax(int Axis, long Data){ 				// Logical position counter maximum value setting
	return(SetData(MCX514_CMD0E_LX, Axis, Data));
}
int SetRpMax(int Axis, long Data){ 				// Real position counter maximum value setting
	return(SetData(MCX514_CMD0F_RX, Axis, Data));
}
int SetMR0(int Axis, long Data){ 				// Multi-purpose register 0 setting
	return(SetData(MCX514_CMD10_MR0, Axis, Data));
}
int SetMR1(int Axis, long Data){ 				// Multi-purpose register 1 setting
	return(SetData(MCX514_CMD11_MR1, Axis, Data));
}
int SetMR2(int Axis, long Data){ 				// Multi-purpose register 2 setting
	return(SetData(MCX514_CMD12_MR2, Axis, Data));
}
int SetMR3(int Axis, long Data){ 				// Multi-purpose register 3 setting
	return(SetData(MCX514_CMD13_MR3, Axis, Data));
}
int SetSpeedInc(int Axis, long Data){ 				// Speed increasing / decreasing value setting
	return(SetData(MCX514_CMD15_IV, Axis, Data));
}
int SetTimer(int Axis, long Data){ 				// Timer value setting
	return(SetData(MCX514_CMD16_TM, Axis, Data));
}
int SetSplit1(int Axis, unsigned short Data1, unsigned short Data2) {	// Split pulse setting 1
	unsigned long Data;

	Data = (((unsigned long)Data1 << 16) |  (unsigned long)Data2);
	return(SetData(MCX514_CMD17_SP1, Axis, Data));
}
int SetSplit2(int Axis, unsigned long Data){			// Split pulse setting 2
	return(SetData(MCX514_CMD18_SP2, Axis, Data));
}
int SetTPMax(long Data){					// Interpolation / Finish point maximum value setting
	return(SetData(MCX514_CMD39_TX, MCX514_AXIS_NONE, Data));
}
int SetHLNumber(unsigned short Data){				// Helical rotation number setting
	return(SetData(MCX514_CMD3A_CHLN, MCX514_AXIS_NONE, (long )Data));
}
int SetHLValue(long Data){					// Helical calculation value  setting
	return(SetData(MCX514_CMD3B_HLV, MCX514_AXIS_NONE, Data));
}


///////////////////////////////////////////////////////////////////////////////////////
// Functions of commands for writing mode
///////////////////////////////////////////////////////////////////////////////////////
int SetModeMRm(int Axis, unsigned short Data){ 			// Multi-purpose register mode setting
	return(SetModeData(MCX514_CMD20_MRM, Axis, Data));
}
int SetModePIO1(int Axis, unsigned short Data){ 			// PIO signal setting 1
	return(SetModeData(MCX514_CMD21_P1M, Axis, Data));
}
int SetModePIO2(int Axis, unsigned short Data){ 			// PIO signal setting 2ãƒ»Other settings
	return(SetModeData(MCX514_CMD22_P2M, Axis, Data));
}
int SetModeHMSrch1(int Axis, unsigned short Data){ 		// Automatic home search mode setting 1
	return(SetModeData(MCX514_CMD23_H1M, Axis, Data));
}
int SetModeHMSrch2(int Axis, unsigned short Data){ 		// Automatic home search mode setting 2
	return(SetModeData(MCX514_CMD24_H2M, Axis, Data));
}
int SetModeFilter(int Axis, unsigned short Data){ 			// Input signal filter mode setting
	return(SetModeData(MCX514_CMD25_FLM, Axis, Data));
}
int SetModeSync0(int Axis, unsigned short Data){ 			// Synchronous action SYNC0 setting
	return(SetModeData(MCX514_CMD26_S0M, Axis, Data));
}
int SetModeSync1(int Axis, unsigned short Data){ 			// Synchronous action SYNC1 setting
	return(SetModeData(MCX514_CMD27_S1M, Axis, Data));
}
int SetModeSync2(int Axis, unsigned short Data){ 			// Synchronous action SYNC2 setting
	return(SetModeData(MCX514_CMD28_S2M, Axis, Data));
}
int SetModeSync3(int Axis, unsigned short Data){ 			// Synchronous action SYNC3 setting
	return(SetModeData(MCX514_CMD29_S3M, Axis, Data));
}
int SetModeIPM(unsigned short Data){ 				// Interpolation mode setting
	return(SetModeData(MCX514_CMD2A_IPM, MCX514_AXIS_NONE, Data));
}


///////////////////////////////////////////////////////////////////////////////////////
// Functions of commands for reading data
///////////////////////////////////////////////////////////////////////////////////////
int GetLp(int Axis, long *Data){				// Logical position counter reading
	return(GetData(MCX514_CMD30_LP, Axis, (unsigned long*) Data));
}
int GetRp(int Axis, unsigned long *Data){			// Real position counter reading
	return(GetData(MCX514_CMD31_RP, Axis, (unsigned long*) Data));
}
int GetCV(int Axis, unsigned long *Data){ 			// Current drive speed reading
	return(GetData(MCX514_CMD32_CV, Axis, Data));
}
int GetCA(int Axis, unsigned long *Data){			// Current acceleration/deceleration reading
	return(GetData(MCX514_CMD33_CA, Axis, Data));
}
int GetCT(int Axis, unsigned long *Data){			// Current timer value reading
	return(GetData(MCX514_CMD38_CT, Axis, Data));
}
int GetMR0(int Axis, unsigned long *Data){			// Multi-purpose register 0 reading
	return(GetData(MCX514_CMD34_MR0, Axis, Data));
}
int GetMR1(int Axis, unsigned long *Data){			// Multi-purpose register 1 reading
	return(GetData(MCX514_CMD35_MR1, Axis, Data));
}

int GetMR2(int Axis, unsigned long *Data){			// Multi-purpose register 2 reading
	return(GetData(MCX514_CMD36_MR2, Axis, Data));
}
int GetMR3(int Axis, unsigned long *Data){			// Multi-purpose register 3 reading
	return(GetData(MCX514_CMD37_MR3, Axis, Data));
}
int GetTX(unsigned long *Data){				// Interpolation/Finish point maximum value reading
	return(GetData(MCX514_CMD39_TX, MCX514_AXIS_NONE, Data));
}
int GetCHLN(unsigned long *Data){				// Current helical rotation number reading
	return(GetData(MCX514_CMD3A_CHLN, MCX514_AXIS_NONE, Data));
}
int GetHLV(unsigned long *Data){				// Helical calculation value reading
	return(GetData(MCX514_CMD3B_HLV, MCX514_AXIS_NONE, Data));
}

int GetWR1(int Axis, unsigned long *Data){			// WR1 setting value reading
	return(GetData(MCX514_CMD3D_WR1, Axis, Data));
}
int GetWR2(int Axis, unsigned long *Data){			// WR2 setting value reading
	return(GetData(MCX514_CMD3E_WR2, Axis, Data));
}
int GetWR3(int Axis, unsigned long *Data){			// WR3 setting value reading
	return(GetData(MCX514_CMD3F_WR3, Axis, Data));
}
int GetMRM(int Axis, unsigned long *Data){			// Multi-purpose register mode setting reading
	return(GetData(MCX514_CMD40_MRM, Axis, Data));
}
int GetP1M(int Axis, unsigned long *Data){			// PIO signal setting 1 reading
	return(GetData(MCX514_CMD41_P1M, Axis, Data));
}
int GetP2M(int Axis, unsigned long *Data){			// PIO signal setting 2ãƒ»Other settings reading
	return(GetData(MCX514_CMD42_P2M, Axis, Data));
}
int GetAc(int Axis, unsigned long *Data ){			// Acceleration setting value reading
	return(GetData(MCX514_CMD43_AC, Axis, Data));
}
int GetStartSpd(int Axis, unsigned long *Data ){			// Initial speed setting value reading
	return(GetData(MCX514_CMD44_SV, Axis, Data));
}
int GetSpeed(int Axis, unsigned long *Data ){			// Drive speed setting value reading
	return(GetData(MCX514_CMD45_DV, Axis, Data));
}
int GetPulse(int Axis, unsigned long *Data ){			// Drive pulse number/Finish point setting value reading
	return(GetData(MCX514_CMD46_TP, Axis, Data));
}
int GetSplit(int Axis, unsigned long *Data ){			// Split pulse setting 1 reading
	return(GetData(MCX514_CMD47_SP1, Axis, Data));
}
int GetUI(unsigned long *Data ){ 				// General purpose input value reading
	return(GetData(MCX514_CMD48_UI, MCX514_AXIS_NONE, Data));
}


///////////////////////////////////////////////////////////////////////////////////////
// Driving command functions
///////////////////////////////////////////////////////////////////////////////////////
int ExeDRVRL(int Axis){ 					// Relative position driving
	return (ExeCmd(MCX514_CMD50_DRVRL, Axis));
}
int ExeDRVNR(int Axis){ 					// Counter relative position driving
	return (ExeCmd(MCX514_CMD51_DRVNR, Axis));
}
int ExeDRVVP(int Axis){ 					// + Direction continuous pulse driving
	return (ExeCmd(MCX514_CMD52_DRVVP, Axis));
}
int ExeDRVVM(int Axis){ 					// âˆ’ Direction continuous pulse driving
	return (ExeCmd(MCX514_CMD53_DRVVM, Axis));
}
int ExeDRVAB(int Axis){ 					// Absolute position driving
	return (ExeCmd(MCX514_CMD54_DRVAB, Axis));
}
int ExeDRVSBRK(int Axis){ 					// Decelerating stop
	return (ExeCmd(MCX514_CMD56_DRVSBRK, Axis));
}
int ExeDRVFBRK(int Axis){ 					// Instant stop
	return (ExeCmd(MCX514_CMD57_DRVFBRK, Axis));
}
int ExeDIRCP(int Axis){ 					// Direction signal + setting
	return (ExeCmd(MCX514_CMD58_DIRCP, Axis));
}
int ExeDIRCM(int Axis){ 					// Direction signal âˆ’ setting
	return (ExeCmd(MCX514_CMD59_DIRCM, Axis));
}
int ExeHMSRC(int Axis){ 					// Automatic home search execution
	return (ExeCmd(MCX514_CMD5A_HMSRC, Axis));
}


///////////////////////////////////////////////////////////////////////////////////////
// Interpolation command functions
///////////////////////////////////////////////////////////////////////////////////////
int ExeLHK1(void ){ 						// 1-axis linear interpolation driving (multichip)
	return (ExeCmd(MCX514_CMD60_LHK1, MCX514_AXIS_NONE));
}
int ExeLHK2(void ){ 						// 2-axis linear interpolation driving
	return (ExeCmd(MCX514_CMD61_LHK2, MCX514_AXIS_NONE));
}
int ExeLHK3(void ){ 						// 3-axis linear interpolation driving
	return (ExeCmd(MCX514_CMD62_LHK3, MCX514_AXIS_NONE));
}
int ExeLHK4(void ){ 						// 4-axis linear interpolation driving
	return (ExeCmd(MCX514_CMD63_LHK4, MCX514_AXIS_NONE));
}
int ExeCHKCW(void ){ 					// CW circular interpolation driving
	return (ExeCmd(MCX514_CMD64_CHKCW, MCX514_AXIS_NONE));
}
int ExeCHKCCW(void ){ 					// CCW circular interpolation driving
	return (ExeCmd(MCX514_CMD65_CHKCCW, MCX514_AXIS_NONE));
}
int ExeBHK2(void ){ 						// 2-axis bit pattern interpolation driving
	return (ExeCmd(MCX514_CMD66_BHK2, MCX514_AXIS_NONE));
}
int ExeBHK3(void ){ 						// 3-axis bit pattern interpolation driving
	return (ExeCmd(MCX514_CMD67_BHK3, MCX514_AXIS_NONE));
}
int ExeBHK4(void ){ 						// 4-axis bit pattern interpolation driving
	return (ExeCmd(MCX514_CMD68_BHK4, MCX514_AXIS_NONE));
}
int ExeHLCW(void ){ 						// CW helical interpolation driving
	return (ExeCmd(MCX514_CMD69_HLCW, MCX514_AXIS_NONE));
}
int ExeHLCCW(void ){ 					// CCW helical interpolation driving
	return (ExeCmd(MCX514_CMD6A_HLCCW, MCX514_AXIS_NONE));
}
int ExeHLPCW(void ){ 					// CW helical calculation
	return (ExeCmd(MCX514_CMD6B_HLPCW, MCX514_AXIS_NONE));
}
int ExeHLPCCW(void ){ 					// CCW helical calculation
	return (ExeCmd(MCX514_CMD6C_HLPCCW, MCX514_AXIS_NONE));
}
int ExeDECEN(void ){	 					// Deceleration enabling
	return (ExeCmd(MCX514_CMD6D_DECEN, MCX514_AXIS_NONE));
}
int ExeDECDIS(void ){	 				// Deceleration disabling
	return (ExeCmd(MCX514_CMD6E_DECDIS, MCX514_AXIS_NONE));
}
int ExeCLRSTEP(void ){	 			// Interpolation interrupt clear / Single-step interpolation
	return (ExeCmd(MCX514_CMD6F_CLRSTEP, MCX514_AXIS_NONE));
}


///////////////////////////////////////////////////////////////////////////////////////
// Synchronous action operation command function
///////////////////////////////////////////////////////////////////////////////////////
int ExeSYNC(int Axis, unsigned short Cmd){ 			// Command related to synchronous action
	return (ExeCmd(Cmd, Axis));
}

///////////////////////////////////////////////////////////////////////////////////////
// Other Commands functions
///////////////////////////////////////////////////////////////////////////////////////
int ExeVINC(int Axis){ 					// Speed increase
	return (ExeCmd(MCX514_CMD70_VINC, Axis));
}
int ExeVDEC(int Axis){ 					// Speed decrease
	return (ExeCmd(MCX514_CMD71_VDEC, Axis));
}
int ExeDCC(int Axis){ 					// Deviation counter clear output
	return (ExeCmd(MCX514_CMD72_DCC, Axis));
}
int ExeTMSTA(int Axis){ 					// Timer-start
	return (ExeCmd(MCX514_CMD73_TMSTA, Axis));
}
int ExeTMSTP(int Axis){ 					// Timer-stop
	return (ExeCmd(MCX514_CMD74_TMSTP, Axis));
}
int ExeSPSTA(int Axis){ 					// Split pulse start
	return (ExeCmd(MCX514_CMD75_SPSTA, Axis));
}
int ExeSPSTP(int Axis){ 					// Split pulse stop
	return (ExeCmd(MCX514_CMD76_SPSTP, Axis));
}
int ExeDHOLD(int Axis){ 					// Drive start holding
	return (ExeCmd(MCX514_CMD77_DHOLD, Axis));
}
int ExeDFREE (int Axis){ 					// Drive start holding release
	return (ExeCmd(MCX514_CMD78_DFREE, Axis));
}
int ExeR2CLR(int Axis){ 					// Error / Finishing status clear
	return (ExeCmd(MCX514_CMD79_R2CLR, Axis));
}
int ExeRR3P0(int Axis){ 					// RR3 Page0 display
	return (ExeCmd(MCX514_CMD7A_RR3P0, Axis));
}
int ExeRR3P1(int Axis){ 					// RR3 Page1 display
	return (ExeCmd(MCX514_CMD7B_RR3P1, Axis));
}
int ExeNOP(int Axis){ 					// NOP
	return (ExeCmd(MCX514_CMD1F_NOP, Axis));
}
int ExeSRST(void ){ 						// Command reset
	return (ExeCmd(MCX514_CMDFF_RST, MCX514_AXIS_NONE));
}
