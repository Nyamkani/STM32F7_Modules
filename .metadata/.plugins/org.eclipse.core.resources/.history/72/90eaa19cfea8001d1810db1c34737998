
mcx514.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d80  08004d80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d88  08004d88  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000000c  08004d9c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200003e4  08004d9c  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f7e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279b  00000000  00000000  00034fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00037758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00038808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002682b  00000000  00000000  000397c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001367f  00000000  00000000  0005ffeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f31fd  00000000  00000000  0007366a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  001668b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004d50 	.word	0x08004d50

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004d50 	.word	0x08004d50

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SCB_EnableICache+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052a:	f3bf 8f6f 	isb	sy
}
 800052e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SCB_EnableICache+0x48>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SCB_EnableICache+0x48>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
}
 8000540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy
}
 8000546:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SCB_EnableDCache+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <SCB_EnableDCache+0x84>)
 800056e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000572:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0b5b      	lsrs	r3, r3, #13
 8000578:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800057c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000586:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	015a      	lsls	r2, r3, #5
 800058c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000590:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000596:	4911      	ldr	r1, [pc, #68]	; (80005dc <SCB_EnableDCache+0x84>)
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ef      	bne.n	8000588 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	60fa      	str	r2, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1e5      	bne.n	800057e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b2:	f3bf 8f4f 	dsb	sy
}
 80005b6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableDCache+0x84>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableDCache+0x84>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005e4:	f7ff ff92 	bl	800050c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005e8:	f7ff ffb6 	bl	8000558 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 ff41 	bl	8001472 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f814 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fa42 	bl	8000a7c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005f8:	f000 f87e 	bl	80006f8 <MX_CAN1_Init>
  MX_FMC_Init();
 80005fc:	f000 f9dc 	bl	80009b8 <MX_FMC_Init>
  MX_UART4_Init();
 8000600:	f000 f8e6 	bl	80007d0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f946 	bl	8000894 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f974 	bl	80008f4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800060c:	f000 f9a2 	bl	8000954 <MX_USART6_UART_Init>
  MX_UART5_Init();
 8000610:	f000 f90e 	bl	8000830 <MX_UART5_Init>
  MX_TIM7_Init();
 8000614:	f000 f8a6 	bl	8000764 <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x38>
	...

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fb88 	bl	8004d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0xd4>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	4b26      	ldr	r3, [pc, #152]	; (80006f4 <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a25      	ldr	r2, [pc, #148]	; (80006f4 <SystemClock_Config+0xd8>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b23      	ldr	r3, [pc, #140]	; (80006f4 <SystemClock_Config+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000684:	2319      	movs	r3, #25
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000688:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fdd4 	bl	8002248 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a6:	f000 fae9 	bl	8000c7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006aa:	f001 fd7d 	bl	80021a8 <HAL_PWREx_EnableOverDrive>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b4:	f000 fae2 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2107      	movs	r1, #7
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 f85a 	bl	8002790 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006e2:	f000 facb 	bl	8000c7c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_CAN1_Init+0x64>)
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <MX_CAN1_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_CAN1_Init+0x64>)
 8000704:	220c      	movs	r2, #12
 8000706:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_CAN1_Init+0x64>)
 8000716:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800071a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_CAN1_Init+0x64>)
 800071e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000722:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_CAN1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_CAN1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_CAN1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_CAN1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_CAN1_Init+0x64>)
 800074a:	f000 febf 	bl	80014cc <HAL_CAN_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000754:	f000 fa92 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000028 	.word	0x20000028
 8000760:	40006400 	.word	0x40006400

08000764 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_TIM7_Init+0x64>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_TIM7_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_TIM7_Init+0x64>)
 800077c:	226b      	movs	r2, #107	; 0x6b
 800077e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_TIM7_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_TIM7_Init+0x64>)
 8000788:	2263      	movs	r2, #99	; 0x63
 800078a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_TIM7_Init+0x64>)
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_TIM7_Init+0x64>)
 8000794:	f002 fe4c 	bl	8003430 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800079e:	f000 fa6d 	bl	8000c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_TIM7_Init+0x64>)
 80007b0:	f003 f8f6 	bl	80039a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007ba:	f000 fa5f 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000050 	.word	0x20000050
 80007cc:	40001400 	.word	0x40001400

080007d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_UART4_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_UART4_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_UART4_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_UART4_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_UART4_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_UART4_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_UART4_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_UART4_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_UART4_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_UART4_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_UART4_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_UART4_Init+0x58>)
 8000814:	f003 f970 	bl	8003af8 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 fa2d 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000009c 	.word	0x2000009c
 800082c:	40004c00 	.word	0x40004c00

08000830 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_UART5_Init+0x5c>)
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <MX_UART5_Init+0x60>)
 8000838:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_UART5_Init+0x5c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_UART5_Init+0x5c>)
 8000844:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000848:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_UART5_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_UART5_Init+0x5c>)
 8000852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000856:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_UART5_Init+0x5c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_UART5_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_UART5_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_UART5_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_UART5_Init+0x5c>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_UART5_Init+0x5c>)
 8000878:	f003 f93e 	bl	8003af8 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_UART5_Init+0x56>
  {
    Error_Handler();
 8000882:	f000 f9fb 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000124 	.word	0x20000124
 8000890:	40005000 	.word	0x40005000

08000894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART1_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART1_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART1_UART_Init+0x58>)
 80008d8:	f003 f90e 	bl	8003af8 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f9cb 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001ac 	.word	0x200001ac
 80008f0:	40011000 	.word	0x40011000

080008f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART3_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART3_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART3_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART3_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART3_UART_Init+0x58>)
 8000938:	f003 f8de 	bl	8003af8 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f99b 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000234 	.word	0x20000234
 8000950:	40004800 	.word	0x40004800

08000954 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MX_USART6_UART_Init+0x60>)
 800095c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART6_UART_Init+0x5c>)
 800099c:	f003 f8ac 	bl	8003af8 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART6_UART_Init+0x56>
  {
    Error_Handler();
 80009a6:	f000 f969 	bl	8000c7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002bc 	.word	0x200002bc
 80009b4:	40011400 	.word	0x40011400

080009b8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009d2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80009d6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009d8:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009da:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <MX_FMC_Init+0xc0>)
 80009dc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009f0:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009f2:	2210      	movs	r2, #16
 80009f4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_FMC_Init+0xbc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a32:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000a4e:	2311      	movs	r3, #17
 8000a50:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_FMC_Init+0xbc>)
 8000a5e:	f002 fc9f 	bl	80033a0 <HAL_SRAM_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000a68:	f000 f908 	bl	8000c7c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000344 	.word	0x20000344
 8000a78:	a0000104 	.word	0xa0000104

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a92:	4b6b      	ldr	r3, [pc, #428]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a6a      	ldr	r2, [pc, #424]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b68      	ldr	r3, [pc, #416]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b65      	ldr	r3, [pc, #404]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a64      	ldr	r2, [pc, #400]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a5e      	ldr	r2, [pc, #376]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ac8:	f043 0320 	orr.w	r3, r3, #32
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0320 	and.w	r3, r3, #32
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b56      	ldr	r3, [pc, #344]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b53      	ldr	r3, [pc, #332]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a52      	ldr	r2, [pc, #328]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3e      	ldr	r3, [pc, #248]	; (8000c40 <MX_GPIO_Init+0x1c4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8000b52:	2200      	movs	r2, #0
 8000b54:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000b58:	483a      	ldr	r0, [pc, #232]	; (8000c44 <MX_GPIO_Init+0x1c8>)
 8000b5a:	f001 fb0b 	bl	8002174 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000b64:	4838      	ldr	r0, [pc, #224]	; (8000c48 <MX_GPIO_Init+0x1cc>)
 8000b66:	f001 fb05 	bl	8002174 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b70:	4836      	ldr	r0, [pc, #216]	; (8000c4c <MX_GPIO_Init+0x1d0>)
 8000b72:	f001 faff 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8000b76:	237f      	movs	r3, #127	; 0x7f
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b86:	4619      	mov	r1, r3
 8000b88:	4831      	ldr	r0, [pc, #196]	; (8000c50 <MX_GPIO_Init+0x1d4>)
 8000b8a:	f001 f947 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 8000b8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482a      	ldr	r0, [pc, #168]	; (8000c4c <MX_GPIO_Init+0x1d0>)
 8000ba4:	f001 f93a 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8000ba8:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4820      	ldr	r0, [pc, #128]	; (8000c44 <MX_GPIO_Init+0x1c8>)
 8000bc2:	f001 f92b 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8000bc6:	f240 33c7 	movw	r3, #967	; 0x3c7
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481a      	ldr	r0, [pc, #104]	; (8000c48 <MX_GPIO_Init+0x1cc>)
 8000be0:	f001 f91c 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8000be4:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4816      	ldr	r0, [pc, #88]	; (8000c54 <MX_GPIO_Init+0x1d8>)
 8000bfa:	f001 f90f 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 8000bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_GPIO_Init+0x1d0>)
 8000c18:	f001 f900 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_GPIO_Init+0x1cc>)
 8000c34:	f001 f8f2 	bl	8001e1c <HAL_GPIO_Init>

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40021400 	.word	0x40021400
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40021800 	.word	0x40021800

08000c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6a:	f000 fc0f 	bl	800148c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40001000 	.word	0x40001000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_CAN_MspInit+0x8c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d130      	bne.n	8000d54 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_CAN_MspInit+0x90>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a1a      	ldr	r2, [pc, #104]	; (8000d60 <HAL_CAN_MspInit+0x90>)
 8000cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_CAN_MspInit+0x90>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_CAN_MspInit+0x90>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_CAN_MspInit+0x90>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_CAN_MspInit+0x90>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d34:	2309      	movs	r3, #9
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <HAL_CAN_MspInit+0x94>)
 8000d40:	f001 f86c 	bl	8001e1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2108      	movs	r1, #8
 8000d48:	2014      	movs	r0, #20
 8000d4a:	f000 ffab 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d4e:	2014      	movs	r0, #20
 8000d50:	f000 ffc4 	bl	8001cdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40006400 	.word	0x40006400
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_TIM_Base_MspInit+0x44>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d113      	bne.n	8000da2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_TIM_Base_MspInit+0x48>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <HAL_TIM_Base_MspInit+0x48>)
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_TIM_Base_MspInit+0x48>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0320 	and.w	r3, r3, #32
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2107      	movs	r1, #7
 8000d96:	2037      	movs	r0, #55	; 0x37
 8000d98:	f000 ff84 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d9c:	2037      	movs	r0, #55	; 0x37
 8000d9e:	f000 ff9d 	bl	8001cdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40001400 	.word	0x40001400
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0b4      	sub	sp, #208	; 0xd0
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd0:	2284      	movs	r2, #132	; 0x84
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 ffb3 	bl	8004d40 <memset>
  if(huart->Instance==UART4)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4aa6      	ldr	r2, [pc, #664]	; (8001078 <HAL_UART_MspInit+0x2c4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d146      	bne.n	8000e72 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 fee3 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e00:	f7ff ff3c 	bl	8000c7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e04:	4b9d      	ldr	r3, [pc, #628]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a9c      	ldr	r2, [pc, #624]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b9a      	ldr	r3, [pc, #616]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	4b97      	ldr	r3, [pc, #604]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a96      	ldr	r2, [pc, #600]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b94      	ldr	r3, [pc, #592]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4889      	ldr	r0, [pc, #548]	; (8001080 <HAL_UART_MspInit+0x2cc>)
 8000e5c:	f000 ffde 	bl	8001e1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2108      	movs	r1, #8
 8000e64:	2034      	movs	r0, #52	; 0x34
 8000e66:	f000 ff1d 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e6a:	2034      	movs	r0, #52	; 0x34
 8000e6c:	f000 ff36 	bl	8001cdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e70:	e15e      	b.n	8001130 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a83      	ldr	r2, [pc, #524]	; (8001084 <HAL_UART_MspInit+0x2d0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d167      	bne.n	8000f4c <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fe97 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000e98:	f7ff fef0 	bl	8000c7c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e9c:	4b77      	ldr	r3, [pc, #476]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a76      	ldr	r2, [pc, #472]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b74      	ldr	r3, [pc, #464]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	4b71      	ldr	r3, [pc, #452]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a70      	ldr	r2, [pc, #448]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a6a      	ldr	r2, [pc, #424]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000efe:	2308      	movs	r3, #8
 8000f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f08:	4619      	mov	r1, r3
 8000f0a:	485d      	ldr	r0, [pc, #372]	; (8001080 <HAL_UART_MspInit+0x2cc>)
 8000f0c:	f000 ff86 	bl	8001e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f32:	4619      	mov	r1, r3
 8000f34:	4854      	ldr	r0, [pc, #336]	; (8001088 <HAL_UART_MspInit+0x2d4>)
 8000f36:	f000 ff71 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2035      	movs	r0, #53	; 0x35
 8000f40:	f000 feb0 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000f44:	2035      	movs	r0, #53	; 0x35
 8000f46:	f000 fec9 	bl	8001cdc <HAL_NVIC_EnableIRQ>
}
 8000f4a:	e0f1      	b.n	8001130 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a4e      	ldr	r2, [pc, #312]	; (800108c <HAL_UART_MspInit+0x2d8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d144      	bne.n	8000fe0 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f56:	2340      	movs	r3, #64	; 0x40
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fe2c 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8000f6e:	f7ff fe85 	bl	8000c7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f72:	4b42      	ldr	r3, [pc, #264]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a41      	ldr	r2, [pc, #260]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b3f      	ldr	r3, [pc, #252]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b3c      	ldr	r3, [pc, #240]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b39      	ldr	r3, [pc, #228]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4831      	ldr	r0, [pc, #196]	; (8001090 <HAL_UART_MspInit+0x2dc>)
 8000fca:	f000 ff27 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	210e      	movs	r1, #14
 8000fd2:	2025      	movs	r0, #37	; 0x25
 8000fd4:	f000 fe66 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fd8:	2025      	movs	r0, #37	; 0x25
 8000fda:	f000 fe7f 	bl	8001cdc <HAL_NVIC_EnableIRQ>
}
 8000fde:	e0a7      	b.n	8001130 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <HAL_UART_MspInit+0x2e0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d158      	bne.n	800109c <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fde0 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_UART_MspInit+0x256>
      Error_Handler();
 8001006:	f7ff fe39 	bl	8000c7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <HAL_UART_MspInit+0x2c8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a1b      	ldr	r2, [pc, #108]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_UART_MspInit+0x2c8>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800103a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800103e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800105e:	4619      	mov	r1, r3
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <HAL_UART_MspInit+0x2e4>)
 8001062:	f000 fedb 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2108      	movs	r1, #8
 800106a:	2027      	movs	r0, #39	; 0x27
 800106c:	f000 fe1a 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001070:	2027      	movs	r0, #39	; 0x27
 8001072:	f000 fe33 	bl	8001cdc <HAL_NVIC_EnableIRQ>
}
 8001076:	e05b      	b.n	8001130 <HAL_UART_MspInit+0x37c>
 8001078:	40004c00 	.word	0x40004c00
 800107c:	40023800 	.word	0x40023800
 8001080:	40020800 	.word	0x40020800
 8001084:	40005000 	.word	0x40005000
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40011000 	.word	0x40011000
 8001090:	40020000 	.word	0x40020000
 8001094:	40004800 	.word	0x40004800
 8001098:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a25      	ldr	r2, [pc, #148]	; (8001138 <HAL_UART_MspInit+0x384>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d144      	bne.n	8001130 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80010a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fd82 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_UART_MspInit+0x312>
      Error_Handler();
 80010c2:	f7ff fddb 	bl	8000c7c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_UART_MspInit+0x388>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_UART_MspInit+0x388>)
 80010cc:	f043 0320 	orr.w	r3, r3, #32
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_UART_MspInit+0x388>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_UART_MspInit+0x388>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a16      	ldr	r2, [pc, #88]	; (800113c <HAL_UART_MspInit+0x388>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_UART_MspInit+0x388>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f6:	23c0      	movs	r3, #192	; 0xc0
 80010f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800110e:	2308      	movs	r3, #8
 8001110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001118:	4619      	mov	r1, r3
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_UART_MspInit+0x38c>)
 800111c:	f000 fe7e 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2108      	movs	r1, #8
 8001124:	2047      	movs	r0, #71	; 0x47
 8001126:	f000 fdbd 	bl	8001ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800112a:	2047      	movs	r0, #71	; 0x47
 800112c:	f000 fdd6 	bl	8001cdc <HAL_NVIC_EnableIRQ>
}
 8001130:	bf00      	nop
 8001132:	37d0      	adds	r7, #208	; 0xd0
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40011400 	.word	0x40011400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020800 	.word	0x40020800

08001144 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_FMC_MspInit+0xa4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d13e      	bne.n	80011de <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_FMC_MspInit+0xa4>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <HAL_FMC_MspInit+0xa8>)
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_FMC_MspInit+0xa8>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6393      	str	r3, [r2, #56]	; 0x38
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <HAL_FMC_MspInit+0xa8>)
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800117e:	2307      	movs	r3, #7
 8001180:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4816      	ldr	r0, [pc, #88]	; (80011f0 <HAL_FMC_MspInit+0xac>)
 8001198:	f000 fe40 	bl	8001e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800119c:	f64f 7380 	movw	r3, #65408	; 0xff80
 80011a0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ae:	230c      	movs	r3, #12
 80011b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	480f      	ldr	r0, [pc, #60]	; (80011f4 <HAL_FMC_MspInit+0xb0>)
 80011b8:	f000 fe30 	bl	8001e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80011bc:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80011c0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ce:	230c      	movs	r3, #12
 80011d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <HAL_FMC_MspInit+0xb4>)
 80011d8:	f000 fe20 	bl	8001e1c <HAL_GPIO_Init>
 80011dc:	e000      	b.n	80011e0 <HAL_FMC_MspInit+0x9c>
    return;
 80011de:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000390 	.word	0x20000390
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40020c00 	.word	0x40020c00

080011fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001204:	f7ff ff9e 	bl	8001144 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_InitTick+0xe0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_InitTick+0xe0>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_InitTick+0xe0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001238:	f107 0210 	add.w	r2, r7, #16
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fc8a 	bl	8002b5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001252:	f001 fc5b 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8001256:	6378      	str	r0, [r7, #52]	; 0x34
 8001258:	e004      	b.n	8001264 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800125a:	f001 fc57 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 800125e:	4603      	mov	r3, r0
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_InitTick+0xe4>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	3b01      	subs	r3, #1
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_InitTick+0xe8>)
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <HAL_InitTick+0xec>)
 8001276:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_InitTick+0xe8>)
 800127a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_InitTick+0xe8>)
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_InitTick+0xe8>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_InitTick+0xe8>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_InitTick+0xe8>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001298:	4817      	ldr	r0, [pc, #92]	; (80012f8 <HAL_InitTick+0xe8>)
 800129a:	f002 f8c9 	bl	8003430 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11b      	bne.n	80012e4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <HAL_InitTick+0xe8>)
 80012ae:	f002 f917 	bl	80034e0 <HAL_TIM_Base_Start_IT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d111      	bne.n	80012e4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012c0:	2036      	movs	r0, #54	; 0x36
 80012c2:	f000 fd0b 	bl	8001cdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d808      	bhi.n	80012de <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	2036      	movs	r0, #54	; 0x36
 80012d2:	f000 fce7 	bl	8001ca4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0xf0>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e002      	b.n	80012e4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3738      	adds	r7, #56	; 0x38
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	20000394 	.word	0x20000394
 80012fc:	40001000 	.word	0x40001000
 8001300:	20000004 	.word	0x20000004

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <CAN1_RX0_IRQHandler+0x10>)
 8001362:	f000 f9ae 	bl	80016c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000028 	.word	0x20000028

08001370 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <USART1_IRQHandler+0x10>)
 8001376:	f002 fc0d 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001ac 	.word	0x200001ac

08001384 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART3_IRQHandler+0x10>)
 800138a:	f002 fc03 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000234 	.word	0x20000234

08001398 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <UART4_IRQHandler+0x10>)
 800139e:	f002 fbf9 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000009c 	.word	0x2000009c

080013ac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <UART5_IRQHandler+0x10>)
 80013b2:	f002 fbef 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000124 	.word	0x20000124

080013c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <TIM6_DAC_IRQHandler+0x10>)
 80013c6:	f002 f903 	bl	80035d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000394 	.word	0x20000394

080013d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <TIM7_IRQHandler+0x10>)
 80013da:	f002 f8f9 	bl	80035d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000050 	.word	0x20000050

080013e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART6_IRQHandler+0x10>)
 80013ee:	f002 fbd1 	bl	8003b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002bc 	.word	0x200002bc

080013fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001426:	490e      	ldr	r1, [pc, #56]	; (8001460 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001428:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800143c:	4c0b      	ldr	r4, [pc, #44]	; (800146c <LoopFillZerobss+0x26>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144a:	f7ff ffd7 	bl	80013fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f003 fc53 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001452:	f7ff f8c5 	bl	80005e0 <main>
  bx  lr    
 8001456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001458:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001464:	08004d90 	.word	0x08004d90
  ldr r2, =_sbss
 8001468:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800146c:	200003e4 	.word	0x200003e4

08001470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC_IRQHandler>

08001472 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001476:	2003      	movs	r0, #3
 8001478:	f000 fc09 	bl	8001c8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800147c:	200f      	movs	r0, #15
 800147e:	f7ff fec7 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001482:	f7ff fc01 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	200003e0 	.word	0x200003e0

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200003e0 	.word	0x200003e0

080014cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e0ed      	b.n	80016ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fbf0 	bl	8000cd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ffd8 	bl	80014b4 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff ffd4 	bl	80014b4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0c5      	b.n	80016ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0e5      	beq.n	8001508 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0202 	bic.w	r2, r2, #2
 800154a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800154c:	f7ff ffb2 	bl	80014b4 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001552:	e012      	b.n	800157a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001554:	f7ff ffae 	bl	80014b4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b0a      	cmp	r3, #10
 8001560:	d90b      	bls.n	800157a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2205      	movs	r2, #5
 8001572:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e09f      	b.n	80016ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1e5      	bne.n	8001554 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7e1b      	ldrb	r3, [r3, #24]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d108      	bne.n	80015a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e007      	b.n	80015b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7e5b      	ldrb	r3, [r3, #25]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e007      	b.n	80015dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e9b      	ldrb	r3, [r3, #26]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0220 	orr.w	r2, r2, #32
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e007      	b.n	8001606 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0220 	bic.w	r2, r2, #32
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7edb      	ldrb	r3, [r3, #27]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0210 	bic.w	r2, r2, #16
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e007      	b.n	8001630 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0210 	orr.w	r2, r2, #16
 800162e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7f1b      	ldrb	r3, [r3, #28]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0208 	orr.w	r2, r2, #8
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e007      	b.n	800165a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f5b      	ldrb	r3, [r3, #29]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0204 	orr.w	r2, r2, #4
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	e007      	b.n	8001684 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0204 	bic.w	r2, r2, #4
 8001682:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	ea42 0103 	orr.w	r1, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	1e5a      	subs	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b08a      	sub	sp, #40	; 0x28
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b00      	cmp	r3, #0
 8001706:	d07c      	beq.n	8001802 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d023      	beq.n	800175a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f983 	bl	8001a30 <HAL_CAN_TxMailbox0CompleteCallback>
 800172a:	e016      	b.n	800175a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
 800173e:	e00c      	b.n	800175a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d004      	beq.n	8001754 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
 8001752:	e002      	b.n	800175a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f989 	bl	8001a6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d024      	beq.n	80017ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f963 	bl	8001a44 <HAL_CAN_TxMailbox1CompleteCallback>
 800177e:	e016      	b.n	80017ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	e00c      	b.n	80017ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
 80017a6:	e002      	b.n	80017ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f969 	bl	8001a80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d024      	beq.n	8001802 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f943 	bl	8001a58 <HAL_CAN_TxMailbox2CompleteCallback>
 80017d2:	e016      	b.n	8001802 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
 80017e6:	e00c      	b.n	8001802 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e002      	b.n	8001802 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f949 	bl	8001a94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00c      	beq.n	8001826 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2210      	movs	r2, #16
 8001824:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2208      	movs	r2, #8
 8001840:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f93a 	bl	8001abc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f921 	bl	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001880:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2210      	movs	r2, #16
 8001888:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2208      	movs	r2, #8
 80018a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f91c 	bl	8001ae4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f903 	bl	8001ad0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d006      	beq.n	80018ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2210      	movs	r2, #16
 80018e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f906 	bl	8001af8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f8ff 	bl	8001b0c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d07b      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d072      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197c:	2b00      	cmp	r3, #0
 800197e:	d043      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03e      	beq.n	8001a08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001990:	2b60      	cmp	r3, #96	; 0x60
 8001992:	d02b      	beq.n	80019ec <HAL_CAN_IRQHandler+0x32a>
 8001994:	2b60      	cmp	r3, #96	; 0x60
 8001996:	d82e      	bhi.n	80019f6 <HAL_CAN_IRQHandler+0x334>
 8001998:	2b50      	cmp	r3, #80	; 0x50
 800199a:	d022      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x320>
 800199c:	2b50      	cmp	r3, #80	; 0x50
 800199e:	d82a      	bhi.n	80019f6 <HAL_CAN_IRQHandler+0x334>
 80019a0:	2b40      	cmp	r3, #64	; 0x40
 80019a2:	d019      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x316>
 80019a4:	2b40      	cmp	r3, #64	; 0x40
 80019a6:	d826      	bhi.n	80019f6 <HAL_CAN_IRQHandler+0x334>
 80019a8:	2b30      	cmp	r3, #48	; 0x30
 80019aa:	d010      	beq.n	80019ce <HAL_CAN_IRQHandler+0x30c>
 80019ac:	2b30      	cmp	r3, #48	; 0x30
 80019ae:	d822      	bhi.n	80019f6 <HAL_CAN_IRQHandler+0x334>
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d002      	beq.n	80019ba <HAL_CAN_IRQHandler+0x2f8>
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d005      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019b8:	e01d      	b.n	80019f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c2:	e019      	b.n	80019f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	f043 0310 	orr.w	r3, r3, #16
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019cc:	e014      	b.n	80019f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019d6:	e00f      	b.n	80019f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019e0:	e00a      	b.n	80019f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ea:	e005      	b.n	80019f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019f4:	e000      	b.n	80019f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80019f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699a      	ldr	r2, [r3, #24]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f87c 	bl	8001b20 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <__NVIC_SetPriorityGrouping>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <__NVIC_SetPriorityGrouping+0x40>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x40>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	05fa0000 	.word	0x05fa0000

08001b7c <__NVIC_GetPriorityGrouping>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff4c 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb6:	f7ff ff61 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001cba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	6978      	ldr	r0, [r7, #20]
 8001cc2:	f7ff ffb1 	bl	8001c28 <NVIC_EncodePriority>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff80 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001cd4:	bf00      	nop
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff54 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d06:	f7ff fbd5 	bl	80014b4 <HAL_GetTick>
 8001d0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e052      	b.n	8001dd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0216 	bic.w	r2, r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_DMA_Abort+0x62>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7a:	e013      	b.n	8001da4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7c:	f7ff fb9a 	bl	80014b4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d90c      	bls.n	8001da4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e015      	b.n	8001dd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e4      	bne.n	8001d7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00c      	b.n	8001e10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2205      	movs	r2, #5
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e175      	b.n	8002128 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f040 8164 	bne.w	8002122 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d005      	beq.n	8001e72 <HAL_GPIO_Init+0x56>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d130      	bne.n	8001ed4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 0201 	and.w	r2, r3, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d017      	beq.n	8001f10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d123      	bne.n	8001f64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	08da      	lsrs	r2, r3, #3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3208      	adds	r2, #8
 8001f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	08da      	lsrs	r2, r3, #3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3208      	adds	r2, #8
 8001f5e:	69b9      	ldr	r1, [r7, #24]
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80be 	beq.w	8002122 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	4b66      	ldr	r3, [pc, #408]	; (8002140 <HAL_GPIO_Init+0x324>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a65      	ldr	r2, [pc, #404]	; (8002140 <HAL_GPIO_Init+0x324>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_GPIO_Init+0x324>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fbe:	4a61      	ldr	r2, [pc, #388]	; (8002144 <HAL_GPIO_Init+0x328>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a58      	ldr	r2, [pc, #352]	; (8002148 <HAL_GPIO_Init+0x32c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d037      	beq.n	800205a <HAL_GPIO_Init+0x23e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a57      	ldr	r2, [pc, #348]	; (800214c <HAL_GPIO_Init+0x330>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d031      	beq.n	8002056 <HAL_GPIO_Init+0x23a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a56      	ldr	r2, [pc, #344]	; (8002150 <HAL_GPIO_Init+0x334>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d02b      	beq.n	8002052 <HAL_GPIO_Init+0x236>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a55      	ldr	r2, [pc, #340]	; (8002154 <HAL_GPIO_Init+0x338>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d025      	beq.n	800204e <HAL_GPIO_Init+0x232>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_GPIO_Init+0x33c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01f      	beq.n	800204a <HAL_GPIO_Init+0x22e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a53      	ldr	r2, [pc, #332]	; (800215c <HAL_GPIO_Init+0x340>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d019      	beq.n	8002046 <HAL_GPIO_Init+0x22a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_GPIO_Init+0x344>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0x226>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_GPIO_Init+0x348>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00d      	beq.n	800203e <HAL_GPIO_Init+0x222>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_GPIO_Init+0x34c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d007      	beq.n	800203a <HAL_GPIO_Init+0x21e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4f      	ldr	r2, [pc, #316]	; (800216c <HAL_GPIO_Init+0x350>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_GPIO_Init+0x21a>
 8002032:	2309      	movs	r3, #9
 8002034:	e012      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002036:	230a      	movs	r3, #10
 8002038:	e010      	b.n	800205c <HAL_GPIO_Init+0x240>
 800203a:	2308      	movs	r3, #8
 800203c:	e00e      	b.n	800205c <HAL_GPIO_Init+0x240>
 800203e:	2307      	movs	r3, #7
 8002040:	e00c      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002042:	2306      	movs	r3, #6
 8002044:	e00a      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002046:	2305      	movs	r3, #5
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x240>
 800204a:	2304      	movs	r3, #4
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x240>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x240>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x240>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x328>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <HAL_GPIO_Init+0x354>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800209e:	4a34      	ldr	r2, [pc, #208]	; (8002170 <HAL_GPIO_Init+0x354>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <HAL_GPIO_Init+0x354>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c8:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_GPIO_Init+0x354>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_GPIO_Init+0x354>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_GPIO_Init+0x354>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_GPIO_Init+0x354>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_GPIO_Init+0x354>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f ae86 	bls.w	8001e3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40021800 	.word	0x40021800
 8002164:	40021c00 	.word	0x40021c00
 8002168:	40022000 	.word	0x40022000
 800216c:	40022400 	.word	0x40022400
 8002170:	40013c00 	.word	0x40013c00

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_PWREx_EnableOverDrive+0x98>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a22      	ldr	r2, [pc, #136]	; (8002240 <HAL_PWREx_EnableOverDrive+0x98>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_PWREx_EnableOverDrive+0x98>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021d6:	f7ff f96d 	bl	80014b4 <HAL_GetTick>
 80021da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021dc:	e009      	b.n	80021f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021de:	f7ff f969 	bl	80014b4 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ec:	d901      	bls.n	80021f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e022      	b.n	8002238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fe:	d1ee      	bne.n	80021de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002200:	4b10      	ldr	r3, [pc, #64]	; (8002244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0f      	ldr	r2, [pc, #60]	; (8002244 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800220a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800220c:	f7ff f952 	bl	80014b4 <HAL_GetTick>
 8002210:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002212:	e009      	b.n	8002228 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002214:	f7ff f94e 	bl	80014b4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002222:	d901      	bls.n	8002228 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e007      	b.n	8002238 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_PWREx_EnableOverDrive+0x9c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002234:	d1ee      	bne.n	8002214 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000

08002248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e291      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800226c:	4b96      	ldr	r3, [pc, #600]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b04      	cmp	r3, #4
 8002276:	d00c      	beq.n	8002292 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002278:	4b93      	ldr	r3, [pc, #588]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d112      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
 8002284:	4b90      	ldr	r3, [pc, #576]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002290:	d10b      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06c      	beq.n	8002378 <HAL_RCC_OscConfig+0x130>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d168      	bne.n	8002378 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e26b      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x7a>
 80022b4:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a83      	ldr	r2, [pc, #524]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e02e      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x9c>
 80022ca:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7e      	ldr	r2, [pc, #504]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b7c      	ldr	r3, [pc, #496]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7b      	ldr	r2, [pc, #492]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e01d      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0xc0>
 80022ee:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a75      	ldr	r2, [pc, #468]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a72      	ldr	r2, [pc, #456]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xd8>
 8002308:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6e      	ldr	r2, [pc, #440]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a6b      	ldr	r2, [pc, #428]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7ff f8c4 	bl	80014b4 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff f8c0 	bl	80014b4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e21f      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b61      	ldr	r3, [pc, #388]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff f8b0 	bl	80014b4 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff f8ac 	bl	80014b4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e20b      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x110>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d069      	beq.n	800245a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x190>
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x17a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1df      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	493d      	ldr	r1, [pc, #244]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	e040      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff f862 	bl	80014b4 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff f85e 	bl	80014b4 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1bd      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4929      	ldr	r1, [pc, #164]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
 8002426:	e018      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff f83e 	bl	80014b4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff f83a 	bl	80014b4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e199      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d038      	beq.n	80024d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d019      	beq.n	80024a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002472:	4a15      	ldr	r2, [pc, #84]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7ff f81b 	bl	80014b4 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff f817 	bl	80014b4 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e176      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x23a>
 80024a0:	e01a      	b.n	80024d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_RCC_OscConfig+0x280>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7ff f801 	bl	80014b4 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b6:	f7fe fffd 	bl	80014b4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d903      	bls.n	80024cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e15c      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
 80024c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024cc:	4b91      	ldr	r3, [pc, #580]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a4 	beq.w	800262e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b88      	ldr	r3, [pc, #544]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a87      	ldr	r2, [pc, #540]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b85      	ldr	r3, [pc, #532]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250e:	4b82      	ldr	r3, [pc, #520]	; (8002718 <HAL_RCC_OscConfig+0x4d0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800251a:	4b7f      	ldr	r3, [pc, #508]	; (8002718 <HAL_RCC_OscConfig+0x4d0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7fe ffc5 	bl	80014b4 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7fe ffc1 	bl	80014b4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e120      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002540:	4b75      	ldr	r3, [pc, #468]	; (8002718 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x31a>
 8002554:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	e02d      	b.n	80025be <HAL_RCC_OscConfig+0x376>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x33c>
 800256a:	4b6a      	ldr	r3, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
 8002576:	4b67      	ldr	r3, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a66      	ldr	r2, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6713      	str	r3, [r2, #112]	; 0x70
 8002582:	e01c      	b.n	80025be <HAL_RCC_OscConfig+0x376>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d10c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x35e>
 800258c:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800258e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002590:	4a60      	ldr	r2, [pc, #384]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6713      	str	r3, [r2, #112]	; 0x70
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0x376>
 80025a6:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	4a5a      	ldr	r2, [pc, #360]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6713      	str	r3, [r2, #112]	; 0x70
 80025b2:	4b58      	ldr	r3, [pc, #352]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a57      	ldr	r2, [pc, #348]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe ff75 	bl	80014b4 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fe ff71 	bl	80014b4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0ce      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ee      	beq.n	80025ce <HAL_RCC_OscConfig+0x386>
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f2:	f7fe ff5f 	bl	80014b4 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe ff5b 	bl	80014b4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0b8      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a4 	beq.w	8002780 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d06b      	beq.n	800271c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d149      	bne.n	80026e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a30      	ldr	r2, [pc, #192]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe ff2c 	bl	80014b4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe ff28 	bl	80014b4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e087      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	085b      	lsrs	r3, r3, #1
 8002696:	3b01      	subs	r3, #1
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4313      	orrs	r3, r2
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fefc 	bl	80014b4 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c0:	f7fe fef8 	bl	80014b4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e057      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x478>
 80026de:	e04f      	b.n	8002780 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe fee2 	bl	80014b4 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f4:	f7fe fede 	bl	80014b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e03d      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002706:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4ac>
 8002712:	e035      	b.n	8002780 <HAL_RCC_OscConfig+0x538>
 8002714:	40023800 	.word	0x40023800
 8002718:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x544>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d028      	beq.n	800277c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d121      	bne.n	800277c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002742:	429a      	cmp	r2, r3
 8002744:	d11a      	bne.n	800277c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002752:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002754:	4293      	cmp	r3, r2
 8002756:	d111      	bne.n	800277c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	3b01      	subs	r3, #1
 8002766:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0d0      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d910      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4965      	ldr	r1, [pc, #404]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e0b8      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002808:	4b53      	ldr	r3, [pc, #332]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	494d      	ldr	r1, [pc, #308]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d040      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d115      	bne.n	8002872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e07f      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e073      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e06b      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4936      	ldr	r1, [pc, #216]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fe fe16 	bl	80014b4 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fe12 	bl	80014b4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e053      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d210      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 020f 	bic.w	r2, r3, #15
 80028ca:	4922      	ldr	r1, [pc, #136]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e032      	b.n	800294a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4916      	ldr	r1, [pc, #88]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490e      	ldr	r1, [pc, #56]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002922:	f000 f821 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490a      	ldr	r1, [pc, #40]	; (800295c <HAL_RCC_ClockConfig+0x1cc>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	fa22 f303 	lsr.w	r3, r2, r3
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1d0>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_RCC_ClockConfig+0x1d4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fc64 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00
 8002958:	40023800 	.word	0x40023800
 800295c:	08004d68 	.word	0x08004d68
 8002960:	20000000 	.word	0x20000000
 8002964:	20000004 	.word	0x20000004

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b090      	sub	sp, #64	; 0x40
 800296e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
 8002974:	2300      	movs	r3, #0
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d00d      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0x40>
 800298c:	2b08      	cmp	r3, #8
 800298e:	f200 80a1 	bhi.w	8002ad4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0x34>
 8002996:	2b04      	cmp	r3, #4
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800299a:	e09b      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_GetSysClockFreq+0x184>)
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029a0:	e09b      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029a6:	e098      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029a8:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029b2:	4b4d      	ldr	r3, [pc, #308]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d028      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	099b      	lsrs	r3, r3, #6
 80029c4:	2200      	movs	r2, #0
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	627a      	str	r2, [r7, #36]	; 0x24
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80029d0:	2100      	movs	r1, #0
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029d4:	fb03 f201 	mul.w	r2, r3, r1
 80029d8:	2300      	movs	r3, #0
 80029da:	fb00 f303 	mul.w	r3, r0, r3
 80029de:	4413      	add	r3, r2
 80029e0:	4a43      	ldr	r2, [pc, #268]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e2:	fba0 1202 	umull	r1, r2, r0, r2
 80029e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e8:	460a      	mov	r2, r1
 80029ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80029ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ee:	4413      	add	r3, r2
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f4:	2200      	movs	r2, #0
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	61fa      	str	r2, [r7, #28]
 80029fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a02:	f7fd fc01 	bl	8000208 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0e:	e053      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	617a      	str	r2, [r7, #20]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a22:	f04f 0b00 	mov.w	fp, #0
 8002a26:	4652      	mov	r2, sl
 8002a28:	465b      	mov	r3, fp
 8002a2a:	f04f 0000 	mov.w	r0, #0
 8002a2e:	f04f 0100 	mov.w	r1, #0
 8002a32:	0159      	lsls	r1, r3, #5
 8002a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a38:	0150      	lsls	r0, r2, #5
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a42:	eb63 090b 	sbc.w	r9, r3, fp
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a5a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a5e:	eb63 0509 	sbc.w	r5, r3, r9
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	00eb      	lsls	r3, r5, #3
 8002a6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a70:	00e2      	lsls	r2, r4, #3
 8002a72:	4614      	mov	r4, r2
 8002a74:	461d      	mov	r5, r3
 8002a76:	eb14 030a 	adds.w	r3, r4, sl
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	eb45 030b 	adc.w	r3, r5, fp
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	028b      	lsls	r3, r1, #10
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a98:	4621      	mov	r1, r4
 8002a9a:	028a      	lsls	r2, r1, #10
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	60fa      	str	r2, [r7, #12]
 8002aa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aac:	f7fd fbac 	bl	8000208 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0c1b      	lsrs	r3, r3, #16
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002ac8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetSysClockFreq+0x184>)
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3740      	adds	r7, #64	; 0x40
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	017d7840 	.word	0x017d7840

08002af4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b10:	f7ff fff0 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	0a9b      	lsrs	r3, r3, #10
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	4903      	ldr	r1, [pc, #12]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08004d78 	.word	0x08004d78

08002b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b38:	f7ff ffdc 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0b5b      	lsrs	r3, r3, #13
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	08004d78 	.word	0x08004d78

08002b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	220f      	movs	r2, #15
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b78:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <HAL_RCC_GetClockConfig+0x60>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 020f 	and.w	r2, r3, #15
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40023c00 	.word	0x40023c00

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be8:	4b69      	ldr	r3, [pc, #420]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a68      	ldr	r2, [pc, #416]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bf2:	6093      	str	r3, [r2, #8]
 8002bf4:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	4964      	ldr	r1, [pc, #400]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d017      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	4959      	ldr	r1, [pc, #356]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c38:	d101      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d017      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c56:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	494a      	ldr	r1, [pc, #296]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c74:	d101      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 808b 	beq.w	8002dba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb0:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cbc:	4b35      	ldr	r3, [pc, #212]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a34      	ldr	r2, [pc, #208]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fbf4 	bl	80014b4 <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd0:	f7fe fbf0 	bl	80014b4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e357      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0f0      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d035      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d02e      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d0c:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d114      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fbb8 	bl	80014b4 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d48:	f7fe fbb4 	bl	80014b4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e319      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ee      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d76:	d111      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d86:	400b      	ands	r3, r1
 8002d88:	4901      	ldr	r1, [pc, #4]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	608b      	str	r3, [r1, #8]
 8002d8e:	e00b      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40007000 	.word	0x40007000
 8002d98:	0ffffcff 	.word	0x0ffffcff
 8002d9c:	4baa      	ldr	r3, [pc, #680]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	4aa9      	ldr	r2, [pc, #676]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002da6:	6093      	str	r3, [r2, #8]
 8002da8:	4ba7      	ldr	r3, [pc, #668]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	49a4      	ldr	r1, [pc, #656]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dc6:	4ba0      	ldr	r3, [pc, #640]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dcc:	4a9e      	ldr	r2, [pc, #632]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002dd6:	4b9c      	ldr	r3, [pc, #624]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	4999      	ldr	r1, [pc, #612]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df4:	4b94      	ldr	r3, [pc, #592]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e02:	4991      	ldr	r1, [pc, #580]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e16:	4b8c      	ldr	r3, [pc, #560]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e24:	4988      	ldr	r1, [pc, #544]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e38:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e46:	4980      	ldr	r1, [pc, #512]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e5a:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4977      	ldr	r1, [pc, #476]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e7c:	4b72      	ldr	r3, [pc, #456]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	496f      	ldr	r1, [pc, #444]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9e:	4b6a      	ldr	r3, [pc, #424]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f023 020c 	bic.w	r2, r3, #12
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	4966      	ldr	r1, [pc, #408]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ec0:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	495e      	ldr	r1, [pc, #376]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ee2:	4b59      	ldr	r3, [pc, #356]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef0:	4955      	ldr	r1, [pc, #340]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f04:	4b50      	ldr	r3, [pc, #320]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	494d      	ldr	r1, [pc, #308]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f26:	4b48      	ldr	r3, [pc, #288]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4944      	ldr	r1, [pc, #272]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f48:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	493c      	ldr	r1, [pc, #240]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f6a:	4b37      	ldr	r3, [pc, #220]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f78:	4933      	ldr	r1, [pc, #204]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f8c:	4b2e      	ldr	r3, [pc, #184]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f9a:	492b      	ldr	r1, [pc, #172]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d011      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fbc:	4922      	ldr	r1, [pc, #136]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fee:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	4912      	ldr	r1, [pc, #72]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003016:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003020:	4909      	ldr	r1, [pc, #36]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d006      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80d9 	beq.w	80031ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800303c:	4b02      	ldr	r3, [pc, #8]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a01      	ldr	r2, [pc, #4]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003046:	e001      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003048:	40023800 	.word	0x40023800
 800304c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304e:	f7fe fa31 	bl	80014b4 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003056:	f7fe fa2d 	bl	80014b4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	; 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e194      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003068:	4b6c      	ldr	r3, [pc, #432]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d021      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11d      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003088:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003096:	4b61      	ldr	r3, [pc, #388]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	019a      	lsls	r2, r3, #6
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	431a      	orrs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	061b      	lsls	r3, r3, #24
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	071b      	lsls	r3, r3, #28
 80030bc:	4957      	ldr	r1, [pc, #348]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d02e      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ee:	d129      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030f0:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003104:	0f1b      	lsrs	r3, r3, #28
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	019a      	lsls	r2, r3, #6
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	431a      	orrs	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	071b      	lsls	r3, r3, #28
 8003124:	493d      	ldr	r1, [pc, #244]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003132:	f023 021f 	bic.w	r2, r3, #31
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	3b01      	subs	r3, #1
 800313c:	4937      	ldr	r1, [pc, #220]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01d      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003150:	4b32      	ldr	r3, [pc, #200]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003156:	0e1b      	lsrs	r3, r3, #24
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800315e:	4b2f      	ldr	r3, [pc, #188]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003164:	0f1b      	lsrs	r3, r3, #28
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	019a      	lsls	r2, r3, #6
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	431a      	orrs	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	431a      	orrs	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	071b      	lsls	r3, r3, #28
 8003184:	4925      	ldr	r1, [pc, #148]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d011      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	019a      	lsls	r2, r3, #6
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	041b      	lsls	r3, r3, #16
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	061b      	lsls	r3, r3, #24
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	071b      	lsls	r3, r3, #28
 80031b4:	4919      	ldr	r1, [pc, #100]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c8:	f7fe f974 	bl	80014b4 <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031d0:	f7fe f970 	bl	80014b4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e0d7      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f040 80cd 	bne.w	8003390 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003202:	f7fe f957 	bl	80014b4 <HAL_GetTick>
 8003206:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800320a:	f7fe f953 	bl	80014b4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b64      	cmp	r3, #100	; 0x64
 8003216:	d903      	bls.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0ba      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800321c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003220:	4b5e      	ldr	r3, [pc, #376]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322c:	d0ed      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02e      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d12a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	0c1b      	lsrs	r3, r3, #16
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003264:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326a:	0f1b      	lsrs	r3, r3, #28
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	019a      	lsls	r2, r3, #6
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	4944      	ldr	r1, [pc, #272]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003292:	4b42      	ldr	r3, [pc, #264]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003298:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	3b01      	subs	r3, #1
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	493d      	ldr	r1, [pc, #244]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d022      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c0:	d11d      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032c2:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c8:	0e1b      	lsrs	r3, r3, #24
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032d0:	4b32      	ldr	r3, [pc, #200]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	0f1b      	lsrs	r3, r3, #28
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	019a      	lsls	r2, r3, #6
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	041b      	lsls	r3, r3, #16
 80032ea:	431a      	orrs	r2, r3
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	071b      	lsls	r3, r3, #28
 80032f6:	4929      	ldr	r1, [pc, #164]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d028      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	0e1b      	lsrs	r3, r3, #24
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	019a      	lsls	r2, r3, #6
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	071b      	lsls	r3, r3, #28
 800333e:	4917      	ldr	r1, [pc, #92]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4911      	ldr	r1, [pc, #68]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0e      	ldr	r2, [pc, #56]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003368:	f7fe f8a4 	bl	80014b4 <HAL_GetTick>
 800336c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003370:	f7fe f8a0 	bl	80014b4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e007      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800338a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800338e:	d1ef      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e038      	b.n	8003428 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7fd ff16 	bl	80011fc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3308      	adds	r3, #8
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f001 fb74 	bl	8004ac8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	f001 fbfc 	bl	8004be8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6858      	ldr	r0, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	f001 fc43 	bl	8004c88 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	6892      	ldr	r2, [r2, #8]
 800340a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	6892      	ldr	r2, [r2, #8]
 8003416:	f041 0101 	orr.w	r1, r1, #1
 800341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e049      	b.n	80034d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fc86 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 f9f6 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d001      	beq.n	80034f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e054      	b.n	80035a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d022      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003522:	d01d      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d018      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_TIM_Base_Start_IT+0xdc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00e      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1e      	ldr	r2, [pc, #120]	; (80035c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d115      	bne.n	800358c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	4b19      	ldr	r3, [pc, #100]	; (80035cc <HAL_TIM_Base_Start_IT+0xec>)
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d015      	beq.n	800359e <HAL_TIM_Base_Start_IT+0xbe>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d011      	beq.n	800359e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358a:	e008      	b.n	800359e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e000      	b.n	80035a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800
 80035bc:	40000c00 	.word	0x40000c00
 80035c0:	40010400 	.word	0x40010400
 80035c4:	40014000 	.word	0x40014000
 80035c8:	40001800 	.word	0x40001800
 80035cc:	00010007 	.word	0x00010007

080035d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0202 	mvn.w	r2, #2
 80035fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f905 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8f7 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f908 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b04      	cmp	r3, #4
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0204 	mvn.w	r2, #4
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8db 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8cd 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f8de 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b08      	cmp	r3, #8
 800368c:	d122      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b08      	cmp	r3, #8
 800369a:	d11b      	bne.n	80036d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0208 	mvn.w	r2, #8
 80036a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2204      	movs	r2, #4
 80036aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f8b1 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 80036c0:	e005      	b.n	80036ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8a3 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f8b4 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d122      	bne.n	8003728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d11b      	bne.n	8003728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0210 	mvn.w	r2, #16
 80036f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2208      	movs	r2, #8
 80036fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f887 	bl	8003822 <HAL_TIM_IC_CaptureCallback>
 8003714:	e005      	b.n	8003722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f879 	bl	800380e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f88a 	bl	8003836 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0201 	mvn.w	r2, #1
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fa82 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d107      	bne.n	8003780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9a8 	bl	8003ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378e:	d10e      	bne.n	80037ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b80      	cmp	r3, #128	; 0x80
 800379c:	d107      	bne.n	80037ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f99b 	bl	8003ae4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d10e      	bne.n	80037da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d107      	bne.n	80037da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f838 	bl	800384a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d10e      	bne.n	8003806 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d107      	bne.n	8003806 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0220 	mvn.w	r2, #32
 80037fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f95b 	bl	8003abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <TIM_Base_SetConfig+0x118>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3c      	ldr	r2, [pc, #240]	; (800397c <TIM_Base_SetConfig+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d027      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <TIM_Base_SetConfig+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d023      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <TIM_Base_SetConfig+0x11c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0x124>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d017      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <TIM_Base_SetConfig+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a25      	ldr	r2, [pc, #148]	; (8003994 <TIM_Base_SetConfig+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	40001800 	.word	0x40001800
 8003998:	40001c00 	.word	0x40001c00
 800399c:	40002000 	.word	0x40002000

080039a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e06d      	b.n	8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d022      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2a:	d01d      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1a      	ldr	r2, [pc, #104]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10c      	bne.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40001800 	.word	0x40001800

08003abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e040      	b.n	8003b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f94a 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fb1e 	bl	8004178 <UART_SetConfig>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e022      	b.n	8003b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fd76 	bl	8004640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fdfd 	bl	8004784 <UART_CheckIdleState>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0ba      	sub	sp, #232	; 0xe8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003bbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d115      	bne.n	8003bfc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00f      	beq.n	8003bfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8297 	beq.w	8004120 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
      }
      return;
 8003bfa:	e291      	b.n	8004120 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 8117 	beq.w	8003e34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c16:	4b85      	ldr	r3, [pc, #532]	; (8003e2c <HAL_UART_IRQHandler+0x298>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 810a 	beq.w	8003e34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_UART_IRQHandler+0xbc>
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c46:	f043 0201 	orr.w	r2, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d011      	beq.n	8003c80 <HAL_UART_IRQHandler+0xec>
 8003c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d011      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x11c>
 8003c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2204      	movs	r2, #4
 8003c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d017      	beq.n	8003cec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ccc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_UART_IRQHandler+0x18a>
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00c      	beq.n	8003d1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 81fd 	beq.w	8004124 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d005      	beq.n	8003d76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04f      	beq.n	8003e16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fe01 	bl	800497e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d141      	bne.n	8003e0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003db6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1d9      	bne.n	8003d8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <HAL_UART_IRQHandler+0x29c>)
 8003de4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fff4 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00f      	b.n	8003e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f9a0 	bl	800414c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00b      	b.n	8003e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f99c 	bl	800414c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e007      	b.n	8003e26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f998 	bl	800414c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003e24:	e17e      	b.n	8004124 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e26:	bf00      	nop
    return;
 8003e28:	e17c      	b.n	8004124 <HAL_UART_IRQHandler+0x590>
 8003e2a:	bf00      	nop
 8003e2c:	04000120 	.word	0x04000120
 8003e30:	08004a47 	.word	0x08004a47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	f040 814c 	bne.w	80040d6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e42:	f003 0310 	and.w	r3, r3, #16
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8145 	beq.w	80040d6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 813e 	beq.w	80040d6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2210      	movs	r2, #16
 8003e60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	f040 80b6 	bne.w	8003fde <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8150 	beq.w	8004128 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e92:	429a      	cmp	r2, r3
 8003e94:	f080 8148 	bcs.w	8004128 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eac:	f000 8086 	beq.w	8003fbc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003eda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ede:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1da      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3308      	adds	r3, #8
 8003f1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e1      	bne.n	8003efa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3308      	adds	r3, #8
 8003f56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e3      	bne.n	8003f36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f8c:	f023 0310 	bic.w	r3, r3, #16
 8003f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e4      	bne.n	8003f7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fe9e 	bl	8001cf8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8c2 	bl	8004160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fdc:	e0a4      	b.n	8004128 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8096 	beq.w	800412c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 8091 	beq.w	800412c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800401e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
 800402e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e4      	bne.n	800400a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3308      	adds	r3, #8
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	623b      	str	r3, [r7, #32]
   return(result);
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004064:	633a      	str	r2, [r7, #48]	; 0x30
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800406a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e3      	bne.n	8004040 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	60fb      	str	r3, [r7, #12]
   return(result);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	69b9      	ldr	r1, [r7, #24]
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	617b      	str	r3, [r7, #20]
   return(result);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e4      	bne.n	800408c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f846 	bl	8004160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040d4:	e02a      	b.n	800412c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00e      	beq.n	8004100 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01c      	beq.n	8004130 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	4798      	blx	r3
    }
    return;
 80040fe:	e017      	b.n	8004130 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d012      	beq.n	8004132 <HAL_UART_IRQHandler+0x59e>
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00c      	beq.n	8004132 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fcaa 	bl	8004a72 <UART_EndTransmit_IT>
    return;
 800411e:	e008      	b.n	8004132 <HAL_UART_IRQHandler+0x59e>
      return;
 8004120:	bf00      	nop
 8004122:	e006      	b.n	8004132 <HAL_UART_IRQHandler+0x59e>
    return;
 8004124:	bf00      	nop
 8004126:	e004      	b.n	8004132 <HAL_UART_IRQHandler+0x59e>
      return;
 8004128:	bf00      	nop
 800412a:	e002      	b.n	8004132 <HAL_UART_IRQHandler+0x59e>
      return;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <HAL_UART_IRQHandler+0x59e>
    return;
 8004130:	bf00      	nop
  }

}
 8004132:	37e8      	adds	r7, #232	; 0xe8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4ba6      	ldr	r3, [pc, #664]	; (800443c <UART_SetConfig+0x2c4>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	6979      	ldr	r1, [r7, #20]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a94      	ldr	r2, [pc, #592]	; (8004440 <UART_SetConfig+0x2c8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d120      	bne.n	8004236 <UART_SetConfig+0xbe>
 80041f4:	4b93      	ldr	r3, [pc, #588]	; (8004444 <UART_SetConfig+0x2cc>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d816      	bhi.n	8004230 <UART_SetConfig+0xb8>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x90>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004219 	.word	0x08004219
 800420c:	08004225 	.word	0x08004225
 8004210:	0800421f 	.word	0x0800421f
 8004214:	0800422b 	.word	0x0800422b
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e150      	b.n	80044c0 <UART_SetConfig+0x348>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e14d      	b.n	80044c0 <UART_SetConfig+0x348>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e14a      	b.n	80044c0 <UART_SetConfig+0x348>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e147      	b.n	80044c0 <UART_SetConfig+0x348>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e144      	b.n	80044c0 <UART_SetConfig+0x348>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a83      	ldr	r2, [pc, #524]	; (8004448 <UART_SetConfig+0x2d0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d132      	bne.n	80042a6 <UART_SetConfig+0x12e>
 8004240:	4b80      	ldr	r3, [pc, #512]	; (8004444 <UART_SetConfig+0x2cc>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d828      	bhi.n	80042a0 <UART_SetConfig+0x128>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <UART_SetConfig+0xdc>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004289 	.word	0x08004289
 8004258:	080042a1 	.word	0x080042a1
 800425c:	080042a1 	.word	0x080042a1
 8004260:	080042a1 	.word	0x080042a1
 8004264:	08004295 	.word	0x08004295
 8004268:	080042a1 	.word	0x080042a1
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042a1 	.word	0x080042a1
 8004274:	0800428f 	.word	0x0800428f
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042a1 	.word	0x080042a1
 8004284:	0800429b 	.word	0x0800429b
 8004288:	2300      	movs	r3, #0
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e118      	b.n	80044c0 <UART_SetConfig+0x348>
 800428e:	2302      	movs	r3, #2
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e115      	b.n	80044c0 <UART_SetConfig+0x348>
 8004294:	2304      	movs	r3, #4
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e112      	b.n	80044c0 <UART_SetConfig+0x348>
 800429a:	2308      	movs	r3, #8
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e10f      	b.n	80044c0 <UART_SetConfig+0x348>
 80042a0:	2310      	movs	r3, #16
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e10c      	b.n	80044c0 <UART_SetConfig+0x348>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a68      	ldr	r2, [pc, #416]	; (800444c <UART_SetConfig+0x2d4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d120      	bne.n	80042f2 <UART_SetConfig+0x17a>
 80042b0:	4b64      	ldr	r3, [pc, #400]	; (8004444 <UART_SetConfig+0x2cc>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ba:	2b30      	cmp	r3, #48	; 0x30
 80042bc:	d013      	beq.n	80042e6 <UART_SetConfig+0x16e>
 80042be:	2b30      	cmp	r3, #48	; 0x30
 80042c0:	d814      	bhi.n	80042ec <UART_SetConfig+0x174>
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d009      	beq.n	80042da <UART_SetConfig+0x162>
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d810      	bhi.n	80042ec <UART_SetConfig+0x174>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d002      	beq.n	80042d4 <UART_SetConfig+0x15c>
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d006      	beq.n	80042e0 <UART_SetConfig+0x168>
 80042d2:	e00b      	b.n	80042ec <UART_SetConfig+0x174>
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e0f2      	b.n	80044c0 <UART_SetConfig+0x348>
 80042da:	2302      	movs	r3, #2
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	e0ef      	b.n	80044c0 <UART_SetConfig+0x348>
 80042e0:	2304      	movs	r3, #4
 80042e2:	77fb      	strb	r3, [r7, #31]
 80042e4:	e0ec      	b.n	80044c0 <UART_SetConfig+0x348>
 80042e6:	2308      	movs	r3, #8
 80042e8:	77fb      	strb	r3, [r7, #31]
 80042ea:	e0e9      	b.n	80044c0 <UART_SetConfig+0x348>
 80042ec:	2310      	movs	r3, #16
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e0e6      	b.n	80044c0 <UART_SetConfig+0x348>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a56      	ldr	r2, [pc, #344]	; (8004450 <UART_SetConfig+0x2d8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d120      	bne.n	800433e <UART_SetConfig+0x1c6>
 80042fc:	4b51      	ldr	r3, [pc, #324]	; (8004444 <UART_SetConfig+0x2cc>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004306:	2bc0      	cmp	r3, #192	; 0xc0
 8004308:	d013      	beq.n	8004332 <UART_SetConfig+0x1ba>
 800430a:	2bc0      	cmp	r3, #192	; 0xc0
 800430c:	d814      	bhi.n	8004338 <UART_SetConfig+0x1c0>
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d009      	beq.n	8004326 <UART_SetConfig+0x1ae>
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d810      	bhi.n	8004338 <UART_SetConfig+0x1c0>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <UART_SetConfig+0x1a8>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d006      	beq.n	800432c <UART_SetConfig+0x1b4>
 800431e:	e00b      	b.n	8004338 <UART_SetConfig+0x1c0>
 8004320:	2300      	movs	r3, #0
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e0cc      	b.n	80044c0 <UART_SetConfig+0x348>
 8004326:	2302      	movs	r3, #2
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e0c9      	b.n	80044c0 <UART_SetConfig+0x348>
 800432c:	2304      	movs	r3, #4
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e0c6      	b.n	80044c0 <UART_SetConfig+0x348>
 8004332:	2308      	movs	r3, #8
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e0c3      	b.n	80044c0 <UART_SetConfig+0x348>
 8004338:	2310      	movs	r3, #16
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e0c0      	b.n	80044c0 <UART_SetConfig+0x348>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a44      	ldr	r2, [pc, #272]	; (8004454 <UART_SetConfig+0x2dc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d125      	bne.n	8004394 <UART_SetConfig+0x21c>
 8004348:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <UART_SetConfig+0x2cc>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004356:	d017      	beq.n	8004388 <UART_SetConfig+0x210>
 8004358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435c:	d817      	bhi.n	800438e <UART_SetConfig+0x216>
 800435e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004362:	d00b      	beq.n	800437c <UART_SetConfig+0x204>
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d811      	bhi.n	800438e <UART_SetConfig+0x216>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <UART_SetConfig+0x1fe>
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	d006      	beq.n	8004382 <UART_SetConfig+0x20a>
 8004374:	e00b      	b.n	800438e <UART_SetConfig+0x216>
 8004376:	2300      	movs	r3, #0
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e0a1      	b.n	80044c0 <UART_SetConfig+0x348>
 800437c:	2302      	movs	r3, #2
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e09e      	b.n	80044c0 <UART_SetConfig+0x348>
 8004382:	2304      	movs	r3, #4
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e09b      	b.n	80044c0 <UART_SetConfig+0x348>
 8004388:	2308      	movs	r3, #8
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e098      	b.n	80044c0 <UART_SetConfig+0x348>
 800438e:	2310      	movs	r3, #16
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e095      	b.n	80044c0 <UART_SetConfig+0x348>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <UART_SetConfig+0x2e0>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d125      	bne.n	80043ea <UART_SetConfig+0x272>
 800439e:	4b29      	ldr	r3, [pc, #164]	; (8004444 <UART_SetConfig+0x2cc>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ac:	d017      	beq.n	80043de <UART_SetConfig+0x266>
 80043ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043b2:	d817      	bhi.n	80043e4 <UART_SetConfig+0x26c>
 80043b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b8:	d00b      	beq.n	80043d2 <UART_SetConfig+0x25a>
 80043ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043be:	d811      	bhi.n	80043e4 <UART_SetConfig+0x26c>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <UART_SetConfig+0x254>
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d006      	beq.n	80043d8 <UART_SetConfig+0x260>
 80043ca:	e00b      	b.n	80043e4 <UART_SetConfig+0x26c>
 80043cc:	2301      	movs	r3, #1
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e076      	b.n	80044c0 <UART_SetConfig+0x348>
 80043d2:	2302      	movs	r3, #2
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e073      	b.n	80044c0 <UART_SetConfig+0x348>
 80043d8:	2304      	movs	r3, #4
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e070      	b.n	80044c0 <UART_SetConfig+0x348>
 80043de:	2308      	movs	r3, #8
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e06d      	b.n	80044c0 <UART_SetConfig+0x348>
 80043e4:	2310      	movs	r3, #16
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e06a      	b.n	80044c0 <UART_SetConfig+0x348>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <UART_SetConfig+0x2e4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d138      	bne.n	8004466 <UART_SetConfig+0x2ee>
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <UART_SetConfig+0x2cc>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80043fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004402:	d017      	beq.n	8004434 <UART_SetConfig+0x2bc>
 8004404:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004408:	d82a      	bhi.n	8004460 <UART_SetConfig+0x2e8>
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440e:	d00b      	beq.n	8004428 <UART_SetConfig+0x2b0>
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d824      	bhi.n	8004460 <UART_SetConfig+0x2e8>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <UART_SetConfig+0x2aa>
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d006      	beq.n	800442e <UART_SetConfig+0x2b6>
 8004420:	e01e      	b.n	8004460 <UART_SetConfig+0x2e8>
 8004422:	2300      	movs	r3, #0
 8004424:	77fb      	strb	r3, [r7, #31]
 8004426:	e04b      	b.n	80044c0 <UART_SetConfig+0x348>
 8004428:	2302      	movs	r3, #2
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e048      	b.n	80044c0 <UART_SetConfig+0x348>
 800442e:	2304      	movs	r3, #4
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e045      	b.n	80044c0 <UART_SetConfig+0x348>
 8004434:	2308      	movs	r3, #8
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e042      	b.n	80044c0 <UART_SetConfig+0x348>
 800443a:	bf00      	nop
 800443c:	efff69f3 	.word	0xefff69f3
 8004440:	40011000 	.word	0x40011000
 8004444:	40023800 	.word	0x40023800
 8004448:	40004400 	.word	0x40004400
 800444c:	40004800 	.word	0x40004800
 8004450:	40004c00 	.word	0x40004c00
 8004454:	40005000 	.word	0x40005000
 8004458:	40011400 	.word	0x40011400
 800445c:	40007800 	.word	0x40007800
 8004460:	2310      	movs	r3, #16
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e02c      	b.n	80044c0 <UART_SetConfig+0x348>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a72      	ldr	r2, [pc, #456]	; (8004634 <UART_SetConfig+0x4bc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d125      	bne.n	80044bc <UART_SetConfig+0x344>
 8004470:	4b71      	ldr	r3, [pc, #452]	; (8004638 <UART_SetConfig+0x4c0>)
 8004472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004476:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800447a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800447e:	d017      	beq.n	80044b0 <UART_SetConfig+0x338>
 8004480:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004484:	d817      	bhi.n	80044b6 <UART_SetConfig+0x33e>
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448a:	d00b      	beq.n	80044a4 <UART_SetConfig+0x32c>
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004490:	d811      	bhi.n	80044b6 <UART_SetConfig+0x33e>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <UART_SetConfig+0x326>
 8004496:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800449a:	d006      	beq.n	80044aa <UART_SetConfig+0x332>
 800449c:	e00b      	b.n	80044b6 <UART_SetConfig+0x33e>
 800449e:	2300      	movs	r3, #0
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e00d      	b.n	80044c0 <UART_SetConfig+0x348>
 80044a4:	2302      	movs	r3, #2
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e00a      	b.n	80044c0 <UART_SetConfig+0x348>
 80044aa:	2304      	movs	r3, #4
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e007      	b.n	80044c0 <UART_SetConfig+0x348>
 80044b0:	2308      	movs	r3, #8
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e004      	b.n	80044c0 <UART_SetConfig+0x348>
 80044b6:	2310      	movs	r3, #16
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e001      	b.n	80044c0 <UART_SetConfig+0x348>
 80044bc:	2310      	movs	r3, #16
 80044be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c8:	d15b      	bne.n	8004582 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d828      	bhi.n	8004522 <UART_SetConfig+0x3aa>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <UART_SetConfig+0x360>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	08004505 	.word	0x08004505
 80044e0:	0800450d 	.word	0x0800450d
 80044e4:	08004523 	.word	0x08004523
 80044e8:	08004513 	.word	0x08004513
 80044ec:	08004523 	.word	0x08004523
 80044f0:	08004523 	.word	0x08004523
 80044f4:	08004523 	.word	0x08004523
 80044f8:	0800451b 	.word	0x0800451b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7fe fb06 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8004500:	61b8      	str	r0, [r7, #24]
        break;
 8004502:	e013      	b.n	800452c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004504:	f7fe fb16 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 8004508:	61b8      	str	r0, [r7, #24]
        break;
 800450a:	e00f      	b.n	800452c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800450c:	4b4b      	ldr	r3, [pc, #300]	; (800463c <UART_SetConfig+0x4c4>)
 800450e:	61bb      	str	r3, [r7, #24]
        break;
 8004510:	e00c      	b.n	800452c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004512:	f7fe fa29 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8004516:	61b8      	str	r0, [r7, #24]
        break;
 8004518:	e008      	b.n	800452c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451e:	61bb      	str	r3, [r7, #24]
        break;
 8004520:	e004      	b.n	800452c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77bb      	strb	r3, [r7, #30]
        break;
 800452a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d074      	beq.n	800461c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	005a      	lsls	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	441a      	add	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b0f      	cmp	r3, #15
 800454c:	d916      	bls.n	800457c <UART_SetConfig+0x404>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004554:	d212      	bcs.n	800457c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f023 030f 	bic.w	r3, r3, #15
 800455e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	b29b      	uxth	r3, r3
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	b29a      	uxth	r2, r3
 800456c:	89fb      	ldrh	r3, [r7, #14]
 800456e:	4313      	orrs	r3, r2
 8004570:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	89fa      	ldrh	r2, [r7, #14]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	e04f      	b.n	800461c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	77bb      	strb	r3, [r7, #30]
 8004580:	e04c      	b.n	800461c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d828      	bhi.n	80045da <UART_SetConfig+0x462>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x418>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe faaa 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80045b8:	61b8      	str	r0, [r7, #24]
        break;
 80045ba:	e013      	b.n	80045e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7fe faba 	bl	8002b34 <HAL_RCC_GetPCLK2Freq>
 80045c0:	61b8      	str	r0, [r7, #24]
        break;
 80045c2:	e00f      	b.n	80045e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <UART_SetConfig+0x4c4>)
 80045c6:	61bb      	str	r3, [r7, #24]
        break;
 80045c8:	e00c      	b.n	80045e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7fe f9cd 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 80045ce:	61b8      	str	r0, [r7, #24]
        break;
 80045d0:	e008      	b.n	80045e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d6:	61bb      	str	r3, [r7, #24]
        break;
 80045d8:	e004      	b.n	80045e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	77bb      	strb	r3, [r7, #30]
        break;
 80045e2:	bf00      	nop
    }

    if (pclk != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	085a      	lsrs	r2, r3, #1
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	441a      	add	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b0f      	cmp	r3, #15
 8004602:	d909      	bls.n	8004618 <UART_SetConfig+0x4a0>
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800460a:	d205      	bcs.n	8004618 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	e001      	b.n	800461c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004628:	7fbb      	ldrb	r3, [r7, #30]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40007c00 	.word	0x40007c00
 8004638:	40023800 	.word	0x40023800
 800463c:	00f42400 	.word	0x00f42400

08004640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00a      	beq.n	800466a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800473e:	d10a      	bne.n	8004756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004794:	f7fc fe8e 	bl	80014b4 <HAL_GetTick>
 8004798:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0308 	and.w	r3, r3, #8
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d10e      	bne.n	80047c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f81b 	bl	80047f2 <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e011      	b.n	80047ea <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b09c      	sub	sp, #112	; 0x70
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	603b      	str	r3, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	e0a7      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480a:	f000 80a3 	beq.w	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fc fe51 	bl	80014b4 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <UART_WaitOnFlagUntilTimeout+0x32>
 800481e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004820:	2b00      	cmp	r3, #0
 8004822:	d13f      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004838:	667b      	str	r3, [r7, #100]	; 0x64
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004844:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e6      	bne.n	8004824 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3308      	adds	r3, #8
 800485c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	663b      	str	r3, [r7, #96]	; 0x60
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3308      	adds	r3, #8
 8004874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004876:	64ba      	str	r2, [r7, #72]	; 0x48
 8004878:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800487c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e068      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d050      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c0:	d148      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ea:	637b      	str	r3, [r7, #52]	; 0x34
 80048ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e6      	bne.n	80048cc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	613b      	str	r3, [r7, #16]
   return(result);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f023 0301 	bic.w	r3, r3, #1
 8004914:	66bb      	str	r3, [r7, #104]	; 0x68
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3308      	adds	r3, #8
 800491c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800491e:	623a      	str	r2, [r7, #32]
 8004920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	69f9      	ldr	r1, [r7, #28]
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	e841 2300 	strex	r3, r2, [r1]
 800492a:	61bb      	str	r3, [r7, #24]
   return(result);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1e5      	bne.n	80048fe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e010      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	429a      	cmp	r2, r3
 8004970:	f43f af48 	beq.w	8004804 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3770      	adds	r7, #112	; 0x70
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b095      	sub	sp, #84	; 0x54
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498e:	e853 3f00 	ldrex	r3, [r3]
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800499a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	643b      	str	r3, [r7, #64]	; 0x40
 80049a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e6      	bne.n	8004986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3308      	adds	r3, #8
 80049d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e5      	bne.n	80049b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d118      	bne.n	8004a26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f023 0310 	bic.w	r3, r3, #16
 8004a08:	647b      	str	r3, [r7, #68]	; 0x44
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e6      	bne.n	80049f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a3a:	bf00      	nop
 8004a3c:	3754      	adds	r7, #84	; 0x54
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fb71 	bl	800414c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b088      	sub	sp, #32
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6979      	ldr	r1, [r7, #20]
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fb3d 	bl	8004138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004abe:	bf00      	nop
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	f023 0101 	bic.w	r1, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d102      	bne.n	8004af8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004af2:	2340      	movs	r3, #64	; 0x40
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e001      	b.n	8004afc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004b08:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004b0e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004b14:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004b1a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004b20:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8004b26:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8004b2c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004b32:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8004b38:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <FMC_NORSRAM_Init+0x11c>)
 8004b62:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b72:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004b7a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	ea02 0103 	and.w	r1, r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4319      	orrs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba4:	d10c      	bne.n	8004bc0 <FMC_NORSRAM_Init+0xf8>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	0008fb7f 	.word	0x0008fb7f

08004be8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	041b      	lsls	r3, r3, #16
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	051b      	lsls	r3, r3, #20
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	3b02      	subs	r3, #2
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	3201      	adds	r2, #1
 8004c3c:	4319      	orrs	r1, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c50:	d113      	bne.n	8004c7a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c5a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	051b      	lsls	r3, r3, #20
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c9c:	d11d      	bne.n	8004cda <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004ca6:	4b13      	ldr	r3, [pc, #76]	; (8004cf4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	6811      	ldr	r1, [r2, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	6852      	ldr	r2, [r2, #4]
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	4311      	orrs	r1, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	6892      	ldr	r2, [r2, #8]
 8004cba:	0212      	lsls	r2, r2, #8
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	6992      	ldr	r2, [r2, #24]
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	68d2      	ldr	r2, [r2, #12]
 8004cc8:	0412      	lsls	r2, r2, #16
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	ea43 0102 	orr.w	r1, r3, r2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004cd8:	e005      	b.n	8004ce6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	cff00000 	.word	0xcff00000

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4d0d      	ldr	r5, [pc, #52]	; (8004d30 <__libc_init_array+0x38>)
 8004cfc:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	2600      	movs	r6, #0
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	4d0b      	ldr	r5, [pc, #44]	; (8004d38 <__libc_init_array+0x40>)
 8004d0a:	4c0c      	ldr	r4, [pc, #48]	; (8004d3c <__libc_init_array+0x44>)
 8004d0c:	f000 f820 	bl	8004d50 <_init>
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	2600      	movs	r6, #0
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	08004d88 	.word	0x08004d88
 8004d34:	08004d88 	.word	0x08004d88
 8004d38:	08004d88 	.word	0x08004d88
 8004d3c:	08004d8c 	.word	0x08004d8c

08004d40 <memset>:
 8004d40:	4402      	add	r2, r0
 8004d42:	4603      	mov	r3, r0
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d100      	bne.n	8004d4a <memset+0xa>
 8004d48:	4770      	bx	lr
 8004d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4e:	e7f9      	b.n	8004d44 <memset+0x4>

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
