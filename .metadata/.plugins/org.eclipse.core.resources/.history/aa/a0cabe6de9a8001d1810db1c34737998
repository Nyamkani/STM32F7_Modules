
mcx514.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c28  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  2000000c  08004e24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200003e4  08004e24  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150ac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002795  00000000  00000000  000350e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00037880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00038930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c94  00000000  00000000  000398e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136a3  00000000  00000000  0006157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3917  00000000  00000000  00074c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  00168588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004dd8 	.word	0x08004dd8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004dd8 	.word	0x08004dd8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SCB_EnableICache+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052a:	f3bf 8f6f 	isb	sy
}
 800052e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SCB_EnableICache+0x48>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SCB_EnableICache+0x48>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
}
 8000540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy
}
 8000546:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055e:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <SCB_EnableDCache+0x9c>)
 8000560:	2200      	movs	r2, #0
 8000562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <SCB_EnableDCache+0x9c>)
 800056e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000572:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0b5b      	lsrs	r3, r3, #13
 8000578:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800057c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000586:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	015a      	lsls	r2, r3, #5
 800058c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000590:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000596:	4917      	ldr	r1, [pc, #92]	; (80005f4 <SCB_EnableDCache+0x9c>)
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	bf14      	ite	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	2300      	moveq	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d000      	beq.n	80005b4 <SCB_EnableDCache+0x5c>
      do {
 80005b2:	e7e9      	b.n	8000588 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	60fa      	str	r2, [r7, #12]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf14      	ite	ne
 80005be:	2301      	movne	r3, #1
 80005c0:	2300      	moveq	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d000      	beq.n	80005ca <SCB_EnableDCache+0x72>
    do {
 80005c8:	e7d9      	b.n	800057e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ca:	f3bf 8f4f 	dsb	sy
}
 80005ce:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <SCB_EnableDCache+0x9c>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <SCB_EnableDCache+0x9c>)
 80005d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005e8:	bf00      	nop
 80005ea:	3714      	adds	r7, #20
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005fc:	f7ff ff86 	bl	800050c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000600:	f7ff ffaa 	bl	8000558 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 ff79 	bl	80014fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f814 	bl	8000634 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 fa7a 	bl	8000b04 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000610:	f000 f88c 	bl	800072c <_ZL12MX_CAN1_Initv>
  MX_FMC_Init();
 8000614:	f000 fa0e 	bl	8000a34 <_ZL11MX_FMC_Initv>
  MX_UART4_Init();
 8000618:	f000 f904 	bl	8000824 <_ZL13MX_UART4_Initv>
  MX_USART1_UART_Init();
 800061c:	f000 f96c 	bl	80008f8 <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8000620:	f000 f99e 	bl	8000960 <_ZL19MX_USART3_UART_Initv>
  MX_USART6_UART_Init();
 8000624:	f000 f9d0 	bl	80009c8 <_ZL19MX_USART6_UART_Initv>
  MX_UART5_Init();
 8000628:	f000 f930 	bl	800088c <_ZL13MX_UART5_Initv>
  MX_TIM7_Init();
 800062c:	f000 f8ba 	bl	80007a4 <_ZL12MX_TIM7_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x38>
	...

08000634 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fbc0 	bl	8004dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <_Z18SystemClock_Configv+0xf0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a31      	ldr	r2, [pc, #196]	; (8000724 <_Z18SystemClock_Configv+0xf0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <_Z18SystemClock_Configv+0xf0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <_Z18SystemClock_Configv+0xf4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a2c      	ldr	r2, [pc, #176]	; (8000728 <_Z18SystemClock_Configv+0xf4>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <_Z18SystemClock_Configv+0xf4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800069c:	2319      	movs	r3, #25
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80006a0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fe0c 	bl	80022d0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf14      	ite	ne
 80006be:	2301      	movne	r3, #1
 80006c0:	2300      	moveq	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 80006c8:	f000 fb1c 	bl	8000d04 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f001 fdb0 	bl	8002230 <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80006e0:	f000 fb10 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2107      	movs	r1, #7
 8000702:	4618      	mov	r0, r3
 8000704:	f002 f888 	bl	8002818 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8000718:	f000 faf4 	bl	8000d04 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000732:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <_ZL12MX_CAN1_Initv+0x74>)
 8000734:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000738:	220c      	movs	r2, #12
 800073a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 800074a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800074e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000752:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000756:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000760:	2200      	movs	r2, #0
 8000762:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000766:	2200      	movs	r2, #0
 8000768:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 800076c:	2200      	movs	r2, #0
 800076e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000772:	2200      	movs	r2, #0
 8000774:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 8000778:	2200      	movs	r2, #0
 800077a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <_ZL12MX_CAN1_Initv+0x70>)
 800077e:	f000 fee9 	bl	8001554 <HAL_CAN_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	bf14      	ite	ne
 8000788:	2301      	movne	r3, #1
 800078a:	2300      	moveq	r3, #0
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8000792:	f000 fab7 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000028 	.word	0x20000028
 80007a0:	40006400 	.word	0x40006400

080007a4 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007b6:	4a1a      	ldr	r2, [pc, #104]	; (8000820 <_ZL12MX_TIM7_Initv+0x7c>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007bc:	226b      	movs	r2, #107	; 0x6b
 80007be:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b16      	ldr	r3, [pc, #88]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007c8:	2263      	movs	r2, #99	; 0x63
 80007ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007d4:	f002 fe70 	bl	80034b8 <HAL_TIM_Base_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf14      	ite	ne
 80007de:	2301      	movne	r3, #1
 80007e0:	2300      	moveq	r3, #0
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 80007e8:	f000 fa8c 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <_ZL12MX_TIM7_Initv+0x78>)
 80007fa:	f003 f915 	bl	8003a28 <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 800080e:	f000 fa79 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000050 	.word	0x20000050
 8000820:	40001400 	.word	0x40001400

08000824 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <_ZL13MX_UART4_Initv+0x64>)
 800082c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <_ZL13MX_UART4_Initv+0x60>)
 8000868:	f003 f98a 	bl	8003b80 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf14      	ite	ne
 8000872:	2301      	movne	r3, #1
 8000874:	2300      	moveq	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 800087c:	f000 fa42 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000009c 	.word	0x2000009c
 8000888:	40004c00 	.word	0x40004c00

0800088c <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <_ZL13MX_UART5_Initv+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 8000898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800089c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a4:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <_ZL13MX_UART5_Initv+0x64>)
 80008d4:	f003 f954 	bl	8003b80 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <_ZL13MX_UART5_Initv+0x60>
  {
    Error_Handler();
 80008e8:	f000 fa0c 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000124 	.word	0x20000124
 80008f4:	40005000 	.word	0x40005000

080008f8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <_ZL19MX_USART1_UART_Initv+0x64>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093a:	4807      	ldr	r0, [pc, #28]	; (8000958 <_ZL19MX_USART1_UART_Initv+0x60>)
 800093c:	f003 f920 	bl	8003b80 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	bf14      	ite	ne
 8000946:	2301      	movne	r3, #1
 8000948:	2300      	moveq	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8000950:	f000 f9d8 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001ac 	.word	0x200001ac
 800095c:	40011000 	.word	0x40011000

08000960 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <_ZL19MX_USART3_UART_Initv+0x64>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <_ZL19MX_USART3_UART_Initv+0x60>)
 80009a4:	f003 f8ec 	bl	8003b80 <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	bf14      	ite	ne
 80009ae:	2301      	movne	r3, #1
 80009b0:	2300      	moveq	r3, #0
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 80009b8:	f000 f9a4 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000234 	.word	0x20000234
 80009c4:	40004800 	.word	0x40004800

080009c8 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009cc:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009ce:	4a18      	ldr	r2, [pc, #96]	; (8000a30 <_ZL19MX_USART6_UART_Initv+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009d2:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e0:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a0e:	4807      	ldr	r0, [pc, #28]	; (8000a2c <_ZL19MX_USART6_UART_Initv+0x64>)
 8000a10:	f003 f8b6 	bl	8003b80 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <_ZL19MX_USART6_UART_Initv+0x60>
  {
    Error_Handler();
 8000a24:	f000 f96e 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200002bc 	.word	0x200002bc
 8000a30:	40011400 	.word	0x40011400

08000a34 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a4e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000a52:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000a54:	4b29      	ldr	r3, [pc, #164]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a56:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <_ZL11MX_FMC_Initv+0xcc>)
 8000a58:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a6e:	2210      	movs	r2, #16
 8000a70:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000aaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000aba:	230f      	movs	r3, #15
 8000abc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000aca:	2311      	movs	r3, #17
 8000acc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4808      	ldr	r0, [pc, #32]	; (8000afc <_ZL11MX_FMC_Initv+0xc8>)
 8000ada:	f002 fca5 	bl	8003428 <HAL_SRAM_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <_ZL11MX_FMC_Initv+0xbe>
  {
    Error_Handler( );
 8000aee:	f000 f909 	bl	8000d04 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000344 	.word	0x20000344
 8000b00:	a0000104 	.word	0xa0000104

08000b04 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b6b      	ldr	r3, [pc, #428]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a6a      	ldr	r2, [pc, #424]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b68      	ldr	r3, [pc, #416]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	623b      	str	r3, [r7, #32]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b65      	ldr	r3, [pc, #404]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a64      	ldr	r2, [pc, #400]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a5e      	ldr	r2, [pc, #376]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b50:	f043 0320 	orr.w	r3, r3, #32
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b5c      	ldr	r3, [pc, #368]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a58      	ldr	r2, [pc, #352]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b56      	ldr	r3, [pc, #344]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a52      	ldr	r2, [pc, #328]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b50      	ldr	r3, [pc, #320]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a4c      	ldr	r2, [pc, #304]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <_ZL12MX_GPIO_Initv+0x1c4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000be0:	483a      	ldr	r0, [pc, #232]	; (8000ccc <_ZL12MX_GPIO_Initv+0x1c8>)
 8000be2:	f001 fb0b 	bl	80021fc <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 8000be6:	2200      	movs	r2, #0
 8000be8:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000bec:	4838      	ldr	r0, [pc, #224]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000bee:	f001 fb05 	bl	80021fc <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000bf8:	4836      	ldr	r0, [pc, #216]	; (8000cd4 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000bfa:	f001 faff 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8000bfe:	237f      	movs	r3, #127	; 0x7f
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4831      	ldr	r0, [pc, #196]	; (8000cd8 <_ZL12MX_GPIO_Initv+0x1d4>)
 8000c12:	f001 f947 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 8000c16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482a      	ldr	r0, [pc, #168]	; (8000cd4 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000c2c:	f001 f93a 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8000c30:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	4820      	ldr	r0, [pc, #128]	; (8000ccc <_ZL12MX_GPIO_Initv+0x1c8>)
 8000c4a:	f001 f92b 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8000c4e:	f240 33c7 	movw	r3, #967	; 0x3c7
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	481a      	ldr	r0, [pc, #104]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000c68:	f001 f91c 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8000c6c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4816      	ldr	r0, [pc, #88]	; (8000cdc <_ZL12MX_GPIO_Initv+0x1d8>)
 8000c82:	f001 f90f 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 8000c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <_ZL12MX_GPIO_Initv+0x1d0>)
 8000ca0:	f001 f900 	bl	8001ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <_ZL12MX_GPIO_Initv+0x1cc>)
 8000cbc:	f001 f8f2 	bl	8001ea4 <HAL_GPIO_Init>

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40021400 	.word	0x40021400
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40021800 	.word	0x40021800

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf2:	f000 fc0f 	bl	8001514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40001000 	.word	0x40001000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_CAN_MspInit+0x8c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d130      	bne.n	8000ddc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_CAN_MspInit+0x90>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_CAN_MspInit+0x90>)
 8000d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_CAN_MspInit+0x90>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_CAN_MspInit+0x90>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_CAN_MspInit+0x90>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_CAN_MspInit+0x90>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000daa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dbc:	2309      	movs	r3, #9
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_CAN_MspInit+0x94>)
 8000dc8:	f001 f86c 	bl	8001ea4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2108      	movs	r1, #8
 8000dd0:	2014      	movs	r0, #20
 8000dd2:	f000 ffab 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dd6:	2014      	movs	r0, #20
 8000dd8:	f000 ffc4 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40006400 	.word	0x40006400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_TIM_Base_MspInit+0x44>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d113      	bne.n	8000e2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e08:	f043 0320 	orr.w	r3, r3, #32
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x48>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2107      	movs	r1, #7
 8000e1e:	2037      	movs	r0, #55	; 0x37
 8000e20:	f000 ff84 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e24:	2037      	movs	r0, #55	; 0x37
 8000e26:	f000 ff9d 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40001400 	.word	0x40001400
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b0b4      	sub	sp, #208	; 0xd0
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e58:	2284      	movs	r2, #132	; 0x84
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 ffb3 	bl	8004dc8 <memset>
  if(huart->Instance==UART4)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4aa6      	ldr	r2, [pc, #664]	; (8001100 <HAL_UART_MspInit+0x2c4>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d146      	bne.n	8000efa <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e70:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fee3 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e88:	f7ff ff3c 	bl	8000d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e8c:	4b9d      	ldr	r3, [pc, #628]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a9c      	ldr	r2, [pc, #624]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b9a      	ldr	r3, [pc, #616]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b97      	ldr	r3, [pc, #604]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a96      	ldr	r2, [pc, #600]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b94      	ldr	r3, [pc, #592]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ebc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4889      	ldr	r0, [pc, #548]	; (8001108 <HAL_UART_MspInit+0x2cc>)
 8000ee4:	f000 ffde 	bl	8001ea4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2108      	movs	r1, #8
 8000eec:	2034      	movs	r0, #52	; 0x34
 8000eee:	f000 ff1d 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ef2:	2034      	movs	r0, #52	; 0x34
 8000ef4:	f000 ff36 	bl	8001d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ef8:	e15e      	b.n	80011b8 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a83      	ldr	r2, [pc, #524]	; (800110c <HAL_UART_MspInit+0x2d0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d167      	bne.n	8000fd4 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fe97 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8000f20:	f7ff fef0 	bl	8000d04 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f24:	4b77      	ldr	r3, [pc, #476]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	4a76      	ldr	r2, [pc, #472]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f30:	4b74      	ldr	r3, [pc, #464]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b71      	ldr	r3, [pc, #452]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	4a70      	ldr	r2, [pc, #448]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6313      	str	r3, [r2, #48]	; 0x30
 8000f48:	4b6e      	ldr	r3, [pc, #440]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f54:	4b6b      	ldr	r3, [pc, #428]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a6a      	ldr	r2, [pc, #424]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f86:	2308      	movs	r3, #8
 8000f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000f90:	4619      	mov	r1, r3
 8000f92:	485d      	ldr	r0, [pc, #372]	; (8001108 <HAL_UART_MspInit+0x2cc>)
 8000f94:	f000 ff86 	bl	8001ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4854      	ldr	r0, [pc, #336]	; (8001110 <HAL_UART_MspInit+0x2d4>)
 8000fbe:	f000 ff71 	bl	8001ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2035      	movs	r0, #53	; 0x35
 8000fc8:	f000 feb0 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000fcc:	2035      	movs	r0, #53	; 0x35
 8000fce:	f000 fec9 	bl	8001d64 <HAL_NVIC_EnableIRQ>
}
 8000fd2:	e0f1      	b.n	80011b8 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <HAL_UART_MspInit+0x2d8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d144      	bne.n	8001068 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fde:	2340      	movs	r3, #64	; 0x40
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fe2c 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8000ff6:	f7ff fe85 	bl	8000d04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a41      	ldr	r2, [pc, #260]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a3b      	ldr	r2, [pc, #236]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800102a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800102e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001044:	2307      	movs	r3, #7
 8001046:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800104e:	4619      	mov	r1, r3
 8001050:	4831      	ldr	r0, [pc, #196]	; (8001118 <HAL_UART_MspInit+0x2dc>)
 8001052:	f000 ff27 	bl	8001ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	210e      	movs	r1, #14
 800105a:	2025      	movs	r0, #37	; 0x25
 800105c:	f000 fe66 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001060:	2025      	movs	r0, #37	; 0x25
 8001062:	f000 fe7f 	bl	8001d64 <HAL_NVIC_EnableIRQ>
}
 8001066:	e0a7      	b.n	80011b8 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a2b      	ldr	r2, [pc, #172]	; (800111c <HAL_UART_MspInit+0x2e0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d158      	bne.n	8001124 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fde0 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x256>
      Error_Handler();
 800108e:	f7ff fe39 	bl	8000d04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a1b      	ldr	r2, [pc, #108]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_UART_MspInit+0x2c8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010e6:	4619      	mov	r1, r3
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <HAL_UART_MspInit+0x2e4>)
 80010ea:	f000 fedb 	bl	8001ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2108      	movs	r1, #8
 80010f2:	2027      	movs	r0, #39	; 0x27
 80010f4:	f000 fe1a 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010f8:	2027      	movs	r0, #39	; 0x27
 80010fa:	f000 fe33 	bl	8001d64 <HAL_NVIC_EnableIRQ>
}
 80010fe:	e05b      	b.n	80011b8 <HAL_UART_MspInit+0x37c>
 8001100:	40004c00 	.word	0x40004c00
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800
 800110c:	40005000 	.word	0x40005000
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40011000 	.word	0x40011000
 8001118:	40020000 	.word	0x40020000
 800111c:	40004800 	.word	0x40004800
 8001120:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_UART_MspInit+0x384>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d144      	bne.n	80011b8 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800112e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fd82 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x312>
      Error_Handler();
 800114a:	f7ff fddb 	bl	8000d04 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_UART_MspInit+0x388>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_UART_MspInit+0x388>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_UART_MspInit+0x388>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_UART_MspInit+0x388>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_UART_MspInit+0x388>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_UART_MspInit+0x388>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800117e:	23c0      	movs	r3, #192	; 0xc0
 8001180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001196:	2308      	movs	r3, #8
 8001198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80011a0:	4619      	mov	r1, r3
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <HAL_UART_MspInit+0x38c>)
 80011a4:	f000 fe7e 	bl	8001ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2108      	movs	r1, #8
 80011ac:	2047      	movs	r0, #71	; 0x47
 80011ae:	f000 fdbd 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011b2:	2047      	movs	r0, #71	; 0x47
 80011b4:	f000 fdd6 	bl	8001d64 <HAL_NVIC_EnableIRQ>
}
 80011b8:	bf00      	nop
 80011ba:	37d0      	adds	r7, #208	; 0xd0
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40011400 	.word	0x40011400
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800

080011cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_FMC_MspInit+0xa4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d13e      	bne.n	8001266 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_FMC_MspInit+0xa4>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_FMC_MspInit+0xa8>)
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <HAL_FMC_MspInit+0xa8>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6393      	str	r3, [r2, #56]	; 0x38
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_FMC_MspInit+0xa8>)
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001206:	2307      	movs	r3, #7
 8001208:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2303      	movs	r3, #3
 8001214:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	4816      	ldr	r0, [pc, #88]	; (8001278 <HAL_FMC_MspInit+0xac>)
 8001220:	f000 fe40 	bl	8001ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001224:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001228:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001236:	230c      	movs	r3, #12
 8001238:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <HAL_FMC_MspInit+0xb0>)
 8001240:	f000 fe30 	bl	8001ea4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001244:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001248:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <HAL_FMC_MspInit+0xb4>)
 8001260:	f000 fe20 	bl	8001ea4 <HAL_GPIO_Init>
 8001264:	e000      	b.n	8001268 <HAL_FMC_MspInit+0x9c>
    return;
 8001266:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000390 	.word	0x20000390
 8001274:	40023800 	.word	0x40023800
 8001278:	40021400 	.word	0x40021400
 800127c:	40021000 	.word	0x40021000
 8001280:	40020c00 	.word	0x40020c00

08001284 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800128c:	f7ff ff9e 	bl	80011cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a8:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_InitTick+0xe0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_InitTick+0xe0>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6413      	str	r3, [r2, #64]	; 0x40
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_InitTick+0xe0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012c0:	f107 0210 	add.w	r2, r7, #16
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fc8a 	bl	8002be4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012da:	f001 fc5b 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 80012de:	6378      	str	r0, [r7, #52]	; 0x34
 80012e0:	e004      	b.n	80012ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012e2:	f001 fc57 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 80012e6:	4603      	mov	r3, r0
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ee:	4a23      	ldr	r2, [pc, #140]	; (800137c <HAL_InitTick+0xe4>)
 80012f0:	fba2 2303 	umull	r2, r3, r2, r3
 80012f4:	0c9b      	lsrs	r3, r3, #18
 80012f6:	3b01      	subs	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_InitTick+0xe8>)
 80012fc:	4a21      	ldr	r2, [pc, #132]	; (8001384 <HAL_InitTick+0xec>)
 80012fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_InitTick+0xe8>)
 8001302:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001306:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001308:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <HAL_InitTick+0xe8>)
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_InitTick+0xe8>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_InitTick+0xe8>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_InitTick+0xe8>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_InitTick+0xe8>)
 8001322:	f002 f8c9 	bl	80034b8 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800132c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001330:	2b00      	cmp	r3, #0
 8001332:	d11b      	bne.n	800136c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <HAL_InitTick+0xe8>)
 8001336:	f002 f917 	bl	8003568 <HAL_TIM_Base_Start_IT>
 800133a:	4603      	mov	r3, r0
 800133c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001344:	2b00      	cmp	r3, #0
 8001346:	d111      	bne.n	800136c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001348:	2036      	movs	r0, #54	; 0x36
 800134a:	f000 fd0b 	bl	8001d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d808      	bhi.n	8001366 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	2036      	movs	r0, #54	; 0x36
 800135a:	f000 fce7 	bl	8001d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_InitTick+0xf0>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e002      	b.n	800136c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800136c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001370:	4618      	mov	r0, r3
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	431bde83 	.word	0x431bde83
 8001380:	20000394 	.word	0x20000394
 8001384:	40001000 	.word	0x40001000
 8001388:	20000004 	.word	0x20000004

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <CAN1_RX0_IRQHandler+0x10>)
 80013ea:	f000 f9ae 	bl	800174a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000028 	.word	0x20000028

080013f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <USART1_IRQHandler+0x10>)
 80013fe:	f002 fc0d 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001ac 	.word	0x200001ac

0800140c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <USART3_IRQHandler+0x10>)
 8001412:	f002 fc03 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000234 	.word	0x20000234

08001420 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <UART4_IRQHandler+0x10>)
 8001426:	f002 fbf9 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000009c 	.word	0x2000009c

08001434 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <UART5_IRQHandler+0x10>)
 800143a:	f002 fbef 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000124 	.word	0x20000124

08001448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM6_DAC_IRQHandler+0x10>)
 800144e:	f002 f903 	bl	8003658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000394 	.word	0x20000394

0800145c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM7_IRQHandler+0x10>)
 8001462:	f002 f8f9 	bl	8003658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000050 	.word	0x20000050

08001470 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <USART6_IRQHandler+0x10>)
 8001476:	f002 fbd1 	bl	8003c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200002bc 	.word	0x200002bc

08001484 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ae:	490e      	ldr	r1, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c4:	4c0b      	ldr	r4, [pc, #44]	; (80014f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d2:	f7ff ffd7 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f003 fc53 	bl	8004d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f88d 	bl	80005f8 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ec:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 80014f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014f4:	200003e4 	.word	0x200003e4

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>

080014fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fe:	2003      	movs	r0, #3
 8001500:	f000 fc09 	bl	8001d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001504:	200f      	movs	r0, #15
 8001506:	f7ff fec7 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150a:	f7ff fc01 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008
 8001538:	200003e0 	.word	0x200003e0

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200003e0 	.word	0x200003e0

08001554 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0ed      	b.n	8001742 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fbf0 	bl	8000d58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001588:	f7ff ffd8 	bl	800153c <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800158e:	e012      	b.n	80015b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001590:	f7ff ffd4 	bl	800153c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b0a      	cmp	r3, #10
 800159c:	d90b      	bls.n	80015b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2205      	movs	r2, #5
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0c5      	b.n	8001742 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0e5      	beq.n	8001590 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0202 	bic.w	r2, r2, #2
 80015d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d4:	f7ff ffb2 	bl	800153c <HAL_GetTick>
 80015d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015da:	e012      	b.n	8001602 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015dc:	f7ff ffae 	bl	800153c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b0a      	cmp	r3, #10
 80015e8:	d90b      	bls.n	8001602 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2205      	movs	r2, #5
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e09f      	b.n	8001742 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e1b      	ldrb	r3, [r3, #24]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e5b      	ldrb	r3, [r3, #25]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e007      	b.n	8001664 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001662:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e9b      	ldrb	r3, [r3, #26]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e007      	b.n	800168e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0220 	bic.w	r2, r2, #32
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7edb      	ldrb	r3, [r3, #27]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0210 	bic.w	r2, r2, #16
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0210 	orr.w	r2, r2, #16
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7f1b      	ldrb	r3, [r3, #28]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0208 	orr.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0208 	bic.w	r2, r2, #8
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7f5b      	ldrb	r3, [r3, #29]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0204 	orr.w	r2, r2, #4
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0204 	bic.w	r2, r2, #4
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	ea42 0103 	orr.w	r1, r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b08a      	sub	sp, #40	; 0x28
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d07c      	beq.n	800188a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d023      	beq.n	80017e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f983 	bl	8001ab8 <HAL_CAN_TxMailbox0CompleteCallback>
 80017b2:	e016      	b.n	80017e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e00c      	b.n	80017e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
 80017da:	e002      	b.n	80017e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 f989 	bl	8001af4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d024      	beq.n	8001836 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d003      	beq.n	8001808 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f963 	bl	8001acc <HAL_CAN_TxMailbox1CompleteCallback>
 8001806:	e016      	b.n	8001836 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	e00c      	b.n	8001836 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	e002      	b.n	8001836 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f969 	bl	8001b08 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d024      	beq.n	800188a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001848:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f943 	bl	8001ae0 <HAL_CAN_TxMailbox2CompleteCallback>
 800185a:	e016      	b.n	800188a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
 800186e:	e00c      	b.n	800188a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	e002      	b.n	800188a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f949 	bl	8001b1c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00c      	beq.n	80018ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2210      	movs	r2, #16
 80018ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00b      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2208      	movs	r2, #8
 80018c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f93a 	bl	8001b44 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f921 	bl	8001b30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00c      	beq.n	8001912 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2210      	movs	r2, #16
 8001910:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2208      	movs	r2, #8
 800192c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f91c 	bl	8001b6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f903 	bl	8001b58 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2210      	movs	r2, #16
 800196c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f906 	bl	8001b80 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2208      	movs	r2, #8
 800198e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f8ff 	bl	8001b94 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d07b      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d072      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d043      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03e      	beq.n	8001a90 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a18:	2b60      	cmp	r3, #96	; 0x60
 8001a1a:	d02b      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x32a>
 8001a1c:	2b60      	cmp	r3, #96	; 0x60
 8001a1e:	d82e      	bhi.n	8001a7e <HAL_CAN_IRQHandler+0x334>
 8001a20:	2b50      	cmp	r3, #80	; 0x50
 8001a22:	d022      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x320>
 8001a24:	2b50      	cmp	r3, #80	; 0x50
 8001a26:	d82a      	bhi.n	8001a7e <HAL_CAN_IRQHandler+0x334>
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	d019      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x316>
 8001a2c:	2b40      	cmp	r3, #64	; 0x40
 8001a2e:	d826      	bhi.n	8001a7e <HAL_CAN_IRQHandler+0x334>
 8001a30:	2b30      	cmp	r3, #48	; 0x30
 8001a32:	d010      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x30c>
 8001a34:	2b30      	cmp	r3, #48	; 0x30
 8001a36:	d822      	bhi.n	8001a7e <HAL_CAN_IRQHandler+0x334>
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d002      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x2f8>
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d005      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a40:	e01d      	b.n	8001a7e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a4a:	e019      	b.n	8001a80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a54:	e014      	b.n	8001a80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f043 0320 	orr.w	r3, r3, #32
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5e:	e00f      	b.n	8001a80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a68:	e00a      	b.n	8001a80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a72:	e005      	b.n	8001a80 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a7c:	e000      	b.n	8001a80 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a7e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2204      	movs	r2, #4
 8001a96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f87c 	bl	8001ba8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <__NVIC_SetPriorityGrouping>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x40>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	05fa0000 	.word	0x05fa0000

08001c04 <__NVIC_GetPriorityGrouping>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff4c 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3e:	f7ff ff61 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	68b9      	ldr	r1, [r7, #8]
 8001d48:	6978      	ldr	r0, [r7, #20]
 8001d4a:	f7ff ffb1 	bl	8001cb0 <NVIC_EncodePriority>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff80 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff54 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d8e:	f7ff fbd5 	bl	800153c <HAL_GetTick>
 8001d92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d008      	beq.n	8001db2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e052      	b.n	8001e58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0216 	bic.w	r2, r2, #22
 8001dc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d103      	bne.n	8001de2 <HAL_DMA_Abort+0x62>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0208 	bic.w	r2, r2, #8
 8001df0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e02:	e013      	b.n	8001e2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e04:	f7ff fb9a 	bl	800153c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b05      	cmp	r3, #5
 8001e10:	d90c      	bls.n	8001e2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e015      	b.n	8001e58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1e4      	bne.n	8001e04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	223f      	movs	r2, #63	; 0x3f
 8001e40:	409a      	lsls	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d004      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00c      	b.n	8001e98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2205      	movs	r2, #5
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e175      	b.n	80021b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 8164 	bne.w	80021aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x56>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80be 	beq.w	80021aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_GPIO_Init+0x324>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_GPIO_Init+0x324>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_GPIO_Init+0x324>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002046:	4a61      	ldr	r2, [pc, #388]	; (80021cc <HAL_GPIO_Init+0x328>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x32c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d037      	beq.n	80020e2 <HAL_GPIO_Init+0x23e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a57      	ldr	r2, [pc, #348]	; (80021d4 <HAL_GPIO_Init+0x330>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_GPIO_Init+0x23a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a56      	ldr	r2, [pc, #344]	; (80021d8 <HAL_GPIO_Init+0x334>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d02b      	beq.n	80020da <HAL_GPIO_Init+0x236>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a55      	ldr	r2, [pc, #340]	; (80021dc <HAL_GPIO_Init+0x338>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d025      	beq.n	80020d6 <HAL_GPIO_Init+0x232>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a54      	ldr	r2, [pc, #336]	; (80021e0 <HAL_GPIO_Init+0x33c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01f      	beq.n	80020d2 <HAL_GPIO_Init+0x22e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a53      	ldr	r2, [pc, #332]	; (80021e4 <HAL_GPIO_Init+0x340>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0x22a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x344>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x348>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00d      	beq.n	80020c6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d007      	beq.n	80020c2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x350>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_GPIO_Init+0x21a>
 80020ba:	2309      	movs	r3, #9
 80020bc:	e012      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020be:	230a      	movs	r3, #10
 80020c0:	e010      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e00e      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00c      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020ca:	2306      	movs	r3, #6
 80020cc:	e00a      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020ce:	2305      	movs	r3, #5
 80020d0:	e008      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020d2:	2304      	movs	r3, #4
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020d6:	2303      	movs	r3, #3
 80020d8:	e004      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020da:	2302      	movs	r3, #2
 80020dc:	e002      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <HAL_GPIO_Init+0x240>
 80020e2:	2300      	movs	r3, #0
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	f002 0203 	and.w	r2, r2, #3
 80020ea:	0092      	lsls	r2, r2, #2
 80020ec:	4093      	lsls	r3, r2
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020f4:	4935      	ldr	r1, [pc, #212]	; (80021cc <HAL_GPIO_Init+0x328>)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	089b      	lsrs	r3, r3, #2
 80020fa:	3302      	adds	r3, #2
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002126:	4a34      	ldr	r2, [pc, #208]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_GPIO_Init+0x354>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217a:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <HAL_GPIO_Init+0x354>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_GPIO_Init+0x354>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_GPIO_Init+0x354>)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3301      	adds	r3, #1
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	2b0f      	cmp	r3, #15
 80021b4:	f67f ae86 	bls.w	8001ec4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40013800 	.word	0x40013800
 80021d0:	40020000 	.word	0x40020000
 80021d4:	40020400 	.word	0x40020400
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40021400 	.word	0x40021400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40021c00 	.word	0x40021c00
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40022400 	.word	0x40022400
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225e:	f7ff f96d 	bl	800153c <HAL_GetTick>
 8002262:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002264:	e009      	b.n	800227a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002266:	f7ff f969 	bl	800153c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002274:	d901      	bls.n	800227a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e022      	b.n	80022c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d1ee      	bne.n	8002266 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800228e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002292:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002294:	f7ff f952 	bl	800153c <HAL_GetTick>
 8002298:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800229a:	e009      	b.n	80022b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800229c:	f7ff f94e 	bl	800153c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022aa:	d901      	bls.n	80022b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e007      	b.n	80022c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022bc:	d1ee      	bne.n	800229c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e291      	b.n	800280a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d00c      	beq.n	800231a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002300:	4b93      	ldr	r3, [pc, #588]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d112      	bne.n	8002332 <HAL_RCC_OscConfig+0x62>
 800230c:	4b90      	ldr	r3, [pc, #576]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002318:	d10b      	bne.n	8002332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231a:	4b8d      	ldr	r3, [pc, #564]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d06c      	beq.n	8002400 <HAL_RCC_OscConfig+0x130>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d168      	bne.n	8002400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e26b      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x7a>
 800233c:	4b84      	ldr	r3, [pc, #528]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a83      	ldr	r2, [pc, #524]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0xd8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0x9c>
 8002352:	4b7f      	ldr	r3, [pc, #508]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a7e      	ldr	r2, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a7b      	ldr	r2, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xd8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0xc0>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xd8>
 8002390:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a6b      	ldr	r2, [pc, #428]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff f8c4 	bl	800153c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff f8c0 	bl	800153c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e21f      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xe8>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff f8b0 	bl	800153c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff f8ac 	bl	800153c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e20b      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x110>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d069      	beq.n	80024e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x190>
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x17a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1df      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	493d      	ldr	r1, [pc, #244]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e040      	b.n	80024e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d023      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff f862 	bl	800153c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff f85e 	bl	800153c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1bd      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0f0      	beq.n	800247c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4929      	ldr	r1, [pc, #164]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	600b      	str	r3, [r1, #0]
 80024ae:	e018      	b.n	80024e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a26      	ldr	r2, [pc, #152]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7ff f83e 	bl	800153c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7ff f83a 	bl	800153c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e199      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d038      	beq.n	8002560 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d019      	beq.n	800252a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f6:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	4a15      	ldr	r2, [pc, #84]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7ff f81b 	bl	800153c <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250a:	f7ff f817 	bl	800153c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e176      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x23a>
 8002528:	e01a      	b.n	8002560 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 800252c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252e:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HAL_RCC_OscConfig+0x280>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7ff f801 	bl	800153c <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe fffd 	bl	800153c <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d903      	bls.n	8002554 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e15c      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
 8002550:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b91      	ldr	r3, [pc, #580]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ee      	bne.n	800253e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a4 	beq.w	80026b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b8b      	ldr	r3, [pc, #556]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b88      	ldr	r3, [pc, #544]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a87      	ldr	r2, [pc, #540]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b85      	ldr	r3, [pc, #532]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80025a2:	4b7f      	ldr	r3, [pc, #508]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7e      	ldr	r2, [pc, #504]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7fe ffc5 	bl	800153c <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7fe ffc1 	bl	800153c <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b64      	cmp	r3, #100	; 0x64
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e120      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025c8:	4b75      	ldr	r3, [pc, #468]	; (80027a0 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x31a>
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a6e      	ldr	r2, [pc, #440]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	e02d      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x33c>
 80025f2:	4b6a      	ldr	r3, [pc, #424]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b67      	ldr	r3, [pc, #412]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a66      	ldr	r2, [pc, #408]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	e01c      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b05      	cmp	r3, #5
 8002612:	d10c      	bne.n	800262e <HAL_RCC_OscConfig+0x35e>
 8002614:	4b61      	ldr	r3, [pc, #388]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a60      	ldr	r2, [pc, #384]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800261a:	f043 0304 	orr.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	4b5e      	ldr	r3, [pc, #376]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	4a5d      	ldr	r2, [pc, #372]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6713      	str	r3, [r2, #112]	; 0x70
 800262c:	e00b      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
 800262e:	4b5b      	ldr	r3, [pc, #364]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	6713      	str	r3, [r2, #112]	; 0x70
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a57      	ldr	r2, [pc, #348]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002640:	f023 0304 	bic.w	r3, r3, #4
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d015      	beq.n	800267a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe ff75 	bl	800153c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	e00a      	b.n	800266c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe ff71 	bl	800153c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	; 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e0ce      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ee      	beq.n	8002656 <HAL_RCC_OscConfig+0x386>
 8002678:	e014      	b.n	80026a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe ff5f 	bl	800153c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe ff5b 	bl	800153c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0b8      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ee      	bne.n	8002682 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026aa:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a4 	beq.w	8002808 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d06b      	beq.n	80027a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d149      	bne.n	8002768 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a30      	ldr	r2, [pc, #192]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe ff2c 	bl	800153c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7fe ff28 	bl	800153c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e087      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	4313      	orrs	r3, r2
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800272e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002732:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fefc 	bl	800153c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fef8 	bl	800153c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e057      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x478>
 8002766:	e04f      	b.n	8002808 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0b      	ldr	r2, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 800276e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fee2 	bl	800153c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fede 	bl	800153c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e03d      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_RCC_OscConfig+0x4cc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x4ac>
 800279a:	e035      	b.n	8002808 <HAL_RCC_OscConfig+0x538>
 800279c:	40023800 	.word	0x40023800
 80027a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x544>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d028      	beq.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d121      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11a      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027dc:	4293      	cmp	r3, r2
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	3b01      	subs	r3, #1
 80027ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d0      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 020f 	bic.w	r2, r3, #15
 8002846:	4965      	ldr	r1, [pc, #404]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d040      	beq.n	800293c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e073      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7fe fe16 	bl	800153c <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fe12 	bl	800153c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e053      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d210      	bcs.n	800296c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f821 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1c8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	490a      	ldr	r1, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1cc>)
 80029bc:	5ccb      	ldrb	r3, [r1, r3]
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1d0>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1d4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fc64 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023c00 	.word	0x40023c00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08004df0 	.word	0x08004df0
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b090      	sub	sp, #64	; 0x40
 80029f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	637b      	str	r3, [r7, #52]	; 0x34
 80029fc:	2300      	movs	r3, #0
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a00:	2300      	movs	r3, #0
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a08:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d00d      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x40>
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	f200 80a1 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x34>
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a22:	e09b      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a28:	e09b      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2a:	4b53      	ldr	r3, [pc, #332]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a2e:	e098      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a30:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d028      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a46:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	627a      	str	r2, [r7, #36]	; 0x24
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4b47      	ldr	r3, [pc, #284]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a5c:	fb03 f201 	mul.w	r2, r3, r1
 8002a60:	2300      	movs	r3, #0
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	4a43      	ldr	r2, [pc, #268]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a70:	460a      	mov	r2, r1
 8002a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a76:	4413      	add	r3, r2
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
 8002a80:	61fa      	str	r2, [r7, #28]
 8002a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a8a:	f7fd fbbd 	bl	8000208 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4613      	mov	r3, r2
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a96:	e053      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	617a      	str	r2, [r7, #20]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002aaa:	f04f 0b00 	mov.w	fp, #0
 8002aae:	4652      	mov	r2, sl
 8002ab0:	465b      	mov	r3, fp
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac0:	0150      	lsls	r0, r2, #5
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8002aca:	eb63 090b 	sbc.w	r9, r3, fp
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8002ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	00eb      	lsls	r3, r5, #3
 8002af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002af8:	00e2      	lsls	r2, r4, #3
 8002afa:	4614      	mov	r4, r2
 8002afc:	461d      	mov	r5, r3
 8002afe:	eb14 030a 	adds.w	r3, r4, sl
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	eb45 030b 	adc.w	r3, r5, fp
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b16:	4629      	mov	r1, r5
 8002b18:	028b      	lsls	r3, r1, #10
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b20:	4621      	mov	r1, r4
 8002b22:	028a      	lsls	r2, r1, #10
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b34:	f7fd fb68 	bl	8000208 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b5a:	e002      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3740      	adds	r7, #64	; 0x40
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	017d7840 	.word	0x017d7840

08002b7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000000 	.word	0x20000000

08002b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b98:	f7ff fff0 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	0a9b      	lsrs	r3, r3, #10
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	4903      	ldr	r1, [pc, #12]	; (8002bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002baa:	5ccb      	ldrb	r3, [r1, r3]
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	08004e00 	.word	0x08004e00

08002bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bc0:	f7ff ffdc 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	0b5b      	lsrs	r3, r3, #13
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08004e00 	.word	0x08004e00

08002be4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	08db      	lsrs	r3, r3, #3
 8002c1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCC_GetClockConfig+0x60>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d012      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c70:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a68      	ldr	r2, [pc, #416]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	4964      	ldr	r1, [pc, #400]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	4959      	ldr	r1, [pc, #356]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d017      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cde:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	494a      	ldr	r1, [pc, #296]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 808b 	beq.w	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d2c:	4b3a      	ldr	r3, [pc, #232]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	4a39      	ldr	r2, [pc, #228]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d36:	6413      	str	r3, [r2, #64]	; 0x40
 8002d38:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d44:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d50:	f7fe fbf4 	bl	800153c <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d58:	f7fe fbf0 	bl	800153c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e357      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d76:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d035      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d02e      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002db6:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dbc:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d114      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fbb8 	bl	800153c <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fbb4 	bl	800153c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e319      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0ee      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dfe:	d111      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e0e:	400b      	ands	r3, r1
 8002e10:	4901      	ldr	r1, [pc, #4]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	0ffffcff 	.word	0x0ffffcff
 8002e24:	4baa      	ldr	r3, [pc, #680]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4aa9      	ldr	r2, [pc, #676]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e2e:	6093      	str	r3, [r2, #8]
 8002e30:	4ba7      	ldr	r3, [pc, #668]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e3c:	49a4      	ldr	r1, [pc, #656]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e4e:	4ba0      	ldr	r3, [pc, #640]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e54:	4a9e      	ldr	r2, [pc, #632]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e5e:	4b9c      	ldr	r3, [pc, #624]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	4999      	ldr	r1, [pc, #612]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7c:	4b94      	ldr	r3, [pc, #592]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8a:	4991      	ldr	r1, [pc, #580]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e9e:	4b8c      	ldr	r3, [pc, #560]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eac:	4988      	ldr	r1, [pc, #544]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ec0:	4b83      	ldr	r3, [pc, #524]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ece:	4980      	ldr	r1, [pc, #512]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ee2:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4977      	ldr	r1, [pc, #476]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f04:	4b72      	ldr	r3, [pc, #456]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f023 0203 	bic.w	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	496f      	ldr	r1, [pc, #444]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f023 020c 	bic.w	r2, r3, #12
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f34:	4966      	ldr	r1, [pc, #408]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f48:	4b61      	ldr	r3, [pc, #388]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	495e      	ldr	r1, [pc, #376]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f6a:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f78:	4955      	ldr	r1, [pc, #340]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	494d      	ldr	r1, [pc, #308]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fae:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	4944      	ldr	r1, [pc, #272]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fd0:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	493c      	ldr	r1, [pc, #240]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ff2:	4b37      	ldr	r3, [pc, #220]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	4933      	ldr	r1, [pc, #204]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003014:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003022:	492b      	ldr	r1, [pc, #172]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d011      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003044:	4922      	ldr	r1, [pc, #136]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003054:	d101      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003056:	2301      	movs	r3, #1
 8003058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003084:	4912      	ldr	r1, [pc, #72]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00b      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a8:	4909      	ldr	r1, [pc, #36]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d006      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80d9 	beq.w	8003276 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a01      	ldr	r2, [pc, #4]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ce:	e001      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d6:	f7fe fa31 	bl	800153c <HAL_GetTick>
 80030da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030de:	f7fe fa2d 	bl	800153c <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e194      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f0:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d021      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11d      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003110:	4b64      	ldr	r3, [pc, #400]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800311e:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	019a      	lsls	r2, r3, #6
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	061b      	lsls	r3, r3, #24
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	071b      	lsls	r3, r3, #28
 8003144:	4957      	ldr	r1, [pc, #348]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02e      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d129      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003178:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317e:	0c1b      	lsrs	r3, r3, #16
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318c:	0f1b      	lsrs	r3, r3, #28
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	019a      	lsls	r2, r3, #6
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	071b      	lsls	r3, r3, #28
 80031ac:	493d      	ldr	r1, [pc, #244]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ba:	f023 021f 	bic.w	r2, r3, #31
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	4937      	ldr	r1, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01d      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031de:	0e1b      	lsrs	r3, r3, #24
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ec:	0f1b      	lsrs	r3, r3, #28
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	019a      	lsls	r2, r3, #6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	431a      	orrs	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	431a      	orrs	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	071b      	lsls	r3, r3, #28
 800320c:	4925      	ldr	r1, [pc, #148]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d011      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	019a      	lsls	r2, r3, #6
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	071b      	lsls	r3, r3, #28
 800323c:	4919      	ldr	r1, [pc, #100]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fe f974 	bl	800153c <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003258:	f7fe f970 	bl	800153c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0d7      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 80cd 	bne.w	8003418 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328a:	f7fe f957 	bl	800153c <HAL_GetTick>
 800328e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003292:	f7fe f953 	bl	800153c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b64      	cmp	r3, #100	; 0x64
 800329e:	d903      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0ba      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80032a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032a8:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b4:	d0ed      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02e      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d12a      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032de:	4b51      	ldr	r3, [pc, #324]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032ec:	4b4d      	ldr	r3, [pc, #308]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	0f1b      	lsrs	r3, r3, #28
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	019a      	lsls	r2, r3, #6
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	071b      	lsls	r3, r3, #28
 8003312:	4944      	ldr	r1, [pc, #272]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800331a:	4b42      	ldr	r3, [pc, #264]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800331c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003320:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	3b01      	subs	r3, #1
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	493d      	ldr	r1, [pc, #244]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d022      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003348:	d11d      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800334a:	4b36      	ldr	r3, [pc, #216]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	0e1b      	lsrs	r3, r3, #24
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	0f1b      	lsrs	r3, r3, #28
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	019a      	lsls	r2, r3, #6
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	431a      	orrs	r2, r3
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	061b      	lsls	r3, r3, #24
 8003378:	431a      	orrs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	071b      	lsls	r3, r3, #28
 800337e:	4929      	ldr	r1, [pc, #164]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d028      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	0e1b      	lsrs	r3, r3, #24
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	019a      	lsls	r2, r3, #6
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	431a      	orrs	r2, r3
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	071b      	lsls	r3, r3, #28
 80033c6:	4917      	ldr	r1, [pc, #92]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4911      	ldr	r1, [pc, #68]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033e4:	4b0f      	ldr	r3, [pc, #60]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f0:	f7fe f8a4 	bl	800153c <HAL_GetTick>
 80033f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033f8:	f7fe f8a0 	bl	800153c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e007      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800340a:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003416:	d1ef      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40023800 	.word	0x40023800

08003428 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e038      	b.n	80034b0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f7fd ff16 	bl	8001284 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3308      	adds	r3, #8
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f001 fb74 	bl	8004b50 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	461a      	mov	r2, r3
 8003472:	68b9      	ldr	r1, [r7, #8]
 8003474:	f001 fbfc 	bl	8004c70 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6858      	ldr	r0, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	f001 fc43 	bl	8004d10 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	6892      	ldr	r2, [r2, #8]
 800349e:	f041 0101 	orr.w	r1, r1, #1
 80034a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e049      	b.n	800355e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fc86 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f000 f9f6 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d001      	beq.n	8003580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e054      	b.n	800362a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a26      	ldr	r2, [pc, #152]	; (8003638 <HAL_TIM_Base_Start_IT+0xd0>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d022      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035aa:	d01d      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_TIM_Base_Start_IT+0xd4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_TIM_Base_Start_IT+0xd8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1f      	ldr	r2, [pc, #124]	; (8003644 <HAL_TIM_Base_Start_IT+0xdc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a1e      	ldr	r2, [pc, #120]	; (8003648 <HAL_TIM_Base_Start_IT+0xe0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1c      	ldr	r2, [pc, #112]	; (800364c <HAL_TIM_Base_Start_IT+0xe4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x80>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <HAL_TIM_Base_Start_IT+0xe8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d115      	bne.n	8003614 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_TIM_Base_Start_IT+0xec>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d015      	beq.n	8003626 <HAL_TIM_Base_Start_IT+0xbe>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d011      	beq.n	8003626 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003612:	e008      	b.n	8003626 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e000      	b.n	8003628 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40010000 	.word	0x40010000
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800
 8003644:	40000c00 	.word	0x40000c00
 8003648:	40010400 	.word	0x40010400
 800364c:	40014000 	.word	0x40014000
 8003650:	40001800 	.word	0x40001800
 8003654:	00010007 	.word	0x00010007

08003658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0202 	mvn.w	r2, #2
 8003684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f905 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8f7 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f908 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0204 	mvn.w	r2, #4
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8db 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8cd 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8de 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0208 	mvn.w	r2, #8
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2204      	movs	r2, #4
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8b1 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8a3 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8b4 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b10      	cmp	r3, #16
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f887 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f879 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f88a 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0201 	mvn.w	r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fa82 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9a8 	bl	8003b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d10e      	bne.n	8003836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d107      	bne.n	8003836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f99b 	bl	8003b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d10e      	bne.n	8003862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d107      	bne.n	8003862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800385a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f838 	bl	80038d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b20      	cmp	r3, #32
 800386e:	d10e      	bne.n	800388e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d107      	bne.n	800388e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f06f 0220 	mvn.w	r2, #32
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f95b 	bl	8003b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <TIM_Base_SetConfig+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d027      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d023      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d017      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00f      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00b      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a25      	ldr	r2, [pc, #148]	; (8003a1c <TIM_Base_SetConfig+0x134>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <TIM_Base_SetConfig+0x138>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <TIM_Base_SetConfig+0x13c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d108      	bne.n	80039ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0c      	ldr	r2, [pc, #48]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010000 	.word	0x40010000
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40010400 	.word	0x40010400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	40001800 	.word	0x40001800
 8003a20:	40001c00 	.word	0x40001c00
 8003a24:	40002000 	.word	0x40002000

08003a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e06d      	b.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a30      	ldr	r2, [pc, #192]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2f      	ldr	r2, [pc, #188]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a20      	ldr	r2, [pc, #128]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d022      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d01d      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1a      	ldr	r2, [pc, #104]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10c      	bne.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40001800 	.word	0x40001800

08003b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e040      	b.n	8003c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd f94a 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0201 	bic.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fb1e 	bl	8004200 <UART_SetConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e022      	b.n	8003c14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fd76 	bl	80046c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fdfd 	bl	800480c <UART_CheckIdleState>
 8003c12:	4603      	mov	r3, r0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b0ba      	sub	sp, #232	; 0xe8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c46:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d115      	bne.n	8003c84 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00f      	beq.n	8003c84 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d009      	beq.n	8003c84 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8297 	beq.w	80041a8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
      }
      return;
 8003c82:	e291      	b.n	80041a8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8117 	beq.w	8003ebc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c9e:	4b85      	ldr	r3, [pc, #532]	; (8003eb4 <HAL_UART_IRQHandler+0x298>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 810a 	beq.w	8003ebc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d011      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xbc>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00b      	beq.n	8003cd8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d011      	beq.n	8003d08 <HAL_UART_IRQHandler+0xec>
 8003ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d011      	beq.n	8003d38 <HAL_UART_IRQHandler+0x11c>
 8003d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2204      	movs	r2, #4
 8003d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	f043 0202 	orr.w	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d54:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	f043 0208 	orr.w	r2, r3, #8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d012      	beq.n	8003da6 <HAL_UART_IRQHandler+0x18a>
 8003d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9c:	f043 0220 	orr.w	r2, r3, #32
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 81fd 	beq.w	80041ac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00d      	beq.n	8003dda <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d005      	beq.n	8003dfe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003df6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d04f      	beq.n	8003e9e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fe01 	bl	8004a06 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d141      	bne.n	8003e96 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e4e:	e841 2300 	strex	r3, r2, [r1]
 8003e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1d9      	bne.n	8003e12 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d013      	beq.n	8003e8e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <HAL_UART_IRQHandler+0x29c>)
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fd fff4 	bl	8001e60 <HAL_DMA_Abort_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d017      	beq.n	8003eae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	e00f      	b.n	8003eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f9a0 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e00b      	b.n	8003eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f99c 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e007      	b.n	8003eae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f998 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003eac:	e17e      	b.n	80041ac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	bf00      	nop
    return;
 8003eb0:	e17c      	b.n	80041ac <HAL_UART_IRQHandler+0x590>
 8003eb2:	bf00      	nop
 8003eb4:	04000120 	.word	0x04000120
 8003eb8:	08004acf 	.word	0x08004acf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 814c 	bne.w	800415e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 8145 	beq.w	800415e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 813e 	beq.w	800415e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	f040 80b6 	bne.w	8004066 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 8150 	beq.w	80041b0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	f080 8148 	bcs.w	80041b0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	f000 8086 	beq.w	8004044 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1da      	bne.n	8003f38 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8c:	e853 3f00 	ldrex	r3, [r3]
 8003f90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003faa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e1      	bne.n	8003f82 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fe4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fe8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e3      	bne.n	8003fbe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004014:	f023 0310 	bic.w	r3, r3, #16
 8004018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004026:	65bb      	str	r3, [r7, #88]	; 0x58
 8004028:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800402c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e4      	bne.n	8004004 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fe9e 	bl	8001d80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004056:	b29b      	uxth	r3, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8c2 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004064:	e0a4      	b.n	80041b0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004072:	b29b      	uxth	r3, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8096 	beq.w	80041b4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 8091 	beq.w	80041b4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b4:	647b      	str	r3, [r7, #68]	; 0x44
 80040b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e4      	bne.n	8004092 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3308      	adds	r3, #8
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	623b      	str	r3, [r7, #32]
   return(result);
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040ec:	633a      	str	r2, [r7, #48]	; 0x30
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f4:	e841 2300 	strex	r3, r2, [r1]
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1e3      	bne.n	80040c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	60fb      	str	r3, [r7, #12]
   return(result);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f023 0310 	bic.w	r3, r3, #16
 8004128:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	617b      	str	r3, [r7, #20]
   return(result);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e4      	bne.n	8004114 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f846 	bl	80041e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800415c:	e02a      	b.n	80041b4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800416a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01c      	beq.n	80041b8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
    }
    return;
 8004186:	e017      	b.n	80041b8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d012      	beq.n	80041ba <HAL_UART_IRQHandler+0x59e>
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00c      	beq.n	80041ba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fcaa 	bl	8004afa <UART_EndTransmit_IT>
    return;
 80041a6:	e008      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
      return;
 80041a8:	bf00      	nop
 80041aa:	e006      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
    return;
 80041ac:	bf00      	nop
 80041ae:	e004      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
      return;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
      return;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_UART_IRQHandler+0x59e>
    return;
 80041b8:	bf00      	nop
  }

}
 80041ba:	37e8      	adds	r7, #232	; 0xe8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4ba6      	ldr	r3, [pc, #664]	; (80044c4 <UART_SetConfig+0x2c4>)
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	430b      	orrs	r3, r1
 8004236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a94      	ldr	r2, [pc, #592]	; (80044c8 <UART_SetConfig+0x2c8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d120      	bne.n	80042be <UART_SetConfig+0xbe>
 800427c:	4b93      	ldr	r3, [pc, #588]	; (80044cc <UART_SetConfig+0x2cc>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d816      	bhi.n	80042b8 <UART_SetConfig+0xb8>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <UART_SetConfig+0x90>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042ad 	.word	0x080042ad
 8004298:	080042a7 	.word	0x080042a7
 800429c:	080042b3 	.word	0x080042b3
 80042a0:	2301      	movs	r3, #1
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e150      	b.n	8004548 <UART_SetConfig+0x348>
 80042a6:	2302      	movs	r3, #2
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	e14d      	b.n	8004548 <UART_SetConfig+0x348>
 80042ac:	2304      	movs	r3, #4
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e14a      	b.n	8004548 <UART_SetConfig+0x348>
 80042b2:	2308      	movs	r3, #8
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e147      	b.n	8004548 <UART_SetConfig+0x348>
 80042b8:	2310      	movs	r3, #16
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e144      	b.n	8004548 <UART_SetConfig+0x348>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a83      	ldr	r2, [pc, #524]	; (80044d0 <UART_SetConfig+0x2d0>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d132      	bne.n	800432e <UART_SetConfig+0x12e>
 80042c8:	4b80      	ldr	r3, [pc, #512]	; (80044cc <UART_SetConfig+0x2cc>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d828      	bhi.n	8004328 <UART_SetConfig+0x128>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <UART_SetConfig+0xdc>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	08004311 	.word	0x08004311
 80042e0:	08004329 	.word	0x08004329
 80042e4:	08004329 	.word	0x08004329
 80042e8:	08004329 	.word	0x08004329
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	08004329 	.word	0x08004329
 80042f4:	08004329 	.word	0x08004329
 80042f8:	08004329 	.word	0x08004329
 80042fc:	08004317 	.word	0x08004317
 8004300:	08004329 	.word	0x08004329
 8004304:	08004329 	.word	0x08004329
 8004308:	08004329 	.word	0x08004329
 800430c:	08004323 	.word	0x08004323
 8004310:	2300      	movs	r3, #0
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e118      	b.n	8004548 <UART_SetConfig+0x348>
 8004316:	2302      	movs	r3, #2
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e115      	b.n	8004548 <UART_SetConfig+0x348>
 800431c:	2304      	movs	r3, #4
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e112      	b.n	8004548 <UART_SetConfig+0x348>
 8004322:	2308      	movs	r3, #8
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e10f      	b.n	8004548 <UART_SetConfig+0x348>
 8004328:	2310      	movs	r3, #16
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e10c      	b.n	8004548 <UART_SetConfig+0x348>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a68      	ldr	r2, [pc, #416]	; (80044d4 <UART_SetConfig+0x2d4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d120      	bne.n	800437a <UART_SetConfig+0x17a>
 8004338:	4b64      	ldr	r3, [pc, #400]	; (80044cc <UART_SetConfig+0x2cc>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004342:	2b30      	cmp	r3, #48	; 0x30
 8004344:	d013      	beq.n	800436e <UART_SetConfig+0x16e>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d814      	bhi.n	8004374 <UART_SetConfig+0x174>
 800434a:	2b20      	cmp	r3, #32
 800434c:	d009      	beq.n	8004362 <UART_SetConfig+0x162>
 800434e:	2b20      	cmp	r3, #32
 8004350:	d810      	bhi.n	8004374 <UART_SetConfig+0x174>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <UART_SetConfig+0x15c>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d006      	beq.n	8004368 <UART_SetConfig+0x168>
 800435a:	e00b      	b.n	8004374 <UART_SetConfig+0x174>
 800435c:	2300      	movs	r3, #0
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e0f2      	b.n	8004548 <UART_SetConfig+0x348>
 8004362:	2302      	movs	r3, #2
 8004364:	77fb      	strb	r3, [r7, #31]
 8004366:	e0ef      	b.n	8004548 <UART_SetConfig+0x348>
 8004368:	2304      	movs	r3, #4
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e0ec      	b.n	8004548 <UART_SetConfig+0x348>
 800436e:	2308      	movs	r3, #8
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e0e9      	b.n	8004548 <UART_SetConfig+0x348>
 8004374:	2310      	movs	r3, #16
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e0e6      	b.n	8004548 <UART_SetConfig+0x348>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a56      	ldr	r2, [pc, #344]	; (80044d8 <UART_SetConfig+0x2d8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d120      	bne.n	80043c6 <UART_SetConfig+0x1c6>
 8004384:	4b51      	ldr	r3, [pc, #324]	; (80044cc <UART_SetConfig+0x2cc>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800438e:	2bc0      	cmp	r3, #192	; 0xc0
 8004390:	d013      	beq.n	80043ba <UART_SetConfig+0x1ba>
 8004392:	2bc0      	cmp	r3, #192	; 0xc0
 8004394:	d814      	bhi.n	80043c0 <UART_SetConfig+0x1c0>
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d009      	beq.n	80043ae <UART_SetConfig+0x1ae>
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d810      	bhi.n	80043c0 <UART_SetConfig+0x1c0>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <UART_SetConfig+0x1a8>
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d006      	beq.n	80043b4 <UART_SetConfig+0x1b4>
 80043a6:	e00b      	b.n	80043c0 <UART_SetConfig+0x1c0>
 80043a8:	2300      	movs	r3, #0
 80043aa:	77fb      	strb	r3, [r7, #31]
 80043ac:	e0cc      	b.n	8004548 <UART_SetConfig+0x348>
 80043ae:	2302      	movs	r3, #2
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e0c9      	b.n	8004548 <UART_SetConfig+0x348>
 80043b4:	2304      	movs	r3, #4
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e0c6      	b.n	8004548 <UART_SetConfig+0x348>
 80043ba:	2308      	movs	r3, #8
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e0c3      	b.n	8004548 <UART_SetConfig+0x348>
 80043c0:	2310      	movs	r3, #16
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e0c0      	b.n	8004548 <UART_SetConfig+0x348>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a44      	ldr	r2, [pc, #272]	; (80044dc <UART_SetConfig+0x2dc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d125      	bne.n	800441c <UART_SetConfig+0x21c>
 80043d0:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <UART_SetConfig+0x2cc>)
 80043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043de:	d017      	beq.n	8004410 <UART_SetConfig+0x210>
 80043e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e4:	d817      	bhi.n	8004416 <UART_SetConfig+0x216>
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d00b      	beq.n	8004404 <UART_SetConfig+0x204>
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f0:	d811      	bhi.n	8004416 <UART_SetConfig+0x216>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <UART_SetConfig+0x1fe>
 80043f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fa:	d006      	beq.n	800440a <UART_SetConfig+0x20a>
 80043fc:	e00b      	b.n	8004416 <UART_SetConfig+0x216>
 80043fe:	2300      	movs	r3, #0
 8004400:	77fb      	strb	r3, [r7, #31]
 8004402:	e0a1      	b.n	8004548 <UART_SetConfig+0x348>
 8004404:	2302      	movs	r3, #2
 8004406:	77fb      	strb	r3, [r7, #31]
 8004408:	e09e      	b.n	8004548 <UART_SetConfig+0x348>
 800440a:	2304      	movs	r3, #4
 800440c:	77fb      	strb	r3, [r7, #31]
 800440e:	e09b      	b.n	8004548 <UART_SetConfig+0x348>
 8004410:	2308      	movs	r3, #8
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	e098      	b.n	8004548 <UART_SetConfig+0x348>
 8004416:	2310      	movs	r3, #16
 8004418:	77fb      	strb	r3, [r7, #31]
 800441a:	e095      	b.n	8004548 <UART_SetConfig+0x348>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2f      	ldr	r2, [pc, #188]	; (80044e0 <UART_SetConfig+0x2e0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d125      	bne.n	8004472 <UART_SetConfig+0x272>
 8004426:	4b29      	ldr	r3, [pc, #164]	; (80044cc <UART_SetConfig+0x2cc>)
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004434:	d017      	beq.n	8004466 <UART_SetConfig+0x266>
 8004436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443a:	d817      	bhi.n	800446c <UART_SetConfig+0x26c>
 800443c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004440:	d00b      	beq.n	800445a <UART_SetConfig+0x25a>
 8004442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004446:	d811      	bhi.n	800446c <UART_SetConfig+0x26c>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <UART_SetConfig+0x254>
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d006      	beq.n	8004460 <UART_SetConfig+0x260>
 8004452:	e00b      	b.n	800446c <UART_SetConfig+0x26c>
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e076      	b.n	8004548 <UART_SetConfig+0x348>
 800445a:	2302      	movs	r3, #2
 800445c:	77fb      	strb	r3, [r7, #31]
 800445e:	e073      	b.n	8004548 <UART_SetConfig+0x348>
 8004460:	2304      	movs	r3, #4
 8004462:	77fb      	strb	r3, [r7, #31]
 8004464:	e070      	b.n	8004548 <UART_SetConfig+0x348>
 8004466:	2308      	movs	r3, #8
 8004468:	77fb      	strb	r3, [r7, #31]
 800446a:	e06d      	b.n	8004548 <UART_SetConfig+0x348>
 800446c:	2310      	movs	r3, #16
 800446e:	77fb      	strb	r3, [r7, #31]
 8004470:	e06a      	b.n	8004548 <UART_SetConfig+0x348>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	; (80044e4 <UART_SetConfig+0x2e4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d138      	bne.n	80044ee <UART_SetConfig+0x2ee>
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <UART_SetConfig+0x2cc>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800448a:	d017      	beq.n	80044bc <UART_SetConfig+0x2bc>
 800448c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004490:	d82a      	bhi.n	80044e8 <UART_SetConfig+0x2e8>
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d00b      	beq.n	80044b0 <UART_SetConfig+0x2b0>
 8004498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449c:	d824      	bhi.n	80044e8 <UART_SetConfig+0x2e8>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <UART_SetConfig+0x2aa>
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d006      	beq.n	80044b6 <UART_SetConfig+0x2b6>
 80044a8:	e01e      	b.n	80044e8 <UART_SetConfig+0x2e8>
 80044aa:	2300      	movs	r3, #0
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e04b      	b.n	8004548 <UART_SetConfig+0x348>
 80044b0:	2302      	movs	r3, #2
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e048      	b.n	8004548 <UART_SetConfig+0x348>
 80044b6:	2304      	movs	r3, #4
 80044b8:	77fb      	strb	r3, [r7, #31]
 80044ba:	e045      	b.n	8004548 <UART_SetConfig+0x348>
 80044bc:	2308      	movs	r3, #8
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e042      	b.n	8004548 <UART_SetConfig+0x348>
 80044c2:	bf00      	nop
 80044c4:	efff69f3 	.word	0xefff69f3
 80044c8:	40011000 	.word	0x40011000
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40004400 	.word	0x40004400
 80044d4:	40004800 	.word	0x40004800
 80044d8:	40004c00 	.word	0x40004c00
 80044dc:	40005000 	.word	0x40005000
 80044e0:	40011400 	.word	0x40011400
 80044e4:	40007800 	.word	0x40007800
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e02c      	b.n	8004548 <UART_SetConfig+0x348>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a72      	ldr	r2, [pc, #456]	; (80046bc <UART_SetConfig+0x4bc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d125      	bne.n	8004544 <UART_SetConfig+0x344>
 80044f8:	4b71      	ldr	r3, [pc, #452]	; (80046c0 <UART_SetConfig+0x4c0>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004502:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004506:	d017      	beq.n	8004538 <UART_SetConfig+0x338>
 8004508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800450c:	d817      	bhi.n	800453e <UART_SetConfig+0x33e>
 800450e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004512:	d00b      	beq.n	800452c <UART_SetConfig+0x32c>
 8004514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004518:	d811      	bhi.n	800453e <UART_SetConfig+0x33e>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <UART_SetConfig+0x326>
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004522:	d006      	beq.n	8004532 <UART_SetConfig+0x332>
 8004524:	e00b      	b.n	800453e <UART_SetConfig+0x33e>
 8004526:	2300      	movs	r3, #0
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e00d      	b.n	8004548 <UART_SetConfig+0x348>
 800452c:	2302      	movs	r3, #2
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e00a      	b.n	8004548 <UART_SetConfig+0x348>
 8004532:	2304      	movs	r3, #4
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e007      	b.n	8004548 <UART_SetConfig+0x348>
 8004538:	2308      	movs	r3, #8
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e004      	b.n	8004548 <UART_SetConfig+0x348>
 800453e:	2310      	movs	r3, #16
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e001      	b.n	8004548 <UART_SetConfig+0x348>
 8004544:	2310      	movs	r3, #16
 8004546:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004550:	d15b      	bne.n	800460a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004552:	7ffb      	ldrb	r3, [r7, #31]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d828      	bhi.n	80045aa <UART_SetConfig+0x3aa>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x360>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004585 	.word	0x08004585
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004595 	.word	0x08004595
 800456c:	080045ab 	.word	0x080045ab
 8004570:	0800459b 	.word	0x0800459b
 8004574:	080045ab 	.word	0x080045ab
 8004578:	080045ab 	.word	0x080045ab
 800457c:	080045ab 	.word	0x080045ab
 8004580:	080045a3 	.word	0x080045a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004584:	f7fe fb06 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8004588:	61b8      	str	r0, [r7, #24]
        break;
 800458a:	e013      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800458c:	f7fe fb16 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8004590:	61b8      	str	r0, [r7, #24]
        break;
 8004592:	e00f      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004594:	4b4b      	ldr	r3, [pc, #300]	; (80046c4 <UART_SetConfig+0x4c4>)
 8004596:	61bb      	str	r3, [r7, #24]
        break;
 8004598:	e00c      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459a:	f7fe fa29 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 800459e:	61b8      	str	r0, [r7, #24]
        break;
 80045a0:	e008      	b.n	80045b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a6:	61bb      	str	r3, [r7, #24]
        break;
 80045a8:	e004      	b.n	80045b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	77bb      	strb	r3, [r7, #30]
        break;
 80045b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d074      	beq.n	80046a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	005a      	lsls	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	441a      	add	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	d916      	bls.n	8004604 <UART_SetConfig+0x404>
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d212      	bcs.n	8004604 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f023 030f 	bic.w	r3, r3, #15
 80045e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	89fa      	ldrh	r2, [r7, #14]
 8004600:	60da      	str	r2, [r3, #12]
 8004602:	e04f      	b.n	80046a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	77bb      	strb	r3, [r7, #30]
 8004608:	e04c      	b.n	80046a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800460a:	7ffb      	ldrb	r3, [r7, #31]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d828      	bhi.n	8004662 <UART_SetConfig+0x462>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x418>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004645 	.word	0x08004645
 8004620:	0800464d 	.word	0x0800464d
 8004624:	08004663 	.word	0x08004663
 8004628:	08004653 	.word	0x08004653
 800462c:	08004663 	.word	0x08004663
 8004630:	08004663 	.word	0x08004663
 8004634:	08004663 	.word	0x08004663
 8004638:	0800465b 	.word	0x0800465b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe faaa 	bl	8002b94 <HAL_RCC_GetPCLK1Freq>
 8004640:	61b8      	str	r0, [r7, #24]
        break;
 8004642:	e013      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe faba 	bl	8002bbc <HAL_RCC_GetPCLK2Freq>
 8004648:	61b8      	str	r0, [r7, #24]
        break;
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800464c:	4b1d      	ldr	r3, [pc, #116]	; (80046c4 <UART_SetConfig+0x4c4>)
 800464e:	61bb      	str	r3, [r7, #24]
        break;
 8004650:	e00c      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004652:	f7fe f9cd 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 8004656:	61b8      	str	r0, [r7, #24]
        break;
 8004658:	e008      	b.n	800466c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465e:	61bb      	str	r3, [r7, #24]
        break;
 8004660:	e004      	b.n	800466c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	77bb      	strb	r3, [r7, #30]
        break;
 800466a:	bf00      	nop
    }

    if (pclk != 0U)
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	085a      	lsrs	r2, r3, #1
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d909      	bls.n	80046a0 <UART_SetConfig+0x4a0>
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004692:	d205      	bcs.n	80046a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	e001      	b.n	80046a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40007c00 	.word	0x40007c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	00f42400 	.word	0x00f42400

080046c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f003 0310 	and.w	r3, r3, #16
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01a      	beq.n	80047de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c6:	d10a      	bne.n	80047de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	605a      	str	r2, [r3, #4]
  }
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af02      	add	r7, sp, #8
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800481c:	f7fc fe8e 	bl	800153c <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10e      	bne.n	800484e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f81b 	bl	800487a <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e011      	b.n	8004872 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b09c      	sub	sp, #112	; 0x70
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	e0a7      	b.n	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004892:	f000 80a3 	beq.w	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004896:	f7fc fe51 	bl	800153c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d302      	bcc.n	80048ac <UART_WaitOnFlagUntilTimeout+0x32>
 80048a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13f      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c0:	667b      	str	r3, [r7, #100]	; 0x64
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	663b      	str	r3, [r7, #96]	; 0x60
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004900:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e068      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d050      	beq.n	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004948:	d148      	bne.n	80049dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004952:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
 8004974:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	613b      	str	r3, [r7, #16]
   return(result);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	66bb      	str	r3, [r7, #104]	; 0x68
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a6:	623a      	str	r2, [r7, #32]
 80049a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	69f9      	ldr	r1, [r7, #28]
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e010      	b.n	80049fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	f43f af48 	beq.w	800488c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3770      	adds	r7, #112	; 0x70
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b095      	sub	sp, #84	; 0x54
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e6      	bne.n	8004a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3308      	adds	r3, #8
 8004a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e5      	bne.n	8004a40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d118      	bne.n	8004aae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	647b      	str	r3, [r7, #68]	; 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e6      	bne.n	8004a7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ac2:	bf00      	nop
 8004ac4:	3754      	adds	r7, #84	; 0x54
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fb71 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004af2:	bf00      	nop
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b088      	sub	sp, #32
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	6979      	ldr	r1, [r7, #20]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	e841 2300 	strex	r3, r2, [r1]
 8004b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e6      	bne.n	8004b02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fb3d 	bl	80041c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b46:	bf00      	nop
 8004b48:	3720      	adds	r7, #32
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	f023 0101 	bic.w	r1, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d102      	bne.n	8004b80 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e001      	b.n	8004b84 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004b90:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004b96:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004b9c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004ba2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8004ba8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8004bae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8004bb4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8004bba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8004bc0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <FMC_NORSRAM_Init+0x11c>)
 8004bea:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bf2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bfa:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004c02:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	ea02 0103 	and.w	r1, r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4319      	orrs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2c:	d10c      	bne.n	8004c48 <FMC_NORSRAM_Init+0xf8>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d006      	beq.n	8004c5e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	0008fb7f 	.word	0x0008fb7f

08004c70 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c86:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	051b      	lsls	r3, r3, #20
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	3b02      	subs	r3, #2
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	3201      	adds	r2, #1
 8004cc4:	4319      	orrs	r1, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd8:	d113      	bne.n	8004d02 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ce2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	051b      	lsls	r3, r3, #20
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	371c      	adds	r7, #28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d24:	d11d      	bne.n	8004d62 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	0112      	lsls	r2, r2, #4
 8004d3c:	4311      	orrs	r1, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	6892      	ldr	r2, [r2, #8]
 8004d42:	0212      	lsls	r2, r2, #8
 8004d44:	4311      	orrs	r1, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	6992      	ldr	r2, [r2, #24]
 8004d4a:	4311      	orrs	r1, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68d2      	ldr	r2, [r2, #12]
 8004d50:	0412      	lsls	r2, r2, #16
 8004d52:	430a      	orrs	r2, r1
 8004d54:	ea43 0102 	orr.w	r1, r3, r2
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d60:	e005      	b.n	8004d6e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	cff00000 	.word	0xcff00000

08004d80 <__libc_init_array>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4d0d      	ldr	r5, [pc, #52]	; (8004db8 <__libc_init_array+0x38>)
 8004d84:	4c0d      	ldr	r4, [pc, #52]	; (8004dbc <__libc_init_array+0x3c>)
 8004d86:	1b64      	subs	r4, r4, r5
 8004d88:	10a4      	asrs	r4, r4, #2
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	42a6      	cmp	r6, r4
 8004d8e:	d109      	bne.n	8004da4 <__libc_init_array+0x24>
 8004d90:	4d0b      	ldr	r5, [pc, #44]	; (8004dc0 <__libc_init_array+0x40>)
 8004d92:	4c0c      	ldr	r4, [pc, #48]	; (8004dc4 <__libc_init_array+0x44>)
 8004d94:	f000 f820 	bl	8004dd8 <_init>
 8004d98:	1b64      	subs	r4, r4, r5
 8004d9a:	10a4      	asrs	r4, r4, #2
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	42a6      	cmp	r6, r4
 8004da0:	d105      	bne.n	8004dae <__libc_init_array+0x2e>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da8:	4798      	blx	r3
 8004daa:	3601      	adds	r6, #1
 8004dac:	e7ee      	b.n	8004d8c <__libc_init_array+0xc>
 8004dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db2:	4798      	blx	r3
 8004db4:	3601      	adds	r6, #1
 8004db6:	e7f2      	b.n	8004d9e <__libc_init_array+0x1e>
 8004db8:	08004e10 	.word	0x08004e10
 8004dbc:	08004e10 	.word	0x08004e10
 8004dc0:	08004e10 	.word	0x08004e10
 8004dc4:	08004e14 	.word	0x08004e14

08004dc8 <memset>:
 8004dc8:	4402      	add	r2, r0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <memset+0xa>
 8004dd0:	4770      	bx	lr
 8004dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd6:	e7f9      	b.n	8004dcc <memset+0x4>

08004dd8 <_init>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	bf00      	nop
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

08004de4 <_fini>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	bf00      	nop
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr
