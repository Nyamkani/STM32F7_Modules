
dunkor_motor_bg95.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ccc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ee8  08008ee8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008ee8  08008ee8  00018ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef0  08008ef0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef0  08008ef0  00018ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  08008f68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000460  08008f68  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030d02  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004792  00000000  00000000  00050da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00055538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c78  00000000  00000000  000572f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d2b1  00000000  00000000  00058f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c357  00000000  00000000  00086221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111fed  00000000  00000000  000a2578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087fc  00000000  00000000  001b45b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008e7c 	.word	0x08008e7c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08008e7c 	.word	0x08008e7c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	4618      	mov	r0, r3
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f001 f8e6 	bl	80016fe <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f8c9 	bl	80016de <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4618      	mov	r0, r3
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffeb 	bl	800053c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <_ZN23CAN_WData_HandleTypeDefC1Ev>:
typedef struct
{
	int txid_;
	int data_length_;
	unsigned char write_Data_Byte_[8] = {0,};
} CAN_WData_HandleTypeDef;
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3308      	adds	r3, #8
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f001 f900 	bl	800179e <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f8e3 	bl	800177e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      vector() = default;
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffeb 	bl	80005a8 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <_ZN4BG95C1EP19__CAN_HandleTypeDefi>:
{
	this->hcanx_ = hcanx;
}


BG95::BG95(CAN_HandleTypeDef *hcanx, int nodeid) // @suppress("Class members should be properly initialized")
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <_ZN4BG95C1EP19__CAN_HandleTypeDefi+0xb8>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	227f      	movs	r2, #127	; 0x7f
 80005f8:	811a      	strh	r2, [r3, #8]
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	729a      	strb	r2, [r3, #10]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2200      	movs	r2, #0
 8000604:	72da      	strb	r2, [r3, #11]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	731a      	strb	r2, [r3, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2200      	movs	r2, #0
 8000610:	735a      	strb	r2, [r3, #13]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2200      	movs	r2, #0
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800062a:	61da      	str	r2, [r3, #28]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2020 	strb.w	r2, [r3, #32]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2202      	movs	r2, #2
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	62da      	str	r2, [r3, #44]	; 0x2c
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2200      	movs	r2, #0
 800064a:	64da      	str	r2, [r3, #76]	; 0x4c
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2200      	movs	r2, #0
 8000650:	651a      	str	r2, [r3, #80]	; 0x50
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3378      	adds	r3, #120	; 0x78
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff7d 	bl	8000556 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3384      	adds	r3, #132	; 0x84
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff78 	bl	8000556 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3390      	adds	r3, #144	; 0x90
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ff80 	bl	8000570 <_ZN23CAN_WData_HandleTypeDefC1Ev>
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	33a0      	adds	r3, #160	; 0xa0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa4 	bl	80005c2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
{
	this->hcanx_ = hcanx;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	605a      	str	r2, [r3, #4]
	this->nodeid_ = nodeid;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	b29a      	uxth	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	811a      	strh	r2, [r3, #8]
}
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08008ec8 	.word	0x08008ec8

08000698 <_ZN4BG95D1Ev>:

// TODO Auto-generated destructor stub.
BG95::~BG95()
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <_ZN4BG95D1Ev+0x3c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	601a      	str	r2, [r3, #0]
{
	//if you using heap memory, delete all in this function
	HAL_CAN_DeInitialization();
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f892 	bl	80007d0 <_ZN4BG9524HAL_CAN_DeInitializationEv>
BG95::~BG95()
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	33a0      	adds	r3, #160	; 0xa0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f899 	bl	80017e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3384      	adds	r3, #132	; 0x84
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f844 	bl	8001748 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3378      	adds	r3, #120	; 0x78
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f83f 	bl	8001748 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
}
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08008ec8 	.word	0x08008ec8

080006d8 <_ZN4BG95D0Ev>:
BG95::~BG95()
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
}
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ffd9 	bl	8000698 <_ZN4BG95D1Ev>
 80006e6:	21ac      	movs	r1, #172	; 0xac
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f008 f9fd 	bl	8008ae8 <_ZdlPvj>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_ZN4BG9519IntializeParametersEv>:

//--------------------------------------------------------------------Initialization member variables
void BG95::IntializeParameters()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	//acc., dec. speed params
	this->actual_max_vel_ = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	631a      	str	r2, [r3, #48]	; 0x30
	this->acc_rpm_ = 0;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
	this->acc_time_ = 0;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	639a      	str	r2, [r3, #56]	; 0x38
	this->dec_rpm_ = 0;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	63da      	str	r2, [r3, #60]	; 0x3c
	this->dec_time_ = 0;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2200      	movs	r2, #0
 800071c:	641a      	str	r2, [r3, #64]	; 0x40
	this->qdec_rpm_ = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	645a      	str	r2, [r3, #68]	; 0x44
	this->qdec_time_ = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	649a      	str	r2, [r3, #72]	; 0x48

	this->max_vel_ = 3000;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000730:	669a      	str	r2, [r3, #104]	; 0x68
	this->drive_vel_ = 1000;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000738:	66da      	str	r2, [r3, #108]	; 0x6c
	this->motor_dir_ = 0x00;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	671a      	str	r2, [r3, #112]	; 0x70


	//device status
	this->comm_stat_reg_ = COMM_OK;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
	this->dev_stat_reg_ = 0;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	661a      	str	r2, [r3, #96]	; 0x60
	this->dev_err_data_ = 0;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	665a      	str	r2, [r3, #100]	; 0x64
	this->module_error_data_ = 0;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c

	this->drive_tick_ = 0;\
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2020 	strb.w	r2, [r3, #32]

	this->is_init_ = false;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2200      	movs	r2, #0
 8000764:	729a      	strb	r2, [r3, #10]
	this->is_run_= false;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	72da      	strb	r2, [r3, #11]
	this->is_err_ = false;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2200      	movs	r2, #0
 8000770:	731a      	strb	r2, [r3, #12]
	this->is_send_ready_ = false;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	735a      	strb	r2, [r3, #13]

	AsyncRequestQueue.clear();
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3378      	adds	r3, #120	; 0x78
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f84e 	bl	800181e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5clearEv>

	RequestQueue.clear();
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3384      	adds	r3, #132	; 0x84
 8000786:	4618      	mov	r0, r3
 8000788:	f001 f849 	bl	800181e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5clearEv>

	ReceiveQueue.clear();
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	33a0      	adds	r3, #160	; 0xa0
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f852 	bl	800183a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5clearEv>

	this->is_init_ = true;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2201      	movs	r2, #1
 800079a:	729a      	strb	r2, [r3, #10]

	this->is_send_ready_ = true;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	735a      	strb	r2, [r3, #13]

	return;
 80007a2:	bf00      	nop
}
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_ZN4BG9522HAL_CAN_InitializationEv>:

bool BG95::HAL_CAN_Initialization()
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
	/* CAN Start */
	return (HAL_CAN_Start(this->hcanx_));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fb95 	bl	8004ee6 <HAL_CAN_Start>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	b2db      	uxtb	r3, r3
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <_ZN4BG9524HAL_CAN_DeInitializationEv>:

bool BG95::HAL_CAN_DeInitialization()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	/* CAN Stop */
	return (HAL_CAN_Stop(this->hcanx_));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f004 fbc6 	bl	8004f6e <HAL_CAN_Stop>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf14      	ite	ne
 80007e8:	2301      	movne	r3, #1
 80007ea:	2300      	moveq	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_ZN4BG9511SendRequestEv>:



//--------------------------------------------------------------------send or read function
uint16_t BG95::SendRequest()
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b091      	sub	sp, #68	; 0x44
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0,};
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
	uint32_t TxMailbox;
	uint8_t state = HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t send_queue_type = this->send_queue_type_;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000812:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*get the sending data*/
	CAN_WData_HandleTypeDef temp_DATA = SelectSendQueueData(send_queue_type);
 8000816:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fa17 	bl	8000c54 <_ZN4BG9519SelectSendQueueDataEi>

	/* Configure Transmission process */
	TxHeader.StdId = this->nodeid_ + temp_DATA.txid_;                 // Standard Identifier, 0 ~ 0x7FF
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	891b      	ldrh	r3, [r3, #8]
 800082a:	461a      	mov	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4413      	add	r3, r2
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.ExtId = 0x01;                							  // Extended Identifier, 0 ~ 0x1FFFFFFF
 8000832:	2301      	movs	r3, #1
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.RTR = CAN_RTR_DATA;          							  // frame type, DATA or REMOTE
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
	TxHeader.IDE = CAN_ID_STD;            							  // identifier type, STD or EXT
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxHeader.DLC = temp_DATA.data_length_;                   	      // data length, 0 ~ 8 byte
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
	TxHeader.TransmitGlobalTime = DISABLE;  					      // timestamp counter capture.
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	/* Set the data to be transmitted */
	std::copy(temp_DATA.write_Data_Byte_, temp_DATA.write_Data_Byte_ + temp_DATA.data_length_, TxData);
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	461a      	mov	r2, r3
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	3308      	adds	r3, #8
 8000852:	1899      	adds	r1, r3, r2
 8000854:	f107 021c 	add.w	r2, r7, #28
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	3308      	adds	r3, #8
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fff9 	bl	8001856 <_ZSt4copyIPhS0_ET0_T_S2_S1_>

	/*request transmission of a message*/
	state = HAL_CANTransmit(this->hcanx_, &TxHeader, (unsigned char*)TxData,  &TxMailbox);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6858      	ldr	r0, [r3, #4]
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	f107 021c 	add.w	r2, r7, #28
 8000870:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000874:	f003 f8f6 	bl	8003a64 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>
 8000878:	4603      	mov	r3, r0
 800087a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/*to save error state from send request*/
	switch(state)
 800087e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000882:	2b03      	cmp	r3, #3
 8000884:	d81a      	bhi.n	80008bc <_ZN4BG9511SendRequestEv+0xc4>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <_ZN4BG9511SendRequestEv+0x94>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	0800089d 	.word	0x0800089d
 8000890:	080008a5 	.word	0x080008a5
 8000894:	080008ad 	.word	0x080008ad
 8000898:	080008b5 	.word	0x080008b5
	{
		case HAL_OK: state = COMM_OK; break;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80008a2:	e00b      	b.n	80008bc <_ZN4BG9511SendRequestEv+0xc4>

		case HAL_ERROR: state = HAL_CAN_SEND_ERROR; break;
 80008a4:	2301      	movs	r3, #1
 80008a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80008aa:	e007      	b.n	80008bc <_ZN4BG9511SendRequestEv+0xc4>

		case HAL_BUSY: state = HAL_CAN_SEND_BUSY; break;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80008b2:	e003      	b.n	80008bc <_ZN4BG9511SendRequestEv+0xc4>

		case HAL_TIMEOUT: state = HAL_CAN_SEND_TIMEOUT; break;
 80008b4:	2304      	movs	r3, #4
 80008b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80008ba:	bf00      	nop
	}

	/*If state is ok. Save temp data*/
	if(state == COMM_OK) this->send_data_buffer = temp_DATA;
 80008bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d107      	bne.n	80008d4 <_ZN4BG9511SendRequestEv+0xdc>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/*Store current state*/
	this->comm_stat_reg_ |= state;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691a      	ldr	r2, [r3, #16]
 80008d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008dc:	431a      	orrs	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	611a      	str	r2, [r3, #16]

	return state;
 80008e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008e6:	b29b      	uxth	r3, r3
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3744      	adds	r7, #68	; 0x44
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd90      	pop	{r4, r7, pc}

080008f0 <_ZN23CAN_RData_HandleTypeDefC1Ev>:
typedef struct
{
	int rxid_;
	int data_length_;
	unsigned char read_Data_Byte_[8] = {0,};
} CAN_RData_HandleTypeDef;
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3308      	adds	r3, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <_ZN4BG9512RecvResponseEv>:

uint16_t BG95::RecvResponse()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af02      	add	r7, sp, #8
 8000916:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	CAN_RData_HandleTypeDef cal_data;
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ffe7 	bl	80008f0 <_ZN23CAN_RData_HandleTypeDefC1Ev>
	uint8_t RxData[8] = {0,};
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
	uint8_t state = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/* Configure Receive process */
	state = HAL_CANReceive(this->hcanx_, &RxHeader, (unsigned char*)RxData);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f107 020c 	add.w	r2, r7, #12
 8000938:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800093c:	4618      	mov	r0, r3
 800093e:	f003 f8d7 	bl	8003af0 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	/*to save error state from send request*/
	switch(state)
 8000948:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800094c:	2b03      	cmp	r3, #3
 800094e:	d81b      	bhi.n	8000988 <_ZN4BG9512RecvResponseEv+0x78>
 8000950:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <_ZN4BG9512RecvResponseEv+0x48>)
 8000952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000956:	bf00      	nop
 8000958:	08000969 	.word	0x08000969
 800095c:	08000971 	.word	0x08000971
 8000960:	08000979 	.word	0x08000979
 8000964:	08000981 	.word	0x08000981
	{
		case HAL_OK: state = COMM_OK; break;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800096e:	e00b      	b.n	8000988 <_ZN4BG9512RecvResponseEv+0x78>

		case HAL_ERROR: state = HAL_CAN_RECV_ERROR; break;
 8000970:	2308      	movs	r3, #8
 8000972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000976:	e007      	b.n	8000988 <_ZN4BG9512RecvResponseEv+0x78>

		case HAL_BUSY: state = HAL_CAN_RECV_BUSY; break;
 8000978:	2310      	movs	r3, #16
 800097a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800097e:	e003      	b.n	8000988 <_ZN4BG9512RecvResponseEv+0x78>

		case HAL_TIMEOUT: state = HAL_CAN_RECV_TIMEOUT; break;
 8000980:	2320      	movs	r3, #32
 8000982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000986:	bf00      	nop
	}

	/*If state is ok. Save temp data to receive queue*/
	if(state == COMM_OK)
 8000988:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800098c:	2b00      	cmp	r3, #0
 800098e:	d11f      	bne.n	80009d0 <_ZN4BG9512RecvResponseEv+0xc0>
	{
		cal_data.rxid_ = RxHeader.StdId;
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	617b      	str	r3, [r7, #20]

		cal_data.data_length_ = RxHeader.DLC;
 8000994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000996:	61bb      	str	r3, [r7, #24]

		for(int i =0; i<=7; i++) cal_data.read_Data_Byte_[i] = RxData[i];
 8000998:	2300      	movs	r3, #0
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
 800099c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800099e:	2b07      	cmp	r3, #7
 80009a0:	dc0e      	bgt.n	80009c0 <_ZN4BG9512RecvResponseEv+0xb0>
 80009a2:	f107 020c 	add.w	r2, r7, #12
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	4413      	add	r3, r2
 80009aa:	7819      	ldrb	r1, [r3, #0]
 80009ac:	f107 021c 	add.w	r2, r7, #28
 80009b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009b2:	4413      	add	r3, r2
 80009b4:	460a      	mov	r2, r1
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009ba:	3301      	adds	r3, #1
 80009bc:	643b      	str	r3, [r7, #64]	; 0x40
 80009be:	e7ed      	b.n	800099c <_ZN4BG9512RecvResponseEv+0x8c>

		QueueSaveReceive(cal_data);
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f9ef 	bl	8000dae <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>
	}

	/*Store current state*/
	this->comm_stat_reg_ |= state;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009d8:	431a      	orrs	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	611a      	str	r2, [r3, #16]

	return state;
 80009de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80009e2:	b29b      	uxth	r3, r3
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3748      	adds	r7, #72	; 0x48
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZN4BG9516WriteDataEnqueueEiii>:

//---------------------------------------------------------------Command queue functions
//queue system functions
void BG95::WriteDataEnqueue(int index, int subindex, int data)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b090      	sub	sp, #64	; 0x40
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdb6 	bl	8000570 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff || data_< 0) { data_size_ = 4;}
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a1a:	da02      	bge.n	8000a22 <_ZN4BG9516WriteDataEnqueueEiii+0x36>
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	da02      	bge.n	8000a28 <_ZN4BG9516WriteDataEnqueueEiii+0x3c>
 8000a22:	2304      	movs	r3, #4
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
 8000a26:	e007      	b.n	8000a38 <_ZN4BG9516WriteDataEnqueueEiii+0x4c>
	else if(data_ > 0xff) {data_size_ = 2;}
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	2bff      	cmp	r3, #255	; 0xff
 8000a2c:	dd02      	ble.n	8000a34 <_ZN4BG9516WriteDataEnqueueEiii+0x48>
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
 8000a32:	e001      	b.n	8000a38 <_ZN4BG9516WriteDataEnqueueEiii+0x4c>
	else { data_size_ = 1;}
 8000a34:	2301      	movs	r3, #1
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30


	/*to confirm the command byte*/
	switch(data_size_)
 8000a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d00f      	beq.n	8000a5e <_ZN4BG9516WriteDataEnqueueEiii+0x72>
 8000a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	dc0f      	bgt.n	8000a64 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
 8000a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d003      	beq.n	8000a52 <_ZN4BG9516WriteDataEnqueueEiii+0x66>
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d003      	beq.n	8000a58 <_ZN4BG9516WriteDataEnqueueEiii+0x6c>
 8000a50:	e008      	b.n	8000a64 <_ZN4BG9516WriteDataEnqueueEiii+0x78>
	{
		case 1: txid = CAN_Send_1_Byte; break;
 8000a52:	232f      	movs	r3, #47	; 0x2f
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
 8000a56:	e008      	b.n	8000a6a <_ZN4BG9516WriteDataEnqueueEiii+0x7e>

		case 2: txid = CAN_Send_2_Byte; break;
 8000a58:	232b      	movs	r3, #43	; 0x2b
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000a5c:	e005      	b.n	8000a6a <_ZN4BG9516WriteDataEnqueueEiii+0x7e>

		case 4: txid = CAN_Send_4_Byte; break;
 8000a5e:	2323      	movs	r3, #35	; 0x23
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
 8000a62:	e002      	b.n	8000a6a <_ZN4BG9516WriteDataEnqueueEiii+0x7e>

		default: txid = CAN_Send_Default_Byte; break;
 8000a64:	2322      	movs	r3, #34	; 0x22
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
 8000a68:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = SDO_sending_id;   //SDO
 8000a6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a6e:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 8000a70:	2308      	movs	r3, #8
 8000a72:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 8000a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	76fb      	strb	r3, [r7, #27]

	/*make data a lsb char to CAN buffer*/
	for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8000a8e:	2304      	movs	r3, #4
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	dc10      	bgt.n	8000aba <_ZN4BG9516WriteDataEnqueueEiii+0xce>
 8000a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	6a3a      	ldr	r2, [r7, #32]
 8000aa0:	fa42 f303 	asr.w	r3, r2, r3
 8000aa4:	b2d9      	uxtb	r1, r3
 8000aa6:	f107 0218 	add.w	r2, r7, #24
 8000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aac:	4413      	add	r3, r2
 8000aae:	460a      	mov	r2, r1
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ab8:	e7eb      	b.n	8000a92 <_ZN4BG9516WriteDataEnqueueEiii+0xa6>

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 f91a 	bl	8000cfe <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>

	return;
 8000aca:	bf00      	nop
}
 8000acc:	3738      	adds	r7, #56	; 0x38
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN4BG9521AsyncWriteDataEnqueueEiii>:

void BG95::AsyncWriteDataEnqueue(int index, int subindex, int data)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b090      	sub	sp, #64	; 0x40
 8000ad6:	af02      	add	r7, sp, #8
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd43 	bl	8000570 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff || data_< 0) { data_size_ = 4;}
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b00:	da02      	bge.n	8000b08 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x36>
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	da02      	bge.n	8000b0e <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x3c>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b0c:	e007      	b.n	8000b1e <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4c>
	else if(data_ > 0xff) {data_size_ = 2;}
 8000b0e:	6a3b      	ldr	r3, [r7, #32]
 8000b10:	2bff      	cmp	r3, #255	; 0xff
 8000b12:	dd02      	ble.n	8000b1a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x48>
 8000b14:	2302      	movs	r3, #2
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
 8000b18:	e001      	b.n	8000b1e <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4c>
	else { data_size_ = 1;}
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30

	/*to confirm the command byte*/
	switch(data_size_)
 8000b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	d00f      	beq.n	8000b44 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x72>
 8000b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	dc0f      	bgt.n	8000b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x78>
 8000b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d003      	beq.n	8000b38 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x66>
 8000b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d003      	beq.n	8000b3e <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x6c>
 8000b36:	e008      	b.n	8000b4a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x78>
	{
		case 1: txid = CAN_Send_1_Byte; break;
 8000b38:	232f      	movs	r3, #47	; 0x2f
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b3c:	e008      	b.n	8000b50 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>

		case 2: txid = CAN_Send_2_Byte; break;
 8000b3e:	232b      	movs	r3, #43	; 0x2b
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
 8000b42:	e005      	b.n	8000b50 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>

		case 4: txid = CAN_Send_4_Byte; break;
 8000b44:	2323      	movs	r3, #35	; 0x23
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
 8000b48:	e002      	b.n	8000b50 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>

		default: txid = CAN_Send_Default_Byte; break;
 8000b4a:	2322      	movs	r3, #34	; 0x22
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b4e:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = SDO_sending_id;
 8000b50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b54:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 8000b56:	2308      	movs	r3, #8
 8000b58:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 8000b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8000b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8000b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b68:	121b      	asrs	r3, r3, #8
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	76fb      	strb	r3, [r7, #27]

	/*make data a lsb char to CAN buffer*/
	for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8000b74:	2304      	movs	r3, #4
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	dc10      	bgt.n	8000ba0 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xce>
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	3b04      	subs	r3, #4
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	6a3a      	ldr	r2, [r7, #32]
 8000b86:	fa42 f303 	asr.w	r3, r2, r3
 8000b8a:	b2d9      	uxtb	r1, r3
 8000b8c:	f107 0218 	add.w	r2, r7, #24
 8000b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b92:	4413      	add	r3, r2
 8000b94:	460a      	mov	r2, r1
 8000b96:	701a      	strb	r2, [r3, #0]
 8000b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b9e:	e7eb      	b.n	8000b78 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xa6>

	/*Register data from buffer*/
	AsyncQueueSaveRequest(cal_data);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f000 f88a 	bl	8000cc4 <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>

	return;
 8000bb0:	bf00      	nop
}
 8000bb2:	3738      	adds	r7, #56	; 0x38
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZN4BG9515ReadDataEnqueueEii>:

void BG95::ReadDataEnqueue(int index, int subindex)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fcd1 	bl	8000570 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int index_ = index;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24

	/*input the data to buffer*/
	cal_data.txid_ = SDO_sending_id;
 8000bd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd6:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	61bb      	str	r3, [r7, #24]

	cal_data.write_Data_Byte_[0] = CAN_Recv_Default_Byte;    					//command byte(4bytes fixed)
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	773b      	strb	r3, [r7, #28]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	777b      	strb	r3, [r7, #29]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		// Object Index (msb)
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	121b      	asrs	r3, r3, #8
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	77bb      	strb	r3, [r7, #30]
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	77fb      	strb	r3, [r7, #31]

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f000 f87d 	bl	8000cfe <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>

	return;
 8000c04:	bf00      	nop
}
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZN4BG9519SelectSendQueueTypeEv>:


//--------------------------------------------------------------queue

int BG95::SelectSendQueueType()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	int queue_type;

	if(!(IsAsyncRequestQueueEmpty())) {queue_type = async;}
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f938 	bl	8000e8a <_ZN4BG9524IsAsyncRequestQueueEmptyEv>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <_ZN4BG9519SelectSendQueueTypeEv+0x20>
 8000c26:	2301      	movs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	e00a      	b.n	8000c42 <_ZN4BG9519SelectSendQueueTypeEv+0x36>

	else if(!(IsRequestQueueEmpty())) {queue_type = sync;}
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f93a 	bl	8000ea6 <_ZN4BG9519IsRequestQueueEmptyEv>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f083 0301 	eor.w	r3, r3, #1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <_ZN4BG9519SelectSendQueueTypeEv+0x36>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	60fb      	str	r3, [r7, #12]

	this->send_queue_type_ = queue_type;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	675a      	str	r2, [r3, #116]	; 0x74

	return this->send_queue_type_;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <_ZN4BG9519SelectSendQueueDataEi>:

CAN_WData_HandleTypeDef BG95::SelectSendQueueData(int type)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	int type_ = type;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	617b      	str	r3, [r7, #20]
	CAN_WData_HandleTypeDef WData_HandleType = {0,};
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <_ZN4BG9519SelectSendQueueDataEi+0x6c>)
 8000c68:	461c      	mov	r4, r3
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	switch(type_)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d003      	beq.n	8000c80 <_ZN4BG9519SelectSendQueueDataEi+0x2c>
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d00d      	beq.n	8000c9a <_ZN4BG9519SelectSendQueueDataEi+0x46>
		case async: WData_HandleType = AsyncRequestQueue.front(); break;

		case sync:  WData_HandleType = RequestQueue.front(); break;
	}

	return WData_HandleType;
 8000c7e:	e019      	b.n	8000cb4 <_ZN4BG9519SelectSendQueueDataEi+0x60>
		case async: WData_HandleType = AsyncRequestQueue.front(); break;
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	3378      	adds	r3, #120	; 0x78
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fdfe 	bl	8001886 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	461c      	mov	r4, r3
 8000c90:	4613      	mov	r3, r2
 8000c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c98:	e00c      	b.n	8000cb4 <_ZN4BG9519SelectSendQueueDataEi+0x60>
		case sync:  WData_HandleType = RequestQueue.front(); break;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3384      	adds	r3, #132	; 0x84
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fdf1 	bl	8001886 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	461c      	mov	r4, r3
 8000caa:	4613      	mov	r3, r2
 8000cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cb2:	bf00      	nop
	return WData_HandleType;
 8000cb4:	bf00      	nop
}
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08008e94 	.word	0x08008e94

08000cc4 <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::AsyncQueueSaveRequest(CAN_WData_HandleTypeDef cmd)
{
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	f107 0014 	add.w	r0, r7, #20
 8000cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(this->is_run_) this->AsyncRequestQueue.push_back(cmd);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7adb      	ldrb	r3, [r3, #11]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d008      	beq.n	8000cf0 <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef+0x2c>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3378      	adds	r3, #120	; 0x78
 8000ce2:	f107 0214 	add.w	r2, r7, #20
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fddf 	bl	80018ac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>

	return;
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
}
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cfa:	b004      	add	sp, #16
 8000cfc:	4770      	bx	lr

08000cfe <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::QueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->RequestQueue.push_back(cmd);}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	f107 0014 	add.w	r0, r7, #20
 8000d0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3384      	adds	r3, #132	; 0x84
 8000d14:	f107 0214 	add.w	r2, r7, #20
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fdc6 	bl	80018ac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d2a:	b004      	add	sp, #16
 8000d2c:	4770      	bx	lr

08000d2e <_ZN4BG9518QueueDeleteRequestEv>:

void BG95::QueueDeleteRequest()
{
 8000d2e:	b590      	push	{r4, r7, lr}
 8000d30:	b089      	sub	sp, #36	; 0x24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	int queue_type = this->send_queue_type_;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3a:	61fb      	str	r3, [r7, #28]

	switch(queue_type)
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d003      	beq.n	8000d4a <_ZN4BG9518QueueDeleteRequestEv+0x1c>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d017      	beq.n	8000d78 <_ZN4BG9518QueueDeleteRequestEv+0x4a>
		case async: this->AsyncRequestQueue.erase(AsyncRequestQueue.begin()); break;

		case sync: this->RequestQueue.erase(RequestQueue.begin()); break;
	}

	return ;
 8000d48:	e02e      	b.n	8000da8 <_ZN4BG9518QueueDeleteRequestEv+0x7a>
		case async: this->AsyncRequestQueue.erase(AsyncRequestQueue.begin()); break;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3378      	adds	r3, #120	; 0x78
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fdcf 	bl	80018f8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	f107 0210 	add.w	r2, r7, #16
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 fdd5 	bl	8001918 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	4620      	mov	r0, r4
 8000d72:	f000 fde2 	bl	800193a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
 8000d76:	e016      	b.n	8000da6 <_ZN4BG9518QueueDeleteRequestEv+0x78>
		case sync: this->RequestQueue.erase(RequestQueue.begin()); break;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f103 0484 	add.w	r4, r3, #132	; 0x84
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3384      	adds	r3, #132	; 0x84
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fdb8 	bl	80018f8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	f107 0218 	add.w	r2, r7, #24
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fdbe 	bl	8001918 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8000d9c:	6979      	ldr	r1, [r7, #20]
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f000 fdcb 	bl	800193a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
 8000da4:	bf00      	nop
	return ;
 8000da6:	bf00      	nop
}
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}

08000dae <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>:

void BG95::QueueSaveReceive(CAN_RData_HandleTypeDef cmd){this->ReceiveQueue.push_back(cmd);}
 8000dae:	b084      	sub	sp, #16
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	f107 0014 	add.w	r0, r7, #20
 8000dbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	33a0      	adds	r3, #160	; 0xa0
 8000dc4:	f107 0214 	add.w	r2, r7, #20
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fddc 	bl	8001988 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dda:	b004      	add	sp, #16
 8000ddc:	4770      	bx	lr

08000dde <_ZN4BG9518QueueDeleteReceiveEv>:

void BG95::QueueDeleteReceive()
{
 8000dde:	b590      	push	{r4, r7, lr}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	if(!(ReceiveQueue.empty())) {this->ReceiveQueue.erase(ReceiveQueue.begin());}
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	33a0      	adds	r3, #160	; 0xa0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fdf2 	bl	80019d4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d016      	beq.n	8000e2a <_ZN4BG9518QueueDeleteReceiveEv+0x4c>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	33a0      	adds	r3, #160	; 0xa0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fdff 	bl	8001a0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	f107 020c 	add.w	r2, r7, #12
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 fe05 	bl	8001a2a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	4620      	mov	r0, r4
 8000e24:	f000 fe12 	bl	8001a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>

	return;
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
}
 8000e2c:	3714      	adds	r7, #20
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd90      	pop	{r4, r7, pc}

08000e32 <_ZN4BG9518QueueChangeReceiveEv>:

void BG95::QueueChangeReceive()
{
 8000e32:	b590      	push	{r4, r7, lr}
 8000e34:	b089      	sub	sp, #36	; 0x24
 8000e36:	af02      	add	r7, sp, #8
 8000e38:	6078      	str	r0, [r7, #4]
	if(ReceiveQueue.size() >= 2)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	33a0      	adds	r3, #160	; 0xa0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fe2b 	bl	8001a9a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	bf8c      	ite	hi
 8000e4a:	2301      	movhi	r3, #1
 8000e4c:	2300      	movls	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d016      	beq.n	8000e82 <_ZN4BG9518QueueChangeReceiveEv+0x50>
	{
		//1. duplicate recv queue front data
		CAN_RData_HandleTypeDef temp_Data = ReceiveQueue.front();
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	33a0      	adds	r3, #160	; 0xa0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fe2e 	bl	8001aba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f107 0408 	add.w	r4, r7, #8
 8000e64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		//2. delete front data
		QueueDeleteReceive();
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffb7 	bl	8000dde <_ZN4BG9518QueueDeleteReceiveEv>

		//3. push back to recv queue
		QueueSaveReceive(temp_Data);
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff97 	bl	8000dae <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>
	}

	return;
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
}
 8000e84:	371c      	adds	r7, #28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}

08000e8a <_ZN4BG9524IsAsyncRequestQueueEmptyEv>:


bool BG95::IsAsyncRequestQueueEmpty() {return AsyncRequestQueue.empty();}
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3378      	adds	r3, #120	; 0x78
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fe22 	bl	8001ae0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_ZN4BG9519IsRequestQueueEmptyEv>:

bool BG95::IsRequestQueueEmpty() {return RequestQueue.empty();}
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3384      	adds	r3, #132	; 0x84
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fe14 	bl	8001ae0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ZN4BG9519IsReceiveQueueEmptyEv>:

bool BG95::IsReceiveQueueEmpty() {return ReceiveQueue.empty();}
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	33a0      	adds	r3, #160	; 0xa0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fd80 	bl	80019d4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_ZN4BG9517IsSendTickReachedEv>:


//--------------------------------------------------------------Check Timeout function
//Process Condition functions
bool BG95::IsSendTickReached()
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	if(++(this->drive_tick_) >= 5 ) return false;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eec:	3301      	adds	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f883 2020 	strb.w	r2, [r3, #32]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	bf8c      	ite	hi
 8000f00:	2301      	movhi	r3, #1
 8000f02:	2300      	movls	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_ZN4BG9517IsSendTickReachedEv+0x30>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e004      	b.n	8000f18 <_ZN4BG9517IsSendTickReachedEv+0x3a>

	this->drive_tick_ = 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

	return true;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN4BG9514IsRecvTimedOutEv>:


bool BG95::IsRecvTimedOut()
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - this->comm_timestamp_) >= this->comm_timeout_)
 8000f2c:	f003 feb0 	bl	8004c90 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	1ad2      	subs	r2, r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	bf2c      	ite	cs
 8000f40:	2301      	movcs	r3, #1
 8000f42:	2300      	movcc	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <_ZN4BG9514IsRecvTimedOutEv+0x32>
	{
		/*timeout error*/
		this->comm_stat_reg_ = COMM_RECV_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f50:	611a      	str	r2, [r3, #16]

		return false;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <_ZN4BG9514IsRecvTimedOutEv+0x34>
	}

	return true;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN4BG9519CheckReceivedNodeIdEv>:

//--------------------------------------------------------------------Check Data Analysis Drive
bool BG95::CheckReceivedNodeId()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	/*receive */
	int id = ReceiveQueue.front().rxid_ - this->nodeid_;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	33a0      	adds	r3, #160	; 0xa0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fda4 	bl	8001aba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8000f72:	4603      	mov	r3, r0
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	8912      	ldrh	r2, [r2, #8]
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]

	if(id == abort_id)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b80      	cmp	r3, #128	; 0x80
 8000f82:	d105      	bne.n	8000f90 <_ZN4BG9519CheckReceivedNodeIdEv+0x30>
	{
		this->comm_stat_reg_ = CAN_ABORT_ID_ERROR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8a:	611a      	str	r2, [r3, #16]

		return false;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <_ZN4BG9519CheckReceivedNodeIdEv+0x32>
		//case EMG_id: break; //ignored

		default: break;
	}
*/
	return true;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_ZN4BG9516CheckCommandDataEv>:
	return true;
}


bool BG95::CheckCommandData()
{
 8000f9a:	b590      	push	{r4, r7, lr}
 8000f9c:	b08d      	sub	sp, #52	; 0x34
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	//compare the data
	const CAN_WData_HandleTypeDef write_temp_data  = this->send_data_buffer;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f107 041c 	add.w	r4, r7, #28
 8000fa8:	3390      	adds	r3, #144	; 0x90
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const CAN_RData_HandleTypeDef read_temp_data = ReceiveQueue.front();
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	33a0      	adds	r3, #160	; 0xa0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 fd80 	bl	8001aba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f107 040c 	add.w	r4, r7, #12
 8000fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int count = 1; count <= 2 ; count++)
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	dc19      	bgt.n	8001004 <_ZN4BG9516CheckCommandDataEv+0x6a>
	{
		if(write_temp_data.write_Data_Byte_[count] != read_temp_data.read_Data_Byte_[count])
 8000fd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	f107 0114 	add.w	r1, r7, #20
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	440b      	add	r3, r1
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d009      	beq.n	8000ffc <_ZN4BG9516CheckCommandDataEv+0x62>
		{
			//this 'if' function is for ignoring HAL_CAN_RECV_TIMEOUT status
			if(this->comm_stat_reg_ != HAL_CAN_RECV_TIMEOUT ) this->comm_stat_reg_ = CAN_DATA_MISMATCH;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b20      	cmp	r3, #32
 8000fee:	d003      	beq.n	8000ff8 <_ZN4BG9516CheckCommandDataEv+0x5e>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff6:	611a      	str	r2, [r3, #16]

			return false;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e004      	b.n	8001006 <_ZN4BG9516CheckCommandDataEv+0x6c>
	for (int count = 1; count <= 2 ; count++)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	3301      	adds	r3, #1
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001002:	e7e2      	b.n	8000fca <_ZN4BG9516CheckCommandDataEv+0x30>
		}
	}

	return true;
 8001004:	2301      	movs	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	3734      	adds	r7, #52	; 0x34
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <_ZN4BG9518CheckExceptionCaseEv>:

bool BG95::CheckExceptionCase()
{
 800100e:	b590      	push	{r4, r7, lr}
 8001010:	b087      	sub	sp, #28
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	//compare the data
	const CAN_RData_HandleTypeDef read_temp_data = ReceiveQueue.front();
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	33a0      	adds	r3, #160	; 0xa0
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fd4d 	bl	8001aba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8001020:	4603      	mov	r3, r0
 8001022:	f107 0408 	add.w	r4, r7, #8
 8001026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	//case 1. an error occur
	if((read_temp_data.read_Data_Byte_[1] == 0x01) &
 800102c:	7c7b      	ldrb	r3, [r7, #17]
 800102e:	2b01      	cmp	r3, #1
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2da      	uxtb	r2, r3
			(read_temp_data.read_Data_Byte_[2] == 0x30)) return false;
 8001038:	7cbb      	ldrb	r3, [r7, #18]
	if((read_temp_data.read_Data_Byte_[1] == 0x01) &
 800103a:	2b30      	cmp	r3, #48	; 0x30
 800103c:	bf0c      	ite	eq
 800103e:	2301      	moveq	r3, #1
 8001040:	2300      	movne	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4013      	ands	r3, r2
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <_ZN4BG9518CheckExceptionCaseEv+0x42>
			(read_temp_data.read_Data_Byte_[2] == 0x30)) return false;
 800104c:	2300      	movs	r3, #0
 800104e:	e000      	b.n	8001052 <_ZN4BG9518CheckExceptionCaseEv+0x44>
		this->comm_stat_reg_ = COMM_OK;

		return false;
	}
*/
	return true;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}

0800105a <_ZN4BG9516CheckErrorStatusEv>:

bool BG95::CheckErrorStatus()
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]

	//1. this is just for making instanced area for mandatory check
	while(1)
	{
		//2.when the write command sended
		if((!(this->is_send_ready_)))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7b5b      	ldrb	r3, [r3, #13]
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d011      	beq.n	8001094 <_ZN4BG9516CheckErrorStatusEv+0x3a>
		{
			//2.-1 check timeed out
			if(!(IsRecvTimedOut())) break;
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff57 	bl	8000f24 <_ZN4BG9514IsRecvTimedOutEv>
 8001076:	4603      	mov	r3, r0
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <_ZN4BG9516CheckErrorStatusEv+0x50>

			//2.-2 check command both send and recv.
			if(!(CheckCommandData())) break;
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff89 	bl	8000f9a <_ZN4BG9516CheckCommandDataEv>
 8001088:	4603      	mov	r3, r0
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10c      	bne.n	80010ae <_ZN4BG9516CheckErrorStatusEv+0x54>
		}

		//3. check node id byte
		if(!(CheckReceivedNodeId())) break;
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff63 	bl	8000f60 <_ZN4BG9519CheckReceivedNodeIdEv>
 800109a:	4603      	mov	r3, r0
 800109c:	f083 0301 	eor.w	r3, r3, #1
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <_ZN4BG9516CheckErrorStatusEv+0x58>

		//4. check read data byte
		//if(!(CheckReceivedReadFunction())) break;

		return true;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e010      	b.n	80010cc <_ZN4BG9516CheckErrorStatusEv+0x72>
			if(!(IsRecvTimedOut())) break;
 80010aa:	bf00      	nop
 80010ac:	e002      	b.n	80010b4 <_ZN4BG9516CheckErrorStatusEv+0x5a>
			if(!(CheckCommandData())) break;
 80010ae:	bf00      	nop
 80010b0:	e000      	b.n	80010b4 <_ZN4BG9516CheckErrorStatusEv+0x5a>
		if(!(CheckReceivedNodeId())) break;
 80010b2:	bf00      	nop
	}

	//4. check Exception case - if case is included return no error
	if(!(CheckExceptionCase())) return true;
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffaa 	bl	800100e <_ZN4BG9518CheckExceptionCaseEv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZN4BG9516CheckErrorStatusEv+0x70>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <_ZN4BG9516CheckErrorStatusEv+0x72>

	return false;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN4BG959StoreDataEiii>:



void BG95::StoreData(int index, int subindex, int data)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
	switch(index)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f643 2204 	movw	r2, #14852	; 0x3a04
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d07f      	beq.n	80011ec <_ZN4BG959StoreDataEiii+0x118>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f643 2204 	movw	r2, #14852	; 0x3a04
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f300 80a9 	bgt.w	800124a <_ZN4BG959StoreDataEiii+0x176>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	f643 1211 	movw	r2, #14609	; 0x3911
 80010fe:	4293      	cmp	r3, r2
 8001100:	d070      	beq.n	80011e4 <_ZN4BG959StoreDataEiii+0x110>
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f643 1211 	movw	r2, #14609	; 0x3911
 8001108:	4293      	cmp	r3, r2
 800110a:	f300 809e 	bgt.w	800124a <_ZN4BG959StoreDataEiii+0x176>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f243 7262 	movw	r2, #14178	; 0x3762
 8001114:	4293      	cmp	r3, r2
 8001116:	d061      	beq.n	80011dc <_ZN4BG959StoreDataEiii+0x108>
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	f243 7262 	movw	r2, #14178	; 0x3762
 800111e:	4293      	cmp	r3, r2
 8001120:	f300 8093 	bgt.w	800124a <_ZN4BG959StoreDataEiii+0x176>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	f243 7260 	movw	r2, #14176	; 0x3760
 800112a:	4293      	cmp	r3, r2
 800112c:	d052      	beq.n	80011d4 <_ZN4BG959StoreDataEiii+0x100>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f243 7260 	movw	r2, #14176	; 0x3760
 8001134:	4293      	cmp	r3, r2
 8001136:	f300 8088 	bgt.w	800124a <_ZN4BG959StoreDataEiii+0x176>
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f243 3245 	movw	r2, #13125	; 0x3345
 8001140:	4293      	cmp	r3, r2
 8001142:	f300 8082 	bgt.w	800124a <_ZN4BG959StoreDataEiii+0x176>
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f5b3 5f4d 	cmp.w	r3, #13120	; 0x3340
 800114c:	da26      	bge.n	800119c <_ZN4BG959StoreDataEiii+0xc8>
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8001154:	d051      	beq.n	80011fa <_ZN4BG959StoreDataEiii+0x126>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 800115c:	dc75      	bgt.n	800124a <_ZN4BG959StoreDataEiii+0x176>
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	f243 1213 	movw	r2, #12563	; 0x3113
 8001164:	4293      	cmp	r3, r2
 8001166:	d031      	beq.n	80011cc <_ZN4BG959StoreDataEiii+0xf8>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f243 1213 	movw	r2, #12563	; 0x3113
 800116e:	4293      	cmp	r3, r2
 8001170:	dc6b      	bgt.n	800124a <_ZN4BG959StoreDataEiii+0x176>
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	f243 1211 	movw	r2, #12561	; 0x3111
 8001178:	4293      	cmp	r3, r2
 800117a:	d023      	beq.n	80011c4 <_ZN4BG959StoreDataEiii+0xf0>
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f243 1211 	movw	r2, #12561	; 0x3111
 8001182:	4293      	cmp	r3, r2
 8001184:	dc61      	bgt.n	800124a <_ZN4BG959StoreDataEiii+0x176>
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f243 0201 	movw	r2, #12289	; 0x3001
 800118c:	4293      	cmp	r3, r2
 800118e:	d050      	beq.n	8001232 <_ZN4BG959StoreDataEiii+0x15e>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f243 0202 	movw	r2, #12290	; 0x3002
 8001196:	4293      	cmp	r3, r2
 8001198:	d051      	beq.n	800123e <_ZN4BG959StoreDataEiii+0x16a>
 800119a:	e056      	b.n	800124a <_ZN4BG959StoreDataEiii+0x176>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f5a3 534d 	sub.w	r3, r3, #13120	; 0x3340
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d851      	bhi.n	800124a <_ZN4BG959StoreDataEiii+0x176>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <_ZN4BG959StoreDataEiii+0xd8>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001203 	.word	0x08001203
 80011b0:	0800120b 	.word	0x0800120b
 80011b4:	08001213 	.word	0x08001213
 80011b8:	0800121b 	.word	0x0800121b
 80011bc:	08001223 	.word	0x08001223
 80011c0:	0800122b 	.word	0x0800122b
	{
		case IO_AIN_Voltage_Up: this->motor_voltage_ = data ; break;
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ca:	e045      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		case IO_AIN_Current_Im: this->motor_current_ = data ; break;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	651a      	str	r2, [r3, #80]	; 0x50
 80011d2:	e041      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		case POS_ActualTargetPosition: this->target_pos_ = data ; break; //actual target position
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	659a      	str	r2, [r3, #88]	; 0x58
 80011da:	e03d      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		case POS_ActualPosition: this->motor_pos_ = data ; break;  //actual position
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
 80011e2:	e039      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		//case 0x396a: this->motor_pos_ = data ; break; //encoder pos

		case MOTOR_Polarity: this->motor_dir_ = data ; break;//motor dir
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	671a      	str	r2, [r3, #112]	; 0x70
 80011ea:	e035      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		case MEASUREMENT_Vel_rpm:
			if(subindex == 1) this->motor_vel_ = data ;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d131      	bne.n	8001256 <_ZN4BG959StoreDataEiii+0x182>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	65da      	str	r2, [r3, #92]	; 0x5c
			break;
 80011f8:	e02d      	b.n	8001256 <_ZN4BG959StoreDataEiii+0x182>

		//setting parameters
		case VEL_DesiredValue: this->actual_max_vel_ = data; break;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001200:	e02a      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		case VEL_Acc_dV: this->acc_rpm_ = data; break;
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
 8001208:	e026      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		case VEL_Acc_dT: this->acc_time_ = data; break;
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	639a      	str	r2, [r3, #56]	; 0x38
 8001210:	e022      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		case VEL_Dec_dV: this->dec_rpm_ = data; break;
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c
 8001218:	e01e      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		case VEL_Dec_dT: this->dec_time_ = data; break;
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
 8001220:	e01a      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		case VEL_Dec_QuickStop_dV: this->qdec_rpm_ = data; break;
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	645a      	str	r2, [r3, #68]	; 0x44
 8001228:	e016      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		case VEL_Dec_QuickStop_dT: this->qdec_time_ = data; break;
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	649a      	str	r2, [r3, #72]	; 0x48
 8001230:	e012      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		case DEV_ErrorReg: this->dev_err_data_ = (uint16_t)data ; break;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b29b      	uxth	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	665a      	str	r2, [r3, #100]	; 0x64
 800123c:	e00c      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
		case DEV_Status: this->dev_stat_reg_ = (uint16_t)data ; break;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	661a      	str	r2, [r3, #96]	; 0x60
 8001248:	e006      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>

		default: this->dev_err_data_ = (uint16_t)data;  break;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	665a      	str	r2, [r3, #100]	; 0x64
 8001254:	e000      	b.n	8001258 <_ZN4BG959StoreDataEiii+0x184>
			break;
 8001256:	bf00      	nop
	}
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_ZN4BG9511DataProcessEv>:

void BG95::DataProcess()
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	CAN_RData_HandleTypeDef recv_data = ReceiveQueue.front();
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	33a0      	adds	r3, #160	; 0xa0
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fc22 	bl	8001aba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 8001276:	4603      	mov	r3, r0
 8001278:	f107 0408 	add.w	r4, r7, #8
 800127c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int index = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
	int subindex = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
	int data = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

	//4. revert index byte
	index |= recv_data.read_Data_Byte_[1];
 800128e:	7c7b      	ldrb	r3, [r7, #17]
 8001290:	461a      	mov	r2, r3
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4313      	orrs	r3, r2
 8001296:	61fb      	str	r3, [r7, #28]
	index |= (int)recv_data.read_Data_Byte_[2] << 8;
 8001298:	7cbb      	ldrb	r3, [r7, #18]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61fb      	str	r3, [r7, #28]

	//5.revert sub-index byte
	subindex = recv_data.read_Data_Byte_[3];
 80012a2:	7cfb      	ldrb	r3, [r7, #19]
 80012a4:	61bb      	str	r3, [r7, #24]

	//6.revert data byte
	for(int i = 4; i <= 7; i++) data  |=  (int)recv_data.read_Data_Byte_[i] << (8 * (i - 4));
 80012a6:	2304      	movs	r3, #4
 80012a8:	623b      	str	r3, [r7, #32]
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	2b07      	cmp	r3, #7
 80012ae:	dc11      	bgt.n	80012d4 <_ZN4BG9511DataProcessEv+0x70>
 80012b0:	f107 0210 	add.w	r2, r7, #16
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	3b04      	subs	r3, #4
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c8:	4313      	orrs	r3, r2
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	3301      	adds	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
 80012d2:	e7ea      	b.n	80012aa <_ZN4BG9511DataProcessEv+0x46>

	//7. Data Processing
	StoreData(index, subindex, data);
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	69f9      	ldr	r1, [r7, #28]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fefa 	bl	80010d4 <_ZN4BG959StoreDataEiii>

	return;
 80012e0:	bf00      	nop
}
 80012e2:	372c      	adds	r7, #44	; 0x2c
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}

080012e8 <_ZN4BG9515CommErrorHandleEv>:

//--------------------------------------------------------------------Error Checks


bool BG95::CommErrorHandle()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	int status = this->comm_stat_reg_;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	60bb      	str	r3, [r7, #8]
	bool err_up = false;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]

	/*Check status and address the desired error*/
	switch(status)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001300:	d02c      	beq.n	800135c <_ZN4BG9515CommErrorHandleEv+0x74>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001308:	dc3d      	bgt.n	8001386 <_ZN4BG9515CommErrorHandleEv+0x9e>
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001310:	d021      	beq.n	8001356 <_ZN4BG9515CommErrorHandleEv+0x6e>
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001318:	dc35      	bgt.n	8001386 <_ZN4BG9515CommErrorHandleEv+0x9e>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001320:	d012      	beq.n	8001348 <_ZN4BG9515CommErrorHandleEv+0x60>
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001328:	dc2d      	bgt.n	8001386 <_ZN4BG9515CommErrorHandleEv+0x9e>
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <_ZN4BG9515CommErrorHandleEv+0x50>
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b20      	cmp	r3, #32
 8001334:	d004      	beq.n	8001340 <_ZN4BG9515CommErrorHandleEv+0x58>
 8001336:	e026      	b.n	8001386 <_ZN4BG9515CommErrorHandleEv+0x9e>
	{
		/*if Communication is ok or recv timed out (for ignore). exit function*/
		case COMM_OK :
			this->comm_status_filter = 0;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]

			break;
 800133e:	e033      	b.n	80013a8 <_ZN4BG9515CommErrorHandleEv+0xc0>

		case HAL_CAN_RECV_TIMEOUT: this->comm_status_filter = 0; break;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
 8001346:	e02f      	b.n	80013a8 <_ZN4BG9515CommErrorHandleEv+0xc0>

		case CAN_DATA_MISMATCH:
			this->comm_status_filter = 0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]

			QueueChangeReceive();
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd6f 	bl	8000e32 <_ZN4BG9518QueueChangeReceiveEv>

			break;
 8001354:	e028      	b.n	80013a8 <_ZN4BG9515CommErrorHandleEv+0xc0>
		/*Error up*/
		case CAN_ABORT_ID_ERROR: err_up = true; break;
 8001356:	2301      	movs	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e025      	b.n	80013a8 <_ZN4BG9515CommErrorHandleEv+0xc0>

		case COMM_RECV_TIMEOUT:

			//comm_timestamp_ += comm_timeout_;

			if(++(this->comm_num_try_) >= 2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	2b01      	cmp	r3, #1
 800136c:	bfcc      	ite	gt
 800136e:	2301      	movgt	r3, #1
 8001370:	2300      	movle	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d002      	beq.n	800137e <_ZN4BG9515CommErrorHandleEv+0x96>
			{
				err_up = true;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
			else
			{
				this->comm_num_try_ = 0;
			}

			break;
 800137c:	e014      	b.n	80013a8 <_ZN4BG9515CommErrorHandleEv+0xc0>
				this->comm_num_try_ = 0;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8001384:	e010      	b.n	80013a8 <_ZN4BG9515CommErrorHandleEv+0xc0>

		default: if(++(this->comm_status_filter) >= 5) {err_up = true;} break;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b04      	cmp	r3, #4
 8001396:	bfcc      	ite	gt
 8001398:	2301      	movgt	r3, #1
 800139a:	2300      	movle	r3, #0
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <_ZN4BG9515CommErrorHandleEv+0xbe>
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	bf00      	nop
	}
	return err_up;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_ZN4BG9516ModuleErrorCheckEv>:


void BG95::ModuleErrorCheck()
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
	int error_data = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]

	//0 . Device error check
	//if(IsMotorErrUp() || this->dev_err_data_ != 0) error_data = 0x10000 + GetMotorErrData();
	if(IsMotorErrUp()) error_data = 0x10000 + GetMotorErrData();
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f97a 	bl	80016b8 <_ZN4BG9512IsMotorErrUpEv>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <_ZN4BG9516ModuleErrorCheckEv+0x28>
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f968 	bl	80016a0 <_ZN4BG9515GetMotorErrDataEv>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e00a      	b.n	80013f0 <_ZN4BG9516ModuleErrorCheckEv+0x3e>

	//1. Comm. error check
	else if(CommErrorHandle()) error_data = 0x20000 + this->comm_stat_reg_;
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff84 	bl	80012e8 <_ZN4BG9515CommErrorHandleEv>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <_ZN4BG9516ModuleErrorCheckEv+0x3e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80013ee:	60fb      	str	r3, [r7, #12]

	//2. address the error data
	if(error_data != 0)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <_ZN4BG9516ModuleErrorCheckEv+0x52>
	{
		this->module_error_data_ = error_data;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c

		/*Error flag up*/
		this->is_err_ = true;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	731a      	strb	r2, [r3, #12]
	}

	return;
 8001402:	bf00      	nop
 8001404:	bf00      	nop
}
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <_ZN4BG9510DriveCheckEv>:

//--------------------------------------------------------------------Drive
bool BG95::DriveCheck()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	//0. if init is false -> Drive Exit
	if(!(IsInitTrue())) return false;
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f91f 	bl	8001658 <_ZN4BG9510IsInitTrueEv>
 800141a:	4603      	mov	r3, r0
 800141c:	f083 0301 	eor.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <_ZN4BG9510DriveCheckEv+0x1e>
 8001426:	2300      	movs	r3, #0
 8001428:	e024      	b.n	8001474 <_ZN4BG9510DriveCheckEv+0x68>

	//1. if Init. is true, and run is false -> wait for empty queue
	while(1)
	{
		if(IsRunTrue()) break;
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f920 	bl	8001670 <_ZN4BG959IsRunTrueEv>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10f      	bne.n	8001456 <_ZN4BG9510DriveCheckEv+0x4a>

		if(IsRequestQueueEmpty()) break;
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fd35 	bl	8000ea6 <_ZN4BG9519IsRequestQueueEmptyEv>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <_ZN4BG9510DriveCheckEv+0x4e>

		if(IsErrTrue()) break;
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f920 	bl	8001688 <_ZN4BG959IsErrTrueEv>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d107      	bne.n	800145e <_ZN4BG9510DriveCheckEv+0x52>

		this->is_run_ = true;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	72da      	strb	r2, [r3, #11]
		if(IsRunTrue()) break;
 8001454:	e7e9      	b.n	800142a <_ZN4BG9510DriveCheckEv+0x1e>
 8001456:	bf00      	nop
 8001458:	e002      	b.n	8001460 <_ZN4BG9510DriveCheckEv+0x54>
		if(IsRequestQueueEmpty()) break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <_ZN4BG9510DriveCheckEv+0x54>
		if(IsErrTrue()) break;
 800145e:	bf00      	nop
	}

	//2. if err up, return false, Stop all Write Command
	if(IsErrTrue())
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 f911 	bl	8001688 <_ZN4BG959IsErrTrueEv>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <_ZN4BG9510DriveCheckEv+0x66>
	{
		this->is_run_ = false;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	72da      	strb	r2, [r3, #11]

		//return false;

	}

	return true;
 8001472:	2301      	movs	r3, #1
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZN4BG9511InitProcessEv>:



void BG95::InitProcess()
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	//0. add read data queue and
	if(IsRequestQueueEmpty() & IsRequestQueueEmpty()) SchduleCommandEnqueue();
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fd0e 	bl	8000ea6 <_ZN4BG9519IsRequestQueueEmptyEv>
 800148a:	4603      	mov	r3, r0
 800148c:	461c      	mov	r4, r3
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd09 	bl	8000ea6 <_ZN4BG9519IsRequestQueueEmptyEv>
 8001494:	4603      	mov	r3, r0
 8001496:	4023      	ands	r3, r4
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf14      	ite	ne
 800149c:	2301      	movne	r3, #1
 800149e:	2300      	moveq	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <_ZN4BG9511InitProcessEv+0x30>
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f002 fa4a 	bl	8003940 <_ZN4BG9521SchduleCommandEnqueueEv>

	//1. Initialize Communication buffer
	this->comm_stat_reg_ = COMM_OK;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]

	return;
 80014b2:	bf00      	nop
}
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}

080014ba <_ZN4BG9511SendProcessEv>:

void BG95::SendProcess()
{
 80014ba:	b590      	push	{r4, r7, lr}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	//0. the tick check for preventing 1-receiving by 1-drive
	if(!(IsSendTickReached())) return;
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fd0b 	bl	8000ede <_ZN4BG9517IsSendTickReachedEv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f083 0301 	eor.w	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d136      	bne.n	8001542 <_ZN4BG9511SendProcessEv+0x88>

	//1. Check Queue is empty
	if(IsAsyncRequestQueueEmpty() & IsRequestQueueEmpty()) return;
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fcd8 	bl	8000e8a <_ZN4BG9524IsAsyncRequestQueueEmptyEv>
 80014da:	4603      	mov	r3, r0
 80014dc:	461c      	mov	r4, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fce1 	bl	8000ea6 <_ZN4BG9519IsRequestQueueEmptyEv>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4023      	ands	r3, r4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d127      	bne.n	8001546 <_ZN4BG9511SendProcessEv+0x8c>

	//2. Check ready for sending
	if(!(this->is_send_ready_)) return;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7b5b      	ldrb	r3, [r3, #13]
 80014fa:	f083 0301 	eor.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	d122      	bne.n	800154a <_ZN4BG9511SendProcessEv+0x90>

	//3. Get the high priority queue data. and If send data is none, return function
	if(SelectSendQueueType() == none) return;
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fb81 	bl	8000c0c <_ZN4BG9519SelectSendQueueTypeEv>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf0c      	ite	eq
 8001510:	2301      	moveq	r3, #1
 8001512:	2300      	movne	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d119      	bne.n	800154e <_ZN4BG9511SendProcessEv+0x94>

	//4. Check CAN comm. sending failed, Only Accept status when HAL_OK
	if(SendRequest()!= HAL_OK) return;
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff f96c 	bl	80007f8 <_ZN4BG9511SendRequestEv>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d110      	bne.n	8001552 <_ZN4BG9511SendProcessEv+0x98>

	//5. Flag Set Off
	this->is_send_ready_ = false;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	735a      	strb	r2, [r3, #13]

	//6. time-stamp recode
	this->comm_timestamp_ = HAL_GetTick();
 8001536:	f003 fbab 	bl	8004c90 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]

	return;
 8001540:	e008      	b.n	8001554 <_ZN4BG9511SendProcessEv+0x9a>
	if(!(IsSendTickReached())) return;
 8001542:	bf00      	nop
 8001544:	e006      	b.n	8001554 <_ZN4BG9511SendProcessEv+0x9a>
	if(IsAsyncRequestQueueEmpty() & IsRequestQueueEmpty()) return;
 8001546:	bf00      	nop
 8001548:	e004      	b.n	8001554 <_ZN4BG9511SendProcessEv+0x9a>
	if(!(this->is_send_ready_)) return;
 800154a:	bf00      	nop
 800154c:	e002      	b.n	8001554 <_ZN4BG9511SendProcessEv+0x9a>
	if(SelectSendQueueType() == none) return;
 800154e:	bf00      	nop
 8001550:	e000      	b.n	8001554 <_ZN4BG9511SendProcessEv+0x9a>
	if(SendRequest()!= HAL_OK) return;
 8001552:	bf00      	nop
}
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}

0800155a <_ZN4BG9511RecvProcessEv>:

void BG95::RecvProcess()
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	//0. if Send is failed, Exit process
	if((this->comm_stat_reg_) != COMM_OK) return;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <_ZN4BG9511RecvProcessEv+0x18>

	//1. receive data
	RecvResponse();
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff f9d0 	bl	8000910 <_ZN4BG9512RecvResponseEv>

	return;
 8001570:	e000      	b.n	8001574 <_ZN4BG9511RecvProcessEv+0x1a>
	if((this->comm_stat_reg_) != COMM_OK) return;
 8001572:	bf00      	nop
}
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_ZN4BG9511PostProcessEv>:

void BG95::PostProcess()
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	//0. if queue is empty. return this
	if(IsReceiveQueueEmpty()) return;
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fc9d 	bl	8000ec2 <_ZN4BG9519IsReceiveQueueEmptyEv>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d12c      	bne.n	80015e8 <_ZN4BG9511PostProcessEv+0x6e>

	//1. Check received data and add error status
	CheckErrorStatus();
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fd63 	bl	800105a <_ZN4BG9516CheckErrorStatusEv>

	//2. Check error Status and handle errors
	ModuleErrorCheck();
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff0c 	bl	80013b2 <_ZN4BG9516ModuleErrorCheckEv>

	DataProcess();
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe62 	bl	8001264 <_ZN4BG9511DataProcessEv>

	//3. If get no error. stored data
	if((this->comm_stat_reg_) == COMM_OK)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10f      	bne.n	80015c8 <_ZN4BG9511PostProcessEv+0x4e>
	{
		QueueDeleteReceive();
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fc18 	bl	8000dde <_ZN4BG9518QueueDeleteReceiveEv>

		if(IsReceiveQueueEmpty())
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fc87 	bl	8000ec2 <_ZN4BG9519IsReceiveQueueEmptyEv>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d018      	beq.n	80015ec <_ZN4BG9511PostProcessEv+0x72>
		{
			QueueDeleteRequest();
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fbb7 	bl	8000d2e <_ZN4BG9518QueueDeleteRequestEv>

			this->is_send_ready_ = true;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	735a      	strb	r2, [r3, #13]
		this->is_send_ready_ = true;

	}


	return;
 80015c6:	e011      	b.n	80015ec <_ZN4BG9511PostProcessEv+0x72>
	else if(IsErrTrue())
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f85d 	bl	8001688 <_ZN4BG959IsErrTrueEv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00b      	beq.n	80015ec <_ZN4BG9511PostProcessEv+0x72>
		QueueDeleteReceive();
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fc02 	bl	8000dde <_ZN4BG9518QueueDeleteReceiveEv>
		QueueDeleteRequest();
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fba7 	bl	8000d2e <_ZN4BG9518QueueDeleteRequestEv>
		this->is_send_ready_ = true;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	735a      	strb	r2, [r3, #13]
	return;
 80015e6:	e001      	b.n	80015ec <_ZN4BG9511PostProcessEv+0x72>
	if(IsReceiveQueueEmpty()) return;
 80015e8:	bf00      	nop
 80015ea:	e000      	b.n	80015ee <_ZN4BG9511PostProcessEv+0x74>
	return;
 80015ec:	bf00      	nop
}
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_ZN4BG9514InitializationEv>:

//--------------------------------------------------------------------Applications
//main functions

void BG95::Initialization()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	HAL_CAN_DeInitialization();
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff f8e7 	bl	80007d0 <_ZN4BG9524HAL_CAN_DeInitializationEv>

	IntializeParameters();
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff f878 	bl	80006f8 <_ZN4BG9519IntializeParametersEv>

	InitializeCommand();
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f002 f9fb 	bl	8003a04 <_ZN4BG9517InitializeCommandEv>

	HAL_CAN_Initialization();
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff f8cb 	bl	80007aa <_ZN4BG9522HAL_CAN_InitializationEv>

	return;
 8001614:	bf00      	nop
}
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_ZN4BG955DriveEv>:

	return;
}

void BG95::Drive()
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if(!(DriveCheck())) return;
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fef1 	bl	800140c <_ZN4BG9510DriveCheckEv>
 800162a:	4603      	mov	r3, r0
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10c      	bne.n	8001650 <_ZN4BG955DriveEv+0x34>

	InitProcess();
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff20 	bl	800147c <_ZN4BG9511InitProcessEv>

	SendProcess();
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff3c 	bl	80014ba <_ZN4BG9511SendProcessEv>

	RecvProcess();
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff89 	bl	800155a <_ZN4BG9511RecvProcessEv>

	PostProcess();
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff96 	bl	800157a <_ZN4BG9511PostProcessEv>

	return;
 800164e:	e000      	b.n	8001652 <_ZN4BG955DriveEv+0x36>
	if(!(DriveCheck())) return;
 8001650:	bf00      	nop
}
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_ZN4BG9510IsInitTrueEv>:

//Internal Status Check
const bool BG95::IsInitTrue() {return this->is_init_;}
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7a9b      	ldrb	r3, [r3, #10]
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <_ZN4BG959IsRunTrueEv>:
const bool BG95::IsRunTrue() {return this->is_run_;}
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7adb      	ldrb	r3, [r3, #11]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZN4BG959IsErrTrueEv>:
const bool BG95::IsErrTrue() {return this->is_err_;}
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7b1b      	ldrb	r3, [r3, #12]
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_ZN4BG9515GetMotorErrDataEv>:
const int32_t BG95::GetMotorVelocity() {return this->motor_vel_;}
const uint32_t BG95::GetMotorAccelation() {return this->acc_rpm_;}
const uint32_t BG95::GetMotorDeceleration() {return this->dec_rpm_;}

const uint32_t BG95::GetMotorStatus() {return this->dev_stat_reg_;}
const uint32_t BG95::GetMotorErrData() {return this->dev_err_data_;}
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZN4BG9512IsMotorErrUpEv>:

//read status functions
const bool BG95::IsMotorPowerUp() {return (this->dev_stat_reg_& 0x01);}
const bool BG95::IsMotorErrUp() {return (this->dev_stat_reg_& 0x02);}
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf14      	ite	ne
 80016cc:	2301      	movne	r3, #1
 80016ce:	2300      	moveq	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fa15 	bl	8001b16 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fa1d 	bl	8001b2e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fa25 	bl	8001b56 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 800172e:	461a      	mov	r2, r3
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fa1b 	bl	8001b6c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fef3 	bl	8000524 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fa19 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001760:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001762:	461a      	mov	r2, r3
 8001764:	4629      	mov	r1, r5
 8001766:	4620      	mov	r0, r4
 8001768:	f000 fa1e 	bl	8001ba8 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ffd1 	bl	8001716 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bdb0      	pop	{r4, r5, r7, pc}

0800177e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fa1c 	bl	8001bc4 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa24 	bl	8001bdc <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>:
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fa2c 	bl	8001c04 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 80017ce:	461a      	mov	r2, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fa22 	bl	8001c1a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fed9 	bl	8000590 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681c      	ldr	r4, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fa20 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001800:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001802:	461a      	mov	r2, r3
 8001804:	4629      	mov	r1, r5
 8001806:	4620      	mov	r0, r4
 8001808:	f000 fa25 	bl	8001c56 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      }
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffd1 	bl	80017b6 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bdb0      	pop	{r4, r5, r7, pc}

0800181e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 fa20 	bl	8001c72 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fa33 	bl	8001cb4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001856:	b590      	push	{r4, r7, lr}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 fa47 	bl	8001cf6 <_ZSt12__miter_baseIPhET_S1_>
 8001868:	4604      	mov	r4, r0
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f000 fa43 	bl	8001cf6 <_ZSt12__miter_baseIPhET_S1_>
 8001870:	4603      	mov	r3, r0
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4619      	mov	r1, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f000 fa48 	bl	8001d0c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 800187c:	4603      	mov	r3, r0
    }
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bd90      	pop	{r4, r7, pc}

08001886 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
	return *begin();
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f832 	bl	80018f8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8001894:	4603      	mov	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4618      	mov	r0, r3
 800189e:	f000 fa58 	bl	8001d52 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 80018a2:	4603      	mov	r3, r0
      }
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d00d      	beq.n	80018de <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f000 fa4d 	bl	8001d6a <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f103 0210 	add.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	605a      	str	r2, [r3, #4]
      }
 80018dc:	e008      	b.n	80018f0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa56 	bl	8001d90 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fa78 	bl	8001de0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fb25 	bl	8001f58 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f000 fb28 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001928:	4603      	mov	r3, r0
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 800193a:	b580      	push	{r7, lr}
 800193c:	b084      	sub	sp, #16
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ffd7 	bl	80018f8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 800194a:	4603      	mov	r3, r0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fb1d 	bl	8001f8e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>
 8001954:	4603      	mov	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	463b      	mov	r3, r7
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fb24 	bl	8001fae <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001966:	4602      	mov	r2, r0
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fb32 	bl	8001fd8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fb45 	bl	8002008 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 800197e:	4603      	mov	r3, r0
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	429a      	cmp	r2, r3
 800199c:	d00d      	beq.n	80019ba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f000 fb6b 	bl	8002082 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f103 0210 	add.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	605a      	str	r2, [r3, #4]
      }
 80019b8:	e008      	b.n	80019cc <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 fb74 	bl	80020a8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80019c0:	4603      	mov	r3, r0
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fb96 	bl	80020f8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fc47 	bl	8002270 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 80019e2:	4603      	mov	r3, r0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 fc52 	bl	8002290 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	f107 020c 	add.w	r2, r7, #12
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fc59 	bl	80022b2 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fc61 	bl	80022e2 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f000 fc64 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffd7 	bl	8001a0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fc59 	bl	8002318 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>
 8001a66:	4603      	mov	r3, r0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f107 020c 	add.w	r2, r7, #12
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fc60 	bl	8002338 <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fc6e 	bl	8002362 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fc81 	bl	8002392 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	111b      	asrs	r3, r3, #4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	return *begin();
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa1 	bl	8001a0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fc9b 	bl	800240c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8001ad6:	4603      	mov	r3, r0
      }
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fc9b 	bl	8002424 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8001aee:	4603      	mov	r3, r0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fca6 	bl	8002444 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8001af8:	4603      	mov	r3, r0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fcad 	bl	8002466 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 fcb9 	bl	8002496 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
	{ }
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
	if (__p)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fc91 	bl	80024ac <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f000 fc87 	bl	80024ca <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>
    }
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>:
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fc89 	bl	80024e4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
	{ }
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>:
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
	if (__p)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fc61 	bl	80024fa <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 fc57 	bl	8002518 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>
    }
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001c72:	b590      	push	{r4, r7, lr}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	111b      	asrs	r3, r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff7c 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c9a:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4621      	mov	r1, r4
 8001ca0:	6838      	ldr	r0, [r7, #0]
 8001ca2:	f7ff ff81 	bl	8001ba8 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	111b      	asrs	r3, r3, #4
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffb2 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001cdc:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	6838      	ldr	r0, [r7, #0]
 8001ce4:	f7ff ffb7 	bl	8001c56 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	605a      	str	r2, [r3, #4]
      }
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd90      	pop	{r4, r7, pc}

08001cf6 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f000 fc0a 	bl	8002532 <_ZSt12__niter_baseIPhET_S1_>
 8001d1e:	4604      	mov	r4, r0
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f000 fc06 	bl	8002532 <_ZSt12__niter_baseIPhET_S1_>
 8001d26:	4605      	mov	r5, r0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fc01 	bl	8002532 <_ZSt12__niter_baseIPhET_S1_>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4629      	mov	r1, r5
 8001d36:	4620      	mov	r0, r4
 8001d38:	f000 fc06 	bl	8002548 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	1d3b      	adds	r3, r7, #4
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 fc10 	bl	8002568 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8001d48:	4603      	mov	r3, r0
    }
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}

08001d52 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:

      // Forward iterator requirements
      _GLIBCXX20_CONSTEXPR
      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fc02 	bl	8002580 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 fc07 	bl	8002596 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1d1a      	adds	r2, r3, #4
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f8d8 	bl	8001f58 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f805 	bl	8001dc8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8001dbe:	4603      	mov	r3, r0
      }
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8001dd0:	2301      	movs	r3, #1
      }
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001dec:	4a59      	ldr	r2, [pc, #356]	; (8001f54 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8001dee:	2101      	movs	r1, #1
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fbe9 	bl	80025c8 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 8001df6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fd77 	bl	80018f8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	f107 0214 	add.w	r2, r7, #20
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fc1c 	bl	8002656 <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fc2a 	bl	8002680 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8001e2c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001e32:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	18d5      	adds	r5, r2, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fb9f 	bl	8002580 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4629      	mov	r1, r5
 8001e48:	4620      	mov	r0, r4
 8001e4a:	f7ff ff8e 	bl	8001d6a <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001e52:	f7ff ffae 	bl	8001db2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d027      	beq.n	8001eac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f889 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e66:	4603      	mov	r3, r0
 8001e68:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fe90 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e72:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4621      	mov	r1, r4
 8001e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e7a:	f000 fc15 	bl	80026a8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001e7e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	3310      	adds	r3, #16
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f874 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe7b 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e9c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ea0:	6a39      	ldr	r1, [r7, #32]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f000 fc00 	bl	80026a8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8001ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001eaa:	e026      	b.n	8001efa <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 f861 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fe68 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001ec2:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eca:	f000 fc01 	bl	80026d0 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001ece:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f84c 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe53 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001eec:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef0:	6a39      	ldr	r1, [r7, #32]
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f000 fbec 	bl	80026d0 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001efa:	f7ff ff5a 	bl	8001db2 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fe40 	bl	8001b92 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	6a39      	ldr	r1, [r7, #32]
 8001f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f1a:	f7ff fe45 	bl	8001ba8 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001f1e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2e:	f7ff fe1d 	bl	8001b6c <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f3c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	011b      	lsls	r3, r3, #4
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	441a      	add	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	609a      	str	r2, [r3, #8]
    }
 8001f4a:	bf00      	nop
 8001f4c:	3730      	adds	r7, #48	; 0x30
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	08008ea4 	.word	0x08008ea4

08001f58 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fbbc 	bl	800271c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fbbf 	bl	800273c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	681c      	ldr	r4, [r3, #0]
 8001fc2:	6838      	ldr	r0, [r7, #0]
 8001fc4:	f000 fbba 	bl	800273c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	1ae3      	subs	r3, r4, r3
 8001fce:	111b      	asrs	r3, r3, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}

08001fd8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	f107 020c 	add.w	r2, r7, #12
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ffad 	bl	8001f58 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 8002012:	463b      	mov	r3, r7
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ffde 	bl	8001fd8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800201c:	4603      	mov	r3, r0
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff feb5 	bl	8001d90 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002026:	4603      	mov	r3, r0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	f107 020c 	add.w	r2, r7, #12
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fb8c 	bl	8002752 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8002040:	463b      	mov	r3, r7
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ffc7 	bl	8001fd8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800204a:	4604      	mov	r4, r0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fe9f 	bl	8001d90 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002052:	4603      	mov	r3, r0
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4620      	mov	r0, r4
 800205a:	f000 fb92 	bl	8002782 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f1a3 0210 	sub.w	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fb45 	bl	8002702 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8002078:	683b      	ldr	r3, [r7, #0]
    }
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bd90      	pop	{r4, r7, pc}

08002082 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fb8f 	bl	80027b2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8002094:	4603      	mov	r3, r0
 8002096:	461a      	mov	r2, r3
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 fb94 	bl	80027c8 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f911 	bl	80022e2 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f805 	bl	80020e0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80020d6:	4603      	mov	r3, r0
      }
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80020e8:	2301      	movs	r3, #1
      }
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8002104:	4a59      	ldr	r2, [pc, #356]	; (800226c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8002106:	2101      	movs	r1, #1
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 fb76 	bl	80027fa <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 800210e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff fc74 	bl	8001a0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002122:	4603      	mov	r3, r0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	f107 0214 	add.w	r2, r7, #20
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fba9 	bl	8002888 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8002136:	4603      	mov	r3, r0
 8002138:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fbb7 	bl	80028b2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 8002144:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800214a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	18d5      	adds	r5, r2, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fb2c 	bl	80027b2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	4629      	mov	r1, r5
 8002160:	4620      	mov	r0, r4
 8002162:	f7ff ff8e 	bl	8002082 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8002166:	2300      	movs	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800216a:	f7ff ffae 	bl	80020ca <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d027      	beq.n	80021c4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f8c2 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fd5b 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800218a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4621      	mov	r1, r4
 8002190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002192:	f000 fba2 	bl	80028da <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8002196:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8002198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219a:	3310      	adds	r3, #16
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800219e:	f107 0308 	add.w	r3, r7, #8
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f8ad 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80021a8:	4603      	mov	r3, r0
 80021aa:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fd46 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80021b4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80021b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	4620      	mov	r0, r4
 80021bc:	f000 fb8d 	bl	80028da <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80021c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80021c2:	e026      	b.n	8002212 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 80021c4:	f107 0308 	add.w	r3, r7, #8
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f89a 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80021ce:	4603      	mov	r3, r0
 80021d0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fd33 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80021da:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4621      	mov	r1, r4
 80021e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021e2:	f000 fb8e 	bl	8002902 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80021e6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	3310      	adds	r3, #16
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f885 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fd1e 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002204:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	4620      	mov	r0, r4
 800220c:	f000 fb79 	bl	8002902 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002210:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8002212:	f7ff ff5a 	bl	80020ca <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8002216:	4603      	mov	r3, r0
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fd0b 	bl	8001c40 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800222a:	4603      	mov	r3, r0
 800222c:	461a      	mov	r2, r3
 800222e:	6a39      	ldr	r1, [r7, #32]
 8002230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002232:	f7ff fd10 	bl	8001c56 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8002236:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 8002242:	461a      	mov	r2, r3
 8002244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002246:	f7ff fce8 	bl	8001c1a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002254:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	441a      	add	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	609a      	str	r2, [r3, #8]
    }
 8002262:	bf00      	nop
 8002264:	3730      	adds	r7, #48	; 0x30
 8002266:	46bd      	mov	sp, r7
 8002268:	bdb0      	pop	{r4, r5, r7, pc}
 800226a:	bf00      	nop
 800226c:	08008ea4 	.word	0x08008ea4

08002270 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 fb64 	bl	800294e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	1d1a      	adds	r2, r3, #4
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fb53 	bl	800294e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80022b2:	b590      	push	{r4, r7, lr}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fb56 	bl	800296e <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80022c2:	4603      	mov	r3, r0
 80022c4:	681c      	ldr	r4, [r3, #0]
 80022c6:	6838      	ldr	r0, [r7, #0]
 80022c8:	f000 fb51 	bl	800296e <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80022cc:	4603      	mov	r3, r0
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429c      	cmp	r4, r3
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd90      	pop	{r4, r7, pc}

080022e2 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	f107 030c 	add.w	r3, r7, #12
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fb10 	bl	800294e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fb13 	bl	800296e <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002348:	4603      	mov	r3, r0
 800234a:	681c      	ldr	r4, [r3, #0]
 800234c:	6838      	ldr	r0, [r7, #0]
 800234e:	f000 fb0e 	bl	800296e <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002352:	4603      	mov	r3, r0
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1ae3      	subs	r3, r4, r3
 8002358:	111b      	asrs	r3, r3, #4
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}

08002362 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002362:	b580      	push	{r7, lr}
 8002364:	b084      	sub	sp, #16
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff ffad 	bl	80022e2 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 8002392:	b590      	push	{r4, r7, lr}
 8002394:	b085      	sub	sp, #20
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 800239c:	463b      	mov	r3, r7
 800239e:	2101      	movs	r1, #1
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ffde 	bl	8002362 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80023a6:	4603      	mov	r3, r0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fe7c 	bl	80020a8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80023b0:	4603      	mov	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	f107 020c 	add.w	r2, r7, #12
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fae0 	bl	8002984 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 80023ca:	463b      	mov	r3, r7
 80023cc:	2101      	movs	r1, #1
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ffc7 	bl	8002362 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80023d4:	4604      	mov	r4, r0
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff fe66 	bl	80020a8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80023dc:	4603      	mov	r3, r0
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4620      	mov	r0, r4
 80023e4:	f000 fae6 	bl	80029b4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f1a3 0210 	sub.w	r2, r3, #16
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 fa99 	bl	8002934 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8002402:	683b      	ldr	r3, [r7, #0]
    }
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f971 	bl	800271c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	1d1a      	adds	r2, r3, #4
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f960 	bl	800271c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002466:	b590      	push	{r4, r7, lr}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f963 	bl	800273c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002476:	4603      	mov	r3, r0
 8002478:	681c      	ldr	r4, [r3, #0]
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f000 f95e 	bl	800273c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002480:	4603      	mov	r3, r0
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	429c      	cmp	r4, r3
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}

08002496 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fa91 	bl	80029e4 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80024d4:	6839      	ldr	r1, [r7, #0]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa94 	bl	8002a04 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>
    }
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>:
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa85 	bl	8002a1a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>
 8002510:	bf00      	nop
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fa88 	bl	8002a3a <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>
    }
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
    { return __it; }
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fa79 	bl	8002a50 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8002596:	b5b0      	push	{r4, r5, r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffec 	bl	8002580 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80025a8:	4605      	mov	r5, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4619      	mov	r1, r3
 80025ae:	2010      	movs	r0, #16
 80025b0:	f7fd ffac 	bl	800050c <_ZnwjPv>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461c      	mov	r4, r3
 80025b8:	462b      	mov	r3, r5
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bdb0      	pop	{r4, r5, r7, pc}

080025c8 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 fa4b 	bl	8002a70 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80025da:	4604      	mov	r4, r0
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fa58 	bl	8002a92 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 80025e2:	4603      	mov	r3, r0
 80025e4:	1ae2      	subs	r2, r4, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	bf34      	ite	cc
 80025ec:	2301      	movcc	r3, #1
 80025ee:	2300      	movcs	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f006 fa8c 	bl	8008b14 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fa48 	bl	8002a92 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8002602:	4604      	mov	r4, r0
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fa44 	bl	8002a92 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800260a:	4603      	mov	r3, r0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	f107 0208 	add.w	r2, r7, #8
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fa4a 	bl	8002ab2 <_ZSt3maxIjERKT_S2_S2_>
 800261e:	4603      	mov	r3, r0
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4423      	add	r3, r4
 8002624:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa33 	bl	8002a92 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800262c:	4602      	mov	r2, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4293      	cmp	r3, r2
 8002632:	d306      	bcc.n	8002642 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fa1b 	bl	8002a70 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800263a:	4602      	mov	r2, r0
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	4293      	cmp	r3, r2
 8002640:	d904      	bls.n	800264c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fa14 	bl	8002a70 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8002648:	4603      	mov	r3, r0
 800264a:	e000      	b.n	800264e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 800264c:	697b      	ldr	r3, [r7, #20]
      }
 800264e:	4618      	mov	r0, r3
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}

08002656 <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002656:	b590      	push	{r4, r7, lr}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fc89 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002666:	4603      	mov	r3, r0
 8002668:	681c      	ldr	r4, [r3, #0]
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	f7ff fc84 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002670:	4603      	mov	r3, r0
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1ae3      	subs	r3, r4, r3
 8002676:	111b      	asrs	r3, r3, #4
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}

08002680 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fa20 	bl	8002ada <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>
 800269a:	4603      	mov	r3, r0
 800269c:	e000      	b.n	80026a0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 800269e:	2300      	movs	r3, #0
      }
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80026b6:	f88d 4000 	strb.w	r4, [sp]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fa19 	bl	8002af8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80026c6:	4603      	mov	r3, r0
      }
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd90      	pop	{r4, r7, pc}

080026d0 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 fa1c 	bl	8002b1c <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 80026e4:	4604      	mov	r4, r0
 80026e6:	68b8      	ldr	r0, [r7, #8]
 80026e8:	f000 fa18 	bl	8002b1c <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 80026ec:	4601      	mov	r1, r0
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4620      	mov	r0, r4
 80026f4:	f000 fa21 	bl	8002b3a <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 80026f8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}

08002702 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800270c:	6839      	ldr	r1, [r7, #0]
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fa24 	bl	8002b5c <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002752:	b590      	push	{r4, r7, lr}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fc0b 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002762:	4603      	mov	r3, r0
 8002764:	681c      	ldr	r4, [r3, #0]
 8002766:	6838      	ldr	r0, [r7, #0]
 8002768:	f7ff fc06 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800276c:	4603      	mov	r3, r0
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	429c      	cmp	r4, r3
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}

08002782 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8002782:	b590      	push	{r4, r7, lr}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f9ef 	bl	8002b72 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8002794:	4604      	mov	r4, r0
 8002796:	68b8      	ldr	r0, [r7, #8]
 8002798:	f000 f9eb 	bl	8002b72 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 800279c:	4603      	mov	r3, r0
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4619      	mov	r1, r3
 80027a2:	4620      	mov	r0, r4
 80027a4:	f000 f9f0 	bl	8002b88 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 80027a8:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}

080027b2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ffec 	bl	80027b2 <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80027da:	4605      	mov	r5, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4619      	mov	r1, r3
 80027e0:	2010      	movs	r0, #16
 80027e2:	f7fd fe93 	bl	800050c <_ZnwjPv>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461c      	mov	r4, r3
 80027ea:	462b      	mov	r3, r5
 80027ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bdb0      	pop	{r4, r5, r7, pc}

080027fa <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80027fa:	b590      	push	{r4, r7, lr}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f9df 	bl	8002bca <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800280c:	4604      	mov	r4, r0
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff f943 	bl	8001a9a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8002814:	4603      	mov	r3, r0
 8002816:	1ae2      	subs	r2, r4, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	bf34      	ite	cc
 800281e:	2301      	movcc	r3, #1
 8002820:	2300      	movcs	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f006 f973 	bl	8008b14 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff f933 	bl	8001a9a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8002834:	4604      	mov	r4, r0
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff f92f 	bl	8001a9a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 800283c:	4603      	mov	r3, r0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	f107 0208 	add.w	r2, r7, #8
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f931 	bl	8002ab2 <_ZSt3maxIjERKT_S2_S2_>
 8002850:	4603      	mov	r3, r0
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4423      	add	r3, r4
 8002856:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7ff f91e 	bl	8001a9a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 800285e:	4602      	mov	r2, r0
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4293      	cmp	r3, r2
 8002864:	d306      	bcc.n	8002874 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f9af 	bl	8002bca <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4293      	cmp	r3, r2
 8002872:	d904      	bls.n	800287e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9a8 	bl	8002bca <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800287a:	4603      	mov	r3, r0
 800287c:	e000      	b.n	8002880 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 800287e:	697b      	ldr	r3, [r7, #20]
      }
 8002880:	4618      	mov	r0, r3
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}

08002888 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fd35 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002898:	4603      	mov	r3, r0
 800289a:	681c      	ldr	r4, [r3, #0]
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	f7ff fd30 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1ae3      	subs	r3, r4, r3
 80028a8:	111b      	asrs	r3, r3, #4
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}

080028b2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f990 	bl	8002bec <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>
 80028cc:	4603      	mov	r3, r0
 80028ce:	e000      	b.n	80028d2 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 80028d0:	2300      	movs	r3, #0
      }
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80028da:	b590      	push	{r4, r7, lr}
 80028dc:	b087      	sub	sp, #28
 80028de:	af02      	add	r7, sp, #8
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80028e8:	f88d 4000 	strb.w	r4, [sp]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f989 	bl	8002c0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80028f8:	4603      	mov	r3, r0
      }
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f98c 	bl	8002c2e <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8002916:	4604      	mov	r4, r0
 8002918:	68b8      	ldr	r0, [r7, #8]
 800291a:	f000 f988 	bl	8002c2e <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 800291e:	4601      	mov	r1, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4620      	mov	r0, r4
 8002926:	f000 f991 	bl	8002c4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 800292a:	4603      	mov	r3, r0
    }
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bd90      	pop	{r4, r7, pc}

08002934 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f994 	bl	8002c6e <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fcb7 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002994:	4603      	mov	r3, r0
 8002996:	681c      	ldr	r4, [r3, #0]
 8002998:	6838      	ldr	r0, [r7, #0]
 800299a:	f7ff fcb2 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800299e:	4603      	mov	r3, r0
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	429c      	cmp	r4, r3
 80029a4:	bf14      	ite	ne
 80029a6:	2301      	movne	r3, #1
 80029a8:	2300      	moveq	r3, #0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}

080029b4 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f95f 	bl	8002c84 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 80029c6:	4604      	mov	r4, r0
 80029c8:	68b8      	ldr	r0, [r7, #8]
 80029ca:	f000 f95b 	bl	8002c84 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 80029ce:	4603      	mov	r3, r0
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4620      	mov	r0, r4
 80029d6:	f000 f960 	bl	8002c9a <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 80029da:	4603      	mov	r3, r0
    }
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd90      	pop	{r4, r7, pc}

080029e4 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4619      	mov	r1, r3
 80029f6:	68b8      	ldr	r0, [r7, #8]
 80029f8:	f006 f876 	bl	8008ae8 <_ZdlPvj>
      }
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	68b8      	ldr	r0, [r7, #8]
 8002a2e:	f006 f85b 	bl	8008ae8 <_ZdlPvj>
      }
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>:
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f93b 	bl	8002cdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8002a66:	4603      	mov	r3, r0
    }
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f962 	bl	8002d44 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f944 	bl	8002d10 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	111b      	asrs	r3, r3, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d201      	bcs.n	8002acc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	e000      	b.n	8002ace <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002acc:	687b      	ldr	r3, [r7, #4]
    }
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f936 	bl	8002d5a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f942 	bl	8002d96 <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002b12:	4603      	mov	r3, r0
      }
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f950 	bl	8002dd0 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f951 	bl	8002df4 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f93f 	bl	8002e18 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	68b8      	ldr	r0, [r7, #8]
 8002b9e:	f000 f93b 	bl	8002e18 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f937 	bl	8002e18 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4629      	mov	r1, r5
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f000 f93f 	bl	8002e34 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f94a 	bl	8002e54 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8002bc0:	4603      	mov	r3, r0
    }
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bdb0      	pop	{r4, r5, r7, pc}

08002bca <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f96e 	bl	8002eb6 <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f950 	bl	8002e82 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	6839      	ldr	r1, [r7, #0]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f966 	bl	8002ecc <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f972 	bl	8002f08 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002c24:	4603      	mov	r3, r0
      }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f980 	bl	8002f42 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f981 	bl	8002f66 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>
 8002c64:	4603      	mov	r3, r0
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002c9a:	b5b0      	push	{r4, r5, r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f96f 	bl	8002f8a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002cac:	4604      	mov	r4, r0
 8002cae:	68b8      	ldr	r0, [r7, #8]
 8002cb0:	f000 f96b 	bl	8002f8a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f967 	bl	8002f8a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f000 f96f 	bl	8002fa6 <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f97a 	bl	8002fc6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8002cd2:	4603      	mov	r3, r0
    }
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bdb0      	pop	{r4, r5, r7, pc}

08002cdc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f005 ff59 	bl	8008bb4 <memmove>
	  return __result + _Num;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
	}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002d18:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8002d1c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f968 	bl	8002ff4 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>
 8002d24:	4603      	mov	r3, r0
 8002d26:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002d28:	f107 0208 	add.w	r2, r7, #8
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f96a 	bl	800300c <_ZSt3minIjERKT_S2_S2_>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	681b      	ldr	r3, [r3, #0]
      }
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f964 	bl	8003034 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4293      	cmp	r3, r2
 8002d72:	bf8c      	ite	hi
 8002d74:	2301      	movhi	r3, #1
 8002d76:	2300      	movls	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7e:	f005 fec6 	bl	8008b0e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 feb0 	bl	8008aec <_Znwj>
 8002d8c:	4603      	mov	r3, r0
      }
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002d96:	b5b0      	push	{r4, r5, r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f951 	bl	800304c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8002daa:	4604      	mov	r4, r0
 8002dac:	68b8      	ldr	r0, [r7, #8]
 8002dae:	f000 f94d 	bl	800304c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8002db2:	4605      	mov	r5, r0
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f949 	bl	800304c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f000 f94e 	bl	8003062 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002dc6:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}

08002dd0 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8002dda:	463b      	mov	r3, r7
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f966 	bl	80030ae <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8002de2:	4603      	mov	r3, r0
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002e00:	2301      	movs	r3, #1
 8002e02:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 f95b 	bl	80030c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>
 8002e0e:	4603      	mov	r3, r0
    }
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f8a8 	bl	8001f78 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f96c 	bl	8003122 <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffda 	bl	8002e18 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002e64:	4602      	mov	r2, r0
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	111b      	asrs	r3, r3, #4
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f8b0 	bl	8001fd8 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002e8a:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8002e8e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f956 	bl	8003142 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>
 8002e96:	4603      	mov	r3, r0
 8002e98:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002e9a:	f107 0208 	add.w	r2, r7, #8
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 f8b1 	bl	800300c <_ZSt3minIjERKT_S2_S2_>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	681b      	ldr	r3, [r3, #0]
      }
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f93e 	bl	800315a <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	bf8c      	ite	hi
 8002ee6:	2301      	movhi	r3, #1
 8002ee8:	2300      	movls	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002ef0:	f005 fe0d 	bl	8008b0e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 fdf7 	bl	8008aec <_Znwj>
 8002efe:	4603      	mov	r3, r0
      }
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002f08:	b5b0      	push	{r4, r5, r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f92b 	bl	8003172 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	68b8      	ldr	r0, [r7, #8]
 8002f20:	f000 f927 	bl	8003172 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8002f24:	4605      	mov	r5, r0
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f923 	bl	8003172 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4629      	mov	r1, r5
 8002f32:	4620      	mov	r0, r4
 8002f34:	f000 f928 	bl	8003188 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8002f38:	4603      	mov	r3, r0
    }
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bdb0      	pop	{r4, r5, r7, pc}

08002f42 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f940 	bl	80031d4 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8002f54:	4603      	mov	r3, r0
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f935 	bl	80031ea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>
 8002f80:	4603      	mov	r3, r0
    }
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f9b4 	bl	8002302 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f946 	bl	8003248 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ffda 	bl	8002f8a <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	111b      	asrs	r3, r3, #4
 8002fde:	461a      	mov	r2, r3
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f9bc 	bl	8002362 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f933 	bl	8003268 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>
 8003002:	4603      	mov	r3, r0
      }
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d201      	bcs.n	8003026 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	e000      	b.n	8003028 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8003026:	687b      	ldr	r3, [r7, #4]
    }
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800303c:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8003062:	b590      	push	{r4, r7, lr}
 8003064:	b087      	sub	sp, #28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	429a      	cmp	r2, r3
 800307a:	d013      	beq.n	80030a4 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 800307c:	6978      	ldr	r0, [r7, #20]
 800307e:	f000 f8ff 	bl	8003280 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 8003082:	4604      	mov	r4, r0
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f8fb 	bl	8003280 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 800308a:	4603      	mov	r3, r0
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	4619      	mov	r1, r3
 8003090:	4620      	mov	r0, r4
 8003092:	f000 f900 	bl	8003296 <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	3310      	adds	r3, #16
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3310      	adds	r3, #16
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	e7e7      	b.n	8003074 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 80030a4:	697b      	ldr	r3, [r7, #20]
    }
 80030a6:	4618      	mov	r0, r3
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}

080030ae <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80030d4:	f107 0208 	add.w	r2, r7, #8
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f8f4 	bl	80032cc <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80030ea:	6978      	ldr	r0, [r7, #20]
 80030ec:	f000 f8c8 	bl	8003280 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80030f0:	4604      	mov	r4, r0
 80030f2:	f107 030c 	add.w	r3, r7, #12
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f90a 	bl	8003310 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4619      	mov	r1, r3
 8003100:	4620      	mov	r0, r4
 8003102:	f000 f911 	bl	8003328 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f8ef 	bl	80032ee <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3310      	adds	r3, #16
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e7dd      	b.n	80030d4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8003118:	697b      	ldr	r3, [r7, #20]
	}
 800311a:	4618      	mov	r0, r3
 800311c:	371c      	adds	r7, #28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd90      	pop	{r4, r7, pc}

08003122 <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f910 	bl	8003358 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>
 8003138:	4603      	mov	r3, r0
    }
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f921 	bl	8003392 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>
 8003150:	4603      	mov	r3, r0
      }
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8003162:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
    { return __it; }
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d013      	beq.n	80031ca <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f000 f901 	bl	80033aa <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80031a8:	4604      	mov	r4, r0
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f8fd 	bl	80033aa <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80031b0:	4603      	mov	r3, r0
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 f902 	bl	80033c0 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3310      	adds	r3, #16
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3310      	adds	r3, #16
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e7e7      	b.n	800319a <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 80031ca:	697b      	ldr	r3, [r7, #20]
    }
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80031ea:	b590      	push	{r4, r7, lr}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80031fa:	f107 0208 	add.w	r2, r7, #8
 80031fe:	f107 030c 	add.w	r3, r7, #12
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f000 f8f6 	bl	80033f6 <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f000 f8ca 	bl	80033aa <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 8003216:	4604      	mov	r4, r0
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f90c 	bl	800343a <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>
 8003222:	4603      	mov	r3, r0
 8003224:	4619      	mov	r1, r3
 8003226:	4620      	mov	r0, r4
 8003228:	f000 f913 	bl	8003452 <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f8f1 	bl	8003418 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	3310      	adds	r3, #16
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e7dd      	b.n	80031fa <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 800323e:	697b      	ldr	r3, [r7, #20]
	}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bd90      	pop	{r4, r7, pc}

08003248 <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f912 	bl	8003482 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>
 800325e:	4603      	mov	r3, r0
    }
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff fedf 	bl	8003034 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8003276:	4603      	mov	r3, r0
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80032a2:	68b8      	ldr	r0, [r7, #8]
 80032a4:	f000 f90a 	bl	80034bc <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	68f9      	ldr	r1, [r7, #12]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f90f 	bl	80034d2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80032b4:	68b8      	ldr	r0, [r7, #8]
 80032b6:	f7ff ffe3 	bl	8003280 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4619      	mov	r1, r3
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fa1f 	bl	8002702 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f90d 	bl	80034f8 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80032de:	4603      	mov	r3, r0
 80032e0:	f083 0301 	eor.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>:
      operator++()
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f103 0210 	add.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
	return *this;
 8003302:	687b      	ldr	r3, [r7, #4]
      }
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>:
      operator*() const
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8003332:	6838      	ldr	r0, [r7, #0]
 8003334:	f000 f8f6 	bl	8003524 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8003338:	4605      	mov	r5, r0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4619      	mov	r1, r3
 800333e:	2010      	movs	r0, #16
 8003340:	f7fd f8e4 	bl	800050c <_ZnwjPv>
 8003344:	4603      	mov	r3, r0
 8003346:	461c      	mov	r4, r3
 8003348:	462b      	mov	r3, r5
 800334a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bdb0      	pop	{r4, r5, r7, pc}

08003358 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	111b      	asrs	r3, r3, #4
 800336c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	461a      	mov	r2, r3
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f005 fc19 	bl	8008bb4 <memmove>
	  return __result + _Num;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	4413      	add	r3, r2
	}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fedd 	bl	800315a <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80033cc:	68b8      	ldr	r0, [r7, #8]
 80033ce:	f000 f8b4 	bl	800353a <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8b9 	bl	8003550 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80033de:	68b8      	ldr	r0, [r7, #8]
 80033e0:	f7ff ffe3 	bl	80033aa <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff faa3 	bl	8002934 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8003400:	6839      	ldr	r1, [r7, #0]
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f8b7 	bl	8003576 <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 8003408:	4603      	mov	r3, r0
 800340a:	f083 0301 	eor.w	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>:
      operator++()
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f103 0210 	add.w	r2, r3, #16
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	601a      	str	r2, [r3, #0]
	return *this;
 800342c:	687b      	ldr	r3, [r7, #4]
      }
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>:
      operator*() const
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8003452:	b5b0      	push	{r4, r5, r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800345c:	6838      	ldr	r0, [r7, #0]
 800345e:	f000 f8a0 	bl	80035a2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8003462:	4605      	mov	r5, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4619      	mov	r1, r3
 8003468:	2010      	movs	r0, #16
 800346a:	f7fd f84f 	bl	800050c <_ZnwjPv>
 800346e:	4603      	mov	r3, r0
 8003470:	461c      	mov	r4, r3
 8003472:	462b      	mov	r3, r5
 8003474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bdb0      	pop	{r4, r5, r7, pc}

08003482 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003482:	b580      	push	{r7, lr}
 8003484:	b086      	sub	sp, #24
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	111b      	asrs	r3, r3, #4
 8003496:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	461a      	mov	r2, r3
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f005 fb84 	bl	8008bb4 <memmove>
	  return __result + _Num;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4413      	add	r3, r2
	}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f820 	bl	8003524 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f864 	bl	80035b8 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80034f0:	bf00      	nop
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 80034f8:	b590      	push	{r4, r7, lr}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f871 	bl	80035ea <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8003508:	4604      	mov	r4, r0
 800350a:	6838      	ldr	r0, [r7, #0]
 800350c:	f000 f86d 	bl	80035ea <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 8003510:	4603      	mov	r3, r0
 8003512:	429c      	cmp	r4, r3
 8003514:	bf0c      	ite	eq
 8003516:	2301      	moveq	r3, #1
 8003518:	2300      	movne	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bd90      	pop	{r4, r7, pc}

08003524 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f820 	bl	80035a2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f84a 	bl	8003602 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8003576:	b590      	push	{r4, r7, lr}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f857 	bl	8003634 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 8003586:	4604      	mov	r4, r0
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f000 f853 	bl	8003634 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 800358e:	4603      	mov	r3, r0
 8003590:	429c      	cmp	r4, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd90      	pop	{r4, r7, pc}

080035a2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffad 	bl	8003524 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80035ca:	4605      	mov	r5, r0
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4619      	mov	r1, r3
 80035d0:	2010      	movs	r0, #16
 80035d2:	f7fc ff9b 	bl	800050c <_ZnwjPv>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461c      	mov	r4, r3
 80035da:	462b      	mov	r3, r5
 80035dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bdb0      	pop	{r4, r5, r7, pc}

080035ea <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>:
      base() const
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8003602:	b5b0      	push	{r4, r5, r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ffc7 	bl	80035a2 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8003614:	4605      	mov	r5, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	4619      	mov	r1, r3
 800361a:	2010      	movs	r0, #16
 800361c:	f7fc ff76 	bl	800050c <_ZnwjPv>
 8003620:	4603      	mov	r3, r0
 8003622:	461c      	mov	r4, r3
 8003624:	462b      	mov	r3, r5
 8003626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bdb0      	pop	{r4, r5, r7, pc}

08003634 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>:
      base() const
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <_ZN4BG9521MandatoryParamEnqueueEv>:

//---------------------------------------------------------------------------------------------------Enqueue
//--------------------------------------------------------------------this parameters are followed from communication manual

void BG95::MandatoryParamEnqueue()
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	//----------------------------1.) Mandatory parameters:
	// a.) Device parameters:

	//Motor Type
	WriteDataEnqueue(MOTOR_Type, 0, BLDC);      // Motor - Type: 1 = brushless Motor (BLDC)
 8003654:	2301      	movs	r3, #1
 8003656:	2200      	movs	r2, #0
 8003658:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fd f9c5 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(MOTOR_PolN, 0, 8);      // Motor - Number of Poles (8 - bg95)
 8003662:	2308      	movs	r3, #8
 8003664:	2200      	movs	r2, #0
 8003666:	f643 1110 	movw	r1, #14608	; 0x3910
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd f9be 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	//Encoder feedback enable
	WriteDataEnqueue(VEL_Feedback, 0, 2410);      //  Encoder feedback for the velocity controller
 8003670:	f640 136a 	movw	r3, #2410	; 0x96a
 8003674:	2200      	movs	r2, #0
 8003676:	f243 3150 	movw	r1, #13136	; 0x3350
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd f9b6 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(SVEL_Feedback, 0, 2410);      //  Encoder feedback for the secondary velocity controller
 8003680:	f640 136a 	movw	r3, #2410	; 0x96a
 8003684:	2200      	movs	r2, #0
 8003686:	f243 5150 	movw	r1, #13648	; 0x3550
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd f9ae 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(MOTOR_ENC_Resolution, 0, 4096);      // Encoder resolution in counts: sin/cos = 4096, 1000h
 8003690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003694:	2200      	movs	r2, #0
 8003696:	f643 1162 	movw	r1, #14690	; 0x3962
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fd f9a6 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	// b.) Current limits (Attention: Note the motor data sheet!):
	WriteDataEnqueue(CURR_LimitMaxPos, 0, 50000);      // Curr ent limit - max. positive [mA]
 80036a0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80036a4:	2200      	movs	r2, #0
 80036a6:	f243 2121 	movw	r1, #12833	; 0x3221
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fd f99e 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_LimitMaxNeg, 0, 50000);      // Current limit - max. negative [mA]
 80036b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80036b4:	2200      	movs	r2, #0
 80036b6:	f243 2123 	movw	r1, #12835	; 0x3223
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd f996 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitMode, Disable);      // Dynamic Current Limit I*t - Mode: 1 = active
 80036c0:	2300      	movs	r3, #0
 80036c2:	2200      	movs	r2, #0
 80036c4:	f243 2124 	movw	r1, #12836	; 0x3224
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd f98f 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitPeak, 12000);      // Dynamic Current Limit I*t - Peak Current [mA]
 80036ce:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80036d2:	2201      	movs	r2, #1
 80036d4:	f243 2124 	movw	r1, #12836	; 0x3224
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fd f987 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitCont, 2640);      // Dynamic Current Limit I*t - Continuous Current [mA]
 80036de:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 80036e2:	2202      	movs	r2, #2
 80036e4:	f243 2124 	movw	r1, #12836	; 0x3224
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fd f97f 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_DynLimit, CURR_DynLimitTime, 1000);      // Dynamic Current Limit I*t - Time [ms]
 80036ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f2:	2203      	movs	r2, #3
 80036f4:	f243 2124 	movw	r1, #12836	; 0x3224
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7fd f977 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	// c.) Controller parameters
	// Primary Velocity controller
	WriteDataEnqueue(VEL_Kp, 0, 500);      // PID-Position Controller - Proportional gain
 80036fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003702:	2200      	movs	r2, #0
 8003704:	f243 3110 	movw	r1, #13072	; 0x3310
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fd f96f 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Ki, 0, 50);      // PID-Position Controller - Integral Factor
 800370e:	2332      	movs	r3, #50	; 0x32
 8003710:	2200      	movs	r2, #0
 8003712:	f243 3111 	movw	r1, #13073	; 0x3311
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd f968 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Kd, 0, 1);      // PID-Position Controller - Differential gain
 800371c:	2301      	movs	r3, #1
 800371e:	2200      	movs	r2, #0
 8003720:	f243 3112 	movw	r1, #13074	; 0x3312
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7fd f961 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_ILimit, 0, 10000);      // integration limit of the position controller
 800372a:	f242 7310 	movw	r3, #10000	; 0x2710
 800372e:	2200      	movs	r2, #0
 8003730:	f243 3113 	movw	r1, #13075	; 0x3313
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fd f959 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Kvff, 0, 1000);      // velocity feed foward factor
 800373a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800373e:	2200      	movs	r2, #0
 8003740:	f243 3114 	movw	r1, #13076	; 0x3314
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd f951 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Kaff, 0, 1);      // Accelation feed foward factor
 800374a:	2301      	movs	r3, #1
 800374c:	2200      	movs	r2, #0
 800374e:	f243 3115 	movw	r1, #13077	; 0x3315
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd f94a 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	// Secondary Velocity controller
	WriteDataEnqueue(SVEL_Kp, 0, 500);      // PI-Velocity Controller - Proportional gain
 8003758:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800375c:	2200      	movs	r2, #0
 800375e:	f243 5110 	movw	r1, #13584	; 0x3510
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd f942 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(SVEL_Ki, 0, 50);      // PI-Velocity Controller - Integration constant
 8003768:	2332      	movs	r3, #50	; 0x32
 800376a:	2200      	movs	r2, #0
 800376c:	f243 5111 	movw	r1, #13585	; 0x3511
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd f93b 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(SVEL_KIxR, 0, 1);      // compensation factor
 8003776:	2301      	movs	r3, #1
 8003778:	2200      	movs	r2, #0
 800377a:	f243 5117 	movw	r1, #13591	; 0x3517
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd f934 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	// Current controller
	WriteDataEnqueue(CURR_Kp, 0, 35);      // PI-Current Controller - Proportional gain
 8003784:	2323      	movs	r3, #35	; 0x23
 8003786:	2200      	movs	r2, #0
 8003788:	f243 2110 	movw	r1, #12816	; 0x3210
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fd f92d 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(CURR_Ki, 0, 2);      // PI-Current Controller - Integration constant
 8003792:	2302      	movs	r3, #2
 8003794:	2200      	movs	r2, #0
 8003796:	f243 2111 	movw	r1, #12817	; 0x3211
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd f926 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZN4BG9526RecommendationParamEnqueueEv>:

void BG95::RecommendationParamEnqueue()
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08a      	sub	sp, #40	; 0x28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	//----------------------------2.) Recommendation parameters:
	const int32_t drive_vel = this->drive_vel_;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
	const int32_t max_vel = this->max_vel_;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ba:	623b      	str	r3, [r7, #32]
	const uint32_t acc_rpm = this->acc_rpm_;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	61fb      	str	r3, [r7, #28]
	const uint32_t acc_time = this->acc_time_;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	61bb      	str	r3, [r7, #24]
	const uint32_t dec_rpm = this->dec_rpm_;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	617b      	str	r3, [r7, #20]
	const uint32_t dec_time = this->dec_time_;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	613b      	str	r3, [r7, #16]
	const uint32_t qdec_rpm = this->qdec_rpm_;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	60fb      	str	r3, [r7, #12]
	const uint32_t qdec_time = this->qdec_time_;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	60bb      	str	r3, [r7, #8]

	WriteDataEnqueue(VEL_DesiredValue, 0, drive_vel);      // Velocity - rpm
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	2200      	movs	r2, #0
 80037e4:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd f8ff 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_LimitMaxPos, 0, max_vel);      // Velocity Max. Limit - Positive Direction - rpm
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f243 3121 	movw	r1, #13089	; 0x3321
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd f8f8 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_LimitMaxNeg, 0, max_vel);      // Velocity Max. Limit - Negative Direction - rpm
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2200      	movs	r2, #0
 8003800:	f243 3123 	movw	r1, #13091	; 0x3323
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fd f8f1 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_Acc_dV, 0, acc_rpm);      // Velocity Acceleration - Delta v
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2200      	movs	r2, #0
 800380e:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd f8ea 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Acc_dT, 0, acc_time);      // Velocity Acceleration - Delta t
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2200      	movs	r2, #0
 800381c:	f243 3141 	movw	r1, #13121	; 0x3341
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd f8e3 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_Dec_dV, 0, dec_rpm);      // Velocity Deceleration - Delta v
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	f243 3142 	movw	r1, #13122	; 0x3342
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd f8dc 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	WriteDataEnqueue(VEL_Dec_dT, 0, dec_time);      // Velocity Deceleration - Delta t
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	2200      	movs	r2, #0
 8003838:	f243 3143 	movw	r1, #13123	; 0x3343
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fd f8d5 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(VEL_Dec_QuickStop_dV, 0, qdec_rpm);      // Velocity Deceleration - Quick-Stop - Delta v
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f243 3144 	movw	r1, #13124	; 0x3344
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd f8ce 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Dec_QuickStop_dT, 0, qdec_time);      // Velocity Deceleration - Quick-Stop - Delta t
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2200      	movs	r2, #0
 8003854:	f243 3145 	movw	r1, #13125	; 0x3345
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fd f93a 	bl	8000ad2 <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Cmd, 0, CMD_Update);      // update velocity parameters
 800385e:	2305      	movs	r3, #5
 8003860:	2200      	movs	r2, #0
 8003862:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd f8c0 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
}
 800386c:	bf00      	nop
 800386e:	3728      	adds	r7, #40	; 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <_ZN4BG9522BreakManagementEnqueueEv>:

void BG95::BreakManagementEnqueue()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	/*Manual oepn break*/
	//AsyncWriteDataEnqueue(0x3150, 0, 2);      // Open Break

	/*Break management configuration.*/
	WriteDataEnqueue(Brake_Management, BM_Config, 3);      // Brake Management - Configuration - auto disable when the movoment ends
 800387c:	2303      	movs	r3, #3
 800387e:	2200      	movs	r2, #0
 8003880:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7fd f8b1 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OffOrConditionFlags, 5);      // Brake Management - Activating Condition
 800388a:	2305      	movs	r3, #5
 800388c:	2218      	movs	r2, #24
 800388e:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd f8aa 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OnOrConditionFlags, 5);      // Brake Management - Deactivating Condition
 8003898:	2305      	movs	r3, #5
 800389a:	221a      	movs	r2, #26
 800389c:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fd f8a3 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_Dout, DOut_1_LAtive);      // Brake Management - Brake Output(Digital output 1 High-active)
 80038a6:	f64f 639f 	movw	r3, #65183	; 0xfe9f
 80038aa:	2208      	movs	r2, #8
 80038ac:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd f89b 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OffDelay1, 200);      // Brake Management - Brake Output
 80038b6:	23c8      	movs	r3, #200	; 0xc8
 80038b8:	2210      	movs	r2, #16
 80038ba:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd f894 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OffDelay2, 200);      // Brake Management - Brake Output
 80038c4:	23c8      	movs	r3, #200	; 0xc8
 80038c6:	2211      	movs	r2, #17
 80038c8:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7fd f88d 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OnDelay1, 200);      // Brake Management - Brake Output
 80038d2:	23c8      	movs	r3, #200	; 0xc8
 80038d4:	2212      	movs	r2, #18
 80038d6:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fd f886 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(Brake_Management, BM_OnDelay2, 200);      // Brake Management - Brake Output
 80038e0:	23c8      	movs	r3, #200	; 0xc8
 80038e2:	2213      	movs	r2, #19
 80038e4:	f643 11a0 	movw	r1, #14752	; 0x39a0
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fd f87f 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_ZN4BG9520HardwareParamEnqueueEv>:

void BG95::HardwareParamEnqueue()
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
	//Etc. - error following
	WriteDataEnqueue(POS_FollowingErrorWindow, 0, 1000);   // position following error - window
 80038fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003902:	2200      	movs	r2, #0
 8003904:	f243 7132 	movw	r1, #14130	; 0x3732
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd f86f 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Mode, 0, MODE_Pos);      // device mode "position mode"
 800390e:	2307      	movs	r3, #7
 8003910:	2200      	movs	r2, #0
 8003912:	f243 0103 	movw	r1, #12291	; 0x3003
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f868 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	//save all config.
	WriteDataEnqueue(DEV_Cmd, 0, CMD_StoreParam);      //DeviceCommand -  Stores actual parameters
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	2200      	movs	r2, #0
 8003920:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd f861 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      //DeviceCommand -  Stores actual parameters
 800392a:	2304      	movs	r3, #4
 800392c:	2200      	movs	r2, #0
 800392e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd f85a 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <_ZN4BG9521SchduleCommandEnqueueEv>:

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
}

void BG95::SchduleCommandEnqueue()
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	//ReadDataEnqueue(0x3110, 0, 0);      // actual power voltage

	ReadDataEnqueue(IO_AIN_Voltage_Up, 0);      // actual motor voltage
 8003948:	2200      	movs	r2, #0
 800394a:	f243 1111 	movw	r1, #12561	; 0x3111
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd f932 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(IO_AIN_Current_Im, 0);      // actual motor current
 8003954:	2200      	movs	r2, #0
 8003956:	f243 1113 	movw	r1, #12563	; 0x3113
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd f92c 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(POS_ActualTargetPosition, 0);      // Actual Target Position
 8003960:	2200      	movs	r2, #0
 8003962:	f243 7160 	movw	r1, #14176	; 0x3760
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd f926 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	//ReadDataEnqueue(POS_ActualCommandPosition, 0, 0);      // Actual Command Position

	ReadDataEnqueue(POS_ActualPosition, 0);      //motor pos. -  Actual Position
 800396c:	2200      	movs	r2, #0
 800396e:	f243 7162 	movw	r1, #14178	; 0x3762
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f920 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(MOTOR_Polarity, 0);      // Mptor dir. - Polarity(direction)
 8003978:	2200      	movs	r2, #0
 800397a:	f643 1111 	movw	r1, #14609	; 0x3911
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd f91a 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(MEASUREMENT_Vel_rpm, 1);      //motor dynamics - Currently velocity(rpm)
 8003984:	2201      	movs	r2, #1
 8003986:	f643 2104 	movw	r1, #14852	; 0x3a04
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd f914 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_DesiredValue, 0);      // Velocity - rpm
 8003990:	2200      	movs	r2, #0
 8003992:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd f90e 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Acc_dV, 0);      // Velocity Acceleration - Delta v
 800399c:	2200      	movs	r2, #0
 800399e:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd f908 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Acc_dT, 0);      // Velocity Acceleration - Delta t
 80039a8:	2200      	movs	r2, #0
 80039aa:	f243 3141 	movw	r1, #13121	; 0x3341
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd f902 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_dV, 0);      // Velocity Deceleration - Delta v
 80039b4:	2200      	movs	r2, #0
 80039b6:	f243 3142 	movw	r1, #13122	; 0x3342
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd f8fc 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_dT, 0);      // Velocity Deceleration - Delta t
 80039c0:	2200      	movs	r2, #0
 80039c2:	f243 3143 	movw	r1, #13123	; 0x3343
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd f8f6 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_QuickStop_dV, 0);      // Velocity Deceleration - Quick-Stop - Delta v
 80039cc:	2200      	movs	r2, #0
 80039ce:	f243 3144 	movw	r1, #13124	; 0x3344
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd f8f0 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_QuickStop_dT, 0);      // Velocity Deceleration - Quick-Stop - Delta t
 80039d8:	2200      	movs	r2, #0
 80039da:	f243 3145 	movw	r1, #13125	; 0x3345
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd f8ea 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(DEV_ErrorReg, 0);      //check Device status - error status
 80039e4:	2200      	movs	r2, #0
 80039e6:	f243 0101 	movw	r1, #12289	; 0x3001
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd f8e4 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(DEV_Status, 0);      //check Device status - status register
 80039f0:	2200      	movs	r2, #0
 80039f2:	f243 0102 	movw	r1, #12290	; 0x3002
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fd f8de 	bl	8000bb8 <_ZN4BG9515ReadDataEnqueueEii>
}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <_ZN4BG9517InitializeCommandEv>:



//---------------------------------------------------------------------------------------------------Commands
void BG95::InitializeCommand()
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	WriteDataEnqueue(DEV_Enable, 0, Disable);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f243 0104 	movw	r1, #12292	; 0x3004
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fc ffe9 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	MandatoryParamEnqueue();
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fe16 	bl	800364c <_ZN4BG9521MandatoryParamEnqueueEv>

	RecommendationParamEnqueue();
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff fec1 	bl	80037a8 <_ZN4BG9526RecommendationParamEnqueueEv>

	BreakManagementEnqueue();
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ff24 	bl	8003874 <_ZN4BG9522BreakManagementEnqueueEv>

	HardwareParamEnqueue();
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff62 	bl	80038f6 <_ZN4BG9520HardwareParamEnqueueEv>

	WriteDataEnqueue(DEV_Cmd, 0, Enable);      // reset error register
 8003a32:	2301      	movs	r3, #1
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7fc ffd6 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Enable, 0, Enable);
 8003a40:	2301      	movs	r3, #1
 8003a42:	2200      	movs	r2, #0
 8003a44:	f243 0104 	movw	r1, #12292	; 0x3004
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7fc ffcf 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>

	WriteDataEnqueue(DEV_Cmd, 0, CMD_Halt); //stop motor
 8003a4e:	2303      	movs	r3, #3
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fc ffc8 	bl	80009ec <_ZN4BG9516WriteDataEnqueueEiii>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>:


//----------------------------------------------------------------------------------------CANOpen(No interrupt)
int HAL_CANTransmit(CAN_HandleTypeDef* hcanx, const CAN_TxHeaderTypeDef *pHeader,
					const uint8_t *aData, uint32_t *pTxMailbox)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
	int state = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
	//uint32_t now_ = HAL_GetTick();
	//uint16_t wait_time_ = CommTimeOut_1ms;

	state =  HAL_CAN_AddTxMessage(hcanx, pHeader, aData, pTxMailbox);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f001 fabf 	bl	8005000 <HAL_CAN_AddTxMessage>
 8003a82:	4603      	mov	r3, r0
 8003a84:	617b      	str	r3, [r7, #20]

	/* Monitor the Tx mailboxes availability until at least one Tx mailbox is free*/
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) != 3);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f001 fb8a 	bl	80051a0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d000      	beq.n	8003a9e <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x3a>
 8003a9c:	e7f3      	b.n	8003a86 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x22>

	//waiting for message to leave
	while((HAL_CAN_IsTxMessagePending((hcanx) , *pTxMailbox)));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f001 fbb0 	bl	800520a <HAL_CAN_IsTxMessagePending>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d000      	beq.n	8003abc <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x58>
 8003aba:	e7f0      	b.n	8003a9e <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x3a>

	//waiting for transmission request to be completed by checking RQCPx
	while( !(hcanx->Instance->TSR & ( 0x1 << (7 * ( (*pTxMailbox) - 1 )))));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6899      	ldr	r1, [r3, #8]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	3b07      	subs	r3, #7
 8003ace:	2201      	movs	r2, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d000      	beq.n	8003ae6 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x82>
 8003ae4:	e7ea      	b.n	8003abc <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm+0x58>

	return state;
 8003ae6:	697b      	ldr	r3, [r7, #20]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>:

int HAL_CANReceive(CAN_HandleTypeDef *hcanx, CAN_RxHeaderTypeDef *pHeader, uint8_t *aData)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
	int state = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
	uint32_t now_= HAL_GetTick();
 8003b00:	f001 f8c6 	bl	8004c90 <HAL_GetTick>
 8003b04:	61b8      	str	r0, [r7, #24]
	//uint16_t wait_time_ = CommTimeOut_1ms;
	uint16_t wait_time_ = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	82fb      	strh	r3, [r7, #22]
	while(1)
	{
		/* Monitoring queue until at least one message is received */
		if(HAL_CAN_GetRxFifoFillLevel(hcanx, CAN_RX_FIFO0) >= 1)
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f001 fcb2 	bl	8005476 <HAL_CAN_GetRxFifoFillLevel>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh+0x44>
		{
			state = HAL_CAN_GetRxMessage(hcanx, CAN_RX_FIFO0, pHeader, aData);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	2100      	movs	r1, #0
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f001 fb92 	bl	8005252 <HAL_CAN_GetRxMessage>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	61fb      	str	r3, [r7, #28]
			break;
 8003b32:	e00e      	b.n	8003b52 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh+0x62>
		}

		/*for TimeOut*/
		if((HAL_GetTick() - now_) >= wait_time_)
 8003b34:	f001 f8ac 	bl	8004c90 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	1ad2      	subs	r2, r2, r3
 8003b3e:	8afb      	ldrh	r3, [r7, #22]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf2c      	ite	cs
 8003b44:	2301      	movcs	r3, #1
 8003b46:	2300      	movcc	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0dd      	beq.n	8003b0a <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh+0x1a>
		{
			state = HAL_TIMEOUT; break;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	61fb      	str	r3, [r7, #28]
		}
	}
	return state;
 8003b52:	69fb      	ldr	r3, [r7, #28]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	; 0x30
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	f107 0214 	add.w	r2, r7, #20
 8003b74:	2100      	movs	r1, #0
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f001 fb6b 	bl	8005252 <HAL_CAN_GetRxMessage>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
  {
    /* Reception Error */
   // Error_Handler();
  }
}
 8003b80:	bf00      	nop
 8003b82:	3730      	adds	r7, #48	; 0x30
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b8c:	f3bf 8f4f 	dsb	sy
}
 8003b90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b92:	f3bf 8f6f 	isb	sy
}
 8003b96:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003b98:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <SCB_EnableICache+0x48>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba0:	f3bf 8f4f 	dsb	sy
}
 8003ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ba6:	f3bf 8f6f 	isb	sy
}
 8003baa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <SCB_EnableICache+0x48>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <SCB_EnableICache+0x48>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bb8:	f3bf 8f4f 	dsb	sy
}
 8003bbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bbe:	f3bf 8f6f 	isb	sy
}
 8003bc2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003bda:	4b25      	ldr	r3, [pc, #148]	; (8003c70 <SCB_EnableDCache+0x9c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003be2:	f3bf 8f4f 	dsb	sy
}
 8003be6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <SCB_EnableDCache+0x9c>)
 8003bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bee:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0b5b      	lsrs	r3, r3, #13
 8003bf4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bf8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	08db      	lsrs	r3, r3, #3
 8003bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c02:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003c0c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8003c12:	4917      	ldr	r1, [pc, #92]	; (8003c70 <SCB_EnableDCache+0x9c>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	1e5a      	subs	r2, r3, #1
 8003c1e:	60ba      	str	r2, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf14      	ite	ne
 8003c24:	2301      	movne	r3, #1
 8003c26:	2300      	moveq	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d000      	beq.n	8003c30 <SCB_EnableDCache+0x5c>
      do {
 8003c2e:	e7e9      	b.n	8003c04 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	60fa      	str	r2, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	bf14      	ite	ne
 8003c3a:	2301      	movne	r3, #1
 8003c3c:	2300      	moveq	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d000      	beq.n	8003c46 <SCB_EnableDCache+0x72>
    do {
 8003c44:	e7d9      	b.n	8003bfa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c46:	f3bf 8f4f 	dsb	sy
}
 8003c4a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003c4c:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <SCB_EnableDCache+0x9c>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <SCB_EnableDCache+0x9c>)
 8003c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c56:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c58:	f3bf 8f4f 	dsb	sy
}
 8003c5c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c5e:	f3bf 8f6f 	isb	sy
}
 8003c62:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b0ac      	sub	sp, #176	; 0xb0
 8003c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8003c7a:	f7ff ff85 	bl	8003b88 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8003c7e:	f7ff ffa9 	bl	8003bd4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c82:	f000 ffe4 	bl	8004c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c86:	f000 f827 	bl	8003cd8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c8a:	f000 fa8d 	bl	80041a8 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8003c8e:	f000 f89f 	bl	8003dd0 <_ZL12MX_CAN1_Initv>
  MX_FMC_Init();
 8003c92:	f000 fa21 	bl	80040d8 <_ZL11MX_FMC_Initv>
  MX_UART4_Init();
 8003c96:	f000 f917 	bl	8003ec8 <_ZL13MX_UART4_Initv>
  MX_USART1_UART_Init();
 8003c9a:	f000 f97f 	bl	8003f9c <_ZL19MX_USART1_UART_Initv>
  MX_USART3_UART_Init();
 8003c9e:	f000 f9b1 	bl	8004004 <_ZL19MX_USART3_UART_Initv>
  MX_USART6_UART_Init();
 8003ca2:	f000 f9e3 	bl	800406c <_ZL19MX_USART6_UART_Initv>
  MX_UART5_Init();
 8003ca6:	f000 f943 	bl	8003f30 <_ZL13MX_UART5_Initv>
  MX_TIM7_Init();
 8003caa:	f000 f8cd 	bl	8003e48 <_ZL12MX_TIM7_Initv>

  /* USER CODE BEGIN 2 */
  /*Constructor*/
  BG95 lift_motor(&hcan1, 127);
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	227f      	movs	r2, #127	; 0x7f
 8003cb2:	4908      	ldr	r1, [pc, #32]	; (8003cd4 <main+0x60>)
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fc91 	bl	80005dc <_ZN4BG95C1EP19__CAN_HandleTypeDefi>

  lift_motor.Initialization();
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd fc99 	bl	80015f4 <_ZN4BG9514InitializationEv>
  while (1)
  {
    /* USER CODE END WHILE */
	  //lift_motor.VelCommand(300, 100, 100);

	  lift_motor.Drive();
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd fca9 	bl	800161c <_ZN4BG955DriveEv>

	  HAL_Delay(1);
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f000 ffec 	bl	8004ca8 <HAL_Delay>
	  lift_motor.Drive();
 8003cd0:	e7f7      	b.n	8003cc2 <main+0x4e>
 8003cd2:	bf00      	nop
 8003cd4:	2000008c 	.word	0x2000008c

08003cd8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b094      	sub	sp, #80	; 0x50
 8003cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cde:	f107 0320 	add.w	r3, r7, #32
 8003ce2:	2230      	movs	r2, #48	; 0x30
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 ff7e 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfc:	4b32      	ldr	r3, [pc, #200]	; (8003dc8 <_Z18SystemClock_Configv+0xf0>)
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <_Z18SystemClock_Configv+0xf0>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6413      	str	r3, [r2, #64]	; 0x40
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <_Z18SystemClock_Configv+0xf0>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <_Z18SystemClock_Configv+0xf4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <_Z18SystemClock_Configv+0xf4>)
 8003d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <_Z18SystemClock_Configv+0xf4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d28:	607b      	str	r3, [r7, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d36:	2302      	movs	r3, #2
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003d40:	2319      	movs	r3, #25
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003d44:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d52:	f107 0320 	add.w	r3, r7, #32
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 f96e 	bl	8006038 <HAL_RCC_OscConfig>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8003d6c:	f000 fb1c 	bl	80043a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d70:	f002 f912 	bl	8005f98 <HAL_PWREx_EnableOverDrive>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8003d84:	f000 fb10 	bl	80043a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d88:	230f      	movs	r3, #15
 8003d8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003da0:	f107 030c 	add.w	r3, r7, #12
 8003da4:	2107      	movs	r1, #7
 8003da6:	4618      	mov	r0, r3
 8003da8:	f002 fbea 	bl	8006580 <HAL_RCC_ClockConfig>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf14      	ite	ne
 8003db2:	2301      	movne	r3, #1
 8003db4:	2300      	moveq	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003dbc:	f000 faf4 	bl	80043a8 <Error_Handler>
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3750      	adds	r7, #80	; 0x50
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40007000 	.word	0x40007000

08003dd0 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <_ZL12MX_CAN1_Initv+0x74>)
 8003dd8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8003dda:	4b19      	ldr	r3, [pc, #100]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003ddc:	220c      	movs	r2, #12
 8003dde:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003dee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003df2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003df6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dfa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003e08:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003e0e:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003e20:	4807      	ldr	r0, [pc, #28]	; (8003e40 <_ZL12MX_CAN1_Initv+0x70>)
 8003e22:	f000 ff65 	bl	8004cf0 <HAL_CAN_Init>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <_ZL12MX_CAN1_Initv+0x6a>
  {
    Error_Handler();
 8003e36:	f000 fab7 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	2000008c 	.word	0x2000008c
 8003e44:	40006400 	.word	0x40006400

08003e48 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ec4 <_ZL12MX_TIM7_Initv+0x7c>)
 8003e5c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e60:	226b      	movs	r2, #107	; 0x6b
 8003e62:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e6c:	2263      	movs	r2, #99	; 0x63
 8003e6e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003e76:	4812      	ldr	r0, [pc, #72]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e78:	f003 f9d2 	bl	8007220 <HAL_TIM_Base_Init>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8003e8c:	f000 fa8c 	bl	80043a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e90:	2300      	movs	r3, #0
 8003e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4808      	ldr	r0, [pc, #32]	; (8003ec0 <_ZL12MX_TIM7_Initv+0x78>)
 8003e9e:	f003 fc77 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8003eb2:	f000 fa79 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200000b4 	.word	0x200000b4
 8003ec4:	40001400 	.word	0x40001400

08003ec8 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <_ZL13MX_UART4_Initv+0x64>)
 8003ed0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ed8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003ee6:	4b10      	ldr	r3, [pc, #64]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003eee:	220c      	movs	r2, #12
 8003ef0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003f0a:	4807      	ldr	r0, [pc, #28]	; (8003f28 <_ZL13MX_UART4_Initv+0x60>)
 8003f0c:	f003 fcec 	bl	80078e8 <HAL_UART_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	bf14      	ite	ne
 8003f16:	2301      	movne	r3, #1
 8003f18:	2300      	moveq	r3, #0
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <_ZL13MX_UART4_Initv+0x5c>
  {
    Error_Handler();
 8003f20:	f000 fa42 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000100 	.word	0x20000100
 8003f2c:	40004c00 	.word	0x40004c00

08003f30 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003f34:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f36:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <_ZL13MX_UART5_Initv+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f48:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f5a:	220c      	movs	r2, #12
 8003f5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003f76:	4807      	ldr	r0, [pc, #28]	; (8003f94 <_ZL13MX_UART5_Initv+0x64>)
 8003f78:	f003 fcb6 	bl	80078e8 <HAL_UART_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <_ZL13MX_UART5_Initv+0x60>
  {
    Error_Handler();
 8003f8c:	f000 fa0c 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000188 	.word	0x20000188
 8003f98:	40005000 	.word	0x40005000

08003f9c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <_ZL19MX_USART1_UART_Initv+0x64>)
 8003fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fd2:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fde:	4807      	ldr	r0, [pc, #28]	; (8003ffc <_ZL19MX_USART1_UART_Initv+0x60>)
 8003fe0:	f003 fc82 	bl	80078e8 <HAL_UART_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf14      	ite	ne
 8003fea:	2301      	movne	r3, #1
 8003fec:	2300      	moveq	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003ff4:	f000 f9d8 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000210 	.word	0x20000210
 8004000:	40011000 	.word	0x40011000

08004004 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <_ZL19MX_USART3_UART_Initv+0x64>)
 800400c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 800401e:	2200      	movs	r2, #0
 8004020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004024:	2200      	movs	r2, #0
 8004026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 800402a:	220c      	movs	r2, #12
 800402c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004030:	2200      	movs	r2, #0
 8004032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 800403c:	2200      	movs	r2, #0
 800403e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004042:	2200      	movs	r2, #0
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004046:	4807      	ldr	r0, [pc, #28]	; (8004064 <_ZL19MX_USART3_UART_Initv+0x60>)
 8004048:	f003 fc4e 	bl	80078e8 <HAL_UART_Init>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 800405c:	f000 f9a4 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000298 	.word	0x20000298
 8004068:	40004800 	.word	0x40004800

0800406c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004070:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 8004072:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <_ZL19MX_USART6_UART_Initv+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 8004078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800407c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 800407e:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 8004080:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004084:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 8004088:	2200      	movs	r2, #0
 800408a:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 800408e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004092:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 8004096:	220c      	movs	r2, #12
 8004098:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 800409c:	2200      	movs	r2, #0
 800409e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80040b2:	4807      	ldr	r0, [pc, #28]	; (80040d0 <_ZL19MX_USART6_UART_Initv+0x64>)
 80040b4:	f003 fc18 	bl	80078e8 <HAL_UART_Init>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <_ZL19MX_USART6_UART_Initv+0x60>
  {
    Error_Handler();
 80040c8:	f000 f96e 	bl	80043a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000320 	.word	0x20000320
 80040d4:	40011400 	.word	0x40011400

080040d8 <_ZL11MX_FMC_Initv>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
 80040ec:	615a      	str	r2, [r3, #20]
 80040ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 80040f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80040f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 80040fa:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <_ZL11MX_FMC_Initv+0xcc>)
 80040fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 800410a:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 800410c:	2204      	movs	r2, #4
 800410e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004110:	4b23      	ldr	r3, [pc, #140]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004112:	2210      	movs	r2, #16
 8004114:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8004116:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8004122:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004124:	2200      	movs	r2, #0
 8004126:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 800412a:	2200      	movs	r2, #0
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004130:	2200      	movs	r2, #0
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004136:	2200      	movs	r2, #0
 8004138:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800413a:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8004140:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004142:	2200      	movs	r2, #0
 8004144:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004148:	2200      	movs	r2, #0
 800414a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 800414c:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 800414e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 8004156:	2200      	movs	r2, #0
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 800415a:	2305      	movs	r3, #5
 800415c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800415e:	230f      	movs	r3, #15
 8004160:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8004162:	2304      	movs	r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8004166:	2304      	movs	r3, #4
 8004168:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800416a:	2310      	movs	r3, #16
 800416c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800416e:	2311      	movs	r3, #17
 8004170:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	2200      	movs	r2, #0
 800417a:	4619      	mov	r1, r3
 800417c:	4808      	ldr	r0, [pc, #32]	; (80041a0 <_ZL11MX_FMC_Initv+0xc8>)
 800417e:	f003 f807 	bl	8007190 <HAL_SRAM_Init>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <_ZL11MX_FMC_Initv+0xbe>
  {
    Error_Handler( );
 8004192:	f000 f909 	bl	80043a8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8004196:	bf00      	nop
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200003a8 	.word	0x200003a8
 80041a4:	a0000104 	.word	0xa0000104

080041a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08e      	sub	sp, #56	; 0x38
 80041ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	609a      	str	r2, [r3, #8]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041be:	4b6b      	ldr	r3, [pc, #428]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a6a      	ldr	r2, [pc, #424]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041c4:	f043 0310 	orr.w	r3, r3, #16
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b68      	ldr	r3, [pc, #416]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4a64      	ldr	r2, [pc, #400]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041dc:	f043 0304 	orr.w	r3, r3, #4
 80041e0:	6313      	str	r3, [r2, #48]	; 0x30
 80041e2:	4b62      	ldr	r3, [pc, #392]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041ee:	4b5f      	ldr	r3, [pc, #380]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	4a5e      	ldr	r2, [pc, #376]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041f4:	f043 0320 	orr.w	r3, r3, #32
 80041f8:	6313      	str	r3, [r2, #48]	; 0x30
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	61bb      	str	r3, [r7, #24]
 8004204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004206:	4b59      	ldr	r3, [pc, #356]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	4a58      	ldr	r2, [pc, #352]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b56      	ldr	r3, [pc, #344]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800421e:	4b53      	ldr	r3, [pc, #332]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a52      	ldr	r2, [pc, #328]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b50      	ldr	r3, [pc, #320]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004236:	4b4d      	ldr	r3, [pc, #308]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4a4c      	ldr	r2, [pc, #304]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 800423c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004240:	6313      	str	r3, [r2, #48]	; 0x30
 8004242:	4b4a      	ldr	r3, [pc, #296]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800424e:	4b47      	ldr	r3, [pc, #284]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a46      	ldr	r2, [pc, #280]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004254:	f043 0308 	orr.w	r3, r3, #8
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b44      	ldr	r3, [pc, #272]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a40      	ldr	r2, [pc, #256]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	4b3e      	ldr	r3, [pc, #248]	; (800436c <_ZL12MX_GPIO_Initv+0x1c4>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 800427e:	2200      	movs	r2, #0
 8004280:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8004284:	483a      	ldr	r0, [pc, #232]	; (8004370 <_ZL12MX_GPIO_Initv+0x1c8>)
 8004286:	f001 fe6d 	bl	8005f64 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 800428a:	2200      	movs	r2, #0
 800428c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004290:	4838      	ldr	r0, [pc, #224]	; (8004374 <_ZL12MX_GPIO_Initv+0x1cc>)
 8004292:	f001 fe67 	bl	8005f64 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8004296:	2200      	movs	r2, #0
 8004298:	f44f 7140 	mov.w	r1, #768	; 0x300
 800429c:	4836      	ldr	r0, [pc, #216]	; (8004378 <_ZL12MX_GPIO_Initv+0x1d0>)
 800429e:	f001 fe61 	bl	8005f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 80042a2:	237f      	movs	r3, #127	; 0x7f
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b2:	4619      	mov	r1, r3
 80042b4:	4831      	ldr	r0, [pc, #196]	; (800437c <_ZL12MX_GPIO_Initv+0x1d4>)
 80042b6:	f001 fca9 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 80042ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042c0:	2300      	movs	r3, #0
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042cc:	4619      	mov	r1, r3
 80042ce:	482a      	ldr	r0, [pc, #168]	; (8004378 <_ZL12MX_GPIO_Initv+0x1d0>)
 80042d0:	f001 fc9c 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 80042d4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042da:	2301      	movs	r3, #1
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e2:	2300      	movs	r3, #0
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ea:	4619      	mov	r1, r3
 80042ec:	4820      	ldr	r0, [pc, #128]	; (8004370 <_ZL12MX_GPIO_Initv+0x1c8>)
 80042ee:	f001 fc8d 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 80042f2:	f240 33c7 	movw	r3, #967	; 0x3c7
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f8:	2301      	movs	r3, #1
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004300:	2300      	movs	r3, #0
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004308:	4619      	mov	r1, r3
 800430a:	481a      	ldr	r0, [pc, #104]	; (8004374 <_ZL12MX_GPIO_Initv+0x1cc>)
 800430c:	f001 fc7e 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8004310:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004316:	2300      	movs	r3, #0
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431a:	2300      	movs	r3, #0
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800431e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004322:	4619      	mov	r1, r3
 8004324:	4816      	ldr	r0, [pc, #88]	; (8004380 <_ZL12MX_GPIO_Initv+0x1d8>)
 8004326:	f001 fc71 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 800432a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004330:	2301      	movs	r3, #1
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004338:	2300      	movs	r3, #0
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800433c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004340:	4619      	mov	r1, r3
 8004342:	480d      	ldr	r0, [pc, #52]	; (8004378 <_ZL12MX_GPIO_Initv+0x1d0>)
 8004344:	f001 fc62 	bl	8005c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8004348:	2320      	movs	r3, #32
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434c:	2301      	movs	r3, #1
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004354:	2302      	movs	r3, #2
 8004356:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800435c:	4619      	mov	r1, r3
 800435e:	4805      	ldr	r0, [pc, #20]	; (8004374 <_ZL12MX_GPIO_Initv+0x1cc>)
 8004360:	f001 fc54 	bl	8005c0c <HAL_GPIO_Init>

}
 8004364:	bf00      	nop
 8004366:	3738      	adds	r7, #56	; 0x38
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	40021400 	.word	0x40021400
 8004374:	40020400 	.word	0x40020400
 8004378:	40020800 	.word	0x40020800
 800437c:	40021000 	.word	0x40021000
 8004380:	40021800 	.word	0x40021800

08004384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d101      	bne.n	800439a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004396:	f000 fc67 	bl	8004c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40001000 	.word	0x40001000

080043a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043ac:	b672      	cpsid	i
}
 80043ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043b0:	e7fe      	b.n	80043b0 <Error_Handler+0x8>
	...

080043b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_MspInit+0x44>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <HAL_MspInit+0x44>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6413      	str	r3, [r2, #64]	; 0x40
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_MspInit+0x44>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d2:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_MspInit+0x44>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <HAL_MspInit+0x44>)
 80043d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043dc:	6453      	str	r3, [r2, #68]	; 0x44
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_MspInit+0x44>)
 80043e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004404:	f107 0314 	add.w	r3, r7, #20
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_CAN_MspInit+0x8c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d130      	bne.n	8004480 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_CAN_MspInit+0x90>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a1a      	ldr	r2, [pc, #104]	; (800448c <HAL_CAN_MspInit+0x90>)
 8004424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b18      	ldr	r3, [pc, #96]	; (800448c <HAL_CAN_MspInit+0x90>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	4b15      	ldr	r3, [pc, #84]	; (800448c <HAL_CAN_MspInit+0x90>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	4a14      	ldr	r2, [pc, #80]	; (800448c <HAL_CAN_MspInit+0x90>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6313      	str	r3, [r2, #48]	; 0x30
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_CAN_MspInit+0x90>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800444e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	2302      	movs	r3, #2
 8004456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445c:	2303      	movs	r3, #3
 800445e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004460:	2309      	movs	r3, #9
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	4619      	mov	r1, r3
 800446a:	4809      	ldr	r0, [pc, #36]	; (8004490 <HAL_CAN_MspInit+0x94>)
 800446c:	f001 fbce 	bl	8005c0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 8004470:	2200      	movs	r2, #0
 8004472:	2108      	movs	r1, #8
 8004474:	2014      	movs	r0, #20
 8004476:	f001 fb0d 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800447a:	2014      	movs	r0, #20
 800447c:	f001 fb26 	bl	8005acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004480:	bf00      	nop
 8004482:	3728      	adds	r7, #40	; 0x28
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40006400 	.word	0x40006400
 800448c:	40023800 	.word	0x40023800
 8004490:	40020000 	.word	0x40020000

08004494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <HAL_TIM_Base_MspInit+0x44>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d113      	bne.n	80044ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <HAL_TIM_Base_MspInit+0x48>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <HAL_TIM_Base_MspInit+0x48>)
 80044ac:	f043 0320 	orr.w	r3, r3, #32
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_TIM_Base_MspInit+0x48>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 80044be:	2200      	movs	r2, #0
 80044c0:	2107      	movs	r1, #7
 80044c2:	2037      	movs	r0, #55	; 0x37
 80044c4:	f001 fae6 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80044c8:	2037      	movs	r0, #55	; 0x37
 80044ca:	f001 faff 	bl	8005acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40001400 	.word	0x40001400
 80044dc:	40023800 	.word	0x40023800

080044e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b0b4      	sub	sp, #208	; 0xd0
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80044f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044fc:	2284      	movs	r2, #132	; 0x84
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f004 fb71 	bl	8008be8 <memset>
  if(huart->Instance==UART4)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4aa6      	ldr	r2, [pc, #664]	; (80047a4 <HAL_UART_MspInit+0x2c4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d146      	bne.n	800459e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004516:	2300      	movs	r3, #0
 8004518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800451c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004520:	4618      	mov	r0, r3
 8004522:	f002 fa45 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800452c:	f7ff ff3c 	bl	80043a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004530:	4b9d      	ldr	r3, [pc, #628]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a9c      	ldr	r2, [pc, #624]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
 800453c:	4b9a      	ldr	r3, [pc, #616]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
 8004546:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004548:	4b97      	ldr	r3, [pc, #604]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4a96      	ldr	r2, [pc, #600]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	6313      	str	r3, [r2, #48]	; 0x30
 8004554:	4b94      	ldr	r3, [pc, #592]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004560:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004568:	2302      	movs	r3, #2
 800456a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004574:	2303      	movs	r3, #3
 8004576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800457a:	2308      	movs	r3, #8
 800457c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004580:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004584:	4619      	mov	r1, r3
 8004586:	4889      	ldr	r0, [pc, #548]	; (80047ac <HAL_UART_MspInit+0x2cc>)
 8004588:	f001 fb40 	bl	8005c0c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2108      	movs	r1, #8
 8004590:	2034      	movs	r0, #52	; 0x34
 8004592:	f001 fa7f 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004596:	2034      	movs	r0, #52	; 0x34
 8004598:	f001 fa98 	bl	8005acc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800459c:	e15e      	b.n	800485c <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a83      	ldr	r2, [pc, #524]	; (80047b0 <HAL_UART_MspInit+0x2d0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d167      	bne.n	8004678 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80045a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ac:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045b8:	4618      	mov	r0, r3
 80045ba:	f002 f9f9 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80045c4:	f7ff fef0 	bl	80043a8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80045c8:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	4a76      	ldr	r2, [pc, #472]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d2:	6413      	str	r3, [r2, #64]	; 0x40
 80045d4:	4b74      	ldr	r3, [pc, #464]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e0:	4b71      	ldr	r3, [pc, #452]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a70      	ldr	r2, [pc, #448]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	4b6e      	ldr	r3, [pc, #440]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045f8:	4b6b      	ldr	r3, [pc, #428]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	4a6a      	ldr	r2, [pc, #424]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80045fe:	f043 0308 	orr.w	r3, r3, #8
 8004602:	6313      	str	r3, [r2, #48]	; 0x30
 8004604:	4b68      	ldr	r3, [pc, #416]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004618:	2302      	movs	r3, #2
 800461a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004624:	2303      	movs	r3, #3
 8004626:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800462a:	2308      	movs	r3, #8
 800462c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004630:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004634:	4619      	mov	r1, r3
 8004636:	485d      	ldr	r0, [pc, #372]	; (80047ac <HAL_UART_MspInit+0x2cc>)
 8004638:	f001 fae8 	bl	8005c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800463c:	2304      	movs	r3, #4
 800463e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004648:	2300      	movs	r3, #0
 800464a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464e:	2303      	movs	r3, #3
 8004650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004654:	2308      	movs	r3, #8
 8004656:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800465a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800465e:	4619      	mov	r1, r3
 8004660:	4854      	ldr	r0, [pc, #336]	; (80047b4 <HAL_UART_MspInit+0x2d4>)
 8004662:	f001 fad3 	bl	8005c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004666:	2200      	movs	r2, #0
 8004668:	2100      	movs	r1, #0
 800466a:	2035      	movs	r0, #53	; 0x35
 800466c:	f001 fa12 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004670:	2035      	movs	r0, #53	; 0x35
 8004672:	f001 fa2b 	bl	8005acc <HAL_NVIC_EnableIRQ>
}
 8004676:	e0f1      	b.n	800485c <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a4e      	ldr	r2, [pc, #312]	; (80047b8 <HAL_UART_MspInit+0x2d8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d144      	bne.n	800470c <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004686:	2300      	movs	r3, #0
 8004688:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800468a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800468e:	4618      	mov	r0, r3
 8004690:	f002 f98e 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_UART_MspInit+0x1be>
      Error_Handler();
 800469a:	f7ff fe85 	bl	80043a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800469e:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	4a41      	ldr	r2, [pc, #260]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80046a4:	f043 0310 	orr.w	r3, r3, #16
 80046a8:	6453      	str	r3, [r2, #68]	; 0x44
 80046aa:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b6:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6313      	str	r3, [r2, #48]	; 0x30
 80046c2:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80046ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d6:	2302      	movs	r3, #2
 80046d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046e8:	2307      	movs	r3, #7
 80046ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80046f2:	4619      	mov	r1, r3
 80046f4:	4831      	ldr	r0, [pc, #196]	; (80047bc <HAL_UART_MspInit+0x2dc>)
 80046f6:	f001 fa89 	bl	8005c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 80046fa:	2200      	movs	r2, #0
 80046fc:	210e      	movs	r1, #14
 80046fe:	2025      	movs	r0, #37	; 0x25
 8004700:	f001 f9c8 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004704:	2025      	movs	r0, #37	; 0x25
 8004706:	f001 f9e1 	bl	8005acc <HAL_NVIC_EnableIRQ>
}
 800470a:	e0a7      	b.n	800485c <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <HAL_UART_MspInit+0x2e0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d158      	bne.n	80047c8 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004722:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004726:	4618      	mov	r0, r3
 8004728:	f002 f942 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8004732:	f7ff fe39 	bl	80043a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 800473c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <HAL_UART_MspInit+0x2c8>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800476a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476e:	2302      	movs	r3, #2
 8004770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004780:	2307      	movs	r3, #7
 8004782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004786:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800478a:	4619      	mov	r1, r3
 800478c:	480d      	ldr	r0, [pc, #52]	; (80047c4 <HAL_UART_MspInit+0x2e4>)
 800478e:	f001 fa3d 	bl	8005c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8004792:	2200      	movs	r2, #0
 8004794:	2108      	movs	r1, #8
 8004796:	2027      	movs	r0, #39	; 0x27
 8004798:	f001 f97c 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800479c:	2027      	movs	r0, #39	; 0x27
 800479e:	f001 f995 	bl	8005acc <HAL_NVIC_EnableIRQ>
}
 80047a2:	e05b      	b.n	800485c <HAL_UART_MspInit+0x37c>
 80047a4:	40004c00 	.word	0x40004c00
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40020800 	.word	0x40020800
 80047b0:	40005000 	.word	0x40005000
 80047b4:	40020c00 	.word	0x40020c00
 80047b8:	40011000 	.word	0x40011000
 80047bc:	40020000 	.word	0x40020000
 80047c0:	40004800 	.word	0x40004800
 80047c4:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a25      	ldr	r2, [pc, #148]	; (8004864 <HAL_UART_MspInit+0x384>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d144      	bne.n	800485c <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80047d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047e2:	4618      	mov	r0, r3
 80047e4:	f002 f8e4 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_UART_MspInit+0x312>
      Error_Handler();
 80047ee:	f7ff fddb 	bl	80043a8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_UART_MspInit+0x388>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a1c      	ldr	r2, [pc, #112]	; (8004868 <HAL_UART_MspInit+0x388>)
 80047f8:	f043 0320 	orr.w	r3, r3, #32
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <HAL_UART_MspInit+0x388>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800480a:	4b17      	ldr	r3, [pc, #92]	; (8004868 <HAL_UART_MspInit+0x388>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_UART_MspInit+0x388>)
 8004810:	f043 0304 	orr.w	r3, r3, #4
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_UART_MspInit+0x388>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004822:	23c0      	movs	r3, #192	; 0xc0
 8004824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004834:	2303      	movs	r3, #3
 8004836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800483a:	2308      	movs	r3, #8
 800483c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004840:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004844:	4619      	mov	r1, r3
 8004846:	4809      	ldr	r0, [pc, #36]	; (800486c <HAL_UART_MspInit+0x38c>)
 8004848:	f001 f9e0 	bl	8005c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	2108      	movs	r1, #8
 8004850:	2047      	movs	r0, #71	; 0x47
 8004852:	f001 f91f 	bl	8005a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004856:	2047      	movs	r0, #71	; 0x47
 8004858:	f001 f938 	bl	8005acc <HAL_NVIC_EnableIRQ>
}
 800485c:	bf00      	nop
 800485e:	37d0      	adds	r7, #208	; 0xd0
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40011400 	.word	0x40011400
 8004868:	40023800 	.word	0x40023800
 800486c:	40020800 	.word	0x40020800

08004870 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004884:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_FMC_MspInit+0xa4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d13e      	bne.n	800490a <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 800488c:	4b21      	ldr	r3, [pc, #132]	; (8004914 <HAL_FMC_MspInit+0xa4>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_FMC_MspInit+0xa8>)
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	4a20      	ldr	r2, [pc, #128]	; (8004918 <HAL_FMC_MspInit+0xa8>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6393      	str	r3, [r2, #56]	; 0x38
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <HAL_FMC_MspInit+0xa8>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80048aa:	2307      	movs	r3, #7
 80048ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	2302      	movs	r3, #2
 80048b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b6:	2303      	movs	r3, #3
 80048b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048ba:	230c      	movs	r3, #12
 80048bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4816      	ldr	r0, [pc, #88]	; (800491c <HAL_FMC_MspInit+0xac>)
 80048c4:	f001 f9a2 	bl	8005c0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80048c8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80048cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ce:	2302      	movs	r3, #2
 80048d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d6:	2303      	movs	r3, #3
 80048d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048da:	230c      	movs	r3, #12
 80048dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048de:	1d3b      	adds	r3, r7, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	480f      	ldr	r0, [pc, #60]	; (8004920 <HAL_FMC_MspInit+0xb0>)
 80048e4:	f001 f992 	bl	8005c0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80048e8:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80048ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ee:	2302      	movs	r3, #2
 80048f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048fa:	230c      	movs	r3, #12
 80048fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	4619      	mov	r1, r3
 8004902:	4808      	ldr	r0, [pc, #32]	; (8004924 <HAL_FMC_MspInit+0xb4>)
 8004904:	f001 f982 	bl	8005c0c <HAL_GPIO_Init>
 8004908:	e000      	b.n	800490c <HAL_FMC_MspInit+0x9c>
    return;
 800490a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200003f4 	.word	0x200003f4
 8004918:	40023800 	.word	0x40023800
 800491c:	40021400 	.word	0x40021400
 8004920:	40021000 	.word	0x40021000
 8004924:	40020c00 	.word	0x40020c00

08004928 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004930:	f7ff ff9e 	bl	8004870 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	; 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_InitTick+0xe0>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	4a32      	ldr	r2, [pc, #200]	; (8004a1c <HAL_InitTick+0xe0>)
 8004952:	f043 0310 	orr.w	r3, r3, #16
 8004956:	6413      	str	r3, [r2, #64]	; 0x40
 8004958:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <HAL_InitTick+0xe0>)
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004964:	f107 0210 	add.w	r2, r7, #16
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f001 ffec 	bl	800694c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800497e:	f001 ffbd 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8004982:	6378      	str	r0, [r7, #52]	; 0x34
 8004984:	e004      	b.n	8004990 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004986:	f001 ffb9 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 800498a:	4603      	mov	r3, r0
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	4a23      	ldr	r2, [pc, #140]	; (8004a20 <HAL_InitTick+0xe4>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	0c9b      	lsrs	r3, r3, #18
 800499a:	3b01      	subs	r3, #1
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800499e:	4b21      	ldr	r3, [pc, #132]	; (8004a24 <HAL_InitTick+0xe8>)
 80049a0:	4a21      	ldr	r2, [pc, #132]	; (8004a28 <HAL_InitTick+0xec>)
 80049a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_InitTick+0xe8>)
 80049a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80049ac:	4a1d      	ldr	r2, [pc, #116]	; (8004a24 <HAL_InitTick+0xe8>)
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80049b2:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_InitTick+0xe8>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_InitTick+0xe8>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049be:	4b19      	ldr	r3, [pc, #100]	; (8004a24 <HAL_InitTick+0xe8>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80049c4:	4817      	ldr	r0, [pc, #92]	; (8004a24 <HAL_InitTick+0xe8>)
 80049c6:	f002 fc2b 	bl	8007220 <HAL_TIM_Base_Init>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80049d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11b      	bne.n	8004a10 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80049d8:	4812      	ldr	r0, [pc, #72]	; (8004a24 <HAL_InitTick+0xe8>)
 80049da:	f002 fc79 	bl	80072d0 <HAL_TIM_Base_Start_IT>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80049e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d111      	bne.n	8004a10 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049ec:	2036      	movs	r0, #54	; 0x36
 80049ee:	f001 f86d 	bl	8005acc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b0f      	cmp	r3, #15
 80049f6:	d808      	bhi.n	8004a0a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80049f8:	2200      	movs	r2, #0
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	2036      	movs	r0, #54	; 0x36
 80049fe:	f001 f849 	bl	8005a94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a02:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <HAL_InitTick+0xf0>)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	e002      	b.n	8004a10 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004a10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3738      	adds	r7, #56	; 0x38
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	431bde83 	.word	0x431bde83
 8004a24:	200003f8 	.word	0x200003f8
 8004a28:	40001000 	.word	0x40001000
 8004a2c:	20000004 	.word	0x20000004

08004a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a34:	e7fe      	b.n	8004a34 <NMI_Handler+0x4>

08004a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a3a:	e7fe      	b.n	8004a3a <HardFault_Handler+0x4>

08004a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a40:	e7fe      	b.n	8004a40 <MemManage_Handler+0x4>

08004a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a46:	e7fe      	b.n	8004a46 <BusFault_Handler+0x4>

08004a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a4c:	e7fe      	b.n	8004a4c <UsageFault_Handler+0x4>

08004a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a8c:	4802      	ldr	r0, [pc, #8]	; (8004a98 <CAN1_RX0_IRQHandler+0x10>)
 8004a8e:	f000 fd1a 	bl	80054c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	2000008c 	.word	0x2000008c

08004a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004aa0:	4802      	ldr	r0, [pc, #8]	; (8004aac <USART1_IRQHandler+0x10>)
 8004aa2:	f002 ff6f 	bl	8007984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000210 	.word	0x20000210

08004ab0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ab4:	4802      	ldr	r0, [pc, #8]	; (8004ac0 <USART3_IRQHandler+0x10>)
 8004ab6:	f002 ff65 	bl	8007984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004aba:	bf00      	nop
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000298 	.word	0x20000298

08004ac4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004ac8:	4802      	ldr	r0, [pc, #8]	; (8004ad4 <UART4_IRQHandler+0x10>)
 8004aca:	f002 ff5b 	bl	8007984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000100 	.word	0x20000100

08004ad8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <UART5_IRQHandler+0x10>)
 8004ade:	f002 ff51 	bl	8007984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000188 	.word	0x20000188

08004aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <TIM6_DAC_IRQHandler+0x10>)
 8004af2:	f002 fc65 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	200003f8 	.word	0x200003f8

08004b00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004b04:	4802      	ldr	r0, [pc, #8]	; (8004b10 <TIM7_IRQHandler+0x10>)
 8004b06:	f002 fc5b 	bl	80073c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	200000b4 	.word	0x200000b4

08004b14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004b18:	4802      	ldr	r0, [pc, #8]	; (8004b24 <USART6_IRQHandler+0x10>)
 8004b1a:	f002 ff33 	bl	8007984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000320 	.word	0x20000320

08004b28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return 1;
 8004b2c:	2301      	movs	r3, #1
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_kill>:

int _kill(int pid, int sig)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b42:	f003 fffd 	bl	8008b40 <__errno>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2216      	movs	r2, #22
 8004b4a:	601a      	str	r2, [r3, #0]
  return -1;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <_exit>:

void _exit (int status)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ffe7 	bl	8004b38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b6a:	e7fe      	b.n	8004b6a <_exit+0x12>

08004b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <_sbrk+0x5c>)
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <_sbrk+0x60>)
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b80:	4b13      	ldr	r3, [pc, #76]	; (8004bd0 <_sbrk+0x64>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <_sbrk+0x64>)
 8004b8a:	4a12      	ldr	r2, [pc, #72]	; (8004bd4 <_sbrk+0x68>)
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <_sbrk+0x64>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d207      	bcs.n	8004bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b9c:	f003 ffd0 	bl	8008b40 <__errno>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	220c      	movs	r2, #12
 8004ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004baa:	e009      	b.n	8004bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <_sbrk+0x64>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <_sbrk+0x64>)
 8004bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20050000 	.word	0x20050000
 8004bcc:	00004000 	.word	0x00004000
 8004bd0:	20000444 	.word	0x20000444
 8004bd4:	20000460 	.word	0x20000460

08004bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <SystemInit+0x20>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <SystemInit+0x20>)
 8004be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c00:	480d      	ldr	r0, [pc, #52]	; (8004c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c02:	490e      	ldr	r1, [pc, #56]	; (8004c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c04:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c08:	e002      	b.n	8004c10 <LoopCopyDataInit>

08004c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c0e:	3304      	adds	r3, #4

08004c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c14:	d3f9      	bcc.n	8004c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c16:	4a0b      	ldr	r2, [pc, #44]	; (8004c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c18:	4c0b      	ldr	r4, [pc, #44]	; (8004c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c1c:	e001      	b.n	8004c22 <LoopFillZerobss>

08004c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c20:	3204      	adds	r2, #4

08004c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c24:	d3fb      	bcc.n	8004c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c26:	f7ff ffd7 	bl	8004bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c2a:	f003 ff8f 	bl	8008b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c2e:	f7ff f821 	bl	8003c74 <main>
  bx  lr    
 8004c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004c40:	08008ef8 	.word	0x08008ef8
  ldr r2, =_sbss
 8004c44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004c48:	20000460 	.word	0x20000460

08004c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c4c:	e7fe      	b.n	8004c4c <ADC_IRQHandler>

08004c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c52:	2003      	movs	r0, #3
 8004c54:	f000 ff13 	bl	8005a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c58:	200f      	movs	r0, #15
 8004c5a:	f7ff fe6f 	bl	800493c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c5e:	f7ff fba9 	bl	80043b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_IncTick+0x20>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_IncTick+0x24>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4413      	add	r3, r2
 8004c78:	4a04      	ldr	r2, [pc, #16]	; (8004c8c <HAL_IncTick+0x24>)
 8004c7a:	6013      	str	r3, [r2, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000008 	.word	0x20000008
 8004c8c:	20000448 	.word	0x20000448

08004c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return uwTick;
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_GetTick+0x14>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000448 	.word	0x20000448

08004ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cb0:	f7ff ffee 	bl	8004c90 <HAL_GetTick>
 8004cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc0:	d005      	beq.n	8004cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <HAL_Delay+0x44>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cce:	bf00      	nop
 8004cd0:	f7ff ffde 	bl	8004c90 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d8f7      	bhi.n	8004cd0 <HAL_Delay+0x28>
  {
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000008 	.word	0x20000008

08004cf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0ed      	b.n	8004ede <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fb74 	bl	80043fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d24:	f7ff ffb4 	bl	8004c90 <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d2a:	e012      	b.n	8004d52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d2c:	f7ff ffb0 	bl	8004c90 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d90b      	bls.n	8004d52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2205      	movs	r2, #5
 8004d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e0c5      	b.n	8004ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0e5      	beq.n	8004d2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0202 	bic.w	r2, r2, #2
 8004d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d70:	f7ff ff8e 	bl	8004c90 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d76:	e012      	b.n	8004d9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d78:	f7ff ff8a 	bl	8004c90 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b0a      	cmp	r3, #10
 8004d84:	d90b      	bls.n	8004d9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2205      	movs	r2, #5
 8004d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e09f      	b.n	8004ede <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e5      	bne.n	8004d78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	7e1b      	ldrb	r3, [r3, #24]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d108      	bne.n	8004dc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e007      	b.n	8004dd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7e5b      	ldrb	r3, [r3, #25]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d108      	bne.n	8004df0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e007      	b.n	8004e00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	7e9b      	ldrb	r3, [r3, #26]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d108      	bne.n	8004e1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0220 	orr.w	r2, r2, #32
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e007      	b.n	8004e2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0220 	bic.w	r2, r2, #32
 8004e28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	7edb      	ldrb	r3, [r3, #27]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d108      	bne.n	8004e44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0210 	bic.w	r2, r2, #16
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	e007      	b.n	8004e54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0210 	orr.w	r2, r2, #16
 8004e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	7f1b      	ldrb	r3, [r3, #28]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d108      	bne.n	8004e6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	e007      	b.n	8004e7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0208 	bic.w	r2, r2, #8
 8004e7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	7f5b      	ldrb	r3, [r3, #29]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d108      	bne.n	8004e98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0204 	orr.w	r2, r2, #4
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e007      	b.n	8004ea8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	ea42 0103 	orr.w	r1, r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d12e      	bne.n	8004f58 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0201 	bic.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f12:	f7ff febd 	bl	8004c90 <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f18:	e012      	b.n	8004f40 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f1a:	f7ff feb9 	bl	8004c90 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b0a      	cmp	r3, #10
 8004f26:	d90b      	bls.n	8004f40 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2205      	movs	r2, #5
 8004f38:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e012      	b.n	8004f66 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e5      	bne.n	8004f1a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e006      	b.n	8004f66 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d133      	bne.n	8004fea <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f92:	f7ff fe7d 	bl	8004c90 <HAL_GetTick>
 8004f96:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004f98:	e012      	b.n	8004fc0 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f9a:	f7ff fe79 	bl	8004c90 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b0a      	cmp	r3, #10
 8004fa6:	d90b      	bls.n	8004fc0 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e01b      	b.n	8004ff8 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0e5      	beq.n	8004f9a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0202 	bic.w	r2, r2, #2
 8004fdc:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e006      	b.n	8004ff8 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	; 0x24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005014:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800501e:	7ffb      	ldrb	r3, [r7, #31]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d003      	beq.n	800502c <HAL_CAN_AddTxMessage+0x2c>
 8005024:	7ffb      	ldrb	r3, [r7, #31]
 8005026:	2b02      	cmp	r3, #2
 8005028:	f040 80ad 	bne.w	8005186 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8095 	beq.w	8005176 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	0e1b      	lsrs	r3, r3, #24
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005056:	2201      	movs	r2, #1
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	409a      	lsls	r2, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10d      	bne.n	8005084 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	6809      	ldr	r1, [r1, #0]
 8005076:	431a      	orrs	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3318      	adds	r3, #24
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	440b      	add	r3, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e00f      	b.n	80050a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800508e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005098:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	3318      	adds	r3, #24
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	440b      	add	r3, r1
 80050a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6819      	ldr	r1, [r3, #0]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	3318      	adds	r3, #24
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	440b      	add	r3, r1
 80050b4:	3304      	adds	r3, #4
 80050b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	7d1b      	ldrb	r3, [r3, #20]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d111      	bne.n	80050e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	3318      	adds	r3, #24
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	4413      	add	r3, r2
 80050cc:	3304      	adds	r3, #4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6811      	ldr	r1, [r2, #0]
 80050d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3318      	adds	r3, #24
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	440b      	add	r3, r1
 80050e0:	3304      	adds	r3, #4
 80050e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	3307      	adds	r3, #7
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	061a      	lsls	r2, r3, #24
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3306      	adds	r3, #6
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3305      	adds	r3, #5
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4313      	orrs	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	3204      	adds	r2, #4
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	4610      	mov	r0, r2
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	6811      	ldr	r1, [r2, #0]
 800510c:	ea43 0200 	orr.w	r2, r3, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	440b      	add	r3, r1
 8005116:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800511a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3303      	adds	r3, #3
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	061a      	lsls	r2, r3, #24
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3302      	adds	r3, #2
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3301      	adds	r3, #1
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	4313      	orrs	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	4610      	mov	r0, r2
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	6811      	ldr	r1, [r2, #0]
 8005142:	ea43 0200 	orr.w	r2, r3, r0
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	440b      	add	r3, r1
 800514c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005150:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3318      	adds	r3, #24
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	4413      	add	r3, r2
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	6811      	ldr	r1, [r2, #0]
 8005164:	f043 0201 	orr.w	r2, r3, #1
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	3318      	adds	r3, #24
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	440b      	add	r3, r1
 8005170:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	e00e      	b.n	8005194 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e006      	b.n	8005194 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3724      	adds	r7, #36	; 0x24
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80051b4:	7afb      	ldrb	r3, [r7, #11]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d002      	beq.n	80051c0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d11d      	bne.n	80051fc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80051fc:	68fb      	ldr	r3, [r7, #12]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800521e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8005220:	7afb      	ldrb	r3, [r7, #11]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d002      	beq.n	800522c <HAL_CAN_IsTxMessagePending+0x22>
 8005226:	7afb      	ldrb	r3, [r7, #11]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d10b      	bne.n	8005244 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	069b      	lsls	r3, r3, #26
 8005236:	401a      	ands	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	069b      	lsls	r3, r3, #26
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8005240:	2301      	movs	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8005244:	68fb      	ldr	r3, [r7, #12]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005252:	b480      	push	{r7}
 8005254:	b087      	sub	sp, #28
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005266:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d003      	beq.n	8005276 <HAL_CAN_GetRxMessage+0x24>
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b02      	cmp	r3, #2
 8005272:	f040 80f3 	bne.w	800545c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10e      	bne.n	800529a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d116      	bne.n	80052b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e0e7      	b.n	800546a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d107      	bne.n	80052b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0d8      	b.n	800546a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	331b      	adds	r3, #27
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4413      	add	r3, r2
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0204 	and.w	r2, r3, #4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10c      	bne.n	80052f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	331b      	adds	r3, #27
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4413      	add	r3, r2
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	0d5b      	lsrs	r3, r3, #21
 80052e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e00b      	b.n	8005308 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	331b      	adds	r3, #27
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	4413      	add	r3, r2
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	08db      	lsrs	r3, r3, #3
 8005300:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	331b      	adds	r3, #27
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	4413      	add	r3, r2
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0202 	and.w	r2, r3, #2
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	331b      	adds	r3, #27
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	4413      	add	r3, r2
 800532a:	3304      	adds	r3, #4
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 020f 	and.w	r2, r3, #15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	331b      	adds	r3, #27
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	4413      	add	r3, r2
 8005342:	3304      	adds	r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	0a1b      	lsrs	r3, r3, #8
 8005348:	b2da      	uxtb	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	331b      	adds	r3, #27
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	4413      	add	r3, r2
 800535a:	3304      	adds	r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	4413      	add	r3, r2
 8005370:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	4413      	add	r3, r2
 8005386:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	0a1a      	lsrs	r2, r3, #8
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	4413      	add	r3, r2
 80053a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	0c1a      	lsrs	r2, r3, #16
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	3302      	adds	r3, #2
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	0e1a      	lsrs	r2, r3, #24
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	3303      	adds	r3, #3
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	3304      	adds	r3, #4
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	0a1a      	lsrs	r2, r3, #8
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	3305      	adds	r3, #5
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4413      	add	r3, r2
 8005406:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	0c1a      	lsrs	r2, r3, #16
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	3306      	adds	r3, #6
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	0e1a      	lsrs	r2, r3, #24
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	3307      	adds	r3, #7
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d108      	bne.n	8005448 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0220 	orr.w	r2, r2, #32
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	e007      	b.n	8005458 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0220 	orr.w	r2, r2, #32
 8005456:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	e006      	b.n	800546a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
  }
}
 800546a:	4618      	mov	r0, r3
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800548a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800548c:	7afb      	ldrb	r3, [r7, #11]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d002      	beq.n	8005498 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8005492:	7afb      	ldrb	r3, [r7, #11]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d10f      	bne.n	80054b8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e005      	b.n	80054b8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80054b8:	68fb      	ldr	r3, [r7, #12]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b08a      	sub	sp, #40	; 0x28
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d07c      	beq.n	8005606 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d023      	beq.n	800555e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2201      	movs	r2, #1
 800551c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f983 	bl	8005834 <HAL_CAN_TxMailbox0CompleteCallback>
 800552e:	e016      	b.n	800555e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f003 0304 	and.w	r3, r3, #4
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
 8005542:	e00c      	b.n	800555e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d004      	beq.n	8005558 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
 8005556:	e002      	b.n	800555e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f989 	bl	8005870 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d024      	beq.n	80055b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005570:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f963 	bl	8005848 <HAL_CAN_TxMailbox1CompleteCallback>
 8005582:	e016      	b.n	80055b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558a:	2b00      	cmp	r3, #0
 800558c:	d004      	beq.n	8005598 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
 8005596:	e00c      	b.n	80055b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a8:	627b      	str	r3, [r7, #36]	; 0x24
 80055aa:	e002      	b.n	80055b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f969 	bl	8005884 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d024      	beq.n	8005606 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 f943 	bl	800585c <HAL_CAN_TxMailbox2CompleteCallback>
 80055d6:	e016      	b.n	8005606 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d004      	beq.n	80055ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ea:	e00c      	b.n	8005606 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
 80055fe:	e002      	b.n	8005606 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f949 	bl	8005898 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005620:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2210      	movs	r2, #16
 8005628:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2208      	movs	r2, #8
 8005644:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f930 	bl	80058ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fe fa79 	bl	8003b5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00c      	beq.n	800568e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005684:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2210      	movs	r2, #16
 800568c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2208      	movs	r2, #8
 80056a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f912 	bl	80058d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8f9 	bl	80058c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2210      	movs	r2, #16
 80056e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8fc 	bl	80058e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2208      	movs	r2, #8
 800570a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f8f5 	bl	80058fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d07b      	beq.n	8005814 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d072      	beq.n	800580c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	f043 0302 	orr.w	r3, r3, #2
 800575c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005780:	2b00      	cmp	r3, #0
 8005782:	d043      	beq.n	800580c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800578a:	2b00      	cmp	r3, #0
 800578c:	d03e      	beq.n	800580c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005794:	2b60      	cmp	r3, #96	; 0x60
 8005796:	d02b      	beq.n	80057f0 <HAL_CAN_IRQHandler+0x32a>
 8005798:	2b60      	cmp	r3, #96	; 0x60
 800579a:	d82e      	bhi.n	80057fa <HAL_CAN_IRQHandler+0x334>
 800579c:	2b50      	cmp	r3, #80	; 0x50
 800579e:	d022      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x320>
 80057a0:	2b50      	cmp	r3, #80	; 0x50
 80057a2:	d82a      	bhi.n	80057fa <HAL_CAN_IRQHandler+0x334>
 80057a4:	2b40      	cmp	r3, #64	; 0x40
 80057a6:	d019      	beq.n	80057dc <HAL_CAN_IRQHandler+0x316>
 80057a8:	2b40      	cmp	r3, #64	; 0x40
 80057aa:	d826      	bhi.n	80057fa <HAL_CAN_IRQHandler+0x334>
 80057ac:	2b30      	cmp	r3, #48	; 0x30
 80057ae:	d010      	beq.n	80057d2 <HAL_CAN_IRQHandler+0x30c>
 80057b0:	2b30      	cmp	r3, #48	; 0x30
 80057b2:	d822      	bhi.n	80057fa <HAL_CAN_IRQHandler+0x334>
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d002      	beq.n	80057be <HAL_CAN_IRQHandler+0x2f8>
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d005      	beq.n	80057c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80057bc:	e01d      	b.n	80057fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	f043 0308 	orr.w	r3, r3, #8
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057c6:	e019      	b.n	80057fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	f043 0310 	orr.w	r3, r3, #16
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057d0:	e014      	b.n	80057fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	f043 0320 	orr.w	r3, r3, #32
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057da:	e00f      	b.n	80057fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057e4:	e00a      	b.n	80057fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057ee:	e005      	b.n	80057fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057f8:	e000      	b.n	80057fc <HAL_CAN_IRQHandler+0x336>
            break;
 80057fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800580a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2204      	movs	r2, #4
 8005812:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f872 	bl	8005910 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800582c:	bf00      	nop
 800582e:	3728      	adds	r7, #40	; 0x28
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <__NVIC_SetPriorityGrouping>:
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <__NVIC_SetPriorityGrouping+0x40>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005940:	4013      	ands	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <__NVIC_SetPriorityGrouping+0x44>)
 800594e:	4313      	orrs	r3, r2
 8005950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005952:	4a04      	ldr	r2, [pc, #16]	; (8005964 <__NVIC_SetPriorityGrouping+0x40>)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	60d3      	str	r3, [r2, #12]
}
 8005958:	bf00      	nop
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	e000ed00 	.word	0xe000ed00
 8005968:	05fa0000 	.word	0x05fa0000

0800596c <__NVIC_GetPriorityGrouping>:
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <__NVIC_GetPriorityGrouping+0x18>)
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	f003 0307 	and.w	r3, r3, #7
}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	e000ed00 	.word	0xe000ed00

08005988 <__NVIC_EnableIRQ>:
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	db0b      	blt.n	80059b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	f003 021f 	and.w	r2, r3, #31
 80059a0:	4907      	ldr	r1, [pc, #28]	; (80059c0 <__NVIC_EnableIRQ+0x38>)
 80059a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2001      	movs	r0, #1
 80059aa:	fa00 f202 	lsl.w	r2, r0, r2
 80059ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	e000e100 	.word	0xe000e100

080059c4 <__NVIC_SetPriority>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	db0a      	blt.n	80059ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	490c      	ldr	r1, [pc, #48]	; (8005a10 <__NVIC_SetPriority+0x4c>)
 80059de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	440b      	add	r3, r1
 80059e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059ec:	e00a      	b.n	8005a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4908      	ldr	r1, [pc, #32]	; (8005a14 <__NVIC_SetPriority+0x50>)
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	3b04      	subs	r3, #4
 80059fc:	0112      	lsls	r2, r2, #4
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	440b      	add	r3, r1
 8005a02:	761a      	strb	r2, [r3, #24]
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	e000e100 	.word	0xe000e100
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <NVIC_EncodePriority>:
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b089      	sub	sp, #36	; 0x24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f1c3 0307 	rsb	r3, r3, #7
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	bf28      	it	cs
 8005a36:	2304      	movcs	r3, #4
 8005a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2b06      	cmp	r3, #6
 8005a40:	d902      	bls.n	8005a48 <NVIC_EncodePriority+0x30>
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3b03      	subs	r3, #3
 8005a46:	e000      	b.n	8005a4a <NVIC_EncodePriority+0x32>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6a:	43d9      	mvns	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a70:	4313      	orrs	r3, r2
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3724      	adds	r7, #36	; 0x24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ff4c 	bl	8005924 <__NVIC_SetPriorityGrouping>
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005aa6:	f7ff ff61 	bl	800596c <__NVIC_GetPriorityGrouping>
 8005aaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	6978      	ldr	r0, [r7, #20]
 8005ab2:	f7ff ffb1 	bl	8005a18 <NVIC_EncodePriority>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff ff80 	bl	80059c4 <__NVIC_SetPriority>
}
 8005ac4:	bf00      	nop
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ff54 	bl	8005988 <__NVIC_EnableIRQ>
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005af6:	f7ff f8cb 	bl	8004c90 <HAL_GetTick>
 8005afa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d008      	beq.n	8005b1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2280      	movs	r2, #128	; 0x80
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e052      	b.n	8005bc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0216 	bic.w	r2, r2, #22
 8005b28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <HAL_DMA_Abort+0x62>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0208 	bic.w	r2, r2, #8
 8005b58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b6a:	e013      	b.n	8005b94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b6c:	f7ff f890 	bl	8004c90 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d90c      	bls.n	8005b94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2203      	movs	r2, #3
 8005b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e015      	b.n	8005bc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e4      	bne.n	8005b6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba6:	223f      	movs	r2, #63	; 0x3f
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d004      	beq.n	8005be6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e00c      	b.n	8005c00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2205      	movs	r2, #5
 8005bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b089      	sub	sp, #36	; 0x24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e175      	b.n	8005f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f040 8164 	bne.w	8005f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d005      	beq.n	8005c62 <HAL_GPIO_Init+0x56>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d130      	bne.n	8005cc4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 0201 	and.w	r2, r3, #1
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d017      	beq.n	8005d00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d123      	bne.n	8005d54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	08da      	lsrs	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80be 	beq.w	8005f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	4b66      	ldr	r3, [pc, #408]	; (8005f30 <HAL_GPIO_Init+0x324>)
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	4a65      	ldr	r2, [pc, #404]	; (8005f30 <HAL_GPIO_Init+0x324>)
 8005d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005da0:	6453      	str	r3, [r2, #68]	; 0x44
 8005da2:	4b63      	ldr	r3, [pc, #396]	; (8005f30 <HAL_GPIO_Init+0x324>)
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005dae:	4a61      	ldr	r2, [pc, #388]	; (8005f34 <HAL_GPIO_Init+0x328>)
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	3302      	adds	r3, #2
 8005db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	220f      	movs	r2, #15
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a58      	ldr	r2, [pc, #352]	; (8005f38 <HAL_GPIO_Init+0x32c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d037      	beq.n	8005e4a <HAL_GPIO_Init+0x23e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a57      	ldr	r2, [pc, #348]	; (8005f3c <HAL_GPIO_Init+0x330>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d031      	beq.n	8005e46 <HAL_GPIO_Init+0x23a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a56      	ldr	r2, [pc, #344]	; (8005f40 <HAL_GPIO_Init+0x334>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d02b      	beq.n	8005e42 <HAL_GPIO_Init+0x236>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a55      	ldr	r2, [pc, #340]	; (8005f44 <HAL_GPIO_Init+0x338>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d025      	beq.n	8005e3e <HAL_GPIO_Init+0x232>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a54      	ldr	r2, [pc, #336]	; (8005f48 <HAL_GPIO_Init+0x33c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d01f      	beq.n	8005e3a <HAL_GPIO_Init+0x22e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a53      	ldr	r2, [pc, #332]	; (8005f4c <HAL_GPIO_Init+0x340>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d019      	beq.n	8005e36 <HAL_GPIO_Init+0x22a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a52      	ldr	r2, [pc, #328]	; (8005f50 <HAL_GPIO_Init+0x344>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d013      	beq.n	8005e32 <HAL_GPIO_Init+0x226>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a51      	ldr	r2, [pc, #324]	; (8005f54 <HAL_GPIO_Init+0x348>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00d      	beq.n	8005e2e <HAL_GPIO_Init+0x222>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a50      	ldr	r2, [pc, #320]	; (8005f58 <HAL_GPIO_Init+0x34c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <HAL_GPIO_Init+0x21e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a4f      	ldr	r2, [pc, #316]	; (8005f5c <HAL_GPIO_Init+0x350>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d101      	bne.n	8005e26 <HAL_GPIO_Init+0x21a>
 8005e22:	2309      	movs	r3, #9
 8005e24:	e012      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e26:	230a      	movs	r3, #10
 8005e28:	e010      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	e00e      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e2e:	2307      	movs	r3, #7
 8005e30:	e00c      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e32:	2306      	movs	r3, #6
 8005e34:	e00a      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e36:	2305      	movs	r3, #5
 8005e38:	e008      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e3a:	2304      	movs	r3, #4
 8005e3c:	e006      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e004      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e42:	2302      	movs	r3, #2
 8005e44:	e002      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <HAL_GPIO_Init+0x240>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	69fa      	ldr	r2, [r7, #28]
 8005e4e:	f002 0203 	and.w	r2, r2, #3
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	4093      	lsls	r3, r2
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005e5c:	4935      	ldr	r1, [pc, #212]	; (8005f34 <HAL_GPIO_Init+0x328>)
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	089b      	lsrs	r3, r3, #2
 8005e62:	3302      	adds	r3, #2
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e8e:	4a34      	ldr	r2, [pc, #208]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e94:	4b32      	ldr	r3, [pc, #200]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005eb8:	4a29      	ldr	r2, [pc, #164]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ebe:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ee2:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ee8:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f0c:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <HAL_GPIO_Init+0x354>)
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	3301      	adds	r3, #1
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	f67f ae86 	bls.w	8005c2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40023800 	.word	0x40023800
 8005f34:	40013800 	.word	0x40013800
 8005f38:	40020000 	.word	0x40020000
 8005f3c:	40020400 	.word	0x40020400
 8005f40:	40020800 	.word	0x40020800
 8005f44:	40020c00 	.word	0x40020c00
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	40021400 	.word	0x40021400
 8005f50:	40021800 	.word	0x40021800
 8005f54:	40021c00 	.word	0x40021c00
 8005f58:	40022000 	.word	0x40022000
 8005f5c:	40022400 	.word	0x40022400
 8005f60:	40013c00 	.word	0x40013c00

08005f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
 8005f70:	4613      	mov	r3, r2
 8005f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f74:	787b      	ldrb	r3, [r7, #1]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005f80:	e003      	b.n	8005f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005f82:	887b      	ldrh	r3, [r7, #2]
 8005f84:	041a      	lsls	r2, r3, #16
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	619a      	str	r2, [r3, #24]
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fa2:	4b23      	ldr	r3, [pc, #140]	; (8006030 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	4a22      	ldr	r2, [pc, #136]	; (8006030 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fac:	6413      	str	r3, [r2, #64]	; 0x40
 8005fae:	4b20      	ldr	r3, [pc, #128]	; (8006030 <HAL_PWREx_EnableOverDrive+0x98>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fc6:	f7fe fe63 	bl	8004c90 <HAL_GetTick>
 8005fca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fcc:	e009      	b.n	8005fe2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fce:	f7fe fe5f 	bl	8004c90 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fdc:	d901      	bls.n	8005fe2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e022      	b.n	8006028 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fee:	d1ee      	bne.n	8005fce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ff0:	4b10      	ldr	r3, [pc, #64]	; (8006034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a0f      	ldr	r2, [pc, #60]	; (8006034 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ffc:	f7fe fe48 	bl	8004c90 <HAL_GetTick>
 8006000:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006002:	e009      	b.n	8006018 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006004:	f7fe fe44 	bl	8004c90 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006012:	d901      	bls.n	8006018 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_PWREx_EnableOverDrive+0x9c>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006024:	d1ee      	bne.n	8006004 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40023800 	.word	0x40023800
 8006034:	40007000 	.word	0x40007000

08006038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e291      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8087 	beq.w	800616a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800605c:	4b96      	ldr	r3, [pc, #600]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 030c 	and.w	r3, r3, #12
 8006064:	2b04      	cmp	r3, #4
 8006066:	d00c      	beq.n	8006082 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006068:	4b93      	ldr	r3, [pc, #588]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 030c 	and.w	r3, r3, #12
 8006070:	2b08      	cmp	r3, #8
 8006072:	d112      	bne.n	800609a <HAL_RCC_OscConfig+0x62>
 8006074:	4b90      	ldr	r3, [pc, #576]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006080:	d10b      	bne.n	800609a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006082:	4b8d      	ldr	r3, [pc, #564]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d06c      	beq.n	8006168 <HAL_RCC_OscConfig+0x130>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d168      	bne.n	8006168 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e26b      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a2:	d106      	bne.n	80060b2 <HAL_RCC_OscConfig+0x7a>
 80060a4:	4b84      	ldr	r3, [pc, #528]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a83      	ldr	r2, [pc, #524]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	e02e      	b.n	8006110 <HAL_RCC_OscConfig+0xd8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x9c>
 80060ba:	4b7f      	ldr	r3, [pc, #508]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a7e      	ldr	r2, [pc, #504]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4b7c      	ldr	r3, [pc, #496]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7b      	ldr	r2, [pc, #492]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e01d      	b.n	8006110 <HAL_RCC_OscConfig+0xd8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCC_OscConfig+0xc0>
 80060de:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a75      	ldr	r2, [pc, #468]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4b73      	ldr	r3, [pc, #460]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a72      	ldr	r2, [pc, #456]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e00b      	b.n	8006110 <HAL_RCC_OscConfig+0xd8>
 80060f8:	4b6f      	ldr	r3, [pc, #444]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6e      	ldr	r2, [pc, #440]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4b6c      	ldr	r3, [pc, #432]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6b      	ldr	r2, [pc, #428]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800610a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800610e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d013      	beq.n	8006140 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fe fdba 	bl	8004c90 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006120:	f7fe fdb6 	bl	8004c90 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b64      	cmp	r3, #100	; 0x64
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e21f      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006132:	4b61      	ldr	r3, [pc, #388]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCC_OscConfig+0xe8>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fe fda6 	bl	8004c90 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006148:	f7fe fda2 	bl	8004c90 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b64      	cmp	r3, #100	; 0x64
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e20b      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615a:	4b57      	ldr	r3, [pc, #348]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x110>
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d069      	beq.n	800624a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006176:	4b50      	ldr	r3, [pc, #320]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00b      	beq.n	800619a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006182:	4b4d      	ldr	r3, [pc, #308]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
 800618a:	2b08      	cmp	r3, #8
 800618c:	d11c      	bne.n	80061c8 <HAL_RCC_OscConfig+0x190>
 800618e:	4b4a      	ldr	r3, [pc, #296]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d116      	bne.n	80061c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800619a:	4b47      	ldr	r3, [pc, #284]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_RCC_OscConfig+0x17a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d001      	beq.n	80061b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e1df      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b2:	4b41      	ldr	r3, [pc, #260]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	493d      	ldr	r1, [pc, #244]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061c6:	e040      	b.n	800624a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d023      	beq.n	8006218 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061d0:	4b39      	ldr	r3, [pc, #228]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a38      	ldr	r2, [pc, #224]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fe fd58 	bl	8004c90 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061e4:	f7fe fd54 	bl	8004c90 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e1bd      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0f0      	beq.n	80061e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006202:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	4929      	ldr	r1, [pc, #164]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]
 8006216:	e018      	b.n	800624a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006218:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006224:	f7fe fd34 	bl	8004c90 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800622c:	f7fe fd30 	bl	8004c90 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e199      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800623e:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0308 	and.w	r3, r3, #8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d038      	beq.n	80062c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d019      	beq.n	8006292 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800625e:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006264:	f043 0301 	orr.w	r3, r3, #1
 8006268:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626a:	f7fe fd11 	bl	8004c90 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006272:	f7fe fd0d 	bl	8004c90 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e176      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0f0      	beq.n	8006272 <HAL_RCC_OscConfig+0x23a>
 8006290:	e01a      	b.n	80062c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <HAL_RCC_OscConfig+0x280>)
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629e:	f7fe fcf7 	bl	8004c90 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062a4:	e00a      	b.n	80062bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062a6:	f7fe fcf3 	bl	8004c90 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d903      	bls.n	80062bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e15c      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
 80062b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062bc:	4b91      	ldr	r3, [pc, #580]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80062be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1ee      	bne.n	80062a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80a4 	beq.w	800641e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062d6:	4b8b      	ldr	r3, [pc, #556]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80062e2:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	4a87      	ldr	r2, [pc, #540]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80062e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ec:	6413      	str	r3, [r2, #64]	; 0x40
 80062ee:	4b85      	ldr	r3, [pc, #532]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062fa:	2301      	movs	r3, #1
 80062fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062fe:	4b82      	ldr	r3, [pc, #520]	; (8006508 <HAL_RCC_OscConfig+0x4d0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006306:	2b00      	cmp	r3, #0
 8006308:	d118      	bne.n	800633c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800630a:	4b7f      	ldr	r3, [pc, #508]	; (8006508 <HAL_RCC_OscConfig+0x4d0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a7e      	ldr	r2, [pc, #504]	; (8006508 <HAL_RCC_OscConfig+0x4d0>)
 8006310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006316:	f7fe fcbb 	bl	8004c90 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631e:	f7fe fcb7 	bl	8004c90 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b64      	cmp	r3, #100	; 0x64
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e120      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006330:	4b75      	ldr	r3, [pc, #468]	; (8006508 <HAL_RCC_OscConfig+0x4d0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d106      	bne.n	8006352 <HAL_RCC_OscConfig+0x31a>
 8006344:	4b6f      	ldr	r3, [pc, #444]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	4a6e      	ldr	r2, [pc, #440]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	6713      	str	r3, [r2, #112]	; 0x70
 8006350:	e02d      	b.n	80063ae <HAL_RCC_OscConfig+0x376>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10c      	bne.n	8006374 <HAL_RCC_OscConfig+0x33c>
 800635a:	4b6a      	ldr	r3, [pc, #424]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635e:	4a69      	ldr	r2, [pc, #420]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	6713      	str	r3, [r2, #112]	; 0x70
 8006366:	4b67      	ldr	r3, [pc, #412]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4a66      	ldr	r2, [pc, #408]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800636c:	f023 0304 	bic.w	r3, r3, #4
 8006370:	6713      	str	r3, [r2, #112]	; 0x70
 8006372:	e01c      	b.n	80063ae <HAL_RCC_OscConfig+0x376>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b05      	cmp	r3, #5
 800637a:	d10c      	bne.n	8006396 <HAL_RCC_OscConfig+0x35e>
 800637c:	4b61      	ldr	r3, [pc, #388]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006380:	4a60      	ldr	r2, [pc, #384]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006382:	f043 0304 	orr.w	r3, r3, #4
 8006386:	6713      	str	r3, [r2, #112]	; 0x70
 8006388:	4b5e      	ldr	r3, [pc, #376]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800638a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638c:	4a5d      	ldr	r2, [pc, #372]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	6713      	str	r3, [r2, #112]	; 0x70
 8006394:	e00b      	b.n	80063ae <HAL_RCC_OscConfig+0x376>
 8006396:	4b5b      	ldr	r3, [pc, #364]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	4a5a      	ldr	r2, [pc, #360]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800639c:	f023 0301 	bic.w	r3, r3, #1
 80063a0:	6713      	str	r3, [r2, #112]	; 0x70
 80063a2:	4b58      	ldr	r3, [pc, #352]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80063a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a6:	4a57      	ldr	r2, [pc, #348]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80063a8:	f023 0304 	bic.w	r3, r3, #4
 80063ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d015      	beq.n	80063e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b6:	f7fe fc6b 	bl	8004c90 <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063bc:	e00a      	b.n	80063d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063be:	f7fe fc67 	bl	8004c90 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e0ce      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d4:	4b4b      	ldr	r3, [pc, #300]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0ee      	beq.n	80063be <HAL_RCC_OscConfig+0x386>
 80063e0:	e014      	b.n	800640c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e2:	f7fe fc55 	bl	8004c90 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063e8:	e00a      	b.n	8006400 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ea:	f7fe fc51 	bl	8004c90 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0b8      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006400:	4b40      	ldr	r3, [pc, #256]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ee      	bne.n	80063ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006412:	4b3c      	ldr	r3, [pc, #240]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	4a3b      	ldr	r2, [pc, #236]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800641c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80a4 	beq.w	8006570 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006428:	4b36      	ldr	r3, [pc, #216]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f003 030c 	and.w	r3, r3, #12
 8006430:	2b08      	cmp	r3, #8
 8006432:	d06b      	beq.n	800650c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d149      	bne.n	80064d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a30      	ldr	r2, [pc, #192]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006448:	f7fe fc22 	bl	8004c90 <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006450:	f7fe fc1e 	bl	8004c90 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e087      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006462:	4b28      	ldr	r3, [pc, #160]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69da      	ldr	r2, [r3, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	019b      	lsls	r3, r3, #6
 800647e:	431a      	orrs	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	3b01      	subs	r3, #1
 8006488:	041b      	lsls	r3, r3, #16
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	061b      	lsls	r3, r3, #24
 8006492:	4313      	orrs	r3, r2
 8006494:	4a1b      	ldr	r2, [pc, #108]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 8006496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800649a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800649c:	4b19      	ldr	r3, [pc, #100]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80064a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a8:	f7fe fbf2 	bl	8004c90 <HAL_GetTick>
 80064ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b0:	f7fe fbee 	bl	8004c90 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e057      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCC_OscConfig+0x478>
 80064ce:	e04f      	b.n	8006570 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0b      	ldr	r2, [pc, #44]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80064d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fe fbd8 	bl	8004c90 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064e4:	f7fe fbd4 	bl	8004c90 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e03d      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f6:	4b03      	ldr	r3, [pc, #12]	; (8006504 <HAL_RCC_OscConfig+0x4cc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f0      	bne.n	80064e4 <HAL_RCC_OscConfig+0x4ac>
 8006502:	e035      	b.n	8006570 <HAL_RCC_OscConfig+0x538>
 8006504:	40023800 	.word	0x40023800
 8006508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800650c:	4b1b      	ldr	r3, [pc, #108]	; (800657c <HAL_RCC_OscConfig+0x544>)
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d028      	beq.n	800656c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d121      	bne.n	800656c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006532:	429a      	cmp	r2, r3
 8006534:	d11a      	bne.n	800656c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800653c:	4013      	ands	r3, r2
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006542:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006544:	4293      	cmp	r3, r2
 8006546:	d111      	bne.n	800656c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	3b01      	subs	r3, #1
 8006556:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d107      	bne.n	800656c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40023800 	.word	0x40023800

08006580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e0d0      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006598:	4b6a      	ldr	r3, [pc, #424]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d910      	bls.n	80065c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a6:	4b67      	ldr	r3, [pc, #412]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f023 020f 	bic.w	r2, r3, #15
 80065ae:	4965      	ldr	r1, [pc, #404]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	4b63      	ldr	r3, [pc, #396]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 030f 	and.w	r3, r3, #15
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d001      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0b8      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d020      	beq.n	8006616 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065e0:	4b59      	ldr	r3, [pc, #356]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4a58      	ldr	r2, [pc, #352]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 80065e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065f8:	4b53      	ldr	r3, [pc, #332]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	4a52      	ldr	r2, [pc, #328]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 80065fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006602:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006604:	4b50      	ldr	r3, [pc, #320]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	494d      	ldr	r1, [pc, #308]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d040      	beq.n	80066a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d107      	bne.n	800663a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	4b47      	ldr	r3, [pc, #284]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d115      	bne.n	8006662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e07f      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d107      	bne.n	8006652 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006642:	4b41      	ldr	r3, [pc, #260]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e073      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006652:	4b3d      	ldr	r3, [pc, #244]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e06b      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f023 0203 	bic.w	r2, r3, #3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4936      	ldr	r1, [pc, #216]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006670:	4313      	orrs	r3, r2
 8006672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006674:	f7fe fb0c 	bl	8004c90 <HAL_GetTick>
 8006678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667a:	e00a      	b.n	8006692 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800667c:	f7fe fb08 	bl	8004c90 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	f241 3288 	movw	r2, #5000	; 0x1388
 800668a:	4293      	cmp	r3, r2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e053      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006692:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 020c 	and.w	r2, r3, #12
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d1eb      	bne.n	800667c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066a4:	4b27      	ldr	r3, [pc, #156]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d210      	bcs.n	80066d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b24      	ldr	r3, [pc, #144]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 020f 	bic.w	r2, r3, #15
 80066ba:	4922      	ldr	r1, [pc, #136]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <HAL_RCC_ClockConfig+0x1c4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e032      	b.n	800673a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066e0:	4b19      	ldr	r3, [pc, #100]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4916      	ldr	r1, [pc, #88]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	490e      	ldr	r1, [pc, #56]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 800670e:	4313      	orrs	r3, r2
 8006710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006712:	f000 f821 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 8006716:	4602      	mov	r2, r0
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <HAL_RCC_ClockConfig+0x1c8>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	490a      	ldr	r1, [pc, #40]	; (800674c <HAL_RCC_ClockConfig+0x1cc>)
 8006724:	5ccb      	ldrb	r3, [r1, r3]
 8006726:	fa22 f303 	lsr.w	r3, r2, r3
 800672a:	4a09      	ldr	r2, [pc, #36]	; (8006750 <HAL_RCC_ClockConfig+0x1d0>)
 800672c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCC_ClockConfig+0x1d4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe f902 	bl	800493c <HAL_InitTick>

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40023c00 	.word	0x40023c00
 8006748:	40023800 	.word	0x40023800
 800674c:	08008ed0 	.word	0x08008ed0
 8006750:	20000000 	.word	0x20000000
 8006754:	20000004 	.word	0x20000004

08006758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800675c:	b090      	sub	sp, #64	; 0x40
 800675e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	2300      	movs	r3, #0
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006768:	2300      	movs	r3, #0
 800676a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800676c:	2300      	movs	r3, #0
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006770:	4b59      	ldr	r3, [pc, #356]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b08      	cmp	r3, #8
 800677a:	d00d      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x40>
 800677c:	2b08      	cmp	r3, #8
 800677e:	f200 80a1 	bhi.w	80068c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0x34>
 8006786:	2b04      	cmp	r3, #4
 8006788:	d003      	beq.n	8006792 <HAL_RCC_GetSysClockFreq+0x3a>
 800678a:	e09b      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800678c:	4b53      	ldr	r3, [pc, #332]	; (80068dc <HAL_RCC_GetSysClockFreq+0x184>)
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006790:	e09b      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006792:	4b53      	ldr	r3, [pc, #332]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006796:	e098      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006798:	4b4f      	ldr	r3, [pc, #316]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067a2:	4b4d      	ldr	r3, [pc, #308]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d028      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ae:	4b4a      	ldr	r3, [pc, #296]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	2200      	movs	r2, #0
 80067b6:	623b      	str	r3, [r7, #32]
 80067b8:	627a      	str	r2, [r7, #36]	; 0x24
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80067c0:	2100      	movs	r1, #0
 80067c2:	4b47      	ldr	r3, [pc, #284]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80067c4:	fb03 f201 	mul.w	r2, r3, r1
 80067c8:	2300      	movs	r3, #0
 80067ca:	fb00 f303 	mul.w	r3, r0, r3
 80067ce:	4413      	add	r3, r2
 80067d0:	4a43      	ldr	r2, [pc, #268]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80067d2:	fba0 1202 	umull	r1, r2, r0, r2
 80067d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067d8:	460a      	mov	r2, r1
 80067da:	62ba      	str	r2, [r7, #40]	; 0x28
 80067dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067de:	4413      	add	r3, r2
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e4:	2200      	movs	r2, #0
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	61fa      	str	r2, [r7, #28]
 80067ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80067f2:	f7f9 fd09 	bl	8000208 <__aeabi_uldivmod>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4613      	mov	r3, r2
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fe:	e053      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006800:	4b35      	ldr	r3, [pc, #212]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	099b      	lsrs	r3, r3, #6
 8006806:	2200      	movs	r2, #0
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	617a      	str	r2, [r7, #20]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006812:	f04f 0b00 	mov.w	fp, #0
 8006816:	4652      	mov	r2, sl
 8006818:	465b      	mov	r3, fp
 800681a:	f04f 0000 	mov.w	r0, #0
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	0159      	lsls	r1, r3, #5
 8006824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006828:	0150      	lsls	r0, r2, #5
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	ebb2 080a 	subs.w	r8, r2, sl
 8006832:	eb63 090b 	sbc.w	r9, r3, fp
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006842:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006846:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800684a:	ebb2 0408 	subs.w	r4, r2, r8
 800684e:	eb63 0509 	sbc.w	r5, r3, r9
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	00eb      	lsls	r3, r5, #3
 800685c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006860:	00e2      	lsls	r2, r4, #3
 8006862:	4614      	mov	r4, r2
 8006864:	461d      	mov	r5, r3
 8006866:	eb14 030a 	adds.w	r3, r4, sl
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	eb45 030b 	adc.w	r3, r5, fp
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800687e:	4629      	mov	r1, r5
 8006880:	028b      	lsls	r3, r1, #10
 8006882:	4621      	mov	r1, r4
 8006884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006888:	4621      	mov	r1, r4
 800688a:	028a      	lsls	r2, r1, #10
 800688c:	4610      	mov	r0, r2
 800688e:	4619      	mov	r1, r3
 8006890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006892:	2200      	movs	r2, #0
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	60fa      	str	r2, [r7, #12]
 8006898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800689c:	f7f9 fcb4 	bl	8000208 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4613      	mov	r3, r2
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	3301      	adds	r3, #1
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80068b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068c2:	e002      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_RCC_GetSysClockFreq+0x184>)
 80068c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80068c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3740      	adds	r7, #64	; 0x40
 80068d0:	46bd      	mov	sp, r7
 80068d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	00f42400 	.word	0x00f42400
 80068e0:	017d7840 	.word	0x017d7840

080068e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e8:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000000 	.word	0x20000000

080068fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006900:	f7ff fff0 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0a9b      	lsrs	r3, r3, #10
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	08008ee0 	.word	0x08008ee0

08006924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006928:	f7ff ffdc 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0b5b      	lsrs	r3, r3, #13
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	; (8006948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	08008ee0 	.word	0x08008ee0

0800694c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	220f      	movs	r2, #15
 800695a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800695c:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0203 	and.w	r2, r3, #3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006980:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	08db      	lsrs	r3, r3, #3
 8006986:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <HAL_RCC_GetClockConfig+0x60>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 020f 	and.w	r2, r3, #15
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	601a      	str	r2, [r3, #0]
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40023800 	.word	0x40023800
 80069ac:	40023c00 	.word	0x40023c00

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d012      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069d8:	4b69      	ldr	r3, [pc, #420]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4a68      	ldr	r2, [pc, #416]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069e2:	6093      	str	r3, [r2, #8]
 80069e4:	4b66      	ldr	r3, [pc, #408]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	4964      	ldr	r1, [pc, #400]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d017      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a0a:	4b5d      	ldr	r3, [pc, #372]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	4959      	ldr	r1, [pc, #356]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a28:	d101      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a46:	4b4e      	ldr	r3, [pc, #312]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	494a      	ldr	r1, [pc, #296]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a64:	d101      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a82:	2301      	movs	r3, #1
 8006a84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 808b 	beq.w	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a94:	4b3a      	ldr	r3, [pc, #232]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	4a39      	ldr	r2, [pc, #228]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa0:	4b37      	ldr	r3, [pc, #220]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006aac:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab8:	f7fe f8ea 	bl	8004c90 <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac0:	f7fe f8e6 	bl	8004c90 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	; 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e357      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ad2:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ade:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d035      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d02e      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006afc:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b06:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4a1d      	ldr	r2, [pc, #116]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a1a      	ldr	r2, [pc, #104]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d114      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fe f8ae 	bl	8004c90 <HAL_GetTick>
 8006b34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fe f8aa 	bl	8004c90 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e319      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ee      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b66:	d111      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b76:	400b      	ands	r3, r1
 8006b78:	4901      	ldr	r1, [pc, #4]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
 8006b7e:	e00b      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40007000 	.word	0x40007000
 8006b88:	0ffffcff 	.word	0x0ffffcff
 8006b8c:	4baa      	ldr	r3, [pc, #680]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4aa9      	ldr	r2, [pc, #676]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b96:	6093      	str	r3, [r2, #8]
 8006b98:	4ba7      	ldr	r3, [pc, #668]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	49a4      	ldr	r1, [pc, #656]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb6:	4ba0      	ldr	r3, [pc, #640]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	4a9e      	ldr	r2, [pc, #632]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006bc6:	4b9c      	ldr	r3, [pc, #624]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	4999      	ldr	r1, [pc, #612]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006be4:	4b94      	ldr	r3, [pc, #592]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf2:	4991      	ldr	r1, [pc, #580]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c06:	4b8c      	ldr	r3, [pc, #560]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c14:	4988      	ldr	r1, [pc, #544]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c28:	4b83      	ldr	r3, [pc, #524]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c36:	4980      	ldr	r1, [pc, #512]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c4a:	4b7b      	ldr	r3, [pc, #492]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	4977      	ldr	r1, [pc, #476]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c6c:	4b72      	ldr	r3, [pc, #456]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c72:	f023 0203 	bic.w	r2, r3, #3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	496f      	ldr	r1, [pc, #444]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c8e:	4b6a      	ldr	r3, [pc, #424]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c94:	f023 020c 	bic.w	r2, r3, #12
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9c:	4966      	ldr	r1, [pc, #408]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cb0:	4b61      	ldr	r3, [pc, #388]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	495e      	ldr	r1, [pc, #376]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cd2:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	4955      	ldr	r1, [pc, #340]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cf4:	4b50      	ldr	r3, [pc, #320]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	494d      	ldr	r1, [pc, #308]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d16:	4b48      	ldr	r3, [pc, #288]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	4944      	ldr	r1, [pc, #272]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d38:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	493c      	ldr	r1, [pc, #240]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d68:	4933      	ldr	r1, [pc, #204]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d8a:	492b      	ldr	r1, [pc, #172]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d011      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d9e:	4b26      	ldr	r3, [pc, #152]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dac:	4922      	ldr	r1, [pc, #136]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dde:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dec:	4912      	ldr	r1, [pc, #72]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e00:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e10:	4909      	ldr	r1, [pc, #36]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d006      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80d9 	beq.w	8006fde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e2c:	4b02      	ldr	r3, [pc, #8]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a01      	ldr	r2, [pc, #4]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e36:	e001      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e3e:	f7fd ff27 	bl	8004c90 <HAL_GetTick>
 8006e42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e44:	e008      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e46:	f7fd ff23 	bl	8004c90 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b64      	cmp	r3, #100	; 0x64
 8006e52:	d901      	bls.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e194      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e58:	4b6c      	ldr	r3, [pc, #432]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f0      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d021      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11d      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e78:	4b64      	ldr	r3, [pc, #400]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e86:	4b61      	ldr	r3, [pc, #388]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8c:	0e1b      	lsrs	r3, r3, #24
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	019a      	lsls	r2, r3, #6
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	071b      	lsls	r3, r3, #28
 8006eac:	4957      	ldr	r1, [pc, #348]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d02e      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d129      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ee0:	4b4a      	ldr	r3, [pc, #296]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eee:	4b47      	ldr	r3, [pc, #284]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef4:	0f1b      	lsrs	r3, r3, #28
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	019a      	lsls	r2, r3, #6
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	071b      	lsls	r3, r3, #28
 8006f14:	493d      	ldr	r1, [pc, #244]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f1c:	4b3b      	ldr	r3, [pc, #236]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f22:	f023 021f 	bic.w	r2, r3, #31
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	4937      	ldr	r1, [pc, #220]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01d      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f40:	4b32      	ldr	r3, [pc, #200]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f46:	0e1b      	lsrs	r3, r3, #24
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f4e:	4b2f      	ldr	r3, [pc, #188]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	0f1b      	lsrs	r3, r3, #28
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	019a      	lsls	r2, r3, #6
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	041b      	lsls	r3, r3, #16
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	061b      	lsls	r3, r3, #24
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	071b      	lsls	r3, r3, #28
 8006f74:	4925      	ldr	r1, [pc, #148]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d011      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	019a      	lsls	r2, r3, #6
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	071b      	lsls	r3, r3, #28
 8006fa4:	4919      	ldr	r1, [pc, #100]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fac:	4b17      	ldr	r3, [pc, #92]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb8:	f7fd fe6a 	bl	8004c90 <HAL_GetTick>
 8006fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fc0:	f7fd fe66 	bl	8004c90 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0d7      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	f040 80cd 	bne.w	8007180 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a08      	ldr	r2, [pc, #32]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff2:	f7fd fe4d 	bl	8004c90 <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ffa:	f7fd fe49 	bl	8004c90 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b64      	cmp	r3, #100	; 0x64
 8007006:	d903      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e0ba      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800700c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007010:	4b5e      	ldr	r3, [pc, #376]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701c:	d0ed      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02e      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d12a      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007046:	4b51      	ldr	r3, [pc, #324]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007054:	4b4d      	ldr	r3, [pc, #308]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	0f1b      	lsrs	r3, r3, #28
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	019a      	lsls	r2, r3, #6
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	431a      	orrs	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	071b      	lsls	r3, r3, #28
 800707a:	4944      	ldr	r1, [pc, #272]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007082:	4b42      	ldr	r3, [pc, #264]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	3b01      	subs	r3, #1
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	493d      	ldr	r1, [pc, #244]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d022      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b0:	d11d      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070b2:	4b36      	ldr	r3, [pc, #216]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	0f1b      	lsrs	r3, r3, #28
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	019a      	lsls	r2, r3, #6
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	431a      	orrs	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	4929      	ldr	r1, [pc, #164]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d028      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070fa:	4b24      	ldr	r3, [pc, #144]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007100:	0e1b      	lsrs	r3, r3, #24
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007108:	4b20      	ldr	r3, [pc, #128]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	019a      	lsls	r2, r3, #6
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	431a      	orrs	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	061b      	lsls	r3, r3, #24
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	071b      	lsls	r3, r3, #28
 800712e:	4917      	ldr	r1, [pc, #92]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007136:	4b15      	ldr	r3, [pc, #84]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	4911      	ldr	r1, [pc, #68]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007158:	f7fd fd9a 	bl	8004c90 <HAL_GetTick>
 800715c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007160:	f7fd fd96 	bl	8004c90 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b64      	cmp	r3, #100	; 0x64
 800716c:	d901      	bls.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e007      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d1ef      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800

08007190 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e038      	b.n	8007218 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7fd fbb4 	bl	8004928 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3308      	adds	r3, #8
 80071c8:	4619      	mov	r1, r3
 80071ca:	4610      	mov	r0, r2
 80071cc:	f001 fb74 	bl	80088b8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6818      	ldr	r0, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	461a      	mov	r2, r3
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	f001 fbfc 	bl	80089d8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6858      	ldr	r0, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	6879      	ldr	r1, [r7, #4]
 80071ee:	f001 fc43 	bl	8008a78 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6892      	ldr	r2, [r2, #8]
 80071fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	6892      	ldr	r2, [r2, #8]
 8007206:	f041 0101 	orr.w	r1, r1, #1
 800720a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e049      	b.n	80072c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7fd f924 	bl	8004494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2202      	movs	r2, #2
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	4619      	mov	r1, r3
 800725e:	4610      	mov	r0, r2
 8007260:	f000 f9f6 	bl	8007650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d001      	beq.n	80072e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e054      	b.n	8007392 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d022      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007312:	d01d      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a22      	ldr	r2, [pc, #136]	; (80073a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d018      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a21      	ldr	r2, [pc, #132]	; (80073a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <HAL_TIM_Base_Start_IT+0xdc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00e      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d009      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1b      	ldr	r2, [pc, #108]	; (80073b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d115      	bne.n	800737c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689a      	ldr	r2, [r3, #8]
 8007356:	4b19      	ldr	r3, [pc, #100]	; (80073bc <HAL_TIM_Base_Start_IT+0xec>)
 8007358:	4013      	ands	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b06      	cmp	r3, #6
 8007360:	d015      	beq.n	800738e <HAL_TIM_Base_Start_IT+0xbe>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007368:	d011      	beq.n	800738e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737a:	e008      	b.n	800738e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e000      	b.n	8007390 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	40010400 	.word	0x40010400
 80073b4:	40014000 	.word	0x40014000
 80073b8:	40001800 	.word	0x40001800
 80073bc:	00010007 	.word	0x00010007

080073c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0202 	mvn.w	r2, #2
 80073ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f905 	bl	8007612 <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8f7 	bl	80075fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f908 	bl	8007626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d122      	bne.n	8007470 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b04      	cmp	r3, #4
 8007436:	d11b      	bne.n	8007470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0204 	mvn.w	r2, #4
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f8db 	bl	8007612 <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f8cd 	bl	80075fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f8de 	bl	8007626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b08      	cmp	r3, #8
 800747c:	d122      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b08      	cmp	r3, #8
 800748a:	d11b      	bne.n	80074c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0208 	mvn.w	r2, #8
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8b1 	bl	8007612 <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f8a3 	bl	80075fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8b4 	bl	8007626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d122      	bne.n	8007518 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d11b      	bne.n	8007518 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0210 	mvn.w	r2, #16
 80074e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2208      	movs	r2, #8
 80074ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f887 	bl	8007612 <HAL_TIM_IC_CaptureCallback>
 8007504:	e005      	b.n	8007512 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f879 	bl	80075fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f88a 	bl	8007626 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10e      	bne.n	8007544 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b01      	cmp	r3, #1
 8007532:	d107      	bne.n	8007544 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0201 	mvn.w	r2, #1
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fc ff20 	bl	8004384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d10e      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b80      	cmp	r3, #128	; 0x80
 800755e:	d107      	bne.n	8007570 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f9a8 	bl	80078c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757e:	d10e      	bne.n	800759e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b80      	cmp	r3, #128	; 0x80
 800758c:	d107      	bne.n	800759e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f99b 	bl	80078d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d10e      	bne.n	80075ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d107      	bne.n	80075ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f838 	bl	800763a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d10e      	bne.n	80075f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f003 0320 	and.w	r3, r3, #32
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d107      	bne.n	80075f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f06f 0220 	mvn.w	r2, #32
 80075ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f95b 	bl	80078ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007612:	b480      	push	{r7}
 8007614:	b083      	sub	sp, #12
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800763a:	b480      	push	{r7}
 800763c:	b083      	sub	sp, #12
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a40      	ldr	r2, [pc, #256]	; (8007764 <TIM_Base_SetConfig+0x114>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d013      	beq.n	8007690 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766e:	d00f      	beq.n	8007690 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3d      	ldr	r2, [pc, #244]	; (8007768 <TIM_Base_SetConfig+0x118>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00b      	beq.n	8007690 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a3c      	ldr	r2, [pc, #240]	; (800776c <TIM_Base_SetConfig+0x11c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d007      	beq.n	8007690 <TIM_Base_SetConfig+0x40>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a3b      	ldr	r2, [pc, #236]	; (8007770 <TIM_Base_SetConfig+0x120>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d003      	beq.n	8007690 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a3a      	ldr	r2, [pc, #232]	; (8007774 <TIM_Base_SetConfig+0x124>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d108      	bne.n	80076a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2f      	ldr	r2, [pc, #188]	; (8007764 <TIM_Base_SetConfig+0x114>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d02b      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b0:	d027      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a2c      	ldr	r2, [pc, #176]	; (8007768 <TIM_Base_SetConfig+0x118>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d023      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a2b      	ldr	r2, [pc, #172]	; (800776c <TIM_Base_SetConfig+0x11c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01f      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <TIM_Base_SetConfig+0x120>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d01b      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a29      	ldr	r2, [pc, #164]	; (8007774 <TIM_Base_SetConfig+0x124>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d017      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a28      	ldr	r2, [pc, #160]	; (8007778 <TIM_Base_SetConfig+0x128>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a27      	ldr	r2, [pc, #156]	; (800777c <TIM_Base_SetConfig+0x12c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a26      	ldr	r2, [pc, #152]	; (8007780 <TIM_Base_SetConfig+0x130>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a25      	ldr	r2, [pc, #148]	; (8007784 <TIM_Base_SetConfig+0x134>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a24      	ldr	r2, [pc, #144]	; (8007788 <TIM_Base_SetConfig+0x138>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a23      	ldr	r2, [pc, #140]	; (800778c <TIM_Base_SetConfig+0x13c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d108      	bne.n	8007714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a0a      	ldr	r2, [pc, #40]	; (8007764 <TIM_Base_SetConfig+0x114>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_Base_SetConfig+0xf8>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a0c      	ldr	r2, [pc, #48]	; (8007774 <TIM_Base_SetConfig+0x124>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d103      	bne.n	8007750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	615a      	str	r2, [r3, #20]
}
 8007756:	bf00      	nop
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40010000 	.word	0x40010000
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	40010400 	.word	0x40010400
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800
 8007784:	40001800 	.word	0x40001800
 8007788:	40001c00 	.word	0x40001c00
 800778c:	40002000 	.word	0x40002000

08007790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e06d      	b.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a30      	ldr	r2, [pc, #192]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d004      	beq.n	80077dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2f      	ldr	r2, [pc, #188]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d108      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a20      	ldr	r2, [pc, #128]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d022      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800781a:	d01d      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a1d      	ldr	r2, [pc, #116]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d018      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a1c      	ldr	r2, [pc, #112]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d013      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a1a      	ldr	r2, [pc, #104]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00e      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a15      	ldr	r2, [pc, #84]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d009      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a16      	ldr	r2, [pc, #88]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d004      	beq.n	8007858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d10c      	bne.n	8007872 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	4313      	orrs	r3, r2
 8007868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	40010000 	.word	0x40010000
 8007894:	40010400 	.word	0x40010400
 8007898:	40000400 	.word	0x40000400
 800789c:	40000800 	.word	0x40000800
 80078a0:	40000c00 	.word	0x40000c00
 80078a4:	40014000 	.word	0x40014000
 80078a8:	40001800 	.word	0x40001800

080078ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e040      	b.n	800797c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fc fde8 	bl	80044e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2224      	movs	r2, #36	; 0x24
 8007914:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0201 	bic.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fb1e 	bl	8007f68 <UART_SetConfig>
 800792c:	4603      	mov	r3, r0
 800792e:	2b01      	cmp	r3, #1
 8007930:	d101      	bne.n	8007936 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e022      	b.n	800797c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fd76 	bl	8008430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007952:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007962:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fdfd 	bl	8008574 <UART_CheckIdleState>
 800797a:	4603      	mov	r3, r0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b0ba      	sub	sp, #232	; 0xe8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80079b2:	4013      	ands	r3, r2
 80079b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d115      	bne.n	80079ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00f      	beq.n	80079ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8297 	beq.w	8007f10 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
      }
      return;
 80079ea:	e291      	b.n	8007f10 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 8117 	beq.w	8007c24 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a06:	4b85      	ldr	r3, [pc, #532]	; (8007c1c <HAL_UART_IRQHandler+0x298>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 810a 	beq.w	8007c24 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d011      	beq.n	8007a40 <HAL_UART_IRQHandler+0xbc>
 8007a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a36:	f043 0201 	orr.w	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d011      	beq.n	8007a70 <HAL_UART_IRQHandler+0xec>
 8007a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00b      	beq.n	8007a70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a66:	f043 0204 	orr.w	r2, r3, #4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d011      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x11c>
 8007a7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a96:	f043 0202 	orr.w	r2, r3, #2
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d017      	beq.n	8007adc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab0:	f003 0320 	and.w	r3, r3, #32
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007abc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad2:	f043 0208 	orr.w	r2, r3, #8
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <HAL_UART_IRQHandler+0x18a>
 8007ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00c      	beq.n	8007b0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b04:	f043 0220 	orr.w	r2, r3, #32
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 81fd 	beq.w	8007f14 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00d      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d005      	beq.n	8007b66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d04f      	beq.n	8007c06 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fe01 	bl	800876e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d141      	bne.n	8007bfe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ba6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1d9      	bne.n	8007b7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d013      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd2:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <HAL_UART_IRQHandler+0x29c>)
 8007bd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fd fff4 	bl	8005bc8 <HAL_DMA_Abort_IT>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d017      	beq.n	8007c16 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e00f      	b.n	8007c16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9a0 	bl	8007f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfc:	e00b      	b.n	8007c16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f99c 	bl	8007f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	e007      	b.n	8007c16 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f998 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c14:	e17e      	b.n	8007f14 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c16:	bf00      	nop
    return;
 8007c18:	e17c      	b.n	8007f14 <HAL_UART_IRQHandler+0x590>
 8007c1a:	bf00      	nop
 8007c1c:	04000120 	.word	0x04000120
 8007c20:	08008837 	.word	0x08008837

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 814c 	bne.w	8007ec6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8145 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 813e 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2210      	movs	r2, #16
 8007c50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b40      	cmp	r3, #64	; 0x40
 8007c5e:	f040 80b6 	bne.w	8007dce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8150 	beq.w	8007f18 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c82:	429a      	cmp	r2, r3
 8007c84:	f080 8148 	bcs.w	8007f18 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9c:	f000 8086 	beq.w	8007dac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1da      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e1      	bne.n	8007cea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e4      	bne.n	8007d6c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fd fe9e 	bl	8005ae8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f8c2 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dcc:	e0a4      	b.n	8007f18 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8096 	beq.w	8007f1c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007df0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8091 	beq.w	8007f1c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e4      	bne.n	8007dfa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3308      	adds	r3, #8
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	f023 0301 	bic.w	r3, r3, #1
 8007e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e54:	633a      	str	r2, [r7, #48]	; 0x30
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e3      	bne.n	8007e30 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f023 0310 	bic.w	r3, r3, #16
 8007e90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	69b9      	ldr	r1, [r7, #24]
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e4      	bne.n	8007e7c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f846 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ec4:	e02a      	b.n	8007f1c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01c      	beq.n	8007f20 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
    }
    return;
 8007eee:	e017      	b.n	8007f20 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d012      	beq.n	8007f22 <HAL_UART_IRQHandler+0x59e>
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00c      	beq.n	8007f22 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fcaa 	bl	8008862 <UART_EndTransmit_IT>
    return;
 8007f0e:	e008      	b.n	8007f22 <HAL_UART_IRQHandler+0x59e>
      return;
 8007f10:	bf00      	nop
 8007f12:	e006      	b.n	8007f22 <HAL_UART_IRQHandler+0x59e>
    return;
 8007f14:	bf00      	nop
 8007f16:	e004      	b.n	8007f22 <HAL_UART_IRQHandler+0x59e>
      return;
 8007f18:	bf00      	nop
 8007f1a:	e002      	b.n	8007f22 <HAL_UART_IRQHandler+0x59e>
      return;
 8007f1c:	bf00      	nop
 8007f1e:	e000      	b.n	8007f22 <HAL_UART_IRQHandler+0x59e>
    return;
 8007f20:	bf00      	nop
  }

}
 8007f22:	37e8      	adds	r7, #232	; 0xe8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4ba6      	ldr	r3, [pc, #664]	; (800822c <UART_SetConfig+0x2c4>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	6979      	ldr	r1, [r7, #20]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a94      	ldr	r2, [pc, #592]	; (8008230 <UART_SetConfig+0x2c8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d120      	bne.n	8008026 <UART_SetConfig+0xbe>
 8007fe4:	4b93      	ldr	r3, [pc, #588]	; (8008234 <UART_SetConfig+0x2cc>)
 8007fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d816      	bhi.n	8008020 <UART_SetConfig+0xb8>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0x90>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008015 	.word	0x08008015
 8008000:	0800800f 	.word	0x0800800f
 8008004:	0800801b 	.word	0x0800801b
 8008008:	2301      	movs	r3, #1
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e150      	b.n	80082b0 <UART_SetConfig+0x348>
 800800e:	2302      	movs	r3, #2
 8008010:	77fb      	strb	r3, [r7, #31]
 8008012:	e14d      	b.n	80082b0 <UART_SetConfig+0x348>
 8008014:	2304      	movs	r3, #4
 8008016:	77fb      	strb	r3, [r7, #31]
 8008018:	e14a      	b.n	80082b0 <UART_SetConfig+0x348>
 800801a:	2308      	movs	r3, #8
 800801c:	77fb      	strb	r3, [r7, #31]
 800801e:	e147      	b.n	80082b0 <UART_SetConfig+0x348>
 8008020:	2310      	movs	r3, #16
 8008022:	77fb      	strb	r3, [r7, #31]
 8008024:	e144      	b.n	80082b0 <UART_SetConfig+0x348>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a83      	ldr	r2, [pc, #524]	; (8008238 <UART_SetConfig+0x2d0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d132      	bne.n	8008096 <UART_SetConfig+0x12e>
 8008030:	4b80      	ldr	r3, [pc, #512]	; (8008234 <UART_SetConfig+0x2cc>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	f003 030c 	and.w	r3, r3, #12
 800803a:	2b0c      	cmp	r3, #12
 800803c:	d828      	bhi.n	8008090 <UART_SetConfig+0x128>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <UART_SetConfig+0xdc>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008079 	.word	0x08008079
 8008048:	08008091 	.word	0x08008091
 800804c:	08008091 	.word	0x08008091
 8008050:	08008091 	.word	0x08008091
 8008054:	08008085 	.word	0x08008085
 8008058:	08008091 	.word	0x08008091
 800805c:	08008091 	.word	0x08008091
 8008060:	08008091 	.word	0x08008091
 8008064:	0800807f 	.word	0x0800807f
 8008068:	08008091 	.word	0x08008091
 800806c:	08008091 	.word	0x08008091
 8008070:	08008091 	.word	0x08008091
 8008074:	0800808b 	.word	0x0800808b
 8008078:	2300      	movs	r3, #0
 800807a:	77fb      	strb	r3, [r7, #31]
 800807c:	e118      	b.n	80082b0 <UART_SetConfig+0x348>
 800807e:	2302      	movs	r3, #2
 8008080:	77fb      	strb	r3, [r7, #31]
 8008082:	e115      	b.n	80082b0 <UART_SetConfig+0x348>
 8008084:	2304      	movs	r3, #4
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e112      	b.n	80082b0 <UART_SetConfig+0x348>
 800808a:	2308      	movs	r3, #8
 800808c:	77fb      	strb	r3, [r7, #31]
 800808e:	e10f      	b.n	80082b0 <UART_SetConfig+0x348>
 8008090:	2310      	movs	r3, #16
 8008092:	77fb      	strb	r3, [r7, #31]
 8008094:	e10c      	b.n	80082b0 <UART_SetConfig+0x348>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a68      	ldr	r2, [pc, #416]	; (800823c <UART_SetConfig+0x2d4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d120      	bne.n	80080e2 <UART_SetConfig+0x17a>
 80080a0:	4b64      	ldr	r3, [pc, #400]	; (8008234 <UART_SetConfig+0x2cc>)
 80080a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080aa:	2b30      	cmp	r3, #48	; 0x30
 80080ac:	d013      	beq.n	80080d6 <UART_SetConfig+0x16e>
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	d814      	bhi.n	80080dc <UART_SetConfig+0x174>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d009      	beq.n	80080ca <UART_SetConfig+0x162>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d810      	bhi.n	80080dc <UART_SetConfig+0x174>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <UART_SetConfig+0x15c>
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d006      	beq.n	80080d0 <UART_SetConfig+0x168>
 80080c2:	e00b      	b.n	80080dc <UART_SetConfig+0x174>
 80080c4:	2300      	movs	r3, #0
 80080c6:	77fb      	strb	r3, [r7, #31]
 80080c8:	e0f2      	b.n	80082b0 <UART_SetConfig+0x348>
 80080ca:	2302      	movs	r3, #2
 80080cc:	77fb      	strb	r3, [r7, #31]
 80080ce:	e0ef      	b.n	80082b0 <UART_SetConfig+0x348>
 80080d0:	2304      	movs	r3, #4
 80080d2:	77fb      	strb	r3, [r7, #31]
 80080d4:	e0ec      	b.n	80082b0 <UART_SetConfig+0x348>
 80080d6:	2308      	movs	r3, #8
 80080d8:	77fb      	strb	r3, [r7, #31]
 80080da:	e0e9      	b.n	80082b0 <UART_SetConfig+0x348>
 80080dc:	2310      	movs	r3, #16
 80080de:	77fb      	strb	r3, [r7, #31]
 80080e0:	e0e6      	b.n	80082b0 <UART_SetConfig+0x348>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a56      	ldr	r2, [pc, #344]	; (8008240 <UART_SetConfig+0x2d8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d120      	bne.n	800812e <UART_SetConfig+0x1c6>
 80080ec:	4b51      	ldr	r3, [pc, #324]	; (8008234 <UART_SetConfig+0x2cc>)
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080f6:	2bc0      	cmp	r3, #192	; 0xc0
 80080f8:	d013      	beq.n	8008122 <UART_SetConfig+0x1ba>
 80080fa:	2bc0      	cmp	r3, #192	; 0xc0
 80080fc:	d814      	bhi.n	8008128 <UART_SetConfig+0x1c0>
 80080fe:	2b80      	cmp	r3, #128	; 0x80
 8008100:	d009      	beq.n	8008116 <UART_SetConfig+0x1ae>
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d810      	bhi.n	8008128 <UART_SetConfig+0x1c0>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <UART_SetConfig+0x1a8>
 800810a:	2b40      	cmp	r3, #64	; 0x40
 800810c:	d006      	beq.n	800811c <UART_SetConfig+0x1b4>
 800810e:	e00b      	b.n	8008128 <UART_SetConfig+0x1c0>
 8008110:	2300      	movs	r3, #0
 8008112:	77fb      	strb	r3, [r7, #31]
 8008114:	e0cc      	b.n	80082b0 <UART_SetConfig+0x348>
 8008116:	2302      	movs	r3, #2
 8008118:	77fb      	strb	r3, [r7, #31]
 800811a:	e0c9      	b.n	80082b0 <UART_SetConfig+0x348>
 800811c:	2304      	movs	r3, #4
 800811e:	77fb      	strb	r3, [r7, #31]
 8008120:	e0c6      	b.n	80082b0 <UART_SetConfig+0x348>
 8008122:	2308      	movs	r3, #8
 8008124:	77fb      	strb	r3, [r7, #31]
 8008126:	e0c3      	b.n	80082b0 <UART_SetConfig+0x348>
 8008128:	2310      	movs	r3, #16
 800812a:	77fb      	strb	r3, [r7, #31]
 800812c:	e0c0      	b.n	80082b0 <UART_SetConfig+0x348>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a44      	ldr	r2, [pc, #272]	; (8008244 <UART_SetConfig+0x2dc>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d125      	bne.n	8008184 <UART_SetConfig+0x21c>
 8008138:	4b3e      	ldr	r3, [pc, #248]	; (8008234 <UART_SetConfig+0x2cc>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008146:	d017      	beq.n	8008178 <UART_SetConfig+0x210>
 8008148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800814c:	d817      	bhi.n	800817e <UART_SetConfig+0x216>
 800814e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008152:	d00b      	beq.n	800816c <UART_SetConfig+0x204>
 8008154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008158:	d811      	bhi.n	800817e <UART_SetConfig+0x216>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <UART_SetConfig+0x1fe>
 800815e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008162:	d006      	beq.n	8008172 <UART_SetConfig+0x20a>
 8008164:	e00b      	b.n	800817e <UART_SetConfig+0x216>
 8008166:	2300      	movs	r3, #0
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e0a1      	b.n	80082b0 <UART_SetConfig+0x348>
 800816c:	2302      	movs	r3, #2
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e09e      	b.n	80082b0 <UART_SetConfig+0x348>
 8008172:	2304      	movs	r3, #4
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e09b      	b.n	80082b0 <UART_SetConfig+0x348>
 8008178:	2308      	movs	r3, #8
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e098      	b.n	80082b0 <UART_SetConfig+0x348>
 800817e:	2310      	movs	r3, #16
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e095      	b.n	80082b0 <UART_SetConfig+0x348>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a2f      	ldr	r2, [pc, #188]	; (8008248 <UART_SetConfig+0x2e0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d125      	bne.n	80081da <UART_SetConfig+0x272>
 800818e:	4b29      	ldr	r3, [pc, #164]	; (8008234 <UART_SetConfig+0x2cc>)
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800819c:	d017      	beq.n	80081ce <UART_SetConfig+0x266>
 800819e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081a2:	d817      	bhi.n	80081d4 <UART_SetConfig+0x26c>
 80081a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a8:	d00b      	beq.n	80081c2 <UART_SetConfig+0x25a>
 80081aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ae:	d811      	bhi.n	80081d4 <UART_SetConfig+0x26c>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <UART_SetConfig+0x254>
 80081b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b8:	d006      	beq.n	80081c8 <UART_SetConfig+0x260>
 80081ba:	e00b      	b.n	80081d4 <UART_SetConfig+0x26c>
 80081bc:	2301      	movs	r3, #1
 80081be:	77fb      	strb	r3, [r7, #31]
 80081c0:	e076      	b.n	80082b0 <UART_SetConfig+0x348>
 80081c2:	2302      	movs	r3, #2
 80081c4:	77fb      	strb	r3, [r7, #31]
 80081c6:	e073      	b.n	80082b0 <UART_SetConfig+0x348>
 80081c8:	2304      	movs	r3, #4
 80081ca:	77fb      	strb	r3, [r7, #31]
 80081cc:	e070      	b.n	80082b0 <UART_SetConfig+0x348>
 80081ce:	2308      	movs	r3, #8
 80081d0:	77fb      	strb	r3, [r7, #31]
 80081d2:	e06d      	b.n	80082b0 <UART_SetConfig+0x348>
 80081d4:	2310      	movs	r3, #16
 80081d6:	77fb      	strb	r3, [r7, #31]
 80081d8:	e06a      	b.n	80082b0 <UART_SetConfig+0x348>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a1b      	ldr	r2, [pc, #108]	; (800824c <UART_SetConfig+0x2e4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d138      	bne.n	8008256 <UART_SetConfig+0x2ee>
 80081e4:	4b13      	ldr	r3, [pc, #76]	; (8008234 <UART_SetConfig+0x2cc>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80081ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f2:	d017      	beq.n	8008224 <UART_SetConfig+0x2bc>
 80081f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f8:	d82a      	bhi.n	8008250 <UART_SetConfig+0x2e8>
 80081fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fe:	d00b      	beq.n	8008218 <UART_SetConfig+0x2b0>
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008204:	d824      	bhi.n	8008250 <UART_SetConfig+0x2e8>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <UART_SetConfig+0x2aa>
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	d006      	beq.n	800821e <UART_SetConfig+0x2b6>
 8008210:	e01e      	b.n	8008250 <UART_SetConfig+0x2e8>
 8008212:	2300      	movs	r3, #0
 8008214:	77fb      	strb	r3, [r7, #31]
 8008216:	e04b      	b.n	80082b0 <UART_SetConfig+0x348>
 8008218:	2302      	movs	r3, #2
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e048      	b.n	80082b0 <UART_SetConfig+0x348>
 800821e:	2304      	movs	r3, #4
 8008220:	77fb      	strb	r3, [r7, #31]
 8008222:	e045      	b.n	80082b0 <UART_SetConfig+0x348>
 8008224:	2308      	movs	r3, #8
 8008226:	77fb      	strb	r3, [r7, #31]
 8008228:	e042      	b.n	80082b0 <UART_SetConfig+0x348>
 800822a:	bf00      	nop
 800822c:	efff69f3 	.word	0xefff69f3
 8008230:	40011000 	.word	0x40011000
 8008234:	40023800 	.word	0x40023800
 8008238:	40004400 	.word	0x40004400
 800823c:	40004800 	.word	0x40004800
 8008240:	40004c00 	.word	0x40004c00
 8008244:	40005000 	.word	0x40005000
 8008248:	40011400 	.word	0x40011400
 800824c:	40007800 	.word	0x40007800
 8008250:	2310      	movs	r3, #16
 8008252:	77fb      	strb	r3, [r7, #31]
 8008254:	e02c      	b.n	80082b0 <UART_SetConfig+0x348>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a72      	ldr	r2, [pc, #456]	; (8008424 <UART_SetConfig+0x4bc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d125      	bne.n	80082ac <UART_SetConfig+0x344>
 8008260:	4b71      	ldr	r3, [pc, #452]	; (8008428 <UART_SetConfig+0x4c0>)
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008266:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800826a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800826e:	d017      	beq.n	80082a0 <UART_SetConfig+0x338>
 8008270:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008274:	d817      	bhi.n	80082a6 <UART_SetConfig+0x33e>
 8008276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827a:	d00b      	beq.n	8008294 <UART_SetConfig+0x32c>
 800827c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008280:	d811      	bhi.n	80082a6 <UART_SetConfig+0x33e>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <UART_SetConfig+0x326>
 8008286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800828a:	d006      	beq.n	800829a <UART_SetConfig+0x332>
 800828c:	e00b      	b.n	80082a6 <UART_SetConfig+0x33e>
 800828e:	2300      	movs	r3, #0
 8008290:	77fb      	strb	r3, [r7, #31]
 8008292:	e00d      	b.n	80082b0 <UART_SetConfig+0x348>
 8008294:	2302      	movs	r3, #2
 8008296:	77fb      	strb	r3, [r7, #31]
 8008298:	e00a      	b.n	80082b0 <UART_SetConfig+0x348>
 800829a:	2304      	movs	r3, #4
 800829c:	77fb      	strb	r3, [r7, #31]
 800829e:	e007      	b.n	80082b0 <UART_SetConfig+0x348>
 80082a0:	2308      	movs	r3, #8
 80082a2:	77fb      	strb	r3, [r7, #31]
 80082a4:	e004      	b.n	80082b0 <UART_SetConfig+0x348>
 80082a6:	2310      	movs	r3, #16
 80082a8:	77fb      	strb	r3, [r7, #31]
 80082aa:	e001      	b.n	80082b0 <UART_SetConfig+0x348>
 80082ac:	2310      	movs	r3, #16
 80082ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b8:	d15b      	bne.n	8008372 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80082ba:	7ffb      	ldrb	r3, [r7, #31]
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d828      	bhi.n	8008312 <UART_SetConfig+0x3aa>
 80082c0:	a201      	add	r2, pc, #4	; (adr r2, 80082c8 <UART_SetConfig+0x360>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082ed 	.word	0x080082ed
 80082cc:	080082f5 	.word	0x080082f5
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	08008313 	.word	0x08008313
 80082d8:	08008303 	.word	0x08008303
 80082dc:	08008313 	.word	0x08008313
 80082e0:	08008313 	.word	0x08008313
 80082e4:	08008313 	.word	0x08008313
 80082e8:	0800830b 	.word	0x0800830b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082ec:	f7fe fb06 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 80082f0:	61b8      	str	r0, [r7, #24]
        break;
 80082f2:	e013      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082f4:	f7fe fb16 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 80082f8:	61b8      	str	r0, [r7, #24]
        break;
 80082fa:	e00f      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082fc:	4b4b      	ldr	r3, [pc, #300]	; (800842c <UART_SetConfig+0x4c4>)
 80082fe:	61bb      	str	r3, [r7, #24]
        break;
 8008300:	e00c      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008302:	f7fe fa29 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 8008306:	61b8      	str	r0, [r7, #24]
        break;
 8008308:	e008      	b.n	800831c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800830e:	61bb      	str	r3, [r7, #24]
        break;
 8008310:	e004      	b.n	800831c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	77bb      	strb	r3, [r7, #30]
        break;
 800831a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d074      	beq.n	800840c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	005a      	lsls	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	441a      	add	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d916      	bls.n	800836c <UART_SetConfig+0x404>
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008344:	d212      	bcs.n	800836c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f023 030f 	bic.w	r3, r3, #15
 800834e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	b29b      	uxth	r3, r3
 8008356:	f003 0307 	and.w	r3, r3, #7
 800835a:	b29a      	uxth	r2, r3
 800835c:	89fb      	ldrh	r3, [r7, #14]
 800835e:	4313      	orrs	r3, r2
 8008360:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	89fa      	ldrh	r2, [r7, #14]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	e04f      	b.n	800840c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	77bb      	strb	r3, [r7, #30]
 8008370:	e04c      	b.n	800840c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008372:	7ffb      	ldrb	r3, [r7, #31]
 8008374:	2b08      	cmp	r3, #8
 8008376:	d828      	bhi.n	80083ca <UART_SetConfig+0x462>
 8008378:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <UART_SetConfig+0x418>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
 800838c:	080083cb 	.word	0x080083cb
 8008390:	080083bb 	.word	0x080083bb
 8008394:	080083cb 	.word	0x080083cb
 8008398:	080083cb 	.word	0x080083cb
 800839c:	080083cb 	.word	0x080083cb
 80083a0:	080083c3 	.word	0x080083c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a4:	f7fe faaa 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 80083a8:	61b8      	str	r0, [r7, #24]
        break;
 80083aa:	e013      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fe faba 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 80083b0:	61b8      	str	r0, [r7, #24]
        break;
 80083b2:	e00f      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <UART_SetConfig+0x4c4>)
 80083b6:	61bb      	str	r3, [r7, #24]
        break;
 80083b8:	e00c      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ba:	f7fe f9cd 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 80083be:	61b8      	str	r0, [r7, #24]
        break;
 80083c0:	e008      	b.n	80083d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c6:	61bb      	str	r3, [r7, #24]
        break;
 80083c8:	e004      	b.n	80083d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	77bb      	strb	r3, [r7, #30]
        break;
 80083d2:	bf00      	nop
    }

    if (pclk != 0U)
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d018      	beq.n	800840c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	085a      	lsrs	r2, r3, #1
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	441a      	add	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	2b0f      	cmp	r3, #15
 80083f2:	d909      	bls.n	8008408 <UART_SetConfig+0x4a0>
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fa:	d205      	bcs.n	8008408 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60da      	str	r2, [r3, #12]
 8008406:	e001      	b.n	800840c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008418:	7fbb      	ldrb	r3, [r7, #30]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	40007c00 	.word	0x40007c00
 8008428:	40023800 	.word	0x40023800
 800842c:	00f42400 	.word	0x00f42400

08008430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	f003 0320 	and.w	r3, r3, #32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	430a      	orrs	r2, r1
 8008502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01a      	beq.n	8008546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800852e:	d10a      	bne.n	8008546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	605a      	str	r2, [r3, #4]
  }
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af02      	add	r7, sp, #8
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008584:	f7fc fb84 	bl	8004c90 <HAL_GetTick>
 8008588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0308 	and.w	r3, r3, #8
 8008594:	2b08      	cmp	r3, #8
 8008596:	d10e      	bne.n	80085b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f81b 	bl	80085e2 <UART_WaitOnFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e011      	b.n	80085da <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b09c      	sub	sp, #112	; 0x70
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	60f8      	str	r0, [r7, #12]
 80085ea:	60b9      	str	r1, [r7, #8]
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	4613      	mov	r3, r2
 80085f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f2:	e0a7      	b.n	8008744 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085fa:	f000 80a3 	beq.w	8008744 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085fe:	f7fc fb47 	bl	8004c90 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800860a:	429a      	cmp	r2, r3
 800860c:	d302      	bcc.n	8008614 <UART_WaitOnFlagUntilTimeout+0x32>
 800860e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008610:	2b00      	cmp	r3, #0
 8008612:	d13f      	bne.n	8008694 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008628:	667b      	str	r3, [r7, #100]	; 0x64
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008634:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e6      	bne.n	8008614 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3308      	adds	r3, #8
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	663b      	str	r3, [r7, #96]	; 0x60
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008666:	64ba      	str	r2, [r7, #72]	; 0x48
 8008668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800866c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e5      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e068      	b.n	8008766 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d050      	beq.n	8008744 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b0:	d148      	bne.n	8008744 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c4:	e853 3f00 	ldrex	r3, [r3]
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
 80086dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e6      	bne.n	80086bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	613b      	str	r3, [r7, #16]
   return(result);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f023 0301 	bic.w	r3, r3, #1
 8008704:	66bb      	str	r3, [r7, #104]	; 0x68
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800870e:	623a      	str	r2, [r7, #32]
 8008710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	69f9      	ldr	r1, [r7, #28]
 8008714:	6a3a      	ldr	r2, [r7, #32]
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	61bb      	str	r3, [r7, #24]
   return(result);
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e5      	bne.n	80086ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2220      	movs	r2, #32
 8008726:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2220      	movs	r2, #32
 8008734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e010      	b.n	8008766 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4013      	ands	r3, r2
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	bf0c      	ite	eq
 8008754:	2301      	moveq	r3, #1
 8008756:	2300      	movne	r3, #0
 8008758:	b2db      	uxtb	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	429a      	cmp	r2, r3
 8008760:	f43f af48 	beq.w	80085f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3770      	adds	r7, #112	; 0x70
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800876e:	b480      	push	{r7}
 8008770:	b095      	sub	sp, #84	; 0x54
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800878a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	643b      	str	r3, [r7, #64]	; 0x40
 8008796:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800879a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d118      	bne.n	8008816 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	e853 3f00 	ldrex	r3, [r3]
 80087f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f023 0310 	bic.w	r3, r3, #16
 80087f8:	647b      	str	r3, [r7, #68]	; 0x44
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008806:	6979      	ldr	r1, [r7, #20]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	e841 2300 	strex	r3, r2, [r1]
 800880e:	613b      	str	r3, [r7, #16]
   return(result);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1e6      	bne.n	80087e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2220      	movs	r2, #32
 800881a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	669a      	str	r2, [r3, #104]	; 0x68
}
 800882a:	bf00      	nop
 800882c:	3754      	adds	r7, #84	; 0x54
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fb71 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60bb      	str	r3, [r7, #8]
   return(result);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	613b      	str	r3, [r7, #16]
   return(result);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e6      	bne.n	800886a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff fb3d 	bl	8007f28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ae:	bf00      	nop
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	6812      	ldr	r2, [r2, #0]
 80088d0:	f023 0101 	bic.w	r1, r3, #1
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b08      	cmp	r3, #8
 80088e0:	d102      	bne.n	80088e8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80088e2:	2340      	movs	r3, #64	; 0x40
 80088e4:	617b      	str	r3, [r7, #20]
 80088e6:	e001      	b.n	80088ec <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80088f8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80088fe:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008904:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800890a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008910:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008916:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800891c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008922:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008928:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8008950:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <FMC_NORSRAM_Init+0x11c>)
 8008952:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800895a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008962:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800896a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	43db      	mvns	r3, r3
 800897a:	ea02 0103 	and.w	r1, r2, r3
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	4319      	orrs	r1, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008994:	d10c      	bne.n	80089b0 <FMC_NORSRAM_Init+0xf8>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d008      	beq.n	80089b0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d006      	beq.n	80089c6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	0008fb7f 	.word	0x0008fb7f

080089d8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	431a      	orrs	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	431a      	orrs	r2, r3
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	051b      	lsls	r3, r3, #20
 8008a16:	431a      	orrs	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	3b02      	subs	r3, #2
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	431a      	orrs	r2, r3
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	4319      	orrs	r1, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a40:	d113      	bne.n	8008a6a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a4a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	051b      	lsls	r3, r3, #20
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	431a      	orrs	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a8c:	d11d      	bne.n	8008aca <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a96:	4b13      	ldr	r3, [pc, #76]	; (8008ae4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	6811      	ldr	r1, [r2, #0]
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	6852      	ldr	r2, [r2, #4]
 8008aa2:	0112      	lsls	r2, r2, #4
 8008aa4:	4311      	orrs	r1, r2
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	6892      	ldr	r2, [r2, #8]
 8008aaa:	0212      	lsls	r2, r2, #8
 8008aac:	4311      	orrs	r1, r2
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	6992      	ldr	r2, [r2, #24]
 8008ab2:	4311      	orrs	r1, r2
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	68d2      	ldr	r2, [r2, #12]
 8008ab8:	0412      	lsls	r2, r2, #16
 8008aba:	430a      	orrs	r2, r1
 8008abc:	ea43 0102 	orr.w	r1, r3, r2
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008ac8:	e005      	b.n	8008ad6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	cff00000 	.word	0xcff00000

08008ae8 <_ZdlPvj>:
 8008ae8:	f000 b817 	b.w	8008b1a <_ZdlPv>

08008aec <_Znwj>:
 8008aec:	2801      	cmp	r0, #1
 8008aee:	bf38      	it	cc
 8008af0:	2001      	movcc	r0, #1
 8008af2:	b510      	push	{r4, lr}
 8008af4:	4604      	mov	r4, r0
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 f84c 	bl	8008b94 <malloc>
 8008afc:	b930      	cbnz	r0, 8008b0c <_Znwj+0x20>
 8008afe:	f000 f80f 	bl	8008b20 <_ZSt15get_new_handlerv>
 8008b02:	b908      	cbnz	r0, 8008b08 <_Znwj+0x1c>
 8008b04:	f000 f814 	bl	8008b30 <abort>
 8008b08:	4780      	blx	r0
 8008b0a:	e7f4      	b.n	8008af6 <_Znwj+0xa>
 8008b0c:	bd10      	pop	{r4, pc}

08008b0e <_ZSt17__throw_bad_allocv>:
 8008b0e:	b508      	push	{r3, lr}
 8008b10:	f000 f80e 	bl	8008b30 <abort>

08008b14 <_ZSt20__throw_length_errorPKc>:
 8008b14:	b508      	push	{r3, lr}
 8008b16:	f000 f80b 	bl	8008b30 <abort>

08008b1a <_ZdlPv>:
 8008b1a:	f000 b843 	b.w	8008ba4 <free>
	...

08008b20 <_ZSt15get_new_handlerv>:
 8008b20:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <_ZSt15get_new_handlerv+0xc>)
 8008b22:	6818      	ldr	r0, [r3, #0]
 8008b24:	f3bf 8f5b 	dmb	ish
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	2000044c 	.word	0x2000044c

08008b30 <abort>:
 8008b30:	b508      	push	{r3, lr}
 8008b32:	2006      	movs	r0, #6
 8008b34:	f000 f978 	bl	8008e28 <raise>
 8008b38:	2001      	movs	r0, #1
 8008b3a:	f7fc f80d 	bl	8004b58 <_exit>
	...

08008b40 <__errno>:
 8008b40:	4b01      	ldr	r3, [pc, #4]	; (8008b48 <__errno+0x8>)
 8008b42:	6818      	ldr	r0, [r3, #0]
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	2000000c 	.word	0x2000000c

08008b4c <__libc_init_array>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	4d0d      	ldr	r5, [pc, #52]	; (8008b84 <__libc_init_array+0x38>)
 8008b50:	4c0d      	ldr	r4, [pc, #52]	; (8008b88 <__libc_init_array+0x3c>)
 8008b52:	1b64      	subs	r4, r4, r5
 8008b54:	10a4      	asrs	r4, r4, #2
 8008b56:	2600      	movs	r6, #0
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	d109      	bne.n	8008b70 <__libc_init_array+0x24>
 8008b5c:	4d0b      	ldr	r5, [pc, #44]	; (8008b8c <__libc_init_array+0x40>)
 8008b5e:	4c0c      	ldr	r4, [pc, #48]	; (8008b90 <__libc_init_array+0x44>)
 8008b60:	f000 f98c 	bl	8008e7c <_init>
 8008b64:	1b64      	subs	r4, r4, r5
 8008b66:	10a4      	asrs	r4, r4, #2
 8008b68:	2600      	movs	r6, #0
 8008b6a:	42a6      	cmp	r6, r4
 8008b6c:	d105      	bne.n	8008b7a <__libc_init_array+0x2e>
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b74:	4798      	blx	r3
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7ee      	b.n	8008b58 <__libc_init_array+0xc>
 8008b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7e:	4798      	blx	r3
 8008b80:	3601      	adds	r6, #1
 8008b82:	e7f2      	b.n	8008b6a <__libc_init_array+0x1e>
 8008b84:	08008ef0 	.word	0x08008ef0
 8008b88:	08008ef0 	.word	0x08008ef0
 8008b8c:	08008ef0 	.word	0x08008ef0
 8008b90:	08008ef4 	.word	0x08008ef4

08008b94 <malloc>:
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <malloc+0xc>)
 8008b96:	4601      	mov	r1, r0
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	f000 b899 	b.w	8008cd0 <_malloc_r>
 8008b9e:	bf00      	nop
 8008ba0:	2000000c 	.word	0x2000000c

08008ba4 <free>:
 8008ba4:	4b02      	ldr	r3, [pc, #8]	; (8008bb0 <free+0xc>)
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f000 b825 	b.w	8008bf8 <_free_r>
 8008bae:	bf00      	nop
 8008bb0:	2000000c 	.word	0x2000000c

08008bb4 <memmove>:
 8008bb4:	4288      	cmp	r0, r1
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	eb01 0402 	add.w	r4, r1, r2
 8008bbc:	d902      	bls.n	8008bc4 <memmove+0x10>
 8008bbe:	4284      	cmp	r4, r0
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	d807      	bhi.n	8008bd4 <memmove+0x20>
 8008bc4:	1e43      	subs	r3, r0, #1
 8008bc6:	42a1      	cmp	r1, r4
 8008bc8:	d008      	beq.n	8008bdc <memmove+0x28>
 8008bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bd2:	e7f8      	b.n	8008bc6 <memmove+0x12>
 8008bd4:	4402      	add	r2, r0
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	428a      	cmp	r2, r1
 8008bda:	d100      	bne.n	8008bde <memmove+0x2a>
 8008bdc:	bd10      	pop	{r4, pc}
 8008bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008be6:	e7f7      	b.n	8008bd8 <memmove+0x24>

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <_free_r>:
 8008bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bfa:	2900      	cmp	r1, #0
 8008bfc:	d044      	beq.n	8008c88 <_free_r+0x90>
 8008bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c02:	9001      	str	r0, [sp, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f1a1 0404 	sub.w	r4, r1, #4
 8008c0a:	bfb8      	it	lt
 8008c0c:	18e4      	addlt	r4, r4, r3
 8008c0e:	f000 f927 	bl	8008e60 <__malloc_lock>
 8008c12:	4a1e      	ldr	r2, [pc, #120]	; (8008c8c <_free_r+0x94>)
 8008c14:	9801      	ldr	r0, [sp, #4]
 8008c16:	6813      	ldr	r3, [r2, #0]
 8008c18:	b933      	cbnz	r3, 8008c28 <_free_r+0x30>
 8008c1a:	6063      	str	r3, [r4, #4]
 8008c1c:	6014      	str	r4, [r2, #0]
 8008c1e:	b003      	add	sp, #12
 8008c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c24:	f000 b922 	b.w	8008e6c <__malloc_unlock>
 8008c28:	42a3      	cmp	r3, r4
 8008c2a:	d908      	bls.n	8008c3e <_free_r+0x46>
 8008c2c:	6825      	ldr	r5, [r4, #0]
 8008c2e:	1961      	adds	r1, r4, r5
 8008c30:	428b      	cmp	r3, r1
 8008c32:	bf01      	itttt	eq
 8008c34:	6819      	ldreq	r1, [r3, #0]
 8008c36:	685b      	ldreq	r3, [r3, #4]
 8008c38:	1949      	addeq	r1, r1, r5
 8008c3a:	6021      	streq	r1, [r4, #0]
 8008c3c:	e7ed      	b.n	8008c1a <_free_r+0x22>
 8008c3e:	461a      	mov	r2, r3
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	b10b      	cbz	r3, 8008c48 <_free_r+0x50>
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	d9fa      	bls.n	8008c3e <_free_r+0x46>
 8008c48:	6811      	ldr	r1, [r2, #0]
 8008c4a:	1855      	adds	r5, r2, r1
 8008c4c:	42a5      	cmp	r5, r4
 8008c4e:	d10b      	bne.n	8008c68 <_free_r+0x70>
 8008c50:	6824      	ldr	r4, [r4, #0]
 8008c52:	4421      	add	r1, r4
 8008c54:	1854      	adds	r4, r2, r1
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	6011      	str	r1, [r2, #0]
 8008c5a:	d1e0      	bne.n	8008c1e <_free_r+0x26>
 8008c5c:	681c      	ldr	r4, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	6053      	str	r3, [r2, #4]
 8008c62:	4421      	add	r1, r4
 8008c64:	6011      	str	r1, [r2, #0]
 8008c66:	e7da      	b.n	8008c1e <_free_r+0x26>
 8008c68:	d902      	bls.n	8008c70 <_free_r+0x78>
 8008c6a:	230c      	movs	r3, #12
 8008c6c:	6003      	str	r3, [r0, #0]
 8008c6e:	e7d6      	b.n	8008c1e <_free_r+0x26>
 8008c70:	6825      	ldr	r5, [r4, #0]
 8008c72:	1961      	adds	r1, r4, r5
 8008c74:	428b      	cmp	r3, r1
 8008c76:	bf04      	itt	eq
 8008c78:	6819      	ldreq	r1, [r3, #0]
 8008c7a:	685b      	ldreq	r3, [r3, #4]
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	bf04      	itt	eq
 8008c80:	1949      	addeq	r1, r1, r5
 8008c82:	6021      	streq	r1, [r4, #0]
 8008c84:	6054      	str	r4, [r2, #4]
 8008c86:	e7ca      	b.n	8008c1e <_free_r+0x26>
 8008c88:	b003      	add	sp, #12
 8008c8a:	bd30      	pop	{r4, r5, pc}
 8008c8c:	20000450 	.word	0x20000450

08008c90 <sbrk_aligned>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	4e0e      	ldr	r6, [pc, #56]	; (8008ccc <sbrk_aligned+0x3c>)
 8008c94:	460c      	mov	r4, r1
 8008c96:	6831      	ldr	r1, [r6, #0]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	b911      	cbnz	r1, 8008ca2 <sbrk_aligned+0x12>
 8008c9c:	f000 f88c 	bl	8008db8 <_sbrk_r>
 8008ca0:	6030      	str	r0, [r6, #0]
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f000 f887 	bl	8008db8 <_sbrk_r>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d00a      	beq.n	8008cc4 <sbrk_aligned+0x34>
 8008cae:	1cc4      	adds	r4, r0, #3
 8008cb0:	f024 0403 	bic.w	r4, r4, #3
 8008cb4:	42a0      	cmp	r0, r4
 8008cb6:	d007      	beq.n	8008cc8 <sbrk_aligned+0x38>
 8008cb8:	1a21      	subs	r1, r4, r0
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 f87c 	bl	8008db8 <_sbrk_r>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d101      	bne.n	8008cc8 <sbrk_aligned+0x38>
 8008cc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cc8:	4620      	mov	r0, r4
 8008cca:	bd70      	pop	{r4, r5, r6, pc}
 8008ccc:	20000454 	.word	0x20000454

08008cd0 <_malloc_r>:
 8008cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd4:	1ccd      	adds	r5, r1, #3
 8008cd6:	f025 0503 	bic.w	r5, r5, #3
 8008cda:	3508      	adds	r5, #8
 8008cdc:	2d0c      	cmp	r5, #12
 8008cde:	bf38      	it	cc
 8008ce0:	250c      	movcc	r5, #12
 8008ce2:	2d00      	cmp	r5, #0
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	db01      	blt.n	8008cec <_malloc_r+0x1c>
 8008ce8:	42a9      	cmp	r1, r5
 8008cea:	d905      	bls.n	8008cf8 <_malloc_r+0x28>
 8008cec:	230c      	movs	r3, #12
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	2600      	movs	r6, #0
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cf8:	4e2e      	ldr	r6, [pc, #184]	; (8008db4 <_malloc_r+0xe4>)
 8008cfa:	f000 f8b1 	bl	8008e60 <__malloc_lock>
 8008cfe:	6833      	ldr	r3, [r6, #0]
 8008d00:	461c      	mov	r4, r3
 8008d02:	bb34      	cbnz	r4, 8008d52 <_malloc_r+0x82>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7ff ffc2 	bl	8008c90 <sbrk_aligned>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	4604      	mov	r4, r0
 8008d10:	d14d      	bne.n	8008dae <_malloc_r+0xde>
 8008d12:	6834      	ldr	r4, [r6, #0]
 8008d14:	4626      	mov	r6, r4
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	d140      	bne.n	8008d9c <_malloc_r+0xcc>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4638      	mov	r0, r7
 8008d20:	eb04 0803 	add.w	r8, r4, r3
 8008d24:	f000 f848 	bl	8008db8 <_sbrk_r>
 8008d28:	4580      	cmp	r8, r0
 8008d2a:	d13a      	bne.n	8008da2 <_malloc_r+0xd2>
 8008d2c:	6821      	ldr	r1, [r4, #0]
 8008d2e:	3503      	adds	r5, #3
 8008d30:	1a6d      	subs	r5, r5, r1
 8008d32:	f025 0503 	bic.w	r5, r5, #3
 8008d36:	3508      	adds	r5, #8
 8008d38:	2d0c      	cmp	r5, #12
 8008d3a:	bf38      	it	cc
 8008d3c:	250c      	movcc	r5, #12
 8008d3e:	4629      	mov	r1, r5
 8008d40:	4638      	mov	r0, r7
 8008d42:	f7ff ffa5 	bl	8008c90 <sbrk_aligned>
 8008d46:	3001      	adds	r0, #1
 8008d48:	d02b      	beq.n	8008da2 <_malloc_r+0xd2>
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	442b      	add	r3, r5
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	e00e      	b.n	8008d70 <_malloc_r+0xa0>
 8008d52:	6822      	ldr	r2, [r4, #0]
 8008d54:	1b52      	subs	r2, r2, r5
 8008d56:	d41e      	bmi.n	8008d96 <_malloc_r+0xc6>
 8008d58:	2a0b      	cmp	r2, #11
 8008d5a:	d916      	bls.n	8008d8a <_malloc_r+0xba>
 8008d5c:	1961      	adds	r1, r4, r5
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	6025      	str	r5, [r4, #0]
 8008d62:	bf18      	it	ne
 8008d64:	6059      	strne	r1, [r3, #4]
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	bf08      	it	eq
 8008d6a:	6031      	streq	r1, [r6, #0]
 8008d6c:	5162      	str	r2, [r4, r5]
 8008d6e:	604b      	str	r3, [r1, #4]
 8008d70:	4638      	mov	r0, r7
 8008d72:	f104 060b 	add.w	r6, r4, #11
 8008d76:	f000 f879 	bl	8008e6c <__malloc_unlock>
 8008d7a:	f026 0607 	bic.w	r6, r6, #7
 8008d7e:	1d23      	adds	r3, r4, #4
 8008d80:	1af2      	subs	r2, r6, r3
 8008d82:	d0b6      	beq.n	8008cf2 <_malloc_r+0x22>
 8008d84:	1b9b      	subs	r3, r3, r6
 8008d86:	50a3      	str	r3, [r4, r2]
 8008d88:	e7b3      	b.n	8008cf2 <_malloc_r+0x22>
 8008d8a:	6862      	ldr	r2, [r4, #4]
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	bf0c      	ite	eq
 8008d90:	6032      	streq	r2, [r6, #0]
 8008d92:	605a      	strne	r2, [r3, #4]
 8008d94:	e7ec      	b.n	8008d70 <_malloc_r+0xa0>
 8008d96:	4623      	mov	r3, r4
 8008d98:	6864      	ldr	r4, [r4, #4]
 8008d9a:	e7b2      	b.n	8008d02 <_malloc_r+0x32>
 8008d9c:	4634      	mov	r4, r6
 8008d9e:	6876      	ldr	r6, [r6, #4]
 8008da0:	e7b9      	b.n	8008d16 <_malloc_r+0x46>
 8008da2:	230c      	movs	r3, #12
 8008da4:	603b      	str	r3, [r7, #0]
 8008da6:	4638      	mov	r0, r7
 8008da8:	f000 f860 	bl	8008e6c <__malloc_unlock>
 8008dac:	e7a1      	b.n	8008cf2 <_malloc_r+0x22>
 8008dae:	6025      	str	r5, [r4, #0]
 8008db0:	e7de      	b.n	8008d70 <_malloc_r+0xa0>
 8008db2:	bf00      	nop
 8008db4:	20000450 	.word	0x20000450

08008db8 <_sbrk_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d06      	ldr	r5, [pc, #24]	; (8008dd4 <_sbrk_r+0x1c>)
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	f7fb fed2 	bl	8004b6c <_sbrk>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_sbrk_r+0x1a>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_sbrk_r+0x1a>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000458 	.word	0x20000458

08008dd8 <_raise_r>:
 8008dd8:	291f      	cmp	r1, #31
 8008dda:	b538      	push	{r3, r4, r5, lr}
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
 8008de0:	d904      	bls.n	8008dec <_raise_r+0x14>
 8008de2:	2316      	movs	r3, #22
 8008de4:	6003      	str	r3, [r0, #0]
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dea:	bd38      	pop	{r3, r4, r5, pc}
 8008dec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dee:	b112      	cbz	r2, 8008df6 <_raise_r+0x1e>
 8008df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008df4:	b94b      	cbnz	r3, 8008e0a <_raise_r+0x32>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f830 	bl	8008e5c <_getpid_r>
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4620      	mov	r0, r4
 8008e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e06:	f000 b817 	b.w	8008e38 <_kill_r>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d00a      	beq.n	8008e24 <_raise_r+0x4c>
 8008e0e:	1c59      	adds	r1, r3, #1
 8008e10:	d103      	bne.n	8008e1a <_raise_r+0x42>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	2001      	movs	r0, #1
 8008e18:	e7e7      	b.n	8008dea <_raise_r+0x12>
 8008e1a:	2400      	movs	r4, #0
 8008e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e20:	4628      	mov	r0, r5
 8008e22:	4798      	blx	r3
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7e0      	b.n	8008dea <_raise_r+0x12>

08008e28 <raise>:
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <raise+0xc>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f7ff bfd3 	b.w	8008dd8 <_raise_r>
 8008e32:	bf00      	nop
 8008e34:	2000000c 	.word	0x2000000c

08008e38 <_kill_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d07      	ldr	r5, [pc, #28]	; (8008e58 <_kill_r+0x20>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	f7fb fe77 	bl	8004b38 <_kill>
 8008e4a:	1c43      	adds	r3, r0, #1
 8008e4c:	d102      	bne.n	8008e54 <_kill_r+0x1c>
 8008e4e:	682b      	ldr	r3, [r5, #0]
 8008e50:	b103      	cbz	r3, 8008e54 <_kill_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd38      	pop	{r3, r4, r5, pc}
 8008e56:	bf00      	nop
 8008e58:	20000458 	.word	0x20000458

08008e5c <_getpid_r>:
 8008e5c:	f7fb be64 	b.w	8004b28 <_getpid>

08008e60 <__malloc_lock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__malloc_lock+0x8>)
 8008e62:	f000 b809 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	2000045c 	.word	0x2000045c

08008e6c <__malloc_unlock>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__malloc_unlock+0x8>)
 8008e6e:	f000 b804 	b.w	8008e7a <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	2000045c 	.word	0x2000045c

08008e78 <__retarget_lock_acquire_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <__retarget_lock_release_recursive>:
 8008e7a:	4770      	bx	lr

08008e7c <_init>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr

08008e88 <_fini>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	bf00      	nop
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr
